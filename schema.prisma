generator client {
  provider      = "prisma-client-js"
  output        = "./node_modules/.prisma/client"
  binaryTargets = ["native", "linux-musl", "linux-musl-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x", "darwin", "darwin-arm64"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Analytics {
  id         String          @id
  entityType EntityType
  entityId   String
  period     AnalyticsPeriod
  metrics    String
  createdAt  DateTime        @default(now())
  updatedAt  DateTime

  @@unique([entityType, entityId, period])
}

model Connection {
  id                                             String       @id
  sourceId                                       String
  targetId                                       String
  condition                                      String?
  WorkflowNode_Connection_sourceIdToWorkflowNode WorkflowNode @relation("Connection_sourceIdToWorkflowNode", fields: [sourceId], references: [id], onDelete: Cascade)
  WorkflowNode_Connection_targetIdToWorkflowNode WorkflowNode @relation("Connection_targetIdToWorkflowNode", fields: [targetId], references: [id], onDelete: Cascade)

  @@unique([sourceId, targetId])
}

model Contact {
  id               String             @id
  email            String?
  phone            String?
  firstName        String?
  lastName         String?
  company          String?
  jobTitle         String?
  address          String?
  city             String?
  state            String?
  country          String?
  postalCode       String?
  notes            String?
  tagsString       String?
  source           String?
  status           ContactStatus      @default(ACTIVE)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  createdById      String
  createdBy        User               @relation("UserToContact", fields: [createdById], references: [id])
  EmailActivity    EmailActivity[]
  ListMember       ListMember[]
  SMSActivity      SMSActivity[]
  WhatsAppActivity WhatsAppActivity[]
}

model EmailActivity {
  id            String        @id
  campaignId    String
  contactId     String
  type          ActivityType
  timestamp     DateTime      @default(now())
  metadata      String?
  EmailCampaign EmailCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  Contact       Contact       @relation(fields: [contactId], references: [id], onDelete: Cascade)
}

model EmailCampaign {
  id            String          @id
  name          String
  description   String?
  subject       String
  from          String
  replyTo       String?
  templateId    String?
  content       String?
  design        String?
  status        CampaignStatus  @default(DRAFT)
  scheduledFor  DateTime?
  sentAt        DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  createdById   String
  EmailActivity EmailActivity[]
  createdBy     User            @relation("UserToEmailCampaign", fields: [createdById], references: [id])
  EmailTemplate EmailTemplate?  @relation(fields: [templateId], references: [id])
  List          List[]          @relation("CampaignLists")
  Segment       Segment[]       @relation("CampaignSegments")
}

model EmailTemplate {
  id            String          @id
  name          String
  description   String?
  subject       String
  content       String
  design        String?
  previewText   String?
  category      String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  createdById   String
  EmailCampaign EmailCampaign[]
  createdBy     User            @relation("UserToEmailTemplate", fields: [createdById], references: [id])
}

model IntegrationConnection {
  id        String           @id
  name      String
  type      IntegrationType
  config    String
  status    ConnectionStatus @default(INACTIVE)
  createdAt DateTime         @default(now())
  updatedAt DateTime
}

model List {
  id               String             @id
  name             String
  description      String?
  type             ListType           @default(STATIC)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  createdById      String
  createdBy        User               @relation("UserToList", fields: [createdById], references: [id])
  ListMember       ListMember[]
  EmailCampaign    EmailCampaign[]    @relation("CampaignLists")
  SMSCampaign      SMSCampaign[]      @relation("SMSCampaignLists")
  WhatsAppCampaign WhatsAppCampaign[] @relation("WACampaignLists")
}

model ListMember {
  id        String   @id
  listId    String
  contactId String
  addedAt   DateTime @default(now())
  Contact   Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  List      List     @relation(fields: [listId], references: [id], onDelete: Cascade)

  @@unique([listId, contactId])
}

model SMSActivity {
  id          String       @id
  campaignId  String
  contactId   String
  type        ActivityType
  timestamp   DateTime     @default(now())
  metadata    String?
  SMSCampaign SMSCampaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  Contact     Contact      @relation(fields: [contactId], references: [id], onDelete: Cascade)
}

model SMSCampaign {
  id           String         @id
  name         String
  description  String?
  from         String
  templateId   String?
  content      String?
  status       CampaignStatus @default(DRAFT)
  scheduledFor DateTime?
  sentAt       DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  createdById  String
  SMSActivity  SMSActivity[]
  createdBy    User           @relation("UserToSMSCampaign", fields: [createdById], references: [id])
  SMSTemplate  SMSTemplate?   @relation(fields: [templateId], references: [id])
  List         List[]         @relation("SMSCampaignLists")
  Segment      Segment[]      @relation("SMSCampaignSegments")
}

model SMSTemplate {
  id          String        @id
  name        String
  content     String
  variables   String
  category    String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  createdById String
  SMSCampaign SMSCampaign[]
  createdBy   User          @relation("UserToSMSTemplate", fields: [createdById], references: [id])
}

model Segment {
  id               String             @id
  name             String
  description      String?
  rules            String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  createdById      String
  createdBy        User               @relation("UserToSegment", fields: [createdById], references: [id])
  EmailCampaign    EmailCampaign[]    @relation("CampaignSegments")
  SMSCampaign      SMSCampaign[]      @relation("SMSCampaignSegments")
  WhatsAppCampaign WhatsAppCampaign[] @relation("WACampaignSegments")
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String             @id @default(cuid())
  name             String?
  email            String             @unique
  emailVerified    DateTime?
  password         String?
  image            String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  lastLogin        DateTime?
  isActive         Boolean            @default(true)
  role             UserRole           @default(USER)
  company          String?
  Account          Account[]
  Contact          Contact[]          @relation("UserToContact")
  EmailCampaign    EmailCampaign[]    @relation("UserToEmailCampaign")
  EmailTemplate    EmailTemplate[]    @relation("UserToEmailTemplate")
  List             List[]             @relation("UserToList")
  SMSCampaign      SMSCampaign[]      @relation("UserToSMSCampaign")
  SMSTemplate      SMSTemplate[]      @relation("UserToSMSTemplate")
  Segment          Segment[]          @relation("UserToSegment")
  Session          Session[]
  preference       UserPreference?    @relation("UserToPreference")
  WhatsAppCampaign WhatsAppCampaign[] @relation("UserToWhatsAppCampaign")
  WhatsAppTemplate WhatsAppTemplate[] @relation("UserToWhatsAppTemplate")
  Workflow         Workflow[]         @relation("UserToWorkflow")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model WhatsAppActivity {
  id               String           @id
  campaignId       String
  contactId        String
  type             ActivityType
  timestamp        DateTime         @default(now())
  metadata         String?
  WhatsAppCampaign WhatsAppCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  Contact          Contact          @relation(fields: [contactId], references: [id], onDelete: Cascade)
}

model WhatsAppCampaign {
  id               String             @id
  name             String
  description      String?
  from             String
  templateId       String?
  content          String?
  status           CampaignStatus     @default(DRAFT)
  scheduledFor     DateTime?
  sentAt           DateTime?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  createdById      String
  WhatsAppActivity WhatsAppActivity[]
  createdBy        User               @relation("UserToWhatsAppCampaign", fields: [createdById], references: [id])
  WhatsAppTemplate WhatsAppTemplate?  @relation(fields: [templateId], references: [id])
  List             List[]             @relation("WACampaignLists")
  Segment          Segment[]          @relation("WACampaignSegments")
}

model WhatsAppTemplate {
  id               String             @id
  name             String
  content          String
  variables        String
  category         String?
  status           WATemplateStatus   @default(PENDING)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  createdById      String
  WhatsAppCampaign WhatsAppCampaign[]
  createdBy        User               @relation("UserToWhatsAppTemplate", fields: [createdById], references: [id])
}

model Workflow {
  id              String            @id
  name            String
  description     String?
  status          WorkflowStatus    @default(INACTIVE)
  definition      String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  createdById     String
  createdBy       User              @relation("UserToWorkflow", fields: [createdById], references: [id])
  WorkflowNode    WorkflowNode[]
  WorkflowTrigger WorkflowTrigger[]
}

model WorkflowNode {
  id                                           String           @id
  workflowId                                   String
  type                                         WorkflowNodeType
  name                                         String?
  config                                       String
  positionX                                    Float?
  positionY                                    Float?
  Connection_Connection_sourceIdToWorkflowNode Connection[]     @relation("Connection_sourceIdToWorkflowNode")
  Connection_Connection_targetIdToWorkflowNode Connection[]     @relation("Connection_targetIdToWorkflowNode")
  Workflow                                     Workflow         @relation(fields: [workflowId], references: [id], onDelete: Cascade)
}

model WorkflowTrigger {
  id         String      @id
  workflowId String
  type       TriggerType
  config     String
  Workflow   Workflow    @relation(fields: [workflowId], references: [id], onDelete: Cascade)
}

model UserPreference {
  id          String   @id @default(cuid())
  userId      String   @unique
  preferences String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation("UserToPreference", fields: [userId], references: [id], onDelete: Cascade)
}

enum ActivityType {
  SENT
  DELIVERED
  OPENED
  CLICKED
  BOUNCED
  UNSUBSCRIBED
  REPLIED
  FAILED
}

enum AnalyticsPeriod {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  PAUSED
  CANCELLED
}

enum ConnectionStatus {
  ACTIVE
  INACTIVE
  ERROR
}

enum ContactStatus {
  ACTIVE
  UNSUBSCRIBED
  BOUNCED
  SPAM
}

enum EntityType {
  EMAIL_CAMPAIGN
  SMS_CAMPAIGN
  WHATSAPP_CAMPAIGN
  WORKFLOW
  LIST
  SEGMENT
}

enum IntegrationType {
  ECOMMERCE_WOOCOMMERCE
  ECOMMERCE_SHOPIFY
  CRM_SALESFORCE
  CRM_HUBSPOT
  PAYMENT_STRIPE
  PAYMENT_PAYPAL
  WEBHOOK
  API
}

enum ListType {
  STATIC
  DYNAMIC
}

enum TriggerType {
  CONTACT_CREATED
  CONTACT_UPDATED
  EMAIL_OPENED
  EMAIL_CLICKED
  FORM_SUBMITTED
  WEBHOOK
  SCHEDULED
}

enum UserRole {
  USER
  ADMIN
  IT_ADMIN
  SUPER_ADMIN
}

enum WATemplateStatus {
  PENDING
  APPROVED
  REJECTED
}

enum WorkflowNodeType {
  TRIGGER
  CONDITION
  ACTION
  DELAY
  EMAIL
  SMS
  WHATSAPP
  NOTIFICATION
  WEBHOOK
}

enum WorkflowStatus {
  ACTIVE
  INACTIVE
  PAUSED
  ARCHIVED
}
