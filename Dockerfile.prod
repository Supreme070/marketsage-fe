FROM node:20-alpine AS base

# Install dependencies only when needed
FROM base AS deps
# Add build dependencies for bcrypt and PostgreSQL client with retry mechanism
WORKDIR /app

# Copy package files
COPY package.json package-lock.json* ./

# Install dependencies with proper glibc support for ARM64 and robust networking
RUN apk update && \
    apk add --no-cache --virtual .build-deps libc6-compat python3 make g++ && \
    apk add --no-cache postgresql-client curl wget && \
    # Test network connectivity
    echo "Testing network connectivity..." && \
    curl -f https://registry.npmjs.org/ || echo "Registry check failed, continuing anyway..." && \
    # Configure npm for better network handling
    npm config set fetch-timeout 600000 && \
    npm config set fetch-retry-mintimeout 20000 && \
    npm config set fetch-retry-maxtimeout 120000 && \
    npm config set fetch-retries 5 && \
    npm config set registry https://registry.npmjs.org/ && \
    npm config set maxsockets 1 && \
    # Install all dependencies (including dev deps for Prisma) with retries
    echo "Installing dependencies..." && \
    (npm ci --cache /tmp/.npm --progress=false || \
     (echo "Retry 1 after 10s..." && sleep 10 && npm ci --cache /tmp/.npm --progress=false) || \
     (echo "Retry 2 after 20s..." && sleep 20 && npm ci --cache /tmp/.npm --progress=false) || \
     (echo "Final attempt with clean cache..." && npm cache clean --force && npm ci --progress=false)) && \
    echo "Dependencies installed successfully" && \
    apk del .build-deps

# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Debugging: list the files to verify src/scripts exists
RUN ls -la ./src/ && ls -la ./src/scripts || echo "Scripts directory not found in source"

# Make startup script executable
RUN chmod +x startup.sh

# Ensure public directory exists
RUN mkdir -p ./public

# Set environment variables for build
ARG DATABASE_URL
ENV DATABASE_URL=${DATABASE_URL}
ENV BUILDING=true
ENV SKIP_DATABASE_CONNECTION=true

# Generate Prisma client (dependencies already installed from deps stage)
RUN echo "Generating Prisma client..." && \
    npx prisma generate

# Rebuild native binaries for Alpine Linux and handle ONNX gracefully
RUN rm -rf node_modules/bcrypt/lib/binding/napi-v3 && \
    apk add --no-cache --virtual .rebuild-deps python3 make g++ && \
    npm rebuild bcrypt --build-from-source && \
    # Try to rebuild ONNX runtime, but don't fail if it doesn't work
    (npm rebuild onnxruntime-node --build-from-source || echo "ONNX runtime rebuild failed - using fallback AI features") && \
    apk del .rebuild-deps

# Build application
RUN npm run build

# Production image, copy all the files and run next
FROM base AS runner
WORKDIR /app

# Accept NODE_ENV as build argument and runtime environment variable
ARG NODE_ENV=production
ENV NODE_ENV=$NODE_ENV
ENV DOCKER_CONTAINER=true

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Install PostgreSQL client for database operations
RUN apk add --no-cache postgresql-client bash

# Create directories with correct ownership
RUN mkdir -p ./public ./node_modules ./.next/cache ./prisma ./scripts ./src/scripts ./src/generated/prisma && \
    chown -R nextjs:nodejs /app

# Copy public directory
COPY --from=builder --chown=nextjs:nodejs /app/public ./public

# Copy all node_modules instead of individual packages
COPY --from=builder --chown=nextjs:nodejs /app/node_modules ./node_modules

# Copy and verify startup script
COPY --from=builder --chown=nextjs:nodejs /app/startup.sh ./
RUN chmod +x ./startup.sh

# Copy build output
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/prisma ./prisma

# Copy scripts to both locations for compatibility
COPY --from=builder --chown=nextjs:nodejs /app/src/scripts ./src/scripts
COPY --from=builder --chown=nextjs:nodejs /app/src/scripts ./scripts
# Verify scripts were copied to both locations
RUN ls -la ./src/scripts || echo "src/scripts directory empty" && ls -la ./scripts || echo "scripts directory empty"

COPY --from=builder --chown=nextjs:nodejs /app/next.config.js ./next.config.js
COPY --from=builder --chown=nextjs:nodejs /app/package.json ./package.json
COPY --from=builder --chown=nextjs:nodejs /app/tsconfig.json ./tsconfig.json
COPY --from=builder --chown=nextjs:nodejs /app/prisma/schema.prisma ./schema.prisma

USER nextjs

EXPOSE 3000

ENV PORT 3000
ENV HOSTNAME 0.0.0.0

# Start production server directly
CMD ["npm", "run", "start"] 