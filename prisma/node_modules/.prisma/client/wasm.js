
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.9.0
 * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
 */
Prisma.prismaVersion = {
  client: "6.9.0",
  engine: "81e4af48011447c3cc503a190e86995b66d2a28e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  message: 'message',
  type: 'type',
  category: 'category',
  read: 'read',
  link: 'link',
  timestamp: 'timestamp'
};

exports.Prisma.OrganizationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  plan: 'plan',
  logoUrl: 'logoUrl',
  websiteUrl: 'websiteUrl',
  address: 'address',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  billingEmail: 'billingEmail',
  billingName: 'billingName',
  billingAddress: 'billingAddress',
  vatNumber: 'vatNumber'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  password: 'password',
  image: 'image',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastLogin: 'lastLogin',
  isActive: 'isActive',
  role: 'role',
  organizationId: 'organizationId',
  company: 'company'
};

exports.Prisma.UserPreferenceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  preferences: 'preferences',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires'
};

exports.Prisma.UserSessionScalarFieldEnum = {
  id: 'id',
  activityId: 'activityId',
  startTime: 'startTime',
  endTime: 'endTime',
  duration: 'duration'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.IntegrationScalarFieldEnum = {
  id: 'id',
  type: 'type',
  name: 'name',
  description: 'description',
  credentials: 'credentials',
  status: 'status',
  lastSyncedAt: 'lastSyncedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  organizationId: 'organizationId',
  createdBy: 'createdBy'
};

exports.Prisma.IntegrationSyncHistoryScalarFieldEnum = {
  id: 'id',
  integrationId: 'integrationId',
  status: 'status',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  recordsProcessed: 'recordsProcessed',
  error: 'error'
};

exports.Prisma.ContactScalarFieldEnum = {
  id: 'id',
  email: 'email',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  company: 'company',
  jobTitle: 'jobTitle',
  address: 'address',
  city: 'city',
  state: 'state',
  country: 'country',
  postalCode: 'postalCode',
  notes: 'notes',
  tagsString: 'tagsString',
  source: 'source',
  customFields: 'customFields',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastEngaged: 'lastEngaged',
  emailVerified: 'emailVerified',
  phoneVerified: 'phoneVerified',
  createdById: 'createdById'
};

exports.Prisma.ListScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  type: 'type',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById'
};

exports.Prisma.ListMemberScalarFieldEnum = {
  id: 'id',
  listId: 'listId',
  contactId: 'contactId',
  addedAt: 'addedAt'
};

exports.Prisma.SegmentMemberScalarFieldEnum = {
  id: 'id',
  segmentId: 'segmentId',
  contactId: 'contactId',
  addedAt: 'addedAt'
};

exports.Prisma.SegmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  rules: 'rules',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById'
};

exports.Prisma.EmailTemplateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  subject: 'subject',
  content: 'content',
  design: 'design',
  previewText: 'previewText',
  category: 'category',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById'
};

exports.Prisma.EmailCampaignScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  subject: 'subject',
  from: 'from',
  replyTo: 'replyTo',
  templateId: 'templateId',
  content: 'content',
  design: 'design',
  status: 'status',
  scheduledFor: 'scheduledFor',
  sentAt: 'sentAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById'
};

exports.Prisma.EmailActivityScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  contactId: 'contactId',
  type: 'type',
  timestamp: 'timestamp',
  metadata: 'metadata'
};

exports.Prisma.SMSTemplateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  content: 'content',
  variables: 'variables',
  category: 'category',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById'
};

exports.Prisma.ABTestScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  entityType: 'entityType',
  entityId: 'entityId',
  status: 'status',
  testType: 'testType',
  testElements: 'testElements',
  winnerMetric: 'winnerMetric',
  winnerThreshold: 'winnerThreshold',
  distributionPercent: 'distributionPercent',
  winnerVariantId: 'winnerVariantId',
  startedAt: 'startedAt',
  endedAt: 'endedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById'
};

exports.Prisma.ABTestVariantScalarFieldEnum = {
  id: 'id',
  testId: 'testId',
  name: 'name',
  description: 'description',
  content: 'content',
  trafficPercent: 'trafficPercent',
  createdAt: 'createdAt'
};

exports.Prisma.ABTestResultScalarFieldEnum = {
  id: 'id',
  testId: 'testId',
  variantId: 'variantId',
  metric: 'metric',
  value: 'value',
  sampleSize: 'sampleSize',
  recordedAt: 'recordedAt'
};

exports.Prisma.SMSCampaignScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  from: 'from',
  templateId: 'templateId',
  content: 'content',
  status: 'status',
  scheduledFor: 'scheduledFor',
  sentAt: 'sentAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById'
};

exports.Prisma.SMSActivityScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  contactId: 'contactId',
  type: 'type',
  timestamp: 'timestamp',
  metadata: 'metadata'
};

exports.Prisma.WhatsAppTemplateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  content: 'content',
  variables: 'variables',
  category: 'category',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById'
};

exports.Prisma.WhatsAppCampaignScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  from: 'from',
  templateId: 'templateId',
  content: 'content',
  status: 'status',
  scheduledFor: 'scheduledFor',
  sentAt: 'sentAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById'
};

exports.Prisma.WhatsAppActivityScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  contactId: 'contactId',
  type: 'type',
  timestamp: 'timestamp',
  metadata: 'metadata'
};

exports.Prisma.WorkflowScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  status: 'status',
  definition: 'definition',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById'
};

exports.Prisma.WorkflowNodeScalarFieldEnum = {
  id: 'id',
  workflowId: 'workflowId',
  type: 'type',
  name: 'name',
  config: 'config',
  positionX: 'positionX',
  positionY: 'positionY'
};

exports.Prisma.ConnectionScalarFieldEnum = {
  id: 'id',
  sourceId: 'sourceId',
  targetId: 'targetId',
  condition: 'condition'
};

exports.Prisma.WorkflowTriggerScalarFieldEnum = {
  id: 'id',
  workflowId: 'workflowId',
  type: 'type',
  config: 'config'
};

exports.Prisma.WorkflowExecutionScalarFieldEnum = {
  id: 'id',
  workflowId: 'workflowId',
  contactId: 'contactId',
  status: 'status',
  currentStepId: 'currentStepId',
  context: 'context',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  lastExecutedAt: 'lastExecutedAt',
  errorMessage: 'errorMessage',
  retryCount: 'retryCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WorkflowExecutionStepScalarFieldEnum = {
  id: 'id',
  executionId: 'executionId',
  stepId: 'stepId',
  stepType: 'stepType',
  status: 'status',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  scheduledFor: 'scheduledFor',
  output: 'output',
  errorMessage: 'errorMessage',
  retryCount: 'retryCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WorkflowEventScalarFieldEnum = {
  id: 'id',
  workflowId: 'workflowId',
  contactId: 'contactId',
  eventType: 'eventType',
  eventData: 'eventData',
  processed: 'processed',
  createdAt: 'createdAt'
};

exports.Prisma.AnalyticsScalarFieldEnum = {
  id: 'id',
  entityType: 'entityType',
  entityId: 'entityId',
  period: 'period',
  metrics: 'metrics',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EngagementTimeScalarFieldEnum = {
  id: 'id',
  contactId: 'contactId',
  entityType: 'entityType',
  entityId: 'entityId',
  engagementType: 'engagementType',
  dayOfWeek: 'dayOfWeek',
  hourOfDay: 'hourOfDay',
  timestamp: 'timestamp'
};

exports.Prisma.SmartSegmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  rules: 'rules',
  score: 'score',
  status: 'status',
  createdAt: 'createdAt',
  lastUpdated: 'lastUpdated'
};

exports.Prisma.ContentTemplateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  industry: 'industry',
  category: 'category',
  type: 'type',
  template: 'template',
  keywords: 'keywords',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContentGenerationScalarFieldEnum = {
  id: 'id',
  templateId: 'templateId',
  entityType: 'entityType',
  entityId: 'entityId',
  prompt: 'prompt',
  result: 'result',
  createdById: 'createdById',
  createdAt: 'createdAt'
};

exports.Prisma.SendTimeOptimizationScalarFieldEnum = {
  id: 'id',
  contactId: 'contactId',
  dayOfWeek: 'dayOfWeek',
  hourOfDay: 'hourOfDay',
  engagementScore: 'engagementScore',
  confidenceLevel: 'confidenceLevel',
  lastUpdated: 'lastUpdated'
};

exports.Prisma.ConversionEventScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  eventType: 'eventType',
  category: 'category',
  valueType: 'valueType',
  isSystem: 'isSystem',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById'
};

exports.Prisma.ConversionTrackingScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  entityType: 'entityType',
  entityId: 'entityId',
  contactId: 'contactId',
  value: 'value',
  occurredAt: 'occurredAt',
  metadata: 'metadata',
  attributionModel: 'attributionModel',
  touchPoints: 'touchPoints'
};

exports.Prisma.ConversionFunnelScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  stages: 'stages',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById'
};

exports.Prisma.ConversionFunnelReportScalarFieldEnum = {
  id: 'id',
  funnelId: 'funnelId',
  startDate: 'startDate',
  endDate: 'endDate',
  data: 'data',
  createdAt: 'createdAt'
};

exports.Prisma.AttributionSettingsScalarFieldEnum = {
  id: 'id',
  defaultModel: 'defaultModel',
  customWeights: 'customWeights',
  lookbackWindow: 'lookbackWindow',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContentAnalysisScalarFieldEnum = {
  id: 'id',
  type: 'type',
  contentType: 'contentType',
  originalContent: 'originalContent',
  result: 'result',
  createdAt: 'createdAt',
  userId: 'userId'
};

exports.Prisma.ContentRecommendationScalarFieldEnum = {
  id: 'id',
  type: 'type',
  entityType: 'entityType',
  entityId: 'entityId',
  originalContent: 'originalContent',
  suggestedContent: 'suggestedContent',
  reason: 'reason',
  impactScore: 'impactScore',
  isApplied: 'isApplied',
  createdAt: 'createdAt',
  appliedAt: 'appliedAt',
  userId: 'userId'
};

exports.Prisma.SubjectLineTestScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  originalSubject: 'originalSubject',
  variants: 'variants',
  status: 'status',
  winnerVariantId: 'winnerVariantId',
  createdAt: 'createdAt',
  startedAt: 'startedAt',
  endedAt: 'endedAt',
  createdById: 'createdById'
};

exports.Prisma.SubjectLineTestResultScalarFieldEnum = {
  id: 'id',
  testId: 'testId',
  variantId: 'variantId',
  opens: 'opens',
  clicks: 'clicks',
  sent: 'sent',
  openRate: 'openRate',
  clickRate: 'clickRate'
};

exports.Prisma.SentimentAnalysisScalarFieldEnum = {
  id: 'id',
  entityType: 'entityType',
  entityId: 'entityId',
  content: 'content',
  score: 'score',
  positive: 'positive',
  negative: 'negative',
  emotions: 'emotions',
  createdAt: 'createdAt'
};

exports.Prisma.ContentPersonalizationScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  contactId: 'contactId',
  originalContent: 'originalContent',
  personalizedContent: 'personalizedContent',
  replacements: 'replacements',
  createdAt: 'createdAt'
};

exports.Prisma.PredictionModelScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  description: 'description',
  algorithm: 'algorithm',
  features: 'features',
  metrics: 'metrics',
  version: 'version',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PredictionScalarFieldEnum = {
  id: 'id',
  modelId: 'modelId',
  entityType: 'entityType',
  entityId: 'entityId',
  predictionType: 'predictionType',
  value: 'value',
  confidence: 'confidence',
  features: 'features',
  explanation: 'explanation',
  createdAt: 'createdAt'
};

exports.Prisma.ChurnPredictionScalarFieldEnum = {
  id: 'id',
  contactId: 'contactId',
  score: 'score',
  riskLevel: 'riskLevel',
  topFactors: 'topFactors',
  nextActionDate: 'nextActionDate',
  createdAt: 'createdAt'
};

exports.Prisma.LifetimeValuePredictionScalarFieldEnum = {
  id: 'id',
  contactId: 'contactId',
  predictedValue: 'predictedValue',
  confidenceLevel: 'confidenceLevel',
  timeframe: 'timeframe',
  segments: 'segments',
  createdAt: 'createdAt'
};

exports.Prisma.CampaignPerformancePredictionScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  openRate: 'openRate',
  clickRate: 'clickRate',
  conversionRate: 'conversionRate',
  revenue: 'revenue',
  factors: 'factors',
  createdAt: 'createdAt'
};

exports.Prisma.OptimalSendTimeScalarFieldEnum = {
  id: 'id',
  contactId: 'contactId',
  channelType: 'channelType',
  dayOfWeek: 'dayOfWeek',
  hourOfDay: 'hourOfDay',
  probability: 'probability',
  confidenceLevel: 'confidenceLevel',
  lastUpdated: 'lastUpdated'
};

exports.Prisma.JourneyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById'
};

exports.Prisma.JourneyStageScalarFieldEnum = {
  id: 'id',
  journeyId: 'journeyId',
  name: 'name',
  description: 'description',
  order: 'order',
  expectedDuration: 'expectedDuration',
  conversionGoal: 'conversionGoal',
  isEntryPoint: 'isEntryPoint',
  isExitPoint: 'isExitPoint',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.JourneyTransitionScalarFieldEnum = {
  id: 'id',
  fromStageId: 'fromStageId',
  toStageId: 'toStageId',
  name: 'name',
  description: 'description',
  conditions: 'conditions',
  triggerType: 'triggerType',
  triggerDetails: 'triggerDetails',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContactJourneyScalarFieldEnum = {
  id: 'id',
  journeyId: 'journeyId',
  contactId: 'contactId',
  status: 'status',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  currentStageId: 'currentStageId'
};

exports.Prisma.ContactJourneyStageScalarFieldEnum = {
  id: 'id',
  contactJourneyId: 'contactJourneyId',
  stageId: 'stageId',
  enteredAt: 'enteredAt',
  exitedAt: 'exitedAt',
  durationSeconds: 'durationSeconds'
};

exports.Prisma.ContactJourneyTransitionScalarFieldEnum = {
  id: 'id',
  contactJourneyId: 'contactJourneyId',
  transitionId: 'transitionId',
  timestamp: 'timestamp',
  fromStageId: 'fromStageId',
  toStageId: 'toStageId',
  triggerSource: 'triggerSource'
};

exports.Prisma.JourneyMetricScalarFieldEnum = {
  id: 'id',
  journeyId: 'journeyId',
  name: 'name',
  description: 'description',
  metricType: 'metricType',
  targetValue: 'targetValue',
  aggregationType: 'aggregationType',
  formula: 'formula',
  isSuccess: 'isSuccess',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.JourneyStageMetricScalarFieldEnum = {
  id: 'id',
  stageId: 'stageId',
  metricId: 'metricId',
  targetValue: 'targetValue',
  actualValue: 'actualValue',
  lastUpdated: 'lastUpdated'
};

exports.Prisma.JourneyAnalyticsScalarFieldEnum = {
  id: 'id',
  journeyId: 'journeyId',
  date: 'date',
  totalContacts: 'totalContacts',
  activeContacts: 'activeContacts',
  completedContacts: 'completedContacts',
  droppedContacts: 'droppedContacts',
  conversionRate: 'conversionRate',
  averageDuration: 'averageDuration',
  stageData: 'stageData'
};

exports.Prisma.TaskScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  status: 'status',
  priority: 'priority',
  dueDate: 'dueDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  creatorId: 'creatorId',
  assigneeId: 'assigneeId',
  contactId: 'contactId',
  segmentId: 'segmentId',
  campaignId: 'campaignId',
  regionId: 'regionId'
};

exports.Prisma.TaskDependencyScalarFieldEnum = {
  id: 'id',
  taskId: 'taskId',
  dependsOnTaskId: 'dependsOnTaskId',
  createdAt: 'createdAt'
};

exports.Prisma.TaskCommentScalarFieldEnum = {
  id: 'id',
  taskId: 'taskId',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById'
};

exports.Prisma.AI_ContentAnalysisScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  supremeScore: 'supremeScore',
  sentiment: 'sentiment',
  readability: 'readability',
  engagement: 'engagement',
  analysis: 'analysis',
  tags: 'tags',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById'
};

exports.Prisma.AI_CustomerSegmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  criteria: 'criteria',
  customerCount: 'customerCount',
  churnRisk: 'churnRisk',
  lifetimeValue: 'lifetimeValue',
  tags: 'tags',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById'
};

exports.Prisma.AI_ChatHistoryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  sessionId: 'sessionId',
  question: 'question',
  answer: 'answer',
  context: 'context',
  confidence: 'confidence',
  createdAt: 'createdAt'
};

exports.Prisma.AI_ToolScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  category: 'category',
  config: 'config',
  usage: 'usage',
  isPublic: 'isPublic',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById'
};

exports.Prisma.LeadPulseVisitorScalarFieldEnum = {
  id: 'id',
  fingerprint: 'fingerprint',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  referrer: 'referrer',
  firstVisit: 'firstVisit',
  lastVisit: 'lastVisit',
  totalVisits: 'totalVisits',
  isActive: 'isActive',
  engagementScore: 'engagementScore',
  engagementLevel: 'engagementLevel',
  city: 'city',
  country: 'country',
  region: 'region',
  latitude: 'latitude',
  longitude: 'longitude',
  device: 'device',
  browser: 'browser',
  os: 'os',
  metadata: 'metadata',
  score: 'score',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AnonymousVisitorScalarFieldEnum = {
  id: 'id',
  fingerprint: 'fingerprint',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  referrer: 'referrer',
  contactId: 'contactId',
  firstVisit: 'firstVisit',
  lastVisit: 'lastVisit',
  totalVisits: 'totalVisits',
  visitCount: 'visitCount',
  isActive: 'isActive',
  engagementScore: 'engagementScore',
  score: 'score',
  city: 'city',
  country: 'country',
  region: 'region',
  latitude: 'latitude',
  longitude: 'longitude'
};

exports.Prisma.LeadPulseJourneyScalarFieldEnum = {
  id: 'id',
  visitorId: 'visitorId',
  startDate: 'startDate',
  lastUpdate: 'lastUpdate',
  stage: 'stage',
  completionDate: 'completionDate',
  score: 'score',
  isCompleted: 'isCompleted',
  source: 'source',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LeadPulseTouchpointScalarFieldEnum = {
  id: 'id',
  visitorId: 'visitorId',
  anonymousVisitorId: 'anonymousVisitorId',
  timestamp: 'timestamp',
  type: 'type',
  url: 'url',
  duration: 'duration',
  value: 'value',
  score: 'score',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LeadPulseSegmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  criteria: 'criteria',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LeadPulseInsightScalarFieldEnum = {
  id: 'id',
  type: 'type',
  title: 'title',
  description: 'description',
  importance: 'importance',
  metric: 'metric',
  recommendation: 'recommendation',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubscriptionPlanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  price: 'price',
  currency: 'currency',
  interval: 'interval',
  features: 'features',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  paystackPlanId: 'paystackPlanId'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  planId: 'planId',
  status: 'status',
  startDate: 'startDate',
  endDate: 'endDate',
  canceledAt: 'canceledAt',
  paystackSubscriptionId: 'paystackSubscriptionId',
  paystackCustomerId: 'paystackCustomerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  subscriptionId: 'subscriptionId',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  paystackReference: 'paystackReference',
  paystackTransactionId: 'paystackTransactionId',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentMethodScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  type: 'type',
  last4: 'last4',
  expMonth: 'expMonth',
  expYear: 'expYear',
  brand: 'brand',
  isDefault: 'isDefault',
  paystackAuthorizationCode: 'paystackAuthorizationCode',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserActivityScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  channel: 'channel',
  timestamp: 'timestamp',
  metadata: 'metadata',
  sentiment: 'sentiment'
};

exports.Prisma.PurchaseScalarFieldEnum = {
  id: 'id',
  activityId: 'activityId',
  amount: 'amount',
  productId: 'productId',
  timestamp: 'timestamp'
};

exports.Prisma.InteractionScalarFieldEnum = {
  id: 'id',
  activityId: 'activityId',
  type: 'type',
  timestamp: 'timestamp',
  metadata: 'metadata'
};

exports.Prisma.BehavioralPredictionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  modelId: 'modelId',
  predictions: 'predictions',
  segments: 'segments',
  confidenceScores: 'confidenceScores',
  explanatoryFactors: 'explanatoryFactors',
  features: 'features',
  createdAt: 'createdAt'
};

exports.Prisma.BehavioralSegmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  criteria: 'criteria',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  USER: 'USER',
  ADMIN: 'ADMIN',
  IT_ADMIN: 'IT_ADMIN',
  SUPER_ADMIN: 'SUPER_ADMIN'
};

exports.IntegrationStatus = exports.$Enums.IntegrationStatus = {
  PENDING: 'PENDING',
  ACTIVE: 'ACTIVE',
  ERROR: 'ERROR',
  INACTIVE: 'INACTIVE'
};

exports.SyncStatus = exports.$Enums.SyncStatus = {
  RUNNING: 'RUNNING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED'
};

exports.ContactStatus = exports.$Enums.ContactStatus = {
  ACTIVE: 'ACTIVE',
  UNSUBSCRIBED: 'UNSUBSCRIBED',
  BOUNCED: 'BOUNCED',
  SPAM: 'SPAM'
};

exports.ListType = exports.$Enums.ListType = {
  STATIC: 'STATIC',
  DYNAMIC: 'DYNAMIC'
};

exports.CampaignStatus = exports.$Enums.CampaignStatus = {
  DRAFT: 'DRAFT',
  SCHEDULED: 'SCHEDULED',
  SENDING: 'SENDING',
  SENT: 'SENT',
  PAUSED: 'PAUSED',
  CANCELLED: 'CANCELLED'
};

exports.ActivityType = exports.$Enums.ActivityType = {
  SENT: 'SENT',
  DELIVERED: 'DELIVERED',
  OPENED: 'OPENED',
  CLICKED: 'CLICKED',
  BOUNCED: 'BOUNCED',
  UNSUBSCRIBED: 'UNSUBSCRIBED',
  REPLIED: 'REPLIED',
  FAILED: 'FAILED'
};

exports.EntityType = exports.$Enums.EntityType = {
  EMAIL_CAMPAIGN: 'EMAIL_CAMPAIGN',
  SMS_CAMPAIGN: 'SMS_CAMPAIGN',
  WHATSAPP_CAMPAIGN: 'WHATSAPP_CAMPAIGN',
  WORKFLOW: 'WORKFLOW',
  LIST: 'LIST',
  SEGMENT: 'SEGMENT'
};

exports.ABTestStatus = exports.$Enums.ABTestStatus = {
  DRAFT: 'DRAFT',
  RUNNING: 'RUNNING',
  PAUSED: 'PAUSED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.ABTestType = exports.$Enums.ABTestType = {
  SIMPLE_AB: 'SIMPLE_AB',
  MULTIVARIATE: 'MULTIVARIATE',
  ELEMENT: 'ELEMENT'
};

exports.ABTestMetric = exports.$Enums.ABTestMetric = {
  OPEN_RATE: 'OPEN_RATE',
  CLICK_RATE: 'CLICK_RATE',
  CONVERSION_RATE: 'CONVERSION_RATE',
  REVENUE: 'REVENUE',
  CUSTOM: 'CUSTOM'
};

exports.WATemplateStatus = exports.$Enums.WATemplateStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.WorkflowStatus = exports.$Enums.WorkflowStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  PAUSED: 'PAUSED',
  ARCHIVED: 'ARCHIVED'
};

exports.WorkflowNodeType = exports.$Enums.WorkflowNodeType = {
  TRIGGER: 'TRIGGER',
  CONDITION: 'CONDITION',
  ACTION: 'ACTION',
  DELAY: 'DELAY',
  EMAIL: 'EMAIL',
  SMS: 'SMS',
  WHATSAPP: 'WHATSAPP',
  NOTIFICATION: 'NOTIFICATION',
  WEBHOOK: 'WEBHOOK'
};

exports.TriggerType = exports.$Enums.TriggerType = {
  CONTACT_CREATED: 'CONTACT_CREATED',
  CONTACT_UPDATED: 'CONTACT_UPDATED',
  EMAIL_OPENED: 'EMAIL_OPENED',
  EMAIL_CLICKED: 'EMAIL_CLICKED',
  FORM_SUBMITTED: 'FORM_SUBMITTED',
  WEBHOOK: 'WEBHOOK',
  SCHEDULED: 'SCHEDULED'
};

exports.WorkflowExecutionStatus = exports.$Enums.WorkflowExecutionStatus = {
  RUNNING: 'RUNNING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  PAUSED: 'PAUSED',
  CANCELLED: 'CANCELLED'
};

exports.StepExecutionStatus = exports.$Enums.StepExecutionStatus = {
  PENDING: 'PENDING',
  RUNNING: 'RUNNING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  SKIPPED: 'SKIPPED',
  SCHEDULED: 'SCHEDULED'
};

exports.AnalyticsPeriod = exports.$Enums.AnalyticsPeriod = {
  DAILY: 'DAILY',
  WEEKLY: 'WEEKLY',
  MONTHLY: 'MONTHLY',
  YEARLY: 'YEARLY'
};

exports.SmartSegmentStatus = exports.$Enums.SmartSegmentStatus = {
  PENDING: 'PENDING',
  ACTIVE: 'ACTIVE',
  ARCHIVED: 'ARCHIVED'
};

exports.ContentTemplateType = exports.$Enums.ContentTemplateType = {
  EMAIL_SUBJECT: 'EMAIL_SUBJECT',
  EMAIL_BODY: 'EMAIL_BODY',
  SMS_MESSAGE: 'SMS_MESSAGE',
  WHATSAPP_MESSAGE: 'WHATSAPP_MESSAGE',
  PUSH_NOTIFICATION: 'PUSH_NOTIFICATION'
};

exports.ConversionCategory = exports.$Enums.ConversionCategory = {
  AWARENESS: 'AWARENESS',
  CONSIDERATION: 'CONSIDERATION',
  CONVERSION: 'CONVERSION',
  RETENTION: 'RETENTION',
  CUSTOM: 'CUSTOM'
};

exports.ConversionValueType = exports.$Enums.ConversionValueType = {
  COUNT: 'COUNT',
  REVENUE: 'REVENUE',
  SCORE: 'SCORE'
};

exports.AttributionModel = exports.$Enums.AttributionModel = {
  FIRST_TOUCH: 'FIRST_TOUCH',
  LAST_TOUCH: 'LAST_TOUCH',
  LINEAR: 'LINEAR',
  TIME_DECAY: 'TIME_DECAY',
  POSITION_BASED: 'POSITION_BASED',
  CUSTOM: 'CUSTOM'
};

exports.PredictionModelType = exports.$Enums.PredictionModelType = {
  CHURN: 'CHURN',
  LTV: 'LTV',
  CAMPAIGN_PERFORMANCE: 'CAMPAIGN_PERFORMANCE',
  SEND_TIME: 'SEND_TIME',
  OPEN_RATE: 'OPEN_RATE',
  CLICK_RATE: 'CLICK_RATE',
  CONVERSION_RATE: 'CONVERSION_RATE'
};

exports.ChurnRiskLevel = exports.$Enums.ChurnRiskLevel = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  VERY_HIGH: 'VERY_HIGH'
};

exports.TransitionTriggerType = exports.$Enums.TransitionTriggerType = {
  AUTOMATIC: 'AUTOMATIC',
  EVENT: 'EVENT',
  CONVERSION: 'CONVERSION',
  CONDITION: 'CONDITION',
  MANUAL: 'MANUAL'
};

exports.JourneyStatus = exports.$Enums.JourneyStatus = {
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  DROPPED: 'DROPPED',
  PAUSED: 'PAUSED'
};

exports.JourneyMetricType = exports.$Enums.JourneyMetricType = {
  CONVERSION_RATE: 'CONVERSION_RATE',
  CONTACTS_COUNT: 'CONTACTS_COUNT',
  DURATION: 'DURATION',
  REVENUE: 'REVENUE',
  CUSTOM: 'CUSTOM'
};

exports.MetricAggregationType = exports.$Enums.MetricAggregationType = {
  SUM: 'SUM',
  AVERAGE: 'AVERAGE',
  COUNT: 'COUNT',
  MIN: 'MIN',
  MAX: 'MAX'
};

exports.LeadPulseTouchpointType = exports.$Enums.LeadPulseTouchpointType = {
  PAGEVIEW: 'PAGEVIEW',
  CLICK: 'CLICK',
  FORM_VIEW: 'FORM_VIEW',
  FORM_START: 'FORM_START',
  FORM_SUBMIT: 'FORM_SUBMIT',
  CONVERSION: 'CONVERSION'
};

exports.LeadPulseInsightType = exports.$Enums.LeadPulseInsightType = {
  BEHAVIOR: 'BEHAVIOR',
  PREDICTION: 'PREDICTION',
  OPPORTUNITY: 'OPPORTUNITY',
  TREND: 'TREND'
};

exports.LeadPulseImportance = exports.$Enums.LeadPulseImportance = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH'
};

exports.SubscriptionStatus = exports.$Enums.SubscriptionStatus = {
  ACTIVE: 'ACTIVE',
  PAST_DUE: 'PAST_DUE',
  CANCELED: 'CANCELED',
  EXPIRED: 'EXPIRED',
  TRIALING: 'TRIALING'
};

exports.TransactionStatus = exports.$Enums.TransactionStatus = {
  PENDING: 'PENDING',
  SUCCESS: 'SUCCESS',
  FAILED: 'FAILED',
  REFUNDED: 'REFUNDED'
};

exports.PaymentMethodType = exports.$Enums.PaymentMethodType = {
  CARD: 'CARD',
  BANK: 'BANK',
  USSD: 'USSD',
  BANK_TRANSFER: 'BANK_TRANSFER',
  QR: 'QR',
  MOBILE_MONEY: 'MOBILE_MONEY'
};

exports.Prisma.ModelName = {
  Notification: 'Notification',
  Organization: 'Organization',
  User: 'User',
  UserPreference: 'UserPreference',
  Account: 'Account',
  Session: 'Session',
  UserSession: 'UserSession',
  VerificationToken: 'VerificationToken',
  Integration: 'Integration',
  IntegrationSyncHistory: 'IntegrationSyncHistory',
  Contact: 'Contact',
  List: 'List',
  ListMember: 'ListMember',
  SegmentMember: 'SegmentMember',
  Segment: 'Segment',
  EmailTemplate: 'EmailTemplate',
  EmailCampaign: 'EmailCampaign',
  EmailActivity: 'EmailActivity',
  SMSTemplate: 'SMSTemplate',
  ABTest: 'ABTest',
  ABTestVariant: 'ABTestVariant',
  ABTestResult: 'ABTestResult',
  SMSCampaign: 'SMSCampaign',
  SMSActivity: 'SMSActivity',
  WhatsAppTemplate: 'WhatsAppTemplate',
  WhatsAppCampaign: 'WhatsAppCampaign',
  WhatsAppActivity: 'WhatsAppActivity',
  Workflow: 'Workflow',
  WorkflowNode: 'WorkflowNode',
  Connection: 'Connection',
  WorkflowTrigger: 'WorkflowTrigger',
  WorkflowExecution: 'WorkflowExecution',
  WorkflowExecutionStep: 'WorkflowExecutionStep',
  WorkflowEvent: 'WorkflowEvent',
  Analytics: 'Analytics',
  EngagementTime: 'EngagementTime',
  SmartSegment: 'SmartSegment',
  ContentTemplate: 'ContentTemplate',
  ContentGeneration: 'ContentGeneration',
  SendTimeOptimization: 'SendTimeOptimization',
  ConversionEvent: 'ConversionEvent',
  ConversionTracking: 'ConversionTracking',
  ConversionFunnel: 'ConversionFunnel',
  ConversionFunnelReport: 'ConversionFunnelReport',
  AttributionSettings: 'AttributionSettings',
  ContentAnalysis: 'ContentAnalysis',
  ContentRecommendation: 'ContentRecommendation',
  SubjectLineTest: 'SubjectLineTest',
  SubjectLineTestResult: 'SubjectLineTestResult',
  SentimentAnalysis: 'SentimentAnalysis',
  ContentPersonalization: 'ContentPersonalization',
  PredictionModel: 'PredictionModel',
  Prediction: 'Prediction',
  ChurnPrediction: 'ChurnPrediction',
  LifetimeValuePrediction: 'LifetimeValuePrediction',
  CampaignPerformancePrediction: 'CampaignPerformancePrediction',
  OptimalSendTime: 'OptimalSendTime',
  Journey: 'Journey',
  JourneyStage: 'JourneyStage',
  JourneyTransition: 'JourneyTransition',
  ContactJourney: 'ContactJourney',
  ContactJourneyStage: 'ContactJourneyStage',
  ContactJourneyTransition: 'ContactJourneyTransition',
  JourneyMetric: 'JourneyMetric',
  JourneyStageMetric: 'JourneyStageMetric',
  JourneyAnalytics: 'JourneyAnalytics',
  Task: 'Task',
  TaskDependency: 'TaskDependency',
  TaskComment: 'TaskComment',
  AI_ContentAnalysis: 'AI_ContentAnalysis',
  AI_CustomerSegment: 'AI_CustomerSegment',
  AI_ChatHistory: 'AI_ChatHistory',
  AI_Tool: 'AI_Tool',
  LeadPulseVisitor: 'LeadPulseVisitor',
  AnonymousVisitor: 'AnonymousVisitor',
  LeadPulseJourney: 'LeadPulseJourney',
  LeadPulseTouchpoint: 'LeadPulseTouchpoint',
  LeadPulseSegment: 'LeadPulseSegment',
  LeadPulseInsight: 'LeadPulseInsight',
  SubscriptionPlan: 'SubscriptionPlan',
  Subscription: 'Subscription',
  Transaction: 'Transaction',
  PaymentMethod: 'PaymentMethod',
  UserActivity: 'UserActivity',
  Purchase: 'Purchase',
  Interaction: 'Interaction',
  BehavioralPrediction: 'BehavioralPrediction',
  BehavioralSegment: 'BehavioralSegment'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
