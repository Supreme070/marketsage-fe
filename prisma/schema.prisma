generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/.prisma/client"
  binaryTargets = ["native", "linux-musl", "linux-musl-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x", "darwin", "darwin-arm64"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Notification model for system notifications
model Notification {
  id        String   @id @default(uuid())
  userId    String
  title     String
  message   String
  type      String   // info, success, warning, error
  category  String   // system, campaigns, workflows, etc.
  read      Boolean  @default(false)
  link      String?  // Optional link to navigate to when clicked
  timestamp DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Updated UserRole enum to add more specific roles
enum UserRole {
  USER
  ADMIN
  IT_ADMIN
  SUPER_ADMIN
}

// Organization model
model Organization {
  id             String    @id @default(cuid())
  name           String
  plan           String    @default("FREE")
  logoUrl        String?
  websiteUrl     String?
  address        String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  subscriptions  Subscription[]
  paymentMethods PaymentMethod[]
  billingEmail   String?
  billingName    String?
  billingAddress String?
  vatNumber      String?

  // Relations
  users          User[]
  integrations   Integration[]
  contacts       Contact[]
  lists          List[]
  emailCampaigns EmailCampaign[]
  tasks          Task[]
  smsProviders   SMSProvider[]
  whatsappConfigs WhatsAppBusinessConfig[]
  emailDomainConfigs EmailDomainConfig[]
  
  // AI Intelligence Relations
  customerProfiles CustomerProfile[]
  aiActionPlans    AIActionPlan[]
  customerEvents   CustomerEvent[]
  
  // Analytics Relations
  conversionFunnels ConversionFunnel[]
}

// User model for authentication and platform access
model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  password       String?
  image          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  lastLogin      DateTime?
  isActive       Boolean   @default(true)
  role           UserRole  @default(USER)
  organizationId String?
  company        String?

  // Relations
  organization     Organization? @relation(fields: [organizationId], references: [id])
  accounts         Account[]
  sessions         Session[]
  contacts         Contact[]          @relation("CreatedBy")
  emailCampaigns   EmailCampaign[]    @relation("CampaignCreator")
  emailTemplates   EmailTemplate[]    @relation("TemplateCreator")
  smsCampaigns     SMSCampaign[]      @relation("SMSCampaignCreator")
  smsTemplates     SMSTemplate[]      @relation("SMSTemplateCreator")
  waCampaigns      WhatsAppCampaign[] @relation("WACampaignCreator")
  waTemplates      WhatsAppTemplate[] @relation("WATemplateCreator")
  workflows        Workflow[]         @relation("WorkflowCreator")
  lists            List[]             @relation("ListCreator")
  segments         Segment[]          @relation("SegmentCreator")
  createdIntegrations Integration[]   @relation("IntegrationCreator")
  abTests          ABTest[]           @relation("ABTestCreator")
  conversionEvents ConversionEvent[]  @relation("ConversionEventCreator")
  conversionFunnels ConversionFunnel[] @relation("FunnelCreator")
  contentAnalyses  ContentAnalysis[]  @relation("ContentAnalysisCreator")
  contentRecommendations ContentRecommendation[] @relation("ContentRecommendationUser")
  subjectLineTests SubjectLineTest[]  @relation("SubjectLineTestCreator")
  journeys         Journey[]          @relation("JourneyCreator")
  
  // Task management relations
  createdTasks     Task[]             @relation("TaskCreator")
  assignedTasks    Task[]             @relation("TaskAssignee")
  taskComments     TaskComment[]
  
  // AI Intelligence relations
  aiContentAnalyses AI_ContentAnalysis[] @relation("UserToContentAnalysis")
  aiCustomerSegments AI_CustomerSegment[] @relation("UserToCustomerSegment")
  aiChatHistory    AI_ChatHistory[]     @relation("UserToChatHistory")
  aiTools          AI_Tool[]            @relation("UserToAITool")

  // New relations
  activities     UserActivity[]
  notifications  Notification[]
  preferences    UserPreference?
  
  // LeadPulse Form Builder relations
  createdForms   LeadPulseForm[] @relation("FormCreator")
  
  // Security & Compliance relations
  securityEvents LeadPulseSecurityEvent[]
  auditLogs      LeadPulseAuditLog[]
  consents       LeadPulseConsent[] @relation("UserConsents")
  
  // AI Action Plan relations
  approvedActions AIActionPlan[] @relation("AIActionApprover")
  executedActions AIActionPlan[] @relation("AIActionExecutor")

  @@index([email])
}

// User Preferences model
model UserPreference {
  id          String   @id @default(cuid())
  userId      String   @unique
  preferences String   // JSON string
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// NextAuth.js required models
model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserSession {
  id              String    @id @default(cuid())
  activityId      String
  startTime       DateTime  @default(now())
  endTime         DateTime?
  duration        Int?        // in seconds
  
  // Relations
  activity        UserActivity @relation(fields: [activityId], references: [id])

  @@index([activityId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Integration model
model Integration {
  id              String    @id @default(cuid())
  type            String
  name            String
  description     String?
  credentials     String    // Encrypted JSON string
  status          IntegrationStatus @default(PENDING)
  lastSyncedAt    DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  organizationId  String
  createdBy       String

  // Relations
  organization    Organization @relation(fields: [organizationId], references: [id])
  creator         User         @relation("IntegrationCreator", fields: [createdBy], references: [id])
  syncHistory     IntegrationSyncHistory[]
}

// Integration sync history
model IntegrationSyncHistory {
  id              String    @id @default(cuid())
  integrationId   String
  status          SyncStatus
  startedAt       DateTime  @default(now())
  completedAt     DateTime?
  recordsProcessed Int?
  error           String?

  // Relations
  integration     Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
}

// Core application models
model Contact {
  id              String    @id @default(cuid())
  email           String    @unique
  firstName       String?
  lastName        String?
  phone           String?
  company         String?
  jobTitle        String?
  address         String?
  city            String?
  state           String?
  country         String?
  postalCode      String?
  notes           String?
  tagsString      String?   // JSON array stored as string
  source          String?
  customFields    String?   // JSON object
  status          ContactStatus @default(ACTIVE)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  lastEngaged     DateTime?
  emailVerified   Boolean   @default(false)
  phoneVerified   Boolean   @default(false)
  createdById     String
  organizationId  String?   // Made optional for safe migration

  // Relations
  createdBy       User      @relation("CreatedBy", fields: [createdById], references: [id])
  organization    Organization? @relation(fields: [organizationId], references: [id])
  listMembers     ListMember[]
  segmentMembers  SegmentMember[]
  emailActivities EmailActivity[]
  smsActivities   SMSActivity[]
  waActivities    WhatsAppActivity[]
  workflowExecutions WorkflowExecution[]
  workflowEvents  WorkflowEvent[]
  contactJourneys ContactJourney[]
  conversionEvents ConversionEvent[]
  conversionTrackings ConversionTracking[]
  
  // LeadPulse Form Builder relations
  formSubmissions LeadPulseFormSubmission[]
  leadPulseConsents LeadPulseConsent[]
  
  // AI and Analytics relations
  customerProfile CustomerProfile?
  customerEvents  CustomerEvent[]

  @@index([organizationId])
}

// Central Customer Profile - The Brain's Memory for AI Intelligence
model CustomerProfile {
  id                  String    @id @default(cuid())
  contactId           String    @unique
  organizationId      String
  
  // --- Core Transaction Metrics (Updated by batch jobs) ---
  totalTransactions   Int       @default(0)
  totalValue          Float     @default(0) // Total monetary value
  firstTransactionDate DateTime?
  lastTransactionDate  DateTime?
  avgTimeBetweenTransactions Float? // in days
  avgTransactionValue Float     @default(0)
  
  // --- Engagement Metrics (From LeadPulse & Activities) ---
  engagementScore     Int       @default(0) // 0-100 composite score
  lastSeenDate        DateTime?
  totalPageViews      Int       @default(0)
  totalEmailOpens     Int       @default(0)
  totalEmailClicks    Int       @default(0)
  totalSMSResponses   Int       @default(0)
  mostVisitedPage     String?
  preferredChannel    String?   // email, sms, whatsapp
  optimalContactTime  String?   // JSON: {"day": "Tuesday", "hour": 14}
  
  // --- Behavioral Patterns ---
  communicationFrequency String? // daily, weekly, monthly
  purchasePattern     String?   // seasonal, regular, impulse
  engagementTrend     String?   // increasing, stable, declining
  
  // --- AI/ML Predictions (Updated by Supreme-AI) ---
  churnProbability    Float?    @default(0) // 0.0 to 1.0
  churnRiskLevel      String?   // LOW, MEDIUM, HIGH, CRITICAL
  predictedLtv        Float?    // Predicted Lifetime Value
  customerSegment     String?   // VIP, At-Risk, New, Champion, Loyal
  healthScore         Int?      @default(50) // 0-100 overall health
  
  // --- Next Best Actions (AI Decisions) ---
  nextBestAction      Json?     // ActionPlan from Supreme-AI
  lastActionDate      DateTime?
  actionHistory       Json?     // Array of recent actions and outcomes
  
  // --- Birthday & Special Events ---
  hasBirthday         Boolean   @default(false)
  nextBirthdayAction  DateTime?
  specialDates        Json?     // Anniversary, membership, etc.
  
  // --- Risk & Opportunity Flags ---
  riskFactors         Json?     // Array of current risk indicators
  opportunities       Json?     // Array of upsell/cross-sell opportunities
  
  // --- AI Learning Data ---
  aiConfidence        Float?    @default(0.5) // AI confidence in predictions
  modelVersion        String?   @default("1.0") // Track which model version
  lastPredictionDate  DateTime?
  
  // --- Timestamps ---
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  lastCalculated      DateTime? // When metrics were last updated
  
  // Relations
  contact             Contact      @relation(fields: [contactId], references: [id], onDelete: Cascade)
  organization        Organization @relation(fields: [organizationId], references: [id])
  aiActions           AIActionPlan[]
  events              CustomerEvent[]
  
  @@index([organizationId])
  @@index([churnProbability])
  @@index([healthScore])
  @@index([customerSegment])
  @@index([lastCalculated])
}

// AI Action Plans & Execution History
model AIActionPlan {
  id                  String    @id @default(cuid())
  customerProfileId   String
  organizationId      String
  
  // Action Details
  actionType          String    // SEND_EMAIL, CREATE_TASK, APPLY_DISCOUNT, etc.
  confidence          Float     // 0.0 to 1.0
  reasoning           String    // Human-readable explanation
  payload             Json      // Action-specific data
  
  // Execution Status
  status              String    @default("PENDING") // PENDING, APPROVED, EXECUTED, FAILED
  scheduledFor        DateTime?
  executedAt          DateTime?
  executedBy          String?   // user ID or "system"
  
  // Results & Learning
  executionResult     Json?     // Outcome data
  success             Boolean?
  customerResponse    Json?     // How customer responded
  impactMeasured      Json?     // Measured business impact
  
  // Governance
  requiresApproval    Boolean   @default(false)
  approvedBy          String?
  approvedAt          DateTime?
  riskLevel           String    @default("MEDIUM") // LOW, MEDIUM, HIGH
  
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  // Relations
  customerProfile     CustomerProfile @relation(fields: [customerProfileId], references: [id], onDelete: Cascade)
  organization        Organization    @relation(fields: [organizationId], references: [id])
  approver            User?           @relation("AIActionApprover", fields: [approvedBy], references: [id])
  executor            User?           @relation("AIActionExecutor", fields: [executedBy], references: [id])
  
  @@index([organizationId, status])
  @@index([customerProfileId])
  @@index([scheduledFor])
}

// Real-time Customer Events for Event Bus
model CustomerEvent {
  id                  String    @id @default(cuid())
  contactId           String
  customerProfileId   String?
  organizationId      String
  
  eventType           String    // page_view, email_open, purchase, etc.
  eventData           Json      // Event-specific payload
  timestamp           DateTime  @default(now())
  source              String    // leadpulse, email, sms, api, etc.
  processed           Boolean   @default(false)
  
  // Relations
  contact             Contact         @relation(fields: [contactId], references: [id])
  customerProfile     CustomerProfile? @relation(fields: [customerProfileId], references: [id])
  organization        Organization    @relation(fields: [organizationId], references: [id])
  
  @@index([organizationId, processed])
  @@index([contactId])
  @@index([timestamp])
}

model List {
  id              String    @id @default(cuid())
  name            String
  description     String?
  type            ListType  @default(STATIC)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdById     String
  organizationId  String?   // Made optional for safe migration

  // Relations
  createdBy       User      @relation("ListCreator", fields: [createdById], references: [id])
  organization    Organization? @relation(fields: [organizationId], references: [id])
  members         ListMember[]
  emailCampaigns  EmailCampaign[] @relation("CampaignLists")
  smsCampaigns    SMSCampaign[]   @relation("SMSCampaignLists")
  waCampaigns     WhatsAppCampaign[] @relation("WACampaignLists")

  @@index([organizationId])
}

model ListMember {
  id              String    @id @default(cuid())
  listId          String
  contactId       String
  addedAt         DateTime  @default(now())

  // Relations
  list            List      @relation(fields: [listId], references: [id], onDelete: Cascade)
  contact         Contact   @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@unique([listId, contactId])
}

model SegmentMember {
  id              String    @id @default(cuid())
  segmentId       String
  contactId       String
  addedAt         DateTime  @default(now())

  // Relations
  segment         Segment   @relation(fields: [segmentId], references: [id], onDelete: Cascade)
  contact         Contact   @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@unique([segmentId, contactId])
}

model Segment {
  id              String    @id @default(cuid())
  name            String
  description     String?
  rules           String    // JSON string
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdById     String

  // Relations
  createdBy       User      @relation("SegmentCreator", fields: [createdById], references: [id])
  members         SegmentMember[]
  emailCampaigns  EmailCampaign[] @relation("CampaignSegments")
  smsCampaigns    SMSCampaign[]   @relation("SMSCampaignSegments")
  waCampaigns     WhatsAppCampaign[] @relation("WACampaignSegments")
}

// Email marketing models
model EmailTemplate {
  id              String    @id @default(cuid())
  name            String
  description     String?
  subject         String
  content         String
  design          String?   // JSON string
  previewText     String?
  category        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdById     String

  // Relations
  createdBy       User      @relation("TemplateCreator", fields: [createdById], references: [id])
  campaigns       EmailCampaign[]
}

model EmailCampaign {
  id              String    @id @default(cuid())
  name            String
  description     String?
  subject         String
  from            String
  replyTo         String?
  templateId      String?
  content         String?
  design          String?   // JSON string
  status          CampaignStatus @default(DRAFT)
  scheduledFor    DateTime?
  sentAt          DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdById     String
  organizationId  String?   // Made optional for safe migration

  // Relations
  createdBy       User      @relation("CampaignCreator", fields: [createdById], references: [id])
  organization    Organization? @relation(fields: [organizationId], references: [id])
  template        EmailTemplate? @relation(fields: [templateId], references: [id])
  lists           List[]    @relation("CampaignLists")
  segments        Segment[] @relation("CampaignSegments")
  activities      EmailActivity[]
  tasks           Task[]

  @@index([organizationId])
}

model EmailActivity {
  id              String    @id @default(cuid())
  campaignId      String
  contactId       String
  type            ActivityType
  timestamp       DateTime  @default(now())
  metadata        String?   // JSON string

  // Relations
  campaign        EmailCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  contact         Contact    @relation(fields: [contactId], references: [id], onDelete: Cascade)
}

// SMS marketing models
model SMSTemplate {
  id              String    @id @default(cuid())
  name            String
  content         String
  variables       String    // JSON string for array
  category        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdById     String

  // Relations
  createdBy       User      @relation("SMSTemplateCreator", fields: [createdById], references: [id])
  campaigns       SMSCampaign[]
}

// A/B Testing models
model ABTest {
  id              String    @id @default(cuid())
  name            String
  description     String?
  entityType      EntityType
  entityId        String
  status          ABTestStatus @default(DRAFT)
  testType        ABTestType
  testElements    String    // JSON array of element keys being tested
  winnerMetric    ABTestMetric
  winnerThreshold Float?    // Minimum confidence level to declare winner (0-1)
  distributionPercent Float  // Percent of audience for testing (0-1)
  winnerVariantId String?   // ID of winning variant (if concluded)
  startedAt       DateTime?
  endedAt         DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdById     String

  // Relations
  createdBy       User      @relation("ABTestCreator", fields: [createdById], references: [id])
  variants        ABTestVariant[]
  results         ABTestResult[]
}

model ABTestVariant {
  id              String    @id @default(cuid())
  testId          String
  name            String
  description     String?
  content         String    // JSON object with values for each test element
  trafficPercent  Float     // Percent of test traffic (0-1)
  createdAt       DateTime  @default(now())
  
  // Relations
  test            ABTest    @relation(fields: [testId], references: [id], onDelete: Cascade)
  results         ABTestResult[]
}

model ABTestResult {
  id              String    @id @default(cuid())
  testId          String
  variantId       String
  metric          ABTestMetric
  value           Float
  sampleSize      Int
  recordedAt      DateTime  @default(now())
  
  // Relations
  test            ABTest    @relation(fields: [testId], references: [id], onDelete: Cascade)
  variant         ABTestVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  
  @@unique([testId, variantId, metric])
}

// A/B Testing enums
enum ABTestStatus {
  DRAFT
  RUNNING
  PAUSED
  COMPLETED
  CANCELLED
}

enum ABTestType {
  SIMPLE_AB      // Simple A/B (2 variants)
  MULTIVARIATE   // Multiple variants (A/B/C/D)
  ELEMENT        // Testing specific elements only
}

enum ABTestMetric {
  OPEN_RATE
  CLICK_RATE
  CONVERSION_RATE
  REVENUE
  CUSTOM
}

model SMSCampaign {
  id              String    @id @default(cuid())
  name            String
  description     String?
  from            String
  templateId      String?
  content         String?
  status          CampaignStatus @default(DRAFT)
  scheduledFor    DateTime?
  sentAt          DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdById     String

  // Relations
  createdBy       User      @relation("SMSCampaignCreator", fields: [createdById], references: [id])
  template        SMSTemplate? @relation(fields: [templateId], references: [id])
  lists           List[]    @relation("SMSCampaignLists")
  segments        Segment[] @relation("SMSCampaignSegments")
  activities      SMSActivity[]
}

model SMSActivity {
  id              String    @id @default(cuid())
  campaignId      String
  contactId       String
  type            ActivityType
  timestamp       DateTime  @default(now())
  metadata        String?   // JSON string

  // Relations
  campaign        SMSCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  contact         Contact    @relation(fields: [contactId], references: [id], onDelete: Cascade)
}

// WhatsApp marketing models
model WhatsAppTemplate {
  id              String    @id @default(cuid())
  name            String
  content         String
  variables       String    // JSON string for array
  category        String?
  status          WATemplateStatus @default(PENDING)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdById     String

  // Relations
  createdBy       User      @relation("WATemplateCreator", fields: [createdById], references: [id])
  campaigns       WhatsAppCampaign[]
}

model WhatsAppCampaign {
  id              String    @id @default(cuid())
  name            String
  description     String?
  from            String
  templateId      String?
  content         String?
  status          CampaignStatus @default(DRAFT)
  scheduledFor    DateTime?
  sentAt          DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdById     String

  // Relations
  createdBy       User      @relation("WACampaignCreator", fields: [createdById], references: [id])
  template        WhatsAppTemplate? @relation(fields: [templateId], references: [id])
  lists           List[]    @relation("WACampaignLists")
  segments        Segment[] @relation("WACampaignSegments")
  activities      WhatsAppActivity[]
}

model WhatsAppActivity {
  id              String    @id @default(cuid())
  campaignId      String
  contactId       String
  type            ActivityType
  timestamp       DateTime  @default(now())
  metadata        String?   // JSON string

  // Relations
  campaign        WhatsAppCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  contact         Contact    @relation(fields: [contactId], references: [id], onDelete: Cascade)
}

// Workflow automation models
model Workflow {
  id              String    @id @default(cuid())
  name            String
  description     String?
  status          WorkflowStatus @default(INACTIVE)
  definition      String    // JSON string
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdById     String

  // Relations
  createdBy       User      @relation("WorkflowCreator", fields: [createdById], references: [id])
  nodes           WorkflowNode[]
  triggers        WorkflowTrigger[]
  executions      WorkflowExecution[]
  events          WorkflowEvent[]
}

model WorkflowNode {
  id              String    @id @default(cuid())
  workflowId      String
  type            WorkflowNodeType
  name            String?
  config          String    // JSON string
  positionX       Float?
  positionY       Float?

  // Relations
  workflow        Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  outgoing        Connection[] @relation("SourceNode")
  incoming        Connection[] @relation("TargetNode")
}

model Connection {
  id              String    @id @default(cuid())
  sourceId        String
  targetId        String
  condition       String?   // JSON string

  // Relations
  source          WorkflowNode @relation("SourceNode", fields: [sourceId], references: [id], onDelete: Cascade)
  target          WorkflowNode @relation("TargetNode", fields: [targetId], references: [id], onDelete: Cascade)

  @@unique([sourceId, targetId])
}

model WorkflowTrigger {
  id              String    @id @default(cuid())
  workflowId      String
  type            TriggerType
  config          String    // JSON string

  // Relations
  workflow        Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)
}

// Workflow Execution Models
model WorkflowExecution {
  id              String    @id @default(cuid())
  workflowId      String
  contactId       String
  status          WorkflowExecutionStatus @default(RUNNING)
  currentStepId   String?
  context         String    // JSON string with execution context
  startedAt       DateTime  @default(now())
  completedAt     DateTime?
  lastExecutedAt  DateTime?
  errorMessage    String?
  retryCount      Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  workflow        Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  contact         Contact   @relation(fields: [contactId], references: [id], onDelete: Cascade)
  steps           WorkflowExecutionStep[]

  @@unique([workflowId, contactId])
  @@index([status, lastExecutedAt])
}

model WorkflowExecutionStep {
  id              String    @id @default(cuid())
  executionId     String
  stepId          String    // Node ID from workflow definition
  stepType        String    // Node type
  status          StepExecutionStatus @default(PENDING)
  startedAt       DateTime?
  completedAt     DateTime?
  scheduledFor    DateTime?
  output          String?   // JSON string with step output
  errorMessage    String?

  // Relations
  execution       WorkflowExecution @relation(fields: [executionId], references: [id], onDelete: Cascade)

  @@index([executionId, stepId])
}

// =================================================================
// LEADPULSE SECURITY & COMPLIANCE MODELS
// =================================================================

model LeadPulseSecurityEvent {
  id              String    @id @default(cuid())
  type            SecurityEventType
  severity        SecuritySeverity
  source          String
  details         Json?     // Event-specific details
  timestamp       DateTime  @default(now())
  userId          String?
  ipAddress       String?
  userAgent       String?
  resolved        Boolean   @default(false)
  resolvedAt      DateTime?
  resolvedBy      String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  user            User?     @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([type, severity, timestamp])
  @@index([userId, timestamp])
  @@index([ipAddress, timestamp])
}

model LeadPulseDataProcessingLog {
  id              String    @id @default(cuid())
  type            DataProcessingType
  dataSubject     String    // Email or identifier of data subject
  dataTypes       String[]  // Types of data processed
  purpose         String    // Purpose of processing
  legalBasis      String    // GDPR legal basis
  processor       String?   // Third-party processor if applicable
  timestamp       DateTime  @default(now())
  retentionUntil  DateTime? // When data should be deleted
  deleted         Boolean   @default(false)
  deletedAt       DateTime?
  createdAt       DateTime  @default(now())

  @@index([dataSubject, timestamp])
  @@index([type, timestamp])
  @@index([retentionUntil])
}

model LeadPulseAuditLog {
  id              String    @id @default(cuid())
  action          String    // Action performed (CREATE, UPDATE, DELETE, VIEW)
  resource        String    // Resource type (visitor, form, contact, etc.)
  resourceId      String    // ID of the affected resource
  userId          String?   // User who performed the action
  userEmail       String?   // Email of the user
  ipAddress       String?
  userAgent       String?
  changes         Json?     // Before/after values for updates
  metadata        Json?     // Additional context
  timestamp       DateTime  @default(now())

  // Relations
  user            User?     @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([resource, resourceId, timestamp])
  @@index([userId, timestamp])
  @@index([action, timestamp])
}

model LeadPulseConsent {
  id              String    @id @default(cuid())
  contactId       String?   // If associated with a contact
  userId          String    // User who owns this consent record
  email           String    // Email address
  consentType     ConsentType
  purpose         String    // Purpose of data processing
  granted         Boolean
  grantedAt       DateTime?
  withdrawnAt     DateTime?
  ipAddress       String?
  userAgent       String?
  source          String?   // Source of consent (form, api, etc.)
  evidenceUrl     String?   // URL to consent evidence
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  user            User      @relation("UserConsents", fields: [userId], references: [id], onDelete: Cascade)
  contact         Contact?  @relation(fields: [contactId], references: [id], onDelete: SetNull)

  @@index([email, consentType])
  @@index([contactId])
  @@index([granted, grantedAt])
}

model LeadPulseDataRetention {
  id              String    @id @default(cuid())
  resource        String    // Resource type
  resourceId      String    // Resource ID
  dataType        String    // Type of data
  retentionPeriod Int       // Retention period in days
  createdAt       DateTime  @default(now())
  scheduledDeletion DateTime // When data should be deleted
  deleted         Boolean   @default(false)
  deletedAt       DateTime?

  @@index([resource, resourceId])
  @@index([scheduledDeletion, deleted])
  @@index([dataType, scheduledDeletion])
}

// =================================================================
// ENUMS FOR SECURITY & COMPLIANCE
// =================================================================

enum SecurityEventType {
  SUSPICIOUS_ACTIVITY
  RATE_LIMIT_EXCEEDED
  INVALID_INPUT
  UNAUTHORIZED_ACCESS
  DATA_BREACH_ATTEMPT
  LOGIN_FAILURE
  PERMISSION_DENIED
  MALICIOUS_FILE_UPLOAD
  XSS_ATTEMPT
  SQL_INJECTION_ATTEMPT
}

enum SecuritySeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum DataProcessingType {
  COLLECTION
  PROCESSING
  SHARING
  DELETION
  ACCESS
  RECTIFICATION
  RESTRICTION
  PORTABILITY
}

enum ConsentType {
  MARKETING
  ANALYTICS
  FUNCTIONAL
  NECESSARY
  THIRD_PARTY_SHARING
}

model WorkflowEvent {
  id              String    @id @default(cuid())
  workflowId      String?
  contactId       String?
  eventType       String    // trigger type
  eventData       String    // JSON string
  processed       Boolean   @default(false)
  createdAt       DateTime  @default(now())

  // Relations
  workflow        Workflow? @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  contact         Contact?  @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@index([eventType, processed, createdAt])
}

// Analytics models
model Analytics {
  id              String    @id @default(cuid())
  entityType      EntityType
  entityId        String
  period          AnalyticsPeriod
  metrics         String    // JSON string
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@unique([entityType, entityId, period])
}

// Enums
enum ContactStatus {
  ACTIVE
  UNSUBSCRIBED
  BOUNCED
  SPAM
}

enum ListType {
  STATIC
  DYNAMIC
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  PAUSED
  CANCELLED
}

enum ActivityType {
  SENT
  DELIVERED
  OPENED
  CLICKED
  BOUNCED
  UNSUBSCRIBED
  REPLIED
  FAILED
}

enum WATemplateStatus {
  PENDING
  APPROVED
  REJECTED
}

enum WorkflowStatus {
  ACTIVE
  INACTIVE
  PAUSED
  ARCHIVED
}

enum WorkflowNodeType {
  TRIGGER
  CONDITION
  ACTION
  DELAY
  EMAIL
  SMS
  WHATSAPP
  NOTIFICATION
  WEBHOOK
}

enum TriggerType {
  CONTACT_CREATED
  CONTACT_UPDATED
  EMAIL_OPENED
  EMAIL_CLICKED
  FORM_SUBMITTED
  WEBHOOK
  SCHEDULED
}

enum EntityType {
  EMAIL_CAMPAIGN
  SMS_CAMPAIGN
  WHATSAPP_CAMPAIGN
  WORKFLOW
  LIST
  SEGMENT
}

enum AnalyticsPeriod {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum IntegrationStatus {
  PENDING
  ACTIVE
  ERROR
  INACTIVE
}

enum SyncStatus {
  RUNNING
  COMPLETED
  FAILED
}

// AI Features Models

// Engagement time tracking for send time optimization
model EngagementTime {
  id              String    @id @default(cuid())
  contactId       String
  entityType      EntityType
  entityId        String
  engagementType  ActivityType
  dayOfWeek       Int       // 0-6 (Sunday-Saturday)
  hourOfDay       Int       // 0-23
  timestamp       DateTime  @default(now())

  @@index([contactId, entityType, engagementType])
  @@index([dayOfWeek, hourOfDay])
}

// Smart segment suggestions
model SmartSegment {
  id              String    @id @default(cuid())
  name            String
  description     String
  rules           String    // JSON string with segment criteria
  score           Float     // Relevance score (0-1)
  status          SmartSegmentStatus @default(PENDING)
  createdAt       DateTime  @default(now())
  lastUpdated     DateTime  @updatedAt
}

// Content templates for AI-assisted content generation
model ContentTemplate {
  id              String    @id @default(cuid())
  name            String
  description     String?
  industry        String?
  category        String
  type            ContentTemplateType
  template        String    // Template with placeholders
  keywords        String?   // JSON string of relevant keywords
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// Content template usage tracking
model ContentGeneration {
  id              String    @id @default(cuid())
  templateId      String?
  entityType      EntityType
  entityId        String
  prompt          String?   // User input for generation
  result          String    // Generated content
  createdById     String
  createdAt       DateTime  @default(now())
}

// Send time optimization model
model SendTimeOptimization {
  id              String    @id @default(cuid())
  contactId       String
  dayOfWeek       Int       // 0-6 (Sunday-Saturday)
  hourOfDay       Int       // 0-23
  engagementScore Float     // 0-1 score for this time period
  confidenceLevel Float     // 0-1 based on amount of data
  lastUpdated     DateTime  @updatedAt

  @@unique([contactId, dayOfWeek, hourOfDay])
}

// New enums for AI features
enum SmartSegmentStatus {
  PENDING
  ACTIVE
  ARCHIVED
}

enum ContentTemplateType {
  EMAIL_SUBJECT
  EMAIL_BODY
  SMS_MESSAGE
  WHATSAPP_MESSAGE
  PUSH_NOTIFICATION
}

// Enhanced Conversion Tracking & Attribution Models
model ConversionEvent {
  id              String    @id @default(cuid())
  name            String
  description     String?
  eventType       String    // Custom event type key
  category        ConversionCategory
  valueType       ConversionValueType @default(COUNT)
  isSystem        Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdById     String
  
  // Relations
  createdBy       User      @relation("ConversionEventCreator", fields: [createdById], references: [id])
  trackings       ConversionTracking[]
  contacts        Contact[]
}

model ConversionTracking {
  id              String    @id @default(cuid())
  eventId         String
  entityType      EntityType
  entityId        String
  contactId       String?
  value           Float?    // Monetary or numeric value of conversion
  occurredAt      DateTime  @default(now())
  metadata        String?   // JSON string with additional data
  attributionModel AttributionModel @default(LAST_TOUCH)
  touchPoints     String?   // JSON array of touch points in the journey
  
  // Relations
  event           ConversionEvent @relation(fields: [eventId], references: [id])
  contact         Contact?   @relation(fields: [contactId], references: [id], onDelete: SetNull)
  
  @@index([entityType, entityId])
  @@index([contactId])
  @@index([eventId])
}

model ConversionFunnel {
  id              String    @id @default(cuid())
  funnelId        String    @unique  // External funnel ID used by analytics engine
  name            String
  description     String?
  steps           Json      // JSON array of funnel steps
  goalValue       Float     @default(0)
  isActive        Boolean   @default(true)
  metadata        Json?     // JSON with micro-conversions and other metadata
  organizationId  String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdById     String?
  
  // Relations
  organization    Organization @relation(fields: [organizationId], references: [id])
  createdBy       User?     @relation("FunnelCreator", fields: [createdById], references: [id])
  reports         ConversionFunnelReport[]
  
  @@index([organizationId])
  @@index([funnelId])
  @@index([isActive])
}

model ConversionFunnelReport {
  id              String    @id @default(cuid())
  funnelId        String
  startDate       DateTime
  endDate         DateTime
  data            String    // JSON with stage data and drop-off rates
  createdAt       DateTime  @default(now())
  
  // Relations
  funnel          ConversionFunnel @relation(fields: [funnelId], references: [id], onDelete: Cascade)
}

model AttributionSettings {
  id              String    @id @default(cuid())
  defaultModel    AttributionModel @default(LAST_TOUCH)
  customWeights   String?   // JSON string with custom weights for U-shaped/custom models
  lookbackWindow  Int       @default(30) // Days to look back for attribution
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

enum ConversionCategory {
  AWARENESS      // Top of funnel
  CONSIDERATION  // Middle of funnel
  CONVERSION     // Bottom of funnel
  RETENTION      // Post-purchase
  CUSTOM         // User-defined
}

enum ConversionValueType {
  COUNT          // Just count occurrences
  REVENUE        // Track monetary value
  SCORE          // Track a custom score/value
}

enum AttributionModel {
  FIRST_TOUCH    // All credit to first touch point
  LAST_TOUCH     // All credit to last touch point
  LINEAR         // Equal credit across all touch points
  TIME_DECAY     // More credit to recent touch points
  POSITION_BASED // More credit to first and last touch points (U-shaped)
  CUSTOM         // Custom-weighted model
}

// AI-Powered Content Intelligence Models
model ContentAnalysis {
  id              String    @id @default(cuid())
  type            String    // SENTIMENT, SUBJECT_LINE, CONTENT_SCORE
  contentType     String    // EMAIL_SUBJECT, EMAIL_BODY, SMS, WHATSAPP, etc.
  originalContent String    @db.Text
  result          String    @db.Text // JSON string with analysis results
  createdAt       DateTime  @default(now())
  userId          String?

  // Relations
  user            User?     @relation("ContentAnalysisCreator", fields: [userId], references: [id])
}

model ContentRecommendation {
  id              String    @id @default(cuid())
  type            String    // CLARITY, ENGAGEMENT, LENGTH, TONE, CALL_TO_ACTION, PERSONALIZATION
  entityType      String    // EMAIL_CAMPAIGN, SMS_CAMPAIGN, etc.
  entityId        String
  originalContent String    @db.Text
  suggestedContent String   @db.Text
  reason          String
  impactScore     Float     // 0 to 1
  isApplied       Boolean   @default(false)
  createdAt       DateTime  @default(now())
  appliedAt       DateTime?
  userId          String?

  // Relations
  user            User?     @relation("ContentRecommendationUser", fields: [userId], references: [id])
}

model SubjectLineTest {
  id              String    @id @default(cuid())
  campaignId      String
  originalSubject String
  variants        String    @db.Text  // JSON string with variant subject lines
  status          String    // DRAFT, RUNNING, COMPLETED
  winnerVariantId String?
  createdAt       DateTime  @default(now())
  startedAt       DateTime?
  endedAt         DateTime?
  createdById     String

  // Relations
  createdBy       User      @relation("SubjectLineTestCreator", fields: [createdById], references: [id])
  results         SubjectLineTestResult[]

  @@index([campaignId])
}

model SubjectLineTestResult {
  id              String    @id @default(cuid())
  testId          String
  variantId       String
  opens           Int       @default(0)
  clicks          Int       @default(0)
  sent            Int       @default(0)
  openRate        Float     @default(0)
  clickRate       Float     @default(0)
  
  // Relations
  test            SubjectLineTest @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@unique([testId, variantId])
}

model SentimentAnalysis {
  id              String    @id @default(cuid())
  entityType      String    // EMAIL_CAMPAIGN, SMS_CAMPAIGN, etc.
  entityId        String
  content         String    @db.Text
  score           Float     // -1 to 1
  positive        String    // JSON string with positive aspects
  negative        String    // JSON string with negative aspects
  emotions        String    // JSON string with emotional scores
  createdAt       DateTime  @default(now())

  @@index([entityType, entityId])
}

model ContentPersonalization {
  id              String    @id @default(cuid())
  campaignId      String
  contactId       String
  originalContent String    @db.Text
  personalizedContent String @db.Text
  replacements    String    @db.Text  // JSON string with replacement details
  createdAt       DateTime  @default(now())
  
  @@index([campaignId])
  @@index([contactId])
}

// Predictive Analytics Models
model PredictionModel {
  id              String    @id @default(cuid())
  name            String
  type            PredictionModelType
  description     String?
  algorithm       String    // Type of algorithm used (RandomForest, NeuralNetwork, etc.)
  features        String    // JSON array of features used in the model
  metrics         String?   // JSON object with model performance metrics
  version         String    // Model version identifier
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  predictions     Prediction[]
  behavioralPredictions BehavioralPrediction[]
}

model Prediction {
  id              String    @id @default(cuid())
  modelId         String
  entityType      String    // "contact", "campaign", etc.
  entityId        String
  predictionType  PredictionModelType
  value           Float     // The predicted value (probability, score, etc.)
  confidence      Float     // Confidence level of prediction (0-1)
  features        String?   // JSON object with features used for this specific prediction
  explanation     String?   // Explanation of the prediction factors
  createdAt       DateTime  @default(now())
  
  // Relations
  model           PredictionModel @relation(fields: [modelId], references: [id])
  
  @@index([entityType, entityId])
  @@index([predictionType])
}

model ChurnPrediction {
  id              String    @id @default(cuid())
  contactId       String
  score           Float     // Probability of churning (0-1)
  riskLevel       ChurnRiskLevel
  topFactors      String    // JSON array of factors contributing to churn risk
  nextActionDate  DateTime?  // When to take action
  createdAt       DateTime  @default(now())
  
  @@index([contactId])
  @@index([riskLevel])
}

model LifetimeValuePrediction {
  id              String    @id @default(cuid())
  contactId       String
  predictedValue  Float     // Monetary predicted value
  confidenceLevel Float     // Confidence of prediction (0-1)
  timeframe       Int       // Months in the future for prediction
  segments        String?   // JSON array of value segments
  createdAt       DateTime  @default(now())
  
  @@index([contactId])
}

model CampaignPerformancePrediction {
  id              String    @id @default(cuid())
  campaignId      String
  openRate        Float?    // Predicted open rate
  clickRate       Float?    // Predicted click rate
  conversionRate  Float?    // Predicted conversion rate
  revenue         Float?    // Predicted revenue
  factors         String    // JSON object with influencing factors
  createdAt       DateTime  @default(now())
  
  @@index([campaignId])
}

model OptimalSendTime {
  id              String    @id @default(cuid())
  contactId       String
  channelType     String    // "email", "sms", "push", etc.
  dayOfWeek       Int       // 0-6 (Sunday-Saturday)
  hourOfDay       Int       // 0-23
  probability     Float     // Engagement probability (0-1)
  confidenceLevel Float     // Confidence level (0-1)
  lastUpdated     DateTime  @updatedAt
  
  @@unique([contactId, channelType, dayOfWeek, hourOfDay])
  @@index([contactId, channelType])
}

enum PredictionModelType {
  CHURN
  LTV
  CAMPAIGN_PERFORMANCE
  SEND_TIME
  OPEN_RATE
  CLICK_RATE
  CONVERSION_RATE
}

enum ChurnRiskLevel {
  LOW
  MEDIUM
  HIGH
  VERY_HIGH
}

// Customer Journey Mapping Models
model Journey {
  id              String    @id @default(cuid())
  name            String
  description     String?
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdById     String
  
  // Relations
  createdBy       User      @relation("JourneyCreator", fields: [createdById], references: [id])
  stages          JourneyStage[]
  metrics         JourneyMetric[]
  contactJourneys ContactJourney[]
}

model JourneyStage {
  id              String    @id @default(cuid())
  journeyId       String
  name            String
  description     String?
  order           Int       // Position in journey sequence
  expectedDuration Int?     // Expected time to pass through in hours
  conversionGoal  Float?    // Target conversion % to next stage
  isEntryPoint    Boolean   @default(false)
  isExitPoint     Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  journey         Journey   @relation(fields: [journeyId], references: [id], onDelete: Cascade)
  transitions     JourneyTransition[] @relation("FromStage")
  incomingTransitions JourneyTransition[] @relation("ToStage")
  contactStages   ContactJourneyStage[]
  metrics         JourneyStageMetric[]
}

model JourneyTransition {
  id              String    @id @default(cuid())
  fromStageId     String
  toStageId       String
  name            String?
  description     String?
  conditions      String?   // JSON string with conditions for transition
  triggerType     TransitionTriggerType
  triggerDetails  String?   // JSON string with trigger specifics
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  fromStage       JourneyStage @relation("FromStage", fields: [fromStageId], references: [id], onDelete: Cascade)
  toStage         JourneyStage @relation("ToStage", fields: [toStageId], references: [id], onDelete: Cascade)
  contactTransitions ContactJourneyTransition[]
  
  @@unique([fromStageId, toStageId])
}

model ContactJourney {
  id              String    @id @default(cuid())
  journeyId       String
  contactId       String
  status          JourneyStatus @default(ACTIVE)
  startedAt       DateTime  @default(now())
  completedAt     DateTime?
  currentStageId  String?
  
  // Relations
  journey         Journey   @relation(fields: [journeyId], references: [id])
  contact         Contact   @relation(fields: [contactId], references: [id], onDelete: Cascade)
  stages          ContactJourneyStage[]
  transitions     ContactJourneyTransition[]
  
  @@index([journeyId, contactId])
  @@index([status])
}

model ContactJourneyStage {
  id              String    @id @default(cuid())
  contactJourneyId String
  stageId         String
  enteredAt       DateTime  @default(now())
  exitedAt        DateTime?
  durationSeconds Int?      // Time spent in stage
  
  // Relations
  contactJourney  ContactJourney @relation(fields: [contactJourneyId], references: [id], onDelete: Cascade)
  stage           JourneyStage @relation(fields: [stageId], references: [id])
  
  @@index([contactJourneyId])
  @@index([stageId, enteredAt])
}

model ContactJourneyTransition {
  id              String    @id @default(cuid())
  contactJourneyId String
  transitionId    String
  timestamp       DateTime  @default(now())
  fromStageId     String
  toStageId       String
  triggerSource   String?   // Event that triggered the transition
  
  // Relations
  contactJourney  ContactJourney @relation(fields: [contactJourneyId], references: [id], onDelete: Cascade)
  transition      JourneyTransition @relation(fields: [transitionId], references: [id])
  
  @@index([contactJourneyId])
  @@index([transitionId])
}

model JourneyMetric {
  id              String    @id @default(cuid())
  journeyId       String
  name            String
  description     String?
  metricType      JourneyMetricType
  targetValue     Float?
  aggregationType MetricAggregationType @default(SUM)
  formula         String?   // Custom formula to calculate the metric
  isSuccess       Boolean   @default(false) // Is this a success metric for the journey
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  journey         Journey   @relation(fields: [journeyId], references: [id], onDelete: Cascade)
  stageMetrics    JourneyStageMetric[]
}

model JourneyStageMetric {
  id              String    @id @default(cuid())
  stageId         String
  metricId        String
  targetValue     Float?    // Stage-specific target that overrides journey level
  actualValue     Float?    // Current value
  lastUpdated     DateTime  @updatedAt
  
  // Relations
  stage           JourneyStage @relation(fields: [stageId], references: [id], onDelete: Cascade)
  metric          JourneyMetric @relation(fields: [metricId], references: [id], onDelete: Cascade)
  
  @@unique([stageId, metricId])
}

model JourneyAnalytics {
  id              String    @id @default(cuid())
  journeyId       String
  date            DateTime
  totalContacts   Int
  activeContacts  Int
  completedContacts Int
  droppedContacts Int
  conversionRate  Float
  averageDuration Int      // Average journey duration in hours
  stageData       String   // JSON with stage-level analytics
  
  @@unique([journeyId, date])
}

enum JourneyStatus {
  ACTIVE
  COMPLETED
  DROPPED
  PAUSED
}

enum TransitionTriggerType {
  AUTOMATIC      // Time-based or system triggered
  EVENT          // Triggered by an event (email open, click, etc.)
  CONVERSION     // Triggered by a conversion event
  CONDITION      // Triggered when conditions are met
  MANUAL         // Manually triggered by an operator
}

enum JourneyMetricType {
  CONVERSION_RATE
  CONTACTS_COUNT
  DURATION
  REVENUE
  CUSTOM
}

enum MetricAggregationType {
  SUM
  AVERAGE
  COUNT
  MIN
  MAX
}

// Task management models
model Task {
  id              String    @id @default(cuid())
  title           String
  description     String?
  status          String    @default("TODO")
  priority        String    @default("MEDIUM")
  dueDate         DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  creatorId       String
  assigneeId      String?
  contactId       String?
  segmentId       String?
  campaignId      String?
  regionId        String?
  organizationId  String?   // Made optional for safe migration

  // Relations
  creator         User      @relation(name: "TaskCreator", fields: [creatorId], references: [id])
  assignee        User?     @relation(name: "TaskAssignee", fields: [assigneeId], references: [id])
  campaign        EmailCampaign? @relation(fields: [campaignId], references: [id])
  organization    Organization? @relation(fields: [organizationId], references: [id])
  dependencies    TaskDependency[] @relation("DependentTask")
  dependsOn       TaskDependency[] @relation("PrerequisiteTask")
  comments        TaskComment[]

  @@index([organizationId])
}

model TaskDependency {
  id               String    @id @default(cuid())
  taskId           String
  dependsOnTaskId  String
  createdAt        DateTime  @default(now())

  // Relations
  task             Task      @relation("DependentTask", fields: [taskId], references: [id], onDelete: Cascade)
  dependsOnTask    Task      @relation("PrerequisiteTask", fields: [dependsOnTaskId], references: [id], onDelete: Cascade)

  @@unique([taskId, dependsOnTaskId])
}

model TaskComment {
  id              String    @id @default(cuid())
  taskId          String
  content         String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdById     String

  // Relations
  task            Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  createdBy       User      @relation(fields: [createdById], references: [id])
}

// AI Intelligence Models
model AI_ContentAnalysis {
  id              String    @id @default(cuid())
  title           String
  content         String
  supremeScore    Int       @default(0)
  sentiment       Float?
  readability     Int?
  engagement      Int?
  analysis        String?   // JSON
  tags            String[]  @default([])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdById     String

  // Relations
  createdBy       User      @relation("UserToContentAnalysis", fields: [createdById], references: [id], onDelete: Cascade)
}

model AI_CustomerSegment {
  id              String    @id @default(cuid())
  name            String
  description     String?
  criteria        String?   // JSON
  customerCount   Int       @default(0)
  churnRisk       Float     @default(0)
  lifetimeValue   Float     @default(0)
  tags            String[]  @default([])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdById     String

  // Relations
  createdBy       User      @relation("UserToCustomerSegment", fields: [createdById], references: [id], onDelete: Cascade)
}

model AI_ChatHistory {
  id              String    @id @default(cuid())
  userId          String
  sessionId       String?
  question        String
  answer          String
  context         String?   // JSON
  confidence      Float     @default(0)
  createdAt       DateTime  @default(now())

  // Relations
  user            User      @relation("UserToChatHistory", fields: [userId], references: [id], onDelete: Cascade)
}

model AI_Tool {
  id              String    @id @default(cuid())
  name            String
  description     String?
  category        String
  config          String?   // JSON
  usage           String?   // JSON
  isPublic        Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdById     String

  // Relations
  createdBy       User      @relation("UserToAITool", fields: [createdById], references: [id], onDelete: Cascade)
}

// LeadPulse models
model LeadPulseVisitor {
  id              String    @id @default(cuid())
  fingerprint     String    @unique
  ipAddress       String?
  userAgent       String?
  referrer        String?
  firstVisit      DateTime  @default(now())
  lastVisit       DateTime  @updatedAt
  totalVisits     Int       @default(1)
  isActive        Boolean   @default(true)
  engagementScore Int       @default(0)
  engagementLevel String?
  
  // Location data
  city            String?
  country         String?
  region          String?
  latitude        Float?
  longitude       Float?
  
  // Device data
  device          String?
  browser         String?
  os              String?
  
  // Metadata
  metadata        Json?
  score           Int       @default(0)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  touchpoints     LeadPulseTouchpoint[]
  formSubmissions LeadPulseFormSubmission[]
  analytics       LeadPulseAnalytics[]
  
  @@index([fingerprint])
  @@index([lastVisit])
  @@index([isActive])
}

model AnonymousVisitor {
  id              String    @id @default(cuid())
  fingerprint     String    @unique
  ipAddress       String?
  userAgent       String?
  referrer        String?
  contactId       String?
  firstVisit      DateTime  @default(now())
  lastVisit       DateTime  @updatedAt
  totalVisits     Int       @default(1)
  visitCount      Int       @default(1)
  isActive        Boolean   @default(true)
  engagementScore Int       @default(0)
  score           Int       @default(0)
  
  // Location data
  city            String?
  country         String?
  region          String?
  latitude        Float?
  longitude       Float?
  
  // Relations
  LeadPulseTouchpoint LeadPulseTouchpoint[]
  LeadPulseJourney   LeadPulseJourney[]
  
  @@index([fingerprint])
  @@index([lastVisit])
}

model LeadPulseJourney {
  id             String    @id @default(cuid())
  visitorId      String
  startDate      DateTime
  lastUpdate     DateTime  @updatedAt
  stage          String
  completionDate DateTime?
  score          Int       @default(0)
  isCompleted    Boolean   @default(false)
  source         String?
  
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  // Relations
  visitor        AnonymousVisitor @relation(fields: [visitorId], references: [id], onDelete: Cascade)
  
  @@index([visitorId])
  @@index([stage])
}

model LeadPulseTouchpoint {
  id              String    @id @default(cuid())
  visitorId       String?
  anonymousVisitorId String?
  timestamp       DateTime  @default(now())
  type            LeadPulseTouchpointType
  url             String?
  duration        Int?      // Duration in milliseconds
  value           Int       @default(1) // Engagement value
  score           Int       @default(1) // Score value
  metadata        Json?     // Additional data like form fields, click targets, etc.
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  visitor         LeadPulseVisitor? @relation(fields: [visitorId], references: [id], onDelete: Cascade)
  anonymousVisitor AnonymousVisitor? @relation(fields: [anonymousVisitorId], references: [id], onDelete: Cascade)
  
  @@index([visitorId, timestamp])
  @@index([anonymousVisitorId, timestamp])
  @@index([type])
}

model LeadPulseSegment {
  id              String    @id @default(cuid())
  name            String
  description     String?
  criteria        Json      // Segment rules
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model LeadPulseInsight {
  id              String    @id @default(cuid())
  type            LeadPulseInsightType
  title           String
  description     String
  importance      LeadPulseImportance
  metric          Json?     // Optional metric data
  recommendation  String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

enum LeadPulseTouchpointType {
  PAGEVIEW
  CLICK
  FORM_VIEW
  FORM_START
  FORM_SUBMIT
  CONVERSION
}

enum LeadPulseInsightType {
  BEHAVIOR
  PREDICTION
  OPPORTUNITY
  TREND
}

enum LeadPulseImportance {
  LOW
  MEDIUM
  HIGH
}

// LeadPulse Form Builder Models
model LeadPulseForm {
  id              String    @id @default(cuid())
  name            String
  title           String
  description     String?
  status          FormStatus @default(DRAFT)
  
  // Design & Configuration
  theme           Json?     // Colors, fonts, styling
  layout          FormLayout @default(SINGLE_COLUMN)
  settings        Json?     // Form-level settings (notifications, redirects, etc.)
  
  // Behavior Settings
  submitButtonText String   @default("Submit")
  successMessage  String    @default("Thank you for your submission!")
  errorMessage    String    @default("Something went wrong. Please try again.")
  redirectUrl     String?   // Redirect after successful submission
  
  // Analytics & Tracking
  isTrackingEnabled Boolean @default(true)
  conversionGoal  String?   // What conversion event this form tracks
  
  // Publishing
  isPublished     Boolean   @default(false)
  publishedAt     DateTime?
  embedCode       String?   // Generated embed code for external sites
  publicUrl       String?   // Public form URL
  
  // Metadata
  createdBy       String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  creator         User?     @relation("FormCreator", fields: [createdBy], references: [id])
  fields          LeadPulseFormField[]
  submissions     LeadPulseFormSubmission[]
  analytics       LeadPulseFormAnalytics[]
  
  @@index([status])
  @@index([isPublished])
  @@index([createdBy])
}

model LeadPulseFormField {
  id              String    @id @default(cuid())
  formId          String
  type            FormFieldType
  name            String    // Field name for data storage
  label           String    // Display label
  placeholder     String?
  helpText        String?
  
  // Field Configuration
  isRequired      Boolean   @default(false)
  isVisible       Boolean   @default(true)
  defaultValue    String?
  
  // Validation Rules
  validation      Json?     // Validation rules (min/max length, regex, etc.)
  
  // Field-specific Options
  options         Json?     // For select, radio, checkbox (array of options)
  fileTypes       String[]  // For file upload fields
  maxFileSize     Int?      // Max file size in bytes
  
  // Layout & Styling
  order           Int       @default(0)
  width           FormFieldWidth @default(FULL)
  cssClasses      String?   // Custom CSS classes
  
  // Conditional Logic
  conditionalLogic Json?    // Show/hide based on other field values
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  form            LeadPulseForm @relation(fields: [formId], references: [id], onDelete: Cascade)
  submissionData  LeadPulseSubmissionData[]
  
  @@index([formId, order])
  @@index([type])
}

model LeadPulseFormSubmission {
  id              String    @id @default(cuid())
  formId          String
  visitorId       String?   // Link to LeadPulse visitor
  contactId       String?   // Link to created/updated contact
  
  // Submission Context
  submittedAt     DateTime  @default(now())
  ipAddress       String?
  userAgent       String?
  referrer        String?
  utmSource       String?
  utmMedium       String?
  utmCampaign     String?
  
  // Processing Status
  status          SubmissionStatus @default(PENDING)
  processedAt     DateTime?
  
  // Lead Scoring
  score           Int       @default(0)
  quality         LeadQuality @default(UNKNOWN)
  
  // Metadata
  metadata        Json?     // Additional tracking data
  
  // Relations
  form            LeadPulseForm @relation(fields: [formId], references: [id], onDelete: Cascade)
  visitor         LeadPulseVisitor? @relation(fields: [visitorId], references: [id])
  contact         Contact?  @relation(fields: [contactId], references: [id])
  data            LeadPulseSubmissionData[]
  
  @@index([formId, submittedAt])
  @@index([visitorId])
  @@index([contactId])
  @@index([status])
}

model LeadPulseSubmissionData {
  id              String    @id @default(cuid())
  submissionId    String
  fieldId         String
  fieldName       String    // Field name for easy querying
  fieldType       FormFieldType
  value           String?   // Text value
  fileUrl         String?   // For file uploads
  
  createdAt       DateTime  @default(now())
  
  // Relations
  submission      LeadPulseFormSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  field           LeadPulseFormField @relation(fields: [fieldId], references: [id])
  
  @@index([submissionId])
  @@index([fieldId])
  @@index([fieldName])
}

model LeadPulseFormAnalytics {
  id              String    @id @default(cuid())
  formId          String
  date            DateTime  @db.Date
  
  // View Metrics
  views           Int       @default(0)
  uniqueViews     Int       @default(0)
  
  // Interaction Metrics
  fieldInteractions Int     @default(0)
  formStarts      Int       @default(0)
  
  // Completion Metrics
  submissions     Int       @default(0)
  completions     Int       @default(0)
  
  // Conversion Metrics
  conversionRate  Float     @default(0)
  averageTime     Int?      // Average time to complete in seconds
  abandonmentRate Float     @default(0)
  
  // Field Analytics
  fieldAnalytics  Json?     // Per-field interaction and abandonment data
  
  // Traffic Sources
  trafficSources  Json?     // UTM and referrer breakdown
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  form            LeadPulseForm @relation(fields: [formId], references: [id], onDelete: Cascade)
  
  @@unique([formId, date])
  @@index([formId])
  @@index([date])
}

// Form Builder Enums
enum FormStatus {
  DRAFT
  PUBLISHED
  PAUSED
  ARCHIVED
}

enum FormLayout {
  SINGLE_COLUMN
  TWO_COLUMN
  MULTI_STEP
  FLOATING_LABELS
}

enum FormFieldType {
  TEXT
  EMAIL
  PHONE
  NUMBER
  TEXTAREA
  SELECT
  MULTISELECT
  RADIO
  CHECKBOX
  DATE
  TIME
  DATETIME
  FILE
  HIDDEN
  HTML
  DIVIDER
}

enum FormFieldWidth {
  QUARTER
  THIRD
  HALF
  TWO_THIRDS
  THREE_QUARTERS
  FULL
}

enum SubmissionStatus {
  PENDING
  PROCESSED
  FAILED
  SPAM
  DUPLICATE
}

enum LeadQuality {
  UNKNOWN
  COLD
  WARM
  HOT
  QUALIFIED
}

// Subscription Plans
model SubscriptionPlan {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  currency    String   @default("NGN")
  interval    String   @default("monthly") // monthly, annually
  features    String   // JSON string of features
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  paystackPlanId String? // Paystack plan ID

  // Relations
  subscriptions Subscription[]
}

// Subscription model
model Subscription {
  id          String   @id @default(cuid())
  organizationId String
  planId      String
  status      SubscriptionStatus @default(ACTIVE)
  startDate   DateTime @default(now())
  endDate     DateTime?
  canceledAt  DateTime?
  paystackSubscriptionId String?
  paystackCustomerId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  plan        SubscriptionPlan @relation(fields: [planId], references: [id])
  transactions Transaction[]
}

// Transaction model
model Transaction {
  id          String   @id @default(cuid())
  subscriptionId String
  amount      Float
  currency    String
  status      TransactionStatus @default(PENDING)
  paystackReference String @unique
  paystackTransactionId String?
  metadata    String?  // JSON string for additional data
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  subscription Subscription @relation(fields: [subscriptionId], references: [id])
}

// Payment Method model
model PaymentMethod {
  id          String   @id @default(cuid())
  organizationId String
  type        PaymentMethodType
  last4       String?
  expMonth    Int?
  expYear     Int?
  brand       String?
  isDefault   Boolean  @default(false)
  paystackAuthorizationCode String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  EXPIRED
  TRIALING
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}

enum PaymentMethodType {
  CARD
  BANK
  USSD
  BANK_TRANSFER
  QR
  MOBILE_MONEY
}

enum WorkflowExecutionStatus {
  RUNNING
  COMPLETED
  FAILED
  PAUSED
  CANCELLED
}

enum StepExecutionStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  SKIPPED
  SCHEDULED
}

model UserActivity {
  id              String    @id @default(cuid())
  userId          String
  type            String    // PAGE_VIEW, CLICK, PURCHASE, etc.
  channel         String    // EMAIL, SMS, WHATSAPP, WEB
  timestamp       DateTime  @default(now())
  metadata        Json?       // Additional activity details
  sentiment       String?     // positive, negative, neutral

  // Relations
  user            User        @relation(fields: [userId], references: [id])
  purchases       Purchase[]
  sessions        UserSession[]
  interactions    Interaction[]

  @@index([userId, timestamp])
  @@index([type])
}

model Purchase {
  id              String    @id @default(cuid())
  activityId      String
  amount          Float
  productId       String
  timestamp       DateTime  @default(now())
  
  // Relations
  activity        UserActivity @relation(fields: [activityId], references: [id])

  @@index([activityId])
}

model Interaction {
  id              String    @id @default(cuid())
  activityId      String
  type            String    // click, scroll, form_submit, etc.
  timestamp       DateTime  @default(now())
  metadata        Json?       // Additional interaction details
  
  // Relations
  activity        UserActivity @relation(fields: [activityId], references: [id])

  @@index([activityId])
}

model BehavioralPrediction {
  id              String    @id @default(cuid())
  userId          String
  modelId         String
  predictions     String    @db.Text  // JSON string with all predictions
  segments        String    @db.Text  // JSON array of segments
  confidenceScores String   @db.Text  // JSON object with confidence scores
  explanatoryFactors String @db.Text  // JSON array of factors
  features        String    @db.Text  // JSON object with input features
  createdAt       DateTime  @default(now())
  
  // Relations
  model           PredictionModel @relation(fields: [modelId], references: [id])

  @@index([userId, createdAt])
  @@index([modelId])
}

model BehavioralSegment {
  id              String    @id @default(cuid())
  name            String
  description     String?
  criteria        String    @db.Text  // JSON object with segmentation criteria
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@unique([name])
}

// LeadPulse Alert System
model LeadPulseAlert {
  id              String    @id @default(cuid())
  type            String    // alert type (high_value_visitor, form_abandonment, etc.)
  title           String
  message         String
  priority        String    // high, medium, low, info
  status          String    @default("ACTIVE") // ACTIVE, DISMISSED, RESOLVED
  metadata        Json?     // Additional alert data
  createdAt       DateTime  @default(now())
  triggeredAt     DateTime  @default(now())
  dismissedAt     DateTime?
  resolvedAt      DateTime?
  
  @@index([type, status])
  @@index([priority, createdAt])
}

// LeadPulse Page Views
model LeadPulsePageView {
  id              String    @id @default(cuid())
  visitorId       String    // Can be fingerprint or visitor ID
  url             String
  title           String?
  timestamp       DateTime  @default(now())
  timeOnPage      Int?      // Time spent on page in seconds
  metadata        Json?     // Additional page view data
  
  @@index([visitorId, timestamp])
  @@index([url])
}

// Advanced Analytics Model for Scroll Depth and Click Heat Mapping
model LeadPulseAnalytics {
  id                    String    @id @default(cuid())
  sessionId             String    @unique
  visitorId             String
  page                  String
  startTime             DateTime
  endTime               DateTime?
  userAgent             String?
  viewport              Json?     // { width, height }
  referrer              String?
  isNewVisitor          Boolean   @default(false)
  
  // Scroll Analytics
  scrollAnalytics       Json?     // ScrollAnalytics object
  
  // Click Heatmap Data
  clickHeatmap          Json?     // ClickHeatmapData object
  
  // Behavioral Insights
  behavioralInsights    Json?     // BehavioralInsights object
  engagementScore       Int       @default(0)
  userIntent            String    @default("browse") // research, purchase, browse, support
  conversionProbability Int       @default(0)
  frustrationSignals    String[]  @default([])
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  // Relation to visitor
  visitor               LeadPulseVisitor @relation(fields: [visitorId], references: [fingerprint])
  
  @@index([sessionId])
  @@index([visitorId, startTime])
  @@index([page, startTime])
  @@index([engagementScore])
  @@index([userIntent])
  @@index([conversionProbability])
}

// Onboarding Configuration Models
model SMSProvider {
  id                  String    @id @default(cuid())
  organizationId      String    @unique
  provider            String    // africastalking, twilio, termii, nexmo
  credentials         Json      // Encrypted provider credentials
  senderId            String?   // Sender ID for providers that require it
  isActive            Boolean   @default(false)
  verificationStatus  String    @default("pending") // pending, verified, failed
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  // Relations
  organization        Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@index([organizationId])
}

model WhatsAppBusinessConfig {
  id                  String    @id @default(cuid())
  organizationId      String    @unique
  businessAccountId   String
  phoneNumberId       String
  accessToken         String    // Encrypted access token
  webhookUrl          String
  verifyToken         String
  phoneNumber         String?   // The actual phone number
  displayName         String?   // Business display name
  isActive            Boolean   @default(false)
  verificationStatus  String    @default("pending") // pending, verified, failed
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  // Relations
  organization        Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@index([organizationId])
}

model EmailDomainConfig {
  id                  String    @id @default(cuid())
  organizationId      String    @unique
  domain              String
  spfVerified         Boolean   @default(false)
  dkimVerified        Boolean   @default(false)
  dmarcVerified       Boolean   @default(false)
  mxVerified          Boolean   @default(false)
  verificationStatus  String    @default("pending") // pending, partial, verified, failed
  lastChecked         DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  // Relations
  organization        Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@index([organizationId])
}
