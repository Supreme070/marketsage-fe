generator client {
  provider      = "prisma-client-js"
  output        = "./node_modules/.prisma/client"
  binaryTargets = ["native", "linux-musl", "linux-musl-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x", "darwin", "darwin-arm64"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Notification model for system notifications
model Notification {
  id        String   @id @default(uuid())
  userId    String
  title     String
  message   String
  type      String   // info, success, warning, error
  category  String   // system, campaigns, workflows, etc.
  read      Boolean  @default(false)
  link      String?  // Optional link to navigate to when clicked
  timestamp DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Updated UserRole enum to add more specific roles
enum UserRole {
  USER
  ADMIN
  IT_ADMIN
  SUPER_ADMIN
}

// Organization model
model Organization {
  id             String    @id @default(cuid())
  name           String
  plan           String    @default("FREE")
  logoUrl        String?
  websiteUrl     String?
  address        String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  users          User[]
  integrations   Integration[]
}

// User model for authentication and platform access
model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  password       String?
  image          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  lastLogin      DateTime?
  isActive       Boolean   @default(true)
  role           UserRole  @default(USER)
  organizationId String?
  company        String?

  // Relations
  organization     Organization? @relation(fields: [organizationId], references: [id])
  accounts         Account[]
  sessions         Session[]
  contacts         Contact[]          @relation("CreatedBy")
  emailCampaigns   EmailCampaign[]    @relation("CampaignCreator")
  emailTemplates   EmailTemplate[]    @relation("TemplateCreator")
  smsCampaigns     SMSCampaign[]      @relation("SMSCampaignCreator")
  smsTemplates     SMSTemplate[]      @relation("SMSTemplateCreator")
  waCampaigns      WhatsAppCampaign[] @relation("WACampaignCreator")
  waTemplates      WhatsAppTemplate[] @relation("WATemplateCreator")
  workflows        Workflow[]         @relation("WorkflowCreator")
  lists            List[]             @relation("ListCreator")
  segments         Segment[]          @relation("SegmentCreator")
  createdIntegrations Integration[]   @relation("IntegrationCreator")
  abTests          ABTest[]           @relation("ABTestCreator")
  conversionEvents ConversionEvent[]  @relation("ConversionEventCreator")
  conversionFunnels ConversionFunnel[] @relation("FunnelCreator")
  contentAnalyses  ContentAnalysis[]  @relation("ContentAnalysisCreator")
  contentRecommendations ContentRecommendation[] @relation("ContentRecommendationUser")
  subjectLineTests SubjectLineTest[]  @relation("SubjectLineTestCreator")
  journeys         Journey[]          @relation("JourneyCreator")
  notifications    Notification[]     // Add relation to notifications
  
  // Task management relations
  createdTasks     Task[]             @relation("TaskCreator")
  assignedTasks    Task[]             @relation("TaskAssignee")
  taskComments     TaskComment[]
  
  // AI Intelligence relations
  aiContentAnalyses AI_ContentAnalysis[] @relation("UserToContentAnalysis")
  aiCustomerSegments AI_CustomerSegment[] @relation("UserToCustomerSegment")
  aiChatHistory    AI_ChatHistory[]     @relation("UserToChatHistory")
  aiTools          AI_Tool[]            @relation("UserToAITool")
}

// NextAuth.js required models
model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Integration model
model Integration {
  id              String    @id @default(cuid())
  type            String
  name            String
  description     String?
  credentials     String    // Encrypted JSON string
  status          IntegrationStatus @default(PENDING)
  lastSyncedAt    DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  organizationId  String
  createdBy       String

  // Relations
  organization    Organization @relation(fields: [organizationId], references: [id])
  creator         User         @relation("IntegrationCreator", fields: [createdBy], references: [id])
  syncHistory     IntegrationSyncHistory[]
}

// Integration sync history
model IntegrationSyncHistory {
  id              String    @id @default(cuid())
  integrationId   String
  status          SyncStatus
  startedAt       DateTime  @default(now())
  completedAt     DateTime?
  recordsProcessed Int?
  error           String?

  // Relations
  integration     Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
}

// Core application models
model Contact {
  id              String    @id @default(cuid())
  email           String?
  phone           String?
  firstName       String?
  lastName        String?
  company         String?
  jobTitle        String?
  address         String?
  city            String?
  state           String?
  country         String?
  postalCode      String?
  notes           String?
  tagsString      String?   // Stored as JSON string
  source          String?
  status          ContactStatus @default(ACTIVE)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdById     String

  // Relations
  createdBy       User      @relation("CreatedBy", fields: [createdById], references: [id])
  listMembers     ListMember[]
  emailActivities EmailActivity[]
  smsActivities   SMSActivity[]
  waActivities    WhatsAppActivity[]
  conversions     ConversionTracking[]
  contactJourneys ContactJourney[]
}

model List {
  id              String    @id @default(cuid())
  name            String
  description     String?
  type            ListType  @default(STATIC)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdById     String

  // Relations
  createdBy       User      @relation("ListCreator", fields: [createdById], references: [id])
  members         ListMember[]
  emailCampaigns  EmailCampaign[] @relation("CampaignLists")
  smsCampaigns    SMSCampaign[]   @relation("SMSCampaignLists")
  waCampaigns     WhatsAppCampaign[] @relation("WACampaignLists")
}

model ListMember {
  id              String    @id @default(cuid())
  listId          String
  contactId       String
  addedAt         DateTime  @default(now())

  // Relations
  list            List      @relation(fields: [listId], references: [id], onDelete: Cascade)
  contact         Contact   @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@unique([listId, contactId])
}

model Segment {
  id              String    @id @default(cuid())
  name            String
  description     String?
  rules           String    // JSON string
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdById     String

  // Relations
  createdBy       User      @relation("SegmentCreator", fields: [createdById], references: [id])
  emailCampaigns  EmailCampaign[] @relation("CampaignSegments")
  smsCampaigns    SMSCampaign[]   @relation("SMSCampaignSegments")
  waCampaigns     WhatsAppCampaign[] @relation("WACampaignSegments")
}

// Email marketing models
model EmailTemplate {
  id              String    @id @default(cuid())
  name            String
  description     String?
  subject         String
  content         String
  design          String?   // JSON string
  previewText     String?
  category        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdById     String

  // Relations
  createdBy       User      @relation("TemplateCreator", fields: [createdById], references: [id])
  campaigns       EmailCampaign[]
}

model EmailCampaign {
  id              String    @id @default(cuid())
  name            String
  description     String?
  subject         String
  from            String
  replyTo         String?
  templateId      String?
  content         String?
  design          String?   // JSON string
  status          CampaignStatus @default(DRAFT)
  scheduledFor    DateTime?
  sentAt          DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdById     String

  // Relations
  createdBy       User      @relation("CampaignCreator", fields: [createdById], references: [id])
  template        EmailTemplate? @relation(fields: [templateId], references: [id])
  lists           List[]    @relation("CampaignLists")
  segments        Segment[] @relation("CampaignSegments")
  activities      EmailActivity[]
  tasks           Task[]
}

model EmailActivity {
  id              String    @id @default(cuid())
  campaignId      String
  contactId       String
  type            ActivityType
  timestamp       DateTime  @default(now())
  metadata        String?   // JSON string

  // Relations
  campaign        EmailCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  contact         Contact    @relation(fields: [contactId], references: [id], onDelete: Cascade)
}

// SMS marketing models
model SMSTemplate {
  id              String    @id @default(cuid())
  name            String
  content         String
  variables       String    // JSON string for array
  category        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdById     String

  // Relations
  createdBy       User      @relation("SMSTemplateCreator", fields: [createdById], references: [id])
  campaigns       SMSCampaign[]
}

// A/B Testing models
model ABTest {
  id              String    @id @default(cuid())
  name            String
  description     String?
  entityType      EntityType
  entityId        String
  status          ABTestStatus @default(DRAFT)
  testType        ABTestType
  testElements    String    // JSON array of element keys being tested
  winnerMetric    ABTestMetric
  winnerThreshold Float?    // Minimum confidence level to declare winner (0-1)
  distributionPercent Float  // Percent of audience for testing (0-1)
  winnerVariantId String?   // ID of winning variant (if concluded)
  startedAt       DateTime?
  endedAt         DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdById     String

  // Relations
  createdBy       User      @relation("ABTestCreator", fields: [createdById], references: [id])
  variants        ABTestVariant[]
  results         ABTestResult[]
}

model ABTestVariant {
  id              String    @id @default(cuid())
  testId          String
  name            String
  description     String?
  content         String    // JSON object with values for each test element
  trafficPercent  Float     // Percent of test traffic (0-1)
  createdAt       DateTime  @default(now())
  
  // Relations
  test            ABTest    @relation(fields: [testId], references: [id], onDelete: Cascade)
  results         ABTestResult[]
}

model ABTestResult {
  id              String    @id @default(cuid())
  testId          String
  variantId       String
  metric          ABTestMetric
  value           Float
  sampleSize      Int
  recordedAt      DateTime  @default(now())
  
  // Relations
  test            ABTest    @relation(fields: [testId], references: [id], onDelete: Cascade)
  variant         ABTestVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  
  @@unique([testId, variantId, metric])
}

// A/B Testing enums
enum ABTestStatus {
  DRAFT
  RUNNING
  PAUSED
  COMPLETED
  CANCELLED
}

enum ABTestType {
  SIMPLE_AB      // Simple A/B (2 variants)
  MULTIVARIATE   // Multiple variants (A/B/C/D)
  ELEMENT        // Testing specific elements only
}

enum ABTestMetric {
  OPEN_RATE
  CLICK_RATE
  CONVERSION_RATE
  REVENUE
  CUSTOM
}

model SMSCampaign {
  id              String    @id @default(cuid())
  name            String
  description     String?
  from            String
  templateId      String?
  content         String?
  status          CampaignStatus @default(DRAFT)
  scheduledFor    DateTime?
  sentAt          DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdById     String

  // Relations
  createdBy       User      @relation("SMSCampaignCreator", fields: [createdById], references: [id])
  template        SMSTemplate? @relation(fields: [templateId], references: [id])
  lists           List[]    @relation("SMSCampaignLists")
  segments        Segment[] @relation("SMSCampaignSegments")
  activities      SMSActivity[]
}

model SMSActivity {
  id              String    @id @default(cuid())
  campaignId      String
  contactId       String
  type            ActivityType
  timestamp       DateTime  @default(now())
  metadata        String?   // JSON string

  // Relations
  campaign        SMSCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  contact         Contact    @relation(fields: [contactId], references: [id], onDelete: Cascade)
}

// WhatsApp marketing models
model WhatsAppTemplate {
  id              String    @id @default(cuid())
  name            String
  content         String
  variables       String    // JSON string for array
  category        String?
  status          WATemplateStatus @default(PENDING)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdById     String

  // Relations
  createdBy       User      @relation("WATemplateCreator", fields: [createdById], references: [id])
  campaigns       WhatsAppCampaign[]
}

model WhatsAppCampaign {
  id              String    @id @default(cuid())
  name            String
  description     String?
  from            String
  templateId      String?
  content         String?
  status          CampaignStatus @default(DRAFT)
  scheduledFor    DateTime?
  sentAt          DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdById     String

  // Relations
  createdBy       User      @relation("WACampaignCreator", fields: [createdById], references: [id])
  template        WhatsAppTemplate? @relation(fields: [templateId], references: [id])
  lists           List[]    @relation("WACampaignLists")
  segments        Segment[] @relation("WACampaignSegments")
  activities      WhatsAppActivity[]
}

model WhatsAppActivity {
  id              String    @id @default(cuid())
  campaignId      String
  contactId       String
  type            ActivityType
  timestamp       DateTime  @default(now())
  metadata        String?   // JSON string

  // Relations
  campaign        WhatsAppCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  contact         Contact    @relation(fields: [contactId], references: [id], onDelete: Cascade)
}

// Workflow automation models
model Workflow {
  id              String    @id @default(cuid())
  name            String
  description     String?
  status          WorkflowStatus @default(INACTIVE)
  definition      String    // JSON string
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdById     String

  // Relations
  createdBy       User      @relation("WorkflowCreator", fields: [createdById], references: [id])
  nodes           WorkflowNode[]
  triggers        WorkflowTrigger[]
}

model WorkflowNode {
  id              String    @id @default(cuid())
  workflowId      String
  type            WorkflowNodeType
  name            String?
  config          String    // JSON string
  positionX       Float?
  positionY       Float?

  // Relations
  workflow        Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  outgoing        Connection[] @relation("SourceNode")
  incoming        Connection[] @relation("TargetNode")
}

model Connection {
  id              String    @id @default(cuid())
  sourceId        String
  targetId        String
  condition       String?   // JSON string

  // Relations
  source          WorkflowNode @relation("SourceNode", fields: [sourceId], references: [id], onDelete: Cascade)
  target          WorkflowNode @relation("TargetNode", fields: [targetId], references: [id], onDelete: Cascade)

  @@unique([sourceId, targetId])
}

model WorkflowTrigger {
  id              String    @id @default(cuid())
  workflowId      String
  type            TriggerType
  config          String    // JSON string

  // Relations
  workflow        Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)
}

// Analytics models
model Analytics {
  id              String    @id @default(cuid())
  entityType      EntityType
  entityId        String
  period          AnalyticsPeriod
  metrics         String    // JSON string
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@unique([entityType, entityId, period])
}

// Enums
enum ContactStatus {
  ACTIVE
  UNSUBSCRIBED
  BOUNCED
  SPAM
}

enum ListType {
  STATIC
  DYNAMIC
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  PAUSED
  CANCELLED
}

enum ActivityType {
  SENT
  DELIVERED
  OPENED
  CLICKED
  BOUNCED
  UNSUBSCRIBED
  REPLIED
  FAILED
}

enum WATemplateStatus {
  PENDING
  APPROVED
  REJECTED
}

enum WorkflowStatus {
  ACTIVE
  INACTIVE
  PAUSED
  ARCHIVED
}

enum WorkflowNodeType {
  TRIGGER
  CONDITION
  ACTION
  DELAY
  EMAIL
  SMS
  WHATSAPP
  NOTIFICATION
  WEBHOOK
}

enum TriggerType {
  CONTACT_CREATED
  CONTACT_UPDATED
  EMAIL_OPENED
  EMAIL_CLICKED
  FORM_SUBMITTED
  WEBHOOK
  SCHEDULED
}

enum EntityType {
  EMAIL_CAMPAIGN
  SMS_CAMPAIGN
  WHATSAPP_CAMPAIGN
  WORKFLOW
  LIST
  SEGMENT
}

enum AnalyticsPeriod {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum IntegrationStatus {
  PENDING
  ACTIVE
  ERROR
  INACTIVE
}

enum SyncStatus {
  RUNNING
  COMPLETED
  FAILED
}

// AI Features Models

// Engagement time tracking for send time optimization
model EngagementTime {
  id              String    @id @default(cuid())
  contactId       String
  entityType      EntityType
  entityId        String
  engagementType  ActivityType
  dayOfWeek       Int       // 0-6 (Sunday-Saturday)
  hourOfDay       Int       // 0-23
  timestamp       DateTime  @default(now())

  @@index([contactId, entityType, engagementType])
  @@index([dayOfWeek, hourOfDay])
}

// Smart segment suggestions
model SmartSegment {
  id              String    @id @default(cuid())
  name            String
  description     String
  rules           String    // JSON string with segment criteria
  score           Float     // Relevance score (0-1)
  status          SmartSegmentStatus @default(PENDING)
  createdAt       DateTime  @default(now())
  lastUpdated     DateTime  @updatedAt
}

// Content templates for AI-assisted content generation
model ContentTemplate {
  id              String    @id @default(cuid())
  name            String
  description     String?
  industry        String?
  category        String
  type            ContentTemplateType
  template        String    // Template with placeholders
  keywords        String?   // JSON string of relevant keywords
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// Content template usage tracking
model ContentGeneration {
  id              String    @id @default(cuid())
  templateId      String?
  entityType      EntityType
  entityId        String
  prompt          String?   // User input for generation
  result          String    // Generated content
  createdById     String
  createdAt       DateTime  @default(now())
}

// Send time optimization model
model SendTimeOptimization {
  id              String    @id @default(cuid())
  contactId       String
  dayOfWeek       Int       // 0-6 (Sunday-Saturday)
  hourOfDay       Int       // 0-23
  engagementScore Float     // 0-1 score for this time period
  confidenceLevel Float     // 0-1 based on amount of data
  lastUpdated     DateTime  @updatedAt

  @@unique([contactId, dayOfWeek, hourOfDay])
}

// New enums for AI features
enum SmartSegmentStatus {
  PENDING
  ACTIVE
  ARCHIVED
}

enum ContentTemplateType {
  EMAIL_SUBJECT
  EMAIL_BODY
  SMS_MESSAGE
  WHATSAPP_MESSAGE
  PUSH_NOTIFICATION
}

// Enhanced Conversion Tracking & Attribution Models
model ConversionEvent {
  id              String    @id @default(cuid())
  name            String
  description     String?
  eventType       String    // Custom event type key
  category        ConversionCategory
  valueType       ConversionValueType @default(COUNT)
  isSystem        Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdById     String
  
  // Relations
  createdBy       User      @relation("ConversionEventCreator", fields: [createdById], references: [id])
  trackings       ConversionTracking[]
}

model ConversionTracking {
  id              String    @id @default(cuid())
  eventId         String
  entityType      EntityType
  entityId        String
  contactId       String?
  value           Float?    // Monetary or numeric value of conversion
  occurredAt      DateTime  @default(now())
  metadata        String?   // JSON string with additional data
  attributionModel AttributionModel @default(LAST_TOUCH)
  touchPoints     String?   // JSON array of touch points in the journey
  
  // Relations
  event           ConversionEvent @relation(fields: [eventId], references: [id])
  contact         Contact?   @relation(fields: [contactId], references: [id], onDelete: SetNull)
  
  @@index([entityType, entityId])
  @@index([contactId])
  @@index([eventId])
}

model ConversionFunnel {
  id              String    @id @default(cuid())
  name            String
  description     String?
  stages          String    // JSON array of conversion event IDs in order
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdById     String
  
  // Relations
  createdBy       User      @relation("FunnelCreator", fields: [createdById], references: [id])
  reports         ConversionFunnelReport[]
}

model ConversionFunnelReport {
  id              String    @id @default(cuid())
  funnelId        String
  startDate       DateTime
  endDate         DateTime
  data            String    // JSON with stage data and drop-off rates
  createdAt       DateTime  @default(now())
  
  // Relations
  funnel          ConversionFunnel @relation(fields: [funnelId], references: [id], onDelete: Cascade)
}

model AttributionSettings {
  id              String    @id @default(cuid())
  defaultModel    AttributionModel @default(LAST_TOUCH)
  customWeights   String?   // JSON string with custom weights for U-shaped/custom models
  lookbackWindow  Int       @default(30) // Days to look back for attribution
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

enum ConversionCategory {
  AWARENESS      // Top of funnel
  CONSIDERATION  // Middle of funnel
  CONVERSION     // Bottom of funnel
  RETENTION      // Post-purchase
  CUSTOM         // User-defined
}

enum ConversionValueType {
  COUNT          // Just count occurrences
  REVENUE        // Track monetary value
  SCORE          // Track a custom score/value
}

enum AttributionModel {
  FIRST_TOUCH    // All credit to first touch point
  LAST_TOUCH     // All credit to last touch point
  LINEAR         // Equal credit across all touch points
  TIME_DECAY     // More credit to recent touch points
  POSITION_BASED // More credit to first and last touch points (U-shaped)
  CUSTOM         // Custom-weighted model
}

// AI-Powered Content Intelligence Models
model ContentAnalysis {
  id              String    @id @default(cuid())
  type            String    // SENTIMENT, SUBJECT_LINE, CONTENT_SCORE
  contentType     String    // EMAIL_SUBJECT, EMAIL_BODY, SMS, WHATSAPP, etc.
  originalContent String    @db.Text
  result          String    @db.Text // JSON string with analysis results
  createdAt       DateTime  @default(now())
  userId          String?

  // Relations
  user            User?     @relation("ContentAnalysisCreator", fields: [userId], references: [id])
}

model ContentRecommendation {
  id              String    @id @default(cuid())
  type            String    // CLARITY, ENGAGEMENT, LENGTH, TONE, CALL_TO_ACTION, PERSONALIZATION
  entityType      String    // EMAIL_CAMPAIGN, SMS_CAMPAIGN, etc.
  entityId        String
  originalContent String    @db.Text
  suggestedContent String   @db.Text
  reason          String
  impactScore     Float     // 0 to 1
  isApplied       Boolean   @default(false)
  createdAt       DateTime  @default(now())
  appliedAt       DateTime?
  userId          String?

  // Relations
  user            User?     @relation("ContentRecommendationUser", fields: [userId], references: [id])
}

model SubjectLineTest {
  id              String    @id @default(cuid())
  campaignId      String
  originalSubject String
  variants        String    @db.Text  // JSON string with variant subject lines
  status          String    // DRAFT, RUNNING, COMPLETED
  winnerVariantId String?
  createdAt       DateTime  @default(now())
  startedAt       DateTime?
  endedAt         DateTime?
  createdById     String

  // Relations
  createdBy       User      @relation("SubjectLineTestCreator", fields: [createdById], references: [id])
  results         SubjectLineTestResult[]

  @@index([campaignId])
}

model SubjectLineTestResult {
  id              String    @id @default(cuid())
  testId          String
  variantId       String
  opens           Int       @default(0)
  clicks          Int       @default(0)
  sent            Int       @default(0)
  openRate        Float     @default(0)
  clickRate       Float     @default(0)
  
  // Relations
  test            SubjectLineTest @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@unique([testId, variantId])
}

model SentimentAnalysis {
  id              String    @id @default(cuid())
  entityType      String    // EMAIL_CAMPAIGN, SMS_CAMPAIGN, etc.
  entityId        String
  content         String    @db.Text
  score           Float     // -1 to 1
  positive        String    // JSON string with positive aspects
  negative        String    // JSON string with negative aspects
  emotions        String    // JSON string with emotional scores
  createdAt       DateTime  @default(now())

  @@index([entityType, entityId])
}

model ContentPersonalization {
  id              String    @id @default(cuid())
  campaignId      String
  contactId       String
  originalContent String    @db.Text
  personalizedContent String @db.Text
  replacements    String    @db.Text  // JSON string with replacement details
  createdAt       DateTime  @default(now())
  
  @@index([campaignId])
  @@index([contactId])
}

// Predictive Analytics Models
model PredictionModel {
  id              String    @id @default(cuid())
  name            String
  type            PredictionModelType
  description     String?
  algorithm       String    // Type of algorithm used (RandomForest, NeuralNetwork, etc.)
  features        String    // JSON array of features used in the model
  metrics         String?   // JSON object with model performance metrics
  version         String    // Model version identifier
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  predictions     Prediction[]
}

model Prediction {
  id              String    @id @default(cuid())
  modelId         String
  entityType      String    // "contact", "campaign", etc.
  entityId        String
  predictionType  PredictionModelType
  value           Float     // The predicted value (probability, score, etc.)
  confidence      Float     // Confidence level of prediction (0-1)
  features        String?   // JSON object with features used for this specific prediction
  explanation     String?   // Explanation of the prediction factors
  createdAt       DateTime  @default(now())
  
  // Relations
  model           PredictionModel @relation(fields: [modelId], references: [id])
  
  @@index([entityType, entityId])
  @@index([predictionType])
}

model ChurnPrediction {
  id              String    @id @default(cuid())
  contactId       String
  score           Float     // Probability of churning (0-1)
  riskLevel       ChurnRiskLevel
  topFactors      String    // JSON array of factors contributing to churn risk
  nextActionDate  DateTime?  // When to take action
  createdAt       DateTime  @default(now())
  
  @@index([contactId])
  @@index([riskLevel])
}

model LifetimeValuePrediction {
  id              String    @id @default(cuid())
  contactId       String
  predictedValue  Float     // Monetary predicted value
  confidenceLevel Float     // Confidence of prediction (0-1)
  timeframe       Int       // Months in the future for prediction
  segments        String?   // JSON array of value segments
  createdAt       DateTime  @default(now())
  
  @@index([contactId])
}

model CampaignPerformancePrediction {
  id              String    @id @default(cuid())
  campaignId      String
  openRate        Float?    // Predicted open rate
  clickRate       Float?    // Predicted click rate
  conversionRate  Float?    // Predicted conversion rate
  revenue         Float?    // Predicted revenue
  factors         String    // JSON object with influencing factors
  createdAt       DateTime  @default(now())
  
  @@index([campaignId])
}

model OptimalSendTime {
  id              String    @id @default(cuid())
  contactId       String
  channelType     String    // "email", "sms", "push", etc.
  dayOfWeek       Int       // 0-6 (Sunday-Saturday)
  hourOfDay       Int       // 0-23
  probability     Float     // Engagement probability (0-1)
  confidenceLevel Float     // Confidence level (0-1)
  lastUpdated     DateTime  @updatedAt
  
  @@unique([contactId, channelType, dayOfWeek, hourOfDay])
  @@index([contactId, channelType])
}

enum PredictionModelType {
  CHURN
  LTV
  CAMPAIGN_PERFORMANCE
  SEND_TIME
  OPEN_RATE
  CLICK_RATE
  CONVERSION_RATE
}

enum ChurnRiskLevel {
  LOW
  MEDIUM
  HIGH
  VERY_HIGH
}

// Customer Journey Mapping Models
model Journey {
  id              String    @id @default(cuid())
  name            String
  description     String?
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdById     String
  
  // Relations
  createdBy       User      @relation("JourneyCreator", fields: [createdById], references: [id])
  stages          JourneyStage[]
  metrics         JourneyMetric[]
  contactJourneys ContactJourney[]
}

model JourneyStage {
  id              String    @id @default(cuid())
  journeyId       String
  name            String
  description     String?
  order           Int       // Position in journey sequence
  expectedDuration Int?     // Expected time to pass through in hours
  conversionGoal  Float?    // Target conversion % to next stage
  isEntryPoint    Boolean   @default(false)
  isExitPoint     Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  journey         Journey   @relation(fields: [journeyId], references: [id], onDelete: Cascade)
  transitions     JourneyTransition[] @relation("FromStage")
  incomingTransitions JourneyTransition[] @relation("ToStage")
  contactStages   ContactJourneyStage[]
  metrics         JourneyStageMetric[]
}

model JourneyTransition {
  id              String    @id @default(cuid())
  fromStageId     String
  toStageId       String
  name            String?
  description     String?
  conditions      String?   // JSON string with conditions for transition
  triggerType     TransitionTriggerType
  triggerDetails  String?   // JSON string with trigger specifics
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  fromStage       JourneyStage @relation("FromStage", fields: [fromStageId], references: [id], onDelete: Cascade)
  toStage         JourneyStage @relation("ToStage", fields: [toStageId], references: [id], onDelete: Cascade)
  contactTransitions ContactJourneyTransition[]
  
  @@unique([fromStageId, toStageId])
}

model ContactJourney {
  id              String    @id @default(cuid())
  journeyId       String
  contactId       String
  status          JourneyStatus @default(ACTIVE)
  startedAt       DateTime  @default(now())
  completedAt     DateTime?
  currentStageId  String?
  
  // Relations
  journey         Journey   @relation(fields: [journeyId], references: [id])
  contact         Contact   @relation(fields: [contactId], references: [id], onDelete: Cascade)
  stages          ContactJourneyStage[]
  transitions     ContactJourneyTransition[]
  
  @@index([journeyId, contactId])
  @@index([status])
}

model ContactJourneyStage {
  id              String    @id @default(cuid())
  contactJourneyId String
  stageId         String
  enteredAt       DateTime  @default(now())
  exitedAt        DateTime?
  durationSeconds Int?      // Time spent in stage
  
  // Relations
  contactJourney  ContactJourney @relation(fields: [contactJourneyId], references: [id], onDelete: Cascade)
  stage           JourneyStage @relation(fields: [stageId], references: [id])
  
  @@index([contactJourneyId])
  @@index([stageId, enteredAt])
}

model ContactJourneyTransition {
  id              String    @id @default(cuid())
  contactJourneyId String
  transitionId    String
  timestamp       DateTime  @default(now())
  fromStageId     String
  toStageId       String
  triggerSource   String?   // Event that triggered the transition
  
  // Relations
  contactJourney  ContactJourney @relation(fields: [contactJourneyId], references: [id], onDelete: Cascade)
  transition      JourneyTransition @relation(fields: [transitionId], references: [id])
  
  @@index([contactJourneyId])
  @@index([transitionId])
}

model JourneyMetric {
  id              String    @id @default(cuid())
  journeyId       String
  name            String
  description     String?
  metricType      JourneyMetricType
  targetValue     Float?
  aggregationType MetricAggregationType @default(SUM)
  formula         String?   // Custom formula to calculate the metric
  isSuccess       Boolean   @default(false) // Is this a success metric for the journey
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  journey         Journey   @relation(fields: [journeyId], references: [id], onDelete: Cascade)
  stageMetrics    JourneyStageMetric[]
}

model JourneyStageMetric {
  id              String    @id @default(cuid())
  stageId         String
  metricId        String
  targetValue     Float?    // Stage-specific target that overrides journey level
  actualValue     Float?    // Current value
  lastUpdated     DateTime  @updatedAt
  
  // Relations
  stage           JourneyStage @relation(fields: [stageId], references: [id], onDelete: Cascade)
  metric          JourneyMetric @relation(fields: [metricId], references: [id], onDelete: Cascade)
  
  @@unique([stageId, metricId])
}

model JourneyAnalytics {
  id              String    @id @default(cuid())
  journeyId       String
  date            DateTime
  totalContacts   Int
  activeContacts  Int
  completedContacts Int
  droppedContacts Int
  conversionRate  Float
  averageDuration Int      // Average journey duration in hours
  stageData       String   // JSON with stage-level analytics
  
  @@unique([journeyId, date])
}

enum JourneyStatus {
  ACTIVE
  COMPLETED
  DROPPED
  PAUSED
}

enum TransitionTriggerType {
  AUTOMATIC      // Time-based or system triggered
  EVENT          // Triggered by an event (email open, click, etc.)
  CONVERSION     // Triggered by a conversion event
  CONDITION      // Triggered when conditions are met
  MANUAL         // Manually triggered by an operator
}

enum JourneyMetricType {
  CONVERSION_RATE
  CONTACTS_COUNT
  DURATION
  REVENUE
  CUSTOM
}

enum MetricAggregationType {
  SUM
  AVERAGE
  COUNT
  MIN
  MAX
}

// Task management models
model Task {
  id              String    @id @default(cuid())
  title           String
  description     String?
  status          String    @default("TODO")
  priority        String    @default("MEDIUM")
  dueDate         DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  creatorId       String
  assigneeId      String?
  contactId       String?
  segmentId       String?
  campaignId      String?
  regionId        String?

  // Relations
  creator         User      @relation(name: "TaskCreator", fields: [creatorId], references: [id])
  assignee        User?     @relation(name: "TaskAssignee", fields: [assigneeId], references: [id])
  campaign        EmailCampaign? @relation(fields: [campaignId], references: [id])
  dependencies    TaskDependency[] @relation("DependentTask")
  dependsOn       TaskDependency[] @relation("PrerequisiteTask")
  comments        TaskComment[]
}

model TaskDependency {
  id               String    @id @default(cuid())
  taskId           String
  dependsOnTaskId  String
  createdAt        DateTime  @default(now())

  // Relations
  task             Task      @relation("DependentTask", fields: [taskId], references: [id], onDelete: Cascade)
  dependsOnTask    Task      @relation("PrerequisiteTask", fields: [dependsOnTaskId], references: [id], onDelete: Cascade)

  @@unique([taskId, dependsOnTaskId])
}

model TaskComment {
  id              String    @id @default(cuid())
  taskId          String
  content         String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdById     String

  // Relations
  task            Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  createdBy       User      @relation(fields: [createdById], references: [id])
}

// AI Intelligence Models
model AI_ContentAnalysis {
  id              String    @id @default(cuid())
  title           String
  content         String
  supremeScore    Int       @default(0)
  sentiment       Float?
  readability     Int?
  engagement      Int?
  analysis        String?   // JSON
  tags            String[]  @default([])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdById     String

  // Relations
  createdBy       User      @relation("UserToContentAnalysis", fields: [createdById], references: [id], onDelete: Cascade)
}

model AI_CustomerSegment {
  id              String    @id @default(cuid())
  name            String
  description     String?
  criteria        String?   // JSON
  customerCount   Int       @default(0)
  churnRisk       Float     @default(0)
  lifetimeValue   Float     @default(0)
  tags            String[]  @default([])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdById     String

  // Relations
  createdBy       User      @relation("UserToCustomerSegment", fields: [createdById], references: [id], onDelete: Cascade)
}

model AI_ChatHistory {
  id              String    @id @default(cuid())
  userId          String
  sessionId       String?
  question        String
  answer          String
  context         String?   // JSON
  confidence      Float     @default(0)
  createdAt       DateTime  @default(now())

  // Relations
  user            User      @relation("UserToChatHistory", fields: [userId], references: [id], onDelete: Cascade)
}

model AI_Tool {
  id              String    @id @default(cuid())
  name            String
  description     String?
  category        String
  config          String?   // JSON
  usage           String?   // JSON
  isPublic        Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdById     String

  // Relations
  createdBy       User      @relation("UserToAITool", fields: [createdById], references: [id], onDelete: Cascade)
}

// LeadPulse models
model LeadPulseVisitor {
  id              String    @id @default(cuid())
  fingerprint     String    @unique
  ipAddress       String?
  userAgent       String?
  referrer        String?
  firstVisit      DateTime  @default(now())
  lastVisit       DateTime  @updatedAt
  totalVisits     Int       @default(1)
  isActive        Boolean   @default(true)
  engagementScore Int       @default(0)
  engagementLevel String?
  
  // Location data
  city            String?
  country         String?
  region          String?
  latitude        Float?
  longitude       Float?
  
  // Device data
  device          String?
  browser         String?
  os              String?
  
  // Metadata
  metadata        Json?
  score           Int       @default(0)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  touchpoints     LeadPulseTouchpoint[]
  
  @@index([fingerprint])
  @@index([lastVisit])
  @@index([isActive])
}

model LeadPulseTouchpoint {
  id              String    @id @default(cuid())
  visitorId       String
  timestamp       DateTime  @default(now())
  type            LeadPulseTouchpointType
  url             String?
  duration        Int?      // Duration in milliseconds
  value           Int       @default(1) // Engagement value
  score           Int       @default(1) // Score value
  metadata        Json?     // Additional data like form fields, click targets, etc.
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  visitor         LeadPulseVisitor @relation(fields: [visitorId], references: [id], onDelete: Cascade)
  
  @@index([visitorId, timestamp])
  @@index([type])
}

model LeadPulseSegment {
  id              String    @id @default(cuid())
  name            String
  description     String?
  criteria        Json      // Segment rules
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model LeadPulseInsight {
  id              String    @id @default(cuid())
  type            LeadPulseInsightType
  title           String
  description     String
  importance      LeadPulseImportance
  metric          Json?     // Optional metric data
  recommendation  String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

enum LeadPulseTouchpointType {
  PAGEVIEW
  CLICK
  FORM_VIEW
  FORM_START
  FORM_SUBMIT
  CONVERSION
}

enum LeadPulseInsightType {
  BEHAVIOR
  PREDICTION
  OPPORTUNITY
  TREND
}

enum LeadPulseImportance {
  LOW
  MEDIUM
  HIGH
}
