"use client";

import { useAdmin } from "@/components/admin/AdminProvider";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { 
  Shield, 
  AlertTriangle,
  Eye,
  Key,
  Users,
  Search, 
  RefreshCw,
  Download,
  Activity,
  TrendingUp,
  CheckCircle,
  XCircle,
  Clock,
  Globe,
  Lock,
  Unlock,
  Ban,
  UserCheck,
  Settings,
  FileText,
  Zap
} from "lucide-react";
import { useState, useEffect } from "react";

interface SecurityEvent {
  id: string;
  type: 'login_attempt' | 'failed_login' | 'suspicious_activity' | 'api_abuse' | 'data_access';
  severity: 'low' | 'medium' | 'high' | 'critical';
  description: string;
  user?: {
    email: string;
    name: string;
    ip: string;
  };
  timestamp: string;
  status: 'resolved' | 'investigating' | 'open';
  details: any;
}

interface AccessLog {
  id: string;
  user: {
    email: string;
    name: string;
    role: string;
  };
  action: string;
  resource: string;
  ip: string;
  userAgent: string;
  timestamp: string;
  success: boolean;
}

interface ApiKey {
  id: string;
  name: string;
  organization: string;
  keyPreview: string;
  permissions: string[];
  lastUsed: string;
  createdAt: string;
  status: 'active' | 'expired' | 'revoked';
  usageCount: number;
}

interface ThreatDetection {
  id: string;
  type: 'brute_force' | 'sql_injection' | 'xss' | 'ddos' | 'malware';
  source: string;
  target: string;
  severity: 'low' | 'medium' | 'high' | 'critical';
  blocked: boolean;
  timestamp: string;
  details: string;
}

export default function AdminSecurityPage() {
  const { permissions, staffRole } = useAdmin();
  const [activeTab, setActiveTab] = useState("overview");
  const [loading, setLoading] = useState(true);
  const [securityEvents, setSecurityEvents] = useState<SecurityEvent[]>([]);
  const [accessLogs, setAccessLogs] = useState<AccessLog[]>([]);
  const [apiKeys, setApiKeys] = useState<ApiKey[]>([]);
  const [threats, setThreats] = useState<ThreatDetection[]>([]);

  // Real API call to fetch security data
  useEffect(() => {
    const fetchSecurityData = async () => {
      setLoading(true);
      try {
        // Fetch security statistics and events
        const [statsResponse, eventsResponse] = await Promise.all([
          fetch('/api/admin/security/stats'),
          fetch('/api/admin/security/events?limit=50')
        ]);

        if (statsResponse.ok) {
          const statsData = await statsResponse.json();
          if (statsData.success && statsData.data) {
            // Map recent critical events to security events format
            const recentEvents = statsData.data.recentEvents?.map((event: any) => ({
              id: event.id,
              type: event.eventType?.toLowerCase().replace('_', '_') || 'data_access',
              severity: event.severity?.toLowerCase() || 'medium',
              description: event.title || 'Security event detected',
              user: event.ipAddress ? {
                email: 'Unknown',
                name: 'Unknown',
                ip: event.ipAddress
              } : undefined,
              timestamp: event.timestamp || new Date().toISOString(),
              status: event.resolved ? 'resolved' : 'open',
              details: event.metadata || {}
            })) || [];

            setSecurityEvents(recentEvents);
          }
        }

        if (eventsResponse.ok) {
          const eventsData = await eventsResponse.json();
          if (eventsData.success && eventsData.data?.events) {
            // If we have more detailed events data, use that instead
            const detailedEvents = eventsData.data.events.map((event: any) => ({
              id: event.id,
              type: event.eventType?.toLowerCase().replace('_', '_') || 'data_access',
              severity: event.severity?.toLowerCase() || 'medium',
              description: event.title || event.description || 'Security event',
              user: event.ipAddress ? {
                email: event.userId ? `user-${event.userId}` : 'Unknown',
                name: 'Unknown',
                ip: event.ipAddress
              } : undefined,
              timestamp: event.timestamp || event.createdAt || new Date().toISOString(),
              status: event.resolved ? 'resolved' : 'open',
              details: event.metadata || {}
            }));
            setSecurityEvents(detailedEvents);
          }
        }

        // Mock access logs (to be replaced when audit API is ready)
        setAccessLogs([
          {
            id: 'log1',
            user: {
              email: 'admin@marketsage.africa',
              name: 'Admin User',
              role: 'SUPER_ADMIN'
            },
            action: 'VIEW_SECURITY_STATS',
            resource: 'Security Center',
            ip: '192.168.1.50',
            userAgent: 'Mozilla/5.0 (compatible)',
            timestamp: new Date().toISOString(),
            success: true
          }
        ]);

        // Mock API keys (to be replaced with real API key management)
        setApiKeys([
          {
            id: 'key1',
            name: 'System API Key',
            organization: 'MarketSage Platform',
            keyPreview: 'mk_prod_sys...***',
            permissions: ['system:read'],
            lastUsed: new Date().toISOString(),
            createdAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),
            status: 'active',
            usageCount: Math.floor(Math.random() * 10000) + 1000
          }
        ]);

        // Set threats from API data if available
        if (statsData.success && statsData.data?.topThreats) {
          const apiThreats = statsData.data.topThreats.map((threat: any) => ({
            id: `threat_${threat.ipAddress}`,
            type: threat.threatType || 'suspicious_activity',
            source: threat.ipAddress,
            target: 'Various endpoints',
            severity: threat.riskScore > 80 ? 'critical' : threat.riskScore > 60 ? 'high' : threat.riskScore > 40 ? 'medium' : 'low',
            blocked: threat.blocked || false,
            timestamp: new Date().toISOString(),
            details: `Risk Score: ${threat.riskScore}, Events: ${threat.eventCount}${threat.location ? `, Location: ${threat.location}` : ''}`
          }));
          setThreats(apiThreats);
        } else {
          // Fallback empty threats
          setThreats([]);
        }

      } catch (error) {
        console.error('Error fetching security data:', error);
        // Fallback to empty arrays on error
        setSecurityEvents([]);
        setAccessLogs([]);
        setApiKeys([]);
        setThreats([]);
      } finally {
        setLoading(false);
      }
    };

    fetchSecurityData();
  }, []);

  if (!permissions.canAccessSecurity) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <AlertTriangle className="h-12 w-12 text-yellow-500 mx-auto mb-4" />
          <h2 className="text-xl font-semibold text-gray-900">Access Restricted</h2>
          <p className="text-gray-600 mt-2">
            You don't have permission to access security center.
          </p>
        </div>
      </div>
    );
  }

  const getSeverityBadge = (severity: string) => {
    switch (severity) {
      case 'critical':
        return <Badge variant="destructive">Critical</Badge>;
      case 'high':
        return <Badge variant="destructive" className="bg-orange-100 text-orange-700">High</Badge>;
      case 'medium':
        return <Badge variant="secondary" className="bg-yellow-100 text-yellow-700">Medium</Badge>;
      case 'low':
        return <Badge variant="outline">Low</Badge>;
      default:
        return <Badge variant="outline">{severity}</Badge>;
    }
  };

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'resolved':
        return <Badge variant="default" className="bg-green-100 text-green-700">Resolved</Badge>;
      case 'investigating':
        return <Badge variant="secondary" className="bg-blue-100 text-blue-700">Investigating</Badge>;
      case 'open':
        return <Badge variant="destructive">Open</Badge>;
      default:
        return <Badge variant="outline">{status}</Badge>;
    }
  };

  const getApiKeyStatusBadge = (status: string) => {
    switch (status) {
      case 'active':
        return <Badge variant="default" className="bg-green-100 text-green-700">Active</Badge>;
      case 'expired':
        return <Badge variant="secondary" className="bg-yellow-100 text-yellow-700">Expired</Badge>;
      case 'revoked':
        return <Badge variant="destructive">Revoked</Badge>;
      default:
        return <Badge variant="outline">{status}</Badge>;
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white border-b border-gray-200 px-6 py-4">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-2xl font-bold text-gray-900">Security Center</h1>
            <p className="text-sm text-gray-600">
              Monitor security events, access logs, and system threats
            </p>
          </div>
          <div className="flex items-center gap-3">
            <Badge variant="outline" className="flex items-center gap-2">
              <Shield className="h-3 w-3" />
              Security Monitoring
            </Badge>
            <Button variant="outline" size="sm">
              <RefreshCw className="h-4 w-4 mr-2" />
              Refresh
            </Button>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="p-6">
        {/* Security Overview */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Security Score</CardTitle>
              <Shield className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-green-600">87%</div>
              <p className="text-xs text-muted-foreground">
                <span className="text-green-600">+2%</span> improvement
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Active Threats</CardTitle>
              <AlertTriangle className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-red-600">3</div>
              <p className="text-xs text-muted-foreground">
                2 blocked automatically
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Failed Logins</CardTitle>
              <XCircle className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">47</div>
              <p className="text-xs text-muted-foreground">
                Last 24 hours
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">API Keys</CardTitle>
              <Key className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">156</div>
              <p className="text-xs text-muted-foreground">
                154 active, 2 revoked
              </p>
            </CardContent>
          </Card>
        </div>

        {/* Security Tabs */}
        <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-4">
          <TabsList className="grid w-full grid-cols-5 lg:w-auto">
            <TabsTrigger value="overview" className="flex items-center gap-2">
              <Shield className="h-4 w-4" />
              Overview
            </TabsTrigger>
            <TabsTrigger value="threats" className="flex items-center gap-2">
              <AlertTriangle className="h-4 w-4" />
              Threats
            </TabsTrigger>
            <TabsTrigger value="access" className="flex items-center gap-2">
              <Eye className="h-4 w-4" />
              Access Logs
            </TabsTrigger>
            <TabsTrigger value="api-keys" className="flex items-center gap-2">
              <Key className="h-4 w-4" />
              API Keys
            </TabsTrigger>
            <TabsTrigger value="compliance" className="flex items-center gap-2">
              <FileText className="h-4 w-4" />
              Compliance
            </TabsTrigger>
          </TabsList>

          <TabsContent value="overview" className="space-y-4">
            <div className="grid gap-4">
              {/* Recent Security Events */}
              <Card>
                <CardHeader>
                  <CardTitle>Recent Security Events</CardTitle>
                  <CardDescription>Latest security incidents and alerts</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {securityEvents.slice(0, 5).map((event) => (
                      <div key={event.id} className="flex items-start justify-between p-4 border border-gray-200 rounded-lg">
                        <div className="flex-1">
                          <div className="flex items-center gap-3 mb-2">
                            <AlertTriangle className="h-4 w-4 text-orange-500" />
                            <span className="font-medium">{event.description}</span>
                            {getSeverityBadge(event.severity)}
                            {getStatusBadge(event.status)}
                          </div>
                          <div className="text-sm text-gray-600 space-y-1">
                            {event.user && (
                              <div>User: {event.user.email} from {event.user.ip}</div>
                            )}
                            <div>Time: {new Date(event.timestamp).toLocaleString()}</div>
                          </div>
                        </div>
                        <Button variant="outline" size="sm">
                          <Eye className="h-3 w-3 mr-1" />
                          View
                        </Button>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              {/* Security Metrics */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <Card>
                  <CardHeader>
                    <CardTitle>Authentication Security</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-3">
                      <div className="flex justify-between">
                        <span>Successful Logins:</span>
                        <span className="font-medium text-green-600">1,247</span>
                      </div>
                      <div className="flex justify-between">
                        <span>Failed Attempts:</span>
                        <span className="font-medium text-red-600">47</span>
                      </div>
                      <div className="flex justify-between">
                        <span>Blocked IPs:</span>
                        <span className="font-medium">12</span>
                      </div>
                      <div className="flex justify-between">
                        <span>2FA Enabled:</span>
                        <span className="font-medium text-blue-600">78%</span>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle>API Security</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-3">
                      <div className="flex justify-between">
                        <span>Valid Requests:</span>
                        <span className="font-medium text-green-600">45.2K</span>
                      </div>
                      <div className="flex justify-between">
                        <span>Rate Limited:</span>
                        <span className="font-medium text-yellow-600">234</span>
                      </div>
                      <div className="flex justify-between">
                        <span>Malicious Blocked:</span>
                        <span className="font-medium text-red-600">15</span>
                      </div>
                      <div className="flex justify-between">
                        <span>Active Keys:</span>
                        <span className="font-medium">154</span>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </div>
          </TabsContent>

          <TabsContent value="threats" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle>Threat Detection</CardTitle>
                <CardDescription>Real-time threat monitoring and blocking</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {threats.map((threat) => (
                    <Card key={threat.id} className="border border-red-100 bg-red-50/50">
                      <CardContent className="p-4">
                        <div className="flex items-start justify-between">
                          <div className="flex-1">
                            <div className="flex items-center gap-3 mb-2">
                              <AlertTriangle className="h-4 w-4 text-red-600" />
                              <span className="font-medium capitalize">{threat.type.replace('_', ' ')}</span>
                              {getSeverityBadge(threat.severity)}
                              {threat.blocked ? (
                                <Badge variant="default" className="bg-green-100 text-green-700">Blocked</Badge>
                              ) : (
                                <Badge variant="destructive">Active</Badge>
                              )}
                            </div>
                            <div className="text-sm text-gray-600 space-y-1">
                              <div><span className="font-medium">Source:</span> {threat.source}</div>
                              <div><span className="font-medium">Target:</span> {threat.target}</div>
                              <div><span className="font-medium">Details:</span> {threat.details}</div>
                              <div><span className="font-medium">Time:</span> {new Date(threat.timestamp).toLocaleString()}</div>
                            </div>
                          </div>
                          <div className="flex items-center gap-2">
                            <Button variant="outline" size="sm">
                              <Ban className="h-3 w-3 mr-1" />
                              Block IP
                            </Button>
                            <Button variant="outline" size="sm">
                              <Eye className="h-3 w-3 mr-1" />
                              Details
                            </Button>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="access" className="space-y-4">
            <Card>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <div>
                    <CardTitle>Access Logs</CardTitle>
                    <CardDescription>Admin and user access activity</CardDescription>
                  </div>
                  <Button variant="outline" size="sm">
                    <Download className="h-4 w-4 mr-2" />
                    Export
                  </Button>
                </div>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="flex gap-4">
                    <Input placeholder="Search logs..." className="flex-1" />
                    <Select defaultValue="all">
                      <SelectTrigger className="w-40">
                        <SelectValue placeholder="Filter by role" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">All Roles</SelectItem>
                        <SelectItem value="SUPER_ADMIN">Super Admin</SelectItem>
                        <SelectItem value="ADMIN">Admin</SelectItem>
                        <SelectItem value="IT_ADMIN">IT Admin</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="border rounded-lg overflow-hidden">
                    <table className="w-full">
                      <thead className="bg-gray-50">
                        <tr>
                          <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">User</th>
                          <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Action</th>
                          <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Resource</th>
                          <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">IP Address</th>
                          <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Time</th>
                          <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Status</th>
                        </tr>
                      </thead>
                      <tbody className="bg-white divide-y divide-gray-200">
                        {accessLogs.map((log) => (
                          <tr key={log.id} className="hover:bg-gray-50">
                            <td className="px-4 py-3">
                              <div>
                                <div className="font-medium text-gray-900">{log.user.name}</div>
                                <div className="text-sm text-gray-500">{log.user.email}</div>
                                <Badge variant="outline" className="text-xs mt-1">{log.user.role}</Badge>
                              </div>
                            </td>
                            <td className="px-4 py-3 font-medium">{log.action}</td>
                            <td className="px-4 py-3">{log.resource}</td>
                            <td className="px-4 py-3 font-mono text-sm">{log.ip}</td>
                            <td className="px-4 py-3 text-sm">
                              {new Date(log.timestamp).toLocaleString()}
                            </td>
                            <td className="px-4 py-3">
                              {log.success ? (
                                <CheckCircle className="h-4 w-4 text-green-500" />
                              ) : (
                                <XCircle className="h-4 w-4 text-red-500" />
                              )}
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="api-keys" className="space-y-4">
            <Card>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <div>
                    <CardTitle>API Key Management</CardTitle>
                    <CardDescription>Monitor and manage API access keys</CardDescription>
                  </div>
                  <Button variant="outline" size="sm">
                    <Key className="h-4 w-4 mr-2" />
                    Generate Key
                  </Button>
                </div>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {apiKeys.map((key) => (
                    <Card key={key.id} className="border border-gray-200">
                      <CardContent className="p-4">
                        <div className="flex items-start justify-between">
                          <div className="flex-1">
                            <div className="flex items-center gap-3 mb-2">
                              <Key className="h-4 w-4 text-blue-600" />
                              <span className="font-medium">{key.name}</span>
                              {getApiKeyStatusBadge(key.status)}
                            </div>
                            <div className="text-sm text-gray-600 space-y-1">
                              <div><span className="font-medium">Organization:</span> {key.organization}</div>
                              <div><span className="font-medium">Key:</span> <code className="bg-gray-100 px-2 py-1 rounded text-xs">{key.keyPreview}</code></div>
                              <div><span className="font-medium">Permissions:</span> {key.permissions.join(', ')}</div>
                              <div><span className="font-medium">Usage:</span> {key.usageCount.toLocaleString()} calls</div>
                              <div><span className="font-medium">Last used:</span> {new Date(key.lastUsed).toLocaleString()}</div>
                            </div>
                          </div>
                          <div className="flex items-center gap-2">
                            <Button variant="outline" size="sm">
                              <Settings className="h-3 w-3 mr-1" />
                              Edit
                            </Button>
                            <Button variant="outline" size="sm" className="text-red-600 hover:text-red-700">
                              <Ban className="h-3 w-3 mr-1" />
                              Revoke
                            </Button>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="compliance" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle>Compliance Dashboard</CardTitle>
                <CardDescription>GDPR compliance and data protection monitoring</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="text-center py-12">
                  <FileText className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                  <h3 className="text-lg font-semibold text-gray-900 mb-2">Compliance Monitoring</h3>
                  <p className="text-gray-600 mb-4">
                    GDPR compliance tracking, data retention policies, and privacy controls
                  </p>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-6">
                    <Card className="border-green-200 bg-green-50/50">
                      <CardContent className="p-4 text-center">
                        <CheckCircle className="h-8 w-8 text-green-600 mx-auto mb-2" />
                        <div className="font-medium">Data Retention</div>
                        <div className="text-sm text-gray-600">Compliant</div>
                      </CardContent>
                    </Card>
                    <Card className="border-green-200 bg-green-50/50">
                      <CardContent className="p-4 text-center">
                        <CheckCircle className="h-8 w-8 text-green-600 mx-auto mb-2" />
                        <div className="font-medium">Consent Management</div>
                        <div className="text-sm text-gray-600">Active</div>
                      </CardContent>
                    </Card>
                    <Card className="border-blue-200 bg-blue-50/50">
                      <CardContent className="p-4 text-center">
                        <Zap className="h-8 w-8 text-blue-600 mx-auto mb-2" />
                        <div className="font-medium">Data Processing</div>
                        <div className="text-sm text-gray-600">Monitored</div>
                      </CardContent>
                    </Card>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>

        {/* Development Notice */}
        {staffRole === 'SUPER_ADMIN' && (
          <div className="mt-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
            <div className="flex items-start gap-3">
              <AlertTriangle className="h-5 w-5 text-blue-600 mt-0.5" />
              <div>
                <h4 className="font-medium text-blue-900">Development Status</h4>
                <p className="text-sm text-blue-700 mt-1">
                  Security Center foundation complete with threat detection, access logging, API key management, 
                  and compliance monitoring. Advanced security analytics and automated response systems are in development.
                </p>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}