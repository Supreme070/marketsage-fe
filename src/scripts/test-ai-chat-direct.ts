#!/usr/bin/env tsx
/**
 * Direct AI Chat Test with MCP
 * 
 * This script tests the AI chat functionality directly
 * without going through the HTTP API layer.
 */

import { getSupremeAIV3WithMCP } from '../lib/ai/supreme-ai-v3-mcp-integration';
import type { MCPAuthContext } from '../mcp/types/mcp-types';
import type { SupremeAIv3Task } from '../lib/ai/supreme-ai-v3-engine';

class DirectAIChatTest {
  private supremeAI = getSupremeAIV3WithMCP();
  private testStartTime = Date.now();

  async runTests(): Promise<void> {
    console.log('ü§ñ Testing AI Chat Functionality Directly with MCP...\n');

    try {
      // Initialize MCP integration
      await this.initializeMCPIntegration();
      
      // Test different chat scenarios
      await this.testBasicChat();
      await this.testCustomerAnalysisChat();
      await this.testCampaignInsightChat();
      await this.testLeadPulseChat();
      await this.testBusinessStrategyChat();

      console.log('\nüéâ All direct AI Chat tests completed successfully!');
      
    } catch (error) {
      console.error('\n‚ùå Direct AI Chat tests failed:', error);
      throw error;
    } finally {
      const duration = Date.now() - this.testStartTime;
      console.log(`\n‚è±Ô∏è  Total test duration: ${duration}ms`);
    }
  }

  private async initializeMCPIntegration(): Promise<void> {
    console.log('üîß Initializing MCP Integration...');

    const mockAuthContext: MCPAuthContext = {
      userId: 'test-user-123',
      organizationId: 'test-org-456',
      role: 'USER',
      permissions: ['read:own:contacts', 'read:own:campaigns', 'read:own:analytics'],
      sessionId: 'test-session-789'
    };

    await this.supremeAI.initializeMCPIntegration(mockAuthContext);
    console.log('   ‚úÖ MCP Integration initialized\n');
  }

  private async testBasicChat(): Promise<void> {
    console.log('1Ô∏è‚É£ Testing Basic Chat...');

    const task: SupremeAIv3Task = {
      type: 'question',
      userId: 'test-user-123',
      question: 'Hello! Can you help me understand how MarketSage can improve my marketing performance?'
    };

    try {
      const startTime = Date.now();
      const result = await this.supremeAI.processWithMCP(task, 'mock-session-token');
      const duration = Date.now() - startTime;

      if (result.success) {
        console.log(`   ‚úÖ Basic Chat: Success (${duration}ms)`);
        console.log(`   üìä Confidence: ${result.confidence}, Score: ${result.supremeScore}`);
        console.log(`   üîó MCP Enhanced: ${result.data.mcpUsed}`);
        console.log(`   üí¨ Response: ${result.data.response.substring(0, 100)}...`);
        
        this.logInsightsAndRecommendations(result);
      } else {
        console.log(`   ‚ùå Basic Chat: Failed`);
      }
    } catch (error) {
      console.log(`   ‚ùå Basic Chat: Error - ${error.message}`);
    }
  }

  private async testCustomerAnalysisChat(): Promise<void> {
    console.log('\n2Ô∏è‚É£ Testing Customer Analysis Chat...');

    const task: SupremeAIv3Task = {
      type: 'question',
      userId: 'test-user-123',
      question: 'Analyze my customer data and tell me about engagement patterns, high-value customers, and retention opportunities'
    };

    try {
      const startTime = Date.now();
      const result = await this.supremeAI.processWithMCP(task, 'mock-session-token');
      const duration = Date.now() - startTime;

      if (result.success) {
        console.log(`   ‚úÖ Customer Analysis: Success (${duration}ms)`);
        console.log(`   üìä Confidence: ${result.confidence}, Score: ${result.supremeScore}`);
        console.log(`   üîó MCP Enhanced: ${result.data.mcpUsed}`);
        console.log(`   üë• Customer Focus: Yes`);
        
        this.logInsightsAndRecommendations(result);
      } else {
        console.log(`   ‚ùå Customer Analysis: Failed`);
      }
    } catch (error) {
      console.log(`   ‚ùå Customer Analysis: Error - ${error.message}`);
    }
  }

  private async testCampaignInsightChat(): Promise<void> {
    console.log('\n3Ô∏è‚É£ Testing Campaign Insight Chat...');

    const task: SupremeAIv3Task = {
      type: 'question',
      userId: 'test-user-123',
      question: 'Review my recent email and SMS campaigns. What are the performance trends and how can I optimize for better results?'
    };

    try {
      const startTime = Date.now();
      const result = await this.supremeAI.processWithMCP(task, 'mock-session-token');
      const duration = Date.now() - startTime;

      if (result.success) {
        console.log(`   ‚úÖ Campaign Insights: Success (${duration}ms)`);
        console.log(`   üìä Confidence: ${result.confidence}, Score: ${result.supremeScore}`);
        console.log(`   üîó MCP Enhanced: ${result.data.mcpUsed}`);
        console.log(`   üìß Campaign Focus: Yes`);
        
        this.logInsightsAndRecommendations(result);
      } else {
        console.log(`   ‚ùå Campaign Insights: Failed`);
      }
    } catch (error) {
      console.log(`   ‚ùå Campaign Insights: Error - ${error.message}`);
    }
  }

  private async testLeadPulseChat(): Promise<void> {
    console.log('\n4Ô∏è‚É£ Testing LeadPulse Chat...');

    const task: SupremeAIv3Task = {
      type: 'leadpulse_insights',
      userId: 'test-user-123',
      timeRange: '30d',
      context: { 
        source: 'chat_test',
        question: 'What insights can you provide about my website visitors and their behavior patterns?' 
      }
    };

    try {
      const startTime = Date.now();
      const result = await this.supremeAI.processWithMCP(task, 'mock-session-token');
      const duration = Date.now() - startTime;

      if (result.success) {
        console.log(`   ‚úÖ LeadPulse Insights: Success (${duration}ms)`);
        console.log(`   üìä Confidence: ${result.confidence}, Score: ${result.supremeScore}`);
        console.log(`   üîó MCP Enhanced: ${result.data.mcpUsed}`);
        console.log(`   üëÅÔ∏è Visitor Focus: Yes`);
        
        this.logInsightsAndRecommendations(result);
      } else {
        console.log(`   ‚ùå LeadPulse Insights: Failed`);
      }
    } catch (error) {
      console.log(`   ‚ùå LeadPulse Insights: Error - ${error.message}`);
    }
  }

  private async testBusinessStrategyChat(): Promise<void> {
    console.log('\n5Ô∏è‚É£ Testing Business Strategy Chat...');

    const task: SupremeAIv3Task = {
      type: 'analyze',
      userId: 'test-user-123',
      question: 'Provide a comprehensive business strategy analysis covering customer retention, campaign optimization, and growth opportunities based on all available data'
    };

    try {
      const startTime = Date.now();
      const result = await this.supremeAI.processWithMCP(task, 'mock-session-token');
      const duration = Date.now() - startTime;

      if (result.success) {
        console.log(`   ‚úÖ Business Strategy: Success (${duration}ms)`);
        console.log(`   üìä Confidence: ${result.confidence}, Score: ${result.supremeScore}`);
        console.log(`   üîó MCP Enhanced: ${result.data.mcpUsed}`);
        console.log(`   üß† Strategic Analysis: Yes`);
        
        this.logInsightsAndRecommendations(result);
        
        // Additional checks for comprehensive response
        const responseLength = result.data.response.length;
        console.log(`   üìù Response Depth: ${responseLength > 1000 ? 'Comprehensive' : 'Basic'} (${responseLength} chars)`);
      } else {
        console.log(`   ‚ùå Business Strategy: Failed`);
      }
    } catch (error) {
      console.log(`   ‚ùå Business Strategy: Error - ${error.message}`);
    }
  }

  private logInsightsAndRecommendations(result: any): void {
    if (result.insights && result.insights.length > 0) {
      console.log(`   üí° Insights: ${result.insights.length} generated`);
    }
    
    if (result.recommendations && result.recommendations.length > 0) {
      console.log(`   üéØ Recommendations: ${result.recommendations.length} generated`);
    }
    
    if (result.data.sources && result.data.sources.length > 0) {
      console.log(`   üìö Data Sources: ${result.data.sources.join(', ')}`);
    }
  }
}

// Run the direct AI chat tests
async function main() {
  const tester = new DirectAIChatTest();
  
  try {
    await tester.runTests();
    process.exit(0);
  } catch (error) {
    console.error('\nüí• Direct AI Chat test suite failed:', error);
    process.exit(1);
  }
}

// Run if called directly
if (require.main === module) {
  main();
}

export { DirectAIChatTest };