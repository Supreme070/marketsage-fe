/**
 * Prisma Type Definitions (Local)
 * =================================
 *
 * These types were previously generated by @prisma/client.
 * Now defined locally to remove Prisma dependency from frontend.
 */

// User Role enum
export enum UserRole {
  USER = 'USER',
  ADMIN = 'ADMIN',
  IT_ADMIN = 'IT_ADMIN',
  SUPER_ADMIN = 'SUPER_ADMIN'
}

// AB Test Status
export enum ABTestStatus {
  DRAFT = 'DRAFT',
  RUNNING = 'RUNNING',
  PAUSED = 'PAUSED',
  COMPLETED = 'COMPLETED',
  STOPPED = 'STOPPED'
}

// AB Test Metric
export enum ABTestMetric {
  CONVERSION_RATE = 'CONVERSION_RATE',
  CLICK_RATE = 'CLICK_RATE',
  OPEN_RATE = 'OPEN_RATE',
  REVENUE = 'REVENUE',
  ENGAGEMENT = 'ENGAGEMENT'
}

// AB Test Type
export type ABTestType = 'EMAIL' | 'SMS' | 'WHATSAPP' | 'LANDING_PAGE' | 'FORM';

// Entity Type
export type EntityType = 'CONTACT' | 'CAMPAIGN' | 'WORKFLOW' | 'FORM' | 'USER' | 'ORGANIZATION';

// Campaign Status
export enum CampaignStatus {
  DRAFT = 'DRAFT',
  SCHEDULED = 'SCHEDULED',
  SENDING = 'SENDING',
  SENT = 'SENT',
  PAUSED = 'PAUSED',
  CANCELLED = 'CANCELLED',
  FAILED = 'FAILED'
}

// Workflow Status
export enum WorkflowStatus {
  ACTIVE = 'ACTIVE',
  INACTIVE = 'INACTIVE',
  DRAFT = 'DRAFT',
  ARCHIVED = 'ARCHIVED'
}

// Activity Type
export enum ActivityType {
  SENT = 'SENT',
  DELIVERED = 'DELIVERED',
  OPENED = 'OPENED',
  CLICKED = 'CLICKED',
  BOUNCED = 'BOUNCED',
  UNSUBSCRIBED = 'UNSUBSCRIBED',
  REPLIED = 'REPLIED',
  FAILED = 'FAILED'
}

// Subscription Status
export enum SubscriptionStatus {
  ACTIVE = 'ACTIVE',
  PAST_DUE = 'PAST_DUE',
  CANCELED = 'CANCELED',
  EXPIRED = 'EXPIRED',
  TRIALING = 'TRIALING'
}

// Transaction Status
export enum TransactionStatus {
  PENDING = 'PENDING',
  SUCCESS = 'SUCCESS',
  FAILED = 'FAILED',
  REFUNDED = 'REFUNDED'
}

// Workflow Node Type
export enum WorkflowNodeType {
  TRIGGER = 'TRIGGER',
  CONDITION = 'CONDITION',
  ACTION = 'ACTION',
  DELAY = 'DELAY',
  EMAIL = 'EMAIL',
  SMS = 'SMS',
  WHATSAPP = 'WHATSAPP',
  NOTIFICATION = 'NOTIFICATION',
  WEBHOOK = 'WEBHOOK',
  API_CALL = 'API_CALL'
}

// Workflow model type (simplified for frontend use)
export interface Workflow {
  id: string;
  name: string;
  description?: string | null;
  status: WorkflowStatus;
  trigger?: any;
  organizationId: string;
  createdById: string;
  createdAt: Date;
  updatedAt: Date;
}

// Prisma namespace for error handling compatibility
export namespace Prisma {
  export class PrismaClientKnownRequestError extends Error {
    code: string;
    meta?: any;
    constructor(message: string, code: string, meta?: any) {
      super(message);
      this.code = code;
      this.meta = meta;
    }
  }
}

// PrismaClient stub (should not be used in frontend - for type compatibility only)
export class PrismaClient {
  constructor() {
    // Don't throw error during build time - just log warning
    if (typeof window === 'undefined' && process.env.NODE_ENV !== 'test') {
      console.warn('⚠️  WARNING: PrismaClient instantiated in frontend. This is a stub - database operations will fail.');
    }

    // Return a Proxy that throws errors when methods are called
    return new Proxy(this, {
      get(_target, prop) {
        if (prop === 'constructor' || prop === 'toString' || prop === 'valueOf') {
          return undefined;
        }

        if (typeof prop === 'string' && prop.startsWith('$')) {
          // System methods like $connect, $disconnect
          return async () => {
            console.warn(`⚠️  Blocked: prisma.${prop}() - Use backend API instead`);
          };
        }

        // Model methods (user, contact, etc.)
        return new Proxy({}, {
          get(_modelTarget, operation) {
            return () => {
              throw new Error(`⚠️  FRONTEND DATABASE ACCESS BLOCKED: prisma.${String(prop)}.${String(operation)}() not allowed. Use backend API endpoint /api/v2/${String(prop)}/* instead.`);
            };
          }
        });
      }
    }) as any;
  }
}

// Export all for easy importing
export type {
  ABTestType,
  EntityType
};
