b3e9983776b5108c1d310f0d512aa2e8
/**
 * LeadPulse Error Handling & Reliability System
 * 
 * Provides comprehensive error handling, fallbacks, and reliability features
 * for production-ready LeadPulse operations
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ErrorSeverity: function() {
        return ErrorSeverity;
    },
    LeadPulseErrorHandler: function() {
        return LeadPulseErrorHandler;
    },
    LeadPulseErrorType: function() {
        return LeadPulseErrorType;
    },
    leadPulseErrorHandler: function() {
        return leadPulseErrorHandler;
    },
    withCacheFallback: function() {
        return withCacheFallback;
    },
    withDatabaseFallback: function() {
        return withDatabaseFallback;
    },
    withRateLimit: function() {
        return withRateLimit;
    }
});
const _logger = require("../logger");
const _redis = require("../cache/redis");
var LeadPulseErrorType = /*#__PURE__*/ function(LeadPulseErrorType) {
    LeadPulseErrorType["TRACKING_ERROR"] = "tracking_error";
    LeadPulseErrorType["DATABASE_ERROR"] = "database_error";
    LeadPulseErrorType["CACHE_ERROR"] = "cache_error";
    LeadPulseErrorType["WEBSOCKET_ERROR"] = "websocket_error";
    LeadPulseErrorType["VALIDATION_ERROR"] = "validation_error";
    LeadPulseErrorType["RATE_LIMIT_ERROR"] = "rate_limit_error";
    LeadPulseErrorType["EXTERNAL_API_ERROR"] = "external_api_error";
    LeadPulseErrorType["UNKNOWN_ERROR"] = "unknown_error";
    return LeadPulseErrorType;
}({});
var ErrorSeverity = /*#__PURE__*/ function(ErrorSeverity) {
    ErrorSeverity["LOW"] = "low";
    ErrorSeverity["MEDIUM"] = "medium";
    ErrorSeverity["HIGH"] = "high";
    ErrorSeverity["CRITICAL"] = "critical";
    return ErrorSeverity;
}({});
class LeadPulseErrorHandler {
    static getInstance() {
        if (!LeadPulseErrorHandler.instance) {
            LeadPulseErrorHandler.instance = new LeadPulseErrorHandler();
        }
        return LeadPulseErrorHandler.instance;
    }
    constructor(){
        this.errorQueue = [];
        this.maxQueueSize = 1000;
        this.retryIntervals = [
            1000,
            3000,
            10000,
            30000,
            60000
        ] // Progressive backoff
        ;
        this.startErrorProcessor();
    }
    // Handle and classify errors
    async handleError(error, context = {}, type) {
        const errorRecord = {
            id: this.generateErrorId(),
            type: type || this.classifyError(error),
            severity: this.determineSeverity(error, type),
            message: error instanceof Error ? error.message : String(error),
            stack: error instanceof Error ? error.stack : undefined,
            context: {
                timestamp: new Date(),
                ...context
            },
            resolved: false,
            retryCount: 0,
            maxRetries: this.getMaxRetries(type || this.classifyError(error)),
            createdAt: new Date()
        };
        // Log the error
        this.logError(errorRecord);
        // Store in error queue for processing
        this.addToQueue(errorRecord);
        // Store in cache for monitoring
        await this.storeErrorInCache(errorRecord);
        // Handle critical errors immediately
        if (errorRecord.severity === "critical") {
            await this.handleCriticalError(errorRecord);
        }
        return errorRecord;
    }
    // Classify error type based on error content
    classifyError(error) {
        if (!error) return "unknown_error";
        const message = error instanceof Error ? error.message.toLowerCase() : String(error).toLowerCase();
        const stack = error instanceof Error ? error.stack?.toLowerCase() : '';
        if (message.includes('database') || message.includes('prisma') || message.includes('sql')) {
            return "database_error";
        }
        if (message.includes('redis') || message.includes('cache')) {
            return "cache_error";
        }
        if (message.includes('websocket') || message.includes('socket')) {
            return "websocket_error";
        }
        if (message.includes('validation') || message.includes('invalid')) {
            return "validation_error";
        }
        if (message.includes('rate limit') || message.includes('too many requests')) {
            return "rate_limit_error";
        }
        if (message.includes('fetch') || message.includes('network') || message.includes('timeout')) {
            return "external_api_error";
        }
        if (stack?.includes('leadpulse') || stack?.includes('tracking')) {
            return "tracking_error";
        }
        return "unknown_error";
    }
    // Determine error severity
    determineSeverity(error, type) {
        const errorType = type || this.classifyError(error);
        const message = error instanceof Error ? error.message.toLowerCase() : String(error).toLowerCase();
        // Critical errors that affect core functionality
        if (errorType === "database_error" && (message.includes('connection') || message.includes('pool'))) {
            return "critical";
        }
        if (message.includes('out of memory') || message.includes('disk full')) {
            return "critical";
        }
        // High severity errors
        if (errorType === "database_error" || errorType === "websocket_error") {
            return "high";
        }
        // Medium severity errors
        if (errorType === "cache_error" || errorType === "external_api_error") {
            return "medium";
        }
        // Low severity errors
        return "low";
    }
    // Get maximum retries based on error type
    getMaxRetries(type) {
        const retryMap = {
            ["tracking_error"]: 3,
            ["database_error"]: 2,
            ["cache_error"]: 5,
            ["websocket_error"]: 3,
            ["validation_error"]: 0,
            ["rate_limit_error"]: 2,
            ["external_api_error"]: 3,
            ["unknown_error"]: 1
        };
        return retryMap[type] || 1;
    }
    // Log error with appropriate level
    logError(errorRecord) {
        const logData = {
            errorId: errorRecord.id,
            type: errorRecord.type,
            severity: errorRecord.severity,
            message: errorRecord.message,
            context: errorRecord.context,
            stack: errorRecord.stack
        };
        switch(errorRecord.severity){
            case "critical":
                _logger.logger.error('CRITICAL LeadPulse Error:', logData);
                break;
            case "high":
                _logger.logger.error('HIGH severity LeadPulse Error:', logData);
                break;
            case "medium":
                _logger.logger.warn('MEDIUM severity LeadPulse Error:', logData);
                break;
            case "low":
                _logger.logger.info('LOW severity LeadPulse Error:', logData);
                break;
        }
    }
    // Add error to processing queue
    addToQueue(errorRecord) {
        if (this.errorQueue.length >= this.maxQueueSize) {
            // Remove oldest error
            this.errorQueue.shift();
        }
        this.errorQueue.push(errorRecord);
    }
    // Store error in cache for monitoring
    async storeErrorInCache(errorRecord) {
        try {
            const cacheKey = `leadpulse:errors:${errorRecord.id}`;
            await _redis.redis.set(cacheKey, errorRecord, 24 * 60 * 60); // 24 hours
            // Add to error list for monitoring
            await _redis.redis.lpush('leadpulse:errors:list', errorRecord, 100); // Keep last 100
            // Update error counters
            const dateKey = new Date().toISOString().split('T')[0];
            await _redis.redis.incr(`leadpulse:errors:count:${dateKey}`, 24 * 60 * 60);
            await _redis.redis.incr(`leadpulse:errors:count:${errorRecord.type}:${dateKey}`, 24 * 60 * 60);
        } catch (cacheError) {
            _logger.logger.warn('Failed to store error in cache:', cacheError);
        }
    }
    // Handle critical errors with immediate action
    async handleCriticalError(errorRecord) {
        _logger.logger.error('CRITICAL ERROR - Taking immediate action:', errorRecord);
        // Store critical error for alerting
        try {
            await _redis.redis.lpush('leadpulse:errors:critical', errorRecord, 10);
        } catch (error) {
            _logger.logger.error('Failed to store critical error:', error);
        }
    // TODO: Add alerting mechanism (email, Slack, etc.)
    // This could integrate with external monitoring services
    }
    // Start error processing loop
    startErrorProcessor() {
        setInterval(async ()=>{
            await this.processErrorQueue();
        }, 5000); // Process every 5 seconds
    }
    // Process errors in queue for retries
    async processErrorQueue() {
        const retryableErrors = this.errorQueue.filter((error)=>!error.resolved && error.retryCount < error.maxRetries);
        for (const errorRecord of retryableErrors){
            if (this.shouldRetry(errorRecord)) {
                await this.retryOperation(errorRecord);
            }
        }
        // Clean up resolved errors
        this.errorQueue = this.errorQueue.filter((error)=>!error.resolved);
    }
    // Check if error should be retried
    shouldRetry(errorRecord) {
        if (errorRecord.retryCount >= errorRecord.maxRetries) {
            return false;
        }
        const timeSinceLastRetry = Date.now() - errorRecord.createdAt.getTime();
        const retryInterval = this.retryIntervals[errorRecord.retryCount] || 60000;
        return timeSinceLastRetry >= retryInterval;
    }
    // Retry failed operations
    async retryOperation(errorRecord) {
        errorRecord.retryCount++;
        try {
            _logger.logger.info(`Retrying operation for error ${errorRecord.id}, attempt ${errorRecord.retryCount}`);
            // The actual retry logic would depend on the error type
            // For now, we'll mark certain types as resolved
            if (errorRecord.type === "cache_error") {
                // Cache errors often resolve themselves
                errorRecord.resolved = true;
                errorRecord.resolvedAt = new Date();
            }
            // Update in cache
            await this.storeErrorInCache(errorRecord);
        } catch (retryError) {
            _logger.logger.warn(`Retry failed for error ${errorRecord.id}:`, retryError);
        }
    }
    // Generate unique error ID
    generateErrorId() {
        return `lp-err-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
    }
    // Get error statistics
    async getErrorStats(days = 7) {
        try {
            const stats = {
                totalErrors: 0,
                errorsByType: {},
                errorsBySeverity: {},
                dailyErrorCounts: {},
                recentErrors: []
            };
            // Get recent errors from cache
            const recentErrors = await _redis.redis.lrange('leadpulse:errors:list', 0, 50);
            stats.recentErrors = recentErrors;
            stats.totalErrors = recentErrors.length;
            // Count by type and severity
            recentErrors.forEach((error)=>{
                stats.errorsByType[error.type] = (stats.errorsByType[error.type] || 0) + 1;
                stats.errorsBySeverity[error.severity] = (stats.errorsBySeverity[error.severity] || 0) + 1;
            });
            // Get daily counts
            for(let i = 0; i < days; i++){
                const date = new Date();
                date.setDate(date.getDate() - i);
                const dateKey = date.toISOString().split('T')[0];
                const count = await _redis.redis.get(`leadpulse:errors:count:${dateKey}`) || 0;
                stats.dailyErrorCounts[dateKey] = count;
            }
            return stats;
        } catch (error) {
            _logger.logger.error('Error getting error stats:', error);
            return null;
        }
    }
    // Get critical errors
    async getCriticalErrors() {
        try {
            return await _redis.redis.lrange('leadpulse:errors:critical', 0, -1);
        } catch (error) {
            _logger.logger.error('Error getting critical errors:', error);
            return [];
        }
    }
    // Health check
    async healthCheck() {
        try {
            const stats = await this.getErrorStats(1); // Last 24 hours
            const criticalErrors = await this.getCriticalErrors();
            const today = new Date().toISOString().split('T')[0];
            const todayErrors = stats?.dailyErrorCounts[today] || 0;
            return {
                healthy: criticalErrors.length === 0 && todayErrors < 100,
                errorRate: todayErrors,
                criticalErrors: criticalErrors.length
            };
        } catch (error) {
            return {
                healthy: false
            };
        }
    }
}
async function withDatabaseFallback(operation, fallback, context) {
    try {
        return await operation();
    } catch (error) {
        await LeadPulseErrorHandler.getInstance().handleError(error, context, "database_error");
        _logger.logger.warn('Database operation failed, using fallback value:', fallback);
        return fallback;
    }
}
async function withCacheFallback(cacheOperation, dbOperation, context) {
    try {
        const cached = await cacheOperation();
        if (cached !== null) {
            return cached;
        }
    } catch (error) {
        await LeadPulseErrorHandler.getInstance().handleError(error, context, "cache_error");
        _logger.logger.warn('Cache operation failed, falling back to database');
    }
    return await dbOperation();
}
async function withRateLimit(operation, key, maxRequests = 100, windowMs = 60000) {
    const rateLimitKey = `rate_limit:${key}`;
    try {
        const current = await _redis.redis.incr(rateLimitKey, Math.ceil(windowMs / 1000));
        if (current === 1) {
            // First request in window
            await _redis.redis.client?.expire(rateLimitKey, Math.ceil(windowMs / 1000));
        }
        if (current > maxRequests) {
            throw new Error(`Rate limit exceeded for ${key}: ${current}/${maxRequests}`);
        }
        return await operation();
    } catch (error) {
        if (error instanceof Error && error.message.includes('Rate limit exceeded')) {
            await LeadPulseErrorHandler.getInstance().handleError(error, {
                additionalData: {
                    key,
                    maxRequests,
                    windowMs
                }
            }, "rate_limit_error");
        }
        throw error;
    }
}
const leadPulseErrorHandler = LeadPulseErrorHandler.getInstance();

//# sourceMappingURL=data:application/json;base64,