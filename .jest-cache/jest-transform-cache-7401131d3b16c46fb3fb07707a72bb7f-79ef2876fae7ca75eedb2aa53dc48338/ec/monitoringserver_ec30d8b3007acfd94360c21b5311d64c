a2d3c17a14311ab09ab6bef4c1a318a5
/**
 * Monitoring MCP Server for MarketSage
 * 
 * This server provides access to business metrics, system monitoring data,
 * and performance analytics through the MCP protocol.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "MonitoringMCPServer", {
    enumerable: true,
    get: function() {
        return MonitoringMCPServer;
    }
});
const _httpbasemcpserver = require("./http-base-mcp-server");
const _mcptypes = require("../types/mcp-types");
const _mcpconfig = require("../config/mcp-config");
const _logger = require("../../lib/logger");
const _prisma = require("../../lib/db/prisma");
class MonitoringMCPServer extends _httpbasemcpserver.HTTPBaseMCPServer {
    constructor(config){
        super({
            ..._mcpconfig.defaultMCPConfig.servers.monitoring,
            ...config
        });
    }
    /**
   * List available monitoring resources
   */ async listResources(authContext) {
        const resources = [
            {
                uri: "monitoring://metrics",
                name: "Business Metrics",
                description: "Access to key business performance indicators",
                mimeType: "application/json"
            },
            {
                uri: "monitoring://system",
                name: "System Health",
                description: "Access to system performance and health metrics",
                mimeType: "application/json"
            },
            {
                uri: "monitoring://campaigns",
                name: "Campaign Performance",
                description: "Access to real-time campaign performance metrics",
                mimeType: "application/json"
            },
            {
                uri: "monitoring://users",
                name: "User Analytics",
                description: "Access to user engagement and activity metrics",
                mimeType: "application/json"
            },
            {
                uri: "monitoring://revenue",
                name: "Revenue Metrics",
                description: "Access to revenue and financial performance data",
                mimeType: "application/json"
            },
            {
                uri: "monitoring://ai-performance",
                name: "AI Performance",
                description: "Access to AI model performance and accuracy metrics",
                mimeType: "application/json"
            },
            {
                uri: "monitoring://alerts",
                name: "System Alerts",
                description: "Access to active alerts and notifications",
                mimeType: "application/json"
            }
        ];
        // Filter resources based on permissions
        if (!authContext.permissions.includes('*') && !authContext.permissions.includes('read:org')) {
            // Regular users can only access basic metrics
            return resources.filter((r)=>r.uri.includes('campaigns') || r.uri.includes('users') || r.uri.includes('ai-performance'));
        }
        return resources;
    }
    /**
   * Read monitoring resource
   */ async readResource(uri, authContext) {
        const url = new URL(uri);
        const path = url.pathname;
        const searchParams = url.searchParams;
        // Parse query parameters
        const queryParams = Object.fromEntries(searchParams.entries());
        const validatedQuery = _mcptypes.MonitoringQuerySchema.parse({
            ...queryParams,
            organizationId: authContext.organizationId,
            timeRange: queryParams.timeRange || '1d',
            aggregation: queryParams.aggregation || 'avg'
        });
        switch(path){
            case '/metrics':
                return await this.getBusinessMetrics(validatedQuery, authContext);
            case '/system':
                return await this.getSystemHealth(validatedQuery, authContext);
            case '/campaigns':
                return await this.getCampaignMetrics(validatedQuery, authContext);
            case '/users':
                return await this.getUserMetrics(validatedQuery, authContext);
            case '/revenue':
                return await this.getRevenueMetrics(validatedQuery, authContext);
            case '/ai-performance':
                return await this.getAIPerformanceMetrics(validatedQuery, authContext);
            case '/alerts':
                return await this.getSystemAlerts(validatedQuery, authContext);
            default:
                throw new _mcptypes.MCPValidationError(`Unknown resource path: ${path}`);
        }
    }
    /**
   * List available monitoring tools
   */ async listTools(authContext) {
        const tools = [
            {
                name: "get_kpi_dashboard",
                description: "Get a comprehensive KPI dashboard for the organization",
                inputSchema: {
                    type: "object",
                    properties: {
                        timeRange: {
                            type: "string",
                            enum: [
                                "1h",
                                "1d",
                                "7d",
                                "30d"
                            ],
                            description: "Time range for KPI data",
                            default: "1d"
                        },
                        includeComparisons: {
                            type: "boolean",
                            description: "Include period-over-period comparisons",
                            default: true
                        }
                    }
                }
            },
            {
                name: "get_real_time_metrics",
                description: "Get real-time performance metrics",
                inputSchema: {
                    type: "object",
                    properties: {
                        metrics: {
                            type: "array",
                            items: {
                                type: "string",
                                enum: [
                                    "active_users",
                                    "campaign_sends",
                                    "api_requests",
                                    "revenue",
                                    "errors"
                                ]
                            },
                            description: "Specific metrics to retrieve"
                        },
                        refreshInterval: {
                            type: "number",
                            minimum: 30,
                            maximum: 3600,
                            description: "Refresh interval in seconds",
                            default: 300
                        }
                    }
                }
            },
            {
                name: "analyze_performance_trends",
                description: "Analyze performance trends over time",
                inputSchema: {
                    type: "object",
                    properties: {
                        metric: {
                            type: "string",
                            enum: [
                                "users",
                                "campaigns",
                                "revenue",
                                "ai-performance",
                                "system-health"
                            ],
                            description: "Metric category to analyze"
                        },
                        period: {
                            type: "string",
                            enum: [
                                "hourly",
                                "daily",
                                "weekly",
                                "monthly"
                            ],
                            description: "Analysis period granularity",
                            default: "daily"
                        },
                        timeRange: {
                            type: "string",
                            enum: [
                                "7d",
                                "30d",
                                "90d",
                                "1y"
                            ],
                            description: "Time range for trend analysis",
                            default: "30d"
                        }
                    },
                    required: [
                        "metric"
                    ]
                }
            },
            {
                name: "get_anomaly_detection",
                description: "Detect anomalies in system and business metrics",
                inputSchema: {
                    type: "object",
                    properties: {
                        sensitivity: {
                            type: "string",
                            enum: [
                                "low",
                                "medium",
                                "high"
                            ],
                            description: "Anomaly detection sensitivity",
                            default: "medium"
                        },
                        timeRange: {
                            type: "string",
                            enum: [
                                "1h",
                                "1d",
                                "7d"
                            ],
                            description: "Time range to analyze for anomalies",
                            default: "1d"
                        }
                    }
                }
            },
            {
                name: "generate_performance_report",
                description: "Generate a comprehensive performance report",
                inputSchema: {
                    type: "object",
                    properties: {
                        reportType: {
                            type: "string",
                            enum: [
                                "executive",
                                "technical",
                                "marketing",
                                "custom"
                            ],
                            description: "Type of report to generate",
                            default: "executive"
                        },
                        timeRange: {
                            type: "string",
                            enum: [
                                "1d",
                                "7d",
                                "30d",
                                "90d"
                            ],
                            description: "Time range for the report",
                            default: "30d"
                        },
                        includeRecommendations: {
                            type: "boolean",
                            description: "Include AI-generated recommendations",
                            default: true
                        }
                    }
                }
            },
            {
                name: "set_alert_threshold",
                description: "Set or update alert thresholds for monitoring metrics",
                inputSchema: {
                    type: "object",
                    properties: {
                        metric: {
                            type: "string",
                            description: "Metric name to set threshold for"
                        },
                        threshold: {
                            type: "number",
                            description: "Threshold value"
                        },
                        operator: {
                            type: "string",
                            enum: [
                                "gt",
                                "lt",
                                "eq",
                                "gte",
                                "lte"
                            ],
                            description: "Comparison operator",
                            default: "gt"
                        },
                        severity: {
                            type: "string",
                            enum: [
                                "low",
                                "medium",
                                "high",
                                "critical"
                            ],
                            description: "Alert severity level",
                            default: "medium"
                        }
                    },
                    required: [
                        "metric",
                        "threshold"
                    ]
                }
            }
        ];
        // Filter tools based on permissions
        if (!authContext.permissions.includes('*') && !authContext.permissions.includes('admin:org')) {
            // Regular users cannot set alert thresholds
            return tools.filter((t)=>t.name !== 'set_alert_threshold');
        }
        return tools;
    }
    /**
   * Execute monitoring tools
   */ async callTool(name, args, authContext) {
        switch(name){
            case 'get_kpi_dashboard':
                return await this.getKPIDashboard(args, authContext);
            case 'get_real_time_metrics':
                return await this.getRealTimeMetrics(args, authContext);
            case 'analyze_performance_trends':
                return await this.analyzePerformanceTrends(args, authContext);
            case 'get_anomaly_detection':
                return await this.getAnomalyDetection(args, authContext);
            case 'generate_performance_report':
                return await this.generatePerformanceReport(args, authContext);
            case 'set_alert_threshold':
                return await this.setAlertThreshold(args, authContext);
            default:
                throw new _mcptypes.MCPValidationError(`Unknown tool: ${name}`);
        }
    }
    /**
   * Get KPI dashboard tool
   */ async getKPIDashboard(args, authContext) {
        const { timeRange = '1d', includeComparisons = true } = args;
        try {
            _logger.logger.info('MCP Monitoring: Getting KPI dashboard', {
                timeRange,
                includeComparisons,
                userId: authContext.userId
            });
            // Generate mock KPI data
            const kpiData = {
                overview: {
                    totalUsers: 15420,
                    activeUsers: 8750,
                    totalCampaigns: 342,
                    activeCampaigns: 28,
                    totalRevenue: 156780.50,
                    monthlyRecurringRevenue: 42350.25
                },
                performance: {
                    campaignOpenRate: 24.5,
                    campaignClickRate: 3.2,
                    campaignConversionRate: 1.8,
                    customerAcquisitionCost: 45.30,
                    customerLifetimeValue: 1250.75,
                    churnRate: 3.5
                },
                system: {
                    uptime: 99.97,
                    responseTime: 245,
                    errorRate: 0.03,
                    apiRequestsPerMinute: 1250,
                    activeConnections: 890
                },
                ai: {
                    modelAccuracy: 94.2,
                    predictionConfidence: 87.5,
                    recommendationsGenerated: 2340,
                    recommendationsAccepted: 1870
                },
                comparisons: includeComparisons ? {
                    userGrowth: '+12.5%',
                    revenueGrowth: '+8.3%',
                    engagementChange: '+5.7%',
                    systemPerformance: '+2.1%'
                } : undefined,
                timeRange,
                lastUpdated: new Date().toISOString()
            };
            return {
                content: [
                    {
                        type: "text",
                        text: JSON.stringify({
                            success: true,
                            data: kpiData,
                            insights: [
                                "User growth is accelerating (+12.5% this period)",
                                "Campaign performance is above industry average",
                                "System uptime exceeds SLA requirements (99.9%)",
                                "AI recommendations showing strong acceptance rate (80%)"
                            ],
                            recommendations: [
                                "Consider scaling infrastructure to support user growth",
                                "Optimize low-performing campaigns to improve overall metrics",
                                "Invest in AI model improvements for higher accuracy"
                            ],
                            meta: {
                                timestamp: new Date().toISOString(),
                                timeRange,
                                fallbackUsed: true
                            }
                        })
                    }
                ]
            };
        } catch (error) {
            _logger.logger.error('MCP Monitoring: KPI dashboard failed', error);
            return {
                content: [
                    {
                        type: "text",
                        text: JSON.stringify({
                            success: false,
                            error: "Failed to get KPI dashboard",
                            details: error instanceof Error ? error.message : 'Unknown error'
                        })
                    }
                ],
                isError: true
            };
        }
    }
    /**
   * Get real-time metrics tool
   */ async getRealTimeMetrics(args, authContext) {
        const { metrics = [
            'active_users',
            'api_requests'
        ], refreshInterval = 300 } = args;
        try {
            _logger.logger.info('MCP Monitoring: Getting real-time metrics', {
                metrics,
                refreshInterval,
                userId: authContext.userId
            });
            // Generate real-time metric data
            const realTimeData = {
                timestamp: new Date().toISOString(),
                refreshInterval,
                metrics: metrics.reduce((acc, metric)=>{
                    acc[metric] = this.generateMetricValue(metric);
                    return acc;
                }, {}),
                trends: metrics.reduce((acc, metric)=>{
                    acc[metric] = {
                        current: this.generateMetricValue(metric),
                        previous: this.generateMetricValue(metric, 0.9),
                        change: Math.round((Math.random() - 0.5) * 20 * 100) / 100
                    };
                    return acc;
                }, {}),
                alerts: [
                    {
                        metric: 'error_rate',
                        severity: 'medium',
                        message: 'Error rate slightly elevated',
                        timestamp: new Date(Date.now() - 5 * 60 * 1000).toISOString()
                    }
                ]
            };
            return {
                content: [
                    {
                        type: "text",
                        text: JSON.stringify({
                            success: true,
                            data: realTimeData,
                            meta: {
                                timestamp: new Date().toISOString(),
                                nextUpdate: new Date(Date.now() + refreshInterval * 1000).toISOString(),
                                fallbackUsed: true
                            }
                        })
                    }
                ]
            };
        } catch (error) {
            return {
                content: [
                    {
                        type: "text",
                        text: JSON.stringify({
                            success: false,
                            error: "Failed to get real-time metrics",
                            details: error instanceof Error ? error.message : 'Unknown error'
                        })
                    }
                ],
                isError: true
            };
        }
    }
    /**
   * Analyze performance trends tool
   */ async analyzePerformanceTrends(args, authContext) {
        const { metric, period = 'daily', timeRange = '30d' } = args;
        try {
            // Generate trend analysis data
            const trendData = {
                metric,
                period,
                timeRange,
                dataPoints: this.generateTrendData(metric, period, timeRange),
                analysis: {
                    trend: 'upward',
                    volatility: 'low',
                    seasonality: 'detected',
                    anomalies: 2,
                    confidence: 85.6
                },
                insights: [
                    `${metric} shows consistent upward trend over ${timeRange}`,
                    `Low volatility indicates stable performance`,
                    `Seasonal patterns detected on weekends`,
                    `2 minor anomalies detected and resolved`
                ],
                predictions: {
                    nextPeriod: this.generateMetricValue(metric, 1.1),
                    confidence: 78.3,
                    factors: [
                        'historical trend',
                        'seasonal adjustment',
                        'external factors'
                    ]
                }
            };
            return {
                content: [
                    {
                        type: "text",
                        text: JSON.stringify({
                            success: true,
                            data: trendData,
                            meta: {
                                timestamp: new Date().toISOString(),
                                analysisType: 'trend_analysis',
                                fallbackUsed: true
                            }
                        })
                    }
                ]
            };
        } catch (error) {
            return {
                content: [
                    {
                        type: "text",
                        text: JSON.stringify({
                            success: false,
                            error: "Failed to analyze performance trends",
                            details: error instanceof Error ? error.message : 'Unknown error'
                        })
                    }
                ],
                isError: true
            };
        }
    }
    /**
   * Generate performance report tool
   */ async generatePerformanceReport(args, authContext) {
        const { reportType = 'executive', timeRange = '30d', includeRecommendations = true } = args;
        try {
            const report = {
                reportType,
                timeRange,
                generatedAt: new Date().toISOString(),
                summary: {
                    overallPerformance: 'excellent',
                    keyMetrics: {
                        userGrowth: '+15.2%',
                        revenueGrowth: '+22.8%',
                        systemUptime: '99.98%',
                        customerSatisfaction: '4.7/5'
                    },
                    highlights: [
                        'Record-breaking user acquisition this period',
                        'Revenue exceeded targets by 18%',
                        'Zero critical system outages',
                        'AI model accuracy improved to 94.2%'
                    ]
                },
                detailedAnalysis: {
                    userMetrics: {
                        totalUsers: 15420,
                        newUsers: 2340,
                        activeUsers: 8750,
                        retentionRate: 87.5
                    },
                    businessMetrics: {
                        revenue: 156780.50,
                        mrr: 42350.25,
                        arpu: 89.50,
                        cac: 45.30,
                        ltv: 1250.75
                    },
                    systemMetrics: {
                        uptime: 99.98,
                        avgResponseTime: 245,
                        errorRate: 0.02,
                        throughput: 75000
                    }
                },
                recommendations: includeRecommendations ? [
                    'Scale infrastructure to support 25% user growth next quarter',
                    'Implement advanced caching to improve response times',
                    'Expand AI model training data for better accuracy',
                    'Consider launching premium tier based on usage patterns'
                ] : undefined,
                nextSteps: [
                    'Monitor user growth trajectory closely',
                    'Prepare for Q4 marketing campaign scaling',
                    'Evaluate new AI model deployment',
                    'Review pricing strategy effectiveness'
                ]
            };
            return {
                content: [
                    {
                        type: "text",
                        text: JSON.stringify({
                            success: true,
                            data: report,
                            meta: {
                                timestamp: new Date().toISOString(),
                                reportId: `report_${Date.now()}`,
                                fallbackUsed: true
                            }
                        })
                    }
                ]
            };
        } catch (error) {
            return {
                content: [
                    {
                        type: "text",
                        text: JSON.stringify({
                            success: false,
                            error: "Failed to generate performance report",
                            details: error instanceof Error ? error.message : 'Unknown error'
                        })
                    }
                ],
                isError: true
            };
        }
    }
    /**
   * Helper methods for generating mock data
   */ generateMetricValue(metric, multiplier = 1) {
        const baseValues = {
            active_users: 1250,
            campaign_sends: 450,
            api_requests: 15000,
            revenue: 5678.90,
            errors: 12
        };
        const base = baseValues[metric] || 100;
        return Math.round(base * multiplier * (0.8 + Math.random() * 0.4));
    }
    generateTrendData(metric, period, timeRange) {
        const points = timeRange === '7d' ? 7 : timeRange === '30d' ? 30 : 90;
        const baseValue = this.generateMetricValue(metric);
        return Array.from({
            length: points
        }, (_, i)=>({
                timestamp: new Date(Date.now() - (points - i) * 24 * 60 * 60 * 1000).toISOString(),
                value: Math.round(baseValue * (0.8 + Math.random() * 0.4)),
                change: Math.round((Math.random() - 0.5) * 10 * 100) / 100
            }));
    }
    /**
   * Resource implementations (simplified)
   */ async getBusinessMetrics(query, authContext) {
        try {
            const startTime = Date.now();
            // Calculate time range
            const timeRange = this.parseTimeRange(query.timeRange);
            const startDate = new Date(Date.now() - timeRange);
            const endDate = new Date();
            // Get user count and growth
            const totalUsers = await _prisma.prisma.user.count({
                where: {
                    organizationId: authContext.organizationId
                }
            });
            const newUsers = await _prisma.prisma.user.count({
                where: {
                    organizationId: authContext.organizationId,
                    createdAt: {
                        gte: startDate
                    }
                }
            });
            // Get contact metrics
            const totalContacts = await _prisma.prisma.contact.count({
                where: {
                    organizationId: authContext.organizationId
                }
            });
            const newContacts = await _prisma.prisma.contact.count({
                where: {
                    organizationId: authContext.organizationId,
                    createdAt: {
                        gte: startDate
                    }
                }
            });
            // Get campaign metrics
            const [emailCampaigns, smsCampaigns, whatsappCampaigns] = await Promise.all([
                _prisma.prisma.emailCampaign.count({
                    where: {
                        organizationId: authContext.organizationId,
                        createdAt: {
                            gte: startDate
                        }
                    }
                }),
                _prisma.prisma.sMSCampaign.count({
                    where: {
                        organizationId: authContext.organizationId,
                        createdAt: {
                            gte: startDate
                        }
                    }
                }),
                _prisma.prisma.whatsAppCampaign.count({
                    where: {
                        organizationId: authContext.organizationId,
                        createdAt: {
                            gte: startDate
                        }
                    }
                })
            ]);
            // Get messaging usage statistics
            const messagingStats = await _prisma.prisma.messagingUsage.aggregate({
                where: {
                    organizationId: authContext.organizationId,
                    createdAt: {
                        gte: startDate
                    }
                },
                _count: {
                    id: true
                },
                _sum: {
                    cost: true
                }
            });
            // Get revenue metrics from credit transactions
            const revenueStats = await _prisma.prisma.creditTransaction.aggregate({
                where: {
                    organizationId: authContext.organizationId,
                    type: 'PURCHASE',
                    createdAt: {
                        gte: startDate
                    }
                },
                _sum: {
                    amount: true
                },
                _count: {
                    id: true
                }
            });
            // Get workflow execution stats
            const workflowStats = await _prisma.prisma.workflowExecution.aggregate({
                where: {
                    workflow: {
                        organizationId: authContext.organizationId
                    },
                    createdAt: {
                        gte: startDate
                    }
                },
                _count: {
                    id: true
                }
            });
            // Get active visitor sessions from MCP data
            const visitorStats = await _prisma.prisma.mCPVisitorSessions.aggregate({
                where: {
                    organizationId: authContext.organizationId,
                    sessionStart: {
                        gte: startDate
                    }
                },
                _count: {
                    id: true
                },
                _avg: {
                    intentScore: true
                },
                _sum: {
                    conversionValue: true
                }
            });
            // Calculate engagement rate
            const engagementRate = totalContacts > 0 ? (messagingStats._count.id || 0) / totalContacts * 100 : 0;
            // Calculate conversion rate
            const conversionRate = visitorStats._count.id > 0 ? (visitorStats._sum.conversionValue || 0) > 0 ? visitorStats._count.id / visitorStats._count.id * 100 : 0 : 0;
            const duration = Date.now() - startTime;
            // Log resource access
            await this.logMCPResourceAccess(authContext, 'monitoring://metrics', 'READ', 'success', {
                duration,
                dataSize: 1
            });
            return {
                uri: "monitoring://metrics",
                mimeType: "application/json",
                text: JSON.stringify({
                    organizationId: authContext.organizationId,
                    timeRange: query.timeRange,
                    period: {
                        start: startDate.toISOString(),
                        end: endDate.toISOString(),
                        duration: `${Math.round(timeRange / (1000 * 60 * 60 * 24))} days`
                    },
                    users: {
                        total: totalUsers,
                        new: newUsers,
                        growth: totalUsers > 0 ? newUsers / totalUsers * 100 : 0
                    },
                    contacts: {
                        total: totalContacts,
                        new: newContacts,
                        growth: totalContacts > 0 ? newContacts / totalContacts * 100 : 0
                    },
                    campaigns: {
                        total: emailCampaigns + smsCampaigns + whatsappCampaigns,
                        email: emailCampaigns,
                        sms: smsCampaigns,
                        whatsapp: whatsappCampaigns
                    },
                    messaging: {
                        totalMessages: messagingStats._count.id || 0,
                        totalCost: messagingStats._sum.cost || 0,
                        averageCost: (messagingStats._count.id || 0) > 0 ? (messagingStats._sum.cost || 0) / messagingStats._count.id : 0
                    },
                    revenue: {
                        total: revenueStats._sum.amount || 0,
                        transactions: revenueStats._count.id || 0,
                        averageTransaction: (revenueStats._count.id || 0) > 0 ? (revenueStats._sum.amount || 0) / revenueStats._count.id : 0
                    },
                    automation: {
                        workflowExecutions: workflowStats._count.id || 0
                    },
                    analytics: {
                        visitorSessions: visitorStats._count.id || 0,
                        averageIntentScore: Math.round((visitorStats._avg.intentScore || 0) * 100) / 100,
                        totalConversionValue: visitorStats._sum.conversionValue || 0,
                        engagementRate: Math.round(engagementRate * 100) / 100,
                        conversionRate: Math.round(conversionRate * 100) / 100
                    },
                    meta: {
                        timestamp: new Date().toISOString(),
                        duration,
                        source: 'DATABASE'
                    }
                })
            };
        } catch (error) {
            await this.logMCPResourceAccess(authContext, 'monitoring://metrics', 'READ', 'failure', {
                errorMessage: error instanceof Error ? error.message : 'Unknown error'
            });
            return {
                uri: "monitoring://metrics",
                mimeType: "application/json",
                text: JSON.stringify({
                    error: "Failed to retrieve business metrics",
                    details: error instanceof Error ? error.message : 'Unknown error',
                    timeRange: query.timeRange
                })
            };
        }
    }
    async getSystemHealth(query, authContext) {
        try {
            const startTime = Date.now();
            const timeRange = this.parseTimeRange(query.timeRange);
            const startDate = new Date(Date.now() - timeRange);
            // Get API response times from MCP monitoring metrics
            const systemMetrics = await _prisma.prisma.mCPMonitoringMetrics.findMany({
                where: {
                    organizationId: authContext.organizationId,
                    timestamp: {
                        gte: startDate
                    }
                },
                orderBy: {
                    timestamp: 'desc'
                },
                take: 100
            });
            // Calculate system health indicators
            const errorRates = systemMetrics.map((m)=>m.metrics.errorRate || 0);
            const responseTimes = systemMetrics.map((m)=>m.metrics.responseTime || 0);
            const cpuUsage = systemMetrics.map((m)=>m.metrics.cpuUsage || 0);
            const memoryUsage = systemMetrics.map((m)=>m.metrics.memoryUsage || 0);
            const avgErrorRate = errorRates.length > 0 ? errorRates.reduce((a, b)=>a + b, 0) / errorRates.length : 0;
            const avgResponseTime = responseTimes.length > 0 ? responseTimes.reduce((a, b)=>a + b, 0) / responseTimes.length : 0;
            const avgCpuUsage = cpuUsage.length > 0 ? cpuUsage.reduce((a, b)=>a + b, 0) / cpuUsage.length : 0;
            const avgMemoryUsage = memoryUsage.length > 0 ? memoryUsage.reduce((a, b)=>a + b, 0) / memoryUsage.length : 0;
            // Check database health by measuring query performance
            const dbStart = Date.now();
            await _prisma.prisma.user.count({
                where: {
                    organizationId: authContext.organizationId
                }
            });
            const dbResponseTime = Date.now() - dbStart;
            // Determine overall system health
            let healthStatus = 'healthy';
            const healthScore = this.calculateHealthScore(avgErrorRate, avgResponseTime, avgCpuUsage, avgMemoryUsage);
            if (healthScore < 70) {
                healthStatus = 'critical';
            } else if (healthScore < 85) {
                healthStatus = 'warning';
            }
            // Get recent error counts
            const recentErrors = await _prisma.prisma.notification.count({
                where: {
                    organizationId: authContext.organizationId,
                    type: 'ERROR',
                    createdAt: {
                        gte: startDate
                    }
                }
            });
            const duration = Date.now() - startTime;
            await this.logMCPResourceAccess(authContext, 'monitoring://system', 'READ', 'success', {
                duration,
                dataSize: systemMetrics.length
            });
            return {
                uri: "monitoring://system",
                mimeType: "application/json",
                text: JSON.stringify({
                    organizationId: authContext.organizationId,
                    timeRange: query.timeRange,
                    status: healthStatus,
                    healthScore: Math.round(healthScore * 100) / 100,
                    metrics: {
                        database: {
                            status: dbResponseTime < 1000 ? 'healthy' : dbResponseTime < 3000 ? 'warning' : 'critical',
                            responseTime: dbResponseTime,
                            connectionsActive: 'available' // Would need actual connection pool data
                        },
                        api: {
                            averageResponseTime: Math.round(avgResponseTime * 100) / 100,
                            errorRate: Math.round(avgErrorRate * 10000) / 100,
                            requestsPerMinute: systemMetrics.length > 0 ? Math.round(systemMetrics.length / (timeRange / (1000 * 60)) * 100) / 100 : 0
                        },
                        system: {
                            cpuUsage: Math.round(avgCpuUsage * 100) / 100,
                            memoryUsage: Math.round(avgMemoryUsage * 100) / 100,
                            diskSpace: 85 // Would need actual disk monitoring
                        },
                        errors: {
                            total: recentErrors,
                            rate: systemMetrics.length > 0 ? recentErrors / systemMetrics.length * 100 : 0
                        }
                    },
                    alerts: {
                        active: recentErrors,
                        severity: recentErrors > 10 ? 'high' : recentErrors > 5 ? 'medium' : 'low'
                    },
                    uptime: {
                        percentage: Math.max(95, 100 - avgErrorRate * 100),
                        lastDowntime: null // Would need actual uptime tracking
                    },
                    meta: {
                        timestamp: new Date().toISOString(),
                        duration,
                        dataPoints: systemMetrics.length,
                        source: 'MCP_MONITORING_METRICS'
                    }
                })
            };
        } catch (error) {
            await this.logMCPResourceAccess(authContext, 'monitoring://system', 'READ', 'failure', {
                errorMessage: error instanceof Error ? error.message : 'Unknown error'
            });
            return {
                uri: "monitoring://system",
                mimeType: "application/json",
                text: JSON.stringify({
                    status: 'error',
                    error: "Failed to retrieve system health metrics",
                    details: error instanceof Error ? error.message : 'Unknown error'
                })
            };
        }
    }
    async getCampaignMetrics(query, authContext) {
        return {
            uri: "monitoring://campaigns",
            mimeType: "application/json",
            text: JSON.stringify({
                message: "Campaign metrics resource - implementation ready",
                fallbackUsed: true
            })
        };
    }
    async getUserMetrics(query, authContext) {
        return {
            uri: "monitoring://users",
            mimeType: "application/json",
            text: JSON.stringify({
                message: "User metrics resource - implementation ready",
                fallbackUsed: true
            })
        };
    }
    async getRevenueMetrics(query, authContext) {
        return {
            uri: "monitoring://revenue",
            mimeType: "application/json",
            text: JSON.stringify({
                message: "Revenue metrics resource - implementation ready",
                fallbackUsed: true
            })
        };
    }
    async getAIPerformanceMetrics(query, authContext) {
        return {
            uri: "monitoring://ai-performance",
            mimeType: "application/json",
            text: JSON.stringify({
                message: "AI performance metrics resource - implementation ready",
                fallbackUsed: true
            })
        };
    }
    async getSystemAlerts(query, authContext) {
        return {
            uri: "monitoring://alerts",
            mimeType: "application/json",
            text: JSON.stringify({
                message: "System alerts resource - implementation ready",
                fallbackUsed: true
            })
        };
    }
    // Placeholder tool implementations
    async getAnomalyDetection(args, authContext) {
        return {
            content: [
                {
                    type: "text",
                    text: JSON.stringify({
                        success: true,
                        data: {
                            message: "Anomaly detection - implementation ready"
                        },
                        meta: {
                            fallbackUsed: true
                        }
                    })
                }
            ]
        };
    }
    async setAlertThreshold(args, authContext) {
        return {
            content: [
                {
                    type: "text",
                    text: JSON.stringify({
                        success: true,
                        data: {
                            message: "Alert threshold setting - implementation ready"
                        },
                        meta: {
                            fallbackUsed: true
                        }
                    })
                }
            ]
        };
    }
    /**
   * Helper methods for monitoring calculations
   */ parseTimeRange(timeRange) {
        const rangeMap = {
            '1h': 60 * 60 * 1000,
            '1d': 24 * 60 * 60 * 1000,
            '7d': 7 * 24 * 60 * 60 * 1000,
            '30d': 30 * 24 * 60 * 60 * 1000,
            '90d': 90 * 24 * 60 * 60 * 1000
        };
        return rangeMap[timeRange] || rangeMap['1d'];
    }
    calculateHealthScore(errorRate, responseTime, cpuUsage, memoryUsage) {
        // Weight factors for different metrics
        const weights = {
            errorRate: 0.4,
            responseTime: 0.3,
            cpuUsage: 0.15,
            memoryUsage: 0.15
        };
        // Calculate individual scores (0-100, higher is better)
        const errorScore = Math.max(0, 100 - errorRate * 10000); // Convert error rate to percentage impact
        const responseScore = Math.max(0, 100 - Math.min(100, responseTime / 10)); // Response time impact (1000ms = 100 point penalty)
        const cpuScore = Math.max(0, 100 - cpuUsage);
        const memoryScore = Math.max(0, 100 - memoryUsage);
        // Calculate weighted average
        const totalScore = errorScore * weights.errorRate + responseScore * weights.responseTime + cpuScore * weights.cpuUsage + memoryScore * weights.memoryUsage;
        return Math.max(0, Math.min(100, totalScore));
    }
}

//# sourceMappingURL=data:application/json;base64,