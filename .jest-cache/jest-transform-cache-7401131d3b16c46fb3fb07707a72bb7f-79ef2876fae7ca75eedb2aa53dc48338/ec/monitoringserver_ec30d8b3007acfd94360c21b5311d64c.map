{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/mcp/servers/monitoring-server.ts"],"sourcesContent":["/**\n * Monitoring MCP Server for MarketSage\n * \n * This server provides access to business metrics, system monitoring data,\n * and performance analytics through the MCP protocol.\n */\n\nimport { z } from 'zod';\nimport { HTTPBaseMCPServer } from './http-base-mcp-server';\nimport { \n  type MCPAuthContext, \n  type MCPServerConfig,\n  MonitoringQuerySchema,\n  type MonitoringQuery,\n  MonitoringData,\n  MCPAuthorizationError,\n  MCPValidationError\n} from '../types/mcp-types';\n\nimport { defaultMCPConfig } from '../config/mcp-config';\nimport { logger } from '../../lib/logger';\nimport { prisma } from '../../lib/db/prisma';\n\nexport class MonitoringMCPServer extends HTTPBaseMCPServer {\n  constructor(config?: Partial<MCPServerConfig>) {\n    super({\n      ...defaultMCPConfig.servers.monitoring,\n      ...config\n    });\n  }\n\n  /**\n   * List available monitoring resources\n   */\n  protected async listResources(authContext: MCPAuthContext): Promise<any[]> {\n    const resources = [\n      {\n        uri: \"monitoring://metrics\",\n        name: \"Business Metrics\",\n        description: \"Access to key business performance indicators\",\n        mimeType: \"application/json\"\n      },\n      {\n        uri: \"monitoring://system\",\n        name: \"System Health\",\n        description: \"Access to system performance and health metrics\",\n        mimeType: \"application/json\"\n      },\n      {\n        uri: \"monitoring://campaigns\",\n        name: \"Campaign Performance\",\n        description: \"Access to real-time campaign performance metrics\",\n        mimeType: \"application/json\"\n      },\n      {\n        uri: \"monitoring://users\",\n        name: \"User Analytics\",\n        description: \"Access to user engagement and activity metrics\",\n        mimeType: \"application/json\"\n      },\n      {\n        uri: \"monitoring://revenue\",\n        name: \"Revenue Metrics\",\n        description: \"Access to revenue and financial performance data\",\n        mimeType: \"application/json\"\n      },\n      {\n        uri: \"monitoring://ai-performance\",\n        name: \"AI Performance\",\n        description: \"Access to AI model performance and accuracy metrics\",\n        mimeType: \"application/json\"\n      },\n      {\n        uri: \"monitoring://alerts\",\n        name: \"System Alerts\",\n        description: \"Access to active alerts and notifications\",\n        mimeType: \"application/json\"\n      }\n    ];\n\n    // Filter resources based on permissions\n    if (!authContext.permissions.includes('*') && !authContext.permissions.includes('read:org')) {\n      // Regular users can only access basic metrics\n      return resources.filter(r => \n        r.uri.includes('campaigns') || \n        r.uri.includes('users') || \n        r.uri.includes('ai-performance')\n      );\n    }\n\n    return resources;\n  }\n\n  /**\n   * Read monitoring resource\n   */\n  protected async readResource(uri: string, authContext: MCPAuthContext): Promise<any> {\n    const url = new URL(uri);\n    const path = url.pathname;\n    const searchParams = url.searchParams;\n\n    // Parse query parameters\n    const queryParams = Object.fromEntries(searchParams.entries());\n    const validatedQuery = MonitoringQuerySchema.parse({\n      ...queryParams,\n      organizationId: authContext.organizationId,\n      timeRange: queryParams.timeRange || '1d',\n      aggregation: queryParams.aggregation || 'avg'\n    });\n\n    switch (path) {\n      case '/metrics':\n        return await this.getBusinessMetrics(validatedQuery, authContext);\n      case '/system':\n        return await this.getSystemHealth(validatedQuery, authContext);\n      case '/campaigns':\n        return await this.getCampaignMetrics(validatedQuery, authContext);\n      case '/users':\n        return await this.getUserMetrics(validatedQuery, authContext);\n      case '/revenue':\n        return await this.getRevenueMetrics(validatedQuery, authContext);\n      case '/ai-performance':\n        return await this.getAIPerformanceMetrics(validatedQuery, authContext);\n      case '/alerts':\n        return await this.getSystemAlerts(validatedQuery, authContext);\n      default:\n        throw new MCPValidationError(`Unknown resource path: ${path}`);\n    }\n  }\n\n  /**\n   * List available monitoring tools\n   */\n  protected async listTools(authContext: MCPAuthContext): Promise<any[]> {\n    const tools = [\n      {\n        name: \"get_kpi_dashboard\",\n        description: \"Get a comprehensive KPI dashboard for the organization\",\n        inputSchema: {\n          type: \"object\",\n          properties: {\n            timeRange: {\n              type: \"string\",\n              enum: [\"1h\", \"1d\", \"7d\", \"30d\"],\n              description: \"Time range for KPI data\",\n              default: \"1d\"\n            },\n            includeComparisons: {\n              type: \"boolean\",\n              description: \"Include period-over-period comparisons\",\n              default: true\n            }\n          }\n        }\n      },\n      {\n        name: \"get_real_time_metrics\",\n        description: \"Get real-time performance metrics\",\n        inputSchema: {\n          type: \"object\",\n          properties: {\n            metrics: {\n              type: \"array\",\n              items: {\n                type: \"string\",\n                enum: [\"active_users\", \"campaign_sends\", \"api_requests\", \"revenue\", \"errors\"]\n              },\n              description: \"Specific metrics to retrieve\"\n            },\n            refreshInterval: {\n              type: \"number\",\n              minimum: 30,\n              maximum: 3600,\n              description: \"Refresh interval in seconds\",\n              default: 300\n            }\n          }\n        }\n      },\n      {\n        name: \"analyze_performance_trends\",\n        description: \"Analyze performance trends over time\",\n        inputSchema: {\n          type: \"object\",\n          properties: {\n            metric: {\n              type: \"string\",\n              enum: [\"users\", \"campaigns\", \"revenue\", \"ai-performance\", \"system-health\"],\n              description: \"Metric category to analyze\"\n            },\n            period: {\n              type: \"string\",\n              enum: [\"hourly\", \"daily\", \"weekly\", \"monthly\"],\n              description: \"Analysis period granularity\",\n              default: \"daily\"\n            },\n            timeRange: {\n              type: \"string\",\n              enum: [\"7d\", \"30d\", \"90d\", \"1y\"],\n              description: \"Time range for trend analysis\",\n              default: \"30d\"\n            }\n          },\n          required: [\"metric\"]\n        }\n      },\n      {\n        name: \"get_anomaly_detection\",\n        description: \"Detect anomalies in system and business metrics\",\n        inputSchema: {\n          type: \"object\",\n          properties: {\n            sensitivity: {\n              type: \"string\",\n              enum: [\"low\", \"medium\", \"high\"],\n              description: \"Anomaly detection sensitivity\",\n              default: \"medium\"\n            },\n            timeRange: {\n              type: \"string\",\n              enum: [\"1h\", \"1d\", \"7d\"],\n              description: \"Time range to analyze for anomalies\",\n              default: \"1d\"\n            }\n          }\n        }\n      },\n      {\n        name: \"generate_performance_report\",\n        description: \"Generate a comprehensive performance report\",\n        inputSchema: {\n          type: \"object\",\n          properties: {\n            reportType: {\n              type: \"string\",\n              enum: [\"executive\", \"technical\", \"marketing\", \"custom\"],\n              description: \"Type of report to generate\",\n              default: \"executive\"\n            },\n            timeRange: {\n              type: \"string\",\n              enum: [\"1d\", \"7d\", \"30d\", \"90d\"],\n              description: \"Time range for the report\",\n              default: \"30d\"\n            },\n            includeRecommendations: {\n              type: \"boolean\",\n              description: \"Include AI-generated recommendations\",\n              default: true\n            }\n          }\n        }\n      },\n      {\n        name: \"set_alert_threshold\",\n        description: \"Set or update alert thresholds for monitoring metrics\",\n        inputSchema: {\n          type: \"object\",\n          properties: {\n            metric: {\n              type: \"string\",\n              description: \"Metric name to set threshold for\"\n            },\n            threshold: {\n              type: \"number\",\n              description: \"Threshold value\"\n            },\n            operator: {\n              type: \"string\",\n              enum: [\"gt\", \"lt\", \"eq\", \"gte\", \"lte\"],\n              description: \"Comparison operator\",\n              default: \"gt\"\n            },\n            severity: {\n              type: \"string\",\n              enum: [\"low\", \"medium\", \"high\", \"critical\"],\n              description: \"Alert severity level\",\n              default: \"medium\"\n            }\n          },\n          required: [\"metric\", \"threshold\"]\n        }\n      }\n    ];\n\n    // Filter tools based on permissions\n    if (!authContext.permissions.includes('*') && !authContext.permissions.includes('admin:org')) {\n      // Regular users cannot set alert thresholds\n      return tools.filter(t => t.name !== 'set_alert_threshold');\n    }\n\n    return tools;\n  }\n\n  /**\n   * Execute monitoring tools\n   */\n  protected async callTool(name: string, args: any, authContext: MCPAuthContext): Promise<any> {\n    switch (name) {\n      case 'get_kpi_dashboard':\n        return await this.getKPIDashboard(args, authContext);\n      case 'get_real_time_metrics':\n        return await this.getRealTimeMetrics(args, authContext);\n      case 'analyze_performance_trends':\n        return await this.analyzePerformanceTrends(args, authContext);\n      case 'get_anomaly_detection':\n        return await this.getAnomalyDetection(args, authContext);\n      case 'generate_performance_report':\n        return await this.generatePerformanceReport(args, authContext);\n      case 'set_alert_threshold':\n        return await this.setAlertThreshold(args, authContext);\n      default:\n        throw new MCPValidationError(`Unknown tool: ${name}`);\n    }\n  }\n\n  /**\n   * Get KPI dashboard tool\n   */\n  private async getKPIDashboard(args: any, authContext: MCPAuthContext): Promise<any> {\n    const { timeRange = '1d', includeComparisons = true } = args;\n\n    try {\n      logger.info('MCP Monitoring: Getting KPI dashboard', { \n        timeRange, \n        includeComparisons,\n        userId: authContext.userId \n      });\n\n      // Generate mock KPI data\n      const kpiData = {\n        overview: {\n          totalUsers: 15420,\n          activeUsers: 8750,\n          totalCampaigns: 342,\n          activeCampaigns: 28,\n          totalRevenue: 156780.50,\n          monthlyRecurringRevenue: 42350.25\n        },\n        performance: {\n          campaignOpenRate: 24.5,\n          campaignClickRate: 3.2,\n          campaignConversionRate: 1.8,\n          customerAcquisitionCost: 45.30,\n          customerLifetimeValue: 1250.75,\n          churnRate: 3.5\n        },\n        system: {\n          uptime: 99.97,\n          responseTime: 245,\n          errorRate: 0.03,\n          apiRequestsPerMinute: 1250,\n          activeConnections: 890\n        },\n        ai: {\n          modelAccuracy: 94.2,\n          predictionConfidence: 87.5,\n          recommendationsGenerated: 2340,\n          recommendationsAccepted: 1870\n        },\n        comparisons: includeComparisons ? {\n          userGrowth: '+12.5%',\n          revenueGrowth: '+8.3%',\n          engagementChange: '+5.7%',\n          systemPerformance: '+2.1%'\n        } : undefined,\n        timeRange,\n        lastUpdated: new Date().toISOString()\n      };\n\n      return {\n        content: [{\n          type: \"text\",\n          text: JSON.stringify({\n            success: true,\n            data: kpiData,\n            insights: [\n              \"User growth is accelerating (+12.5% this period)\",\n              \"Campaign performance is above industry average\",\n              \"System uptime exceeds SLA requirements (99.9%)\",\n              \"AI recommendations showing strong acceptance rate (80%)\"\n            ],\n            recommendations: [\n              \"Consider scaling infrastructure to support user growth\",\n              \"Optimize low-performing campaigns to improve overall metrics\",\n              \"Invest in AI model improvements for higher accuracy\"\n            ],\n            meta: {\n              timestamp: new Date().toISOString(),\n              timeRange,\n              fallbackUsed: true\n            }\n          })\n        }]\n      };\n\n    } catch (error) {\n      logger.error('MCP Monitoring: KPI dashboard failed', error);\n      \n      return {\n        content: [{\n          type: \"text\",\n          text: JSON.stringify({\n            success: false,\n            error: \"Failed to get KPI dashboard\",\n            details: error instanceof Error ? error.message : 'Unknown error'\n          })\n        }],\n        isError: true\n      };\n    }\n  }\n\n  /**\n   * Get real-time metrics tool\n   */\n  private async getRealTimeMetrics(args: any, authContext: MCPAuthContext): Promise<any> {\n    const { metrics = ['active_users', 'api_requests'], refreshInterval = 300 } = args;\n\n    try {\n      logger.info('MCP Monitoring: Getting real-time metrics', { \n        metrics, \n        refreshInterval,\n        userId: authContext.userId \n      });\n\n      // Generate real-time metric data\n      const realTimeData = {\n        timestamp: new Date().toISOString(),\n        refreshInterval,\n        metrics: metrics.reduce((acc: any, metric: string) => {\n          acc[metric] = this.generateMetricValue(metric);\n          return acc;\n        }, {}),\n        trends: metrics.reduce((acc: any, metric: string) => {\n          acc[metric] = {\n            current: this.generateMetricValue(metric),\n            previous: this.generateMetricValue(metric, 0.9),\n            change: Math.round((Math.random() - 0.5) * 20 * 100) / 100\n          };\n          return acc;\n        }, {}),\n        alerts: [\n          {\n            metric: 'error_rate',\n            severity: 'medium',\n            message: 'Error rate slightly elevated',\n            timestamp: new Date(Date.now() - 5 * 60 * 1000).toISOString()\n          }\n        ]\n      };\n\n      return {\n        content: [{\n          type: \"text\",\n          text: JSON.stringify({\n            success: true,\n            data: realTimeData,\n            meta: {\n              timestamp: new Date().toISOString(),\n              nextUpdate: new Date(Date.now() + refreshInterval * 1000).toISOString(),\n              fallbackUsed: true\n            }\n          })\n        }]\n      };\n\n    } catch (error) {\n      return {\n        content: [{\n          type: \"text\",\n          text: JSON.stringify({\n            success: false,\n            error: \"Failed to get real-time metrics\",\n            details: error instanceof Error ? error.message : 'Unknown error'\n          })\n        }],\n        isError: true\n      };\n    }\n  }\n\n  /**\n   * Analyze performance trends tool\n   */\n  private async analyzePerformanceTrends(args: any, authContext: MCPAuthContext): Promise<any> {\n    const { metric, period = 'daily', timeRange = '30d' } = args;\n\n    try {\n      // Generate trend analysis data\n      const trendData = {\n        metric,\n        period,\n        timeRange,\n        dataPoints: this.generateTrendData(metric, period, timeRange),\n        analysis: {\n          trend: 'upward',\n          volatility: 'low',\n          seasonality: 'detected',\n          anomalies: 2,\n          confidence: 85.6\n        },\n        insights: [\n          `${metric} shows consistent upward trend over ${timeRange}`,\n          `Low volatility indicates stable performance`,\n          `Seasonal patterns detected on weekends`,\n          `2 minor anomalies detected and resolved`\n        ],\n        predictions: {\n          nextPeriod: this.generateMetricValue(metric, 1.1),\n          confidence: 78.3,\n          factors: ['historical trend', 'seasonal adjustment', 'external factors']\n        }\n      };\n\n      return {\n        content: [{\n          type: \"text\",\n          text: JSON.stringify({\n            success: true,\n            data: trendData,\n            meta: {\n              timestamp: new Date().toISOString(),\n              analysisType: 'trend_analysis',\n              fallbackUsed: true\n            }\n          })\n        }]\n      };\n\n    } catch (error) {\n      return {\n        content: [{\n          type: \"text\",\n          text: JSON.stringify({\n            success: false,\n            error: \"Failed to analyze performance trends\",\n            details: error instanceof Error ? error.message : 'Unknown error'\n          })\n        }],\n        isError: true\n      };\n    }\n  }\n\n  /**\n   * Generate performance report tool\n   */\n  private async generatePerformanceReport(args: any, authContext: MCPAuthContext): Promise<any> {\n    const { reportType = 'executive', timeRange = '30d', includeRecommendations = true } = args;\n\n    try {\n      const report = {\n        reportType,\n        timeRange,\n        generatedAt: new Date().toISOString(),\n        summary: {\n          overallPerformance: 'excellent',\n          keyMetrics: {\n            userGrowth: '+15.2%',\n            revenueGrowth: '+22.8%',\n            systemUptime: '99.98%',\n            customerSatisfaction: '4.7/5'\n          },\n          highlights: [\n            'Record-breaking user acquisition this period',\n            'Revenue exceeded targets by 18%',\n            'Zero critical system outages',\n            'AI model accuracy improved to 94.2%'\n          ]\n        },\n        detailedAnalysis: {\n          userMetrics: {\n            totalUsers: 15420,\n            newUsers: 2340,\n            activeUsers: 8750,\n            retentionRate: 87.5\n          },\n          businessMetrics: {\n            revenue: 156780.50,\n            mrr: 42350.25,\n            arpu: 89.50,\n            cac: 45.30,\n            ltv: 1250.75\n          },\n          systemMetrics: {\n            uptime: 99.98,\n            avgResponseTime: 245,\n            errorRate: 0.02,\n            throughput: 75000\n          }\n        },\n        recommendations: includeRecommendations ? [\n          'Scale infrastructure to support 25% user growth next quarter',\n          'Implement advanced caching to improve response times',\n          'Expand AI model training data for better accuracy',\n          'Consider launching premium tier based on usage patterns'\n        ] : undefined,\n        nextSteps: [\n          'Monitor user growth trajectory closely',\n          'Prepare for Q4 marketing campaign scaling',\n          'Evaluate new AI model deployment',\n          'Review pricing strategy effectiveness'\n        ]\n      };\n\n      return {\n        content: [{\n          type: \"text\",\n          text: JSON.stringify({\n            success: true,\n            data: report,\n            meta: {\n              timestamp: new Date().toISOString(),\n              reportId: `report_${Date.now()}`,\n              fallbackUsed: true\n            }\n          })\n        }]\n      };\n\n    } catch (error) {\n      return {\n        content: [{\n          type: \"text\",\n          text: JSON.stringify({\n            success: false,\n            error: \"Failed to generate performance report\",\n            details: error instanceof Error ? error.message : 'Unknown error'\n          })\n        }],\n        isError: true\n      };\n    }\n  }\n\n  /**\n   * Helper methods for generating mock data\n   */\n  private generateMetricValue(metric: string, multiplier = 1): number {\n    const baseValues: Record<string, number> = {\n      active_users: 1250,\n      campaign_sends: 450,\n      api_requests: 15000,\n      revenue: 5678.90,\n      errors: 12\n    };\n\n    const base = baseValues[metric] || 100;\n    return Math.round(base * multiplier * (0.8 + Math.random() * 0.4));\n  }\n\n  private generateTrendData(metric: string, period: string, timeRange: string): any[] {\n    const points = timeRange === '7d' ? 7 : timeRange === '30d' ? 30 : 90;\n    const baseValue = this.generateMetricValue(metric);\n    \n    return Array.from({ length: points }, (_, i) => ({\n      timestamp: new Date(Date.now() - (points - i) * 24 * 60 * 60 * 1000).toISOString(),\n      value: Math.round(baseValue * (0.8 + Math.random() * 0.4)),\n      change: Math.round((Math.random() - 0.5) * 10 * 100) / 100\n    }));\n  }\n\n  /**\n   * Resource implementations (simplified)\n   */\n  private async getBusinessMetrics(query: MonitoringQuery, authContext: MCPAuthContext): Promise<any> {\n    try {\n      const startTime = Date.now();\n      \n      // Calculate time range\n      const timeRange = this.parseTimeRange(query.timeRange);\n      const startDate = new Date(Date.now() - timeRange);\n      const endDate = new Date();\n\n      // Get user count and growth\n      const totalUsers = await prisma.user.count({\n        where: {\n          organizationId: authContext.organizationId\n        }\n      });\n\n      const newUsers = await prisma.user.count({\n        where: {\n          organizationId: authContext.organizationId,\n          createdAt: { gte: startDate }\n        }\n      });\n\n      // Get contact metrics\n      const totalContacts = await prisma.contact.count({\n        where: {\n          organizationId: authContext.organizationId\n        }\n      });\n\n      const newContacts = await prisma.contact.count({\n        where: {\n          organizationId: authContext.organizationId,\n          createdAt: { gte: startDate }\n        }\n      });\n\n      // Get campaign metrics\n      const [emailCampaigns, smsCampaigns, whatsappCampaigns] = await Promise.all([\n        prisma.emailCampaign.count({\n          where: {\n            organizationId: authContext.organizationId,\n            createdAt: { gte: startDate }\n          }\n        }),\n        prisma.sMSCampaign.count({\n          where: {\n            organizationId: authContext.organizationId,\n            createdAt: { gte: startDate }\n          }\n        }),\n        prisma.whatsAppCampaign.count({\n          where: {\n            organizationId: authContext.organizationId,\n            createdAt: { gte: startDate }\n          }\n        })\n      ]);\n\n      // Get messaging usage statistics\n      const messagingStats = await prisma.messagingUsage.aggregate({\n        where: {\n          organizationId: authContext.organizationId,\n          createdAt: { gte: startDate }\n        },\n        _count: { id: true },\n        _sum: { cost: true }\n      });\n\n      // Get revenue metrics from credit transactions\n      const revenueStats = await prisma.creditTransaction.aggregate({\n        where: {\n          organizationId: authContext.organizationId,\n          type: 'PURCHASE',\n          createdAt: { gte: startDate }\n        },\n        _sum: { amount: true },\n        _count: { id: true }\n      });\n\n      // Get workflow execution stats\n      const workflowStats = await prisma.workflowExecution.aggregate({\n        where: {\n          workflow: {\n            organizationId: authContext.organizationId\n          },\n          createdAt: { gte: startDate }\n        },\n        _count: { id: true }\n      });\n\n      // Get active visitor sessions from MCP data\n      const visitorStats = await prisma.mCPVisitorSessions.aggregate({\n        where: {\n          organizationId: authContext.organizationId,\n          sessionStart: { gte: startDate }\n        },\n        _count: { id: true },\n        _avg: { intentScore: true },\n        _sum: { conversionValue: true }\n      });\n\n      // Calculate engagement rate\n      const engagementRate = totalContacts > 0 \n        ? ((messagingStats._count.id || 0) / totalContacts) * 100 \n        : 0;\n\n      // Calculate conversion rate\n      const conversionRate = visitorStats._count.id > 0 \n        ? ((visitorStats._sum.conversionValue || 0) > 0 ? \n            (visitorStats._count.id / visitorStats._count.id) * 100 : 0)\n        : 0;\n\n      const duration = Date.now() - startTime;\n\n      // Log resource access\n      await this.logMCPResourceAccess(\n        authContext,\n        'monitoring://metrics',\n        'READ',\n        'success',\n        { duration, dataSize: 1 }\n      );\n\n      return {\n        uri: \"monitoring://metrics\",\n        mimeType: \"application/json\",\n        text: JSON.stringify({\n          organizationId: authContext.organizationId,\n          timeRange: query.timeRange,\n          period: {\n            start: startDate.toISOString(),\n            end: endDate.toISOString(),\n            duration: `${Math.round(timeRange / (1000 * 60 * 60 * 24))} days`\n          },\n          users: {\n            total: totalUsers,\n            new: newUsers,\n            growth: totalUsers > 0 ? (newUsers / totalUsers) * 100 : 0\n          },\n          contacts: {\n            total: totalContacts,\n            new: newContacts,\n            growth: totalContacts > 0 ? (newContacts / totalContacts) * 100 : 0\n          },\n          campaigns: {\n            total: emailCampaigns + smsCampaigns + whatsappCampaigns,\n            email: emailCampaigns,\n            sms: smsCampaigns,\n            whatsapp: whatsappCampaigns\n          },\n          messaging: {\n            totalMessages: messagingStats._count.id || 0,\n            totalCost: messagingStats._sum.cost || 0,\n            averageCost: (messagingStats._count.id || 0) > 0 \n              ? (messagingStats._sum.cost || 0) / messagingStats._count.id \n              : 0\n          },\n          revenue: {\n            total: revenueStats._sum.amount || 0,\n            transactions: revenueStats._count.id || 0,\n            averageTransaction: (revenueStats._count.id || 0) > 0 \n              ? (revenueStats._sum.amount || 0) / revenueStats._count.id \n              : 0\n          },\n          automation: {\n            workflowExecutions: workflowStats._count.id || 0\n          },\n          analytics: {\n            visitorSessions: visitorStats._count.id || 0,\n            averageIntentScore: Math.round((visitorStats._avg.intentScore || 0) * 100) / 100,\n            totalConversionValue: visitorStats._sum.conversionValue || 0,\n            engagementRate: Math.round(engagementRate * 100) / 100,\n            conversionRate: Math.round(conversionRate * 100) / 100\n          },\n          meta: {\n            timestamp: new Date().toISOString(),\n            duration,\n            source: 'DATABASE'\n          }\n        })\n      };\n    } catch (error) {\n      await this.logMCPResourceAccess(\n        authContext,\n        'monitoring://metrics',\n        'READ',\n        'failure',\n        { errorMessage: error instanceof Error ? error.message : 'Unknown error' }\n      );\n\n      return {\n        uri: \"monitoring://metrics\",\n        mimeType: \"application/json\",\n        text: JSON.stringify({\n          error: \"Failed to retrieve business metrics\",\n          details: error instanceof Error ? error.message : 'Unknown error',\n          timeRange: query.timeRange\n        })\n      };\n    }\n  }\n\n  private async getSystemHealth(query: MonitoringQuery, authContext: MCPAuthContext): Promise<any> {\n    try {\n      const startTime = Date.now();\n      const timeRange = this.parseTimeRange(query.timeRange);\n      const startDate = new Date(Date.now() - timeRange);\n\n      // Get API response times from MCP monitoring metrics\n      const systemMetrics = await prisma.mCPMonitoringMetrics.findMany({\n        where: {\n          organizationId: authContext.organizationId,\n          timestamp: { gte: startDate }\n        },\n        orderBy: { timestamp: 'desc' },\n        take: 100\n      });\n\n      // Calculate system health indicators\n      const errorRates = systemMetrics.map(m => (m.metrics as any).errorRate || 0);\n      const responseTimes = systemMetrics.map(m => (m.metrics as any).responseTime || 0);\n      const cpuUsage = systemMetrics.map(m => (m.metrics as any).cpuUsage || 0);\n      const memoryUsage = systemMetrics.map(m => (m.metrics as any).memoryUsage || 0);\n\n      const avgErrorRate = errorRates.length > 0 ? errorRates.reduce((a, b) => a + b, 0) / errorRates.length : 0;\n      const avgResponseTime = responseTimes.length > 0 ? responseTimes.reduce((a, b) => a + b, 0) / responseTimes.length : 0;\n      const avgCpuUsage = cpuUsage.length > 0 ? cpuUsage.reduce((a, b) => a + b, 0) / cpuUsage.length : 0;\n      const avgMemoryUsage = memoryUsage.length > 0 ? memoryUsage.reduce((a, b) => a + b, 0) / memoryUsage.length : 0;\n\n      // Check database health by measuring query performance\n      const dbStart = Date.now();\n      await prisma.user.count({ where: { organizationId: authContext.organizationId } });\n      const dbResponseTime = Date.now() - dbStart;\n\n      // Determine overall system health\n      let healthStatus = 'healthy';\n      const healthScore = this.calculateHealthScore(avgErrorRate, avgResponseTime, avgCpuUsage, avgMemoryUsage);\n\n      if (healthScore < 70) {\n        healthStatus = 'critical';\n      } else if (healthScore < 85) {\n        healthStatus = 'warning';\n      }\n\n      // Get recent error counts\n      const recentErrors = await prisma.notification.count({\n        where: {\n          organizationId: authContext.organizationId,\n          type: 'ERROR',\n          createdAt: { gte: startDate }\n        }\n      });\n\n      const duration = Date.now() - startTime;\n\n      await this.logMCPResourceAccess(\n        authContext,\n        'monitoring://system',\n        'READ',\n        'success',\n        { duration, dataSize: systemMetrics.length }\n      );\n\n      return {\n        uri: \"monitoring://system\",\n        mimeType: \"application/json\",\n        text: JSON.stringify({\n          organizationId: authContext.organizationId,\n          timeRange: query.timeRange,\n          status: healthStatus,\n          healthScore: Math.round(healthScore * 100) / 100,\n          metrics: {\n            database: {\n              status: dbResponseTime < 1000 ? 'healthy' : dbResponseTime < 3000 ? 'warning' : 'critical',\n              responseTime: dbResponseTime,\n              connectionsActive: 'available' // Would need actual connection pool data\n            },\n            api: {\n              averageResponseTime: Math.round(avgResponseTime * 100) / 100,\n              errorRate: Math.round(avgErrorRate * 10000) / 100, // Convert to percentage\n              requestsPerMinute: systemMetrics.length > 0 ? \n                Math.round((systemMetrics.length / (timeRange / (1000 * 60))) * 100) / 100 : 0\n            },\n            system: {\n              cpuUsage: Math.round(avgCpuUsage * 100) / 100,\n              memoryUsage: Math.round(avgMemoryUsage * 100) / 100,\n              diskSpace: 85 // Would need actual disk monitoring\n            },\n            errors: {\n              total: recentErrors,\n              rate: systemMetrics.length > 0 ? (recentErrors / systemMetrics.length) * 100 : 0\n            }\n          },\n          alerts: {\n            active: recentErrors,\n            severity: recentErrors > 10 ? 'high' : recentErrors > 5 ? 'medium' : 'low'\n          },\n          uptime: {\n            percentage: Math.max(95, 100 - (avgErrorRate * 100)),\n            lastDowntime: null // Would need actual uptime tracking\n          },\n          meta: {\n            timestamp: new Date().toISOString(),\n            duration,\n            dataPoints: systemMetrics.length,\n            source: 'MCP_MONITORING_METRICS'\n          }\n        })\n      };\n    } catch (error) {\n      await this.logMCPResourceAccess(\n        authContext,\n        'monitoring://system',\n        'READ',\n        'failure',\n        { errorMessage: error instanceof Error ? error.message : 'Unknown error' }\n      );\n\n      return {\n        uri: \"monitoring://system\",\n        mimeType: \"application/json\",\n        text: JSON.stringify({\n          status: 'error',\n          error: \"Failed to retrieve system health metrics\",\n          details: error instanceof Error ? error.message : 'Unknown error'\n        })\n      };\n    }\n  }\n\n  private async getCampaignMetrics(query: MonitoringQuery, authContext: MCPAuthContext): Promise<any> {\n    return {\n      uri: \"monitoring://campaigns\",\n      mimeType: \"application/json\",\n      text: JSON.stringify({\n        message: \"Campaign metrics resource - implementation ready\",\n        fallbackUsed: true\n      })\n    };\n  }\n\n  private async getUserMetrics(query: MonitoringQuery, authContext: MCPAuthContext): Promise<any> {\n    return {\n      uri: \"monitoring://users\",\n      mimeType: \"application/json\",\n      text: JSON.stringify({\n        message: \"User metrics resource - implementation ready\",\n        fallbackUsed: true\n      })\n    };\n  }\n\n  private async getRevenueMetrics(query: MonitoringQuery, authContext: MCPAuthContext): Promise<any> {\n    return {\n      uri: \"monitoring://revenue\",\n      mimeType: \"application/json\",\n      text: JSON.stringify({\n        message: \"Revenue metrics resource - implementation ready\",\n        fallbackUsed: true\n      })\n    };\n  }\n\n  private async getAIPerformanceMetrics(query: MonitoringQuery, authContext: MCPAuthContext): Promise<any> {\n    return {\n      uri: \"monitoring://ai-performance\",\n      mimeType: \"application/json\",\n      text: JSON.stringify({\n        message: \"AI performance metrics resource - implementation ready\",\n        fallbackUsed: true\n      })\n    };\n  }\n\n  private async getSystemAlerts(query: MonitoringQuery, authContext: MCPAuthContext): Promise<any> {\n    return {\n      uri: \"monitoring://alerts\",\n      mimeType: \"application/json\",\n      text: JSON.stringify({\n        message: \"System alerts resource - implementation ready\",\n        fallbackUsed: true\n      })\n    };\n  }\n\n  // Placeholder tool implementations\n  private async getAnomalyDetection(args: any, authContext: MCPAuthContext): Promise<any> {\n    return {\n      content: [{\n        type: \"text\",\n        text: JSON.stringify({\n          success: true,\n          data: { message: \"Anomaly detection - implementation ready\" },\n          meta: { fallbackUsed: true }\n        })\n      }]\n    };\n  }\n\n  private async setAlertThreshold(args: any, authContext: MCPAuthContext): Promise<any> {\n    return {\n      content: [{\n        type: \"text\",\n        text: JSON.stringify({\n          success: true,\n          data: { message: \"Alert threshold setting - implementation ready\" },\n          meta: { fallbackUsed: true }\n        })\n      }]\n    };\n  }\n\n  /**\n   * Helper methods for monitoring calculations\n   */\n  private parseTimeRange(timeRange: string): number {\n    const rangeMap: Record<string, number> = {\n      '1h': 60 * 60 * 1000,\n      '1d': 24 * 60 * 60 * 1000,\n      '7d': 7 * 24 * 60 * 60 * 1000,\n      '30d': 30 * 24 * 60 * 60 * 1000,\n      '90d': 90 * 24 * 60 * 60 * 1000\n    };\n    return rangeMap[timeRange] || rangeMap['1d'];\n  }\n\n  private calculateHealthScore(errorRate: number, responseTime: number, cpuUsage: number, memoryUsage: number): number {\n    // Weight factors for different metrics\n    const weights = {\n      errorRate: 0.4,\n      responseTime: 0.3,\n      cpuUsage: 0.15,\n      memoryUsage: 0.15\n    };\n\n    // Calculate individual scores (0-100, higher is better)\n    const errorScore = Math.max(0, 100 - (errorRate * 10000)); // Convert error rate to percentage impact\n    const responseScore = Math.max(0, 100 - Math.min(100, responseTime / 10)); // Response time impact (1000ms = 100 point penalty)\n    const cpuScore = Math.max(0, 100 - cpuUsage);\n    const memoryScore = Math.max(0, 100 - memoryUsage);\n\n    // Calculate weighted average\n    const totalScore = (\n      errorScore * weights.errorRate +\n      responseScore * weights.responseTime +\n      cpuScore * weights.cpuUsage +\n      memoryScore * weights.memoryUsage\n    );\n\n    return Math.max(0, Math.min(100, totalScore));\n  }\n}"],"names":["MonitoringMCPServer","HTTPBaseMCPServer","constructor","config","defaultMCPConfig","servers","monitoring","listResources","authContext","resources","uri","name","description","mimeType","permissions","includes","filter","r","readResource","url","URL","path","pathname","searchParams","queryParams","Object","fromEntries","entries","validatedQuery","MonitoringQuerySchema","parse","organizationId","timeRange","aggregation","getBusinessMetrics","getSystemHealth","getCampaignMetrics","getUserMetrics","getRevenueMetrics","getAIPerformanceMetrics","getSystemAlerts","MCPValidationError","listTools","tools","inputSchema","type","properties","enum","default","includeComparisons","metrics","items","refreshInterval","minimum","maximum","metric","period","required","sensitivity","reportType","includeRecommendations","threshold","operator","severity","t","callTool","args","getKPIDashboard","getRealTimeMetrics","analyzePerformanceTrends","getAnomalyDetection","generatePerformanceReport","setAlertThreshold","logger","info","userId","kpiData","overview","totalUsers","activeUsers","totalCampaigns","activeCampaigns","totalRevenue","monthlyRecurringRevenue","performance","campaignOpenRate","campaignClickRate","campaignConversionRate","customerAcquisitionCost","customerLifetimeValue","churnRate","system","uptime","responseTime","errorRate","apiRequestsPerMinute","activeConnections","ai","modelAccuracy","predictionConfidence","recommendationsGenerated","recommendationsAccepted","comparisons","userGrowth","revenueGrowth","engagementChange","systemPerformance","undefined","lastUpdated","Date","toISOString","content","text","JSON","stringify","success","data","insights","recommendations","meta","timestamp","fallbackUsed","error","details","Error","message","isError","realTimeData","reduce","acc","generateMetricValue","trends","current","previous","change","Math","round","random","alerts","now","nextUpdate","trendData","dataPoints","generateTrendData","analysis","trend","volatility","seasonality","anomalies","confidence","predictions","nextPeriod","factors","analysisType","report","generatedAt","summary","overallPerformance","keyMetrics","systemUptime","customerSatisfaction","highlights","detailedAnalysis","userMetrics","newUsers","retentionRate","businessMetrics","revenue","mrr","arpu","cac","ltv","systemMetrics","avgResponseTime","throughput","nextSteps","reportId","multiplier","baseValues","active_users","campaign_sends","api_requests","errors","base","points","baseValue","Array","from","length","_","i","value","query","startTime","parseTimeRange","startDate","endDate","prisma","user","count","where","createdAt","gte","totalContacts","contact","newContacts","emailCampaigns","smsCampaigns","whatsappCampaigns","Promise","all","emailCampaign","sMSCampaign","whatsAppCampaign","messagingStats","messagingUsage","aggregate","_count","id","_sum","cost","revenueStats","creditTransaction","amount","workflowStats","workflowExecution","workflow","visitorStats","mCPVisitorSessions","sessionStart","_avg","intentScore","conversionValue","engagementRate","conversionRate","duration","logMCPResourceAccess","dataSize","start","end","users","total","new","growth","contacts","campaigns","email","sms","whatsapp","messaging","totalMessages","totalCost","averageCost","transactions","averageTransaction","automation","workflowExecutions","analytics","visitorSessions","averageIntentScore","totalConversionValue","source","errorMessage","mCPMonitoringMetrics","findMany","orderBy","take","errorRates","map","m","responseTimes","cpuUsage","memoryUsage","avgErrorRate","a","b","avgCpuUsage","avgMemoryUsage","dbStart","dbResponseTime","healthStatus","healthScore","calculateHealthScore","recentErrors","notification","status","database","connectionsActive","api","averageResponseTime","requestsPerMinute","diskSpace","rate","active","percentage","max","lastDowntime","rangeMap","weights","errorScore","responseScore","min","cpuScore","memoryScore","totalScore"],"mappings":"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"}