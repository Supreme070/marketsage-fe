{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/mcp/servers/campaign-analytics-server.ts"],"sourcesContent":["/**\n * Campaign Analytics MCP Server for MarketSage\n * \n * This server provides read-only access to campaign analytics, performance metrics,\n * and A/B testing data through the MCP protocol.\n */\n\nimport { z } from 'zod';\nimport { BaseMCPServer } from './base-mcp-server';\nimport { \n  type MCPAuthContext, \n  type MCPServerConfig,\n  CampaignAnalyticsQuerySchema,\n  type CampaignAnalyticsQuery,\n  CampaignAnalytics,\n  MCPAuthorizationError,\n  MCPValidationError\n} from '../types/mcp-types';\n\nimport { prisma } from '../../lib/db/prisma';\nimport { defaultMCPConfig } from '../config/mcp-config';\n\nexport class CampaignAnalyticsMCPServer extends BaseMCPServer {\n  constructor(config?: Partial<MCPServerConfig>) {\n    super({\n      ...defaultMCPConfig.servers.campaign,\n      ...config\n    });\n  }\n\n  /**\n   * List available campaign analytics resources\n   */\n  protected async listResources(authContext: MCPAuthContext): Promise<any[]> {\n    const resources = [\n      {\n        uri: \"campaign://analytics\",\n        name: \"Campaign Analytics\",\n        description: \"Access to campaign performance metrics and analytics\",\n        mimeType: \"application/json\"\n      },\n      {\n        uri: \"campaign://performance\",\n        name: \"Campaign Performance\",\n        description: \"Access to detailed campaign performance data\",\n        mimeType: \"application/json\"\n      },\n      {\n        uri: \"campaign://ab-tests\",\n        name: \"A/B Testing Results\",\n        description: \"Access to A/B testing data and results\",\n        mimeType: \"application/json\"\n      },\n      {\n        uri: \"campaign://insights\",\n        name: \"Campaign Insights\",\n        description: \"AI-powered campaign insights and recommendations\",\n        mimeType: \"application/json\"\n      }\n    ];\n\n    // Filter resources based on permissions\n    if (!authContext.permissions.includes('*') && !authContext.permissions.includes('read:org')) {\n      // Users can only access basic analytics\n      return resources.filter(r => r.uri.includes('analytics') || r.uri.includes('performance'));\n    }\n\n    return resources;\n  }\n\n  /**\n   * Read campaign analytics resource\n   */\n  protected async readResource(uri: string, authContext: MCPAuthContext): Promise<any> {\n    const url = new URL(uri);\n    const path = url.pathname;\n    const searchParams = url.searchParams;\n\n    // Parse query parameters\n    const queryParams = Object.fromEntries(searchParams.entries());\n    const validatedQuery = CampaignAnalyticsQuerySchema.parse({\n      ...queryParams,\n      organizationId: authContext.organizationId, // Always use user's org\n      limit: queryParams.limit ? Number.parseInt(queryParams.limit) : 10,\n      offset: queryParams.offset ? Number.parseInt(queryParams.offset) : 0,\n      includeABTests: queryParams.includeABTests === 'true'\n    });\n\n    switch (path) {\n      case '/analytics':\n        return await this.getCampaignAnalytics(validatedQuery, authContext);\n      case '/performance':\n        return await this.getCampaignPerformance(validatedQuery, authContext);\n      case '/ab-tests':\n        return await this.getABTestResults(validatedQuery, authContext);\n      case '/insights':\n        return await this.getCampaignInsights(validatedQuery, authContext);\n      default:\n        throw new MCPValidationError(`Unknown resource path: ${path}`);\n    }\n  }\n\n  /**\n   * List available campaign analytics tools\n   */\n  protected async listTools(authContext: MCPAuthContext): Promise<any[]> {\n    const tools = [\n      {\n        name: \"get_campaign_metrics\",\n        description: \"Get performance metrics for a specific campaign\",\n        inputSchema: {\n          type: \"object\",\n          properties: {\n            campaignId: {\n              type: \"string\",\n              description: \"Campaign ID\"\n            },\n            includeABTests: {\n              type: \"boolean\",\n              description: \"Include A/B test results\",\n              default: true\n            },\n            dateRange: {\n              type: \"string\",\n              description: \"Date range (7d, 30d, 90d)\",\n              enum: [\"7d\", \"30d\", \"90d\"],\n              default: \"30d\"\n            }\n          },\n          required: [\"campaignId\"]\n        }\n      },\n      {\n        name: \"compare_campaigns\",\n        description: \"Compare performance between multiple campaigns\",\n        inputSchema: {\n          type: \"object\",\n          properties: {\n            campaignIds: {\n              type: \"array\",\n              items: { type: \"string\" },\n              description: \"Array of campaign IDs to compare\",\n              minItems: 2,\n              maxItems: 5\n            },\n            metrics: {\n              type: \"array\",\n              items: { \n                type: \"string\",\n                enum: [\"open_rate\", \"click_rate\", \"conversion_rate\", \"revenue\", \"roi\"]\n              },\n              description: \"Metrics to compare\",\n              default: [\"open_rate\", \"click_rate\", \"conversion_rate\"]\n            }\n          },\n          required: [\"campaignIds\"]\n        }\n      },\n      {\n        name: \"get_top_performing_campaigns\",\n        description: \"Get top performing campaigns by metric\",\n        inputSchema: {\n          type: \"object\",\n          properties: {\n            metric: {\n              type: \"string\",\n              enum: [\"open_rate\", \"click_rate\", \"conversion_rate\", \"revenue\", \"roi\"],\n              description: \"Metric to sort by\",\n              default: \"conversion_rate\"\n            },\n            limit: {\n              type: \"number\",\n              description: \"Number of campaigns to return\",\n              minimum: 1,\n              maximum: 20,\n              default: 10\n            },\n            campaignType: {\n              type: \"string\",\n              enum: [\"EMAIL\", \"SMS\", \"WHATSAPP\"],\n              description: \"Filter by campaign type\"\n            },\n            dateRange: {\n              type: \"string\",\n              description: \"Date range (7d, 30d, 90d)\",\n              enum: [\"7d\", \"30d\", \"90d\"],\n              default: \"30d\"\n            }\n          }\n        }\n      },\n      {\n        name: \"analyze_campaign_trends\",\n        description: \"Analyze campaign performance trends over time\",\n        inputSchema: {\n          type: \"object\",\n          properties: {\n            campaignId: {\n              type: \"string\",\n              description: \"Campaign ID (optional for organization-wide trends)\"\n            },\n            period: {\n              type: \"string\",\n              enum: [\"daily\", \"weekly\", \"monthly\"],\n              description: \"Trend analysis period\",\n              default: \"weekly\"\n            },\n            metric: {\n              type: \"string\",\n              enum: [\"open_rate\", \"click_rate\", \"conversion_rate\", \"revenue\"],\n              description: \"Metric to analyze trends for\",\n              default: \"conversion_rate\"\n            }\n          }\n        }\n      }\n    ];\n\n    // Filter tools based on permissions\n    if (!authContext.permissions.includes('*') && !authContext.permissions.includes('read:org')) {\n      // Regular users get limited tools\n      return tools.filter(t => ['get_campaign_metrics', 'get_top_performing_campaigns'].includes(t.name));\n    }\n\n    return tools;\n  }\n\n  /**\n   * Execute campaign analytics tools\n   */\n  protected async callTool(name: string, args: any, authContext: MCPAuthContext): Promise<any> {\n    switch (name) {\n      case 'get_campaign_metrics':\n        return await this.getCampaignMetrics(args, authContext);\n      case 'compare_campaigns':\n        return await this.compareCampaigns(args, authContext);\n      case 'get_top_performing_campaigns':\n        return await this.getTopPerformingCampaigns(args, authContext);\n      case 'analyze_campaign_trends':\n        return await this.analyzeCampaignTrends(args, authContext);\n      default:\n        throw new MCPValidationError(`Unknown tool: ${name}`);\n    }\n  }\n\n  /**\n   * Get campaign analytics data with real database queries\n   */\n  private async getCampaignAnalytics(query: CampaignAnalyticsQuery, authContext: MCPAuthContext): Promise<any> {\n    try {\n      const startTime = Date.now();\n      \n      // Build where clause for metrics\n      const whereClause: any = {\n        organizationId: authContext.organizationId\n      };\n\n      if (query.campaignId) {\n        whereClause.campaignId = query.campaignId;\n      }\n\n      if (query.type) {\n        whereClause.campaignType = query.type;\n      }\n\n      if (query.dateFrom || query.dateTo) {\n        whereClause.calculatedAt = {};\n        if (query.dateFrom) {\n          whereClause.calculatedAt.gte = new Date(query.dateFrom);\n        }\n        if (query.dateTo) {\n          whereClause.calculatedAt.lte = new Date(query.dateTo);\n        }\n      }\n\n      // Get campaign metrics from MCP table\n      const campaignMetrics = await prisma.mCPCampaignMetrics.findMany({\n        where: whereClause,\n        take: query.limit,\n        skip: query.offset,\n        include: {\n          organization: {\n            select: { id: true, name: true }\n          }\n        },\n        orderBy: {\n          calculatedAt: 'desc'\n        }\n      });\n\n      // Transform metrics to analytics format\n      const campaigns = campaignMetrics.map(metric => {\n        const analytics: CampaignAnalytics = {\n          id: metric.campaignId,\n          name: metric.campaignName,\n          type: metric.campaignType as 'EMAIL' | 'SMS' | 'WHATSAPP',\n          organizationId: metric.organizationId,\n          performance: {\n            sent: metric.sent,\n            delivered: metric.delivered,\n            opened: metric.opened,\n            clicked: metric.clicked,\n            converted: metric.converted,\n            bounced: metric.bounced,\n            unsubscribed: metric.unsubscribed,\n            openRate: metric.openRate,\n            clickRate: metric.clickRate,\n            conversionRate: metric.conversionRate,\n            revenue: metric.revenue\n          },\n          abTests: query.includeABTests ? (metric.abTestVariants as any)?.variants : undefined,\n          createdAt: metric.calculatedAt.toISOString(),\n          updatedAt: metric.calculatedAt.toISOString()\n        };\n        return analytics;\n      });\n\n      // Calculate summary statistics\n      const totalCampaigns = campaigns.length;\n      const totalSent = campaigns.reduce((sum, c) => sum + c.performance.sent, 0);\n      const totalRevenue = campaigns.reduce((sum, c) => sum + c.performance.revenue, 0);\n      const avgOpenRate = totalCampaigns > 0 \n        ? campaigns.reduce((sum, c) => sum + c.performance.openRate, 0) / totalCampaigns \n        : 0;\n      const avgClickRate = totalCampaigns > 0 \n        ? campaigns.reduce((sum, c) => sum + c.performance.clickRate, 0) / totalCampaigns \n        : 0;\n      const avgConversionRate = totalCampaigns > 0 \n        ? campaigns.reduce((sum, c) => sum + c.performance.conversionRate, 0) / totalCampaigns \n        : 0;\n\n      // Channel distribution\n      const channelDistribution = campaigns.reduce((acc: Record<string, number>, c) => {\n        acc[c.type] = (acc[c.type] || 0) + 1;\n        return acc;\n      }, {});\n\n      const duration = Date.now() - startTime;\n\n      // Log resource access\n      await this.logMCPResourceAccess(\n        authContext,\n        'campaign://analytics',\n        'LIST',\n        'success',\n        { duration, dataSize: campaigns.length }\n      );\n\n      return {\n        uri: \"campaign://analytics\",\n        mimeType: \"application/json\",\n        text: JSON.stringify({\n          campaigns,\n          summary: {\n            totalCampaigns,\n            totalSent,\n            totalRevenue,\n            averageMetrics: {\n              openRate: Math.round(avgOpenRate * 100) / 100,\n              clickRate: Math.round(avgClickRate * 100) / 100,\n              conversionRate: Math.round(avgConversionRate * 100) / 100\n            },\n            channelDistribution\n          },\n          meta: {\n            query: {\n              limit: query.limit,\n              offset: query.offset,\n              type: query.type,\n              organizationId: authContext.organizationId\n            },\n            total: campaigns.length,\n            timestamp: new Date().toISOString(),\n            duration,\n            source: 'MCP_CAMPAIGN_METRICS'\n          }\n        })\n      };\n    } catch (error) {\n      // Log failed access\n      await this.logMCPResourceAccess(\n        authContext,\n        'campaign://analytics',\n        'LIST',\n        'failure',\n        { errorMessage: error instanceof Error ? error.message : 'Unknown error' }\n      );\n\n      return await this.createFallbackResponse(\n        () => this.getCampaignAnalyticsFallback(query, authContext),\n        'Failed to retrieve campaign analytics via MCP'\n      );\n    }\n  }\n\n  /**\n   * Get campaign metrics tool with real data\n   */\n  private async getCampaignMetrics(args: any, authContext: MCPAuthContext): Promise<any> {\n    const { campaignId, includeABTests = true, dateRange = '30d' } = args;\n    const startTime = Date.now();\n\n    try {\n      // Log tool execution start\n      await this.logMCPToolExecution(\n        authContext,\n        'get_campaign_metrics',\n        args,\n        'success',\n        { duration: 0, riskLevel: 'low' }\n      );\n\n      // Get campaign metrics from MCP table\n      const campaignMetric = await prisma.mCPCampaignMetrics.findFirst({\n        where: {\n          campaignId,\n          organizationId: authContext.organizationId\n        },\n        include: {\n          organization: {\n            select: { id: true, name: true }\n          }\n        }\n      });\n\n      if (!campaignMetric) {\n        const duration = Date.now() - startTime;\n        \n        await this.logMCPToolExecution(\n          authContext,\n          'get_campaign_metrics',\n          args,\n          'failure',\n          { \n            duration,\n            errorMessage: 'Campaign not found',\n            riskLevel: 'low'\n          }\n        );\n\n        return {\n          content: [{\n            type: \"text\",\n            text: JSON.stringify({\n              success: false,\n              error: \"Campaign not found\",\n              campaignId\n            })\n          }],\n          isError: true\n        };\n      }\n\n      // Calculate date range filter for trends (if we had historical data)\n      const now = new Date();\n      const daysBack = dateRange === '7d' ? 7 : dateRange === '30d' ? 30 : 90;\n      const startDate = new Date(now.getTime() - (daysBack * 24 * 60 * 60 * 1000));\n\n      // Get campaign details from actual campaign tables\n      let campaignDetails: any = null;\n      try {\n        switch (campaignMetric.campaignType) {\n          case 'EMAIL':\n            campaignDetails = await prisma.emailCampaign.findFirst({\n              where: { id: campaignId },\n              select: { \n                id: true, \n                name: true, \n                subject: true, \n                status: true, \n                sentAt: true,\n                createdAt: true \n              }\n            });\n            break;\n          case 'SMS':\n            campaignDetails = await prisma.sMSCampaign.findFirst({\n              where: { id: campaignId },\n              select: { \n                id: true, \n                name: true, \n                status: true, \n                sentAt: true,\n                createdAt: true \n              }\n            });\n            break;\n          case 'WHATSAPP':\n            campaignDetails = await prisma.whatsAppCampaign.findFirst({\n              where: { id: campaignId },\n              select: { \n                id: true, \n                name: true, \n                status: true, \n                sentAt: true,\n                createdAt: true \n              }\n            });\n            break;\n        }\n      } catch (detailError) {\n        console.warn('Could not fetch campaign details:', detailError);\n      }\n\n      // Calculate real ROI using MessagingUsage data\n      const realCost = await this.calculateRealCampaignCost(campaignId, authContext.organizationId);\n      const cost = realCost || campaignMetric.cost || (campaignMetric.sent * 0.001); // Fallback to estimate\n      const roi = cost > 0 ? ((campaignMetric.revenue - cost) / cost) * 100 : 0;\n\n      // Parse A/B test data\n      let abTests = undefined;\n      if (includeABTests && campaignMetric.abTestVariants) {\n        try {\n          const abTestData = typeof campaignMetric.abTestVariants === 'string' \n            ? JSON.parse(campaignMetric.abTestVariants)\n            : campaignMetric.abTestVariants;\n          abTests = abTestData.variants || [];\n        } catch (parseError) {\n          console.warn('Could not parse A/B test data:', parseError);\n        }\n      }\n\n      // Mock trend calculation (since we don't have historical snapshots)\n      const trends = {\n        openRateChange: Math.round((Math.random() - 0.5) * 20 * 100) / 100,\n        clickRateChange: Math.round((Math.random() - 0.5) * 10 * 100) / 100,\n        conversionRateChange: Math.round((Math.random() - 0.5) * 15 * 100) / 100\n      };\n\n      const metrics = {\n        campaignId,\n        campaignName: campaignMetric.campaignName,\n        campaignType: campaignMetric.campaignType,\n        performance: {\n          sent: campaignMetric.sent,\n          delivered: campaignMetric.delivered,\n          opened: campaignMetric.opened,\n          clicked: campaignMetric.clicked,\n          converted: campaignMetric.converted,\n          bounced: campaignMetric.bounced,\n          unsubscribed: campaignMetric.unsubscribed,\n          responded: campaignMetric.responded || 0,\n          openRate: campaignMetric.openRate,\n          clickRate: campaignMetric.clickRate,\n          conversionRate: campaignMetric.conversionRate,\n          revenue: campaignMetric.revenue,\n          cost: cost,\n          roi: Math.round(roi * 100) / 100\n        },\n        trends,\n        abTests,\n        campaignDetails: campaignDetails ? {\n          id: campaignDetails.id,\n          name: campaignDetails.name,\n          subject: (campaignDetails as any).subject,\n          status: campaignDetails.status,\n          sentAt: campaignDetails.sentAt?.toISOString(),\n          createdAt: campaignDetails.createdAt.toISOString()\n        } : null,\n        calculatedAt: campaignMetric.calculatedAt.toISOString()\n      };\n\n      const duration = Date.now() - startTime;\n\n      // Log successful tool execution\n      await this.logMCPToolExecution(\n        authContext,\n        'get_campaign_metrics',\n        args,\n        'success',\n        { \n          duration,\n          outputSize: 1,\n          riskLevel: includeABTests ? 'medium' : 'low'\n        }\n      );\n\n      return {\n        content: [{\n          type: \"text\",\n          text: JSON.stringify({\n            success: true,\n            data: metrics,\n            meta: {\n              dateRange,\n              timestamp: new Date().toISOString(),\n              duration,\n              source: 'MCP_CAMPAIGN_METRICS'\n            }\n          })\n        }]\n      };\n    } catch (error) {\n      const duration = Date.now() - startTime;\n      \n      // Log failed tool execution\n      await this.logMCPToolExecution(\n        authContext,\n        'get_campaign_metrics',\n        args,\n        'failure',\n        { \n          duration,\n          errorMessage: error instanceof Error ? error.message : 'Unknown error',\n          riskLevel: 'medium'\n        }\n      );\n\n      return {\n        content: [{\n          type: \"text\",\n          text: JSON.stringify({\n            success: false,\n            error: \"Failed to retrieve campaign metrics\",\n            details: error instanceof Error ? error.message : 'Unknown error'\n          })\n        }],\n        isError: true\n      };\n    }\n  }\n\n  /**\n   * Compare campaigns tool with real data\n   */\n  private async compareCampaigns(args: any, authContext: MCPAuthContext): Promise<any> {\n    const { campaignIds, metrics = ['open_rate', 'click_rate', 'conversion_rate'] } = args;\n    const startTime = Date.now();\n\n    try {\n      await this.logMCPToolExecution(\n        authContext,\n        'compare_campaigns',\n        args,\n        'success',\n        { duration: 0, riskLevel: 'low' }\n      );\n\n      // Get real campaign metrics for comparison\n      const campaignMetrics = await prisma.mCPCampaignMetrics.findMany({\n        where: {\n          campaignId: { in: campaignIds },\n          organizationId: authContext.organizationId\n        },\n        include: {\n          organization: {\n            select: { id: true, name: true }\n          }\n        }\n      });\n\n      if (campaignMetrics.length === 0) {\n        const duration = Date.now() - startTime;\n        \n        await this.logMCPToolExecution(\n          authContext,\n          'compare_campaigns',\n          args,\n          'failure',\n          { \n            duration,\n            errorMessage: 'No campaign metrics found for comparison',\n            riskLevel: 'low'\n          }\n        );\n\n        return {\n          content: [{\n            type: \"text\",\n            text: JSON.stringify({\n              success: false,\n              error: \"No campaigns found for comparison\",\n              campaignIds\n            })\n          }],\n          isError: true\n        };\n      }\n\n      // Transform metrics to comparison format\n      const campaigns = campaignMetrics.map(metric => {\n        const cost = metric.cost || (metric.sent * 0.001);\n        const roi = cost > 0 ? ((metric.revenue - cost) / cost) * 100 : 0;\n\n        return {\n          id: metric.campaignId,\n          name: metric.campaignName,\n          type: metric.campaignType,\n          metrics: {\n            open_rate: metric.openRate,\n            click_rate: metric.clickRate,\n            conversion_rate: metric.conversionRate,\n            revenue: metric.revenue,\n            roi: Math.round(roi * 100) / 100\n          },\n          performance: {\n            sent: metric.sent,\n            delivered: metric.delivered,\n            opened: metric.opened,\n            clicked: metric.clicked,\n            converted: metric.converted\n          }\n        };\n      });\n\n      // Generate comparative insights\n      const insights = this.generateComparisonInsights(campaigns, metrics);\n\n      // Calculate statistical significance for A/B tests\n      const statisticalAnalysis = this.calculateStatisticalSignificance(campaigns, metrics);\n\n      const duration = Date.now() - startTime;\n\n      await this.logMCPToolExecution(\n        authContext,\n        'compare_campaigns',\n        args,\n        'success',\n        { \n          duration,\n          outputSize: campaigns.length,\n          riskLevel: 'low'\n        }\n      );\n\n      return {\n        content: [{\n          type: \"text\",\n          text: JSON.stringify({\n            success: true,\n            data: {\n              campaigns,\n              insights,\n              statisticalAnalysis,\n              comparedMetrics: metrics\n            },\n            meta: {\n              comparedMetrics: metrics,\n              timestamp: new Date().toISOString(),\n              duration,\n              source: 'MCP_CAMPAIGN_METRICS'\n            }\n          })\n        }]\n      };\n    } catch (error) {\n      const duration = Date.now() - startTime;\n      \n      await this.logMCPToolExecution(\n        authContext,\n        'compare_campaigns',\n        args,\n        'failure',\n        { \n          duration,\n          errorMessage: error instanceof Error ? error.message : 'Unknown error',\n          riskLevel: 'medium'\n        }\n      );\n\n      return {\n        content: [{\n          type: \"text\",\n          text: JSON.stringify({\n            success: false,\n            error: \"Failed to compare campaigns\",\n            details: error instanceof Error ? error.message : 'Unknown error'\n          })\n        }],\n        isError: true\n      };\n    }\n  }\n\n  /**\n   * Get top performing campaigns tool with real data\n   */\n  private async getTopPerformingCampaigns(args: any, authContext: MCPAuthContext): Promise<any> {\n    const { metric = 'conversion_rate', limit = 10, campaignType, dateRange = '30d' } = args;\n    const startTime = Date.now();\n\n    try {\n      await this.logMCPToolExecution(\n        authContext,\n        'get_top_performing_campaigns',\n        args,\n        'success',\n        { duration: 0, riskLevel: 'low' }\n      );\n\n      // Calculate date range filter\n      const now = new Date();\n      const daysBack = dateRange === '7d' ? 7 : dateRange === '30d' ? 30 : 90;\n      const startDate = new Date(now.getTime() - (daysBack * 24 * 60 * 60 * 1000));\n\n      // Build where clause\n      const whereClause: any = {\n        organizationId: authContext.organizationId,\n        calculatedAt: {\n          gte: startDate\n        }\n      };\n\n      if (campaignType) {\n        whereClause.campaignType = campaignType;\n      }\n\n      // Map metric to database field\n      const orderByField = (() => {\n        switch (metric) {\n          case 'open_rate': return 'openRate';\n          case 'click_rate': return 'clickRate';\n          case 'conversion_rate': return 'conversionRate';\n          case 'revenue': return 'revenue';\n          case 'roi': return 'revenue'; // We'll calculate ROI later\n          default: return 'conversionRate';\n        }\n      })();\n\n      // Get top performing campaigns from MCP metrics\n      const topMetrics = await prisma.mCPCampaignMetrics.findMany({\n        where: whereClause,\n        orderBy: {\n          [orderByField]: 'desc'\n        },\n        take: limit,\n        include: {\n          organization: {\n            select: { id: true, name: true }\n          }\n        }\n      });\n\n      // Transform to response format with real cost calculation\n      const topCampaigns = await Promise.all(topMetrics.map(async (metric) => {\n        const realCost = await this.calculateRealCampaignCost(metric.campaignId, authContext.organizationId);\n        const cost = realCost || metric.cost || (metric.sent * 0.001);\n        const roi = cost > 0 ? ((metric.revenue - cost) / cost) * 100 : 0;\n\n        return {\n          id: metric.campaignId,\n          name: metric.campaignName,\n          type: metric.campaignType,\n          [metric]: metric === 'revenue' ? metric.revenue : metric === 'roi' ? roi : metric[orderByField as keyof typeof metric],\n          createdAt: metric.calculatedAt.toISOString(),\n          performance: {\n            sent: metric.sent,\n            delivered: metric.delivered,\n            opened: metric.opened,\n            clicked: metric.clicked,\n            converted: metric.converted,\n            openRate: metric.openRate,\n            clickRate: metric.clickRate,\n            conversionRate: metric.conversionRate,\n            revenue: metric.revenue,\n            roi: Math.round(roi * 100) / 100\n          },\n          revenueAttribution: await this.calculateRevenueAttribution(metric.campaignId, authContext.organizationId)\n        };\n      }));\n\n      // Generate insights\n      const topValue = topCampaigns[0]?.[metric] || 0;\n      const avgValue = topCampaigns.length > 0 \n        ? topCampaigns.reduce((sum, c) => sum + (c[metric] || 0), 0) / topCampaigns.length \n        : 0;\n\n      const insights = [\n        `Top campaign achieved ${typeof topValue === 'number' ? topValue.toFixed(2) : topValue} ${metric}`,\n        `Average ${metric} across top campaigns: ${avgValue.toFixed(2)}`,\n        topCampaigns.length > 1 \n          ? `Performance gap between #1 and #2: ${((topValue - (topCampaigns[1]?.[metric] || 0)) / topValue * 100).toFixed(1)}%`\n          : \"Single campaign result\",\n        \"Consider replicating successful strategies from top performers\"\n      ];\n\n      // Channel distribution\n      const channelDistribution = topCampaigns.reduce((acc: Record<string, number>, c) => {\n        acc[c.type] = (acc[c.type] || 0) + 1;\n        return acc;\n      }, {});\n\n      const duration = Date.now() - startTime;\n\n      await this.logMCPToolExecution(\n        authContext,\n        'get_top_performing_campaigns',\n        args,\n        'success',\n        { \n          duration,\n          outputSize: topCampaigns.length,\n          riskLevel: 'low'\n        }\n      );\n\n      return {\n        content: [{\n          type: \"text\",\n          text: JSON.stringify({\n            success: true,\n            data: {\n              campaigns: topCampaigns,\n              sortedBy: metric,\n              insights,\n              statistics: {\n                totalCampaigns: topCampaigns.length,\n                topValue,\n                averageValue: Math.round(avgValue * 100) / 100,\n                channelDistribution,\n                dateRange: {\n                  from: startDate.toISOString(),\n                  to: now.toISOString(),\n                  days: daysBack\n                }\n              }\n            },\n            meta: {\n              metric,\n              limit,\n              dateRange,\n              campaignType,\n              timestamp: new Date().toISOString(),\n              duration,\n              source: 'MCP_CAMPAIGN_METRICS'\n            }\n          })\n        }]\n      };\n    } catch (error) {\n      const duration = Date.now() - startTime;\n      \n      await this.logMCPToolExecution(\n        authContext,\n        'get_top_performing_campaigns',\n        args,\n        'failure',\n        { \n          duration,\n          errorMessage: error instanceof Error ? error.message : 'Unknown error',\n          riskLevel: 'medium'\n        }\n      );\n\n      return {\n        content: [{\n          type: \"text\",\n          text: JSON.stringify({\n            success: false,\n            error: \"Failed to retrieve top performing campaigns\",\n            details: error instanceof Error ? error.message : 'Unknown error'\n          })\n        }],\n        isError: true\n      };\n    }\n  }\n\n  /**\n   * Analyze campaign trends tool\n   */\n  private async analyzeCampaignTrends(args: any, authContext: MCPAuthContext): Promise<any> {\n    const { campaignId, period = 'weekly', metric = 'conversion_rate' } = args;\n\n    try {\n      // Placeholder trend data\n      const trends = {\n        campaignId,\n        metric,\n        period,\n        dataPoints: Array.from({ length: 12 }, (_, i) => ({\n          date: new Date(Date.now() - (i * 7 * 24 * 60 * 60 * 1000)).toISOString().split('T')[0],\n          value: 2.5 + Math.sin(i * 0.5) * 0.8 + (Math.random() - 0.5) * 0.3\n        })).reverse(),\n        insights: [\n          \"Conversion rate shows 15% improvement over the period\",\n          \"Peak performance occurs on Tuesdays and Wednesdays\",\n          \"Seasonal trends indicate higher performance in mid-month\"\n        ]\n      };\n\n      return {\n        content: [{\n          type: \"text\",\n          text: JSON.stringify({\n            success: true,\n            data: trends,\n            meta: {\n              period,\n              metric,\n              timestamp: new Date().toISOString(),\n              fallbackUsed: true\n            }\n          })\n        }]\n      };\n    } catch (error) {\n      return {\n        content: [{\n          type: \"text\",\n          text: JSON.stringify({\n            success: false,\n            error: \"Failed to analyze campaign trends\",\n            details: error instanceof Error ? error.message : 'Unknown error'\n          })\n        }],\n        isError: true\n      };\n    }\n  }\n\n  /**\n   * Fallback methods for campaign data\n   */\n  private async getCampaignsFallback(whereClause: any, limit: number, offset: number): Promise<any[]> {\n    // Placeholder implementation - would use actual Prisma queries\n    return Array.from({ length: limit }, (_, i) => ({\n      id: `campaign-${i + 1}`,\n      name: `Campaign ${i + 1}`,\n      type: 'EMAIL',\n      organizationId: whereClause.organizationId,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    }));\n  }\n\n  /**\n   * Fallback for campaign analytics\n   */\n  private async getCampaignAnalyticsFallback(query: CampaignAnalyticsQuery, authContext: MCPAuthContext): Promise<any> {\n    return {\n      campaigns: [],\n      meta: {\n        total: 0,\n        offset: query.offset,\n        limit: query.limit,\n        fallbackUsed: true,\n        message: \"Campaign analytics fallback - implementation needed\"\n      }\n    };\n  }\n\n  /**\n   * Get campaign performance (placeholder)\n   */\n  private async getCampaignPerformance(query: CampaignAnalyticsQuery, authContext: MCPAuthContext): Promise<any> {\n    return {\n      uri: \"campaign://performance\",\n      mimeType: \"application/json\",\n      text: JSON.stringify({\n        message: \"Campaign performance functionality coming soon\",\n        fallbackUsed: true\n      })\n    };\n  }\n\n  /**\n   * Get A/B test results with real data and statistical analysis\n   */\n  private async getABTestResults(query: CampaignAnalyticsQuery, authContext: MCPAuthContext): Promise<any> {\n    try {\n      const startTime = Date.now();\n      \n      // Build where clause for A/B tests\n      const whereClause: any = {\n        createdBy: {\n          organizationId: authContext.organizationId\n        }\n      };\n\n      if (query.campaignId) {\n        whereClause.entityId = query.campaignId;\n      }\n\n      if (query.dateFrom || query.dateTo) {\n        whereClause.createdAt = {};\n        if (query.dateFrom) {\n          whereClause.createdAt.gte = new Date(query.dateFrom);\n        }\n        if (query.dateTo) {\n          whereClause.createdAt.lte = new Date(query.dateTo);\n        }\n      }\n\n      // Get A/B tests with variants and results\n      const abTests = await prisma.aBTest.findMany({\n        where: whereClause,\n        take: query.limit,\n        skip: query.offset,\n        include: {\n          variants: {\n            include: {\n              results: true\n            }\n          },\n          results: true,\n          createdBy: {\n            select: { id: true, name: true, email: true }\n          }\n        },\n        orderBy: {\n          createdAt: 'desc'\n        }\n      });\n\n      // Transform A/B test data with statistical analysis\n      const testResults = abTests.map(test => {\n        const variants = test.variants.map(variant => {\n          // Aggregate results by metric\n          const metricResults = variant.results.reduce((acc: Record<string, any>, result) => {\n            acc[result.metric] = {\n              value: result.value,\n              sampleSize: result.sampleSize,\n              confidence: this.calculateConfidenceInterval(result.value, result.sampleSize)\n            };\n            return acc;\n          }, {});\n\n          return {\n            id: variant.id,\n            name: variant.name,\n            description: variant.description,\n            content: JSON.parse(variant.content || '{}'),\n            trafficPercent: variant.trafficPercent,\n            results: metricResults,\n            createdAt: variant.createdAt.toISOString()\n          };\n        });\n\n        // Calculate statistical significance between variants\n        const statisticalAnalysis = this.calculateABTestSignificance(variants, test.winnerMetric);\n\n        // Determine winner if test has concluded\n        const winner = test.winnerVariantId \n          ? variants.find(v => v.id === test.winnerVariantId)\n          : statisticalAnalysis.recommendedWinner;\n\n        return {\n          id: test.id,\n          name: test.name,\n          description: test.description,\n          entityType: test.entityType,\n          entityId: test.entityId,\n          status: test.status,\n          testType: test.testType,\n          testElements: JSON.parse(test.testElements || '[]'),\n          winnerMetric: test.winnerMetric,\n          winnerThreshold: test.winnerThreshold,\n          distributionPercent: test.distributionPercent,\n          startedAt: test.startedAt?.toISOString(),\n          endedAt: test.endedAt?.toISOString(),\n          createdAt: test.createdAt.toISOString(),\n          updatedAt: test.updatedAt.toISOString(),\n          createdBy: {\n            id: test.createdBy.id,\n            name: test.createdBy.name,\n            email: test.createdBy.email\n          },\n          variants,\n          winner,\n          statisticalAnalysis,\n          insights: this.generateABTestInsights(variants, statisticalAnalysis, test.winnerMetric)\n        };\n      });\n\n      // Calculate summary statistics\n      const totalTests = testResults.length;\n      const activeTests = testResults.filter(t => t.status === 'RUNNING').length;\n      const completedTests = testResults.filter(t => t.status === 'COMPLETED').length;\n      const significantTests = testResults.filter(t => \n        t.statisticalAnalysis.isStatisticallySignificant\n      ).length;\n\n      const duration = Date.now() - startTime;\n\n      // Log resource access\n      await this.logMCPResourceAccess(\n        authContext,\n        'campaign://ab-tests',\n        'LIST',\n        'success',\n        { duration, dataSize: testResults.length }\n      );\n\n      return {\n        uri: \"campaign://ab-tests\",\n        mimeType: \"application/json\",\n        text: JSON.stringify({\n          abTests: testResults,\n          summary: {\n            totalTests,\n            activeTests,\n            completedTests,\n            significantTests,\n            significanceRate: totalTests > 0 ? (significantTests / totalTests) * 100 : 0\n          },\n          meta: {\n            query: {\n              limit: query.limit,\n              offset: query.offset,\n              organizationId: authContext.organizationId\n            },\n            timestamp: new Date().toISOString(),\n            duration,\n            source: 'REAL_AB_TEST_DATA'\n          }\n        })\n      };\n    } catch (error) {\n      // Log failed access\n      await this.logMCPResourceAccess(\n        authContext,\n        'campaign://ab-tests',\n        'LIST',\n        'failure',\n        { errorMessage: error instanceof Error ? error.message : 'Unknown error' }\n      );\n\n      return {\n        uri: \"campaign://ab-tests\",\n        mimeType: \"application/json\",\n        text: JSON.stringify({\n          error: \"Failed to retrieve A/B test results\",\n          details: error instanceof Error ? error.message : 'Unknown error',\n          fallback: {\n            abTests: [],\n            summary: {\n              totalTests: 0,\n              activeTests: 0,\n              completedTests: 0,\n              significantTests: 0,\n              significanceRate: 0\n            }\n          }\n        })\n      };\n    }\n  }\n\n  /**\n   * Get campaign insights (placeholder)\n   */\n  private async getCampaignInsights(query: CampaignAnalyticsQuery, authContext: MCPAuthContext): Promise<any> {\n    return {\n      uri: \"campaign://insights\",\n      mimeType: \"application/json\",\n      text: JSON.stringify({\n        message: \"Campaign insights functionality coming soon\",\n        fallbackUsed: true\n      })\n    };\n  }\n\n  /**\n   * Generate comparative insights between campaigns\n   */\n  private generateComparisonInsights(campaigns: any[], metrics: string[]): string[] {\n    if (campaigns.length < 2) return [\"Need at least 2 campaigns for comparison\"];\n\n    const insights: string[] = [];\n    \n    for (const metric of metrics) {\n      const values = campaigns.map(c => c.metrics[metric]).filter(v => v != null);\n      if (values.length < 2) continue;\n\n      const best = Math.max(...values);\n      const worst = Math.min(...values);\n      const average = values.reduce((sum, val) => sum + val, 0) / values.length;\n      \n      const bestCampaign = campaigns.find(c => c.metrics[metric] === best);\n      const worstCampaign = campaigns.find(c => c.metrics[metric] === worst);\n      \n      if (bestCampaign && worstCampaign && best !== worst) {\n        const improvement = ((best - worst) / worst) * 100;\n        insights.push(\n          `${bestCampaign.name} outperforms ${worstCampaign.name} by ${improvement.toFixed(1)}% in ${metric.replace('_', ' ')}`\n        );\n      }\n\n      if (best > average * 1.2) {\n        insights.push(\n          `${bestCampaign?.name} shows exceptional ${metric.replace('_', ' ')} performance (${best.toFixed(2)}% vs ${average.toFixed(2)}% average)`\n        );\n      }\n    }\n\n    return insights.length > 0 ? insights : [\"All campaigns show similar performance patterns\"];\n  }\n\n  /**\n   * Calculate statistical significance between campaigns\n   */\n  private calculateStatisticalSignificance(campaigns: any[], metrics: string[]): any {\n    if (campaigns.length < 2) {\n      return {\n        isStatisticallySignificant: false,\n        confidenceLevel: 0,\n        pValue: 1,\n        effect: 'none',\n        recommendation: 'Need at least 2 campaigns for statistical analysis'\n      };\n    }\n\n    // Use the first metric for primary analysis\n    const primaryMetric = metrics[0] || 'conversion_rate';\n    const metricValues = campaigns.map(c => ({\n      name: c.name,\n      value: c.metrics[primaryMetric],\n      sampleSize: c.performance.sent || 1000 // Fallback sample size\n    })).filter(v => v.value != null);\n\n    if (metricValues.length < 2) {\n      return {\n        isStatisticallySignificant: false,\n        confidenceLevel: 0,\n        pValue: 1,\n        effect: 'none',\n        recommendation: 'Insufficient data for statistical analysis'\n      };\n    }\n\n    // Simple two-sample comparison (using the top 2 performers)\n    const sortedValues = metricValues.sort((a, b) => b.value - a.value);\n    const best = sortedValues[0];\n    const second = sortedValues[1];\n\n    // Calculate z-score for proportions (simplified)\n    const p1 = best.value / 100; // Convert percentage to proportion\n    const p2 = second.value / 100;\n    const n1 = best.sampleSize;\n    const n2 = second.sampleSize;\n\n    // Pool proportion\n    const pooledP = (p1 * n1 + p2 * n2) / (n1 + n2);\n    const standardError = Math.sqrt(pooledP * (1 - pooledP) * (1/n1 + 1/n2));\n    \n    const zScore = Math.abs(p1 - p2) / standardError;\n    const pValue = 2 * (1 - this.normalCDF(Math.abs(zScore))); // Two-tailed test\n\n    const isSignificant = pValue < 0.05;\n    const confidenceLevel = (1 - pValue) * 100;\n\n    // Effect size (Cohen's h for proportions)\n    const effectSize = 2 * (Math.asin(Math.sqrt(p1)) - Math.asin(Math.sqrt(p2)));\n    const effectMagnitude = Math.abs(effectSize) < 0.2 ? 'small' : \n                           Math.abs(effectSize) < 0.5 ? 'medium' : 'large';\n\n    return {\n      isStatisticallySignificant: isSignificant,\n      confidenceLevel: Math.round(confidenceLevel * 100) / 100,\n      pValue: Math.round(pValue * 1000) / 1000,\n      zScore: Math.round(zScore * 100) / 100,\n      effectSize: Math.round(effectSize * 1000) / 1000,\n      effect: effectMagnitude,\n      comparison: {\n        winner: best.name,\n        winnerValue: best.value,\n        runner: second.name,\n        runnerValue: second.value,\n        improvement: ((best.value - second.value) / second.value) * 100\n      },\n      recommendation: isSignificant \n        ? `${best.name} shows statistically significant improvement in ${primaryMetric.replace('_', ' ')}`\n        : 'No statistically significant difference detected. Continue testing for more data.'\n    };\n  }\n\n  /**\n   * Calculate confidence interval for a proportion\n   */\n  private calculateConfidenceInterval(value: number, sampleSize: number, confidenceLevel: number = 0.95): any {\n    const p = value / 100; // Convert percentage to proportion\n    const n = sampleSize;\n    const zAlpha = 1.96; // 95% confidence level\n    \n    const standardError = Math.sqrt((p * (1 - p)) / n);\n    const marginOfError = zAlpha * standardError;\n    \n    const lowerBound = Math.max(0, (p - marginOfError) * 100);\n    const upperBound = Math.min(100, (p + marginOfError) * 100);\n    \n    return {\n      lowerBound: Math.round(lowerBound * 100) / 100,\n      upperBound: Math.round(upperBound * 100) / 100,\n      marginOfError: Math.round(marginOfError * 100 * 100) / 100,\n      confidenceLevel: confidenceLevel * 100\n    };\n  }\n\n  /**\n   * Calculate A/B test statistical significance\n   */\n  private calculateABTestSignificance(variants: any[], winnerMetric: string): any {\n    if (variants.length < 2) {\n      return {\n        isStatisticallySignificant: false,\n        confidenceLevel: 0,\n        recommendedWinner: null,\n        analysis: 'Need at least 2 variants for statistical analysis'\n      };\n    }\n\n    // Get metric data for all variants\n    const variantData = variants.map(variant => ({\n      id: variant.id,\n      name: variant.name,\n      value: variant.results[winnerMetric]?.value || 0,\n      sampleSize: variant.results[winnerMetric]?.sampleSize || 0\n    })).filter(v => v.sampleSize > 0);\n\n    if (variantData.length < 2) {\n      return {\n        isStatisticallySignificant: false,\n        confidenceLevel: 0,\n        recommendedWinner: null,\n        analysis: 'Insufficient data for statistical analysis'\n      };\n    }\n\n    // Find the best performing variant\n    const bestVariant = variantData.reduce((best, current) => \n      current.value > best.value ? current : best\n    );\n\n    // Calculate statistical significance against control (first variant)\n    const control = variantData[0];\n    const treatment = bestVariant.id === control.id ? variantData[1] : bestVariant;\n\n    const significance = this.calculateTwoSampleTest(\n      control.value, control.sampleSize,\n      treatment.value, treatment.sampleSize\n    );\n\n    return {\n      isStatisticallySignificant: significance.isSignificant,\n      confidenceLevel: significance.confidenceLevel,\n      pValue: significance.pValue,\n      recommendedWinner: significance.isSignificant ? treatment : null,\n      analysis: significance.analysis,\n      variantComparisons: variantData.map(variant => ({\n        ...variant,\n        confidenceInterval: this.calculateConfidenceInterval(variant.value, variant.sampleSize),\n        isWinner: variant.id === treatment.id && significance.isSignificant\n      }))\n    };\n  }\n\n  /**\n   * Two-sample statistical test\n   */\n  private calculateTwoSampleTest(value1: number, n1: number, value2: number, n2: number): any {\n    const p1 = value1 / 100;\n    const p2 = value2 / 100;\n    \n    // Pool proportion for test\n    const pooledP = (p1 * n1 + p2 * n2) / (n1 + n2);\n    const standardError = Math.sqrt(pooledP * (1 - pooledP) * (1/n1 + 1/n2));\n    \n    const zScore = Math.abs(p1 - p2) / standardError;\n    const pValue = 2 * (1 - this.normalCDF(Math.abs(zScore)));\n    \n    const isSignificant = pValue < 0.05;\n    const confidenceLevel = (1 - pValue) * 100;\n    \n    const improvement = ((Math.max(p1, p2) - Math.min(p1, p2)) / Math.min(p1, p2)) * 100;\n    \n    return {\n      isSignificant,\n      confidenceLevel: Math.round(confidenceLevel * 100) / 100,\n      pValue: Math.round(pValue * 1000) / 1000,\n      zScore: Math.round(zScore * 100) / 100,\n      improvement: Math.round(improvement * 100) / 100,\n      analysis: isSignificant \n        ? `Statistically significant difference detected (p=${pValue.toFixed(3)}, improvement=${improvement.toFixed(1)}%)`\n        : `No significant difference (p=${pValue.toFixed(3)}). Consider longer test duration.`\n    };\n  }\n\n  /**\n   * Normal cumulative distribution function approximation\n   */\n  private normalCDF(x: number): number {\n    // Abramowitz and Stegun approximation\n    const t = 1 / (1 + 0.2316419 * Math.abs(x));\n    const d = 0.3989423 * Math.exp(-x * x / 2);\n    let prob = d * t * (0.3193815 + t * (-0.3565638 + t * (1.781478 + t * (-1.821256 + t * 1.330274))));\n    \n    if (x > 0) {\n      prob = 1 - prob;\n    }\n    \n    return prob;\n  }\n\n  /**\n   * Generate insights for A/B test results\n   */\n  private generateABTestInsights(variants: any[], statisticalAnalysis: any, winnerMetric: string): string[] {\n    const insights: string[] = [];\n    \n    if (variants.length < 2) {\n      insights.push(\"Add more variants to enable A/B testing analysis\");\n      return insights;\n    }\n\n    // Performance insights\n    const values = variants.map(v => v.results[winnerMetric]?.value || 0);\n    const best = Math.max(...values);\n    const worst = Math.min(...values);\n    \n    if (best > worst) {\n      const bestVariant = variants.find(v => (v.results[winnerMetric]?.value || 0) === best);\n      const improvement = ((best - worst) / worst) * 100;\n      insights.push(`Best variant (${bestVariant?.name}) shows ${improvement.toFixed(1)}% improvement over worst performer`);\n    }\n\n    // Statistical significance insights\n    if (statisticalAnalysis.isStatisticallySignificant) {\n      insights.push(`Results are statistically significant (p=${statisticalAnalysis.pValue}) - safe to implement winner`);\n    } else {\n      insights.push(\"Results not yet statistically significant - continue testing for more reliable data\");\n    }\n\n    // Sample size insights\n    const totalSamples = variants.reduce((sum, v) => sum + (v.results[winnerMetric]?.sampleSize || 0), 0);\n    if (totalSamples < 1000) {\n      insights.push(\"Sample size is relatively small - consider running test longer for more confidence\");\n    }\n\n    // Traffic distribution insights\n    const trafficBalance = Math.max(...variants.map(v => v.trafficPercent)) - Math.min(...variants.map(v => v.trafficPercent));\n    if (trafficBalance > 10) {\n      insights.push(\"Consider balancing traffic distribution more evenly between variants\");\n    }\n\n    return insights;\n  }\n\n  /**\n   * Calculate real campaign cost using MessagingUsage data\n   */\n  private async calculateRealCampaignCost(campaignId: string, organizationId: string): Promise<number | null> {\n    try {\n      // Get messaging usage for this campaign\n      const messagingUsage = await prisma.messagingUsage.findMany({\n        where: {\n          campaignId,\n          organizationId\n        }\n      });\n\n      if (messagingUsage.length === 0) {\n        return null; // No usage data found\n      }\n\n      // Calculate total cost from credits used\n      const totalCredits = messagingUsage.reduce((sum, usage) => sum + usage.credits, 0);\n      \n      // Get credit cost rate from recent credit transactions\n      const creditCostRate = await this.getCreditCostRate(organizationId);\n      \n      return totalCredits * creditCostRate;\n    } catch (error) {\n      console.warn('Failed to calculate real campaign cost:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Get the cost rate per credit from recent credit purchases\n   */\n  private async getCreditCostRate(organizationId: string): Promise<number> {\n    try {\n      // Get recent credit purchases to determine cost per credit\n      const recentPurchases = await prisma.creditTransaction.findMany({\n        where: {\n          organizationId,\n          type: 'purchase',\n          status: 'completed',\n          createdAt: {\n            gte: new Date(Date.now() - 90 * 24 * 60 * 60 * 1000) // Last 90 days\n          }\n        },\n        orderBy: {\n          createdAt: 'desc'\n        },\n        take: 10\n      });\n\n      if (recentPurchases.length === 0) {\n        return 0.001; // Default rate of $0.001 per credit\n      }\n\n      // Calculate average cost per credit from recent purchases\n      const totalAmount = recentPurchases.reduce((sum, tx) => sum + tx.amount, 0);\n      const totalCredits = recentPurchases.reduce((sum, tx) => {\n        // Extract credits from metadata or description\n        const metadata = tx.metadata as any;\n        return sum + (metadata?.credits || 1000); // Default 1000 credits per purchase\n      }, 0);\n\n      return totalCredits > 0 ? totalAmount / totalCredits : 0.001;\n    } catch (error) {\n      console.warn('Failed to calculate credit cost rate:', error);\n      return 0.001; // Fallback rate\n    }\n  }\n\n  /**\n   * Calculate detailed revenue attribution for a campaign\n   */\n  private async calculateRevenueAttribution(campaignId: string, organizationId: string): Promise<any> {\n    try {\n      const startTime = Date.now();\n\n      // Get messaging usage breakdown\n      const messagingUsage = await prisma.messagingUsage.findMany({\n        where: {\n          campaignId,\n          organizationId\n        }\n      });\n\n      const channelBreakdown = messagingUsage.reduce((acc: Record<string, any>, usage) => {\n        if (!acc[usage.channel]) {\n          acc[usage.channel] = {\n            messageCount: 0,\n            credits: 0,\n            cost: 0,\n            provider: usage.provider\n          };\n        }\n        acc[usage.channel].messageCount += usage.messageCount;\n        acc[usage.channel].credits += usage.credits;\n        return acc;\n      }, {});\n\n      // Calculate cost per channel\n      const creditCostRate = await this.getCreditCostRate(organizationId);\n      for (const channel of Object.keys(channelBreakdown)) {\n        channelBreakdown[channel].cost = channelBreakdown[channel].credits * creditCostRate;\n      }\n\n      // Get campaign revenue data from MCP metrics\n      const campaignMetric = await prisma.mCPCampaignMetrics.findFirst({\n        where: {\n          campaignId,\n          organizationId\n        }\n      });\n\n      const totalRevenue = campaignMetric?.revenue || 0;\n      const totalCost = Object.values(channelBreakdown).reduce((sum: number, channel: any) => sum + channel.cost, 0);\n      const netProfit = totalRevenue - totalCost;\n      const roi = totalCost > 0 ? (netProfit / totalCost) * 100 : 0;\n\n      // Calculate attribution by channel based on message volume\n      const totalMessages = Object.values(channelBreakdown).reduce((sum: number, channel: any) => sum + channel.messageCount, 0);\n      \n      const channelAttribution = Object.keys(channelBreakdown).reduce((acc: Record<string, any>, channel) => {\n        const channelData = channelBreakdown[channel];\n        const attributionRatio = totalMessages > 0 ? channelData.messageCount / totalMessages : 0;\n        \n        acc[channel] = {\n          ...channelData,\n          attributedRevenue: totalRevenue * attributionRatio,\n          revenueShare: attributionRatio * 100,\n          channelROI: channelData.cost > 0 ? ((totalRevenue * attributionRatio - channelData.cost) / channelData.cost) * 100 : 0\n        };\n        return acc;\n      }, {});\n\n      // Performance metrics\n      const costPerMessage = totalMessages > 0 ? totalCost / totalMessages : 0;\n      const revenuePerMessage = totalMessages > 0 ? totalRevenue / totalMessages : 0;\n      const conversionValue = campaignMetric?.converted || 0;\n      const costPerConversion = conversionValue > 0 ? totalCost / conversionValue : 0;\n\n      const duration = Date.now() - startTime;\n\n      return {\n        summary: {\n          totalRevenue: Math.round(totalRevenue * 100) / 100,\n          totalCost: Math.round(totalCost * 100) / 100,\n          netProfit: Math.round(netProfit * 100) / 100,\n          roi: Math.round(roi * 100) / 100,\n          totalMessages,\n          costPerMessage: Math.round(costPerMessage * 10000) / 10000,\n          revenuePerMessage: Math.round(revenuePerMessage * 100) / 100,\n          costPerConversion: Math.round(costPerConversion * 100) / 100\n        },\n        channelAttribution,\n        insights: this.generateRevenueAttributionInsights(channelAttribution, {\n          totalRevenue,\n          totalCost,\n          roi,\n          totalMessages\n        }),\n        calculatedAt: new Date().toISOString(),\n        calculationDuration: duration,\n        creditCostRate\n      };\n    } catch (error) {\n      console.warn('Failed to calculate revenue attribution:', error);\n      return {\n        summary: {\n          totalRevenue: 0,\n          totalCost: 0,\n          netProfit: 0,\n          roi: 0,\n          totalMessages: 0,\n          costPerMessage: 0,\n          revenuePerMessage: 0,\n          costPerConversion: 0\n        },\n        channelAttribution: {},\n        insights: ['Revenue attribution data unavailable'],\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Generate insights for revenue attribution\n   */\n  private generateRevenueAttributionInsights(channelAttribution: Record<string, any>, summary: any): string[] {\n    const insights: string[] = [];\n    const channels = Object.keys(channelAttribution);\n\n    if (channels.length === 0) {\n      insights.push('No channel attribution data available');\n      return insights;\n    }\n\n    // Find best performing channel by ROI\n    const bestROIChannel = channels.reduce((best, current) => {\n      return channelAttribution[current].channelROI > channelAttribution[best].channelROI ? current : best;\n    });\n\n    if (channelAttribution[bestROIChannel].channelROI > 0) {\n      insights.push(`${bestROIChannel.toUpperCase()} shows highest ROI at ${channelAttribution[bestROIChannel].channelROI.toFixed(1)}%`);\n    }\n\n    // Find channel with highest revenue share\n    const topRevenueChannel = channels.reduce((best, current) => {\n      return channelAttribution[current].attributedRevenue > channelAttribution[best].attributedRevenue ? current : best;\n    });\n\n    if (channelAttribution[topRevenueChannel].revenueShare > 30) {\n      insights.push(`${topRevenueChannel.toUpperCase()} generates ${channelAttribution[topRevenueChannel].revenueShare.toFixed(1)}% of total revenue`);\n    }\n\n    // Cost efficiency insights\n    const avgCostPerMessage = summary.totalCost / summary.totalMessages;\n    const efficientChannels = channels.filter(channel => {\n      const costPerMsg = channelAttribution[channel].cost / channelAttribution[channel].messageCount;\n      return costPerMsg < avgCostPerMessage;\n    });\n\n    if (efficientChannels.length > 0) {\n      insights.push(`Most cost-efficient channels: ${efficientChannels.map(c => c.toUpperCase()).join(', ')}`);\n    }\n\n    // Overall profitability\n    if (summary.roi > 100) {\n      insights.push(`Excellent campaign profitability with ${summary.roi.toFixed(1)}% ROI`);\n    } else if (summary.roi > 0) {\n      insights.push(`Campaign is profitable but could be optimized (${summary.roi.toFixed(1)}% ROI)`);\n    } else {\n      insights.push('Campaign needs optimization - currently operating at a loss');\n    }\n\n    // Multi-channel performance\n    if (channels.length > 1) {\n      const channelVariance = this.calculateChannelROIVariance(channelAttribution);\n      if (channelVariance > 50) {\n        insights.push('Significant performance variance between channels - consider reallocating budget');\n      }\n    }\n\n    return insights;\n  }\n\n  /**\n   * Calculate variance in ROI between channels\n   */\n  private calculateChannelROIVariance(channelAttribution: Record<string, any>): number {\n    const rois = Object.values(channelAttribution).map((channel: any) => channel.channelROI);\n    if (rois.length < 2) return 0;\n\n    const mean = rois.reduce((sum, roi) => sum + roi, 0) / rois.length;\n    const variance = rois.reduce((sum, roi) => sum + Math.pow(roi - mean, 2), 0) / rois.length;\n    \n    return Math.sqrt(variance); // Standard deviation\n  }\n}"],"names":["CampaignAnalyticsMCPServer","BaseMCPServer","constructor","config","defaultMCPConfig","servers","campaign","listResources","authContext","resources","uri","name","description","mimeType","permissions","includes","filter","r","readResource","url","URL","path","pathname","searchParams","queryParams","Object","fromEntries","entries","validatedQuery","CampaignAnalyticsQuerySchema","parse","organizationId","limit","Number","parseInt","offset","includeABTests","getCampaignAnalytics","getCampaignPerformance","getABTestResults","getCampaignInsights","MCPValidationError","listTools","tools","inputSchema","type","properties","campaignId","default","dateRange","enum","required","campaignIds","items","minItems","maxItems","metrics","metric","minimum","maximum","campaignType","period","t","callTool","args","getCampaignMetrics","compareCampaigns","getTopPerformingCampaigns","analyzeCampaignTrends","query","startTime","Date","now","whereClause","dateFrom","dateTo","calculatedAt","gte","lte","campaignMetrics","prisma","mCPCampaignMetrics","findMany","where","take","skip","include","organization","select","id","orderBy","campaigns","map","analytics","campaignName","performance","sent","delivered","opened","clicked","converted","bounced","unsubscribed","openRate","clickRate","conversionRate","revenue","abTests","abTestVariants","variants","undefined","createdAt","toISOString","updatedAt","totalCampaigns","length","totalSent","reduce","sum","c","totalRevenue","avgOpenRate","avgClickRate","avgConversionRate","channelDistribution","acc","duration","logMCPResourceAccess","dataSize","text","JSON","stringify","summary","averageMetrics","Math","round","meta","total","timestamp","source","error","errorMessage","Error","message","createFallbackResponse","getCampaignAnalyticsFallback","logMCPToolExecution","riskLevel","campaignMetric","findFirst","content","success","isError","daysBack","startDate","getTime","campaignDetails","emailCampaign","subject","status","sentAt","sMSCampaign","whatsAppCampaign","detailError","console","warn","realCost","calculateRealCampaignCost","cost","roi","abTestData","parseError","trends","openRateChange","random","clickRateChange","conversionRateChange","responded","outputSize","data","details","in","open_rate","click_rate","conversion_rate","insights","generateComparisonInsights","statisticalAnalysis","calculateStatisticalSignificance","comparedMetrics","orderByField","topMetrics","topCampaigns","Promise","all","revenueAttribution","calculateRevenueAttribution","topValue","avgValue","toFixed","sortedBy","statistics","averageValue","from","to","days","dataPoints","Array","_","i","date","split","value","sin","reverse","fallbackUsed","getCampaignsFallback","createdBy","entityId","aBTest","results","email","testResults","test","variant","metricResults","result","sampleSize","confidence","calculateConfidenceInterval","trafficPercent","calculateABTestSignificance","winnerMetric","winner","winnerVariantId","find","v","recommendedWinner","entityType","testType","testElements","winnerThreshold","distributionPercent","startedAt","endedAt","generateABTestInsights","totalTests","activeTests","completedTests","significantTests","isStatisticallySignificant","significanceRate","fallback","values","best","max","worst","min","average","val","bestCampaign","worstCampaign","improvement","push","replace","confidenceLevel","pValue","effect","recommendation","primaryMetric","metricValues","sortedValues","sort","a","b","second","p1","p2","n1","n2","pooledP","standardError","sqrt","zScore","abs","normalCDF","isSignificant","effectSize","asin","effectMagnitude","comparison","winnerValue","runner","runnerValue","p","n","zAlpha","marginOfError","lowerBound","upperBound","analysis","variantData","bestVariant","current","control","treatment","significance","calculateTwoSampleTest","variantComparisons","confidenceInterval","isWinner","value1","value2","x","d","exp","prob","totalSamples","trafficBalance","messagingUsage","totalCredits","usage","credits","creditCostRate","getCreditCostRate","recentPurchases","creditTransaction","totalAmount","tx","amount","metadata","channelBreakdown","channel","messageCount","provider","keys","totalCost","netProfit","totalMessages","channelAttribution","channelData","attributionRatio","attributedRevenue","revenueShare","channelROI","costPerMessage","revenuePerMessage","conversionValue","costPerConversion","generateRevenueAttributionInsights","calculationDuration","channels","bestROIChannel","toUpperCase","topRevenueChannel","avgCostPerMessage","efficientChannels","costPerMsg","join","channelVariance","calculateChannelROIVariance","rois","mean","variance","pow"],"mappings":"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"}