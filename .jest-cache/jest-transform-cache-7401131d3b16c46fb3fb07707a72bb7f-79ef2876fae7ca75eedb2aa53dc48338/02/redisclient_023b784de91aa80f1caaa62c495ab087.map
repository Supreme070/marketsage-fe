{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/lib/cache/redis-client.ts"],"sourcesContent":["import { createClient, type RedisClientType } from 'redis';\n\ninterface CacheItem<T = any> {\n  data: T;\n  timestamp: number;\n  ttl: number;\n}\n\n/**\n * Redis caching client for MarketSage\n * Provides session storage, API caching, and performance optimization\n */\nclass RedisCacheClient {\n  private client: RedisClientType | null = null;\n  private connected = false;\n  private connectionAttempts = 0;\n  private maxRetries = 3;\n\n  constructor() {\n    // Only initialize if we're not in build mode\n    if (!this.isBuildTime()) {\n      this.initialize();\n    } else {\n      console.log('Redis client initialization skipped - build mode detected');\n    }\n  }\n\n  private isBuildTime(): boolean {\n    return process.env.NEXT_PHASE === 'phase-production-build' || \n      process.env.BUILDING === 'true' ||\n      process.argv.includes('build') ||\n      process.argv.includes('next') && process.argv.includes('build');\n  }\n\n  /**\n   * Initialize Redis connection\n   */\n  private async initialize(): Promise<void> {\n    try {\n      // Environment-aware Redis configuration\n      const isDocker = process.env.DOCKER_ENV === 'true' || process.env.NODE_ENV === 'production';\n      const redisUrl = isDocker \n        ? (process.env.REDIS_URL || 'redis://marketsage-valkey:6379')\n        : 'redis://localhost:6379';\n      \n      console.log(`Initializing Redis client for ${isDocker ? 'Docker' : 'local'} environment: ${redisUrl}`);\n      \n      this.client = createClient({\n        url: redisUrl,\n        socket: {\n          connectTimeout: 5000,\n          lazyConnect: true,\n          reconnectStrategy: (retries) => {\n            if (retries > this.maxRetries) {\n              console.warn('Redis max retries exceeded - running without cache');\n              return false;\n            }\n            return Math.min(retries * 100, 3000);\n          }\n        }\n      });\n\n      this.client.on('connect', () => {\n        console.log('Redis client connected');\n        this.connected = true;\n        this.connectionAttempts = 0;\n      });\n\n      this.client.on('error', (err) => {\n        console.warn('Redis client error (app will continue without cache):', err.message);\n        this.connected = false;\n      });\n\n      this.client.on('disconnect', () => {\n        console.log('Redis client disconnected');\n        this.connected = false;\n      });\n\n      // Connect to Redis\n      await this.client.connect();\n      \n    } catch (error) {\n      console.error('Failed to initialize Redis client:', error);\n      this.connected = false;\n    }\n  }\n\n  /**\n   * Ensure Redis connection is available\n   */\n  private async ensureConnection(): Promise<boolean> {\n    if (this.connected && this.client) {\n      return true;\n    }\n\n    if (this.connectionAttempts >= this.maxRetries) {\n      return false;\n    }\n\n    this.connectionAttempts++;\n    \n    try {\n      await this.initialize();\n      return this.connected;\n    } catch (error) {\n      console.error('Failed to reconnect to Redis:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Set a value in cache with TTL\n   */\n  async set<T>(key: string, value: T, ttlSeconds = 3600): Promise<boolean> {\n    try {\n      if (!(await this.ensureConnection()) || !this.client) {\n        return false;\n      }\n\n      const cacheItem: CacheItem<T> = {\n        data: value,\n        timestamp: Date.now(),\n        ttl: ttlSeconds\n      };\n\n      await this.client.setEx(key, ttlSeconds, JSON.stringify(cacheItem));\n      return true;\n    } catch (error) {\n      console.error('Redis SET error:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get a value from cache\n   */\n  async get<T>(key: string): Promise<T | null> {\n    try {\n      if (!(await this.ensureConnection()) || !this.client) {\n        return null;\n      }\n\n      const cached = await this.client.get(key);\n      if (!cached) {\n        return null;\n      }\n\n      const cacheItem: CacheItem<T> = JSON.parse(cached);\n      \n      // Check if expired (additional safety check)\n      const age = (Date.now() - cacheItem.timestamp) / 1000;\n      if (age > cacheItem.ttl) {\n        await this.delete(key);\n        return null;\n      }\n\n      return cacheItem.data;\n    } catch (error) {\n      console.error('Redis GET error:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Delete a key from cache\n   */\n  async delete(key: string): Promise<boolean> {\n    try {\n      if (!(await this.ensureConnection()) || !this.client) {\n        return false;\n      }\n\n      await this.client.del(key);\n      return true;\n    } catch (error) {\n      console.error('Redis DELETE error:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Check if a key exists in cache\n   */\n  async exists(key: string): Promise<boolean> {\n    try {\n      if (!(await this.ensureConnection()) || !this.client) {\n        return false;\n      }\n\n      const result = await this.client.exists(key);\n      return result === 1;\n    } catch (error) {\n      console.error('Redis EXISTS error:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Set multiple values at once\n   */\n  async mset(items: Record<string, any>, ttlSeconds = 3600): Promise<boolean> {\n    try {\n      if (!(await this.ensureConnection()) || !this.client) {\n        return false;\n      }\n\n      const pipeline = this.client.multi();\n      \n      for (const [key, value] of Object.entries(items)) {\n        const cacheItem: CacheItem = {\n          data: value,\n          timestamp: Date.now(),\n          ttl: ttlSeconds\n        };\n        pipeline.setEx(key, ttlSeconds, JSON.stringify(cacheItem));\n      }\n\n      await pipeline.exec();\n      return true;\n    } catch (error) {\n      console.error('Redis MSET error:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get multiple values at once\n   */\n  async mget<T>(keys: string[]): Promise<Record<string, T | null>> {\n    try {\n      if (!(await this.ensureConnection()) || !this.client) {\n        return keys.reduce((acc, key) => ({ ...acc, [key]: null }), {});\n      }\n\n      const values = await this.client.mGet(keys);\n      const result: Record<string, T | null> = {};\n\n      for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        const value = values[i];\n\n        if (value) {\n          try {\n            const cacheItem: CacheItem<T> = JSON.parse(value);\n            \n            // Check if expired\n            const age = (Date.now() - cacheItem.timestamp) / 1000;\n            if (age <= cacheItem.ttl) {\n              result[key] = cacheItem.data;\n            } else {\n              result[key] = null;\n              // Delete expired key\n              this.delete(key);\n            }\n          } catch {\n            result[key] = null;\n          }\n        } else {\n          result[key] = null;\n        }\n      }\n\n      return result;\n    } catch (error) {\n      console.error('Redis MGET error:', error);\n      return keys.reduce((acc, key) => ({ ...acc, [key]: null }), {});\n    }\n  }\n\n  /**\n   * Increment a counter\n   */\n  async increment(key: string, by = 1): Promise<number | null> {\n    try {\n      if (!(await this.ensureConnection()) || !this.client) {\n        return null;\n      }\n\n      const result = await this.client.incrBy(key, by);\n      return result;\n    } catch (error) {\n      console.error('Redis INCREMENT error:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Set expiration for a key\n   */\n  async expire(key: string, seconds: number): Promise<boolean> {\n    try {\n      if (!(await this.ensureConnection()) || !this.client) {\n        return false;\n      }\n\n      const result = await this.client.expire(key, seconds);\n      return result;\n    } catch (error) {\n      console.error('Redis EXPIRE error:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get Redis connection status\n   */\n  isConnected(): boolean {\n    return this.connected;\n  }\n\n  /**\n   * Get Redis memory information and health metrics\n   */\n  async getMemoryInfo(): Promise<{\n    used_memory: number;\n    used_memory_human: string;\n    used_memory_peak: number;\n    used_memory_peak_human: string;\n    maxmemory: number;\n    maxmemory_human: string;\n    memory_usage_percentage: number;\n    connected_clients: number;\n    keyspace_hits: number;\n    keyspace_misses: number;\n    hit_rate: number;\n    uptime_in_seconds: number;\n  } | null> {\n    try {\n      if (!(await this.ensureConnection()) || !this.client) {\n        return null;\n      }\n\n      const info = await this.client.info('memory');\n      const stats = await this.client.info('stats');\n      const server = await this.client.info('server');\n      const clients = await this.client.info('clients');\n\n      // Parse memory info\n      const memoryMatch = info.match(/used_memory:(\\d+)/);\n      const memoryHumanMatch = info.match(/used_memory_human:(.+)/);\n      const memoryPeakMatch = info.match(/used_memory_peak:(\\d+)/);\n      const memoryPeakHumanMatch = info.match(/used_memory_peak_human:(.+)/);\n      const maxMemoryMatch = info.match(/maxmemory:(\\d+)/);\n      const maxMemoryHumanMatch = info.match(/maxmemory_human:(.+)/);\n\n      // Parse stats\n      const hitsMatch = stats.match(/keyspace_hits:(\\d+)/);\n      const missesMatch = stats.match(/keyspace_misses:(\\d+)/);\n\n      // Parse clients info\n      const connectedClientsMatch = clients.match(/connected_clients:(\\d+)/);\n\n      // Parse uptime\n      const uptimeMatch = server.match(/uptime_in_seconds:(\\d+)/);\n\n      const usedMemory = memoryMatch ? Number.parseInt(memoryMatch[1]) : 0;\n      const maxMemory = maxMemoryMatch ? Number.parseInt(maxMemoryMatch[1]) : 0;\n      const hits = hitsMatch ? Number.parseInt(hitsMatch[1]) : 0;\n      const misses = missesMatch ? Number.parseInt(missesMatch[1]) : 0;\n\n      return {\n        used_memory: usedMemory,\n        used_memory_human: memoryHumanMatch ? memoryHumanMatch[1].trim() : '0B',\n        used_memory_peak: memoryPeakMatch ? Number.parseInt(memoryPeakMatch[1]) : 0,\n        used_memory_peak_human: memoryPeakHumanMatch ? memoryPeakHumanMatch[1].trim() : '0B',\n        maxmemory: maxMemory,\n        maxmemory_human: maxMemoryHumanMatch ? maxMemoryHumanMatch[1].trim() : '0B',\n        memory_usage_percentage: maxMemory > 0 ? (usedMemory / maxMemory) * 100 : 0,\n        connected_clients: connectedClientsMatch ? Number.parseInt(connectedClientsMatch[1]) : 0,\n        keyspace_hits: hits,\n        keyspace_misses: misses,\n        hit_rate: hits + misses > 0 ? (hits / (hits + misses)) * 100 : 0,\n        uptime_in_seconds: uptimeMatch ? Number.parseInt(uptimeMatch[1]) : 0,\n      };\n    } catch (error) {\n      console.error('Redis memory info error:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Ping Redis server to check connectivity\n   */\n  async ping(): Promise<boolean> {\n    try {\n      if (!(await this.ensureConnection()) || !this.client) {\n        return false;\n      }\n\n      const response = await this.client.ping();\n      return response === 'PONG';\n    } catch (error) {\n      console.error('Redis ping error:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Close Redis connection\n   */\n  async disconnect(): Promise<void> {\n    try {\n      if (this.client) {\n        await this.client.disconnect();\n        this.connected = false;\n      }\n    } catch (error) {\n      console.error('Error disconnecting from Redis:', error);\n    }\n  }\n\n  /**\n   * Flush all data from Redis (use with caution)\n   */\n  async flushAll(): Promise<boolean> {\n    try {\n      if (!(await this.ensureConnection()) || !this.client) {\n        return false;\n      }\n\n      await this.client.flushAll();\n      return true;\n    } catch (error) {\n      console.error('Redis FLUSH error:', error);\n      return false;\n    }\n  }\n}\n\n// Export singleton instance\nexport const redisCache = new RedisCacheClient();\n\n// Cache key prefixes for different data types\nexport const CACHE_KEYS = {\n  SESSION: (sessionId: string) => `session:${sessionId}`,\n  USER: (userId: string) => `user:${userId}`,\n  CONTACT: (contactId: string) => `contact:${contactId}`,\n  CAMPAIGN: (campaignId: string) => `campaign:${campaignId}`,\n  ANALYTICS: (orgId: string, period: string) => `analytics:${orgId}:${period}`,\n  API_RATE_LIMIT: (identifier: string) => `rate_limit:${identifier}`,\n  AI_RESPONSE: (hash: string) => `ai_response:${hash}`,\n  EMAIL_TEMPLATE: (templateId: string) => `email_template:${templateId}`,\n  SMS_TEMPLATE: (templateId: string) => `sms_template:${templateId}`,\n  WORKFLOW: (workflowId: string) => `workflow:${workflowId}`,\n} as const;\n\n// Cache TTL constants (in seconds)\nexport const CACHE_TTL = {\n  SHORT: 300,      // 5 minutes\n  MEDIUM: 1800,    // 30 minutes  \n  LONG: 3600,      // 1 hour\n  DAY: 86400,      // 24 hours\n  WEEK: 604800,    // 7 days\n  SESSION: 1800,   // 30 minutes for sessions\n} as const;"],"names":["CACHE_KEYS","CACHE_TTL","redisCache","RedisCacheClient","constructor","client","connected","connectionAttempts","maxRetries","isBuildTime","initialize","console","log","process","env","NEXT_PHASE","BUILDING","argv","includes","isDocker","DOCKER_ENV","NODE_ENV","redisUrl","REDIS_URL","createClient","url","socket","connectTimeout","lazyConnect","reconnectStrategy","retries","warn","Math","min","on","err","message","connect","error","ensureConnection","set","key","value","ttlSeconds","cacheItem","data","timestamp","Date","now","ttl","setEx","JSON","stringify","get","cached","parse","age","delete","del","exists","result","mset","items","pipeline","multi","Object","entries","exec","mget","keys","reduce","acc","values","mGet","i","length","increment","by","incrBy","expire","seconds","isConnected","getMemoryInfo","info","stats","server","clients","memoryMatch","match","memoryHumanMatch","memoryPeakMatch","memoryPeakHumanMatch","maxMemoryMatch","maxMemoryHumanMatch","hitsMatch","missesMatch","connectedClientsMatch","uptimeMatch","usedMemory","Number","parseInt","maxMemory","hits","misses","used_memory","used_memory_human","trim","used_memory_peak","used_memory_peak_human","maxmemory","maxmemory_human","memory_usage_percentage","connected_clients","keyspace_hits","keyspace_misses","hit_rate","uptime_in_seconds","ping","response","disconnect","flushAll","SESSION","sessionId","USER","userId","CONTACT","contactId","CAMPAIGN","campaignId","ANALYTICS","orgId","period","API_RATE_LIMIT","identifier","AI_RESPONSE","hash","EMAIL_TEMPLATE","templateId","SMS_TEMPLATE","WORKFLOW","workflowId","SHORT","MEDIUM","LONG","DAY","WEEK"],"mappings":"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"}