{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/components/dashboard/MultiAgentDashboard.tsx"],"sourcesContent":["/**\n * Multi-Agent AI Coordination Dashboard\n * ====================================\n * Monitor and manage AI agent collaborations and performance\n */\n\n'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Progress } from '@/components/ui/progress';\nimport { \n  Users, \n  Brain, \n  Activity, \n  Settings, \n  Play, \n  Pause, \n  AlertCircle,\n  CheckCircle,\n  Clock\n} from 'lucide-react';\n\ninterface AIAgent {\n  id: string;\n  name: string;\n  type: string;\n  status: 'active' | 'idle' | 'busy' | 'offline' | 'collaborating';\n  capabilities: string[];\n  specialization: string[];\n  currentTasks: any[];\n  performance: {\n    tasksCompleted: number;\n    tasksSuccessful: number;\n    averageResponseTime: number;\n    collaborationScore: number;\n    specialtyEfficiency: number;\n    lastUpdate: Date;\n  };\n  lastHeartbeat: Date;\n}\n\ninterface CollaborationSession {\n  id: string;\n  participants: string[];\n  coordinator: string;\n  objective: string;\n  type: 'consensus' | 'delegation' | 'parallel' | 'sequential';\n  status: 'planning' | 'active' | 'completed' | 'failed';\n  startedAt: Date;\n  completedAt?: Date;\n}\n\nexport default function MultiAgentDashboard() {\n  const [agents, setAgents] = useState<AIAgent[]>([]);\n  const [collaborations, setCollaborations] = useState<CollaborationSession[]>([]);\n  const [performance, setPerformance] = useState<Record<string, any>>({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    fetchAgentStatus();\n    const interval = setInterval(fetchAgentStatus, 30000); // Refresh every 30 seconds\n    return () => clearInterval(interval);\n  }, []);\n\n  const fetchAgentStatus = async () => {\n    try {\n      const response = await fetch('/api/ai/agents?action=status');\n      const result = await response.json();\n      \n      if (result.success) {\n        setAgents(result.data.agents || []);\n        setCollaborations(result.data.activeCollaborations || []);\n        setPerformance(result.data.performance || {});\n        setError(null);\n      } else {\n        setError(result.error || 'Failed to fetch agent status');\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Network error');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'bg-green-100 text-green-800';\n      case 'busy': return 'bg-yellow-100 text-yellow-800';\n      case 'collaborating': return 'bg-blue-100 text-blue-800';\n      case 'idle': return 'bg-gray-100 text-gray-800';\n      case 'offline': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'active': return <CheckCircle className=\"w-4 h-4\" />;\n      case 'busy': return <Activity className=\"w-4 h-4\" />;\n      case 'collaborating': return <Users className=\"w-4 h-4\" />;\n      case 'idle': return <Clock className=\"w-4 h-4\" />;\n      case 'offline': return <AlertCircle className=\"w-4 h-4\" />;\n      default: return <AlertCircle className=\"w-4 h-4\" />;\n    }\n  };\n\n  const createCollaboration = async () => {\n    try {\n      const response = await fetch('/api/ai/agents', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          action: 'create_collaboration',\n          objective: 'General data analysis and insights',\n          capabilities: ['analytics', 'strategy'],\n          priority: 'medium'\n        })\n      });\n      \n      const result = await response.json();\n      if (result.success) {\n        fetchAgentStatus(); // Refresh data\n      } else {\n        setError(result.error);\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to create collaboration');\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        <div className=\"text-center\">\n          <Brain className=\"w-8 h-8 animate-spin mx-auto mb-2\" />\n          <p>Loading agent status...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <Card className=\"border-red-200\">\n        <CardHeader>\n          <CardTitle className=\"text-red-800 flex items-center gap-2\">\n            <AlertCircle className=\"w-5 h-5\" />\n            Multi-Agent System Error\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-red-600 mb-4\">{error}</p>\n          <Button onClick={fetchAgentStatus} variant=\"outline\">\n            Retry\n          </Button>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold\">Multi-Agent AI System</h2>\n          <p className=\"text-muted-foreground\">Monitor and coordinate AI agent collaborations</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button onClick={createCollaboration} className=\"flex items-center gap-2\">\n            <Users className=\"w-4 h-4\" />\n            Create Collaboration\n          </Button>\n          <Button onClick={fetchAgentStatus} variant=\"outline\">\n            <Activity className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Agents</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{agents.length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {agents.filter(a => a.status === 'active').length} active\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Collaborations</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{collaborations.length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {collaborations.filter(c => c.status === 'active').length} running\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">System Health</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">98%</div>\n            <Progress value={98} className=\"h-2 mt-2\" />\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Tasks Completed</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {agents.reduce((sum, agent) => sum + agent.performance.tasksCompleted, 0)}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">All time</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs defaultValue=\"agents\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"agents\">Agents</TabsTrigger>\n          <TabsTrigger value=\"collaborations\">Collaborations</TabsTrigger>\n          <TabsTrigger value=\"performance\">Performance</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"agents\" className=\"space-y-4\">\n          <div className=\"grid gap-4\">\n            {agents.map((agent) => (\n              <Card key={agent.id}>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <CardTitle className=\"text-lg\">{agent.name}</CardTitle>\n                      <CardDescription>\n                        {agent.type} â€¢ {agent.capabilities.join(', ')}\n                      </CardDescription>\n                    </div>\n                    <Badge className={getStatusColor(agent.status)}>\n                      <span className=\"flex items-center gap-1\">\n                        {getStatusIcon(agent.status)}\n                        {agent.status}\n                      </span>\n                    </Badge>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                    <div>\n                      <p className=\"font-medium\">Tasks Completed</p>\n                      <p className=\"text-muted-foreground\">{agent.performance.tasksCompleted}</p>\n                    </div>\n                    <div>\n                      <p className=\"font-medium\">Success Rate</p>\n                      <p className=\"text-muted-foreground\">\n                        {agent.performance.tasksCompleted > 0 \n                          ? Math.round((agent.performance.tasksSuccessful / agent.performance.tasksCompleted) * 100)\n                          : 0}%\n                      </p>\n                    </div>\n                    <div>\n                      <p className=\"font-medium\">Collaboration Score</p>\n                      <p className=\"text-muted-foreground\">\n                        {Math.round(agent.performance.collaborationScore * 100)}%\n                      </p>\n                    </div>\n                    <div>\n                      <p className=\"font-medium\">Current Tasks</p>\n                      <p className=\"text-muted-foreground\">{agent.currentTasks.length}</p>\n                    </div>\n                  </div>\n                  \n                  {agent.currentTasks.length > 0 && (\n                    <div className=\"mt-4\">\n                      <p className=\"text-sm font-medium mb-2\">Current Tasks:</p>\n                      <div className=\"space-y-1\">\n                        {agent.currentTasks.slice(0, 2).map((task, index) => (\n                          <div key={index} className=\"text-xs p-2 bg-muted rounded\">\n                            {task.description || task.type}\n                          </div>\n                        ))}\n                        {agent.currentTasks.length > 2 && (\n                          <p className=\"text-xs text-muted-foreground\">\n                            +{agent.currentTasks.length - 2} more\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"collaborations\" className=\"space-y-4\">\n          <div className=\"grid gap-4\">\n            {collaborations.map((session) => (\n              <Card key={session.id}>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <CardTitle className=\"text-lg\">{session.objective}</CardTitle>\n                      <CardDescription>\n                        {session.type} collaboration â€¢ {session.participants.length} participants\n                      </CardDescription>\n                    </div>\n                    <Badge className={getStatusColor(session.status)}>\n                      {session.status}\n                    </Badge>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4 text-sm\">\n                    <div>\n                      <p className=\"font-medium\">Started</p>\n                      <p className=\"text-muted-foreground\">\n                        {new Date(session.startedAt).toLocaleDateString()}\n                      </p>\n                    </div>\n                    <div>\n                      <p className=\"font-medium\">Coordinator</p>\n                      <p className=\"text-muted-foreground\">\n                        {agents.find(a => a.id === session.coordinator)?.name || 'Unknown'}\n                      </p>\n                    </div>\n                    <div>\n                      <p className=\"font-medium\">Duration</p>\n                      <p className=\"text-muted-foreground\">\n                        {Math.round((Date.now() - new Date(session.startedAt).getTime()) / (1000 * 60))} min\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n            \n            {collaborations.length === 0 && (\n              <Card>\n                <CardContent className=\"text-center py-8\">\n                  <Users className=\"w-12 h-12 mx-auto mb-4 text-muted-foreground\" />\n                  <h3 className=\"text-lg font-medium mb-2\">No Active Collaborations</h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    Create a collaboration to see agents working together on complex tasks.\n                  </p>\n                  <Button onClick={createCollaboration}>\n                    Start Collaboration\n                  </Button>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"performance\" className=\"space-y-4\">\n          <div className=\"grid gap-4\">\n            {Object.entries(performance).map(([agentName, perf]: [string, any]) => (\n              <Card key={agentName}>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">{agentName}</CardTitle>\n                  <CardDescription>Performance Metrics</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div>\n                      <div className=\"flex justify-between text-sm mb-2\">\n                        <span>Collaboration Score</span>\n                        <span>{Math.round(perf.collaborationScore * 100)}%</span>\n                      </div>\n                      <Progress value={perf.collaborationScore * 100} />\n                    </div>\n                    \n                    <div>\n                      <div className=\"flex justify-between text-sm mb-2\">\n                        <span>Specialty Efficiency</span>\n                        <span>{Math.round(perf.specialtyEfficiency * 100)}%</span>\n                      </div>\n                      <Progress value={perf.specialtyEfficiency * 100} />\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                      <div>\n                        <p className=\"font-medium\">Tasks Completed</p>\n                        <p className=\"text-muted-foreground\">{perf.tasksCompleted}</p>\n                      </div>\n                      <div>\n                        <p className=\"font-medium\">Success Rate</p>\n                        <p className=\"text-muted-foreground\">\n                          {perf.tasksCompleted > 0 \n                            ? Math.round((perf.tasksSuccessful / perf.tasksCompleted) * 100)\n                            : 0}%\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}"],"names":["MultiAgentDashboard","agents","setAgents","useState","collaborations","setCollaborations","performance","setPerformance","loading","setLoading","error","setError","useEffect","fetchAgentStatus","interval","setInterval","clearInterval","response","fetch","result","json","success","data","activeCollaborations","err","Error","message","getStatusColor","status","getStatusIcon","CheckCircle","className","Activity","Users","Clock","AlertCircle","createCollaboration","method","headers","body","JSON","stringify","action","objective","capabilities","priority","div","Brain","p","Card","CardHeader","CardTitle","CardContent","Button","onClick","variant","h2","length","filter","a","c","Progress","value","reduce","sum","agent","tasksCompleted","Tabs","defaultValue","TabsList","TabsTrigger","TabsContent","map","name","CardDescription","type","join","Badge","span","Math","round","tasksSuccessful","collaborationScore","currentTasks","slice","task","index","description","id","session","participants","Date","startedAt","toLocaleDateString","find","coordinator","now","getTime","h3","Object","entries","agentName","perf","specialtyEfficiency"],"mappings":"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"}