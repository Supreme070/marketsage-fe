{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/lib/infrastructure/predictive-infrastructure-manager.ts"],"sourcesContent":["/**\n * Predictive Infrastructure Management System\n * ==========================================\n * AI-powered infrastructure management with auto-scaling and resource optimization\n * \n * Features:\n * - Predictive resource scaling based on usage patterns\n * - Cost optimization through intelligent resource allocation\n * - Performance-driven scaling decisions\n * - African market-aware infrastructure patterns\n * - Multi-service orchestration and health monitoring\n */\n\nimport { logger } from '@/lib/logger';\nimport { trace } from '@opentelemetry/api';\nimport prisma from '@/lib/db/prisma';\nimport { EventEmitter } from 'events';\n\nexport interface InfrastructureResource {\n  id: string;\n  type: 'database' | 'api_server' | 'worker' | 'cache' | 'storage' | 'network';\n  name: string;\n  provider: 'docker' | 'kubernetes' | 'aws' | 'gcp' | 'azure' | 'local';\n  status: 'healthy' | 'warning' | 'critical' | 'scaling' | 'maintenance';\n  metrics: ResourceMetrics;\n  configuration: ResourceConfiguration;\n  scaling: ScalingConfiguration;\n  costs: CostMetrics;\n  location: AfricanRegion;\n  lastUpdated: Date;\n}\n\nexport interface ResourceMetrics {\n  cpu: {\n    usage: number; // 0-100%\n    average: number; // 5-minute average\n    peak: number; // peak in last hour\n    trend: 'increasing' | 'decreasing' | 'stable';\n  };\n  memory: {\n    usage: number; // 0-100%\n    available: number; // MB\n    peak: number;\n    swapUsage: number;\n  };\n  disk: {\n    usage: number; // 0-100%\n    iops: number;\n    throughput: number; // MB/s\n    latency: number; // ms\n  };\n  network: {\n    inbound: number; // MB/s\n    outbound: number; // MB/s\n    connections: number;\n    latency: number; // ms\n  };\n  application: {\n    requestsPerSecond: number;\n    responseTime: number; // ms\n    errorRate: number; // 0-100%\n    activeUsers: number;\n  };\n}\n\nexport interface ResourceConfiguration {\n  minInstances: number;\n  maxInstances: number;\n  currentInstances: number;\n  targetCpuUtilization: number;\n  targetMemoryUtilization: number;\n  scalingPolicy: 'reactive' | 'predictive' | 'scheduled' | 'hybrid';\n  cooldownPeriod: number; // seconds\n  resourceLimits: {\n    cpu: string; // e.g., \"2000m\"\n    memory: string; // e.g., \"4Gi\"\n    storage: string; // e.g., \"100Gi\"\n  };\n}\n\nexport interface ScalingConfiguration {\n  enabled: boolean;\n  triggers: ScalingTrigger[];\n  predictions: ResourcePrediction[];\n  lastScalingAction: Date | null;\n  scalingHistory: ScalingEvent[];\n}\n\nexport interface ScalingTrigger {\n  id: string;\n  type: 'threshold' | 'predictive' | 'scheduled' | 'external';\n  metric: string;\n  condition: 'greater_than' | 'less_than' | 'equals' | 'trend_up' | 'trend_down';\n  value: number;\n  duration: number; // seconds\n  action: 'scale_up' | 'scale_down' | 'scale_to' | 'alert';\n  enabled: boolean;\n  africanMarketAware: boolean; // Consider African peak hours and patterns\n}\n\nexport interface ResourcePrediction {\n  timestamp: Date;\n  horizon: '1h' | '6h' | '24h' | '7d' | '30d';\n  predictedMetrics: Partial<ResourceMetrics>;\n  confidence: number; // 0-1\n  factors: string[]; // e.g., [\"campaign_launch\", \"market_hours\", \"seasonal_trend\"]\n  recommendedAction: 'scale_up' | 'scale_down' | 'maintain' | 'optimize';\n  predictedCost: number;\n  businessImpact: string;\n}\n\nexport interface ScalingEvent {\n  id: string;\n  timestamp: Date;\n  resourceId: string;\n  action: 'scale_up' | 'scale_down' | 'scale_to';\n  trigger: string;\n  fromInstances: number;\n  toInstances: number;\n  reason: string;\n  cost: number;\n  duration: number; // seconds\n  success: boolean;\n  impact: {\n    performanceImprovement: number; // %\n    costChange: number;\n    userExperienceImpact: string;\n  };\n}\n\nexport interface CostMetrics {\n  hourly: number;\n  daily: number;\n  monthly: number;\n  currency: 'USD' | 'NGN' | 'KES' | 'ZAR' | 'GHS';\n  optimization: {\n    potentialSavings: number;\n    efficiency: number; // 0-100%\n    recommendations: string[];\n  };\n}\n\nexport type AfricanRegion = \n  | 'nigeria_lagos' \n  | 'kenya_nairobi' \n  | 'south_africa_cape_town' \n  | 'ghana_accra' \n  | 'egypt_cairo'\n  | 'morocco_casablanca'\n  | 'multi_region';\n\nclass PredictiveInfrastructureManager extends EventEmitter {\n  private resources: Map<string, InfrastructureResource> = new Map();\n  private scalingQueue: ScalingEvent[] = [];\n  private predictionEngine: ResourcePredictionEngine;\n  private costOptimizer: CostOptimizer;\n  private africaAwareScheduler: AfricaAwareScheduler;\n  private monitoringInterval: NodeJS.Timeout | null = null;\n\n  constructor() {\n    super();\n    this.predictionEngine = new ResourcePredictionEngine();\n    this.costOptimizer = new CostOptimizer();\n    this.africaAwareScheduler = new AfricaAwareScheduler();\n    this.initializeInfrastructureDiscovery();\n    this.startMonitoring();\n  }\n\n  /**\n   * Initialize infrastructure discovery and register core resources\n   */\n  private async initializeInfrastructureDiscovery() {\n    // Skip infrastructure discovery during build time\n    const isBuildTime = process.env.NEXT_PHASE === 'phase-production-build' || \n      process.env.BUILDING === 'true' ||\n      process.argv.includes('build') ||\n      (process.argv.includes('next') && process.argv.includes('build'));\n\n    if (isBuildTime) {\n      logger.info('Skipping infrastructure discovery during build');\n      return;\n    }\n\n    try {\n      logger.info('Initializing infrastructure discovery...');\n\n      // Register core MarketSage infrastructure\n      await this.registerCoreInfrastructure();\n      \n      // Start resource health monitoring\n      this.startResourceHealthChecks();\n      \n      // Initialize predictive models\n      await this.predictionEngine.initialize();\n      \n      logger.info('Infrastructure discovery completed', {\n        resourceCount: this.resources.size,\n        regions: Array.from(new Set(Array.from(this.resources.values()).map(r => r.location)))\n      });\n\n    } catch (error) {\n      logger.error('Infrastructure discovery failed', {\n        error: error instanceof Error ? error.message : String(error)\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Register core MarketSage infrastructure components\n   */\n  private async registerCoreInfrastructure() {\n    const coreResources: Partial<InfrastructureResource>[] = [\n      {\n        type: 'database',\n        name: 'PostgreSQL Primary',\n        provider: 'docker',\n        status: 'healthy',\n        location: 'nigeria_lagos',\n        configuration: {\n          minInstances: 1,\n          maxInstances: 3,\n          currentInstances: 1,\n          targetCpuUtilization: 70,\n          targetMemoryUtilization: 80,\n          scalingPolicy: 'hybrid',\n          cooldownPeriod: 300,\n          resourceLimits: {\n            cpu: '2000m',\n            memory: '4Gi',\n            storage: '100Gi'\n          }\n        },\n        scaling: {\n          enabled: true,\n          triggers: [\n            {\n              id: 'cpu_high',\n              type: 'threshold',\n              metric: 'cpu.usage',\n              condition: 'greater_than',\n              value: 80,\n              duration: 300,\n              action: 'scale_up',\n              enabled: true,\n              africanMarketAware: true\n            },\n            {\n              id: 'connections_high',\n              type: 'threshold',\n              metric: 'network.connections',\n              condition: 'greater_than',\n              value: 100,\n              duration: 180,\n              action: 'scale_up',\n              enabled: true,\n              africanMarketAware: false\n            }\n          ],\n          predictions: [],\n          lastScalingAction: null,\n          scalingHistory: []\n        }\n      },\n      {\n        type: 'api_server',\n        name: 'Next.js Application Server',\n        provider: 'docker',\n        status: 'healthy',\n        location: 'multi_region',\n        configuration: {\n          minInstances: 2,\n          maxInstances: 10,\n          currentInstances: 2,\n          targetCpuUtilization: 60,\n          targetMemoryUtilization: 70,\n          scalingPolicy: 'predictive',\n          cooldownPeriod: 180,\n          resourceLimits: {\n            cpu: '1000m',\n            memory: '2Gi',\n            storage: '10Gi'\n          }\n        },\n        scaling: {\n          enabled: true,\n          triggers: [\n            {\n              id: 'response_time_high',\n              type: 'threshold',\n              metric: 'application.responseTime',\n              condition: 'greater_than',\n              value: 2000,\n              duration: 120,\n              action: 'scale_up',\n              enabled: true,\n              africanMarketAware: true\n            },\n            {\n              id: 'requests_per_second_high',\n              type: 'threshold',\n              metric: 'application.requestsPerSecond',\n              condition: 'greater_than',\n              value: 50,\n              duration: 60,\n              action: 'scale_up',\n              enabled: true,\n              africanMarketAware: true\n            }\n          ],\n          predictions: [],\n          lastScalingAction: null,\n          scalingHistory: []\n        }\n      },\n      {\n        type: 'cache',\n        name: 'Redis Cache',\n        provider: 'docker',\n        status: 'healthy',\n        location: 'nigeria_lagos',\n        configuration: {\n          minInstances: 1,\n          maxInstances: 3,\n          currentInstances: 1,\n          targetCpuUtilization: 75,\n          targetMemoryUtilization: 85,\n          scalingPolicy: 'reactive',\n          cooldownPeriod: 240,\n          resourceLimits: {\n            cpu: '500m',\n            memory: '1Gi',\n            storage: '5Gi'\n          }\n        },\n        scaling: {\n          enabled: true,\n          triggers: [\n            {\n              id: 'memory_high',\n              type: 'threshold',\n              metric: 'memory.usage',\n              condition: 'greater_than',\n              value: 90,\n              duration: 60,\n              action: 'scale_up',\n              enabled: true,\n              africanMarketAware: false\n            }\n          ],\n          predictions: [],\n          lastScalingAction: null,\n          scalingHistory: []\n        }\n      },\n      {\n        type: 'worker',\n        name: 'Campaign Processing Workers',\n        provider: 'docker',\n        status: 'healthy',\n        location: 'multi_region',\n        configuration: {\n          minInstances: 1,\n          maxInstances: 8,\n          currentInstances: 1,\n          targetCpuUtilization: 70,\n          targetMemoryUtilization: 75,\n          scalingPolicy: 'scheduled',\n          cooldownPeriod: 120,\n          resourceLimits: {\n            cpu: '1500m',\n            memory: '3Gi',\n            storage: '20Gi'\n          }\n        },\n        scaling: {\n          enabled: true,\n          triggers: [\n            {\n              id: 'campaign_queue_high',\n              type: 'external',\n              metric: 'queue.depth',\n              condition: 'greater_than',\n              value: 10,\n              duration: 30,\n              action: 'scale_up',\n              enabled: true,\n              africanMarketAware: true\n            },\n            {\n              id: 'african_business_hours',\n              type: 'scheduled',\n              metric: 'time.hour',\n              condition: 'equals',\n              value: 8, // 8 AM WAT\n              duration: 0,\n              action: 'scale_up',\n              enabled: true,\n              africanMarketAware: true\n            }\n          ],\n          predictions: [],\n          lastScalingAction: null,\n          scalingHistory: []\n        }\n      }\n    ];\n\n    for (const resourceData of coreResources) {\n      const resource: InfrastructureResource = {\n        id: `resource_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        metrics: this.initializeResourceMetrics(),\n        costs: this.initializeCostMetrics(resourceData.location || 'nigeria_lagos'),\n        lastUpdated: new Date(),\n        ...resourceData\n      } as InfrastructureResource;\n\n      this.resources.set(resource.id, resource);\n    }\n  }\n\n  /**\n   * Initialize default resource metrics\n   */\n  private initializeResourceMetrics(): ResourceMetrics {\n    return {\n      cpu: {\n        usage: Math.random() * 30 + 20, // 20-50% baseline\n        average: Math.random() * 30 + 20,\n        peak: Math.random() * 20 + 60,\n        trend: 'stable'\n      },\n      memory: {\n        usage: Math.random() * 40 + 30, // 30-70% baseline\n        available: Math.random() * 2000 + 1000, // 1-3GB\n        peak: Math.random() * 20 + 70,\n        swapUsage: Math.random() * 10\n      },\n      disk: {\n        usage: Math.random() * 30 + 40, // 40-70% baseline\n        iops: Math.random() * 1000 + 500,\n        throughput: Math.random() * 100 + 50,\n        latency: Math.random() * 5 + 2\n      },\n      network: {\n        inbound: Math.random() * 50 + 10,\n        outbound: Math.random() * 30 + 5,\n        connections: Math.random() * 50 + 10,\n        latency: Math.random() * 50 + 20\n      },\n      application: {\n        requestsPerSecond: Math.random() * 20 + 5,\n        responseTime: Math.random() * 500 + 200,\n        errorRate: Math.random() * 2,\n        activeUsers: Math.random() * 100 + 50\n      }\n    };\n  }\n\n  /**\n   * Initialize cost metrics based on region\n   */\n  private initializeCostMetrics(region: AfricanRegion): CostMetrics {\n    const baseCost = region === 'multi_region' ? 0.12 : 0.08; // USD per hour\n    \n    return {\n      hourly: baseCost,\n      daily: baseCost * 24,\n      monthly: baseCost * 24 * 30,\n      currency: 'USD',\n      optimization: {\n        potentialSavings: Math.random() * 20 + 5,\n        efficiency: Math.random() * 30 + 70,\n        recommendations: [\n          'Consider right-sizing during off-peak hours',\n          'Optimize for African business hours',\n          'Enable predictive scaling'\n        ]\n      }\n    };\n  }\n\n  /**\n   * Start continuous monitoring and optimization\n   */\n  private startMonitoring() {\n    // Monitor every 30 seconds\n    this.monitoringInterval = setInterval(async () => {\n      await this.performMonitoringCycle();\n    }, 30000);\n\n    // Generate predictions every 5 minutes\n    setInterval(async () => {\n      await this.generatePredictions();\n    }, 300000);\n\n    // Cost optimization every hour\n    setInterval(async () => {\n      await this.optimizeCosts();\n    }, 3600000);\n\n    logger.info('Infrastructure monitoring started');\n  }\n\n  /**\n   * Start resource health checks\n   */\n  private startResourceHealthChecks() {\n    // Health check interval: every 30 seconds\n    setInterval(async () => {\n      try {\n        for (const [resourceId, resource] of this.resources) {\n          await this.checkResourceHealth(resourceId, resource);\n        }\n      } catch (error) {\n        logger.error('Health check cycle failed', { error });\n      }\n    }, 30000);\n\n    logger.info('Resource health checks started');\n  }\n\n  /**\n   * Check health of a specific resource\n   */\n  private async checkResourceHealth(resourceId: string, resource: InfrastructureResource) {\n    try {\n      const newMetrics = await this.collectResourceMetrics(resource);\n      \n      // Update resource with new metrics\n      resource.metrics = newMetrics;\n      resource.lastUpdated = new Date();\n      \n      // Determine health status\n      const healthStatus = this.calculateHealthStatus(newMetrics);\n      if (resource.status !== healthStatus) {\n        resource.status = healthStatus;\n        this.emit('resourceStatusChanged', { resourceId, oldStatus: resource.status, newStatus: healthStatus });\n      }\n      \n      this.resources.set(resourceId, resource);\n      \n    } catch (error) {\n      logger.error('Failed to check resource health', { resourceId, error });\n      resource.status = 'critical';\n      this.resources.set(resourceId, resource);\n    }\n  }\n\n  /**\n   * Calculate health status based on metrics\n   */\n  private calculateHealthStatus(metrics: ResourceMetrics): InfrastructureResource['status'] {\n    const { cpu, memory, disk } = metrics;\n    \n    // Critical thresholds\n    if (cpu.usage > 90 || memory.usage > 95 || disk.usage > 95) {\n      return 'critical';\n    }\n    \n    // Warning thresholds\n    if (cpu.usage > 75 || memory.usage > 85 || disk.usage > 85) {\n      return 'warning';\n    }\n    \n    return 'healthy';\n  }\n\n  /**\n   * Perform a complete monitoring cycle\n   */\n  private async performMonitoringCycle() {\n    const tracer = trace.getTracer('infrastructure-monitoring');\n    \n    return tracer.startActiveSpan('monitoring-cycle', async (span) => {\n      try {\n        span.setAttributes({\n          'monitoring.resources.count': this.resources.size,\n          'monitoring.cycle.timestamp': Date.now()\n        });\n\n        // Update resource metrics\n        await this.updateResourceMetrics();\n        \n        // Check scaling triggers\n        await this.checkScalingTriggers();\n        \n        // Process scaling queue\n        await this.processScalingQueue();\n        \n        // Update health status\n        await this.updateHealthStatus();\n        \n        // Emit monitoring event\n        this.emit('monitoring_cycle_complete', {\n          timestamp: new Date(),\n          resourceCount: this.resources.size,\n          healthyResources: Array.from(this.resources.values()).filter(r => r.status === 'healthy').length\n        });\n\n      } catch (error) {\n        span.setStatus({ code: 2, message: String(error) });\n        logger.error('Monitoring cycle failed', {\n          error: error instanceof Error ? error.message : String(error)\n        });\n      } finally {\n        span.end();\n      }\n    });\n  }\n\n  /**\n   * Update metrics for all resources\n   */\n  private async updateResourceMetrics() {\n    for (const [resourceId, resource] of this.resources.entries()) {\n      try {\n        // Simulate metric collection (in production, this would call actual monitoring APIs)\n        const updatedMetrics = await this.collectResourceMetrics(resource);\n        \n        resource.metrics = updatedMetrics;\n        resource.lastUpdated = new Date();\n        \n        this.resources.set(resourceId, resource);\n        \n      } catch (error) {\n        logger.error('Failed to update metrics for resource', {\n          resourceId,\n          resourceName: resource.name,\n          error: error instanceof Error ? error.message : String(error)\n        });\n      }\n    }\n  }\n\n  /**\n   * Simulate resource metrics collection\n   */\n  private async collectResourceMetrics(resource: InfrastructureResource): Promise<ResourceMetrics> {\n    // In production, this would integrate with actual monitoring systems\n    // For now, simulate realistic metrics with trends\n    \n    const current = resource.metrics;\n    const variation = 0.1; // 10% variation\n    \n    return {\n      cpu: {\n        usage: Math.max(0, Math.min(100, current.cpu.usage + (Math.random() - 0.5) * variation * 100)),\n        average: current.cpu.average * 0.9 + current.cpu.usage * 0.1, // Moving average\n        peak: Math.max(current.cpu.peak, current.cpu.usage),\n        trend: this.calculateTrend(current.cpu.usage, current.cpu.average)\n      },\n      memory: {\n        usage: Math.max(0, Math.min(100, current.memory.usage + (Math.random() - 0.5) * variation * 100)),\n        available: current.memory.available + (Math.random() - 0.5) * 200,\n        peak: Math.max(current.memory.peak, current.memory.usage),\n        swapUsage: Math.max(0, current.memory.swapUsage + (Math.random() - 0.5) * 5)\n      },\n      disk: {\n        usage: Math.max(0, Math.min(100, current.disk.usage + (Math.random() - 0.5) * variation * 20)),\n        iops: Math.max(0, current.disk.iops + (Math.random() - 0.5) * 200),\n        throughput: Math.max(0, current.disk.throughput + (Math.random() - 0.5) * 20),\n        latency: Math.max(1, current.disk.latency + (Math.random() - 0.5) * 2)\n      },\n      network: {\n        inbound: Math.max(0, current.network.inbound + (Math.random() - 0.5) * 10),\n        outbound: Math.max(0, current.network.outbound + (Math.random() - 0.5) * 5),\n        connections: Math.max(0, current.network.connections + (Math.random() - 0.5) * 10),\n        latency: Math.max(1, current.network.latency + (Math.random() - 0.5) * 10)\n      },\n      application: {\n        requestsPerSecond: Math.max(0, current.application.requestsPerSecond + (Math.random() - 0.5) * 5),\n        responseTime: Math.max(50, current.application.responseTime + (Math.random() - 0.5) * 100),\n        errorRate: Math.max(0, Math.min(100, current.application.errorRate + (Math.random() - 0.5) * 1)),\n        activeUsers: Math.max(0, current.application.activeUsers + (Math.random() - 0.5) * 20)\n      }\n    };\n  }\n\n  /**\n   * Calculate trend direction\n   */\n  private calculateTrend(current: number, average: number): 'increasing' | 'decreasing' | 'stable' {\n    const diff = current - average;\n    const threshold = average * 0.05; // 5% threshold\n    \n    if (diff > threshold) return 'increasing';\n    if (diff < -threshold) return 'decreasing';\n    return 'stable';\n  }\n\n  /**\n   * Check scaling triggers for all resources\n   */\n  private async checkScalingTriggers() {\n    for (const resource of this.resources.values()) {\n      if (!resource.scaling.enabled) continue;\n      \n      for (const trigger of resource.scaling.triggers) {\n        if (!trigger.enabled) continue;\n        \n        const shouldScale = await this.evaluateScalingTrigger(resource, trigger);\n        \n        if (shouldScale) {\n          await this.queueScalingAction(resource, trigger);\n        }\n      }\n    }\n  }\n\n  /**\n   * Evaluate a scaling trigger\n   */\n  private async evaluateScalingTrigger(\n    resource: InfrastructureResource, \n    trigger: ScalingTrigger\n  ): Promise<boolean> {\n    try {\n      const metricValue = this.getMetricValue(resource, trigger.metric);\n      \n      // Apply African market awareness\n      if (trigger.africanMarketAware) {\n        const isAfricanBusinessHours = this.africaAwareScheduler.isBusinessHours(resource.location);\n        const marketFactor = isAfricanBusinessHours ? 1.2 : 0.8; // More aggressive scaling during business hours\n        trigger.value = trigger.value * marketFactor;\n      }\n      \n      switch (trigger.condition) {\n        case 'greater_than':\n          return metricValue > trigger.value;\n        case 'less_than':\n          return metricValue < trigger.value;\n        case 'equals':\n          return Math.abs(metricValue - trigger.value) < 0.01;\n        case 'trend_up':\n          return resource.metrics.cpu.trend === 'increasing' && metricValue > trigger.value;\n        case 'trend_down':\n          return resource.metrics.cpu.trend === 'decreasing' && metricValue < trigger.value;\n        default:\n          return false;\n      }\n      \n    } catch (error) {\n      logger.error('Error evaluating scaling trigger', {\n        resourceId: resource.id,\n        triggerId: trigger.id,\n        error: error instanceof Error ? error.message : String(error)\n      });\n      return false;\n    }\n  }\n\n  /**\n   * Get metric value by path\n   */\n  private getMetricValue(resource: InfrastructureResource, metricPath: string): number {\n    const parts = metricPath.split('.');\n    let value: any = resource.metrics;\n    \n    for (const part of parts) {\n      value = value?.[part];\n    }\n    \n    return typeof value === 'number' ? value : 0;\n  }\n\n  /**\n   * Queue a scaling action\n   */\n  private async queueScalingAction(resource: InfrastructureResource, trigger: ScalingTrigger) {\n    // Check cooldown period\n    if (resource.scaling.lastScalingAction) {\n      const timeSinceLastScaling = Date.now() - resource.scaling.lastScalingAction.getTime();\n      if (timeSinceLastScaling < resource.configuration.cooldownPeriod * 1000) {\n        return; // Still in cooldown\n      }\n    }\n    \n    const scalingEvent: ScalingEvent = {\n      id: `scaling_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      timestamp: new Date(),\n      resourceId: resource.id,\n      action: trigger.action,\n      trigger: trigger.id,\n      fromInstances: resource.configuration.currentInstances,\n      toInstances: this.calculateTargetInstances(resource, trigger.action),\n      reason: `Triggered by ${trigger.type}: ${trigger.metric} ${trigger.condition} ${trigger.value}`,\n      cost: 0, // Will be calculated during execution\n      duration: 0,\n      success: false,\n      impact: {\n        performanceImprovement: 0,\n        costChange: 0,\n        userExperienceImpact: 'pending'\n      }\n    };\n    \n    this.scalingQueue.push(scalingEvent);\n    \n    logger.info('Scaling action queued', {\n      resourceId: resource.id,\n      resourceName: resource.name,\n      action: trigger.action,\n      trigger: trigger.id,\n      fromInstances: scalingEvent.fromInstances,\n      toInstances: scalingEvent.toInstances\n    });\n  }\n\n  /**\n   * Calculate target instances for scaling action\n   */\n  private calculateTargetInstances(resource: InfrastructureResource, action: string): number {\n    const current = resource.configuration.currentInstances;\n    const min = resource.configuration.minInstances;\n    const max = resource.configuration.maxInstances;\n    \n    switch (action) {\n      case 'scale_up':\n        return Math.min(max, Math.ceil(current * 1.5)); // Scale up by 50%\n      case 'scale_down':\n        return Math.max(min, Math.floor(current * 0.7)); // Scale down by 30%\n      case 'scale_to':\n        return current; // This would be specified by the trigger\n      default:\n        return current;\n    }\n  }\n\n  /**\n   * Process queued scaling actions\n   */\n  private async processScalingQueue() {\n    while (this.scalingQueue.length > 0) {\n      const scalingEvent = this.scalingQueue.shift()!;\n      \n      try {\n        await this.executeScalingAction(scalingEvent);\n      } catch (error) {\n        logger.error('Failed to execute scaling action', {\n          scalingEventId: scalingEvent.id,\n          error: error instanceof Error ? error.message : String(error)\n        });\n      }\n    }\n  }\n\n  /**\n   * Execute a scaling action\n   */\n  private async executeScalingAction(scalingEvent: ScalingEvent) {\n    const tracer = trace.getTracer('infrastructure-scaling');\n    \n    return tracer.startActiveSpan('execute-scaling', async (span) => {\n      const startTime = Date.now();\n      \n      try {\n        span.setAttributes({\n          'scaling.resource.id': scalingEvent.resourceId,\n          'scaling.action': scalingEvent.action,\n          'scaling.from_instances': scalingEvent.fromInstances,\n          'scaling.to_instances': scalingEvent.toInstances\n        });\n\n        const resource = this.resources.get(scalingEvent.resourceId);\n        if (!resource) {\n          throw new Error(`Resource not found: ${scalingEvent.resourceId}`);\n        }\n\n        // Update resource status\n        resource.status = 'scaling';\n        \n        // Simulate scaling execution (in production, this would call actual scaling APIs)\n        await this.performActualScaling(resource, scalingEvent);\n        \n        // Update resource configuration\n        resource.configuration.currentInstances = scalingEvent.toInstances;\n        resource.scaling.lastScalingAction = new Date();\n        resource.status = 'healthy';\n        \n        // Calculate scaling impact\n        const endTime = Date.now();\n        scalingEvent.duration = endTime - startTime;\n        scalingEvent.success = true;\n        scalingEvent.cost = this.calculateScalingCost(resource, scalingEvent);\n        scalingEvent.impact = this.calculateScalingImpact(resource, scalingEvent);\n        \n        // Add to scaling history\n        resource.scaling.scalingHistory.push(scalingEvent);\n        \n        // Update resource in map\n        this.resources.set(resource.id, resource);\n        \n        // Emit scaling event\n        this.emit('scaling_completed', {\n          resourceId: resource.id,\n          resourceName: resource.name,\n          scalingEvent\n        });\n        \n        logger.info('Scaling action completed successfully', {\n          resourceId: resource.id,\n          resourceName: resource.name,\n          action: scalingEvent.action,\n          duration: scalingEvent.duration,\n          cost: scalingEvent.cost,\n          newInstanceCount: resource.configuration.currentInstances\n        });\n\n      } catch (error) {\n        scalingEvent.success = false;\n        scalingEvent.duration = Date.now() - startTime;\n        \n        span.setStatus({ code: 2, message: String(error) });\n        throw error;\n      } finally {\n        span.end();\n      }\n    });\n  }\n\n  /**\n   * Simulate actual scaling operation\n   */\n  private async performActualScaling(resource: InfrastructureResource, scalingEvent: ScalingEvent) {\n    // In production, this would integrate with actual infrastructure APIs\n    // Docker, Kubernetes, cloud providers, etc.\n    \n    const scalingTime = Math.random() * 30000 + 10000; // 10-40 seconds\n    await new Promise(resolve => setTimeout(resolve, scalingTime));\n    \n    logger.info('Simulated scaling operation', {\n      resourceType: resource.type,\n      provider: resource.provider,\n      action: scalingEvent.action,\n      duration: scalingTime\n    });\n  }\n\n  /**\n   * Calculate scaling cost\n   */\n  private calculateScalingCost(resource: InfrastructureResource, scalingEvent: ScalingEvent): number {\n    const instanceDiff = scalingEvent.toInstances - scalingEvent.fromInstances;\n    const hourlyInstanceCost = resource.costs.hourly / resource.configuration.currentInstances;\n    \n    // Calculate additional cost per hour\n    return instanceDiff * hourlyInstanceCost;\n  }\n\n  /**\n   * Calculate scaling impact\n   */\n  private calculateScalingImpact(resource: InfrastructureResource, scalingEvent: ScalingEvent) {\n    const instanceRatio = scalingEvent.toInstances / scalingEvent.fromInstances;\n    \n    return {\n      performanceImprovement: scalingEvent.action === 'scale_up' ? (instanceRatio - 1) * 100 : 0,\n      costChange: this.calculateScalingCost(resource, scalingEvent),\n      userExperienceImpact: scalingEvent.action === 'scale_up' ? 'improved' : 'maintained'\n    };\n  }\n\n  /**\n   * Generate resource predictions\n   */\n  private async generatePredictions() {\n    for (const resource of this.resources.values()) {\n      try {\n        const predictions = await this.predictionEngine.generatePredictions(resource);\n        resource.scaling.predictions = predictions;\n        \n        // Check if predictive actions are needed\n        for (const prediction of predictions) {\n          if (prediction.recommendedAction !== 'maintain' && prediction.confidence > 0.7) {\n            await this.considerPredictiveScaling(resource, prediction);\n          }\n        }\n        \n      } catch (error) {\n        logger.error('Failed to generate predictions for resource', {\n          resourceId: resource.id,\n          error: error instanceof Error ? error.message : String(error)\n        });\n      }\n    }\n  }\n\n  /**\n   * Consider predictive scaling based on prediction\n   */\n  private async considerPredictiveScaling(resource: InfrastructureResource, prediction: ResourcePrediction) {\n    // Only act on high-confidence predictions for significant horizons\n    if (prediction.confidence < 0.8 || !['6h', '24h'].includes(prediction.horizon)) {\n      return;\n    }\n    \n    // Create predictive scaling trigger\n    const predictiveTrigger: ScalingTrigger = {\n      id: `predictive_${Date.now()}`,\n      type: 'predictive',\n      metric: 'prediction.confidence',\n      condition: 'greater_than',\n      value: 0.8,\n      duration: 0,\n      action: prediction.recommendedAction as any,\n      enabled: true,\n      africanMarketAware: true\n    };\n    \n    await this.queueScalingAction(resource, predictiveTrigger);\n    \n    logger.info('Predictive scaling triggered', {\n      resourceId: resource.id,\n      horizon: prediction.horizon,\n      confidence: prediction.confidence,\n      recommendedAction: prediction.recommendedAction,\n      factors: prediction.factors\n    });\n  }\n\n  /**\n   * Update health status for all resources\n   */\n  private async updateHealthStatus() {\n    for (const resource of this.resources.values()) {\n      const previousStatus = resource.status;\n      \n      if (resource.status === 'scaling') {\n        continue; // Don't update status during scaling\n      }\n      \n      // Determine health based on metrics\n      const healthScore = this.calculateHealthScore(resource);\n      \n      if (healthScore >= 90) {\n        resource.status = 'healthy';\n      } else if (healthScore >= 70) {\n        resource.status = 'warning';\n      } else {\n        resource.status = 'critical';\n      }\n      \n      // Emit status change events\n      if (previousStatus !== resource.status) {\n        this.emit('resource_status_changed', {\n          resourceId: resource.id,\n          resourceName: resource.name,\n          previousStatus,\n          newStatus: resource.status,\n          healthScore\n        });\n      }\n    }\n  }\n\n  /**\n   * Calculate resource health score\n   */\n  private calculateHealthScore(resource: InfrastructureResource): number {\n    const weights = {\n      cpu: 0.25,\n      memory: 0.25,\n      disk: 0.15,\n      network: 0.15,\n      application: 0.20\n    };\n    \n    const scores = {\n      cpu: Math.max(0, 100 - resource.metrics.cpu.usage),\n      memory: Math.max(0, 100 - resource.metrics.memory.usage),\n      disk: Math.max(0, 100 - resource.metrics.disk.usage),\n      network: Math.min(100, Math.max(0, 100 - resource.metrics.network.latency)),\n      application: Math.max(0, 100 - resource.metrics.application.errorRate)\n    };\n    \n    return Object.entries(weights).reduce((total, [metric, weight]) => {\n      return total + (scores[metric as keyof typeof scores] * weight);\n    }, 0);\n  }\n\n  /**\n   * Optimize costs across all resources\n   */\n  private async optimizeCosts() {\n    try {\n      const optimizations = await this.costOptimizer.generateOptimizations(Array.from(this.resources.values()));\n      \n      for (const optimization of optimizations) {\n        logger.info('Cost optimization recommendation', optimization);\n        \n        // Apply automatic optimizations if they're safe\n        if (optimization.autoApply && optimization.riskLevel === 'low') {\n          await this.applyCostOptimization(optimization);\n        }\n      }\n      \n    } catch (error) {\n      logger.error('Cost optimization failed', {\n        error: error instanceof Error ? error.message : String(error)\n      });\n    }\n  }\n\n  /**\n   * Apply cost optimization\n   */\n  private async applyCostOptimization(optimization: any) {\n    logger.info('Applying cost optimization', optimization);\n    // Implementation would depend on the specific optimization\n  }\n\n  /**\n   * Get current infrastructure status\n   */\n  async getInfrastructureStatus() {\n    const resources = Array.from(this.resources.values());\n    \n    return {\n      overview: {\n        totalResources: resources.length,\n        healthyResources: resources.filter(r => r.status === 'healthy').length,\n        warningResources: resources.filter(r => r.status === 'warning').length,\n        criticalResources: resources.filter(r => r.status === 'critical').length,\n        scalingResources: resources.filter(r => r.status === 'scaling').length\n      },\n      resources: resources,\n      totalCost: {\n        hourly: resources.reduce((sum, r) => sum + r.costs.hourly, 0),\n        daily: resources.reduce((sum, r) => sum + r.costs.daily, 0),\n        monthly: resources.reduce((sum, r) => sum + r.costs.monthly, 0)\n      },\n      recentScalingEvents: resources\n        .flatMap(r => r.scaling.scalingHistory)\n        .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())\n        .slice(0, 10),\n      predictions: resources\n        .flatMap(r => r.scaling.predictions)\n        .filter(p => p.confidence > 0.7)\n        .sort((a, b) => b.confidence - a.confidence)\n        .slice(0, 5)\n    };\n  }\n\n  /**\n   * Force scaling action for a resource\n   */\n  async forceScaling(resourceId: string, action: 'scale_up' | 'scale_down' | 'scale_to', targetInstances?: number) {\n    const resource = this.resources.get(resourceId);\n    if (!resource) {\n      throw new Error(`Resource not found: ${resourceId}`);\n    }\n    \n    const scalingEvent: ScalingEvent = {\n      id: `manual_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      timestamp: new Date(),\n      resourceId,\n      action,\n      trigger: 'manual',\n      fromInstances: resource.configuration.currentInstances,\n      toInstances: targetInstances || this.calculateTargetInstances(resource, action),\n      reason: 'Manual scaling action',\n      cost: 0,\n      duration: 0,\n      success: false,\n      impact: {\n        performanceImprovement: 0,\n        costChange: 0,\n        userExperienceImpact: 'pending'\n      }\n    };\n    \n    this.scalingQueue.push(scalingEvent);\n    \n    logger.info('Manual scaling action queued', {\n      resourceId,\n      action,\n      targetInstances: scalingEvent.toInstances\n    });\n    \n    return scalingEvent.id;\n  }\n\n  /**\n   * Cleanup and stop monitoring\n   */\n  destroy() {\n    if (this.monitoringInterval) {\n      clearInterval(this.monitoringInterval);\n      this.monitoringInterval = null;\n    }\n    \n    this.removeAllListeners();\n    logger.info('Predictive infrastructure manager destroyed');\n  }\n}\n\n/**\n * Resource Prediction Engine\n */\nclass ResourcePredictionEngine {\n  async initialize() {\n    logger.info('Resource prediction engine initialized');\n  }\n\n  async generatePredictions(resource: InfrastructureResource): Promise<ResourcePrediction[]> {\n    const horizons: Array<'1h' | '6h' | '24h' | '7d' | '30d'> = ['1h', '6h', '24h', '7d', '30d'];\n    \n    return horizons.map(horizon => ({\n      timestamp: new Date(),\n      horizon,\n      predictedMetrics: this.predictMetrics(resource, horizon),\n      confidence: this.calculateConfidence(resource, horizon),\n      factors: this.identifyFactors(resource, horizon),\n      recommendedAction: this.recommendAction(resource, horizon),\n      predictedCost: this.predictCost(resource, horizon),\n      businessImpact: this.predictBusinessImpact(resource, horizon)\n    }));\n  }\n\n  private predictMetrics(resource: InfrastructureResource, horizon: string): Partial<ResourceMetrics> {\n    // Simple trend-based prediction (in production, would use ML models)\n    const factor = horizon === '1h' ? 1.05 : horizon === '6h' ? 1.15 : 1.3;\n    \n    return {\n      cpu: {\n        usage: Math.min(100, resource.metrics.cpu.usage * factor),\n        average: resource.metrics.cpu.average * factor,\n        peak: resource.metrics.cpu.peak * factor,\n        trend: resource.metrics.cpu.trend\n      },\n      application: {\n        requestsPerSecond: resource.metrics.application.requestsPerSecond * factor,\n        responseTime: resource.metrics.application.responseTime * factor,\n        errorRate: resource.metrics.application.errorRate,\n        activeUsers: resource.metrics.application.activeUsers * factor\n      }\n    };\n  }\n\n  private calculateConfidence(resource: InfrastructureResource, horizon: string): number {\n    // Confidence decreases with longer horizons\n    const baseConfidence = 0.9;\n    const horizonPenalty = horizon === '1h' ? 0 : horizon === '6h' ? 0.1 : horizon === '24h' ? 0.2 : 0.4;\n    \n    return Math.max(0.5, baseConfidence - horizonPenalty);\n  }\n\n  private identifyFactors(resource: InfrastructureResource, horizon: string): string[] {\n    const factors = ['historical_trend', 'resource_utilization'];\n    \n    if (resource.location !== 'multi_region') {\n      factors.push('african_business_hours');\n    }\n    \n    if (horizon === '24h' || horizon === '7d') {\n      factors.push('daily_patterns', 'weekly_cycles');\n    }\n    \n    return factors;\n  }\n\n  private recommendAction(resource: InfrastructureResource, horizon: string): 'scale_up' | 'scale_down' | 'maintain' | 'optimize' {\n    const cpuTrend = resource.metrics.cpu.trend;\n    const currentUsage = resource.metrics.cpu.usage;\n    \n    if (cpuTrend === 'increasing' && currentUsage > 70) {\n      return 'scale_up';\n    } else if (cpuTrend === 'decreasing' && currentUsage < 30) {\n      return 'scale_down';\n    } else if (currentUsage > 80) {\n      return 'optimize';\n    }\n    \n    return 'maintain';\n  }\n\n  private predictCost(resource: InfrastructureResource, horizon: string): number {\n    const multiplier = horizon === '1h' ? 1 : horizon === '6h' ? 6 : horizon === '24h' ? 24 : 168;\n    return resource.costs.hourly * multiplier;\n  }\n\n  private predictBusinessImpact(resource: InfrastructureResource, horizon: string): string {\n    const usage = resource.metrics.cpu.usage;\n    \n    if (usage > 80) {\n      return 'High load may impact user experience';\n    } else if (usage < 30) {\n      return 'Low utilization presents cost optimization opportunity';\n    }\n    \n    return 'Stable performance expected';\n  }\n}\n\n/**\n * Cost Optimizer\n */\nclass CostOptimizer {\n  async generateOptimizations(resources: InfrastructureResource[]): Promise<any[]> {\n    const optimizations = [];\n    \n    for (const resource of resources) {\n      // Check for over-provisioning\n      if (resource.metrics.cpu.usage < 30 && resource.metrics.memory.usage < 40) {\n        optimizations.push({\n          type: 'right_sizing',\n          resourceId: resource.id,\n          resourceName: resource.name,\n          description: 'Resource appears over-provisioned',\n          potentialSavings: resource.costs.hourly * 0.3,\n          riskLevel: 'low',\n          autoApply: true\n        });\n      }\n      \n      // Check for African off-peak optimization\n      if (resource.location !== 'multi_region' && resource.scaling.enabled) {\n        optimizations.push({\n          type: 'african_off_peak_scaling',\n          resourceId: resource.id,\n          resourceName: resource.name,\n          description: 'Scale down during African off-peak hours',\n          potentialSavings: resource.costs.daily * 0.2,\n          riskLevel: 'medium',\n          autoApply: false\n        });\n      }\n    }\n    \n    return optimizations;\n  }\n}\n\n/**\n * Africa-Aware Scheduler\n */\nclass AfricaAwareScheduler {\n  isBusinessHours(region: AfricanRegion): boolean {\n    const now = new Date();\n    const hour = now.getHours();\n    \n    // African business hours: 8 AM to 6 PM local time\n    const businessStart = 8;\n    const businessEnd = 18;\n    \n    // Adjust for different African time zones\n    let adjustedHour = hour;\n    \n    switch (region) {\n      case 'nigeria_lagos':\n      case 'ghana_accra':\n        adjustedHour = hour; // WAT (UTC+1)\n        break;\n      case 'kenya_nairobi':\n        adjustedHour = hour - 2; // EAT (UTC+3)\n        break;\n      case 'south_africa_cape_town':\n        adjustedHour = hour - 1; // SAST (UTC+2)\n        break;\n      case 'egypt_cairo':\n        adjustedHour = hour - 1; // EET (UTC+2)\n        break;\n      case 'morocco_casablanca':\n        adjustedHour = hour + 1; // WET (UTC+0)\n        break;\n      default:\n        adjustedHour = hour; // Default to WAT\n    }\n    \n    return adjustedHour >= businessStart && adjustedHour < businessEnd;\n  }\n  \n  getNextBusinessHour(region: AfricanRegion): Date {\n    const tomorrow = new Date();\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    tomorrow.setHours(8, 0, 0, 0); // 8 AM next day\n    \n    return tomorrow;\n  }\n}\n\n// Export singleton instance\nexport const predictiveInfrastructureManager = new PredictiveInfrastructureManager();\n\n// Export types and classes\nexport {\n  PredictiveInfrastructureManager,\n  ResourcePredictionEngine,\n  CostOptimizer,\n  AfricaAwareScheduler\n};"],"names":["AfricaAwareScheduler","CostOptimizer","PredictiveInfrastructureManager","ResourcePredictionEngine","predictiveInfrastructureManager","EventEmitter","constructor","resources","Map","scalingQueue","monitoringInterval","predictionEngine","costOptimizer","africaAwareScheduler","initializeInfrastructureDiscovery","startMonitoring","isBuildTime","process","env","NEXT_PHASE","BUILDING","argv","includes","logger","info","registerCoreInfrastructure","startResourceHealthChecks","initialize","resourceCount","size","regions","Array","from","Set","values","map","r","location","error","Error","message","String","coreResources","type","name","provider","status","configuration","minInstances","maxInstances","currentInstances","targetCpuUtilization","targetMemoryUtilization","scalingPolicy","cooldownPeriod","resourceLimits","cpu","memory","storage","scaling","enabled","triggers","id","metric","condition","value","duration","action","africanMarketAware","predictions","lastScalingAction","scalingHistory","resourceData","resource","Date","now","Math","random","toString","substr","metrics","initializeResourceMetrics","costs","initializeCostMetrics","lastUpdated","set","usage","average","peak","trend","available","swapUsage","disk","iops","throughput","latency","network","inbound","outbound","connections","application","requestsPerSecond","responseTime","errorRate","activeUsers","region","baseCost","hourly","daily","monthly","currency","optimization","potentialSavings","efficiency","recommendations","setInterval","performMonitoringCycle","generatePredictions","optimizeCosts","resourceId","checkResourceHealth","newMetrics","collectResourceMetrics","healthStatus","calculateHealthStatus","emit","oldStatus","newStatus","tracer","trace","getTracer","startActiveSpan","span","setAttributes","updateResourceMetrics","checkScalingTriggers","processScalingQueue","updateHealthStatus","timestamp","healthyResources","filter","length","setStatus","code","end","entries","updatedMetrics","resourceName","current","variation","max","min","calculateTrend","diff","threshold","trigger","shouldScale","evaluateScalingTrigger","queueScalingAction","metricValue","getMetricValue","isAfricanBusinessHours","isBusinessHours","marketFactor","abs","triggerId","metricPath","parts","split","part","timeSinceLastScaling","getTime","scalingEvent","fromInstances","toInstances","calculateTargetInstances","reason","cost","success","impact","performanceImprovement","costChange","userExperienceImpact","push","ceil","floor","shift","executeScalingAction","scalingEventId","startTime","get","performActualScaling","endTime","calculateScalingCost","calculateScalingImpact","newInstanceCount","scalingTime","Promise","resolve","setTimeout","resourceType","instanceDiff","hourlyInstanceCost","instanceRatio","prediction","recommendedAction","confidence","considerPredictiveScaling","horizon","predictiveTrigger","factors","previousStatus","healthScore","calculateHealthScore","weights","scores","Object","reduce","total","weight","optimizations","generateOptimizations","autoApply","riskLevel","applyCostOptimization","getInfrastructureStatus","overview","totalResources","warningResources","criticalResources","scalingResources","totalCost","sum","recentScalingEvents","flatMap","sort","a","b","slice","p","forceScaling","targetInstances","destroy","clearInterval","removeAllListeners","horizons","predictedMetrics","predictMetrics","calculateConfidence","identifyFactors","recommendAction","predictedCost","predictCost","businessImpact","predictBusinessImpact","factor","baseConfidence","horizonPenalty","cpuTrend","currentUsage","multiplier","description","hour","getHours","businessStart","businessEnd","adjustedHour","getNextBusinessHour","tomorrow","setDate","getDate","setHours"],"mappings":"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"}