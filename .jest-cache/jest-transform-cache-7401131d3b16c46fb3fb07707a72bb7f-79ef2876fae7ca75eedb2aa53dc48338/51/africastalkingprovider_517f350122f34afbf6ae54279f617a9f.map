{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/lib/sms-providers/africastalking-provider.ts"],"sourcesContent":["import { BaseSMSProvider, type SMSResult } from './base-provider';\n\n// Africa's Talking SMS provider for African markets\nexport class AfricasTalkingSMSProvider extends BaseSMSProvider {\n  name = 'Africa\\'s Talking';\n  \n  private apiKey: string;\n  private username: string;\n  private senderId: string;\n\n  constructor(config?: { apiKey?: string; username?: string; fromNumber?: string }) {\n    super();\n    // Use provided config or fall back to environment variables\n    this.apiKey = config?.apiKey || process.env.AFRICASTALKING_API_KEY || '';\n    this.username = config?.username || process.env.AFRICASTALKING_USERNAME || '';\n    this.senderId = config?.fromNumber || process.env.AFRICASTALKING_SENDER_ID || 'MarketSage';\n  }\n\n  async sendSMS(phoneNumber: string, message: string): Promise<SMSResult> {\n    try {\n      // Validate phone number format\n      if (!this.validatePhoneNumber(phoneNumber)) {\n        return {\n          success: false,\n          error: {\n            message: `Invalid phone number format: ${phoneNumber}`,\n            code: 'INVALID_PHONE_NUMBER'\n          }\n        };\n      }\n\n      // If not configured, fall back to mock behavior for development\n      if (!this.isConfigured()) {\n        console.log(`[MOCK Africa's Talking] Would send to ${phoneNumber}: ${message}`);\n        return {\n          success: true,\n          messageId: `mock_at_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        };\n      }\n\n      // Format phone number for Africa's Talking (ensure country code)\n      const formattedPhone = this.formatPhoneNumber(phoneNumber);\n\n      const requestBody = {\n        username: this.username,\n        to: formattedPhone,\n        message: message,\n        from: this.senderId\n      };\n\n      const response = await fetch('https://api.africastalking.com/version1/messaging', {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/x-www-form-urlencoded',\n          'apiKey': this.apiKey\n        },\n        body: new URLSearchParams(requestBody)\n      });\n\n      const responseData = await response.json();\n\n      if (!response.ok) {\n        throw new Error(responseData.message || 'Africa\\'s Talking API request failed');\n      }\n\n      // Check if SMS was sent successfully\n      const recipient = responseData.SMSMessageData?.Recipients?.[0];\n      if (recipient && recipient.status === 'Success') {\n        return {\n          success: true,\n          messageId: recipient.messageId || `at_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        };\n      } else {\n        return {\n          success: false,\n          error: {\n            message: recipient?.status || 'Unknown error from Africa\\'s Talking',\n            code: 'AFRICASTALKING_ERROR'\n          }\n        };\n      }\n\n    } catch (error) {\n      console.error('Africa\\'s Talking SMS error:', error);\n      \n      return {\n        success: false,\n        error: {\n          message: error instanceof Error ? error.message : 'Africa\\'s Talking SMS sending failed',\n          code: 'AFRICASTALKING_API_ERROR'\n        },\n      };\n    }\n  }\n\n  isConfigured(): boolean {\n    return !!(this.apiKey && this.username);\n  }\n\n  private formatPhoneNumber(phoneNumber: string): string {\n    const cleanPhoneNumber = phoneNumber.replace(/\\D/g, '');\n    \n    // If already has country code, return as is\n    if (cleanPhoneNumber.startsWith('234') || cleanPhoneNumber.startsWith('254') || \n        cleanPhoneNumber.startsWith('27') || cleanPhoneNumber.startsWith('233')) {\n      return '+' + cleanPhoneNumber;\n    }\n    \n    // Default to Nigerian country code for local numbers\n    if (cleanPhoneNumber.startsWith('0')) {\n      return '+234' + cleanPhoneNumber.substring(1);\n    }\n    \n    if (cleanPhoneNumber.length === 10) {\n      return '+234' + cleanPhoneNumber;\n    }\n    \n    return '+' + cleanPhoneNumber;\n  }\n}"],"names":["AfricasTalkingSMSProvider","BaseSMSProvider","constructor","config","name","apiKey","process","env","AFRICASTALKING_API_KEY","username","AFRICASTALKING_USERNAME","senderId","fromNumber","AFRICASTALKING_SENDER_ID","sendSMS","phoneNumber","message","validatePhoneNumber","success","error","code","isConfigured","console","log","messageId","Date","now","Math","random","toString","substr","formattedPhone","formatPhoneNumber","requestBody","to","from","response","fetch","method","headers","body","URLSearchParams","responseData","json","ok","Error","recipient","SMSMessageData","Recipients","status","cleanPhoneNumber","replace","startsWith","substring","length"],"mappings":"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"}