{"version":3,"sources":["/Users/supreme/Desktop/marketsage/__tests__/workflow-email-simple.test.ts"],"sourcesContent":["/**\n * Simple Workflow Email Integration Test\n * \n * Tests workflow email functionality without complex test dependencies\n */\n\nimport { describe, test, expect, beforeEach, afterEach } from '@jest/globals';\nimport { sendTrackedEmail } from '@/lib/email-service';\n\ndescribe('Workflow Email Integration (Simple)', () => {\n  // Mock data\n  const mockContact = {\n    id: 'test-contact-123',\n    email: 'test@example.com',\n    firstName: 'Test',\n    lastName: 'User'\n  };\n\n  const mockCampaignId = 'test-campaign-456';\n\n  test('should send email without throwing errors', async () => {\n    // This test verifies the basic email sending functionality\n    // In a real environment, this would send an actual email\n    \n    expect(async () => {\n      const result = await sendTrackedEmail(\n        mockContact,\n        mockCampaignId,\n        {\n          subject: 'Test Email',\n          html: '<h1>Hello {{firstName}}!</h1>',\n          text: 'Hello {{firstName}}!',\n          from: 'test@marketsage.com'\n        }\n      );\n      \n      // Should return a result object\n      expect(result).toBeDefined();\n      expect(typeof result.success).toBe('boolean');\n      expect(typeof result.provider).toBe('string');\n    }).not.toThrow();\n  });\n\n  test('should handle missing email address gracefully', async () => {\n    const contactWithoutEmail = {\n      ...mockContact,\n      email: ''\n    };\n\n    const result = await sendTrackedEmail(\n      contactWithoutEmail,\n      mockCampaignId,\n      {\n        subject: 'Test Email',\n        html: '<h1>Hello!</h1>',\n        from: 'test@marketsage.com'\n      }\n    );\n\n    expect(result.success).toBe(false);\n    expect(result.error).toBeDefined();\n  });\n\n  test('should handle email personalization variables', async () => {\n    // Test that the function accepts emails with personalization variables\n    expect(async () => {\n      await sendTrackedEmail(\n        mockContact,\n        mockCampaignId,\n        {\n          subject: 'Welcome {{firstName}}!',\n          html: '<h1>Hello {{firstName}} {{lastName}}!</h1><p>Welcome to MarketSage.</p>',\n          text: 'Hello {{firstName}} {{lastName}}! Welcome to MarketSage.',\n          from: 'test@marketsage.com'\n        }\n      );\n    }).not.toThrow();\n  });\n\n  test('should accept campaign ID for tracking', async () => {\n    // Test that campaign IDs are properly handled\n    const workflowCampaignId = 'workflow-test-789';\n    \n    expect(async () => {\n      await sendTrackedEmail(\n        mockContact,\n        workflowCampaignId,\n        {\n          subject: 'Workflow Email',\n          html: '<h1>This is from a workflow</h1>',\n          from: 'workflows@marketsage.com'\n        }\n      );\n    }).not.toThrow();\n  });\n});"],"names":["describe","mockContact","id","email","firstName","lastName","mockCampaignId","test","expect","result","sendTrackedEmail","subject","html","text","from","toBeDefined","success","toBe","provider","not","toThrow","contactWithoutEmail","error","workflowCampaignId"],"mappings":"AAAA;;;;CAIC;;;;yBAE6D;8BAC7B;AAEjCA,IAAAA,iBAAQ,EAAC,uCAAuC;IAC9C,YAAY;IACZ,MAAMC,cAAc;QAClBC,IAAI;QACJC,OAAO;QACPC,WAAW;QACXC,UAAU;IACZ;IAEA,MAAMC,iBAAiB;IAEvBC,IAAAA,aAAI,EAAC,6CAA6C;QAChD,2DAA2D;QAC3D,yDAAyD;QAEzDC,IAAAA,eAAM,EAAC;YACL,MAAMC,SAAS,MAAMC,IAAAA,8BAAgB,EACnCT,aACAK,gBACA;gBACEK,SAAS;gBACTC,MAAM;gBACNC,MAAM;gBACNC,MAAM;YACR;YAGF,gCAAgC;YAChCN,IAAAA,eAAM,EAACC,QAAQM,WAAW;YAC1BP,IAAAA,eAAM,EAAC,OAAOC,OAAOO,OAAO,EAAEC,IAAI,CAAC;YACnCT,IAAAA,eAAM,EAAC,OAAOC,OAAOS,QAAQ,EAAED,IAAI,CAAC;QACtC,GAAGE,GAAG,CAACC,OAAO;IAChB;IAEAb,IAAAA,aAAI,EAAC,kDAAkD;QACrD,MAAMc,sBAAsB;YAC1B,GAAGpB,WAAW;YACdE,OAAO;QACT;QAEA,MAAMM,SAAS,MAAMC,IAAAA,8BAAgB,EACnCW,qBACAf,gBACA;YACEK,SAAS;YACTC,MAAM;YACNE,MAAM;QACR;QAGFN,IAAAA,eAAM,EAACC,OAAOO,OAAO,EAAEC,IAAI,CAAC;QAC5BT,IAAAA,eAAM,EAACC,OAAOa,KAAK,EAAEP,WAAW;IAClC;IAEAR,IAAAA,aAAI,EAAC,iDAAiD;QACpD,uEAAuE;QACvEC,IAAAA,eAAM,EAAC;YACL,MAAME,IAAAA,8BAAgB,EACpBT,aACAK,gBACA;gBACEK,SAAS;gBACTC,MAAM;gBACNC,MAAM;gBACNC,MAAM;YACR;QAEJ,GAAGK,GAAG,CAACC,OAAO;IAChB;IAEAb,IAAAA,aAAI,EAAC,0CAA0C;QAC7C,8CAA8C;QAC9C,MAAMgB,qBAAqB;QAE3Bf,IAAAA,eAAM,EAAC;YACL,MAAME,IAAAA,8BAAgB,EACpBT,aACAsB,oBACA;gBACEZ,SAAS;gBACTC,MAAM;gBACNE,MAAM;YACR;QAEJ,GAAGK,GAAG,CAACC,OAAO;IAChB;AACF"}