{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/__tests__/e2e/auth-dashboard.test.ts"],"sourcesContent":["import { test, expect } from '@playwright/test';\nimport { TestUtils } from './test-utils';\n\n/**\n * Authentication and Dashboard Navigation E2E Tests\n * Tests complete user authentication flow and dashboard functionality\n */\n\ntest.describe('Authentication & Dashboard', () => {\n  let testUtils: TestUtils;\n\n  test.beforeEach(async ({ page }) => {\n    testUtils = new TestUtils(page);\n  });\n\n  test('user can login and access dashboard', async ({ page }) => {\n    // Login\n    await testUtils.login();\n\n    // Verify dashboard is accessible\n    await expect(page.locator('[data-testid=\"dashboard-header\"]')).toBeVisible();\n    await expect(page.locator('[data-testid=\"dashboard-stats\"]')).toBeVisible();\n    \n    // Check for user menu\n    await expect(page.locator('[data-testid=\"user-menu\"]')).toBeVisible();\n    \n    // Verify page performance\n    await testUtils.checkPagePerformance();\n  });\n\n  test('dashboard shows real MCP data instead of demo data', async ({ page }) => {\n    await testUtils.login();\n    \n    // Wait for all data to load\n    await testUtils.waitForLoadingComplete();\n    \n    // Verify MCP data is displayed\n    await testUtils.verifyMCPDataLoaded();\n    \n    // Check specific metrics have real values\n    const visitorCount = page.locator('[data-testid=\"visitor-count\"]');\n    const conversionRate = page.locator('[data-testid=\"conversion-rate\"]');\n    const campaignMetrics = page.locator('[data-testid=\"campaign-metrics\"]');\n    \n    await expect(visitorCount).toBeVisible();\n    await expect(conversionRate).toBeVisible();\n    await expect(campaignMetrics).toBeVisible();\n    \n    // Verify values are not placeholder/demo values\n    const visitorText = await visitorCount.textContent();\n    expect(visitorText).not.toContain('Demo');\n    expect(visitorText).not.toContain('Sample');\n  });\n\n  test('navigation between dashboard sections works correctly', async ({ page }) => {\n    await testUtils.login();\n\n    const sections = [\n      'campaigns',\n      'contacts', \n      'workflows',\n      'analytics',\n      'leadpulse',\n      'ai-chat',\n      'settings'\n    ];\n\n    for (const section of sections) {\n      // Navigate to section\n      await testUtils.navigateTo(section);\n      \n      // Wait for content to load\n      await testUtils.waitForLoadingComplete();\n      \n      // Verify section-specific content is visible\n      await expect(page.locator(`[data-testid=\"${section}-page\"]`)).toBeVisible();\n      \n      // Check for console errors\n      await testUtils.checkForConsoleErrors();\n      \n      // Verify performance\n      await testUtils.checkPagePerformance();\n    }\n  });\n\n  test('dashboard gracefully handles MCP server unavailability', async ({ page }) => {\n    await testUtils.login();\n    \n    // Test MCP fallback behavior\n    await testUtils.testMCPFallback();\n    \n    // Verify dashboard still functions\n    await expect(page.locator('[data-testid=\"dashboard-header\"]')).toBeVisible();\n    \n    // Check that fallback data or notices are shown\n    const fallbackNotice = page.locator('[data-testid=\"mcp-offline-notice\"]');\n    const demoDataNotice = page.locator('[data-testid=\"demo-data-notice\"]');\n    \n    // At least one fallback mechanism should be active\n    const hasFallback = await fallbackNotice.isVisible() || await demoDataNotice.isVisible();\n    expect(hasFallback).toBe(true);\n  });\n\n  test('dashboard widgets load and display correctly', async ({ page }) => {\n    await testUtils.login();\n    await testUtils.waitForLoadingComplete();\n\n    // Core dashboard widgets\n    const widgets = [\n      'revenue-widget',\n      'campaign-performance-widget',\n      'visitor-analytics-widget',\n      'conversion-funnel-widget',\n      'recent-activities-widget'\n    ];\n\n    for (const widget of widgets) {\n      await expect(page.locator(`[data-testid=\"${widget}\"]`)).toBeVisible();\n      \n      // Verify widget has content (not empty)\n      const widgetContent = page.locator(`[data-testid=\"${widget}\"] [data-testid=\"widget-content\"]`);\n      await expect(widgetContent).toBeVisible();\n    }\n  });\n\n  test('user profile and settings are accessible', async ({ page }) => {\n    await testUtils.login();\n    \n    // Open user menu\n    await page.click('[data-testid=\"user-menu\"]');\n    await expect(page.locator('[data-testid=\"user-dropdown\"]')).toBeVisible();\n    \n    // Navigate to profile\n    await page.click('[data-testid=\"profile-link\"]');\n    await expect(page.locator('[data-testid=\"profile-page\"]')).toBeVisible();\n    \n    // Navigate to settings\n    await testUtils.navigateTo('settings');\n    await expect(page.locator('[data-testid=\"settings-page\"]')).toBeVisible();\n    \n    // Test settings sections\n    const settingSections = [\n      'general',\n      'notifications',\n      'api-keys',\n      'billing'\n    ];\n\n    for (const section of settingSections) {\n      await page.click(`[data-testid=\"settings-${section}\"]`);\n      await expect(page.locator(`[data-testid=\"${section}-settings\"]`)).toBeVisible();\n    }\n  });\n\n  test('search functionality works across dashboard', async ({ page }) => {\n    await testUtils.login();\n    \n    // Test global search\n    const searchInput = page.locator('[data-testid=\"global-search\"]');\n    await searchInput.fill('test campaign');\n    await page.keyboard.press('Enter');\n    \n    // Wait for search results\n    await expect(page.locator('[data-testid=\"search-results\"]')).toBeVisible();\n    \n    // Verify search includes different content types\n    const resultTypes = [\n      'campaign-result',\n      'contact-result',\n      'workflow-result'\n    ];\n\n    for (const resultType of resultTypes) {\n      try {\n        await expect(page.locator(`[data-testid=\"${resultType}\"]`)).toBeVisible({ timeout: 3000 });\n      } catch {\n        // Some result types may not have matches\n        continue;\n      }\n    }\n  });\n\n  test('real-time updates work correctly', async ({ page }) => {\n    await testUtils.login();\n    \n    // Check for real-time metrics updates\n    const beforeValue = await page.textContent('[data-testid=\"live-visitor-count\"]');\n    \n    // Wait for potential updates\n    await page.waitForTimeout(5000);\n    \n    // Verify real-time connection indicator\n    await expect(page.locator('[data-testid=\"realtime-status\"]')).toBeVisible();\n    \n    // Check connection status is active\n    const statusIndicator = page.locator('[data-testid=\"realtime-status\"] .status-indicator');\n    await expect(statusIndicator).toHaveClass(/connected|active/);\n  });\n\n  test('mobile responsive design works correctly', async ({ page }) => {\n    await testUtils.login();\n    \n    // Test mobile responsiveness\n    await testUtils.testMobileResponsiveness();\n    \n    // Verify mobile-specific elements\n    await page.setViewportSize({ width: 375, height: 667 });\n    \n    // Check mobile navigation\n    await page.click('[data-testid=\"mobile-menu-toggle\"]');\n    await expect(page.locator('[data-testid=\"mobile-nav-menu\"]')).toBeVisible();\n    \n    // Test touch interactions\n    await page.touchscreen.tap(100, 100);\n    \n    // Verify dashboard is usable on mobile\n    await expect(page.locator('[data-testid=\"dashboard-stats\"]')).toBeVisible();\n  });\n\n  test('keyboard navigation works correctly', async ({ page }) => {\n    await testUtils.login();\n    \n    // Test keyboard navigation\n    await testUtils.testKeyboardNavigation();\n    \n    // Test keyboard shortcuts\n    await page.keyboard.press('Control+K'); // Open command palette\n    await expect(page.locator('[data-testid=\"command-palette\"]')).toBeVisible();\n    \n    await page.keyboard.press('Escape'); // Close\n    await expect(page.locator('[data-testid=\"command-palette\"]')).not.toBeVisible();\n  });\n\n  test('error boundaries handle unexpected errors gracefully', async ({ page }) => {\n    await testUtils.login();\n    \n    // Simulate an error by corrupting API response\n    await page.route('**/api/dashboard/stats', route => {\n      route.fulfill({\n        status: 500,\n        contentType: 'application/json',\n        body: JSON.stringify({ error: 'Internal Server Error' })\n      });\n    });\n    \n    // Reload dashboard to trigger error\n    await page.reload();\n    \n    // Verify error boundary catches the error\n    await expect(page.locator('[data-testid=\"error-boundary\"]')).toBeVisible();\n    \n    // Verify user-friendly error message\n    const errorMessage = await page.textContent('[data-testid=\"error-message\"]');\n    expect(errorMessage).not.toContain('500');\n    expect(errorMessage).not.toContain('Internal Server Error');\n    \n    // Verify retry functionality\n    await page.unroute('**/api/dashboard/stats');\n    await page.click('[data-testid=\"retry-button\"]');\n    \n    // Dashboard should recover\n    await testUtils.waitForLoadingComplete();\n    await expect(page.locator('[data-testid=\"dashboard-stats\"]')).toBeVisible();\n  });\n});"],"names":["test","describe","testUtils","beforeEach","page","TestUtils","login","expect","locator","toBeVisible","checkPagePerformance","waitForLoadingComplete","verifyMCPDataLoaded","visitorCount","conversionRate","campaignMetrics","visitorText","textContent","not","toContain","sections","section","navigateTo","checkForConsoleErrors","testMCPFallback","fallbackNotice","demoDataNotice","hasFallback","isVisible","toBe","widgets","widget","widgetContent","click","settingSections","searchInput","fill","keyboard","press","resultTypes","resultType","timeout","beforeValue","waitForTimeout","statusIndicator","toHaveClass","testMobileResponsiveness","setViewportSize","width","height","touchscreen","tap","testKeyboardNavigation","route","fulfill","status","contentType","body","JSON","stringify","error","reload","errorMessage","unroute"],"mappings":"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"}