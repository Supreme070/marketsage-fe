{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/lib/ai/vector-store.ts"],"sourcesContent":["/**\n * Vector Store for RAG (Enhanced for MarketSage Knowledge)\n * =======================================================\n * Local vector storage using MiniLM embeddings for semantic search\n * Now includes comprehensive MarketSage platform knowledge\n */\n\nimport fs from 'fs/promises';\nimport path from 'path';\nimport { getAllKnowledgeForRAG } from './marketsage-knowledge-base';\n\nexport interface Document {\n  id: string;\n  text: string;\n  embedding: number[];\n  metadata?: Record<string, any>;\n}\n\nlet embeddingModel: any = null;\n\n// Initialize embedding model with dynamic import\nasync function getEmbeddingModel() {\n  if (!embeddingModel) {\n    try {\n      // Dynamic import to prevent loading during build time\n      const { pipeline } = await import('@xenova/transformers');\n      embeddingModel = await pipeline('feature-extraction', 'Xenova/all-MiniLM-L6-v2');\n    } catch (error) {\n      console.warn('Could not load transformers pipeline, using fallback embeddings', error);\n      embeddingModel = null;\n    }\n  }\n  return embeddingModel;\n}\n\n// Generate embeddings for text\nexport async function generateEmbedding(text: string): Promise<number[]> {\n  const model = await getEmbeddingModel();\n  \n  if (!model) {\n    // Fallback: simple text-based embedding using character frequencies\n    return generateSimpleEmbedding(text);\n  }\n  \n  try {\n    const output = await model(text, { pooling: 'mean', normalize: true });\n    return Array.from(output.data);\n  } catch (error) {\n    console.warn('ML embedding failed, using fallback', error);\n    return generateSimpleEmbedding(text);\n  }\n}\n\n// Simple fallback embedding based on text characteristics\nfunction generateSimpleEmbedding(text: string): number[] {\n  const words = text.toLowerCase().split(/\\s+/);\n  const chars = text.toLowerCase();\n  \n  // Create a 384-dimensional vector (matching MiniLM output size)\n  const embedding = new Array(384).fill(0);\n  \n  // Simple features based on text characteristics\n  embedding[0] = words.length / 100; // Normalized word count\n  embedding[1] = chars.length / 1000; // Normalized character count\n  embedding[2] = (chars.match(/[aeiou]/g) || []).length / chars.length; // Vowel ratio\n  embedding[3] = (chars.match(/[bcdfghjklmnpqrstvwxyz]/g) || []).length / chars.length; // Consonant ratio\n  \n  // Hash-based features for the remaining dimensions\n  for (let i = 4; i < 384; i++) {\n    let hash = 0;\n    for (let j = 0; j < chars.length; j++) {\n      hash = ((hash << 5) - hash + chars.charCodeAt(j) + i) & 0xffffffff;\n    }\n    embedding[i] = (hash % 1000) / 1000 - 0.5; // Normalize to [-0.5, 0.5]\n  }\n  \n  // Normalize the vector\n  const magnitude = Math.sqrt(embedding.reduce((sum, val) => sum + val * val, 0));\n  return embedding.map(val => val / (magnitude || 1));\n}\n\n// Cosine similarity calculation\nfunction cosineSimilarity(a: number[], b: number[]): number {\n  const dotProduct = a.reduce((sum, val, i) => sum + val * b[i], 0);\n  const magnitudeA = Math.sqrt(a.reduce((sum, val) => sum + val * val, 0));\n  const magnitudeB = Math.sqrt(b.reduce((sum, val) => sum + val * val, 0));\n  return dotProduct / (magnitudeA * magnitudeB);\n}\n\nclass VectorStore {\n  private documents: Document[] = [];\n  private readonly storePath = path.join(process.cwd(), 'data', 'vector-store.json');\n\n  // Initialize with MarketSage knowledge base\n  async initialize(): Promise<void> {\n    try {\n      // Load existing vectors if available\n      await this.loadFromDisk();\n      \n      // Check if we need to add MarketSage knowledge\n      const hasMarketSageKnowledge = this.documents.some(doc => \n        doc.metadata?.source === 'marketsage-knowledge'\n      );\n\n      if (!hasMarketSageKnowledge) {\n        console.log('Indexing MarketSage knowledge base...');\n        await this.indexMarketSageKnowledge();\n        await this.saveToDisk();\n        console.log('MarketSage knowledge base indexed successfully!');\n      }\n    } catch (error) {\n      console.warn('Vector store initialization warning:', error);\n      // Continue without existing data\n      await this.indexMarketSageKnowledge();\n      await this.saveToDisk();\n    }\n  }\n\n  // Index MarketSage knowledge base\n  private async indexMarketSageKnowledge(): Promise<void> {\n    const knowledgeTexts = getAllKnowledgeForRAG();\n    \n    for (let i = 0; i < knowledgeTexts.length; i++) {\n      const text = knowledgeTexts[i];\n      const embedding = await generateEmbedding(text);\n      \n      this.documents.push({\n        id: `marketsage-${i}`,\n        text,\n        embedding,\n        metadata: {\n          source: 'marketsage-knowledge',\n          indexed: new Date().toISOString()\n        }\n      });\n    }\n\n    // Add some example fintech documents for context\n    const fintechExamples = [\n      {\n        id: 'fintech-remittance-flow',\n        text: 'Cross-border remittance flow: Customer registration → KYC verification → recipient details → transfer amount → payment method → compliance check → transfer execution → confirmation',\n        metadata: { source: 'fintech-examples', category: 'workflows' }\n      },\n      {\n        id: 'fintech-conversion-funnel',\n        text: 'Fintech conversion funnel: Website visitor → intent detection → lead capture → KYC process → first transaction → repeat customer → advocate',\n        metadata: { source: 'fintech-examples', category: 'conversion' }\n      },\n      {\n        id: 'african-market-insights',\n        text: 'African market insights: Mobile-first approach, family-oriented decisions, trust and security paramount, WhatsApp preferred communication, small initial transactions',\n        metadata: { source: 'fintech-examples', category: 'market-insights' }\n      },\n      {\n        id: 'compliance-requirements',\n        text: 'Fintech compliance: AML (Anti-Money Laundering), KYC (Know Your Customer), data residency, regulatory reporting, transaction monitoring, sanctions screening',\n        metadata: { source: 'fintech-examples', category: 'compliance' }\n      }\n    ];\n\n    for (const example of fintechExamples) {\n      const embedding = await generateEmbedding(example.text);\n      this.documents.push({\n        ...example,\n        embedding\n      });\n    }\n  }\n\n  // Add document to vector store\n  async addDocument(id: string, text: string, metadata?: Record<string, any>): Promise<void> {\n    const embedding = await generateEmbedding(text);\n    this.documents.push({ id, text, embedding, metadata });\n    await this.saveToDisk();\n  }\n\n  // Search similar documents\n  async search(query: string, limit = 4): Promise<Document[]> {\n    if (this.documents.length === 0) {\n      await this.initialize();\n    }\n\n    const queryEmbedding = await generateEmbedding(query);\n    \n    const similarities = this.documents.map(doc => ({\n      document: doc,\n      similarity: cosineSimilarity(queryEmbedding, doc.embedding)\n    }));\n\n    // Sort by similarity and return top results\n    return similarities\n      .sort((a, b) => b.similarity - a.similarity)\n      .slice(0, limit)\n      .map(item => item.document);\n  }\n\n  // Save vectors to disk\n  private async saveToDisk(): Promise<void> {\n    try {\n      const dataDir = path.dirname(this.storePath);\n      await fs.mkdir(dataDir, { recursive: true });\n      await fs.writeFile(this.storePath, JSON.stringify(this.documents, null, 2));\n    } catch (error) {\n      console.warn('Could not save vector store to disk:', error);\n    }\n  }\n\n  // Load vectors from disk\n  private async loadFromDisk(): Promise<void> {\n    try {\n      const data = await fs.readFile(this.storePath, 'utf-8');\n      this.documents = JSON.parse(data);\n    } catch (error) {\n      // File doesn't exist or is corrupted, start fresh\n      this.documents = [];\n    }\n  }\n\n  // Get document count\n  getDocumentCount(): number {\n    return this.documents.length;\n  }\n\n  // Clear all documents\n  async clear(): Promise<void> {\n    this.documents = [];\n    await this.saveToDisk();\n  }\n}\n\n// Export singleton instance\nexport const vectorStore = new VectorStore(); "],"names":["generateEmbedding","vectorStore","embeddingModel","getEmbeddingModel","pipeline","error","console","warn","text","model","generateSimpleEmbedding","output","pooling","normalize","Array","from","data","words","toLowerCase","split","chars","embedding","fill","length","match","i","hash","j","charCodeAt","magnitude","Math","sqrt","reduce","sum","val","map","cosineSimilarity","a","b","dotProduct","magnitudeA","magnitudeB","VectorStore","initialize","loadFromDisk","hasMarketSageKnowledge","documents","some","doc","metadata","source","log","indexMarketSageKnowledge","saveToDisk","knowledgeTexts","getAllKnowledgeForRAG","push","id","indexed","Date","toISOString","fintechExamples","category","example","addDocument","search","query","limit","queryEmbedding","similarities","document","similarity","sort","slice","item","dataDir","path","dirname","storePath","fs","mkdir","recursive","writeFile","JSON","stringify","readFile","parse","getDocumentCount","clear","join","process","cwd"],"mappings":"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"}