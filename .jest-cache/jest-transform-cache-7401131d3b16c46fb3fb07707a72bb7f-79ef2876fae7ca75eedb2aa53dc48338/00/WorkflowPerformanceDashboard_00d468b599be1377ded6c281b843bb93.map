{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/components/dashboard/WorkflowPerformanceDashboard.tsx"],"sourcesContent":["\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport {\n  AlertCircle,\n  Activity,\n  Clock,\n  TrendingUp,\n  TrendingDown,\n  Server,\n  Database,\n  Zap,\n  RefreshCw,\n  Gauge,\n  Users,\n  CheckCircle,\n  XCircle,\n} from \"lucide-react\";\nimport { motion } from \"framer-motion\";\n\ninterface SystemHealthMetrics {\n  timestamp: Date;\n  queueDepth: number;\n  activeExecutions: number;\n  completedLastHour: number;\n  failedLastHour: number;\n  avgResponseTime: number;\n  memoryUsage: number;\n  cpuUsage: number;\n  diskUsage: number;\n  redisConnections: number;\n  databaseConnections: number;\n}\n\ninterface WorkflowPerformanceMetrics {\n  workflowId: string;\n  timestamp: Date;\n  executionTime: number;\n  memoryUsage: number;\n  cpuUsage: number;\n  successRate: number;\n  throughput: number;\n  errorRate: number;\n  avgStepTime: number;\n  nodeBottlenecks: NodeBottleneck[];\n}\n\ninterface NodeBottleneck {\n  nodeId: string;\n  nodeType: string;\n  avgExecutionTime: number;\n  errorCount: number;\n  bottleneckScore: number;\n}\n\ninterface PerformanceAlert {\n  id: string;\n  workflowId?: string;\n  alertType: string;\n  severity: \"LOW\" | \"MEDIUM\" | \"HIGH\" | \"CRITICAL\";\n  message: string;\n  threshold: number;\n  currentValue: number;\n  timestamp: Date;\n  resolved: boolean;\n}\n\ninterface DashboardData {\n  systemHealth: SystemHealthMetrics;\n  workflowMetrics: WorkflowPerformanceMetrics[];\n  activeAlerts: PerformanceAlert[];\n  bottlenecks: string[];\n}\n\nexport default function WorkflowPerformanceDashboard() {\n  const [dashboardData, setDashboardData] = useState<DashboardData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [autoRefresh, setAutoRefresh] = useState(true);\n\n  // Fetch performance data\n  const fetchPerformanceData = async () => {\n    try {\n      const response = await fetch(\"/api/workflows/performance\");\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch performance data\");\n      }\n      \n      const data = await response.json();\n      setDashboardData(data);\n      setError(null);\n    } catch (err) {\n      console.error(\"Error fetching performance data:\", err);\n      setError(err instanceof Error ? err.message : \"Unknown error\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Auto-refresh effect\n  useEffect(() => {\n    fetchPerformanceData();\n    \n    if (autoRefresh) {\n      const interval = setInterval(fetchPerformanceData, 30000); // Refresh every 30 seconds\n      return () => clearInterval(interval);\n    }\n  }, [autoRefresh]);\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case \"CRITICAL\": return \"destructive\";\n      case \"HIGH\": return \"destructive\";\n      case \"MEDIUM\": return \"default\";\n      case \"LOW\": return \"secondary\";\n      default: return \"outline\";\n    }\n  };\n\n  const getHealthStatus = (value: number, thresholds: { good: number; warning: number }) => {\n    if (value <= thresholds.good) return { status: \"good\", color: \"text-green-600\" };\n    if (value <= thresholds.warning) return { status: \"warning\", color: \"text-yellow-600\" };\n    return { status: \"critical\", color: \"text-red-600\" };\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <RefreshCw className=\"h-8 w-8 animate-spin text-primary\" />\n        <span className=\"ml-2\">Loading performance metrics...</span>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <Alert variant=\"destructive\">\n        <AlertCircle className=\"h-4 w-4\" />\n        <AlertTitle>Error Loading Performance Data</AlertTitle>\n        <AlertDescription>\n          {error}\n          <Button variant=\"outline\" size=\"sm\" className=\"ml-4\" onClick={fetchPerformanceData}>\n            <RefreshCw className=\"h-4 w-4 mr-2\" />\n            Retry\n          </Button>\n        </AlertDescription>\n      </Alert>\n    );\n  }\n\n  if (!dashboardData) {\n    return (\n      <Alert>\n        <AlertCircle className=\"h-4 w-4\" />\n        <AlertTitle>No Data Available</AlertTitle>\n        <AlertDescription>Performance monitoring data is not available.</AlertDescription>\n      </Alert>\n    );\n  }\n\n  const { systemHealth, workflowMetrics, activeAlerts, bottlenecks } = dashboardData;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-3xl font-bold tracking-tight\">Performance Dashboard</h2>\n          <p className=\"text-muted-foreground\">Real-time workflow system monitoring</p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant={autoRefresh ? \"default\" : \"outline\"}\n            size=\"sm\"\n            onClick={() => setAutoRefresh(!autoRefresh)}\n          >\n            <Activity className=\"h-4 w-4 mr-2\" />\n            Auto-refresh {autoRefresh ? \"On\" : \"Off\"}\n          </Button>\n          <Button variant=\"outline\" size=\"sm\" onClick={fetchPerformanceData}>\n            <RefreshCw className=\"h-4 w-4 mr-2\" />\n            Refresh\n          </Button>\n        </div>\n      </div>\n\n      {/* Active Alerts */}\n      {activeAlerts.length > 0 && (\n        <div className=\"space-y-3\">\n          <h3 className=\"text-lg font-semibold\">Active Alerts</h3>\n          {activeAlerts.map((alert) => (\n            <motion.div\n              key={alert.id}\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              className=\"border rounded-lg p-4\"\n            >\n              <Alert variant={alert.severity === \"CRITICAL\" || alert.severity === \"HIGH\" ? \"destructive\" : \"default\"}>\n                <AlertCircle className=\"h-4 w-4\" />\n                <AlertTitle className=\"flex items-center justify-between\">\n                  <span>{alert.alertType.replace(/_/g, \" \")}</span>\n                  <Badge variant={getSeverityColor(alert.severity)}>{alert.severity}</Badge>\n                </AlertTitle>\n                <AlertDescription>\n                  {alert.message}\n                  <br />\n                  <small className=\"text-muted-foreground\">\n                    {new Date(alert.timestamp).toLocaleString()}\n                  </small>\n                </AlertDescription>\n              </Alert>\n            </motion.div>\n          ))}\n        </div>\n      )}\n\n      {/* System Health Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Queue Depth</CardTitle>\n            <Activity className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{systemHealth.queueDepth}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {systemHealth.queueDepth > 50 ? \"High queue load\" : \"Normal queue load\"}\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Executions</CardTitle>\n            <Zap className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{systemHealth.activeExecutions}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Currently running workflows\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Success Rate</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {systemHealth.completedLastHour + systemHealth.failedLastHour > 0\n                ? Math.round((systemHealth.completedLastHour / (systemHealth.completedLastHour + systemHealth.failedLastHour)) * 100)\n                : 0}%\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Last hour performance\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Avg Response Time</CardTitle>\n            <Clock className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {Math.round(systemHealth.avgResponseTime / 1000)}s\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Average execution time\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* System Resources */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Gauge className=\"h-4 w-4 mr-2\" />\n              Memory Usage\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between\">\n                <span>Current</span>\n                <span className={getHealthStatus(systemHealth.memoryUsage, { good: 0.7, warning: 0.85 }).color}>\n                  {Math.round(systemHealth.memoryUsage * 100)}%\n                </span>\n              </div>\n              <Progress value={systemHealth.memoryUsage * 100} className=\"h-2\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Server className=\"h-4 w-4 mr-2\" />\n              CPU Usage\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between\">\n                <span>Current</span>\n                <span className={getHealthStatus(systemHealth.cpuUsage, { good: 0.7, warning: 0.85 }).color}>\n                  {Math.round(systemHealth.cpuUsage * 100)}%\n                </span>\n              </div>\n              <Progress value={systemHealth.cpuUsage * 100} className=\"h-2\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Database className=\"h-4 w-4 mr-2\" />\n              Connections\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between\">\n                <span>Database</span>\n                <span>{systemHealth.databaseConnections}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Redis</span>\n                <span>{systemHealth.redisConnections}</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Workflow Performance Metrics */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Workflow Performance</CardTitle>\n          <CardDescription>Performance metrics for active workflows</CardDescription>\n        </CardHeader>\n        <CardContent>\n          {workflowMetrics.length === 0 ? (\n            <p className=\"text-muted-foreground text-center py-8\">No active workflow metrics available</p>\n          ) : (\n            <div className=\"space-y-4\">\n              {workflowMetrics.slice(0, 5).map((workflow) => (\n                <div key={workflow.workflowId} className=\"border rounded-lg p-4\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <h4 className=\"font-medium\">Workflow {workflow.workflowId.slice(0, 8)}...</h4>\n                    <div className=\"flex items-center space-x-2\">\n                      <Badge variant={workflow.successRate > 0.9 ? \"default\" : workflow.successRate > 0.7 ? \"secondary\" : \"destructive\"}>\n                        {Math.round(workflow.successRate * 100)}% Success\n                      </Badge>\n                      <Badge variant=\"outline\">\n                        {workflow.throughput.toFixed(1)}/min\n                      </Badge>\n                    </div>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                    <div>\n                      <span className=\"text-muted-foreground\">Execution Time</span>\n                      <div className=\"font-medium\">{Math.round(workflow.executionTime / 1000)}s</div>\n                    </div>\n                    <div>\n                      <span className=\"text-muted-foreground\">Error Rate</span>\n                      <div className=\"font-medium\">{Math.round(workflow.errorRate * 100)}%</div>\n                    </div>\n                    <div>\n                      <span className=\"text-muted-foreground\">Avg Step Time</span>\n                      <div className=\"font-medium\">{Math.round(workflow.avgStepTime / 1000)}s</div>\n                    </div>\n                    <div>\n                      <span className=\"text-muted-foreground\">Bottlenecks</span>\n                      <div className=\"font-medium\">{workflow.nodeBottlenecks.length}</div>\n                    </div>\n                  </div>\n\n                  {workflow.nodeBottlenecks.length > 0 && (\n                    <div className=\"mt-3 pt-3 border-t\">\n                      <h5 className=\"text-sm font-medium mb-2\">Node Bottlenecks</h5>\n                      <div className=\"space-y-1\">\n                        {workflow.nodeBottlenecks.slice(0, 3).map((bottleneck) => (\n                          <div key={bottleneck.nodeId} className=\"flex justify-between text-sm\">\n                            <span className=\"text-muted-foreground\">\n                              {bottleneck.nodeType} ({bottleneck.nodeId.slice(0, 8)}...)\n                            </span>\n                            <span className=\"font-medium\">\n                              {Math.round(bottleneck.avgExecutionTime / 1000)}s\n                            </span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* System Bottlenecks */}\n      {bottlenecks.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <AlertCircle className=\"h-4 w-4 mr-2\" />\n              System Bottlenecks\n            </CardTitle>\n            <CardDescription>Detected performance bottlenecks requiring attention</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              {bottlenecks.map((bottleneck, index) => (\n                <Alert key={index}>\n                  <AlertCircle className=\"h-4 w-4\" />\n                  <AlertDescription>{bottleneck}</AlertDescription>\n                </Alert>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}"],"names":["WorkflowPerformanceDashboard","dashboardData","setDashboardData","useState","loading","setLoading","error","setError","autoRefresh","setAutoRefresh","fetchPerformanceData","response","fetch","ok","Error","data","json","err","console","message","useEffect","interval","setInterval","clearInterval","getSeverityColor","severity","getHealthStatus","value","thresholds","good","status","color","warning","div","className","RefreshCw","span","Alert","variant","AlertCircle","AlertTitle","AlertDescription","Button","size","onClick","systemHealth","workflowMetrics","activeAlerts","bottlenecks","h2","p","Activity","length","h3","map","alert","motion","initial","opacity","y","animate","alertType","replace","Badge","br","small","Date","timestamp","toLocaleString","id","Card","CardHeader","CardTitle","CardContent","queueDepth","Zap","activeExecutions","CheckCircle","completedLastHour","failedLastHour","Math","round","Clock","avgResponseTime","Gauge","memoryUsage","Progress","Server","cpuUsage","Database","databaseConnections","redisConnections","CardDescription","slice","workflow","h4","workflowId","successRate","throughput","toFixed","executionTime","errorRate","avgStepTime","nodeBottlenecks","h5","bottleneck","nodeType","nodeId","avgExecutionTime","index"],"mappings":"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"}