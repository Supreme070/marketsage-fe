ea530d35601b1eb83f12024a1a0700e8
/**
 * Enterprise Audit Logging System
 * ==============================
 * Comprehensive audit trail with integrity protection and compliance features
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    EnterpriseAuditLogger: function() {
        return EnterpriseAuditLogger;
    },
    auditAPIAccess: function() {
        return auditAPIAccess;
    },
    auditAdminAction: function() {
        return auditAdminAction;
    },
    auditSecurityEvent: function() {
        return auditSecurityEvent;
    },
    auditUserAction: function() {
        return auditUserAction;
    },
    enterpriseAuditLogger: function() {
        return enterpriseAuditLogger;
    }
});
const _prisma = /*#__PURE__*/ _interop_require_default(require("../db/prisma"));
const _logger = require("../logger");
const _enterpriseencryption = require("../encryption/enterprise-encryption");
const _crypto = /*#__PURE__*/ _interop_require_default(require("crypto"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
class EnterpriseAuditLogger {
    constructor(){
        this.hashChain = new Map();
        // Detect if we're in a build context
        const isBuildPhase = this.detectBuildPhase();
        if (isBuildPhase) {
            // During build, use a temporary key to allow compilation
            console.log('Build phase detected - using temporary audit integrity key');
            this.integrityKey = _crypto.default.pbkdf2Sync('build-phase-audit-key', 'audit-salt', 1000, 32, 'sha512');
            this.initializeHashChain();
            return;
        }
        // Initialize integrity protection
        const integrityKeyEnv = process.env.AUDIT_INTEGRITY_KEY;
        // In development, allow a default key with a warning
        if (process.env.NODE_ENV === 'development' && (!integrityKeyEnv || integrityKeyEnv === 'default-audit-key')) {
            console.warn('Using default audit integrity key in development - DO NOT USE IN PRODUCTION');
            this.integrityKey = _crypto.default.pbkdf2Sync('development-audit-key', 'audit-salt', 1000, 32, 'sha512');
            this.initializeHashChain();
            return;
        }
        if (!integrityKeyEnv || integrityKeyEnv === 'default-audit-key') {
            throw new Error('SECURITY: Audit integrity key must be set and cannot be default value');
        }
        this.integrityKey = _crypto.default.pbkdf2Sync(integrityKeyEnv, 'audit-salt', 100000, 32, 'sha512');
        this.initializeHashChain();
    }
    /**
   * Detect if we're in a build phase using multiple indicators
   */ detectBuildPhase() {
        // Multiple checks to reliably detect build phase
        return(// Next.js build command sets this
        process.env.NEXT_PHASE === 'phase-production-build' || // Webpack build context
        process.env.WEBPACK_BUILD === 'true' || // CI/CD build environments
        process.env.CI === 'true' || // Docker build phase
        process.env.DOCKER_BUILD === 'true' || // Check if we're in a serverless build context
        typeof window === 'undefined' && process.env.NODE_ENV === 'production' && !process.env.NEXT_RUNTIME || // Check for missing runtime environment variables that would be present during actual runtime
        process.env.NODE_ENV === 'production' && !process.env.DATABASE_URL);
    }
    /**
   * Log high-importance audit event with integrity protection
   */ async logEvent(event) {
        try {
            const auditEvent = await this.createAuditEvent(event);
            // Store in multiple locations for redundancy
            await Promise.all([
                this.storeInDatabase(auditEvent),
                this.storeInSecureLog(auditEvent),
                this.updateHashChain(auditEvent)
            ]);
            // Real-time alerting for critical events
            if (auditEvent.details.riskLevel === 'critical') {
                await this.triggerSecurityAlert(auditEvent);
            }
            // Compliance notifications
            if (auditEvent.compliance.gdprRelevant) {
                await this.notifyComplianceTeam(auditEvent);
            }
        } catch (error) {
            // Audit logging failures are critical - never fail silently
            _logger.logger.error('CRITICAL: Audit logging failed', {
                error: error instanceof Error ? error.message : String(error),
                event: event.action,
                resourceType: event.resource.type,
                actorId: event.actor.id
            });
            // Fallback to emergency logging
            await this.emergencyLog(event, error);
            throw error;
        }
    }
    /**
   * Simplified logging for common events
   */ async logUserAction(userId, action, resourceType, resourceId, details, ipAddress, userAgent) {
        await this.logEvent({
            eventType: 'DATA_ACCESS',
            actor: {
                id: userId,
                type: 'user',
                identifier: userId,
                ipAddress,
                userAgent
            },
            resource: {
                type: resourceType,
                id: resourceId,
                organizationId: await this.getOrganizationId(userId)
            },
            action,
            outcome: 'success',
            details: {
                metadata: details,
                riskLevel: this.calculateRiskLevel(action, resourceType)
            },
            compliance: {
                dataClassification: this.classifyData(resourceType),
                retentionDays: this.getRetentionPeriod(resourceType),
                gdprRelevant: this.isGDPRRelevant(resourceType),
                hipaaRelevant: false,
                pciRelevant: this.isPCIRelevant(resourceType)
            }
        });
    }
    /**
   * Log security events with enhanced details
   */ async logSecurityEvent(eventType, actorIdentifier, details) {
        await this.logEvent({
            eventType: 'SECURITY_EVENT',
            actor: {
                id: 'unknown',
                type: 'user',
                identifier: actorIdentifier,
                ipAddress: details.ipAddress,
                userAgent: details.userAgent
            },
            resource: {
                type: details.resourceType || 'SYSTEM_SETTING',
                id: details.resourceId || 'security-system',
                organizationId: 'system'
            },
            action: eventType === 'FAILED_LOGIN' ? 'FAILED_LOGIN' : 'READ',
            outcome: 'failure',
            details: {
                metadata: details.metadata,
                errorMessage: details.description,
                riskLevel: details.riskLevel
            },
            compliance: {
                dataClassification: 'confidential',
                retentionDays: 2555,
                gdprRelevant: true,
                hipaaRelevant: false,
                pciRelevant: false
            }
        });
    }
    /**
   * Log administrative actions
   */ async logAdminAction(adminId, action, resourceType, resourceId, changes, ipAddress) {
        await this.logEvent({
            eventType: 'SYSTEM_ADMIN',
            actor: {
                id: adminId,
                type: 'admin',
                identifier: adminId,
                ipAddress
            },
            resource: {
                type: resourceType,
                id: resourceId,
                organizationId: await this.getOrganizationId(adminId)
            },
            action,
            outcome: 'success',
            details: {
                changes,
                riskLevel: 'high' // Admin actions are always high risk
            },
            compliance: {
                dataClassification: 'restricted',
                retentionDays: 2555,
                gdprRelevant: true,
                hipaaRelevant: false,
                pciRelevant: false
            }
        });
    }
    /**
   * Log API access with rate limiting context
   */ async logAPIAccess(apiKeyId, endpoint, method, statusCode, duration, ipAddress, userAgent) {
        await this.logEvent({
            eventType: 'API_ACCESS',
            actor: {
                id: apiKeyId,
                type: 'api',
                identifier: apiKeyId,
                ipAddress,
                userAgent
            },
            resource: {
                type: 'API_KEY',
                id: endpoint,
                organizationId: await this.getOrganizationIdByApiKey(apiKeyId)
            },
            action: this.mapHttpMethodToAction(method),
            outcome: statusCode < 400 ? 'success' : 'failure',
            details: {
                duration,
                metadata: {
                    endpoint,
                    method,
                    statusCode
                },
                riskLevel: this.calculateAPIRiskLevel(endpoint, statusCode)
            },
            compliance: {
                dataClassification: 'internal',
                retentionDays: 365,
                gdprRelevant: false,
                hipaaRelevant: false,
                pciRelevant: false
            }
        });
    }
    /**
   * Query audit logs with advanced filtering
   */ async queryLogs(query) {
        try {
            const whereClause = this.buildWhereClause(query);
            const [events, totalCount] = await Promise.all([
                _prisma.default.auditEvent.findMany({
                    where: whereClause,
                    orderBy: {
                        timestamp: 'desc'
                    },
                    take: query.limit || 100,
                    skip: query.offset || 0
                }),
                _prisma.default.auditEvent.count({
                    where: whereClause
                })
            ]);
            // Decrypt and verify integrity
            const decryptedEvents = await Promise.all(events.map((event)=>this.decryptAuditEvent(event)));
            return {
                events: decryptedEvents,
                totalCount,
                hasMore: (query.offset || 0) + events.length < totalCount
            };
        } catch (error) {
            _logger.logger.error('Audit log query failed', {
                error: error instanceof Error ? error.message : String(error),
                query
            });
            throw error;
        }
    }
    /**
   * Generate comprehensive audit report
   */ async generateReport(organizationId, startDate, endDate) {
        try {
            const baseQuery = {
                organizationId,
                startDate,
                endDate
            };
            const [totalEvents, highRiskEvents, failedEvents, uniqueActors, riskDistribution, complianceEvents, topUsers, topResources, failuresByType] = await Promise.all([
                this.countEvents(baseQuery),
                this.countHighRiskEvents(baseQuery),
                this.countFailedEvents(baseQuery),
                this.countUniqueActors(baseQuery),
                this.analyzeRiskDistribution(baseQuery),
                this.analyzeComplianceEvents(baseQuery),
                this.getTopActiveUsers(baseQuery),
                this.getTopAccessedResources(baseQuery),
                this.analyzeFailuresByType(baseQuery)
            ]);
            const anomalies = await this.detectAnomalies(baseQuery);
            const suspiciousPatterns = await this.detectSuspiciousPatterns(baseQuery);
            return {
                summary: {
                    totalEvents,
                    highRiskEvents,
                    failedEvents,
                    uniqueActors,
                    timeRange: {
                        start: startDate,
                        end: endDate
                    }
                },
                riskAnalysis: {
                    riskDistribution,
                    suspiciousPatterns,
                    anomalies
                },
                complianceMetrics: {
                    gdprEvents: complianceEvents.gdpr,
                    dataAccessEvents: complianceEvents.dataAccess,
                    privacyRequests: complianceEvents.privacy,
                    retentionViolations: complianceEvents.retention
                },
                topEvents: {
                    mostActiveUsers: topUsers,
                    mostAccessedResources: topResources,
                    failuresByType
                }
            };
        } catch (error) {
            _logger.logger.error('Audit report generation failed', {
                error: error instanceof Error ? error.message : String(error),
                organizationId,
                startDate,
                endDate
            });
            throw error;
        }
    }
    /**
   * Verify audit log integrity
   */ async verifyIntegrity(organizationId) {
        try {
            const events = await _prisma.default.auditEvent.findMany({
                where: {
                    organizationId
                },
                orderBy: {
                    timestamp: 'asc'
                }
            });
            const corruptedEvents = [];
            let chainBreaks = 0;
            let lastVerifiedEvent = '';
            let previousHash = '';
            for (const event of events){
                // Verify individual event integrity
                const decryptedEvent = await this.decryptAuditEvent(event);
                const isEventValid = await this.verifyEventIntegrity(decryptedEvent);
                if (!isEventValid) {
                    corruptedEvents.push(event.id);
                }
                // Verify hash chain
                if (previousHash && decryptedEvent.integrity.previousHash !== previousHash) {
                    chainBreaks++;
                }
                if (isEventValid) {
                    lastVerifiedEvent = event.id;
                }
                previousHash = decryptedEvent.integrity.hash;
            }
            const isValid = corruptedEvents.length === 0 && chainBreaks === 0;
            _logger.logger.info('Audit integrity verification completed', {
                organizationId,
                isValid,
                totalEvents: events.length,
                corruptedEvents: corruptedEvents.length,
                chainBreaks
            });
            return {
                isValid,
                corruptedEvents,
                chainBreaks,
                lastVerifiedEvent
            };
        } catch (error) {
            _logger.logger.error('Audit integrity verification failed', {
                error: error instanceof Error ? error.message : String(error),
                organizationId
            });
            throw error;
        }
    }
    /**
   * Private helper methods
   */ async createAuditEvent(event) {
        const id = _crypto.default.randomUUID();
        const timestamp = new Date();
        // Create event payload for hashing
        const eventPayload = {
            id,
            timestamp,
            ...event
        };
        // Generate integrity protection
        const eventHash = this.generateEventHash(eventPayload);
        const previousHash = this.hashChain.get(event.resource.organizationId);
        const signature = this.generateSignature(eventHash);
        const auditEvent = {
            ...eventPayload,
            integrity: {
                hash: eventHash,
                previousHash,
                signature,
                chainVerified: true
            }
        };
        return auditEvent;
    }
    generateEventHash(event) {
        const eventString = JSON.stringify(event, Object.keys(event).sort());
        return _crypto.default.createHash('sha256').update(eventString).digest('hex');
    }
    generateSignature(hash) {
        return _crypto.default.createHmac('sha256', this.integrityKey).update(hash).digest('hex');
    }
    async storeInDatabase(event) {
        // Encrypt sensitive data before storage
        const encryptedEvent = await this.encryptAuditEvent(event);
        await _prisma.default.auditEvent.create({
            data: {
                id: encryptedEvent.id,
                timestamp: encryptedEvent.timestamp,
                eventType: encryptedEvent.eventType,
                actorData: encryptedEvent.actorData,
                resourceData: encryptedEvent.resourceData,
                action: encryptedEvent.action,
                outcome: encryptedEvent.outcome,
                detailsData: encryptedEvent.detailsData,
                complianceData: encryptedEvent.complianceData,
                integrityData: encryptedEvent.integrityData,
                organizationId: event.resource.organizationId
            }
        });
    }
    async storeInSecureLog(event) {
        // Store in write-only security log for tamper protection
        _logger.logger.audit('AUDIT_EVENT', {
            eventId: event.id,
            timestamp: event.timestamp,
            eventType: event.eventType,
            actor: event.actor.identifier,
            resource: `${event.resource.type}:${event.resource.id}`,
            action: event.action,
            outcome: event.outcome,
            riskLevel: event.details.riskLevel,
            hash: event.integrity.hash
        });
    }
    async updateHashChain(event) {
        this.hashChain.set(event.resource.organizationId, event.integrity.hash);
    }
    initializeHashChain() {
        // Initialize hash chain for organizations
        _logger.logger.info('Audit hash chain initialized');
    }
    async encryptAuditEvent(event) {
        return {
            id: event.id,
            timestamp: event.timestamp,
            eventType: event.eventType,
            actorData: _enterpriseencryption.enterpriseEncryption.encryptAdvanced(JSON.stringify(event.actor)),
            resourceData: _enterpriseencryption.enterpriseEncryption.encryptAdvanced(JSON.stringify(event.resource)),
            action: event.action,
            outcome: event.outcome,
            detailsData: _enterpriseencryption.enterpriseEncryption.encryptAdvanced(JSON.stringify(event.details)),
            complianceData: _enterpriseencryption.enterpriseEncryption.encryptAdvanced(JSON.stringify(event.compliance)),
            integrityData: _enterpriseencryption.enterpriseEncryption.encryptAdvanced(JSON.stringify(event.integrity))
        };
    }
    async decryptAuditEvent(encryptedEvent) {
        return {
            id: encryptedEvent.id,
            timestamp: encryptedEvent.timestamp,
            eventType: encryptedEvent.eventType,
            actor: JSON.parse(_enterpriseencryption.enterpriseEncryption.decryptAdvanced(encryptedEvent.actorData)),
            resource: JSON.parse(_enterpriseencryption.enterpriseEncryption.decryptAdvanced(encryptedEvent.resourceData)),
            action: encryptedEvent.action,
            outcome: encryptedEvent.outcome,
            details: JSON.parse(_enterpriseencryption.enterpriseEncryption.decryptAdvanced(encryptedEvent.detailsData)),
            compliance: JSON.parse(_enterpriseencryption.enterpriseEncryption.decryptAdvanced(encryptedEvent.complianceData)),
            integrity: JSON.parse(_enterpriseencryption.enterpriseEncryption.decryptAdvanced(encryptedEvent.integrityData))
        };
    }
    calculateRiskLevel(action, resourceType) {
        const highRiskActions = [
            'DELETE',
            'PURGE',
            'EXPORT',
            'PERMISSION_GRANT'
        ];
        const sensitiveResources = [
            'USER',
            'ENCRYPTION_KEY',
            'BACKUP',
            'SYSTEM_SETTING'
        ];
        if (highRiskActions.includes(action) && sensitiveResources.includes(resourceType)) {
            return 'critical';
        } else if (highRiskActions.includes(action) || sensitiveResources.includes(resourceType)) {
            return 'high';
        } else if (action === 'UPDATE') {
            return 'medium';
        }
        return 'low';
    }
    classifyData(resourceType) {
        const restrictedTypes = [
            'ENCRYPTION_KEY',
            'SYSTEM_SETTING',
            'API_KEY'
        ];
        const confidentialTypes = [
            'USER',
            'CONTACT',
            'BACKUP'
        ];
        if (restrictedTypes.includes(resourceType)) return 'restricted';
        if (confidentialTypes.includes(resourceType)) return 'confidential';
        return 'internal';
    }
    getRetentionPeriod(resourceType) {
        const retentionMap = {
            'USER': 2555,
            'CONTACT': 1095,
            'CAMPAIGN': 1095,
            'WORKFLOW': 365,
            'ORGANIZATION': 2555,
            'API_KEY': 365,
            'SYSTEM_SETTING': 2555,
            'DATABASE': 2555,
            'ENCRYPTION_KEY': 2555,
            'BACKUP': 365,
            'AUDIT_LOG': 2555
        };
        return retentionMap[resourceType] || 365;
    }
    isGDPRRelevant(resourceType) {
        return [
            'USER',
            'CONTACT'
        ].includes(resourceType);
    }
    isPCIRelevant(resourceType) {
        return [
            'DATABASE',
            'BACKUP',
            'ENCRYPTION_KEY'
        ].includes(resourceType);
    }
    mapHttpMethodToAction(method) {
        const methodMap = {
            'GET': 'READ',
            'POST': 'CREATE',
            'PUT': 'UPDATE',
            'PATCH': 'UPDATE',
            'DELETE': 'DELETE'
        };
        return methodMap[method] || 'READ';
    }
    calculateAPIRiskLevel(endpoint, statusCode) {
        if (statusCode >= 500) return 'high';
        if (statusCode >= 400) return 'medium';
        if (endpoint.includes('/admin/') || endpoint.includes('/system/')) return 'high';
        return 'low';
    }
    // Additional helper methods for report generation...
    async getOrganizationId(userId) {
        const user = await _prisma.default.user.findUnique({
            where: {
                id: userId
            },
            select: {
                organizationId: true
            }
        });
        return user?.organizationId || 'unknown';
    }
    async getOrganizationIdByApiKey(apiKeyId) {
        // Implementation would look up organization by API key
        return 'unknown';
    }
    buildWhereClause(query) {
        const where = {};
        if (query.organizationId) where.organizationId = query.organizationId;
        if (query.eventType) where.eventType = query.eventType;
        if (query.action) where.action = query.action;
        if (query.outcome) where.outcome = query.outcome;
        if (query.startDate || query.endDate) {
            where.timestamp = {};
            if (query.startDate) where.timestamp.gte = query.startDate;
            if (query.endDate) where.timestamp.lte = query.endDate;
        }
        return where;
    }
    async verifyEventIntegrity(event) {
        const eventPayload = {
            ...event
        };
        delete eventPayload.integrity;
        const expectedHash = this.generateEventHash(eventPayload);
        const expectedSignature = this.generateSignature(expectedHash);
        return event.integrity.hash === expectedHash && event.integrity.signature === expectedSignature;
    }
    async triggerSecurityAlert(event) {
        _logger.logger.critical('SECURITY_ALERT', {
            eventId: event.id,
            actor: event.actor.identifier,
            action: event.action,
            resource: `${event.resource.type}:${event.resource.id}`,
            riskLevel: event.details.riskLevel
        });
    }
    async notifyComplianceTeam(event) {
        _logger.logger.info('GDPR_EVENT', {
            eventId: event.id,
            eventType: event.eventType,
            dataClassification: event.compliance.dataClassification
        });
    }
    async emergencyLog(event, error) {
        // Emergency fallback logging
        console.error('EMERGENCY_AUDIT_LOG', {
            timestamp: new Date().toISOString(),
            event: JSON.stringify(event),
            error: error instanceof Error ? error.message : String(error)
        });
    }
    // Report generation helper methods (simplified implementations)
    async countEvents(query) {
        return 0;
    }
    async countHighRiskEvents(query) {
        return 0;
    }
    async countFailedEvents(query) {
        return 0;
    }
    async countUniqueActors(query) {
        return 0;
    }
    async analyzeRiskDistribution(query) {
        return {};
    }
    async analyzeComplianceEvents(query) {
        return {
            gdpr: 0,
            dataAccess: 0,
            privacy: 0,
            retention: 0
        };
    }
    async getTopActiveUsers(query) {
        return [];
    }
    async getTopAccessedResources(query) {
        return [];
    }
    async analyzeFailuresByType(query) {
        return {};
    }
    async detectAnomalies(query) {
        return [];
    }
    async detectSuspiciousPatterns(query) {
        return [];
    }
}
// Helper function to detect build phase for singleton creation
function detectBuildPhaseForSingleton() {
    return(// Next.js build command sets this
    process.env.NEXT_PHASE === 'phase-production-build' || // Webpack build context
    process.env.WEBPACK_BUILD === 'true' || // CI/CD build environments
    process.env.CI === 'true' || // Docker build phase
    process.env.DOCKER_BUILD === 'true' || // Check if we're in a serverless build context
    typeof window === 'undefined' && process.env.NODE_ENV === 'production' && !process.env.NEXT_RUNTIME || // Check for missing runtime environment variables that would be present during actual runtime
    process.env.NODE_ENV === 'production' && !process.env.DATABASE_URL);
}
// Export singleton with enterprise features
let enterpriseAuditLoggerInstance = null;
try {
    enterpriseAuditLoggerInstance = new EnterpriseAuditLogger();
} catch (error) {
    // If audit logger fails during build, create a mock instance
    const isBuildPhase = detectBuildPhaseForSingleton();
    if (isBuildPhase) {
        console.warn('Using mock audit logger during build phase');
        // Create a minimal mock that won't break the build
        enterpriseAuditLoggerInstance = {
            logEvent: async ()=>{},
            logUserAction: async ()=>{},
            logSecurityEvent: async ()=>{},
            logAdminAction: async ()=>{},
            logAPIAccess: async ()=>{},
            queryLogs: async ()=>({
                    events: [],
                    totalCount: 0,
                    hasMore: false
                }),
            generateReport: async ()=>({
                    summary: {
                        totalEvents: 0,
                        highRiskEvents: 0,
                        failedEvents: 0,
                        uniqueActors: 0,
                        timeRange: {
                            start: new Date(),
                            end: new Date()
                        }
                    },
                    riskAnalysis: {
                        riskDistribution: {},
                        suspiciousPatterns: [],
                        anomalies: []
                    },
                    complianceMetrics: {
                        gdprEvents: 0,
                        dataAccessEvents: 0,
                        privacyRequests: 0,
                        retentionViolations: 0
                    },
                    topEvents: {
                        mostActiveUsers: [],
                        mostAccessedResources: [],
                        failuresByType: {}
                    }
                }),
            verifyIntegrity: async ()=>({
                    isValid: true,
                    corruptedEvents: [],
                    chainBreaks: 0,
                    lastVerifiedEvent: ''
                })
        };
    } else {
        throw error;
    }
}
const enterpriseAuditLogger = enterpriseAuditLoggerInstance;
const auditUserAction = (userId, action, resourceType, resourceId, details, ipAddress, userAgent)=>enterpriseAuditLogger.logUserAction(userId, action, resourceType, resourceId, details, ipAddress, userAgent);
const auditSecurityEvent = (eventType, actorIdentifier, details)=>enterpriseAuditLogger.logSecurityEvent(eventType, actorIdentifier, details);
const auditAdminAction = (adminId, action, resourceType, resourceId, changes, ipAddress)=>enterpriseAuditLogger.logAdminAction(adminId, action, resourceType, resourceId, changes, ipAddress);
const auditAPIAccess = (apiKeyId, endpoint, method, statusCode, duration, ipAddress, userAgent)=>enterpriseAuditLogger.logAPIAccess(apiKeyId, endpoint, method, statusCode, duration, ipAddress, userAgent);

//# sourceMappingURL=data:application/json;base64,