5fd6af5b748d75b339adb6810b5c2c0e
/**
 * LeadPulse MCP Server Integration Tests
 * 
 * These tests verify the LeadPulse MCP server works correctly with real visitor
 * session data, analytics, and real-time tracking capabilities.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jest = require("@jest/jest");
const _leadpulseserver = require("../../../mcp/servers/leadpulse-server");
const _setup = require("./setup");
(0, _jest.describe)('LeadPulse MCP Server Integration Tests', ()=>{
    let server;
    let dbManager;
    let performanceTracker;
    let authContext;
    (0, _jest.beforeAll)(async ()=>{
        dbManager = _setup.TestDatabaseManager.getInstance();
        await dbManager.setup();
        performanceTracker = new _setup.PerformanceTracker();
        server = new _leadpulseserver.LeadPulseMCPServer({
            rateLimiting: {
                enabled: false
            }
        });
        authContext = {
            organizationId: 'test-org-1',
            userId: 'test-user-1',
            role: 'ADMIN',
            permissions: [
                'read:visitors',
                'read:analytics'
            ]
        };
    }, _setup.testConfig.timeouts.database);
    (0, _jest.afterAll)(async ()=>{
        await dbManager.teardown();
    });
    (0, _jest.beforeEach)(()=>{
        performanceTracker.reset();
    });
    (0, _jest.describe)('Visitor Sessions Data Integrity', ()=>{
        (0, _jest.test)('should verify visitor session data relationships and structure', async ()=>{
            const sessions = await _setup.testPrisma.mCPVisitorSessions.findMany({
                include: {
                    organization: true
                }
            });
            (0, _jest.expect)(sessions.length).toBeGreaterThan(0);
            for (const session of sessions){
                // Verify organization relationship
                (0, _jest.expect)(session.organization).toBeDefined();
                (0, _jest.expect)(session.organizationId).toBe(session.organization.id);
                // Verify session data integrity
                (0, _jest.expect)(session.sessionId).toBeDefined();
                (0, _jest.expect)(session.fingerprint).toBeDefined();
                (0, _jest.expect)(session.ipAddress).toBeDefined();
                (0, _jest.expect)(session.userAgent).toBeDefined();
                // Verify device information
                (0, _jest.expect)([
                    'mobile',
                    'desktop',
                    'tablet'
                ]).toContain(session.device);
                (0, _jest.expect)(session.browser).toBeDefined();
                (0, _jest.expect)(session.os).toBeDefined();
                // Verify location data
                (0, _jest.expect)(session.city).toBeDefined();
                (0, _jest.expect)(session.country).toBeDefined();
                (0, _jest.expect)(session.region).toBeDefined();
                (0, _jest.expect)(session.timezone).toBeDefined();
                // Verify session metrics
                (0, _jest.expect)(session.duration).toBeGreaterThan(0);
                (0, _jest.expect)(session.pagesViewed).toBeGreaterThan(0);
                (0, _jest.expect)(session.interactions).toBeGreaterThanOrEqual(0);
                (0, _jest.expect)(session.engagementScore).toBeGreaterThanOrEqual(0);
                (0, _jest.expect)(session.engagementScore).toBeLessThanOrEqual(100);
                (0, _jest.expect)(session.conversionValue).toBeGreaterThanOrEqual(0);
                (0, _jest.expect)(session.bounceRate).toBeGreaterThanOrEqual(0);
                (0, _jest.expect)(session.bounceRate).toBeLessThanOrEqual(1);
                // Verify traffic source
                (0, _jest.expect)(session.trafficSource).toBeDefined();
                (0, _jest.expect)(session.trafficMedium).toBeDefined();
                // Verify page views structure
                if (session.pageViews) {
                    const pageViews = JSON.parse(session.pageViews);
                    (0, _jest.expect)(Array.isArray(pageViews)).toBe(true);
                    (0, _jest.expect)(pageViews.length).toBe(session.pagesViewed);
                    for (const pageView of pageViews){
                        (0, _jest.expect)(pageView).toHaveProperty('url');
                        (0, _jest.expect)(pageView).toHaveProperty('title');
                        (0, _jest.expect)(pageView).toHaveProperty('timestamp');
                        (0, _jest.expect)(pageView).toHaveProperty('timeOnPage');
                        (0, _jest.expect)(pageView).toHaveProperty('scrollDepth');
                    }
                }
                // Verify journey pattern
                (0, _jest.expect)(session.journeyPattern).toBeDefined();
                const validPatterns = [
                    'mobile_first_explorer',
                    'business_decision_maker',
                    'quick_browser',
                    'returning_prospect',
                    'social_media_referral'
                ];
                (0, _jest.expect)(validPatterns).toContain(session.journeyPattern);
                // Verify characteristics
                if (session.characteristics) {
                    const characteristics = JSON.parse(session.characteristics);
                    (0, _jest.expect)(Array.isArray(characteristics)).toBe(true);
                }
            }
            console.log(`✅ Verified ${sessions.length} visitor sessions for data integrity`);
        });
        (0, _jest.test)('should validate African market visitor patterns', async ()=>{
            const sessions = await _setup.testPrisma.mCPVisitorSessions.findMany({
                where: {
                    organizationId: 'test-org-1'
                }
            });
            let mobileCount = 0;
            let africanCountries = new Set();
            let whatsappTraffic = 0;
            for (const session of sessions){
                // Count mobile usage (should be high for African market)
                if (session.device === 'mobile') {
                    mobileCount++;
                }
                // Track African countries
                africanCountries.add(session.country);
                // Count WhatsApp traffic
                if (session.trafficSource === 'whatsapp') {
                    whatsappTraffic++;
                }
            }
            const mobilePercentage = mobileCount / sessions.length * 100;
            // Verify African market characteristics
            (0, _jest.expect)(mobilePercentage).toBeGreaterThan(70); // High mobile usage
            (0, _jest.expect)(africanCountries.size).toBeGreaterThan(0);
            // Check for African countries in the data
            const expectedAfricanCountries = [
                'Nigeria',
                'Ghana',
                'Kenya',
                'South Africa',
                'Egypt'
            ];
            const hasAfricanCountries = expectedAfricanCountries.some((country)=>africanCountries.has(country));
            (0, _jest.expect)(hasAfricanCountries).toBe(true);
            console.log(`✅ African market validation: ${mobilePercentage.toFixed(1)}% mobile, ${africanCountries.size} countries`);
        });
    });
    (0, _jest.describe)('Real-time Analytics Operations', ()=>{
        (0, _jest.test)('should retrieve real-time visitor analytics', async ()=>{
            performanceTracker.start();
            const result = await server.readResource('leadpulse://analytics', {
                organizationId: 'test-org-1',
                timeRange: 'last_24_hours'
            }, authContext);
            const duration = performanceTracker.measure('realtimeAnalytics');
            (0, _jest.expect)(result.success).toBe(true);
            (0, _jest.expect)(result.data).toBeDefined();
            const data = result.data;
            (0, _jest.expect)(data).toHaveProperty('summary');
            (0, _jest.expect)(data).toHaveProperty('sessions');
            (0, _jest.expect)(data).toHaveProperty('topPages');
            (0, _jest.expect)(data).toHaveProperty('deviceBreakdown');
            (0, _jest.expect)(data).toHaveProperty('trafficSources');
            (0, _jest.expect)(data).toHaveProperty('conversionFunnel');
            // Verify summary metrics
            (0, _jest.expect)(data.summary.totalSessions).toBeGreaterThan(0);
            (0, _jest.expect)(data.summary.totalPageViews).toBeGreaterThan(0);
            (0, _jest.expect)(data.summary.avgSessionDuration).toBeGreaterThan(0);
            (0, _jest.expect)(data.summary.bounceRate).toBeGreaterThanOrEqual(0);
            (0, _jest.expect)(data.summary.bounceRate).toBeLessThanOrEqual(100);
            // Verify device breakdown
            (0, _jest.expect)(data.deviceBreakdown).toHaveProperty('mobile');
            (0, _jest.expect)(data.deviceBreakdown).toHaveProperty('desktop');
            (0, _jest.expect)(data.deviceBreakdown).toHaveProperty('tablet');
            // Verify traffic sources
            (0, _jest.expect)(Array.isArray(data.trafficSources)).toBe(true);
            for (const source of data.trafficSources){
                (0, _jest.expect)(source).toHaveProperty('source');
                (0, _jest.expect)(source).toHaveProperty('sessions');
                (0, _jest.expect)(source).toHaveProperty('percentage');
            }
            (0, _jest.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxResponseTime);
            console.log(`✅ Retrieved real-time analytics with ${data.sessions.length} sessions in ${duration}ms`);
        });
        (0, _jest.test)('should analyze visitor journey patterns', async ()=>{
            performanceTracker.start();
            const result = await server.readResource('leadpulse://journey-analysis', {
                organizationId: 'test-org-1'
            }, authContext);
            const duration = performanceTracker.measure('journeyAnalysis');
            (0, _jest.expect)(result.success).toBe(true);
            const data = result.data;
            (0, _jest.expect)(data).toHaveProperty('journeyPatterns');
            (0, _jest.expect)(data).toHaveProperty('commonPaths');
            (0, _jest.expect)(data).toHaveProperty('dropOffPoints');
            (0, _jest.expect)(data).toHaveProperty('conversionPaths');
            // Verify journey patterns
            (0, _jest.expect)(Array.isArray(data.journeyPatterns)).toBe(true);
            for (const pattern of data.journeyPatterns){
                (0, _jest.expect)(pattern).toHaveProperty('type');
                (0, _jest.expect)(pattern).toHaveProperty('count');
                (0, _jest.expect)(pattern).toHaveProperty('avgEngagement');
                (0, _jest.expect)(pattern).toHaveProperty('conversionRate');
                (0, _jest.expect)(pattern.count).toBeGreaterThan(0);
            }
            // Verify common paths
            (0, _jest.expect)(Array.isArray(data.commonPaths)).toBe(true);
            for (const path of data.commonPaths){
                (0, _jest.expect)(path).toHaveProperty('sequence');
                (0, _jest.expect)(path).toHaveProperty('frequency');
                (0, _jest.expect)(path).toHaveProperty('avgConversionRate');
                (0, _jest.expect)(Array.isArray(path.sequence)).toBe(true);
            }
            (0, _jest.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxResponseTime);
            console.log(`✅ Analyzed ${data.journeyPatterns.length} journey patterns in ${duration}ms`);
        });
        (0, _jest.test)('should track conversion funnel performance', async ()=>{
            performanceTracker.start();
            const result = await server.readResource('leadpulse://conversion-funnel', {
                organizationId: 'test-org-1',
                funnelType: 'sales'
            }, authContext);
            const duration = performanceTracker.measure('conversionFunnel');
            (0, _jest.expect)(result.success).toBe(true);
            const data = result.data;
            (0, _jest.expect)(data).toHaveProperty('stages');
            (0, _jest.expect)(data).toHaveProperty('overallConversionRate');
            (0, _jest.expect)(data).toHaveProperty('dropOffAnalysis');
            // Verify funnel stages
            (0, _jest.expect)(Array.isArray(data.stages)).toBe(true);
            (0, _jest.expect)(data.stages.length).toBeGreaterThan(0);
            let previousVisitors = null;
            for (const stage of data.stages){
                (0, _jest.expect)(stage).toHaveProperty('name');
                (0, _jest.expect)(stage).toHaveProperty('visitors');
                (0, _jest.expect)(stage).toHaveProperty('conversionRate');
                (0, _jest.expect)(stage).toHaveProperty('dropOffRate');
                (0, _jest.expect)(stage.visitors).toBeGreaterThanOrEqual(0);
                (0, _jest.expect)(stage.conversionRate).toBeGreaterThanOrEqual(0);
                (0, _jest.expect)(stage.conversionRate).toBeLessThanOrEqual(100);
                // Verify funnel logic (each stage should have fewer or equal visitors)
                if (previousVisitors !== null) {
                    (0, _jest.expect)(stage.visitors).toBeLessThanOrEqual(previousVisitors);
                }
                previousVisitors = stage.visitors;
            }
            (0, _jest.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxResponseTime);
            console.log(`✅ Analyzed conversion funnel with ${data.stages.length} stages in ${duration}ms`);
        });
        (0, _jest.test)('should provide visitor geo-analytics', async ()=>{
            performanceTracker.start();
            const result = await server.readResource('leadpulse://geo-analytics', {
                organizationId: 'test-org-1'
            }, authContext);
            const duration = performanceTracker.measure('geoAnalytics');
            (0, _jest.expect)(result.success).toBe(true);
            const data = result.data;
            (0, _jest.expect)(data).toHaveProperty('countries');
            (0, _jest.expect)(data).toHaveProperty('cities');
            (0, _jest.expect)(data).toHaveProperty('regions');
            (0, _jest.expect)(data).toHaveProperty('timezones');
            // Verify countries data
            (0, _jest.expect)(Array.isArray(data.countries)).toBe(true);
            for (const country of data.countries){
                (0, _jest.expect)(country).toHaveProperty('name');
                (0, _jest.expect)(country).toHaveProperty('sessions');
                (0, _jest.expect)(country).toHaveProperty('percentage');
                (0, _jest.expect)(country).toHaveProperty('avgEngagement');
                (0, _jest.expect)(country.sessions).toBeGreaterThan(0);
            }
            // Verify cities data
            (0, _jest.expect)(Array.isArray(data.cities)).toBe(true);
            for (const city of data.cities){
                (0, _jest.expect)(city).toHaveProperty('name');
                (0, _jest.expect)(city).toHaveProperty('country');
                (0, _jest.expect)(city).toHaveProperty('sessions');
                (0, _jest.expect)(city.sessions).toBeGreaterThan(0);
            }
            (0, _jest.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxResponseTime);
            console.log(`✅ Analyzed geo-analytics for ${data.countries.length} countries in ${duration}ms`);
        });
    });
    (0, _jest.describe)('Session Tracking and Engagement', ()=>{
        (0, _jest.test)('should track live visitor sessions', async ()=>{
            performanceTracker.start();
            const result = await server.readResource('leadpulse://live-sessions', {
                organizationId: 'test-org-1'
            }, authContext);
            const duration = performanceTracker.measure('liveSessions');
            (0, _jest.expect)(result.success).toBe(true);
            const data = result.data;
            (0, _jest.expect)(data).toHaveProperty('activeSessions');
            (0, _jest.expect)(data).toHaveProperty('totalActive');
            (0, _jest.expect)(data).toHaveProperty('recentActivity');
            // Verify active sessions structure
            (0, _jest.expect)(Array.isArray(data.activeSessions)).toBe(true);
            for (const session of data.activeSessions){
                (0, _jest.expect)(session).toHaveProperty('sessionId');
                (0, _jest.expect)(session).toHaveProperty('startTime');
                (0, _jest.expect)(session).toHaveProperty('currentPage');
                (0, _jest.expect)(session).toHaveProperty('device');
                (0, _jest.expect)(session).toHaveProperty('location');
                (0, _jest.expect)(session).toHaveProperty('engagementScore');
            }
            (0, _jest.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxResponseTime);
            console.log(`✅ Tracked ${data.activeSessions.length} live sessions in ${duration}ms`);
        });
        (0, _jest.test)('should calculate engagement scoring metrics', async ()=>{
            performanceTracker.start();
            const result = await server.readResource('leadpulse://engagement-scoring', {
                organizationId: 'test-org-1',
                timeRange: 'last_7_days'
            }, authContext);
            const duration = performanceTracker.measure('engagementScoring');
            (0, _jest.expect)(result.success).toBe(true);
            const data = result.data;
            (0, _jest.expect)(data).toHaveProperty('scoringModel');
            (0, _jest.expect)(data).toHaveProperty('scoreDistribution');
            (0, _jest.expect)(data).toHaveProperty('topEngagedSessions');
            (0, _jest.expect)(data).toHaveProperty('engagementFactors');
            // Verify scoring model
            const model = data.scoringModel;
            (0, _jest.expect)(model).toHaveProperty('timeOnSiteWeight');
            (0, _jest.expect)(model).toHaveProperty('pageViewsWeight');
            (0, _jest.expect)(model).toHaveProperty('interactionsWeight');
            (0, _jest.expect)(model).toHaveProperty('scrollDepthWeight');
            // Verify score distribution
            (0, _jest.expect)(Array.isArray(data.scoreDistribution)).toBe(true);
            for (const bucket of data.scoreDistribution){
                (0, _jest.expect)(bucket).toHaveProperty('range');
                (0, _jest.expect)(bucket).toHaveProperty('count');
                (0, _jest.expect)(bucket).toHaveProperty('percentage');
            }
            // Verify top engaged sessions
            (0, _jest.expect)(Array.isArray(data.topEngagedSessions)).toBe(true);
            for (const session of data.topEngagedSessions){
                (0, _jest.expect)(session).toHaveProperty('sessionId');
                (0, _jest.expect)(session).toHaveProperty('engagementScore');
                (0, _jest.expect)(session).toHaveProperty('duration');
                (0, _jest.expect)(session).toHaveProperty('interactions');
                (0, _jest.expect)(session.engagementScore).toBeGreaterThan(70); // High engagement
            }
            (0, _jest.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxResponseTime);
            console.log(`✅ Calculated engagement scoring in ${duration}ms`);
        });
    });
    (0, _jest.describe)('Performance and Real-time Capabilities', ()=>{
        (0, _jest.test)('should handle high-frequency analytics queries', async ()=>{
            const queries = [
                'leadpulse://analytics',
                'leadpulse://live-sessions',
                'leadpulse://geo-analytics',
                'leadpulse://engagement-scoring'
            ];
            performanceTracker.start();
            const promises = queries.map((query)=>server.readResource(query, {
                    organizationId: 'test-org-1'
                }, authContext));
            const results = await Promise.all(promises);
            const duration = performanceTracker.measure('highFrequencyQueries');
            // Verify all queries succeeded
            for (const result of results){
                (0, _jest.expect)(result.success).toBe(true);
                (0, _jest.expect)(result.data).toBeDefined();
            }
            (0, _jest.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxResponseTime * 2);
            console.log(`✅ Handled ${queries.length} high-frequency queries in ${duration}ms`);
        });
        (0, _jest.test)('should validate real-time data freshness', async ()=>{
            // Get current session data
            const result = await server.readResource('leadpulse://analytics', {
                organizationId: 'test-org-1',
                timeRange: 'last_1_hour'
            }, authContext);
            (0, _jest.expect)(result.success).toBe(true);
            const data = result.data;
            // Verify data freshness
            const now = new Date();
            const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000);
            for (const session of data.sessions){
                const sessionTime = new Date(session.timestamp);
                (0, _jest.expect)(sessionTime.getTime()).toBeGreaterThanOrEqual(oneHourAgo.getTime());
                (0, _jest.expect)(sessionTime.getTime()).toBeLessThanOrEqual(now.getTime());
            }
            console.log(`✅ Validated real-time data freshness for ${data.sessions.length} sessions`);
        });
        (0, _jest.test)('should measure complex analytics query performance', async ()=>{
            const startTime = Date.now();
            // Complex query with multiple joins and aggregations
            const sessions = await _setup.testPrisma.mCPVisitorSessions.groupBy({
                by: [
                    'journeyPattern',
                    'device',
                    'country'
                ],
                _count: {
                    sessionId: true
                },
                _avg: {
                    engagementScore: true,
                    duration: true,
                    conversionValue: true
                },
                where: {
                    organizationId: 'test-org-1',
                    sessionStart: {
                        gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) // Last 7 days
                    }
                },
                orderBy: {
                    _count: {
                        sessionId: 'desc'
                    }
                }
            });
            const queryDuration = Date.now() - startTime;
            (0, _jest.expect)(sessions.length).toBeGreaterThan(0);
            (0, _jest.expect)(queryDuration).toBeLessThan(_setup.testConfig.performance.maxQueryTime);
            console.log(`✅ Complex analytics query: ${sessions.length} groups in ${queryDuration}ms`);
        });
    });
    (0, _jest.describe)('Data Quality and Consistency', ()=>{
        (0, _jest.test)('should validate session data consistency across operations', async ()=>{
            // Get analytics summary
            const analyticsResult = await server.readResource('leadpulse://analytics', {
                organizationId: 'test-org-1'
            }, authContext);
            // Get live sessions
            const liveResult = await server.readResource('leadpulse://live-sessions', {
                organizationId: 'test-org-1'
            }, authContext);
            (0, _jest.expect)(analyticsResult.success).toBe(true);
            (0, _jest.expect)(liveResult.success).toBe(true);
            const analytics = analyticsResult.data;
            const live = liveResult.data;
            // Verify data consistency
            (0, _jest.expect)(analytics.summary.totalSessions).toBeGreaterThanOrEqual(live.totalActive);
            // Live sessions should be subset of all sessions
            for (const liveSession of live.activeSessions){
                (0, _jest.expect)(liveSession.sessionId).toBeDefined();
                (0, _jest.expect)(liveSession.engagementScore).toBeGreaterThanOrEqual(0);
                (0, _jest.expect)(liveSession.engagementScore).toBeLessThanOrEqual(100);
            }
            console.log('✅ Data consistency validated across analytics and live sessions');
        });
        (0, _jest.test)('should ensure engagement score calculations are accurate', async ()=>{
            // Get sessions with engagement scores
            const sessions = await _setup.testPrisma.mCPVisitorSessions.findMany({
                where: {
                    organizationId: 'test-org-1'
                },
                take: 10
            });
            for (const session of sessions){
                // Verify engagement score logic
                let expectedScore = 0;
                // Base score from page views
                expectedScore += session.pagesViewed * 5;
                // Time on site bonus
                const avgTimePerPage = session.duration / session.pagesViewed;
                if (avgTimePerPage > 60) expectedScore += 20;
                else if (avgTimePerPage > 30) expectedScore += 10;
                // Interaction bonus
                expectedScore += session.interactions * 5;
                // Conversion bonus
                if (session.hasConverted) expectedScore += 30;
                // The actual score should be in reasonable range of expected
                const scoreDifference = Math.abs(session.engagementScore - Math.min(100, expectedScore));
                (0, _jest.expect)(scoreDifference).toBeLessThan(20); // Allow some variance for additional factors
            }
            console.log(`✅ Validated engagement score calculations for ${sessions.length} sessions`);
        });
    });
    (0, _jest.afterAll)(()=>{
        const stats = performanceTracker.getAllStats();
        console.log('\n📊 LeadPulse Server Performance Summary:');
        for (const [operation, operationStats] of Object.entries(stats)){
            console.log(`  ${operation}: avg ${operationStats.avg}ms, min ${operationStats.min}ms, max ${operationStats.max}ms`);
        }
    });
});

//# sourceMappingURL=data:application/json;base64,