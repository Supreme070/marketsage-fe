{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/__tests__/integration/mcp/global-setup.ts"],"sourcesContent":["/**\n * Global Setup for MCP Integration Tests\n * \n * Runs once before all test suites to prepare the test environment.\n */\n\nimport { execSync } from 'child_process';\nimport { PrismaClient } from '@prisma/client';\nimport * as dotenv from 'dotenv';\n\n// Load test environment\ndotenv.config();\n\nconst TEST_DATABASE_URL = process.env.TEST_DATABASE_URL || \n  process.env.DATABASE_URL?.replace('/marketsage', '/marketsage_test') ||\n  \"postgresql://marketsage:marketsage_password@marketsage-db:5432/marketsage_test?schema=public\";\n\nexport default async function globalSetup(): Promise<void> {\n  console.log('üèóÔ∏è  Global Setup: Preparing MCP Integration Test Environment');\n  console.log('============================================================');\n  \n  try {\n    // Step 1: Verify test database connection\n    console.log('üìä Step 1: Verifying test database connection...');\n    const testPrisma = new PrismaClient({\n      datasources: {\n        db: {\n          url: TEST_DATABASE_URL\n        }\n      }\n    });\n\n    try {\n      await testPrisma.$connect();\n      console.log('‚úÖ Test database connection successful');\n    } catch (error) {\n      console.error('‚ùå Test database connection failed:', error);\n      \n      // Try to wait and retry (useful in Docker environments)\n      console.log('‚è≥ Waiting 5 seconds and retrying...');\n      await new Promise(resolve => setTimeout(resolve, 5000));\n      \n      try {\n        await testPrisma.$connect();\n        console.log('‚úÖ Test database connection successful on retry');\n      } catch (retryError) {\n        console.error('‚ùå Test database connection failed on retry:', retryError);\n        throw new Error('Cannot connect to test database. Please ensure the database is running.');\n      }\n    } finally {\n      await testPrisma.$disconnect();\n    }\n\n    // Step 2: Run database migrations\n    console.log('üìã Step 2: Running database migrations...');\n    try {\n      // Set test database URL for migration\n      const originalUrl = process.env.DATABASE_URL;\n      process.env.DATABASE_URL = TEST_DATABASE_URL;\n      \n      execSync('npx prisma migrate deploy', { \n        stdio: 'pipe',\n        timeout: 60000 // 1 minute timeout\n      });\n      \n      // Restore original database URL\n      if (originalUrl) {\n        process.env.DATABASE_URL = originalUrl;\n      }\n      \n      console.log('‚úÖ Database migrations completed');\n    } catch (error) {\n      console.warn('‚ö†Ô∏è  Migration may have failed, but continuing with tests:', error);\n      // Don't fail setup if migrations fail - the database might already be up to date\n    }\n\n    // Step 3: Verify Prisma client generation\n    console.log('üîß Step 3: Verifying Prisma client...');\n    try {\n      execSync('npx prisma generate', { \n        stdio: 'pipe',\n        timeout: 30000 // 30 seconds timeout\n      });\n      console.log('‚úÖ Prisma client verified');\n    } catch (error) {\n      console.warn('‚ö†Ô∏è  Prisma generate warning (client may already be generated):', error);\n    }\n\n    // Step 4: Create test reports directory\n    console.log('üìÅ Step 4: Creating test reports directory...');\n    try {\n      execSync('mkdir -p test-reports/integration', { stdio: 'pipe' });\n      console.log('‚úÖ Test reports directory created');\n    } catch (error) {\n      console.warn('‚ö†Ô∏è  Could not create test reports directory:', error);\n    }\n\n    // Step 5: Clean up any existing test data\n    console.log('üßπ Step 5: Cleaning up existing test data...');\n    const cleanupPrisma = new PrismaClient({\n      datasources: {\n        db: {\n          url: TEST_DATABASE_URL\n        }\n      }\n    });\n\n    try {\n      await cleanupPrisma.$connect();\n      \n      // Clean up in reverse dependency order\n      await cleanupPrisma.mCPMonitoringMetrics.deleteMany();\n      await cleanupPrisma.mCPVisitorSessions.deleteMany();\n      await cleanupPrisma.mCPCustomerPredictions.deleteMany();\n      await cleanupPrisma.mCPCampaignMetrics.deleteMany();\n      \n      // Don't delete base data (organizations, users, contacts) as they're needed for seeding\n      console.log('‚úÖ Existing MCP test data cleaned up');\n    } catch (error) {\n      console.warn('‚ö†Ô∏è  Could not clean up existing test data (may not exist):', error);\n    } finally {\n      await cleanupPrisma.$disconnect();\n    }\n\n    // Step 6: Environment verification\n    console.log('üåç Step 6: Environment verification...');\n    console.log(`  Node.js Version: ${process.version}`);\n    console.log(`  Platform: ${process.platform}`);\n    console.log(`  Architecture: ${process.arch}`);\n    console.log(`  Test Database: ${TEST_DATABASE_URL.replace(/\\/\\/.*@/, '//***:***@')}`);\n    console.log(`  Docker Environment: ${process.env.IS_DOCKER_ENV || 'false'}`);\n    console.log('‚úÖ Environment verification complete');\n\n    console.log('\\nüéâ Global Setup Complete - Ready for Integration Tests!');\n    console.log('======================================================');\n\n  } catch (error) {\n    console.error('\\nüí• Global Setup Failed:', error);\n    console.error('======================================');\n    \n    // Provide helpful troubleshooting information\n    console.error('\\nüîß Troubleshooting Tips:');\n    console.error('1. Ensure the database is running and accessible');\n    console.error('2. Check that DATABASE_URL is correctly configured');\n    console.error('3. Verify network connectivity to the database');\n    console.error('4. In Docker: ensure containers are running and can communicate');\n    console.error('5. Check database credentials and permissions');\n    \n    throw error;\n  }\n};"],"names":["globalSetup","dotenv","config","TEST_DATABASE_URL","process","env","DATABASE_URL","replace","console","log","testPrisma","PrismaClient","datasources","db","url","$connect","error","Promise","resolve","setTimeout","retryError","Error","$disconnect","originalUrl","execSync","stdio","timeout","warn","cleanupPrisma","mCPMonitoringMetrics","deleteMany","mCPVisitorSessions","mCPCustomerPredictions","mCPCampaignMetrics","version","platform","arch","IS_DOCKER_ENV"],"mappings":"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"}