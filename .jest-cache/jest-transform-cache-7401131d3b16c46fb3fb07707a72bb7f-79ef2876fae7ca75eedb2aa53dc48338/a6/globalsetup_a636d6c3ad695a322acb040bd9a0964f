a34e03f6999df9e4e1571a2502f3d71c
/**
 * Global Setup for MCP Integration Tests
 * 
 * Runs once before all test suites to prepare the test environment.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return globalSetup;
    }
});
const _child_process = require("child_process");
const _client = require("@prisma/client");
const _dotenv = /*#__PURE__*/ _interop_require_wildcard(require("dotenv"));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// Load test environment
_dotenv.config();
const TEST_DATABASE_URL = process.env.TEST_DATABASE_URL || process.env.DATABASE_URL?.replace('/marketsage', '/marketsage_test') || "postgresql://marketsage:marketsage_password@marketsage-db:5432/marketsage_test?schema=public";
async function globalSetup() {
    console.log('üèóÔ∏è  Global Setup: Preparing MCP Integration Test Environment');
    console.log('============================================================');
    try {
        // Step 1: Verify test database connection
        console.log('üìä Step 1: Verifying test database connection...');
        const testPrisma = new _client.PrismaClient({
            datasources: {
                db: {
                    url: TEST_DATABASE_URL
                }
            }
        });
        try {
            await testPrisma.$connect();
            console.log('‚úÖ Test database connection successful');
        } catch (error) {
            console.error('‚ùå Test database connection failed:', error);
            // Try to wait and retry (useful in Docker environments)
            console.log('‚è≥ Waiting 5 seconds and retrying...');
            await new Promise((resolve)=>setTimeout(resolve, 5000));
            try {
                await testPrisma.$connect();
                console.log('‚úÖ Test database connection successful on retry');
            } catch (retryError) {
                console.error('‚ùå Test database connection failed on retry:', retryError);
                throw new Error('Cannot connect to test database. Please ensure the database is running.');
            }
        } finally{
            await testPrisma.$disconnect();
        }
        // Step 2: Run database migrations
        console.log('üìã Step 2: Running database migrations...');
        try {
            // Set test database URL for migration
            const originalUrl = process.env.DATABASE_URL;
            process.env.DATABASE_URL = TEST_DATABASE_URL;
            (0, _child_process.execSync)('npx prisma migrate deploy', {
                stdio: 'pipe',
                timeout: 60000 // 1 minute timeout
            });
            // Restore original database URL
            if (originalUrl) {
                process.env.DATABASE_URL = originalUrl;
            }
            console.log('‚úÖ Database migrations completed');
        } catch (error) {
            console.warn('‚ö†Ô∏è  Migration may have failed, but continuing with tests:', error);
        // Don't fail setup if migrations fail - the database might already be up to date
        }
        // Step 3: Verify Prisma client generation
        console.log('üîß Step 3: Verifying Prisma client...');
        try {
            (0, _child_process.execSync)('npx prisma generate', {
                stdio: 'pipe',
                timeout: 30000 // 30 seconds timeout
            });
            console.log('‚úÖ Prisma client verified');
        } catch (error) {
            console.warn('‚ö†Ô∏è  Prisma generate warning (client may already be generated):', error);
        }
        // Step 4: Create test reports directory
        console.log('üìÅ Step 4: Creating test reports directory...');
        try {
            (0, _child_process.execSync)('mkdir -p test-reports/integration', {
                stdio: 'pipe'
            });
            console.log('‚úÖ Test reports directory created');
        } catch (error) {
            console.warn('‚ö†Ô∏è  Could not create test reports directory:', error);
        }
        // Step 5: Clean up any existing test data
        console.log('üßπ Step 5: Cleaning up existing test data...');
        const cleanupPrisma = new _client.PrismaClient({
            datasources: {
                db: {
                    url: TEST_DATABASE_URL
                }
            }
        });
        try {
            await cleanupPrisma.$connect();
            // Clean up in reverse dependency order
            await cleanupPrisma.mCPMonitoringMetrics.deleteMany();
            await cleanupPrisma.mCPVisitorSessions.deleteMany();
            await cleanupPrisma.mCPCustomerPredictions.deleteMany();
            await cleanupPrisma.mCPCampaignMetrics.deleteMany();
            // Don't delete base data (organizations, users, contacts) as they're needed for seeding
            console.log('‚úÖ Existing MCP test data cleaned up');
        } catch (error) {
            console.warn('‚ö†Ô∏è  Could not clean up existing test data (may not exist):', error);
        } finally{
            await cleanupPrisma.$disconnect();
        }
        // Step 6: Environment verification
        console.log('üåç Step 6: Environment verification...');
        console.log(`  Node.js Version: ${process.version}`);
        console.log(`  Platform: ${process.platform}`);
        console.log(`  Architecture: ${process.arch}`);
        console.log(`  Test Database: ${TEST_DATABASE_URL.replace(/\/\/.*@/, '//***:***@')}`);
        console.log(`  Docker Environment: ${process.env.IS_DOCKER_ENV || 'false'}`);
        console.log('‚úÖ Environment verification complete');
        console.log('\nüéâ Global Setup Complete - Ready for Integration Tests!');
        console.log('======================================================');
    } catch (error) {
        console.error('\nüí• Global Setup Failed:', error);
        console.error('======================================');
        // Provide helpful troubleshooting information
        console.error('\nüîß Troubleshooting Tips:');
        console.error('1. Ensure the database is running and accessible');
        console.error('2. Check that DATABASE_URL is correctly configured');
        console.error('3. Verify network connectivity to the database');
        console.error('4. In Docker: ensure containers are running and can communicate');
        console.error('5. Check database credentials and permissions');
        throw error;
    }
}

//# sourceMappingURL=data:application/json;base64,