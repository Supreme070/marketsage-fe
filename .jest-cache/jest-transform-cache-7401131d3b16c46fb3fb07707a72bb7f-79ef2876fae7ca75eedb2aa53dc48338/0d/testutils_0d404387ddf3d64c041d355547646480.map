{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/__tests__/e2e/test-utils.ts"],"sourcesContent":["import { Page, expect } from '@playwright/test';\n\n/**\n * Test utilities for MarketSage E2E tests\n * Provides common actions and assertions\n */\n\nexport class TestUtils {\n  constructor(private page: Page) {}\n\n  /**\n   * Login to MarketSage\n   */\n  async login(email = 'test@marketsage.com', password = 'TestPassword123!') {\n    await this.page.goto('/auth/login');\n    await this.page.fill('[data-testid=\"email\"]', email);\n    await this.page.fill('[data-testid=\"password\"]', password);\n    await this.page.click('[data-testid=\"login-button\"]');\n    \n    // Wait for dashboard to load\n    await this.page.waitForURL('/dashboard');\n    await expect(this.page.locator('[data-testid=\"dashboard-header\"]')).toBeVisible();\n  }\n\n  /**\n   * Navigate to a specific dashboard section\n   */\n  async navigateTo(section: string) {\n    await this.page.click(`[data-testid=\"nav-${section}\"]`);\n    await this.page.waitForURL(`**/${section}`);\n  }\n\n  /**\n   * Wait for loading indicators to disappear\n   */\n  async waitForLoadingComplete() {\n    // Wait for any loading spinners to disappear\n    await this.page.waitForSelector('[data-testid=\"loading-spinner\"]', { state: 'hidden' });\n    \n    // Wait for skeleton loaders to disappear\n    await this.page.waitForSelector('[data-testid=\"skeleton-loader\"]', { state: 'hidden' });\n    \n    // Give a moment for data to populate\n    await this.page.waitForTimeout(1000);\n  }\n\n  /**\n   * Check if MCP data is loaded correctly\n   */\n  async verifyMCPDataLoaded() {\n    // Check for real data indicators (not demo/placeholder data)\n    const realDataIndicators = [\n      '[data-testid=\"real-visitor-count\"]',\n      '[data-testid=\"real-conversion-data\"]',\n      '[data-testid=\"mcp-data-indicator\"]',\n    ];\n\n    for (const indicator of realDataIndicators) {\n      try {\n        await expect(this.page.locator(indicator)).toBeVisible({ timeout: 5000 });\n      } catch {\n        // Some indicators may not be present on all pages\n        continue;\n      }\n    }\n  }\n\n  /**\n   * Simulate network failure and verify fallback behavior\n   */\n  async testMCPFallback() {\n    // Block MCP server requests\n    await this.page.route('**/api/mcp/**', route => route.abort());\n    \n    // Reload page to trigger fallback\n    await this.page.reload();\n    await this.waitForLoadingComplete();\n    \n    // Verify graceful fallback (demo data or error message)\n    const fallbackIndicators = [\n      '[data-testid=\"demo-data-notice\"]',\n      '[data-testid=\"mcp-offline-notice\"]',\n      '[data-testid=\"fallback-data\"]',\n    ];\n\n    let fallbackFound = false;\n    for (const indicator of fallbackIndicators) {\n      try {\n        await expect(this.page.locator(indicator)).toBeVisible({ timeout: 3000 });\n        fallbackFound = true;\n        break;\n      } catch {\n        continue;\n      }\n    }\n\n    expect(fallbackFound).toBe(true);\n\n    // Restore network\n    await this.page.unroute('**/api/mcp/**');\n  }\n\n  /**\n   * Create a test campaign\n   */\n  async createTestCampaign(type: 'email' | 'sms' | 'whatsapp', name: string) {\n    await this.navigateTo('campaigns');\n    await this.page.click('[data-testid=\"create-campaign\"]');\n    \n    // Select campaign type\n    await this.page.click(`[data-testid=\"campaign-type-${type}\"]`);\n    \n    // Fill campaign details\n    await this.page.fill('[data-testid=\"campaign-name\"]', name);\n    await this.page.fill('[data-testid=\"campaign-subject\"]', `Test ${type} campaign`);\n    \n    if (type === 'email') {\n      await this.page.fill('[data-testid=\"email-content\"]', 'This is a test email campaign.');\n    } else if (type === 'sms') {\n      await this.page.fill('[data-testid=\"sms-message\"]', 'This is a test SMS campaign.');\n    } else if (type === 'whatsapp') {\n      await this.page.fill('[data-testid=\"whatsapp-message\"]', 'This is a test WhatsApp campaign.');\n    }\n\n    // Save campaign\n    await this.page.click('[data-testid=\"save-campaign\"]');\n    await this.waitForLoadingComplete();\n    \n    // Verify campaign was created\n    await expect(this.page.locator(`text=${name}`)).toBeVisible();\n  }\n\n  /**\n   * Create a test contact\n   */\n  async createTestContact(email: string, name: string) {\n    await this.navigateTo('contacts');\n    await this.page.click('[data-testid=\"add-contact\"]');\n    \n    await this.page.fill('[data-testid=\"contact-email\"]', email);\n    await this.page.fill('[data-testid=\"contact-name\"]', name);\n    \n    await this.page.click('[data-testid=\"save-contact\"]');\n    await this.waitForLoadingComplete();\n    \n    // Verify contact was created\n    await expect(this.page.locator(`text=${email}`)).toBeVisible();\n  }\n\n  /**\n   * Create a test workflow\n   */\n  async createTestWorkflow(name: string) {\n    await this.navigateTo('workflows');\n    await this.page.click('[data-testid=\"create-workflow\"]');\n    \n    await this.page.fill('[data-testid=\"workflow-name\"]', name);\n    \n    // Add a simple trigger (form submission)\n    await this.page.click('[data-testid=\"add-trigger\"]');\n    await this.page.click('[data-testid=\"trigger-form-submission\"]');\n    \n    // Add an action (send email)\n    await this.page.click('[data-testid=\"add-action\"]');\n    await this.page.click('[data-testid=\"action-send-email\"]');\n    \n    await this.page.click('[data-testid=\"save-workflow\"]');\n    await this.waitForLoadingComplete();\n    \n    // Verify workflow was created\n    await expect(this.page.locator(`text=${name}`)).toBeVisible();\n  }\n\n  /**\n   * Check page performance\n   */\n  async checkPagePerformance(maxLoadTime = 3000) {\n    const start = Date.now();\n    await this.waitForLoadingComplete();\n    const loadTime = Date.now() - start;\n    \n    expect(loadTime).toBeLessThan(maxLoadTime);\n    console.log(`Page loaded in ${loadTime}ms`);\n  }\n\n  /**\n   * Verify responsive design\n   */\n  async testMobileResponsiveness() {\n    // Test mobile viewport\n    await this.page.setViewportSize({ width: 375, height: 667 });\n    await this.page.waitForTimeout(500);\n    \n    // Check mobile navigation\n    const mobileNav = this.page.locator('[data-testid=\"mobile-nav\"]');\n    await expect(mobileNav).toBeVisible();\n    \n    // Test tablet viewport\n    await this.page.setViewportSize({ width: 768, height: 1024 });\n    await this.page.waitForTimeout(500);\n    \n    // Reset to desktop\n    await this.page.setViewportSize({ width: 1280, height: 800 });\n  }\n\n  /**\n   * Test keyboard navigation\n   */\n  async testKeyboardNavigation() {\n    // Tab through key elements\n    await this.page.keyboard.press('Tab');\n    await this.page.keyboard.press('Tab');\n    await this.page.keyboard.press('Tab');\n    \n    // Verify focus is visible\n    const focusedElement = await this.page.evaluate(() => document.activeElement?.tagName);\n    expect(focusedElement).toBeTruthy();\n  }\n\n  /**\n   * Check for console errors\n   */\n  async checkForConsoleErrors() {\n    const errors: string[] = [];\n    \n    this.page.on('console', (message) => {\n      if (message.type() === 'error') {\n        errors.push(message.text());\n      }\n    });\n\n    // Wait a moment to collect any errors\n    await this.page.waitForTimeout(2000);\n    \n    // Filter out expected errors (like network failures during fallback tests)\n    const unexpectedErrors = errors.filter(error => \n      !error.includes('MCP server') && \n      !error.includes('Failed to fetch') &&\n      !error.includes('NetworkError')\n    );\n    \n    expect(unexpectedErrors).toHaveLength(0);\n  }\n\n  /**\n   * Verify AI features are working\n   */\n  async testAIFeatures() {\n    await this.navigateTo('ai-chat');\n    \n    // Send a test message\n    await this.page.fill('[data-testid=\"ai-chat-input\"]', 'What are my top performing campaigns?');\n    await this.page.click('[data-testid=\"send-message\"]');\n    \n    // Wait for AI response\n    await expect(this.page.locator('[data-testid=\"ai-response\"]')).toBeVisible({ timeout: 10000 });\n    \n    // Verify response contains real data (not placeholder)\n    const response = await this.page.textContent('[data-testid=\"ai-response\"]');\n    expect(response).not.toContain('demo');\n    expect(response).not.toContain('placeholder');\n  }\n}"],"names":["TestUtils","constructor","page","login","email","password","goto","fill","click","waitForURL","expect","locator","toBeVisible","navigateTo","section","waitForLoadingComplete","waitForSelector","state","waitForTimeout","verifyMCPDataLoaded","realDataIndicators","indicator","timeout","testMCPFallback","route","abort","reload","fallbackIndicators","fallbackFound","toBe","unroute","createTestCampaign","type","name","createTestContact","createTestWorkflow","checkPagePerformance","maxLoadTime","start","Date","now","loadTime","toBeLessThan","console","log","testMobileResponsiveness","setViewportSize","width","height","mobileNav","testKeyboardNavigation","keyboard","press","focusedElement","evaluate","document","activeElement","tagName","toBeTruthy","checkForConsoleErrors","errors","on","message","push","text","unexpectedErrors","filter","error","includes","toHaveLength","testAIFeatures","response","textContent","not","toContain"],"mappings":"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"}