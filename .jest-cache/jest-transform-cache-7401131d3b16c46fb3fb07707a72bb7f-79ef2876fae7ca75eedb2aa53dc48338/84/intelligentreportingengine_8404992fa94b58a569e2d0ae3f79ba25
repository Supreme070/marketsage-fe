900c59ce9e8753a40c098547c2e0916e
/**
 * Intelligent Reporting Engine
 * ============================
 * AI-powered reporting system that understands natural language requests
 * and generates comprehensive reports with PDF/Excel exports
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    generateAIReport: function() {
        return generateAIReport;
    },
    getAvailableReportTypes: function() {
        return getAvailableReportTypes;
    },
    intelligentReportingEngine: function() {
        return intelligentReportingEngine;
    }
});
const _logger = require("../logger");
const _enterpriseexport = require("../export/enterprise-export");
const _intelligentintentanalyzer = require("./intelligent-intent-analyzer");
const _authorization = require("../security/authorization");
class IntelligentReportingEngine {
    constructor(){
        this.exportManager = _enterpriseexport.EnterpriseExportManager.getInstance();
    }
    /**
   * Generate report from natural language query
   */ async generateReport(request) {
        try {
            _logger.logger.info('AI report generation requested', {
                query: request.query.substring(0, 100),
                userId: request.userId,
                organizationId: request.organizationId
            });
            // Analyze user intent to understand what report they want
            const intent = await _intelligentintentanalyzer.intelligentIntentAnalyzer.analyzeIntent(request.query);
            if (intent.confidence < 0.7) {
                return {
                    success: false,
                    message: 'I need more specific information to generate your report.',
                    suggestions: this.getReportSuggestions(request.query)
                };
            }
            // Convert natural language to report definition
            const reportDef = await this.parseReportQuery(request.query, intent, request);
            if (!reportDef) {
                return {
                    success: false,
                    message: 'I couldn\'t understand what type of report you want to generate.',
                    suggestions: this.getReportSuggestions(request.query)
                };
            }
            // Validate permissions
            const hasPermission = await this.validateReportPermissions(reportDef, request);
            if (!hasPermission.allowed) {
                return {
                    success: false,
                    message: hasPermission.reason || 'Insufficient permissions to generate this report.',
                    error: 'permission_denied'
                };
            }
            // Create export request
            const exportRequest = {
                dataSource: reportDef.dataSource,
                columns: reportDef.columns,
                filters: {
                    ...reportDef.filters,
                    organizationId: request.organizationId
                },
                options: {
                    format: reportDef.format,
                    filename: this.generateReportFilename(reportDef.title, reportDef.format),
                    includeHeaders: true,
                    includeMetadata: true,
                    includeTimestamp: true,
                    compliance: {
                        includeAuditTrail: true,
                        redactSensitiveData: true,
                        encryptionLevel: 'standard'
                    }
                },
                requestedBy: {
                    userId: request.userId,
                    userName: 'AI User',
                    role: request.userRole,
                    tenantId: request.organizationId
                },
                purpose: `AI-generated report: ${reportDef.purpose}`,
                estimatedRows: await this.estimateReportSize(reportDef)
            };
            // Generate the report
            const exportJob = await this.exportManager.createExportJob(exportRequest);
            // Schedule if requested
            if (request.options?.schedule) {
                await this.scheduleReport(exportJob, request.options.schedule);
            }
            return {
                success: true,
                message: `ðŸ“Š Report "${reportDef.title}" is being generated! You'll receive it in ${reportDef.format} format.`,
                reportId: exportJob.id,
                estimatedRows: exportRequest.estimatedRows,
                format: reportDef.format
            };
        } catch (error) {
            _logger.logger.error('AI report generation failed', {
                error: error instanceof Error ? error.message : String(error),
                query: request.query,
                userId: request.userId
            });
            return {
                success: false,
                message: 'I encountered an error while generating your report. Please try again.',
                error: error instanceof Error ? error.message : 'Unknown error',
                suggestions: [
                    'Try rephrasing your request',
                    'Be more specific about the data you want',
                    'Check if you have permission to access this data'
                ]
            };
        }
    }
    /**
   * Parse natural language query into report definition
   */ async parseReportQuery(query, intent, request) {
        const lowerQuery = query.toLowerCase();
        // Determine data source
        const dataSource = this.detectDataSource(lowerQuery);
        if (!dataSource) return null;
        // Determine report format
        const format = this.detectReportFormat(lowerQuery, request.options?.format);
        // Generate appropriate columns based on data source and query
        const columns = this.generateReportColumns(dataSource, lowerQuery);
        // Extract filters from query
        const filters = this.extractFilters(lowerQuery, intent);
        // Generate report title
        const title = this.generateReportTitle(dataSource, lowerQuery);
        // Determine purpose
        const purpose = this.extractReportPurpose(lowerQuery, intent);
        // Check if charts are requested
        const includeCharts = this.shouldIncludeCharts(lowerQuery, format);
        return {
            title,
            dataSource,
            columns,
            filters,
            format,
            purpose,
            includeCharts,
            chartTypes: includeCharts ? this.suggestChartTypes(dataSource, columns) : undefined
        };
    }
    /**
   * Detect data source from natural language
   */ detectDataSource(query) {
        const dataSources = {
            'contacts': [
                'contact',
                'customer',
                'lead',
                'subscriber',
                'user',
                'people'
            ],
            'campaigns': [
                'campaign',
                'email',
                'sms',
                'whatsapp',
                'marketing',
                'newsletter'
            ],
            'analytics': [
                'analytics',
                'metrics',
                'performance',
                'stats',
                'data',
                'tracking'
            ],
            'workflows': [
                'workflow',
                'automation',
                'process',
                'journey',
                'funnel'
            ],
            'transactions': [
                'transaction',
                'payment',
                'revenue',
                'money',
                'financial',
                'billing'
            ]
        };
        for (const [source, keywords] of Object.entries(dataSources)){
            if (keywords.some((keyword)=>query.includes(keyword))) {
                return source;
            }
        }
        return null;
    }
    /**
   * Detect desired report format
   */ detectReportFormat(query, defaultFormat) {
        if (query.includes('pdf')) return 'PDF';
        if (query.includes('excel') || query.includes('xlsx') || query.includes('spreadsheet')) return 'Excel';
        if (query.includes('csv')) return 'CSV';
        if (query.includes('json')) return 'JSON';
        return defaultFormat || 'Excel'; // Default to Excel for business reports
    }
    /**
   * Generate appropriate columns for the report
   */ generateReportColumns(dataSource, query) {
        const columnSets = {
            contacts: [
                {
                    key: 'firstName',
                    label: 'First Name',
                    type: 'string'
                },
                {
                    key: 'lastName',
                    label: 'Last Name',
                    type: 'string'
                },
                {
                    key: 'email',
                    label: 'Email',
                    type: 'string'
                },
                {
                    key: 'phone',
                    label: 'Phone',
                    type: 'string'
                },
                {
                    key: 'company',
                    label: 'Company',
                    type: 'string'
                },
                {
                    key: 'isActive',
                    label: 'Active',
                    type: 'boolean'
                },
                {
                    key: 'tags',
                    label: 'Tags',
                    type: 'string'
                },
                {
                    key: 'createdAt',
                    label: 'Created Date',
                    type: 'date'
                }
            ],
            campaigns: [
                {
                    key: 'name',
                    label: 'Campaign Name',
                    type: 'string'
                },
                {
                    key: 'type',
                    label: 'Type',
                    type: 'string'
                },
                {
                    key: 'status',
                    label: 'Status',
                    type: 'string'
                },
                {
                    key: 'sentCount',
                    label: 'Sent',
                    type: 'number'
                },
                {
                    key: 'openRate',
                    label: 'Open Rate',
                    type: 'percentage'
                },
                {
                    key: 'clickRate',
                    label: 'Click Rate',
                    type: 'percentage'
                },
                {
                    key: 'createdAt',
                    label: 'Created Date',
                    type: 'date'
                }
            ],
            analytics: [
                {
                    key: 'entity',
                    label: 'Entity',
                    type: 'string'
                },
                {
                    key: 'event',
                    label: 'Event',
                    type: 'string'
                },
                {
                    key: 'value',
                    label: 'Value',
                    type: 'number'
                },
                {
                    key: 'timestamp',
                    label: 'Timestamp',
                    type: 'date'
                }
            ],
            workflows: [
                {
                    key: 'name',
                    label: 'Workflow Name',
                    type: 'string'
                },
                {
                    key: 'status',
                    label: 'Status',
                    type: 'string'
                },
                {
                    key: 'nodeCount',
                    label: 'Nodes',
                    type: 'number'
                },
                {
                    key: 'executionCount',
                    label: 'Executions',
                    type: 'number'
                },
                {
                    key: 'successfulExecutions',
                    label: 'Successful',
                    type: 'number'
                },
                {
                    key: 'createdAt',
                    label: 'Created Date',
                    type: 'date'
                }
            ],
            transactions: [
                {
                    key: 'id',
                    label: 'Transaction ID',
                    type: 'string'
                },
                {
                    key: 'amount',
                    label: 'Amount',
                    type: 'currency'
                },
                {
                    key: 'status',
                    label: 'Status',
                    type: 'string'
                },
                {
                    key: 'date',
                    label: 'Date',
                    type: 'date'
                }
            ]
        };
        return columnSets[dataSource] || [];
    }
    /**
   * Extract filters from natural language query
   */ extractFilters(query, intent) {
        const filters = {};
        // Date range filters
        if (query.includes('last week')) {
            const lastWeek = new Date();
            lastWeek.setDate(lastWeek.getDate() - 7);
            filters.createdAfter = lastWeek.toISOString();
        } else if (query.includes('last month')) {
            const lastMonth = new Date();
            lastMonth.setMonth(lastMonth.getMonth() - 1);
            filters.createdAfter = lastMonth.toISOString();
        } else if (query.includes('this year')) {
            const thisYear = new Date(new Date().getFullYear(), 0, 1);
            filters.createdAfter = thisYear.toISOString();
        }
        // Status filters
        if (query.includes('active')) {
            filters.isActive = true;
        } else if (query.includes('inactive')) {
            filters.isActive = false;
        }
        // Limit filters
        const limitMatch = query.match(/(\d+)\s*(top|first|limit)/i);
        if (limitMatch) {
            filters.limit = Number.parseInt(limitMatch[1]);
        }
        return filters;
    }
    /**
   * Generate report title
   */ generateReportTitle(dataSource, query) {
        const now = new Date().toLocaleDateString();
        if (query.includes('performance')) {
            return `${dataSource.charAt(0).toUpperCase() + dataSource.slice(1)} Performance Report - ${now}`;
        } else if (query.includes('summary')) {
            return `${dataSource.charAt(0).toUpperCase() + dataSource.slice(1)} Summary Report - ${now}`;
        } else if (query.includes('export')) {
            return `${dataSource.charAt(0).toUpperCase() + dataSource.slice(1)} Export - ${now}`;
        } else {
            return `${dataSource.charAt(0).toUpperCase() + dataSource.slice(1)} Report - ${now}`;
        }
    }
    /**
   * Extract report purpose
   */ extractReportPurpose(query, intent) {
        if (query.includes('audit')) return 'Audit and compliance review';
        if (query.includes('analysis')) return 'Data analysis and insights';
        if (query.includes('performance')) return 'Performance monitoring and optimization';
        if (query.includes('backup') || query.includes('export')) return 'Data backup and export';
        return 'Business intelligence and reporting';
    }
    /**
   * Determine if charts should be included
   */ shouldIncludeCharts(query, format) {
        if (format === 'CSV' || format === 'JSON') return false;
        return query.includes('chart') || query.includes('graph') || query.includes('visual');
    }
    /**
   * Suggest chart types based on data
   */ suggestChartTypes(dataSource, columns) {
        const chartTypes = [];
        const hasDateColumn = columns.some((col)=>col.type === 'date');
        const hasNumberColumns = columns.filter((col)=>col.type === 'number' || col.type === 'currency').length;
        if (hasDateColumn && hasNumberColumns > 0) {
            chartTypes.push('line', 'area');
        }
        if (hasNumberColumns > 0) {
            chartTypes.push('bar', 'pie');
        }
        return chartTypes.length > 0 ? chartTypes : [
            'bar'
        ];
    }
    /**
   * Validate user permissions for report
   */ async validateReportPermissions(reportDef, request) {
        // Check data source permissions
        const dataSourcePermissions = {
            'contacts': _authorization.Permission.VIEW_CONTACT,
            'campaigns': _authorization.Permission.VIEW_CAMPAIGN,
            'analytics': _authorization.Permission.VIEW_ANALYTICS,
            'workflows': _authorization.Permission.VIEW_WORKFLOW,
            'transactions': _authorization.Permission.VIEW_FINANCIAL_DATA
        };
        const requiredPermission = dataSourcePermissions[reportDef.dataSource];
        if (requiredPermission) {
            const hasPermission = _authorization.AuthorizationService.hasPermission(request.userRole, requiredPermission);
            if (!hasPermission) {
                return {
                    allowed: false,
                    reason: `You don't have permission to access ${reportDef.dataSource} data`
                };
            }
        }
        return {
            allowed: true
        };
    }
    /**
   * Estimate report size
   */ async estimateReportSize(reportDef) {
        // Simple estimation based on data source
        const estimates = {
            'contacts': 5000,
            'campaigns': 500,
            'analytics': 10000,
            'workflows': 200,
            'transactions': 1000
        };
        return estimates[reportDef.dataSource] || 1000;
    }
    /**
   * Generate appropriate filename
   */ generateReportFilename(title, format) {
        const sanitized = title.replace(/[^a-zA-Z0-9\s-]/g, '').replace(/\s+/g, '_');
        const timestamp = new Date().toISOString().split('T')[0];
        return `${sanitized}_${timestamp}.${format.toLowerCase()}`;
    }
    /**
   * Schedule recurring report
   */ async scheduleReport(exportJob, schedule) {
        _logger.logger.info('Scheduling recurring report', {
            reportId: exportJob.id,
            frequency: schedule.frequency,
            recipients: schedule.recipients
        });
    // In production, this would integrate with a job scheduler like Bull or similar
    // For now, just log the scheduling request
    }
    /**
   * Get report suggestions for unclear queries
   */ getReportSuggestions(query) {
        const suggestions = [
            'Try: "Generate a contacts report in Excel format"',
            'Try: "Export campaign performance data as PDF"',
            'Try: "Create analytics summary for last month"',
            'Try: "Generate workflow report with charts"'
        ];
        // Add specific suggestions based on query content
        if (query.includes('contact')) {
            suggestions.unshift('Try: "Export all active contacts to Excel"');
        } else if (query.includes('campaign')) {
            suggestions.unshift('Try: "Generate campaign performance report as PDF"');
        }
        return suggestions.slice(0, 3);
    }
    /**
   * Get available report types
   */ getAvailableReportTypes() {
        return [
            {
                type: 'contacts',
                description: 'Contact and customer data reports',
                formats: [
                    'CSV',
                    'Excel',
                    'PDF'
                ]
            },
            {
                type: 'campaigns',
                description: 'Marketing campaign performance reports',
                formats: [
                    'Excel',
                    'PDF',
                    'CSV'
                ]
            },
            {
                type: 'analytics',
                description: 'Analytics and metrics reports',
                formats: [
                    'Excel',
                    'PDF',
                    'JSON'
                ]
            },
            {
                type: 'workflows',
                description: 'Workflow and automation reports',
                formats: [
                    'Excel',
                    'PDF',
                    'CSV'
                ]
            }
        ];
    }
}
const intelligentReportingEngine = new IntelligentReportingEngine();
async function generateAIReport(request) {
    return intelligentReportingEngine.generateReport(request);
}
function getAvailableReportTypes() {
    return intelligentReportingEngine.getAvailableReportTypes();
}

//# sourceMappingURL=data:application/json;base64,