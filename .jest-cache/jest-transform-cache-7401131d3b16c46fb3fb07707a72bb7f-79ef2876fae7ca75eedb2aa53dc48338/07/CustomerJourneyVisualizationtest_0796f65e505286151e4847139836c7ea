c1a33d233f1729ca7deb2c760ea6777f
"use strict";
// Mock the CSS import
jest.mock('../../../styles/journey-animations.css', ()=>({}));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _testutils = require("../../utils/test-utils");
const _CustomerJourneyVisualization = require("../../../components/leadpulse/CustomerJourneyVisualization");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe('CustomerJourneyVisualization', ()=>{
    const mockJourneys = [
        (0, _testutils.mockCustomerJourney)({
            sessionId: 'session_1',
            outcome: 'converted',
            engagementScore: 92
        }),
        (0, _testutils.mockCustomerJourney)({
            sessionId: 'session_2',
            outcome: 'abandoned',
            engagementScore: 45,
            steps: [
                {
                    id: 'step_1',
                    timestamp: '2024-07-18T10:00:00Z',
                    action: 'Landing Page Visit',
                    page: '/',
                    duration: 120,
                    type: 'page_view',
                    metadata: {
                        device: 'mobile',
                        location: 'Abuja, Nigeria',
                        engagement: 60
                    }
                },
                {
                    id: 'step_2',
                    timestamp: '2024-07-18T10:02:00Z',
                    action: 'Exit Intent',
                    page: '/',
                    duration: 30,
                    type: 'exit',
                    metadata: {
                        device: 'mobile',
                        location: 'Abuja, Nigeria',
                        engagement: 30
                    }
                }
            ]
        })
    ];
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    describe('Rendering', ()=>{
        it('renders loading state correctly', async ()=>{
            const renderTime = await (0, _testutils.measureComponentPerformance)(()=>(0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CustomerJourneyVisualization.CustomerJourneyVisualization, {
                    isLoading: true
                })), 'CustomerJourneyVisualization Loading');
            expect(_testutils.screen.getByText('Loading journey data...')).toBeInTheDocument();
            expect(renderTime).toBeLessThan(_testutils.PERFORMANCE_THRESHOLDS.COMPONENT_RENDER);
        });
        it('renders with demo data when no journeys provided', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CustomerJourneyVisualization.CustomerJourneyVisualization, {}));
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByText('Customer Journey Visualization')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Total Journeys')).toBeInTheDocument();
            });
        });
        it('renders journey statistics correctly', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CustomerJourneyVisualization.CustomerJourneyVisualization, {
                journeys: mockJourneys
            }));
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByText('Total Journeys')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Converted')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Abandoned')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Conversion')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Avg Duration')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Engagement')).toBeInTheDocument();
            });
        });
        it('displays correct journey counts', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CustomerJourneyVisualization.CustomerJourneyVisualization, {
                journeys: mockJourneys
            }));
            await (0, _testutils.waitFor)(()=>{
                // Should show 2 total journeys
                expect(_testutils.screen.getByText('2')).toBeInTheDocument();
                // Should show 1 converted and 1 abandoned
                expect(_testutils.screen.getByText('1')).toBeInTheDocument();
            });
        });
    });
    describe('Interactions', ()=>{
        it('switches between view modes', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CustomerJourneyVisualization.CustomerJourneyVisualization, {
                journeys: mockJourneys
            }));
            // Test overview mode (default)
            expect(_testutils.screen.getByRole('button', {
                name: /overview/i
            })).toHaveClass('bg-blue-500');
            // Switch to detailed mode
            _testutils.fireEvent.click(_testutils.screen.getByRole('button', {
                name: /detailed/i
            }));
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByRole('button', {
                    name: /detailed/i
                })).toHaveClass('bg-blue-500');
            });
            // Switch to timeline mode
            _testutils.fireEvent.click(_testutils.screen.getByRole('button', {
                name: /timeline/i
            }));
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByRole('button', {
                    name: /timeline/i
                })).toHaveClass('bg-blue-500');
            });
        });
        it('filters journeys by outcome', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CustomerJourneyVisualization.CustomerJourneyVisualization, {
                journeys: mockJourneys
            }));
            const filterSelect = _testutils.screen.getByDisplayValue('All Journeys');
            // Filter to converted only
            _testutils.fireEvent.change(filterSelect, {
                target: {
                    value: 'converted'
                }
            });
            await (0, _testutils.waitFor)(()=>{
                expect(filterSelect).toHaveValue('converted');
            });
            // Filter to abandoned only
            _testutils.fireEvent.change(filterSelect, {
                target: {
                    value: 'abandoned'
                }
            });
            await (0, _testutils.waitFor)(()=>{
                expect(filterSelect).toHaveValue('abandoned');
            });
        });
        it('selects journey for detailed view', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CustomerJourneyVisualization.CustomerJourneyVisualization, {
                journeys: mockJourneys
            }));
            // Click on a journey card
            const journeyCard = _testutils.screen.getAllByText(/Session/)[0];
            _testutils.fireEvent.click(journeyCard.closest('div'));
            // Switch to detailed view
            _testutils.fireEvent.click(_testutils.screen.getByRole('button', {
                name: /detailed/i
            }));
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByText('Journey Details')).toBeInTheDocument();
            });
        });
        it('plays journey animation', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CustomerJourneyVisualization.CustomerJourneyVisualization, {
                journeys: mockJourneys
            }));
            // Select first journey
            const journeyCard = _testutils.screen.getAllByText(/Session/)[0];
            _testutils.fireEvent.click(journeyCard.closest('div'));
            // Switch to detailed view
            _testutils.fireEvent.click(_testutils.screen.getByRole('button', {
                name: /detailed/i
            }));
            await (0, _testutils.waitFor)(()=>{
                const playButton = _testutils.screen.getByRole('button', {
                    name: /play/i
                });
                expect(playButton).toBeInTheDocument();
                // Click play button
                _testutils.fireEvent.click(playButton);
                // Should show pause button
                expect(_testutils.screen.getByRole('button', {
                    name: /pause/i
                })).toBeInTheDocument();
            });
        });
        it('resets journey animation', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CustomerJourneyVisualization.CustomerJourneyVisualization, {
                journeys: mockJourneys
            }));
            // Select first journey and switch to detailed view
            const journeyCard = _testutils.screen.getAllByText(/Session/)[0];
            _testutils.fireEvent.click(journeyCard.closest('div'));
            _testutils.fireEvent.click(_testutils.screen.getByRole('button', {
                name: /detailed/i
            }));
            await (0, _testutils.waitFor)(()=>{
                const resetButton = _testutils.screen.getByRole('button', {
                    name: /rotateccw/i
                });
                expect(resetButton).toBeInTheDocument();
                _testutils.fireEvent.click(resetButton);
            });
        });
    });
    describe('Performance', ()=>{
        it('renders within performance threshold', async ()=>{
            const renderTime = await (0, _testutils.measureComponentPerformance)(()=>(0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CustomerJourneyVisualization.CustomerJourneyVisualization, {
                    journeys: mockJourneys
                })), 'CustomerJourneyVisualization with data');
            expect(renderTime).toBeLessThan(_testutils.PERFORMANCE_THRESHOLDS.COMPONENT_RENDER);
        });
        it('handles large datasets efficiently', async ()=>{
            const largeDataset = Array.from({
                length: 100
            }, (_, i)=>(0, _testutils.mockCustomerJourney)({
                    sessionId: `session_${i}`,
                    engagementScore: Math.floor(Math.random() * 100)
                }));
            const renderTime = await (0, _testutils.measureComponentPerformance)(()=>(0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CustomerJourneyVisualization.CustomerJourneyVisualization, {
                    journeys: largeDataset
                })), 'CustomerJourneyVisualization with large dataset');
            expect(renderTime).toBeLessThan(_testutils.PERFORMANCE_THRESHOLDS.COMPONENT_RENDER * 2);
        });
    });
    describe('Accessibility', ()=>{
        it('meets accessibility standards', async ()=>{
            const { container } = (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CustomerJourneyVisualization.CustomerJourneyVisualization, {
                journeys: mockJourneys
            }));
            await (0, _testutils.waitFor)(()=>{
                (0, _testutils.checkAccessibility)(container);
            });
            // Check for proper ARIA labels
            expect(_testutils.screen.getByRole('button', {
                name: /overview/i
            })).toBeInTheDocument();
            expect(_testutils.screen.getByRole('button', {
                name: /detailed/i
            })).toBeInTheDocument();
            expect(_testutils.screen.getByRole('button', {
                name: /timeline/i
            })).toBeInTheDocument();
        });
        it('supports keyboard navigation', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CustomerJourneyVisualization.CustomerJourneyVisualization, {
                journeys: mockJourneys
            }));
            const overviewButton = _testutils.screen.getByRole('button', {
                name: /overview/i
            });
            const detailedButton = _testutils.screen.getByRole('button', {
                name: /detailed/i
            });
            // Test tab navigation
            overviewButton.focus();
            expect(overviewButton).toHaveFocus();
            // Test Enter key activation
            _testutils.fireEvent.keyDown(detailedButton, {
                key: 'Enter',
                code: 'Enter'
            });
        // Note: This would require additional keyboard event handling in the component
        });
    });
    describe('Data Visualization', ()=>{
        it('displays engagement scores correctly', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CustomerJourneyVisualization.CustomerJourneyVisualization, {
                journeys: mockJourneys
            }));
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByText('92% engagement')).toBeInTheDocument();
                expect(_testutils.screen.getByText('45% engagement')).toBeInTheDocument();
            });
        });
        it('shows correct journey duration formatting', async ()=>{
            const journeyWithCustomDuration = (0, _testutils.mockCustomerJourney)({
                totalDuration: 3665
            });
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CustomerJourneyVisualization.CustomerJourneyVisualization, {
                journeys: [
                    journeyWithCustomDuration
                ]
            }));
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByText('61m 5s')).toBeInTheDocument();
            });
        });
        it('displays device and location information', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CustomerJourneyVisualization.CustomerJourneyVisualization, {
                journeys: mockJourneys
            }));
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByText(/desktop/i)).toBeInTheDocument();
                expect(_testutils.screen.getByText(/mobile/i)).toBeInTheDocument();
                expect(_testutils.screen.getByText(/Lagos, Nigeria/i)).toBeInTheDocument();
                expect(_testutils.screen.getByText(/Abuja, Nigeria/i)).toBeInTheDocument();
            });
        });
    });
    describe('Edge Cases', ()=>{
        it('handles empty journey array', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CustomerJourneyVisualization.CustomerJourneyVisualization, {
                journeys: []
            }));
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByText('Customer Journey Visualization')).toBeInTheDocument();
                // Should still show interface elements
                expect(_testutils.screen.getByText('Total Journeys')).toBeInTheDocument();
            });
        });
        it('handles journey with no steps', async ()=>{
            const journeyWithNoSteps = (0, _testutils.mockCustomerJourney)({
                steps: []
            });
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CustomerJourneyVisualization.CustomerJourneyVisualization, {
                journeys: [
                    journeyWithNoSteps
                ]
            }));
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByText('Customer Journey Visualization')).toBeInTheDocument();
            });
        });
        it('handles invalid timestamp formats gracefully', async ()=>{
            const journeyWithInvalidTimestamp = (0, _testutils.mockCustomerJourney)({
                startTime: 'invalid-timestamp'
            });
            expect(()=>{
                (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CustomerJourneyVisualization.CustomerJourneyVisualization, {
                    journeys: [
                        journeyWithInvalidTimestamp
                    ]
                }));
            }).not.toThrow();
        });
    });
    describe('Visual States', ()=>{
        it('shows correct outcome indicators', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CustomerJourneyVisualization.CustomerJourneyVisualization, {
                journeys: mockJourneys
            }));
            await (0, _testutils.waitFor)(()=>{
                const journeyCards = _testutils.screen.getAllByText(/Session/);
                expect(journeyCards).toHaveLength(2);
                // Check for outcome indicators (colored dots)
                const dots = document.querySelectorAll('.w-3.h-3.rounded-full');
                expect(dots).toHaveLength(2);
            });
        });
        it('applies correct step type colors', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CustomerJourneyVisualization.CustomerJourneyVisualization, {
                journeys: mockJourneys
            }));
            await (0, _testutils.waitFor)(()=>{
                // Check for step icons with different colors
                const stepIcons = document.querySelectorAll('.w-8.h-8.rounded-full');
                expect(stepIcons.length).toBeGreaterThan(0);
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,