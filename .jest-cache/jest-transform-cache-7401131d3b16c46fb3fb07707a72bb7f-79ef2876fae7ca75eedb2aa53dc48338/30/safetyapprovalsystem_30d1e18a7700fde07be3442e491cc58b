bfed5e58013c21e7f23e0d30ec973eb4
/**
 * Safety & Approval Workflow System
 * =================================
 * Comprehensive safety system that evaluates, approves, and monitors dangerous operations
 * Prevents unauthorized actions and provides rollback capabilities
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "safetyApprovalSystem", {
    enumerable: true,
    get: function() {
        return safetyApprovalSystem;
    }
});
const _logger = require("../logger");
const _prisma = /*#__PURE__*/ _interop_require_default(require("../db/prisma"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
class SafetyApprovalSystem {
    constructor(){
        this.safetyRules = new Map();
        this.pendingApprovals = new Map();
        this.operationHistory = new Map();
        this.learningPatterns = new Map();
        this.userTrustScores = new Map();
        this.smartApprovalThresholds = {
            trustScoreMinimum: 0.8,
            successRateMinimum: 0.95,
            maxAutoApprovalRisk: 'medium',
            learningPeriodDays: 30,
            patternConfidenceThreshold: 0.9
        };
        this.initializeSafetyRules();
        this.startApprovalCleanup();
        this.startLearningEngine();
        this.loadHistoricalPatterns();
    }
    /**
   * Initialize comprehensive safety rules
   */ initializeSafetyRules() {
        // User Management Safety Rules
        this.addSafetyRule({
            id: 'prevent_self_deletion',
            name: 'Prevent Self-Deletion',
            description: 'Users cannot delete their own accounts',
            category: 'user_management',
            riskLevel: 'high',
            condition: (op)=>op.action === 'DELETE' && op.entity === 'USER' && op.parameters.userId === op.userId,
            requiredRole: 'SUPER_ADMIN',
            requiresApproval: true,
            maxRetries: 0,
            cooldownPeriod: 60
        });
        this.addSafetyRule({
            id: 'prevent_last_admin_deletion',
            name: 'Prevent Last Admin Deletion',
            description: 'Cannot delete the last admin user',
            category: 'user_management',
            riskLevel: 'critical',
            condition: (op)=>op.action === 'DELETE' && op.entity === 'USER' && op.parameters.role === 'SUPER_ADMIN',
            requiredRole: 'SUPER_ADMIN',
            requiresApproval: true,
            maxRetries: 0,
            cooldownPeriod: 1440 // 24 hours
        });
        this.addSafetyRule({
            id: 'role_escalation_control',
            name: 'Role Escalation Control',
            description: 'Only SUPER_ADMIN can create ADMIN or SUPER_ADMIN users',
            category: 'user_management',
            riskLevel: 'high',
            condition: (op)=>op.action === 'CREATE' && op.entity === 'USER' && [
                    'ADMIN',
                    'SUPER_ADMIN'
                ].includes(op.parameters.role) && op.userRole !== 'SUPER_ADMIN',
            requiredRole: 'SUPER_ADMIN',
            requiresApproval: true,
            maxRetries: 1,
            cooldownPeriod: 30
        });
        // Data Destruction Safety Rules
        this.addSafetyRule({
            id: 'bulk_deletion_limit',
            name: 'Bulk Deletion Limit',
            description: 'Bulk deletions affecting >100 records require approval',
            category: 'bulk_operations',
            riskLevel: 'high',
            condition: (op)=>op.action === 'DELETE' && (op.affectedRecords || 0) > 100,
            requiredRole: 'ADMIN',
            requiresApproval: true,
            maxRetries: 1,
            cooldownPeriod: 60
        });
        this.addSafetyRule({
            id: 'organization_deletion',
            name: 'Organization Deletion',
            description: 'Organization deletion requires multi-admin approval',
            category: 'system_config',
            riskLevel: 'critical',
            condition: (op)=>op.action === 'DELETE' && op.entity === 'ORGANIZATION',
            requiredRole: 'SUPER_ADMIN',
            requiresApproval: true,
            maxRetries: 0,
            cooldownPeriod: 10080 // 7 days
        });
        // Financial Safety Rules
        this.addSafetyRule({
            id: 'high_value_transaction',
            name: 'High Value Transaction',
            description: 'Transactions over $10,000 require approval',
            category: 'financial',
            riskLevel: 'high',
            condition: (op)=>op.operationType === 'payment' && (op.parameters.amount || 0) > 10000,
            requiredRole: 'ADMIN',
            requiresApproval: true,
            maxRetries: 2,
            cooldownPeriod: 120
        });
        // System Configuration Safety Rules
        this.addSafetyRule({
            id: 'integration_modification',
            name: 'Integration Modification',
            description: 'Critical integration changes require approval',
            category: 'system_config',
            riskLevel: 'medium',
            condition: (op)=>op.entity === 'INTEGRATION' && [
                    'UPDATE',
                    'DELETE'
                ].includes(op.action),
            requiredRole: 'IT_ADMIN',
            requiresApproval: true,
            maxRetries: 2,
            cooldownPeriod: 30
        });
        // Rate limiting for sensitive operations
        this.addSafetyRule({
            id: 'rapid_user_creation',
            name: 'Rapid User Creation',
            description: 'Creating >5 users in 10 minutes requires cooling down',
            category: 'user_management',
            riskLevel: 'medium',
            condition: (op)=>{
                if (op.action !== 'CREATE' || op.entity !== 'USER') return false;
                const userHistory = this.operationHistory.get(op.userId) || [];
                const recentCreations = userHistory.filter((hist)=>hist.action === 'CREATE' && hist.entity === 'USER' && Date.now() - hist.context.timestamp.getTime() < 10 * 60 * 1000);
                return recentCreations.length >= 5;
            },
            requiredRole: 'ADMIN',
            requiresApproval: false,
            maxRetries: 0,
            cooldownPeriod: 10
        });
    }
    /**
   * Add a safety rule to the system
   */ addSafetyRule(rule) {
        this.safetyRules.set(rule.id, rule);
    }
    /**
   * Get smart approval metrics for a user
   */ async getSmartApprovalMetrics(userId) {
        const userPatterns = this.learningPatterns.get(userId) || [];
        const recentPatterns = userPatterns.filter((p)=>p.timestamp > new Date(Date.now() - this.smartApprovalThresholds.learningPeriodDays * 24 * 60 * 60 * 1000));
        const trustScore = this.userTrustScores.get(userId) || 0.5;
        const successfulOps = recentPatterns.filter((p)=>p.outcome === 'success').length;
        const totalOps = recentPatterns.length;
        const successRate = totalOps > 0 ? successfulOps / totalOps : 0;
        const riskLevels = recentPatterns.map((p)=>p.riskLevel);
        const avgRiskValue = this.calculateAverageRiskLevel(riskLevels);
        const operationTypes = recentPatterns.map((p)=>`${p.operationType}:${p.entity}:${p.action}`);
        const commonOperations = this.getMostCommonItems(operationTypes, 5);
        const approvedPatterns = recentPatterns.filter((p)=>p.approved);
        const avgApprovalTime = approvedPatterns.length > 0 ? approvedPatterns.reduce((sum, p)=>sum + p.approvalTime, 0) / approvedPatterns.length : 0;
        const rejectionRate = totalOps > 0 ? recentPatterns.filter((p)=>!p.approved).length / totalOps : 0;
        const autoApprovalEligible = trustScore >= this.smartApprovalThresholds.trustScoreMinimum && successRate >= this.smartApprovalThresholds.successRateMinimum && avgRiskValue <= this.getRiskLevelValue(this.smartApprovalThresholds.maxAutoApprovalRisk) && rejectionRate < 0.1;
        return {
            userTrustScore: trustScore,
            operationSuccessRate: successRate,
            averageRiskLevel: avgRiskValue,
            autoApprovalEligible,
            historicalPatterns: {
                commonOperations,
                typicalRiskLevel: this.getTypicalRiskLevel(riskLevels),
                averageApprovalTime: avgApprovalTime,
                rejectionRate
            }
        };
    }
    /**
   * Smart approval decision based on patterns and trust
   */ async makeSmartApprovalDecision(operation, assessment) {
        const metrics = await this.getSmartApprovalMetrics(operation.userId);
        const reasoning = [];
        let confidence = 0;
        let autoApprove = false;
        // Check if operation matches common patterns
        const operationSignature = `${operation.operationType}:${operation.entity}:${operation.action}`;
        const isCommonOperation = metrics.historicalPatterns.commonOperations.includes(operationSignature);
        if (isCommonOperation) {
            confidence += 0.3;
            reasoning.push('Operation matches user\'s common patterns');
        }
        // Check trust score
        if (metrics.userTrustScore >= this.smartApprovalThresholds.trustScoreMinimum) {
            confidence += 0.3;
            reasoning.push(`High user trust score: ${(metrics.userTrustScore * 100).toFixed(1)}%`);
        }
        // Check success rate
        if (metrics.operationSuccessRate >= this.smartApprovalThresholds.successRateMinimum) {
            confidence += 0.2;
            reasoning.push(`Excellent operation success rate: ${(metrics.operationSuccessRate * 100).toFixed(1)}%`);
        }
        // Check risk level
        if (assessment.riskLevel === 'low' || assessment.riskLevel === 'medium' && metrics.autoApprovalEligible) {
            confidence += 0.2;
            reasoning.push(`Acceptable risk level: ${assessment.riskLevel}`);
        }
        // Final decision
        autoApprove = confidence >= this.smartApprovalThresholds.patternConfidenceThreshold && metrics.autoApprovalEligible && assessment.riskLevel !== 'critical' && assessment.riskLevel !== 'high';
        if (!autoApprove && confidence > 0.7) {
            reasoning.push('Recommend expedited manual review due to high confidence');
        }
        // Learn from this assessment
        this.recordLearningPattern(operation, assessment, autoApprove);
        return {
            autoApprove,
            confidence,
            reasoning,
            suggestedApprovalLevel: this.suggestApprovalLevel(assessment.riskLevel, confidence)
        };
    }
    /**
   * Assess safety of an operation with smart approval
   */ async assessOperation(operation) {
        try {
            _logger.logger.info('Assessing operation safety', {
                operationId: operation.id,
                userId: operation.userId,
                action: operation.action,
                entity: operation.entity
            });
            const violatedRules = [];
            const warnings = [];
            const restrictions = [];
            const requiredApprovals = [];
            let highestRiskLevel = 'low';
            // Check each safety rule
            for (const [ruleId, rule] of this.safetyRules.entries()){
                try {
                    if (rule.condition(operation)) {
                        violatedRules.push(ruleId);
                        if (this.getRiskLevelValue(rule.riskLevel) > this.getRiskLevelValue(highestRiskLevel)) {
                            highestRiskLevel = rule.riskLevel;
                        }
                        if (rule.requiresApproval) {
                            requiredApprovals.push(ruleId);
                        }
                        warnings.push(`${rule.name}: ${rule.description}`);
                        // Check role requirements
                        if (!this.hasRequiredRole(operation.userRole, rule.requiredRole)) {
                            restrictions.push(`Requires ${rule.requiredRole} role or higher`);
                        }
                        // Check cooldown period
                        if (await this.isInCooldown(operation.userId, ruleId, rule.cooldownPeriod)) {
                            restrictions.push(`Operation is in cooldown period for ${rule.cooldownPeriod} minutes`);
                        }
                    }
                } catch (ruleError) {
                    _logger.logger.warn('Safety rule evaluation failed', {
                        ruleId,
                        error: ruleError instanceof Error ? ruleError.message : String(ruleError)
                    });
                }
            }
            // Estimate impact
            const estimatedImpact = await this.estimateImpact(operation);
            // Create rollback strategy if needed
            const rollbackStrategy = this.createRollbackStrategy(operation, highestRiskLevel);
            const assessment = {
                operationId: operation.id,
                riskLevel: highestRiskLevel,
                violatedRules,
                requiredApprovals,
                canProceed: restrictions.length === 0 && requiredApprovals.length === 0,
                warnings,
                restrictions,
                rollbackStrategy,
                estimatedImpact
            };
            // Record the assessment
            await this.recordAssessment(operation, assessment);
            // Check for smart approval if assessment requires approval
            if (requiredApprovals.length > 0 && restrictions.length === 0) {
                const smartDecision = await this.makeSmartApprovalDecision(operation, assessment);
                if (smartDecision.autoApprove) {
                    // Auto-approve low-risk operations for trusted users
                    assessment.canProceed = true;
                    assessment.requiredApprovals = [];
                    assessment.warnings.push('Auto-approved based on user trust and patterns');
                    assessment.warnings.push(...smartDecision.reasoning);
                    // Record auto-approval
                    await this.recordAutoApproval(operation, assessment, smartDecision);
                    _logger.logger.info('Operation auto-approved by smart system', {
                        operationId: operation.id,
                        userId: operation.userId,
                        confidence: smartDecision.confidence,
                        reasoning: smartDecision.reasoning
                    });
                } else if (smartDecision.confidence > 0.7) {
                    // Add recommendation for expedited review
                    assessment.warnings.push('High confidence for approval - expedited review recommended');
                    assessment.warnings.push(...smartDecision.reasoning);
                }
            }
            return assessment;
        } catch (error) {
            _logger.logger.error('Safety assessment failed', {
                operationId: operation.id,
                error: error instanceof Error ? error.message : String(error)
            });
            return {
                operationId: operation.id,
                riskLevel: 'critical',
                violatedRules: [
                    'assessment_failed'
                ],
                requiredApprovals: [
                    'manual_review'
                ],
                canProceed: false,
                warnings: [
                    'Safety assessment failed - manual review required'
                ],
                restrictions: [
                    'Operation blocked due to assessment failure'
                ],
                estimatedImpact: {
                    affectedUsers: 0,
                    affectedRecords: 0,
                    systemDowntime: 0,
                    reversibility: 'none'
                }
            };
        }
    }
    /**
   * Request approval for a dangerous operation
   */ async requestApproval(operation, assessment, justification) {
        const approvalId = this.generateApprovalId();
        // Determine approval level based on risk
        let approvalLevel;
        if (assessment.riskLevel === 'critical') {
            approvalLevel = 'multi_admin';
        } else if (assessment.riskLevel === 'high') {
            approvalLevel = 'super_admin';
        } else {
            approvalLevel = 'admin';
        }
        const approvalRequest = {
            id: approvalId,
            operationId: operation.id,
            requesterId: operation.userId,
            requesterRole: operation.userRole,
            approvalLevel,
            operation,
            justification,
            expiresAt: new Date(Date.now() + this.getApprovalTimeout(assessment.riskLevel)),
            status: 'pending',
            autoRollbackScheduled: assessment.riskLevel === 'critical'
        };
        // Store the approval request
        this.pendingApprovals.set(approvalId, approvalRequest);
        // Save to database
        await _prisma.default.approvalRequest.create({
            data: {
                id: approvalId,
                operationId: operation.id,
                requesterId: operation.userId,
                approvalLevel,
                operationData: operation,
                justification,
                expiresAt: approvalRequest.expiresAt,
                status: 'pending'
            }
        });
        // Send notifications to approvers
        await this.notifyApprovers(approvalRequest);
        _logger.logger.info('Approval request created', {
            approvalId,
            operationId: operation.id,
            approvalLevel,
            riskLevel: assessment.riskLevel
        });
        return approvalRequest;
    }
    /**
   * Approve an operation
   */ async approveOperation(approvalId, approverId, approverRole) {
        const approval = this.pendingApprovals.get(approvalId);
        if (!approval) {
            return {
                success: false,
                message: 'Approval request not found'
            };
        }
        if (approval.status !== 'pending') {
            return {
                success: false,
                message: 'Approval request is no longer pending'
            };
        }
        if (approval.expiresAt < new Date()) {
            approval.status = 'expired';
            return {
                success: false,
                message: 'Approval request has expired'
            };
        }
        // Check if approver has sufficient role
        const hasPermission = this.canApprove(approverRole, approval.approvalLevel);
        if (!hasPermission) {
            return {
                success: false,
                message: 'Insufficient permissions to approve this operation'
            };
        }
        // Update approval
        approval.status = 'approved';
        approval.approvedBy = approverId;
        approval.approvedAt = new Date();
        // Update database
        await _prisma.default.approvalRequest.update({
            where: {
                id: approvalId
            },
            data: {
                status: 'approved',
                approvedBy: approverId,
                approvedAt: new Date()
            }
        });
        // Schedule auto-rollback if needed
        if (approval.autoRollbackScheduled) {
            await this.scheduleAutoRollback(approval);
        }
        _logger.logger.info('Operation approved', {
            approvalId,
            operationId: approval.operationId,
            approverId,
            approverRole
        });
        return {
            success: true,
            message: 'Operation approved successfully'
        };
    }
    /**
   * Reject an operation
   */ async rejectOperation(approvalId, approverId, reason) {
        const approval = this.pendingApprovals.get(approvalId);
        if (!approval) {
            return {
                success: false,
                message: 'Approval request not found'
            };
        }
        if (approval.status !== 'pending') {
            return {
                success: false,
                message: 'Approval request is no longer pending'
            };
        }
        // Update approval
        approval.status = 'rejected';
        approval.rejectionReason = reason;
        // Update database
        await _prisma.default.approvalRequest.update({
            where: {
                id: approvalId
            },
            data: {
                status: 'rejected',
                rejectionReason: reason
            }
        });
        _logger.logger.info('Operation rejected', {
            approvalId,
            operationId: approval.operationId,
            approverId,
            reason
        });
        return {
            success: true,
            message: 'Operation rejected'
        };
    }
    /**
   * Check if an operation is approved
   */ async isOperationApproved(operationId) {
        const approval = Array.from(this.pendingApprovals.values()).find((a)=>a.operationId === operationId);
        return approval?.status === 'approved' || false;
    }
    /**
   * Create rollback strategy
   */ createRollbackStrategy(operation, riskLevel) {
        if (operation.action === 'DELETE' || riskLevel === 'critical') {
            const rollbackId = this.generateRollbackId();
            return {
                id: rollbackId,
                operationId: operation.id,
                strategy: operation.action === 'DELETE' ? 'impossible' : 'manual',
                rollbackSteps: this.generateRollbackSteps(operation),
                timeLimit: this.getRollbackTimeLimit(riskLevel),
                dependencies: []
            };
        }
        return undefined;
    }
    /**
   * Generate rollback steps
   */ generateRollbackSteps(operation) {
        const steps = [];
        switch(operation.action){
            case 'CREATE':
                steps.push({
                    id: 'rollback_create',
                    description: `Delete created ${operation.entity.toLowerCase()}`,
                    action: 'DELETE',
                    parameters: {
                        id: operation.parameters.id
                    },
                    order: 1,
                    critical: true
                });
                break;
            case 'UPDATE':
                steps.push({
                    id: 'rollback_update',
                    description: `Restore previous ${operation.entity.toLowerCase()} state`,
                    action: 'UPDATE',
                    parameters: {
                        id: operation.parameters.id,
                        previousState: 'TO_BE_CAPTURED'
                    },
                    order: 1,
                    critical: true
                });
                break;
        }
        return steps;
    }
    /**
   * Helper methods
   */ getRiskLevelValue(level) {
        const values = {
            low: 1,
            medium: 2,
            high: 3,
            critical: 4
        };
        return values[level] || 1;
    }
    hasRequiredRole(userRole, requiredRole) {
        const hierarchy = [
            'USER',
            'IT_ADMIN',
            'ADMIN',
            'SUPER_ADMIN'
        ];
        const userIndex = hierarchy.indexOf(userRole);
        const requiredIndex = hierarchy.indexOf(requiredRole);
        return userIndex >= requiredIndex;
    }
    async isInCooldown(userId, ruleId, cooldownMinutes) {
        const lastViolation = await _prisma.default.safetyViolation.findFirst({
            where: {
                userId,
                ruleId,
                createdAt: {
                    gte: new Date(Date.now() - cooldownMinutes * 60 * 1000)
                }
            },
            orderBy: {
                createdAt: 'desc'
            }
        });
        return !!lastViolation;
    }
    async estimateImpact(operation) {
        // Mock implementation - in production, this would analyze actual data
        return {
            affectedUsers: operation.affectedRecords || 1,
            affectedRecords: operation.affectedRecords || 1,
            systemDowntime: 0,
            reversibility: operation.action === 'DELETE' ? 'none' : 'full'
        };
    }
    async recordAssessment(operation, assessment) {
        if (assessment.violatedRules.length > 0) {
            await _prisma.default.safetyViolation.create({
                data: {
                    userId: operation.userId,
                    ruleId: assessment.violatedRules[0],
                    operationId: operation.id,
                    riskLevel: assessment.riskLevel,
                    details: {
                        operation,
                        assessment
                    }
                }
            });
        }
    }
    canApprove(approverRole, requiredLevel) {
        if (requiredLevel === 'multi_admin') {
            return approverRole === 'SUPER_ADMIN'; // For now, only SUPER_ADMIN can approve critical
        }
        if (requiredLevel === 'super_admin') {
            return [
                'SUPER_ADMIN'
            ].includes(approverRole);
        }
        return [
            'ADMIN',
            'SUPER_ADMIN'
        ].includes(approverRole);
    }
    getApprovalTimeout(riskLevel) {
        const timeouts = {
            low: 60 * 60 * 1000,
            medium: 30 * 60 * 1000,
            high: 15 * 60 * 1000,
            critical: 5 * 60 * 1000 // 5 minutes
        };
        return timeouts[riskLevel] || timeouts.medium;
    }
    getRollbackTimeLimit(riskLevel) {
        const limits = {
            low: 1440,
            medium: 720,
            high: 180,
            critical: 60
        }; // minutes
        return limits[riskLevel] || limits.medium;
    }
    async notifyApprovers(approval) {
        // In production, this would send notifications to appropriate approvers
        _logger.logger.info('Approval notification sent', {
            approvalId: approval.id,
            approvalLevel: approval.approvalLevel
        });
    }
    async scheduleAutoRollback(approval) {
        // In production, this would schedule automatic rollback
        _logger.logger.info('Auto-rollback scheduled', {
            approvalId: approval.id,
            operationId: approval.operationId
        });
    }
    startApprovalCleanup() {
        // Clean up expired approvals every 5 minutes
        setInterval(async ()=>{
            const now = new Date();
            for (const [id, approval] of this.pendingApprovals.entries()){
                if (approval.expiresAt < now && approval.status === 'pending') {
                    approval.status = 'expired';
                    await _prisma.default.approvalRequest.update({
                        where: {
                            id
                        },
                        data: {
                            status: 'expired'
                        }
                    });
                    this.pendingApprovals.delete(id);
                }
            }
        }, 5 * 60 * 1000);
    }
    generateApprovalId() {
        return `approval_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }
    generateRollbackId() {
        return `rollback_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }
    /**
   * Smart approval helper methods
   */ calculateAverageRiskLevel(riskLevels) {
        if (riskLevels.length === 0) return 0;
        const sum = riskLevels.reduce((acc, level)=>acc + this.getRiskLevelValue(level), 0);
        return sum / riskLevels.length;
    }
    getMostCommonItems(items, limit) {
        const counts = items.reduce((acc, item)=>{
            acc[item] = (acc[item] || 0) + 1;
            return acc;
        }, {});
        return Object.entries(counts).sort(([, a], [, b])=>b - a).slice(0, limit).map(([item])=>item);
    }
    getTypicalRiskLevel(riskLevels) {
        const counts = riskLevels.reduce((acc, level)=>{
            acc[level] = (acc[level] || 0) + 1;
            return acc;
        }, {});
        const sorted = Object.entries(counts).sort(([, a], [, b])=>b - a);
        return sorted.length > 0 ? sorted[0][0] : 'medium';
    }
    suggestApprovalLevel(riskLevel, confidence) {
        if (riskLevel === 'critical') return 'multi_admin';
        if (riskLevel === 'high') return 'super_admin';
        if (confidence < 0.5) return 'super_admin';
        if (confidence < 0.7) return 'admin';
        return 'auto';
    }
    async recordLearningPattern(operation, assessment, autoApproved) {
        const pattern = {
            operationType: operation.operationType,
            entity: operation.entity,
            action: operation.action,
            userRole: operation.userRole,
            riskLevel: assessment.riskLevel,
            approved: autoApproved || assessment.canProceed,
            approvalTime: 0,
            outcome: 'success',
            timestamp: new Date()
        };
        const userPatterns = this.learningPatterns.get(operation.userId) || [];
        userPatterns.push(pattern);
        // Keep only recent patterns
        const cutoff = new Date(Date.now() - 90 * 24 * 60 * 60 * 1000); // 90 days
        const recentPatterns = userPatterns.filter((p)=>p.timestamp > cutoff);
        this.learningPatterns.set(operation.userId, recentPatterns);
        // Update trust score
        await this.updateUserTrustScore(operation.userId);
    }
    async updateUserTrustScore(userId) {
        const patterns = this.learningPatterns.get(userId) || [];
        const recentPatterns = patterns.filter((p)=>p.timestamp > new Date(Date.now() - this.smartApprovalThresholds.learningPeriodDays * 24 * 60 * 60 * 1000));
        if (recentPatterns.length < 5) {
            // Not enough data for trust score
            this.userTrustScores.set(userId, 0.5);
            return;
        }
        const successCount = recentPatterns.filter((p)=>p.outcome === 'success').length;
        const rollbackCount = recentPatterns.filter((p)=>p.outcome === 'rollback').length;
        const failureCount = recentPatterns.filter((p)=>p.outcome === 'failure').length;
        const successRate = successCount / recentPatterns.length;
        const rollbackPenalty = rollbackCount * 0.1;
        const failurePenalty = failureCount * 0.2;
        const trustScore = Math.max(0, Math.min(1, successRate - rollbackPenalty - failurePenalty));
        this.userTrustScores.set(userId, trustScore);
    }
    async recordAutoApproval(operation, assessment, decision) {
        try {
            await _prisma.default.approvalRequest.create({
                data: {
                    id: `auto_${operation.id}`,
                    operationId: operation.id,
                    requesterId: operation.userId,
                    approvalLevel: 'auto',
                    operationData: operation,
                    justification: 'Auto-approved by smart approval system',
                    expiresAt: new Date(Date.now() + 5 * 60 * 1000),
                    status: 'approved',
                    approvedBy: 'SMART_APPROVAL_SYSTEM',
                    approvedAt: new Date()
                }
            });
        } catch (error) {
            _logger.logger.warn('Failed to record auto-approval', {
                error
            });
        }
    }
    /**
   * Learning engine methods
   */ startLearningEngine() {
        // Update trust scores periodically
        setInterval(()=>{
            this.updateAllUserTrustScores();
        }, 60 * 60 * 1000); // Every hour
        // Clean up old patterns
        setInterval(()=>{
            this.cleanupOldPatterns();
        }, 24 * 60 * 60 * 1000); // Daily
    }
    async updateAllUserTrustScores() {
        for (const userId of this.learningPatterns.keys()){
            await this.updateUserTrustScore(userId);
        }
        _logger.logger.info('Updated user trust scores', {
            totalUsers: this.userTrustScores.size,
            averageTrustScore: Array.from(this.userTrustScores.values()).reduce((sum, score)=>sum + score, 0) / Math.max(1, this.userTrustScores.size)
        });
    }
    cleanupOldPatterns() {
        const cutoff = new Date(Date.now() - 90 * 24 * 60 * 60 * 1000); // 90 days
        for (const [userId, patterns] of this.learningPatterns.entries()){
            const recentPatterns = patterns.filter((p)=>p.timestamp > cutoff);
            if (recentPatterns.length === 0) {
                this.learningPatterns.delete(userId);
                this.userTrustScores.delete(userId);
            } else {
                this.learningPatterns.set(userId, recentPatterns);
            }
        }
    }
    async loadHistoricalPatterns() {
        try {
            // Load recent approval patterns from database
            const recentApprovals = await _prisma.default.approvalRequest.findMany({
                where: {
                    createdAt: {
                        gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) // Last 30 days
                    }
                },
                take: 1000,
                orderBy: {
                    createdAt: 'desc'
                }
            });
            // Convert to learning patterns
            for (const approval of recentApprovals){
                const operation = approval.operationData;
                if (operation) {
                    const pattern = {
                        operationType: operation.operationType,
                        entity: operation.entity,
                        action: operation.action,
                        userRole: operation.userRole,
                        riskLevel: 'medium',
                        approved: approval.status === 'approved',
                        approvalTime: approval.approvedAt ? approval.approvedAt.getTime() - approval.createdAt.getTime() : 0,
                        outcome: 'success',
                        timestamp: approval.createdAt
                    };
                    const userId = approval.requesterId;
                    const userPatterns = this.learningPatterns.get(userId) || [];
                    userPatterns.push(pattern);
                    this.learningPatterns.set(userId, userPatterns);
                }
            }
            // Initial trust score calculation
            await this.updateAllUserTrustScores();
            _logger.logger.info('Loaded historical approval patterns', {
                totalPatterns: Array.from(this.learningPatterns.values()).reduce((sum, patterns)=>sum + patterns.length, 0),
                totalUsers: this.learningPatterns.size
            });
        } catch (error) {
            _logger.logger.warn('Failed to load historical patterns', {
                error
            });
        }
    }
    /**
   * Update learning outcome after task execution
   */ async updateLearningOutcome(operationId, userId, outcome) {
        const patterns = this.learningPatterns.get(userId) || [];
        const pattern = patterns.find((p)=>// Find pattern by matching operation characteristics and timing
            Math.abs(p.timestamp.getTime() - Date.now()) < 24 * 60 * 60 * 1000);
        if (pattern) {
            pattern.outcome = outcome;
            await this.updateUserTrustScore(userId);
            _logger.logger.info('Updated learning pattern outcome', {
                userId,
                operationId,
                outcome,
                newTrustScore: this.userTrustScores.get(userId)
            });
        }
    }
    /**
   * Add operation to user history for rate limiting
   */ addToHistory(operation) {
        const userHistory = this.operationHistory.get(operation.userId) || [];
        userHistory.push(operation);
        // Keep only last 100 operations
        if (userHistory.length > 100) {
            userHistory.shift();
        }
        this.operationHistory.set(operation.userId, userHistory);
    }
    /**
   * Get pending approvals for a user
   */ getPendingApprovals(userId) {
        return Array.from(this.pendingApprovals.values()).filter((approval)=>approval.requesterId === userId);
    }
    /**
   * Get approvals requiring action from a specific role
   */ getApprovalsForRole(role) {
        return Array.from(this.pendingApprovals.values()).filter((approval)=>approval.status === 'pending' && this.canApprove(role, approval.approvalLevel));
    }
}
const safetyApprovalSystem = new SafetyApprovalSystem();

//# sourceMappingURL=data:application/json;base64,