{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/lib/ai/intelligent-intent-analyzer.ts"],"sourcesContent":["/**\n * Intelligent Intent Analyzer\n * ===========================\n * Uses OpenAI-powered NLP to understand user intents from natural language\n * Handles any phrasing style and extracts structured data\n */\n\nimport { getAIInstance } from '@/lib/ai/openai-integration';\nimport { logger } from '@/lib/logger';\n\nexport interface IntelligentIntent {\n  action: 'CREATE' | 'UPDATE' | 'DELETE' | 'FETCH' | 'ASSIGN' | 'ANALYZE' | 'UNKNOWN';\n  entity: 'CONTACT' | 'WORKFLOW' | 'CAMPAIGN' | 'TASK' | 'SEGMENT' | 'TEMPLATE' | 'LIST' | 'INTEGRATION' | 'JOURNEY' | 'ABTEST' | 'DATA' | 'UNKNOWN';\n  confidence: number;\n  data: Record<string, any>;\n  originalQuery: string;\n  suggestedResponse?: string;\n}\n\nexport interface ContactData {\n  name?: string;\n  email?: string;\n  phone?: string;\n  company?: string;\n  notes?: string;\n}\n\nexport interface WorkflowData {\n  name?: string;\n  type?: string;\n  market?: string;\n  industry?: string;\n  steps?: string[];\n  objective?: string;\n}\n\nexport interface CampaignData {\n  name?: string;\n  type?: 'email' | 'sms' | 'whatsapp';\n  market?: string;\n  audience?: string;\n  content?: string;\n  objective?: string;\n}\n\nexport interface TaskData {\n  title?: string;\n  description?: string;\n  assignee?: string;\n  priority?: 'LOW' | 'MEDIUM' | 'HIGH' | 'URGENT';\n  dueDate?: string;\n  type?: string;\n}\n\nexport interface DataFetchRequest {\n  source?: 'leadpulse' | 'analytics' | 'users' | 'campaigns';\n  timeRange?: string;\n  filters?: Record<string, any>;\n  format?: 'summary' | 'detailed' | 'chart';\n}\n\nclass IntelligentIntentAnalyzer {\n  private aiInstance: any;\n\n  constructor() {\n    this.aiInstance = getAIInstance();\n  }\n\n  /**\n   * Main method to analyze user intent from natural language\n   */\n  async analyzeIntent(userQuery: string): Promise<IntelligentIntent> {\n    try {\n      logger.info('Analyzing user intent', { query: userQuery.substring(0, 100) });\n\n      // Use OpenAI to understand the intent\n      const intentAnalysis = await this.performIntentAnalysis(userQuery);\n      \n      // Extract structured data based on detected intent\n      const structuredData = await this.extractStructuredData(userQuery, intentAnalysis);\n\n      const result: IntelligentIntent = {\n        action: intentAnalysis.action as IntelligentIntent['action'],\n        entity: intentAnalysis.entity as IntelligentIntent['entity'],\n        confidence: intentAnalysis.confidence,\n        data: structuredData,\n        originalQuery: userQuery,\n        suggestedResponse: intentAnalysis.suggestedResponse\n      };\n\n      logger.info('Intent analysis completed', {\n        action: result.action,\n        entity: result.entity,\n        confidence: result.confidence,\n        hasData: Object.keys(result.data).length > 0\n      });\n\n      return result;\n    } catch (error) {\n      logger.error('Intent analysis failed', { \n        error: error instanceof Error ? error.message : String(error),\n        query: userQuery.substring(0, 100)\n      });\n\n      return {\n        action: 'UNKNOWN',\n        entity: 'UNKNOWN',\n        confidence: 0,\n        data: {},\n        originalQuery: userQuery,\n        suggestedResponse: 'I couldn\\'t understand your request. Could you please rephrase it?'\n      };\n    }\n  }\n\n  /**\n   * Use OpenAI to analyze the user's intent\n   */\n  private async performIntentAnalysis(userQuery: string): Promise<{\n    action: string;\n    entity: string;\n    confidence: number;\n    suggestedResponse?: string;\n  }> {\n    const analysisPrompt = `\nYou are an AI assistant for MarketSage, an African fintech marketing automation platform. \nAnalyze the user's request and determine their intent.\n\nUser Query: \"${userQuery}\"\n\nPlease analyze this query and respond with a JSON object containing:\n{\n  \"action\": \"CREATE|UPDATE|DELETE|FETCH|ASSIGN|ANALYZE\",\n  \"entity\": \"CONTACT|WORKFLOW|CAMPAIGN|TASK|SEGMENT|TEMPLATE|LIST|INTEGRATION|JOURNEY|ABTEST|DATA\",\n  \"confidence\": 0.0-1.0,\n  \"reasoning\": \"Brief explanation of your analysis\",\n  \"suggestedResponse\": \"Appropriate response if action is unclear\"\n}\n\nAction definitions:\n- CREATE: User wants to create something new (contact, workflow, campaign, etc.)\n- UPDATE: User wants to modify existing data\n- DELETE: User wants to remove something\n- FETCH: User wants to retrieve/view data (analytics, reports, etc.)\n- ASSIGN: User wants to assign tasks or responsibilities\n- ANALYZE: User wants analysis or insights\n\nEntity definitions:\n- CONTACT: Person/customer information\n- WORKFLOW: Automated business processes\n- CAMPAIGN: Marketing campaigns (email, SMS, WhatsApp)\n- TASK: Work assignments or todos\n- SEGMENT: Customer groups/audiences\n- TEMPLATE: Reusable content templates\n- DATA: Analytics, reports, or system data\n\nExamples:\n\"create a contact named John\" → {\"action\": \"CREATE\", \"entity\": \"CONTACT\", \"confidence\": 0.95}\n\"show me leadpulse data\" → {\"action\": \"FETCH\", \"entity\": \"DATA\", \"confidence\": 0.9}\n\"assign task to team lead\" → {\"action\": \"ASSIGN\", \"entity\": \"TASK\", \"confidence\": 0.9}\n\"build workflow for onboarding\" → {\"action\": \"CREATE\", \"entity\": \"WORKFLOW\", \"confidence\": 0.95}\n\nRespond with valid JSON only.`;\n\n    try {\n      const response = await this.aiInstance.generateResponse(\n        analysisPrompt,\n        'You are a precise intent analysis AI. Respond only with valid JSON.',\n        [],\n        {\n          model: process.env.OPENAI_MODEL || 'gpt-4o-mini',\n          temperature: 0.1, // Low temperature for consistent analysis\n          maxTokens: 300\n        }\n      );\n\n      // Parse the JSON response\n      const analysis = JSON.parse(response.answer);\n      \n      return {\n        action: analysis.action || 'UNKNOWN',\n        entity: analysis.entity || 'UNKNOWN',\n        confidence: analysis.confidence || 0,\n        suggestedResponse: analysis.suggestedResponse\n      };\n    } catch (error) {\n      logger.warn('Intent analysis parsing failed, using fallback', { error: error instanceof Error ? error.message : String(error) });\n      \n      // Fallback to simple pattern matching\n      return this.fallbackIntentAnalysis(userQuery);\n    }\n  }\n\n  /**\n   * Extract structured data based on the detected intent\n   */\n  private async extractStructuredData(userQuery: string, intent: any): Promise<Record<string, any>> {\n    switch (intent.entity) {\n      case 'CONTACT':\n        return await this.extractContactData(userQuery);\n      case 'WORKFLOW':\n        return await this.extractWorkflowData(userQuery);\n      case 'CAMPAIGN':\n        return await this.extractCampaignData(userQuery);\n      case 'TASK':\n        return await this.extractTaskData(userQuery);\n      case 'DATA':\n        return await this.extractDataFetchRequest(userQuery);\n      default:\n        return await this.extractGenericData(userQuery);\n    }\n  }\n\n  /**\n   * Extract contact information from natural language\n   */\n  private async extractContactData(userQuery: string): Promise<ContactData> {\n    const extractionPrompt = `\nExtract contact information from this request: \"${userQuery}\"\n\nPlease extract any available contact details and respond with JSON:\n{\n  \"name\": \"Full name if mentioned\",\n  \"email\": \"Email address if mentioned\", \n  \"phone\": \"Phone number if mentioned\",\n  \"company\": \"Company name if mentioned\",\n  \"notes\": \"Any additional notes or context\"\n}\n\nExamples:\n\"create contact Supreme Oyewumi, phone +234806...\" → {\"name\": \"Supreme Oyewumi\", \"phone\": \"+2348061364545\"}\n\"add john@example.com to contacts\" → {\"email\": \"john@example.com\"}\n\nOnly include fields that are explicitly mentioned. Use null for missing fields.\nRespond with valid JSON only.`;\n\n    try {\n      const response = await this.aiInstance.generateResponse(\n        extractionPrompt,\n        'Extract contact data as JSON only.',\n        [],\n        { temperature: 0.1, maxTokens: 200 }\n      );\n\n      return JSON.parse(response.answer);\n    } catch (error) {\n      logger.warn('Contact data extraction failed', { error: error instanceof Error ? error.message : String(error) });\n      return this.fallbackContactExtraction(userQuery);\n    }\n  }\n\n  /**\n   * Extract workflow information from natural language\n   */\n  private async extractWorkflowData(userQuery: string): Promise<WorkflowData> {\n    const extractionPrompt = `\nExtract workflow information from this request: \"${userQuery}\"\n\nPlease extract workflow details and respond with JSON:\n{\n  \"name\": \"Workflow name or title\",\n  \"type\": \"onboarding|retention|nurturing|remittance|compliance|automation|general\",\n  \"market\": \"nigeria|nigerian|kenya|ghana|uk|south_africa|cross_border|multi_market\", \n  \"industry\": \"fintech|banking|remittance|general\",\n  \"objective\": \"Main goal of the workflow\",\n  \"steps\": [\"List of workflow steps if mentioned\"],\n  \"features\": [\"BVN verification\", \"KYC\", \"AML screening\", etc. if mentioned]\n}\n\nExamples:\n\"create Nigerian fintech onboarding workflow with BVN verification\" → {\"type\": \"onboarding\", \"market\": \"nigerian\", \"industry\": \"fintech\", \"features\": [\"BVN verification\"]}\n\"build cross-border remittance automation from Ghana to UK\" → {\"type\": \"remittance\", \"market\": \"cross_border\", \"industry\": \"remittance\"}\n\"create fintech onboarding workflow\" → {\"type\": \"onboarding\", \"industry\": \"fintech\"}\n\nOnly include fields that can be inferred. Use null for missing fields.\nRespond with valid JSON only.`;\n\n    try {\n      const response = await this.aiInstance.generateResponse(\n        extractionPrompt,\n        'Extract workflow data as JSON only.',\n        [],\n        { temperature: 0.1, maxTokens: 300 }\n      );\n\n      return JSON.parse(response.answer);\n    } catch (error) {\n      logger.warn('Workflow data extraction failed', { error: error instanceof Error ? error.message : String(error) });\n      return { type: 'general', market: 'multi_market' };\n    }\n  }\n\n  /**\n   * Extract campaign information from natural language\n   */\n  private async extractCampaignData(userQuery: string): Promise<CampaignData> {\n    const extractionPrompt = `\nExtract campaign information from this request: \"${userQuery}\"\n\nPlease extract campaign details and respond with JSON:\n{\n  \"name\": \"Campaign name or title\",\n  \"type\": \"email|sms|whatsapp\",\n  \"market\": \"nigeria|kenya|ghana|south_africa|multi_market\",\n  \"audience\": \"Target audience description\",\n  \"objective\": \"Campaign goal or purpose\",\n  \"content\": \"Any content details mentioned\"\n}\n\nExamples:\n\"build WhatsApp campaign for Kenyan diaspora\" → {\"type\": \"whatsapp\", \"market\": \"kenya\", \"audience\": \"diaspora\"}\n\"create email campaign for new users\" → {\"type\": \"email\", \"audience\": \"new users\"}\n\nOnly include fields that can be inferred. Use null for missing fields.\nRespond with valid JSON only.`;\n\n    try {\n      const response = await this.aiInstance.generateResponse(\n        extractionPrompt,\n        'Extract campaign data as JSON only.',\n        [],\n        { temperature: 0.1, maxTokens: 300 }\n      );\n\n      return JSON.parse(response.answer);\n    } catch (error) {\n      logger.warn('Campaign data extraction failed', { error: error instanceof Error ? error.message : String(error) });\n      return { type: 'email', market: 'multi_market' };\n    }\n  }\n\n  /**\n   * Extract task information from natural language\n   */\n  private async extractTaskData(userQuery: string): Promise<TaskData> {\n    const extractionPrompt = `\nExtract task information from this request: \"${userQuery}\"\n\nPlease extract task details and respond with JSON:\n{\n  \"title\": \"Task title or summary\",\n  \"description\": \"Task description\",\n  \"assignee\": \"Who should be assigned (role or name)\",\n  \"priority\": \"LOW|MEDIUM|HIGH|URGENT\",\n  \"type\": \"optimization|review|creation|general\",\n  \"dueDate\": \"Any deadline mentioned\"\n}\n\nExamples:\n\"assign urgent task to marketing lead\" → {\"priority\": \"URGENT\", \"assignee\": \"marketing lead\"}\n\"create review task for campaign\" → {\"type\": \"review\", \"title\": \"campaign review\"}\n\nOnly include fields that can be inferred. Use null for missing fields.\nRespond with valid JSON only.`;\n\n    try {\n      const response = await this.aiInstance.generateResponse(\n        extractionPrompt,\n        'Extract task data as JSON only.',\n        [],\n        { temperature: 0.1, maxTokens: 300 }\n      );\n\n      return JSON.parse(response.answer);\n    } catch (error) {\n      logger.warn('Task data extraction failed', { error: error instanceof Error ? error.message : String(error) });\n      return { priority: 'MEDIUM', type: 'general' };\n    }\n  }\n\n  /**\n   * Extract data fetch request information\n   */\n  private async extractDataFetchRequest(userQuery: string): Promise<DataFetchRequest> {\n    const extractionPrompt = `\nExtract data request information from this query: \"${userQuery}\"\n\nPlease extract data request details and respond with JSON:\n{\n  \"source\": \"leadpulse|analytics|users|campaigns|contacts\",\n  \"timeRange\": \"today|week|month|year|custom\",\n  \"format\": \"summary|detailed|chart\",\n  \"filters\": {\"any\": \"specific filters mentioned\"}\n}\n\nExamples:\n\"show me leadpulse data\" → {\"source\": \"leadpulse\", \"format\": \"summary\"}\n\"get analytics for last week\" → {\"source\": \"analytics\", \"timeRange\": \"week\"}\n\"fetch user data from this month\" → {\"source\": \"users\", \"timeRange\": \"month\"}\n\nOnly include fields that can be inferred. Use null for missing fields.\nRespond with valid JSON only.`;\n\n    try {\n      const response = await this.aiInstance.generateResponse(\n        extractionPrompt,\n        'Extract data request as JSON only.',\n        [],\n        { temperature: 0.1, maxTokens: 200 }\n      );\n\n      return JSON.parse(response.answer);\n    } catch (error) {\n      logger.warn('Data fetch extraction failed', { error: error instanceof Error ? error.message : String(error) });\n      return { source: 'analytics', format: 'summary' };\n    }\n  }\n\n  /**\n   * Extract generic data for unknown entities\n   */\n  private async extractGenericData(userQuery: string): Promise<Record<string, any>> {\n    // Simple keyword extraction for fallback\n    const data: Record<string, any> = {};\n    \n    const lowerQuery = userQuery.toLowerCase();\n    \n    // Extract common patterns\n    if (lowerQuery.includes('urgent')) data.priority = 'URGENT';\n    if (lowerQuery.includes('high priority')) data.priority = 'HIGH';\n    if (lowerQuery.includes('nigeria')) data.market = 'nigeria';\n    if (lowerQuery.includes('kenya')) data.market = 'kenya';\n    if (lowerQuery.includes('ghana')) data.market = 'ghana';\n    if (lowerQuery.includes('email')) data.type = 'email';\n    if (lowerQuery.includes('whatsapp')) data.type = 'whatsapp';\n    if (lowerQuery.includes('sms')) data.type = 'sms';\n\n    return data;\n  }\n\n  /**\n   * Fallback intent analysis using simple pattern matching\n   */\n  private fallbackIntentAnalysis(userQuery: string): {\n    action: string;\n    entity: string;\n    confidence: number;\n    suggestedResponse?: string;\n  } {\n    const lowerQuery = userQuery.toLowerCase();\n    \n    // Simple pattern matching\n    if (lowerQuery.includes('create') || lowerQuery.includes('add') || lowerQuery.includes('make') || lowerQuery.includes('build')) {\n      if (lowerQuery.includes('contact')) return { action: 'CREATE', entity: 'CONTACT', confidence: 0.8 };\n      if (lowerQuery.includes('workflow')) return { action: 'CREATE', entity: 'WORKFLOW', confidence: 0.8 };\n      if (lowerQuery.includes('campaign')) return { action: 'CREATE', entity: 'CAMPAIGN', confidence: 0.8 };\n      if (lowerQuery.includes('task')) return { action: 'CREATE', entity: 'TASK', confidence: 0.8 };\n      return { action: 'CREATE', entity: 'UNKNOWN', confidence: 0.6 };\n    }\n    \n    if (lowerQuery.includes('assign') || lowerQuery.includes('delegate')) {\n      return { action: 'ASSIGN', entity: 'TASK', confidence: 0.8 };\n    }\n    \n    if (lowerQuery.includes('show') || lowerQuery.includes('get') || lowerQuery.includes('fetch') || lowerQuery.includes('data')) {\n      return { action: 'FETCH', entity: 'DATA', confidence: 0.7 };\n    }\n    \n    return { \n      action: 'UNKNOWN', \n      entity: 'UNKNOWN', \n      confidence: 0.3,\n      suggestedResponse: 'I need more information to understand your request. Could you please be more specific?'\n    };\n  }\n\n  /**\n   * Fallback contact extraction using regex patterns\n   */\n  private fallbackContactExtraction(userQuery: string): ContactData {\n    const data: ContactData = {};\n    \n    // Extract email\n    const emailMatch = userQuery.match(/[\\w\\.-]+@[\\w\\.-]+\\.\\w+/);\n    if (emailMatch) data.email = emailMatch[0];\n    \n    // Extract phone number\n    const phoneMatch = userQuery.match(/[\\+]?[\\d\\s\\-\\(\\)]{10,}/);\n    if (phoneMatch) data.phone = phoneMatch[0].replace(/\\s/g, '');\n    \n    // Extract name (simple heuristic)\n    const nameMatch = userQuery.match(/(?:contact|named?|for)\\s+([A-Z][a-z]+(?:\\s+[A-Z][a-z]+)*)/i);\n    if (nameMatch) data.name = nameMatch[1];\n    \n    return data;\n  }\n}\n\n// Export singleton instance\nexport const intelligentIntentAnalyzer = new IntelligentIntentAnalyzer();"],"names":["intelligentIntentAnalyzer","IntelligentIntentAnalyzer","constructor","aiInstance","getAIInstance","analyzeIntent","userQuery","logger","info","query","substring","intentAnalysis","performIntentAnalysis","structuredData","extractStructuredData","result","action","entity","confidence","data","originalQuery","suggestedResponse","hasData","Object","keys","length","error","Error","message","String","analysisPrompt","response","generateResponse","model","process","env","OPENAI_MODEL","temperature","maxTokens","analysis","JSON","parse","answer","warn","fallbackIntentAnalysis","intent","extractContactData","extractWorkflowData","extractCampaignData","extractTaskData","extractDataFetchRequest","extractGenericData","extractionPrompt","fallbackContactExtraction","type","market","priority","source","format","lowerQuery","toLowerCase","includes","emailMatch","match","email","phoneMatch","phone","replace","nameMatch","name"],"mappings":"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"}