cc05756536854fc5ef860825b7e49f0f
/**
 * Customer Data MCP Server Integration Tests
 * 
 * These tests verify the Customer Data MCP server works correctly with real customer
 * prediction data, behavioral scoring, and segmentation.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jest = require("@jest/jest");
const _customerdataserver = require("../../../mcp/servers/customer-data-server");
const _setup = require("./setup");
(0, _jest.describe)('Customer Data MCP Server Integration Tests', ()=>{
    let server;
    let dbManager;
    let performanceTracker;
    let authContext;
    (0, _jest.beforeAll)(async ()=>{
        dbManager = _setup.TestDatabaseManager.getInstance();
        await dbManager.setup();
        performanceTracker = new _setup.PerformanceTracker();
        server = new _customerdataserver.CustomerDataMCPServer({
            rateLimiting: {
                enabled: false
            }
        });
        authContext = {
            organizationId: 'test-org-1',
            userId: 'test-user-1',
            role: 'ADMIN',
            permissions: [
                'read:customers',
                'read:predictions'
            ]
        };
    }, _setup.testConfig.timeouts.database);
    (0, _jest.afterAll)(async ()=>{
        await dbManager.teardown();
    });
    (0, _jest.beforeEach)(()=>{
        performanceTracker.reset();
    });
    (0, _jest.describe)('Customer Predictions Data Integrity', ()=>{
        (0, _jest.test)('should verify customer prediction data relationships', async ()=>{
            const predictions = await _setup.testPrisma.mCPCustomerPredictions.findMany({
                include: {
                    contact: true,
                    organization: true
                }
            });
            (0, _jest.expect)(predictions.length).toBeGreaterThan(0);
            for (const prediction of predictions){
                // Verify relationships
                (0, _jest.expect)(prediction.contact).toBeDefined();
                (0, _jest.expect)(prediction.organization).toBeDefined();
                (0, _jest.expect)(prediction.contactId).toBe(prediction.contact.id);
                (0, _jest.expect)(prediction.organizationId).toBe(prediction.organization.id);
                // Verify prediction scores are within valid ranges
                (0, _jest.expect)(prediction.churnRisk).toBeGreaterThanOrEqual(0);
                (0, _jest.expect)(prediction.churnRisk).toBeLessThanOrEqual(100);
                (0, _jest.expect)(prediction.lifetimeValue).toBeGreaterThanOrEqual(0);
                (0, _jest.expect)(prediction.engagementScore).toBeGreaterThanOrEqual(0);
                (0, _jest.expect)(prediction.engagementScore).toBeLessThanOrEqual(100);
                (0, _jest.expect)(prediction.confidenceScore).toBeGreaterThanOrEqual(0);
                (0, _jest.expect)(prediction.confidenceScore).toBeLessThanOrEqual(100);
                // Verify behavioral scores structure
                if (prediction.behavioralScores) {
                    const scores = JSON.parse(prediction.behavioralScores);
                    (0, _jest.expect)(scores).toHaveProperty('mobileUsage');
                    (0, _jest.expect)(scores).toHaveProperty('priceSensitivity');
                    (0, _jest.expect)(scores).toHaveProperty('whatsappPreference');
                    (0, _jest.expect)(scores.mobileUsage).toBeGreaterThanOrEqual(0);
                    (0, _jest.expect)(scores.mobileUsage).toBeLessThanOrEqual(100);
                }
                // Verify insights structure
                if (prediction.insights) {
                    const insights = JSON.parse(prediction.insights);
                    (0, _jest.expect)(Array.isArray(insights)).toBe(true);
                }
            }
            console.log(`✅ Verified ${predictions.length} customer predictions for data integrity`);
        });
        (0, _jest.test)('should validate customer segmentation distribution', async ()=>{
            const segmentCounts = await _setup.testPrisma.mCPCustomerPredictions.groupBy({
                by: [
                    'segment'
                ],
                _count: {
                    segment: true
                },
                where: {
                    organizationId: 'test-org-1'
                }
            });
            (0, _jest.expect)(segmentCounts.length).toBeGreaterThan(0);
            const validSegments = [
                'VIP Customers',
                'Growth Potential',
                'At Risk',
                'New Customers',
                'Loyal Base',
                'Price Sensitive',
                'Inactive'
            ];
            for (const segmentData of segmentCounts){
                (0, _jest.expect)(validSegments).toContain(segmentData.segment);
                (0, _jest.expect)(segmentData._count.segment).toBeGreaterThan(0);
            }
            console.log('✅ Customer segment distribution:', segmentCounts);
        });
    });
    (0, _jest.describe)('MCP Server Operations', ()=>{
        (0, _jest.test)('should retrieve customer segments with real data', async ()=>{
            performanceTracker.start();
            const result = await server.readResource('customer://segments', {
                organizationId: 'test-org-1'
            }, authContext);
            const duration = performanceTracker.measure('getCustomerSegments');
            (0, _jest.expect)(result.success).toBe(true);
            (0, _jest.expect)(result.data).toBeDefined();
            const data = result.data;
            (0, _jest.expect)(data).toHaveProperty('segments');
            (0, _jest.expect)(data).toHaveProperty('summary');
            // Verify segment data structure
            for (const segment of data.segments){
                (0, _jest.expect)(segment).toHaveProperty('name');
                (0, _jest.expect)(segment).toHaveProperty('count');
                (0, _jest.expect)(segment).toHaveProperty('avgLifetimeValue');
                (0, _jest.expect)(segment).toHaveProperty('avgChurnRisk');
                (0, _jest.expect)(segment).toHaveProperty('avgEngagementScore');
                (0, _jest.expect)(segment.count).toBeGreaterThan(0);
                (0, _jest.expect)(segment.avgLifetimeValue).toBeGreaterThanOrEqual(0);
                (0, _jest.expect)(segment.avgChurnRisk).toBeGreaterThanOrEqual(0);
                (0, _jest.expect)(segment.avgChurnRisk).toBeLessThanOrEqual(100);
            }
            (0, _jest.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxResponseTime);
            console.log(`✅ Retrieved ${data.segments.length} customer segments in ${duration}ms`);
        });
        (0, _jest.test)('should get high-risk customers for retention', async ()=>{
            performanceTracker.start();
            const result = await server.readResource('customer://at-risk', {
                organizationId: 'test-org-1',
                riskThreshold: 70
            }, authContext);
            const duration = performanceTracker.measure('getAtRiskCustomers');
            (0, _jest.expect)(result.success).toBe(true);
            (0, _jest.expect)(result.data).toBeDefined();
            const data = result.data;
            (0, _jest.expect)(data).toHaveProperty('customers');
            (0, _jest.expect)(data).toHaveProperty('totalAtRisk');
            (0, _jest.expect)(data).toHaveProperty('recommendations');
            // Verify all returned customers meet risk threshold
            for (const customer of data.customers){
                (0, _jest.expect)(customer.churnRisk).toBeGreaterThanOrEqual(70);
                (0, _jest.expect)(customer).toHaveProperty('contactId');
                (0, _jest.expect)(customer).toHaveProperty('nextBestAction');
                (0, _jest.expect)(customer).toHaveProperty('urgencyLevel');
            }
            (0, _jest.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxResponseTime);
            console.log(`✅ Retrieved ${data.customers.length} at-risk customers in ${duration}ms`);
        });
        (0, _jest.test)('should analyze customer lifetime value distribution', async ()=>{
            performanceTracker.start();
            const result = await server.readResource('customer://ltv-analysis', {
                organizationId: 'test-org-1'
            }, authContext);
            const duration = performanceTracker.measure('ltvAnalysis');
            (0, _jest.expect)(result.success).toBe(true);
            (0, _jest.expect)(result.data).toBeDefined();
            const data = result.data;
            (0, _jest.expect)(data).toHaveProperty('distribution');
            (0, _jest.expect)(data).toHaveProperty('percentiles');
            (0, _jest.expect)(data).toHaveProperty('topCustomers');
            (0, _jest.expect)(data).toHaveProperty('summary');
            // Verify LTV distribution
            (0, _jest.expect)(data.distribution.length).toBeGreaterThan(0);
            for (const bucket of data.distribution){
                (0, _jest.expect)(bucket).toHaveProperty('range');
                (0, _jest.expect)(bucket).toHaveProperty('count');
                (0, _jest.expect)(bucket).toHaveProperty('percentage');
                (0, _jest.expect)(bucket.count).toBeGreaterThanOrEqual(0);
            }
            // Verify percentiles
            (0, _jest.expect)(data.percentiles).toHaveProperty('p25');
            (0, _jest.expect)(data.percentiles).toHaveProperty('p50');
            (0, _jest.expect)(data.percentiles).toHaveProperty('p75');
            (0, _jest.expect)(data.percentiles).toHaveProperty('p90');
            (0, _jest.expect)(data.percentiles.p25).toBeLessThanOrEqual(data.percentiles.p50);
            (0, _jest.expect)(data.percentiles.p50).toBeLessThanOrEqual(data.percentiles.p75);
            (0, _jest.expect)(data.percentiles.p75).toBeLessThanOrEqual(data.percentiles.p90);
            (0, _jest.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxResponseTime);
            console.log(`✅ Analyzed LTV distribution in ${duration}ms`);
        });
        (0, _jest.test)('should provide behavioral insights and recommendations', async ()=>{
            performanceTracker.start();
            const result = await server.readResource('customer://behavioral-insights', {
                organizationId: 'test-org-1',
                segmentFilter: 'Growth Potential'
            }, authContext);
            const duration = performanceTracker.measure('behavioralInsights');
            (0, _jest.expect)(result.success).toBe(true);
            (0, _jest.expect)(result.data).toBeDefined();
            const data = result.data;
            (0, _jest.expect)(data).toHaveProperty('insights');
            (0, _jest.expect)(data).toHaveProperty('channelPreferences');
            (0, _jest.expect)(data).toHaveProperty('behaviorPatterns');
            (0, _jest.expect)(data).toHaveProperty('actionableRecommendations');
            // Verify channel preferences
            const channelPrefs = data.channelPreferences;
            (0, _jest.expect)(channelPrefs).toHaveProperty('whatsappPreference');
            (0, _jest.expect)(channelPrefs).toHaveProperty('smsEngagement');
            (0, _jest.expect)(channelPrefs).toHaveProperty('emailEffectiveness');
            // Verify behavior patterns
            const patterns = data.behaviorPatterns;
            (0, _jest.expect)(patterns).toHaveProperty('mobileUsage');
            (0, _jest.expect)(patterns).toHaveProperty('priceSensitivity');
            (0, _jest.expect)(patterns).toHaveProperty('socialInfluence');
            // Verify recommendations are actionable
            (0, _jest.expect)(Array.isArray(data.actionableRecommendations)).toBe(true);
            for (const recommendation of data.actionableRecommendations){
                (0, _jest.expect)(recommendation).toHaveProperty('action');
                (0, _jest.expect)(recommendation).toHaveProperty('priority');
                (0, _jest.expect)(recommendation).toHaveProperty('expectedImpact');
            }
            (0, _jest.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxResponseTime);
            console.log(`✅ Generated behavioral insights in ${duration}ms`);
        });
    });
    (0, _jest.describe)('Advanced Analytics and Predictions', ()=>{
        (0, _jest.test)('should perform churn prediction analysis', async ()=>{
            performanceTracker.start();
            const result = await server.readResource('customer://churn-prediction', {
                organizationId: 'test-org-1',
                timeHorizon: '30_days'
            }, authContext);
            const duration = performanceTracker.measure('churnPrediction');
            (0, _jest.expect)(result.success).toBe(true);
            const data = result.data;
            (0, _jest.expect)(data).toHaveProperty('riskDistribution');
            (0, _jest.expect)(data).toHaveProperty('predictedChurners');
            (0, _jest.expect)(data).toHaveProperty('retentionStrategies');
            (0, _jest.expect)(data).toHaveProperty('potentialRevenueLoss');
            // Verify risk distribution
            const riskDist = data.riskDistribution;
            (0, _jest.expect)(riskDist).toHaveProperty('low');
            (0, _jest.expect)(riskDist).toHaveProperty('medium');
            (0, _jest.expect)(riskDist).toHaveProperty('high');
            (0, _jest.expect)(riskDist).toHaveProperty('critical');
            // Verify predicted churners have high risk scores
            for (const customer of data.predictedChurners){
                (0, _jest.expect)(customer.churnRisk).toBeGreaterThan(60);
                (0, _jest.expect)(customer).toHaveProperty('retentionStrategy');
                (0, _jest.expect)(customer).toHaveProperty('interventionUrgency');
            }
            (0, _jest.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxResponseTime);
            console.log(`✅ Performed churn prediction analysis in ${duration}ms`);
        });
        (0, _jest.test)('should calculate customer engagement trends', async ()=>{
            performanceTracker.start();
            const result = await server.readResource('customer://engagement-trends', {
                organizationId: 'test-org-1',
                period: 'last_90_days'
            }, authContext);
            const duration = performanceTracker.measure('engagementTrends');
            (0, _jest.expect)(result.success).toBe(true);
            const data = result.data;
            (0, _jest.expect)(data).toHaveProperty('trends');
            (0, _jest.expect)(data).toHaveProperty('segmentComparison');
            (0, _jest.expect)(data).toHaveProperty('engagementDrivers');
            // Verify trends data
            (0, _jest.expect)(Array.isArray(data.trends)).toBe(true);
            for (const trend of data.trends){
                (0, _jest.expect)(trend).toHaveProperty('period');
                (0, _jest.expect)(trend).toHaveProperty('avgEngagementScore');
                (0, _jest.expect)(trend).toHaveProperty('trend'); // 'increasing', 'decreasing', 'stable'
            }
            // Verify segment comparison
            (0, _jest.expect)(Array.isArray(data.segmentComparison)).toBe(true);
            for (const comparison of data.segmentComparison){
                (0, _jest.expect)(comparison).toHaveProperty('segment');
                (0, _jest.expect)(comparison).toHaveProperty('currentScore');
                (0, _jest.expect)(comparison).toHaveProperty('previousScore');
                (0, _jest.expect)(comparison).toHaveProperty('change');
            }
            (0, _jest.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxResponseTime);
            console.log(`✅ Calculated engagement trends in ${duration}ms`);
        });
    });
    (0, _jest.describe)('Performance and Scalability', ()=>{
        (0, _jest.test)('should handle complex customer analytics queries efficiently', async ()=>{
            const complexQueries = [
                {
                    resource: 'customer://segments',
                    params: {
                        organizationId: 'test-org-1'
                    }
                },
                {
                    resource: 'customer://ltv-analysis',
                    params: {
                        organizationId: 'test-org-1'
                    }
                },
                {
                    resource: 'customer://at-risk',
                    params: {
                        organizationId: 'test-org-1',
                        riskThreshold: 70
                    }
                },
                {
                    resource: 'customer://behavioral-insights',
                    params: {
                        organizationId: 'test-org-1'
                    }
                }
            ];
            performanceTracker.start();
            const promises = complexQueries.map((query)=>server.readResource(query.resource, query.params, authContext));
            const results = await Promise.all(promises);
            const duration = performanceTracker.measure('complexQueriesConcurrent');
            // Verify all queries succeeded
            for (const result of results){
                (0, _jest.expect)(result.success).toBe(true);
                (0, _jest.expect)(result.data).toBeDefined();
            }
            (0, _jest.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxResponseTime * 3);
            console.log(`✅ Executed ${complexQueries.length} complex queries concurrently in ${duration}ms`);
        });
        (0, _jest.test)('should validate database query optimization for customer data', async ()=>{
            const startTime = Date.now();
            // Test complex query with joins and aggregations
            const result = await _setup.testPrisma.mCPCustomerPredictions.findMany({
                where: {
                    organizationId: 'test-org-1',
                    churnRisk: {
                        gte: 50
                    }
                },
                include: {
                    contact: {
                        select: {
                            firstName: true,
                            lastName: true,
                            email: true,
                            status: true
                        }
                    }
                },
                orderBy: [
                    {
                        churnRisk: 'desc'
                    },
                    {
                        lifetimeValue: 'desc'
                    }
                ]
            });
            const queryDuration = Date.now() - startTime;
            (0, _jest.expect)(result.length).toBeGreaterThan(0);
            (0, _jest.expect)(queryDuration).toBeLessThan(_setup.testConfig.performance.maxQueryTime);
            console.log(`✅ Complex customer query: ${result.length} records in ${queryDuration}ms`);
        });
    });
    (0, _jest.describe)('Data Quality and Validation', ()=>{
        (0, _jest.test)('should validate prediction model accuracy indicators', async ()=>{
            const predictions = await _setup.testPrisma.mCPCustomerPredictions.findMany({
                where: {
                    organizationId: 'test-org-1'
                }
            });
            let totalConfidence = 0;
            let validPredictions = 0;
            for (const prediction of predictions){
                // Verify confidence scores
                (0, _jest.expect)(prediction.confidenceScore).toBeGreaterThanOrEqual(80); // Should be high confidence
                totalConfidence += prediction.confidenceScore;
                // Verify logical consistency
                if (prediction.segment === 'At Risk') {
                    (0, _jest.expect)(prediction.churnRisk).toBeGreaterThan(60);
                }
                if (prediction.segment === 'VIP Customers') {
                    (0, _jest.expect)(prediction.lifetimeValue).toBeGreaterThan(150);
                    (0, _jest.expect)(prediction.churnRisk).toBeLessThan(40);
                }
                validPredictions++;
            }
            const avgConfidence = totalConfidence / validPredictions;
            (0, _jest.expect)(avgConfidence).toBeGreaterThan(85); // Average confidence should be high
            console.log(`✅ Validated ${validPredictions} predictions, avg confidence: ${avgConfidence.toFixed(1)}%`);
        });
        (0, _jest.test)('should ensure behavioral scores are realistic for African market', async ()=>{
            const predictions = await _setup.testPrisma.mCPCustomerPredictions.findMany({
                where: {
                    organizationId: 'test-org-1'
                }
            });
            for (const prediction of predictions){
                if (prediction.behavioralScores) {
                    const scores = JSON.parse(prediction.behavioralScores);
                    // African market characteristics
                    (0, _jest.expect)(scores.mobileUsage).toBeGreaterThan(70); // High mobile usage in Africa
                    (0, _jest.expect)(scores.whatsappPreference).toBeGreaterThan(60); // WhatsApp dominant
                    (0, _jest.expect)(scores.priceSensitivity).toBeGreaterThan(50); // Price sensitivity higher
                    // Verify scores are within realistic ranges
                    Object.values(scores).forEach((score)=>{
                        (0, _jest.expect)(typeof score).toBe('number');
                        (0, _jest.expect)(score).toBeGreaterThanOrEqual(0);
                        (0, _jest.expect)(score).toBeLessThanOrEqual(100);
                    });
                }
            }
            console.log('✅ Validated behavioral scores for African market context');
        });
    });
    (0, _jest.afterAll)(()=>{
        const stats = performanceTracker.getAllStats();
        console.log('\n📊 Customer Data Server Performance Summary:');
        for (const [operation, operationStats] of Object.entries(stats)){
            console.log(`  ${operation}: avg ${operationStats.avg}ms, min ${operationStats.min}ms, max ${operationStats.max}ms`);
        }
    });
});

//# sourceMappingURL=data:application/json;base64,