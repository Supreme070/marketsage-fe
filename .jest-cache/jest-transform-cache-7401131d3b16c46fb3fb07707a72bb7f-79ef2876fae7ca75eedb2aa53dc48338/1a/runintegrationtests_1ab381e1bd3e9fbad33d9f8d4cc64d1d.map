{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/__tests__/integration/mcp/run-integration-tests.ts"],"sourcesContent":["\n/**\n * MCP Integration Test Runner\n * \n * Orchestrates running all MCP integration tests with proper setup,\n * database management, and comprehensive reporting.\n */\n\nimport { execSync } from 'child_process';\nimport path from 'path';\nimport * as dotenv from 'dotenv';\n\n// Load environment variables\ndotenv.config();\n\ninterface TestResult {\n  name: string;\n  status: 'PASSED' | 'FAILED' | 'SKIPPED';\n  duration: number;\n  error?: string;\n}\n\nclass IntegrationTestRunner {\n  private testResults: TestResult[] = [];\n  private startTime: number = 0;\n\n  constructor() {\n    this.startTime = Date.now();\n  }\n\n  /**\n   * Run all integration tests in sequence\n   */\n  async runAll(): Promise<void> {\n    console.log('üöÄ Starting MCP Integration Test Suite');\n    console.log('=====================================');\n    console.log(`üìÖ Started at: ${new Date().toISOString()}`);\n    console.log(`üåç Environment: ${process.env.NODE_ENV || 'development'}`);\n    console.log(`üê≥ Docker Mode: ${this.isDockerEnvironment()}`);\n    console.log('');\n\n    const testSuites = [\n      {\n        name: 'Database Integration Tests',\n        file: 'database-integration.test.ts',\n        description: 'Tests database operations, performance, and data integrity'\n      },\n      {\n        name: 'Data Validation Tests',\n        file: 'data-validation.test.ts',\n        description: 'Validates business rules, data consistency, and integrity'\n      },\n      {\n        name: 'MCP Servers Integration Tests',\n        file: 'mcp-servers-integration.test.ts',\n        description: 'Tests MCP server implementations with real data'\n      },\n      {\n        name: 'Docker Environment Tests',\n        file: 'docker-environment.test.ts',\n        description: 'Tests Docker-specific functionality and environment compatibility'\n      }\n    ];\n\n    // Run each test suite\n    for (const suite of testSuites) {\n      await this.runTestSuite(suite);\n    }\n\n    // Generate final report\n    this.generateFinalReport();\n  }\n\n  /**\n   * Run a specific test suite\n   */\n  private async runTestSuite(suite: { name: string; file: string; description: string }): Promise<void> {\n    console.log(`üß™ Running: ${suite.name}`);\n    console.log(`üìù Description: ${suite.description}`);\n    console.log('');\n\n    const startTime = Date.now();\n    \n    try {\n      // Set test environment\n      const testEnv = {\n        ...process.env,\n        NODE_ENV: 'test',\n        // Use test database if available\n        DATABASE_URL: process.env.TEST_DATABASE_URL || process.env.DATABASE_URL\n      };\n\n      // Run Jest for specific test file\n      const jestCommand = `npx jest \"${suite.file}\" --verbose --testTimeout=300000 --runInBand`;\n      \n      console.log(`‚ö° Executing: ${jestCommand}`);\n      \n      execSync(jestCommand, {\n        stdio: 'inherit',\n        cwd: path.resolve(process.cwd()),\n        env: testEnv\n      });\n\n      const duration = Date.now() - startTime;\n      \n      this.testResults.push({\n        name: suite.name,\n        status: 'PASSED',\n        duration\n      });\n\n      console.log(`‚úÖ ${suite.name} completed successfully in ${duration}ms`);\n      console.log('');\n\n    } catch (error) {\n      const duration = Date.now() - startTime;\n      \n      this.testResults.push({\n        name: suite.name,\n        status: 'FAILED',\n        duration,\n        error: error instanceof Error ? error.message : String(error)\n      });\n\n      console.error(`‚ùå ${suite.name} failed after ${duration}ms`);\n      console.error(`Error: ${error instanceof Error ? error.message : String(error)}`);\n      console.log('');\n\n      // Continue with other tests but note the failure\n    }\n  }\n\n  /**\n   * Generate comprehensive test report\n   */\n  private generateFinalReport(): void {\n    const totalDuration = Date.now() - this.startTime;\n    const passedTests = this.testResults.filter(r => r.status === 'PASSED');\n    const failedTests = this.testResults.filter(r => r.status === 'FAILED');\n    const skippedTests = this.testResults.filter(r => r.status === 'SKIPPED');\n\n    console.log('\\nüìä MCP Integration Test Suite Report');\n    console.log('====================================');\n    console.log(`‚è±Ô∏è  Total Duration: ${(totalDuration / 1000).toFixed(2)}s`);\n    console.log(`üìÖ Completed at: ${new Date().toISOString()}`);\n    console.log('');\n\n    console.log('üìà Test Results Summary:');\n    console.log(`‚úÖ Passed: ${passedTests.length}`);\n    console.log(`‚ùå Failed: ${failedTests.length}`);\n    console.log(`‚è≠Ô∏è  Skipped: ${skippedTests.length}`);\n    console.log(`üìä Total: ${this.testResults.length}`);\n    console.log('');\n\n    // Individual test results\n    console.log('üìã Individual Test Results:');\n    this.testResults.forEach((result, index) => {\n      const status = result.status === 'PASSED' ? '‚úÖ' : \n                     result.status === 'FAILED' ? '‚ùå' : '‚è≠Ô∏è';\n      \n      console.log(`${index + 1}. ${status} ${result.name}`);\n      console.log(`   Duration: ${(result.duration / 1000).toFixed(2)}s`);\n      \n      if (result.error) {\n        console.log(`   Error: ${result.error}`);\n      }\n      console.log('');\n    });\n\n    // Performance summary\n    if (passedTests.length > 0) {\n      const avgDuration = passedTests.reduce((sum, test) => sum + test.duration, 0) / passedTests.length;\n      const minDuration = Math.min(...passedTests.map(t => t.duration));\n      const maxDuration = Math.max(...passedTests.map(t => t.duration));\n\n      console.log('‚ö° Performance Summary:');\n      console.log(`Average Duration: ${(avgDuration / 1000).toFixed(2)}s`);\n      console.log(`Fastest Test: ${(minDuration / 1000).toFixed(2)}s`);\n      console.log(`Slowest Test: ${(maxDuration / 1000).toFixed(2)}s`);\n      console.log('');\n    }\n\n    // Environment information\n    console.log('üåç Environment Information:');\n    console.log(`Node.js Version: ${process.version}`);\n    console.log(`Platform: ${process.platform}`);\n    console.log(`Architecture: ${process.arch}`);\n    console.log(`Docker Environment: ${this.isDockerEnvironment()}`);\n    console.log(`Database URL: ${this.maskDatabaseUrl(process.env.DATABASE_URL || 'Not set')}`);\n    console.log('');\n\n    // Final status\n    const overallStatus = failedTests.length === 0 ? 'PASSED' : 'FAILED';\n    const statusIcon = overallStatus === 'PASSED' ? 'üéâ' : 'üí•';\n    \n    console.log(`${statusIcon} Overall Status: ${overallStatus}`);\n    \n    if (overallStatus === 'PASSED') {\n      console.log('üéØ All MCP integration tests passed successfully!');\n      console.log('‚úÖ System is ready for production deployment');\n    } else {\n      console.log('‚ö†Ô∏è  Some tests failed - please review the errors above');\n      console.log('üîß Fix the issues before proceeding to production');\n    }\n\n    // Exit with appropriate code\n    process.exit(failedTests.length === 0 ? 0 : 1);\n  }\n\n  /**\n   * Check if running in Docker environment\n   */\n  private isDockerEnvironment(): boolean {\n    return process.env.DOCKER_ENV === 'true' || \n           process.env.DATABASE_URL?.includes('marketsage-db') ||\n           false;\n  }\n\n  /**\n   * Mask sensitive information in database URL\n   */\n  private maskDatabaseUrl(url: string): string {\n    return url.replace(/\\/\\/.*@/, '//***:***@');\n  }\n\n  /**\n   * Pre-flight checks before running tests\n   */\n  async preflightChecks(): Promise<boolean> {\n    console.log('üîç Running pre-flight checks...');\n\n    try {\n      // Check if required dependencies are available\n      execSync('npx jest --version', { stdio: 'pipe' });\n      console.log('‚úÖ Jest is available');\n\n      // Check if TypeScript is available\n      execSync('npx tsc --version', { stdio: 'pipe' });\n      console.log('‚úÖ TypeScript is available');\n\n      // Check if Prisma is available\n      execSync('npx prisma --version', { stdio: 'pipe' });\n      console.log('‚úÖ Prisma is available');\n\n      // Check database connection\n      if (process.env.DATABASE_URL) {\n        console.log('‚úÖ Database URL is configured');\n      } else {\n        console.log('‚ö†Ô∏è  Database URL not configured - using default');\n      }\n\n      console.log('‚úÖ All pre-flight checks passed');\n      console.log('');\n      return true;\n\n    } catch (error) {\n      console.error('‚ùå Pre-flight checks failed:', error);\n      return false;\n    }\n  }\n}\n\n/**\n * Main execution function\n */\nasync function main(): Promise<void> {\n  const runner = new IntegrationTestRunner();\n\n  // Parse command line arguments\n  const args = process.argv.slice(2);\n  \n  if (args.includes('--help') || args.includes('-h')) {\n    console.log('MCP Integration Test Runner');\n    console.log('Usage: npm run test:integration [options]');\n    console.log('');\n    console.log('Options:');\n    console.log('  --help, -h     Show this help message');\n    console.log('  --skip-checks  Skip pre-flight checks');\n    console.log('');\n    console.log('Environment Variables:');\n    console.log('  DATABASE_URL        Database connection string');\n    console.log('  TEST_DATABASE_URL   Test database connection string');\n    console.log('  NODE_ENV           Environment (test, development, production)');\n    console.log('  DOCKER_ENV         Set to \"true\" if running in Docker');\n    return;\n  }\n\n  // Run pre-flight checks unless skipped\n  if (!args.includes('--skip-checks')) {\n    const checksPass = await runner.preflightChecks();\n    if (!checksPass) {\n      console.error('‚ùå Pre-flight checks failed. Aborting test run.');\n      process.exit(1);\n    }\n  }\n\n  // Run all tests\n  await runner.runAll();\n}\n\n// Execute if this script is run directly\nif (require.main === module) {\n  main().catch((error) => {\n    console.error('üí• Test runner failed:', error);\n    process.exit(1);\n  });\n}\n\nexport default IntegrationTestRunner;"],"names":["dotenv","config","IntegrationTestRunner","constructor","testResults","startTime","Date","now","runAll","console","log","toISOString","process","env","NODE_ENV","isDockerEnvironment","testSuites","name","file","description","suite","runTestSuite","generateFinalReport","testEnv","DATABASE_URL","TEST_DATABASE_URL","jestCommand","execSync","stdio","cwd","path","resolve","duration","push","status","error","Error","message","String","totalDuration","passedTests","filter","r","failedTests","skippedTests","toFixed","length","forEach","result","index","avgDuration","reduce","sum","test","minDuration","Math","min","map","t","maxDuration","max","version","platform","arch","maskDatabaseUrl","overallStatus","statusIcon","exit","DOCKER_ENV","includes","url","replace","preflightChecks","main","runner","args","argv","slice","checksPass","require","module","catch"],"mappings":"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"}