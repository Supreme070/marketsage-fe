a426600440cc5bac35472085283ed196
/**
 * MCP Integration Test Runner
 * 
 * Orchestrates running all MCP integration tests with proper setup,
 * database management, and comprehensive reporting.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _child_process = require("child_process");
const _path = /*#__PURE__*/ _interop_require_default(require("path"));
const _dotenv = /*#__PURE__*/ _interop_require_wildcard(require("dotenv"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// Load environment variables
_dotenv.config();
class IntegrationTestRunner {
    constructor(){
        this.testResults = [];
        this.startTime = 0;
        this.startTime = Date.now();
    }
    /**
   * Run all integration tests in sequence
   */ async runAll() {
        console.log('üöÄ Starting MCP Integration Test Suite');
        console.log('=====================================');
        console.log(`üìÖ Started at: ${new Date().toISOString()}`);
        console.log(`üåç Environment: ${process.env.NODE_ENV || 'development'}`);
        console.log(`üê≥ Docker Mode: ${this.isDockerEnvironment()}`);
        console.log('');
        const testSuites = [
            {
                name: 'Database Integration Tests',
                file: 'database-integration.test.ts',
                description: 'Tests database operations, performance, and data integrity'
            },
            {
                name: 'Data Validation Tests',
                file: 'data-validation.test.ts',
                description: 'Validates business rules, data consistency, and integrity'
            },
            {
                name: 'MCP Servers Integration Tests',
                file: 'mcp-servers-integration.test.ts',
                description: 'Tests MCP server implementations with real data'
            },
            {
                name: 'Docker Environment Tests',
                file: 'docker-environment.test.ts',
                description: 'Tests Docker-specific functionality and environment compatibility'
            }
        ];
        // Run each test suite
        for (const suite of testSuites){
            await this.runTestSuite(suite);
        }
        // Generate final report
        this.generateFinalReport();
    }
    /**
   * Run a specific test suite
   */ async runTestSuite(suite) {
        console.log(`üß™ Running: ${suite.name}`);
        console.log(`üìù Description: ${suite.description}`);
        console.log('');
        const startTime = Date.now();
        try {
            // Set test environment
            const testEnv = {
                ...process.env,
                NODE_ENV: 'test',
                // Use test database if available
                DATABASE_URL: process.env.TEST_DATABASE_URL || process.env.DATABASE_URL
            };
            // Run Jest for specific test file
            const jestCommand = `npx jest "${suite.file}" --verbose --testTimeout=300000 --runInBand`;
            console.log(`‚ö° Executing: ${jestCommand}`);
            (0, _child_process.execSync)(jestCommand, {
                stdio: 'inherit',
                cwd: _path.default.resolve(process.cwd()),
                env: testEnv
            });
            const duration = Date.now() - startTime;
            this.testResults.push({
                name: suite.name,
                status: 'PASSED',
                duration
            });
            console.log(`‚úÖ ${suite.name} completed successfully in ${duration}ms`);
            console.log('');
        } catch (error) {
            const duration = Date.now() - startTime;
            this.testResults.push({
                name: suite.name,
                status: 'FAILED',
                duration,
                error: error instanceof Error ? error.message : String(error)
            });
            console.error(`‚ùå ${suite.name} failed after ${duration}ms`);
            console.error(`Error: ${error instanceof Error ? error.message : String(error)}`);
            console.log('');
        // Continue with other tests but note the failure
        }
    }
    /**
   * Generate comprehensive test report
   */ generateFinalReport() {
        const totalDuration = Date.now() - this.startTime;
        const passedTests = this.testResults.filter((r)=>r.status === 'PASSED');
        const failedTests = this.testResults.filter((r)=>r.status === 'FAILED');
        const skippedTests = this.testResults.filter((r)=>r.status === 'SKIPPED');
        console.log('\nüìä MCP Integration Test Suite Report');
        console.log('====================================');
        console.log(`‚è±Ô∏è  Total Duration: ${(totalDuration / 1000).toFixed(2)}s`);
        console.log(`üìÖ Completed at: ${new Date().toISOString()}`);
        console.log('');
        console.log('üìà Test Results Summary:');
        console.log(`‚úÖ Passed: ${passedTests.length}`);
        console.log(`‚ùå Failed: ${failedTests.length}`);
        console.log(`‚è≠Ô∏è  Skipped: ${skippedTests.length}`);
        console.log(`üìä Total: ${this.testResults.length}`);
        console.log('');
        // Individual test results
        console.log('üìã Individual Test Results:');
        this.testResults.forEach((result, index)=>{
            const status = result.status === 'PASSED' ? '‚úÖ' : result.status === 'FAILED' ? '‚ùå' : '‚è≠Ô∏è';
            console.log(`${index + 1}. ${status} ${result.name}`);
            console.log(`   Duration: ${(result.duration / 1000).toFixed(2)}s`);
            if (result.error) {
                console.log(`   Error: ${result.error}`);
            }
            console.log('');
        });
        // Performance summary
        if (passedTests.length > 0) {
            const avgDuration = passedTests.reduce((sum, test)=>sum + test.duration, 0) / passedTests.length;
            const minDuration = Math.min(...passedTests.map((t)=>t.duration));
            const maxDuration = Math.max(...passedTests.map((t)=>t.duration));
            console.log('‚ö° Performance Summary:');
            console.log(`Average Duration: ${(avgDuration / 1000).toFixed(2)}s`);
            console.log(`Fastest Test: ${(minDuration / 1000).toFixed(2)}s`);
            console.log(`Slowest Test: ${(maxDuration / 1000).toFixed(2)}s`);
            console.log('');
        }
        // Environment information
        console.log('üåç Environment Information:');
        console.log(`Node.js Version: ${process.version}`);
        console.log(`Platform: ${process.platform}`);
        console.log(`Architecture: ${process.arch}`);
        console.log(`Docker Environment: ${this.isDockerEnvironment()}`);
        console.log(`Database URL: ${this.maskDatabaseUrl(process.env.DATABASE_URL || 'Not set')}`);
        console.log('');
        // Final status
        const overallStatus = failedTests.length === 0 ? 'PASSED' : 'FAILED';
        const statusIcon = overallStatus === 'PASSED' ? 'üéâ' : 'üí•';
        console.log(`${statusIcon} Overall Status: ${overallStatus}`);
        if (overallStatus === 'PASSED') {
            console.log('üéØ All MCP integration tests passed successfully!');
            console.log('‚úÖ System is ready for production deployment');
        } else {
            console.log('‚ö†Ô∏è  Some tests failed - please review the errors above');
            console.log('üîß Fix the issues before proceeding to production');
        }
        // Exit with appropriate code
        process.exit(failedTests.length === 0 ? 0 : 1);
    }
    /**
   * Check if running in Docker environment
   */ isDockerEnvironment() {
        return process.env.DOCKER_ENV === 'true' || process.env.DATABASE_URL?.includes('marketsage-db') || false;
    }
    /**
   * Mask sensitive information in database URL
   */ maskDatabaseUrl(url) {
        return url.replace(/\/\/.*@/, '//***:***@');
    }
    /**
   * Pre-flight checks before running tests
   */ async preflightChecks() {
        console.log('üîç Running pre-flight checks...');
        try {
            // Check if required dependencies are available
            (0, _child_process.execSync)('npx jest --version', {
                stdio: 'pipe'
            });
            console.log('‚úÖ Jest is available');
            // Check if TypeScript is available
            (0, _child_process.execSync)('npx tsc --version', {
                stdio: 'pipe'
            });
            console.log('‚úÖ TypeScript is available');
            // Check if Prisma is available
            (0, _child_process.execSync)('npx prisma --version', {
                stdio: 'pipe'
            });
            console.log('‚úÖ Prisma is available');
            // Check database connection
            if (process.env.DATABASE_URL) {
                console.log('‚úÖ Database URL is configured');
            } else {
                console.log('‚ö†Ô∏è  Database URL not configured - using default');
            }
            console.log('‚úÖ All pre-flight checks passed');
            console.log('');
            return true;
        } catch (error) {
            console.error('‚ùå Pre-flight checks failed:', error);
            return false;
        }
    }
}
/**
 * Main execution function
 */ async function main() {
    const runner = new IntegrationTestRunner();
    // Parse command line arguments
    const args = process.argv.slice(2);
    if (args.includes('--help') || args.includes('-h')) {
        console.log('MCP Integration Test Runner');
        console.log('Usage: npm run test:integration [options]');
        console.log('');
        console.log('Options:');
        console.log('  --help, -h     Show this help message');
        console.log('  --skip-checks  Skip pre-flight checks');
        console.log('');
        console.log('Environment Variables:');
        console.log('  DATABASE_URL        Database connection string');
        console.log('  TEST_DATABASE_URL   Test database connection string');
        console.log('  NODE_ENV           Environment (test, development, production)');
        console.log('  DOCKER_ENV         Set to "true" if running in Docker');
        return;
    }
    // Run pre-flight checks unless skipped
    if (!args.includes('--skip-checks')) {
        const checksPass = await runner.preflightChecks();
        if (!checksPass) {
            console.error('‚ùå Pre-flight checks failed. Aborting test run.');
            process.exit(1);
        }
    }
    // Run all tests
    await runner.runAll();
}
// Execute if this script is run directly
if (require.main === module) {
    main().catch((error)=>{
        console.error('üí• Test runner failed:', error);
        process.exit(1);
    });
}
const _default = IntegrationTestRunner;

//# sourceMappingURL=data:application/json;base64,