{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/__tests__/e2e/traffic-split-test.ts"],"sourcesContent":["\n\nimport { execSync, spawn, ChildProcess } from 'child_process';\nimport { DatabaseSeeder } from './database-seeder';\nimport path from 'path';\n\n/**\n * Traffic Split E2E Test Runner\n * Tests the new shared configuration system with 50% traffic split\n * between old and new configuration approaches\n */\n\ninterface TestResult {\n  configuration: 'old' | 'new';\n  testSuite: string;\n  passed: boolean;\n  duration: number;\n  errors?: string[];\n}\n\nclass TrafficSplitTestRunner {\n  private seeder: DatabaseSeeder;\n  private frontendProcess: ChildProcess | null = null;\n  private backendProcess: ChildProcess | null = null;\n  private results: TestResult[] = [];\n\n  constructor() {\n    this.seeder = new DatabaseSeeder();\n  }\n\n  async runTrafficSplitTests() {\n    console.log('üöÄ Starting MarketSage Traffic Split E2E Tests...\\n');\n    console.log('üìä Testing 50% traffic split between configurations\\n');\n\n    try {\n      // Step 1: Environment and config validation\n      await this.validateConfigurations();\n\n      // Step 2: Test with new shared configuration (50% traffic)\n      await this.testWithNewConfiguration();\n\n      // Step 3: Test with legacy configuration (50% traffic)\n      await this.testWithLegacyConfiguration();\n\n      // Step 4: Compare results and validate\n      await this.analyzeResults();\n\n      console.log('\\n‚úÖ Traffic split E2E tests completed successfully!');\n\n    } catch (error) {\n      console.error('\\n‚ùå Traffic split tests failed:', error);\n      process.exit(1);\n    } finally {\n      await this.cleanup();\n    }\n  }\n\n  private async validateConfigurations() {\n    console.log('üîç Validating configuration systems...\\n');\n\n    // Check if shared-config system is properly set up\n    const sharedConfigPath = path.join(process.cwd(), '../shared-config');\n    try {\n      execSync(`cd ${sharedConfigPath} && ./scripts/load-config.sh --service frontend --environment development`, { stdio: 'pipe' });\n      execSync(`cd ${sharedConfigPath} && ./scripts/load-config.sh --service backend --environment development`, { stdio: 'pipe' });\n      console.log('‚úÖ New shared configuration system validated');\n    } catch (error) {\n      throw new Error(`Shared configuration validation failed: ${error}`);\n    }\n\n    // Validate that old configuration still exists for comparison\n    const oldEnvExists = require('fs').existsSync('.env.backup') || require('fs').existsSync('.env.old');\n    if (!oldEnvExists) {\n      console.log('‚ö†Ô∏è  Legacy configuration backup not found, creating reference...');\n      // Create a backup for comparison purposes\n      execSync('cp .env .env.legacy-backup', { stdio: 'ignore' });\n    }\n\n    console.log('‚úÖ Configuration validation completed\\n');\n  }\n\n  private async testWithNewConfiguration() {\n    console.log('üÜï Testing with NEW shared configuration system (50% traffic)...\\n');\n\n    try {\n      // Generate fresh configuration using shared-config system\n      console.log('üìù Generating new configuration...');\n      const sharedConfigPath = path.join(process.cwd(), '../shared-config');\n      \n      execSync(`cd ${sharedConfigPath} && ./scripts/load-config.sh --service frontend --environment development`, { stdio: 'pipe' });\n      execSync(`cd ${sharedConfigPath} && ./scripts/load-config.sh --service backend --environment development`, { stdio: 'pipe' });\n      \n      console.log('‚úÖ New configuration generated');\n\n      // Verify configuration separation\n      await this.verifyConfigurationSeparation();\n\n      // Start services with new configuration\n      await this.startServicesWithNewConfig();\n\n      // Run test suites with 50% traffic allocation\n      const testSuites = [\n        'auth-dashboard.test.ts',\n        'campaign-management.test.ts', \n        'analytics-leadpulse.test.ts'\n      ];\n\n      for (const testSuite of testSuites) {\n        console.log(`üß™ Running ${testSuite} with new configuration...`);\n        const result = await this.runTestSuite(testSuite, 'new');\n        this.results.push(result);\n      }\n\n      console.log('‚úÖ New configuration tests completed\\n');\n\n    } catch (error) {\n      console.error('‚ùå New configuration tests failed:', error);\n      throw error;\n    } finally {\n      await this.stopServices();\n    }\n  }\n\n  private async testWithLegacyConfiguration() {\n    console.log('üîÑ Testing with LEGACY configuration (50% traffic)...\\n');\n\n    try {\n      // Restore legacy configuration for comparison\n      if (require('fs').existsSync('.env.legacy-backup')) {\n        execSync('cp .env.legacy-backup .env', { stdio: 'ignore' });\n        console.log('‚úÖ Legacy configuration restored');\n      }\n\n      // Start services with legacy configuration\n      await this.startServicesWithLegacyConfig();\n\n      // Run same test suites with remaining 50% traffic\n      const testSuites = [\n        'contact-management.test.ts',\n        'workflow-automation.test.ts',\n        'mcp-integration.test.ts'\n      ];\n\n      for (const testSuite of testSuites) {\n        console.log(`üß™ Running ${testSuite} with legacy configuration...`);\n        const result = await this.runTestSuite(testSuite, 'old');\n        this.results.push(result);\n      }\n\n      console.log('‚úÖ Legacy configuration tests completed\\n');\n\n    } catch (error) {\n      console.error('‚ùå Legacy configuration tests failed:', error);\n      throw error;\n    } finally {\n      await this.stopServices();\n    }\n  }\n\n  private async verifyConfigurationSeparation() {\n    console.log('üîí Verifying configuration separation...');\n\n    // Check that frontend doesn't have database access\n    const frontendEnvContent = require('fs').readFileSync('.env', 'utf8');\n    const hasDirectDatabaseAccess = /^DATABASE_URL=/m.test(frontendEnvContent);\n    \n    if (hasDirectDatabaseAccess) {\n      const hasApiOnlyMode = /NEXT_PUBLIC_USE_API_ONLY=true/.test(frontendEnvContent);\n      if (!hasApiOnlyMode) {\n        throw new Error('Frontend configuration violation: Has database access without API-only mode');\n      }\n      console.log('‚ö†Ô∏è  Frontend has DATABASE_URL but API-only mode is enabled (acceptable)');\n    } else {\n      console.log('‚úÖ Frontend properly configured without database access');\n    }\n\n    // Check that backend has database access\n    const backendEnvPath = '../marketsage-backend/.env';\n    if (require('fs').existsSync(backendEnvPath)) {\n      const backendEnvContent = require('fs').readFileSync(backendEnvPath, 'utf8');\n      const backendHasDatabase = /^DATABASE_URL=/m.test(backendEnvContent);\n      \n      if (!backendHasDatabase) {\n        throw new Error('Backend configuration violation: Missing database access');\n      }\n      console.log('‚úÖ Backend properly configured with database access');\n    }\n\n    console.log('‚úÖ Configuration separation verified');\n  }\n\n  private async startServicesWithNewConfig() {\n    console.log('üöÄ Starting services with new configuration...');\n    \n    // Start backend first\n    console.log('üì° Starting backend service...');\n    this.backendProcess = spawn('npm', ['run', 'start:dev'], {\n      cwd: '../marketsage-backend',\n      stdio: 'pipe'\n    });\n\n    // Wait for backend to be ready\n    await this.waitForService('http://localhost:3006/api/v2/health', 'Backend');\n\n    // Start frontend\n    console.log('üåê Starting frontend service...');\n    this.frontendProcess = spawn('npm', ['run', 'dev'], {\n      stdio: 'pipe'\n    });\n\n    // Wait for frontend to be ready\n    await this.waitForService('http://localhost:3000/api/health', 'Frontend');\n\n    console.log('‚úÖ Services started with new configuration');\n  }\n\n  private async startServicesWithLegacyConfig() {\n    console.log('üöÄ Starting services with legacy configuration...');\n    \n    // For legacy config, we assume monolithic approach\n    this.frontendProcess = spawn('npm', ['run', 'dev'], {\n      stdio: 'pipe'\n    });\n\n    // Wait for service to be ready\n    await this.waitForService('http://localhost:3000', 'Legacy Application');\n\n    console.log('‚úÖ Services started with legacy configuration');\n  }\n\n  private async waitForService(url: string, serviceName: string, timeout = 60000) {\n    const startTime = Date.now();\n    \n    while (Date.now() - startTime < timeout) {\n      try {\n        const response = await fetch(url);\n        if (response.ok) {\n          console.log(`‚úÖ ${serviceName} is ready`);\n          return;\n        }\n      } catch {\n        // Service not ready yet\n      }\n      \n      await new Promise(resolve => setTimeout(resolve, 2000));\n    }\n    \n    throw new Error(`${serviceName} failed to start within ${timeout}ms`);\n  }\n\n  private async runTestSuite(testSuite: string, configuration: 'old' | 'new'): Promise<TestResult> {\n    const startTime = Date.now();\n    \n    try {\n      // Configure Playwright for traffic split testing\n      const playwrightCmd = `npx playwright test ${testSuite} --project=chromium --timeout=30000`;\n      \n      console.log(`   Running: ${playwrightCmd}`);\n      execSync(playwrightCmd, { stdio: 'pipe' });\n      \n      const duration = Date.now() - startTime;\n      console.log(`   ‚úÖ ${testSuite} passed (${duration}ms)`);\n      \n      return {\n        configuration,\n        testSuite,\n        passed: true,\n        duration\n      };\n      \n    } catch (error) {\n      const duration = Date.now() - startTime;\n      console.log(`   ‚ùå ${testSuite} failed (${duration}ms)`);\n      \n      return {\n        configuration,\n        testSuite,\n        passed: false,\n        duration,\n        errors: [error.toString()]\n      };\n    }\n  }\n\n  private async analyzeResults() {\n    console.log('üìä Analyzing traffic split test results...\\n');\n\n    const newConfigResults = this.results.filter(r => r.configuration === 'new');\n    const oldConfigResults = this.results.filter(r => r.configuration === 'old');\n\n    // Calculate success rates\n    const newSuccessRate = (newConfigResults.filter(r => r.passed).length / newConfigResults.length) * 100;\n    const oldSuccessRate = (oldConfigResults.filter(r => r.passed).length / oldConfigResults.length) * 100;\n\n    // Calculate average response times\n    const newAvgTime = newConfigResults.reduce((sum, r) => sum + r.duration, 0) / newConfigResults.length;\n    const oldAvgTime = oldConfigResults.reduce((sum, r) => sum + r.duration, 0) / oldConfigResults.length;\n\n    console.log('üìà TRAFFIC SPLIT TEST RESULTS');\n    console.log('================================');\n    console.log(`üÜï NEW Configuration (50% traffic):`);\n    console.log(`   Success Rate: ${newSuccessRate.toFixed(1)}%`);\n    console.log(`   Average Duration: ${newAvgTime.toFixed(0)}ms`);\n    console.log(`   Tests Run: ${newConfigResults.length}`);\n    \n    console.log(`\\nüîÑ LEGACY Configuration (50% traffic):`);\n    console.log(`   Success Rate: ${oldSuccessRate.toFixed(1)}%`);\n    console.log(`   Average Duration: ${oldAvgTime.toFixed(0)}ms`);\n    console.log(`   Tests Run: ${oldConfigResults.length}`);\n\n    // Performance comparison\n    const performanceImprovement = ((oldAvgTime - newAvgTime) / oldAvgTime) * 100;\n    console.log(`\\nüöÄ PERFORMANCE COMPARISON:`);\n    if (performanceImprovement > 0) {\n      console.log(`   New config is ${performanceImprovement.toFixed(1)}% faster`);\n    } else {\n      console.log(`   Legacy config is ${Math.abs(performanceImprovement).toFixed(1)}% faster`);\n    }\n\n    // Reliability comparison\n    console.log(`\\nüîí RELIABILITY COMPARISON:`);\n    if (newSuccessRate >= oldSuccessRate) {\n      console.log(`   New config reliability: ${(newSuccessRate - oldSuccessRate).toFixed(1)}% better`);\n    } else {\n      console.log(`   Legacy config reliability: ${(oldSuccessRate - newSuccessRate).toFixed(1)}% better`);\n    }\n\n    // Final recommendation\n    console.log(`\\nüéØ RECOMMENDATION:`);\n    if (newSuccessRate >= 95 && newConfigResults.every(r => r.passed)) {\n      console.log('   ‚úÖ NEW shared configuration system is READY for production');\n      console.log('   ‚úÖ Configuration separation is working correctly');\n      console.log('   ‚úÖ All service boundaries are properly enforced');\n    } else {\n      console.log('   ‚ö†Ô∏è  NEW configuration needs review before production');\n      console.log('   üîç Check failed tests and configuration issues');\n    }\n\n    // Detailed results\n    console.log(`\\nüìã DETAILED RESULTS:`);\n    this.results.forEach(result => {\n      const status = result.passed ? '‚úÖ' : '‚ùå';\n      const config = result.configuration === 'new' ? 'üÜï' : 'üîÑ';\n      console.log(`   ${status} ${config} ${result.testSuite} (${result.duration}ms)`);\n      \n      if (result.errors) {\n        result.errors.forEach(error => {\n          console.log(`      Error: ${error.substring(0, 100)}...`);\n        });\n      }\n    });\n  }\n\n  private async stopServices() {\n    console.log('üõë Stopping services...');\n\n    if (this.frontendProcess) {\n      this.frontendProcess.kill('SIGTERM');\n      this.frontendProcess = null;\n    }\n\n    if (this.backendProcess) {\n      this.backendProcess.kill('SIGTERM');\n      this.backendProcess = null;\n    }\n\n    // Also kill any lingering processes\n    try {\n      execSync('pkill -f \"next dev\" || true', { stdio: 'ignore' });\n      execSync('pkill -f \"npm run dev\" || true', { stdio: 'ignore' });\n      execSync('pkill -f \"npm run start:dev\" || true', { stdio: 'ignore' });\n    } catch {\n      // Ignore errors in cleanup\n    }\n\n    console.log('‚úÖ Services stopped');\n  }\n\n  private async cleanup() {\n    console.log('üßπ Cleaning up traffic split tests...');\n\n    try {\n      await this.stopServices();\n      \n      // Restore original configuration\n      const sharedConfigPath = path.join(process.cwd(), '../shared-config');\n      execSync(`cd ${sharedConfigPath} && ./scripts/load-config.sh --service frontend --environment development`, { stdio: 'ignore' });\n      \n      // Clean up backup files\n      if (require('fs').existsSync('.env.legacy-backup')) {\n        execSync('rm .env.legacy-backup', { stdio: 'ignore' });\n      }\n\n      console.log('‚úÖ Cleanup completed');\n    } catch (error) {\n      console.error('‚ö†Ô∏è  Cleanup warning:', error);\n    }\n  }\n}\n\n// Command line interface\nif (require.main === module) {\n  const runner = new TrafficSplitTestRunner();\n  \n  // Handle process termination\n  process.on('SIGINT', async () => {\n    console.log('\\n‚ö†Ô∏è  Traffic split test interrupted');\n    await runner.cleanup();\n    process.exit(0);\n  });\n\n  process.on('SIGTERM', async () => {\n    console.log('\\n‚ö†Ô∏è  Traffic split test terminated');\n    await runner.cleanup();\n    process.exit(0);\n  });\n\n  // Run tests\n  runner.runTrafficSplitTests().catch((error) => {\n    console.error('Fatal error:', error);\n    process.exit(1);\n  });\n}\n\nexport { TrafficSplitTestRunner };"],"names":["TrafficSplitTestRunner","constructor","frontendProcess","backendProcess","results","seeder","DatabaseSeeder","runTrafficSplitTests","console","log","validateConfigurations","testWithNewConfiguration","testWithLegacyConfiguration","analyzeResults","error","process","exit","cleanup","sharedConfigPath","path","join","cwd","execSync","stdio","Error","oldEnvExists","require","existsSync","verifyConfigurationSeparation","startServicesWithNewConfig","testSuites","testSuite","result","runTestSuite","push","stopServices","startServicesWithLegacyConfig","frontendEnvContent","readFileSync","hasDirectDatabaseAccess","test","hasApiOnlyMode","backendEnvPath","backendEnvContent","backendHasDatabase","spawn","waitForService","url","serviceName","timeout","startTime","Date","now","response","fetch","ok","Promise","resolve","setTimeout","configuration","playwrightCmd","duration","passed","errors","toString","newConfigResults","filter","r","oldConfigResults","newSuccessRate","length","oldSuccessRate","newAvgTime","reduce","sum","oldAvgTime","toFixed","performanceImprovement","Math","abs","every","forEach","status","config","substring","kill","main","module","runner","on","catch"],"mappings":"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"}