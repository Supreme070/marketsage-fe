{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/mcp/servers/external-services-server.ts"],"sourcesContent":["/**\n * External Services MCP Server for MarketSage\n * \n * This server provides standardized access to external messaging services\n * including SMS, Email, and WhatsApp through the MCP protocol.\n */\n\nimport { z } from 'zod';\nimport { BaseMCPServer } from './base-mcp-server';\nimport { \n  type MCPAuthContext, \n  type MCPServerConfig,\n  SendMessageSchema,\n  SendMessageRequest,\n  type MessageResult,\n  MCPAuthorizationError,\n  MCPValidationError\n} from '../types/mcp-types';\n\nimport { defaultMCPConfig } from '../config/mcp-config';\nimport { logger } from '../../lib/logger';\n\n// Import existing service implementations\nimport { sendTrackedEmail } from '../../lib/email-service';\nimport { sendSMS, smsService } from '../../lib/sms-service';\nimport { sendWhatsAppMessage } from '../../lib/whatsapp-service';\nimport { prisma } from '../../lib/db/prisma';\n\nexport class ExternalServicesMCPServer extends BaseMCPServer {\n  constructor(config?: Partial<MCPServerConfig>) {\n    super({\n      ...defaultMCPConfig.servers.services,\n      ...config\n    });\n  }\n\n  /**\n   * List available external service resources\n   */\n  protected async listResources(authContext: MCPAuthContext): Promise<any[]> {\n    const resources = [\n      {\n        uri: \"services://email\",\n        name: \"Email Services\",\n        description: \"Access to email sending and template management\",\n        mimeType: \"application/json\"\n      },\n      {\n        uri: \"services://sms\",\n        name: \"SMS Services\", \n        description: \"Access to SMS sending and provider management\",\n        mimeType: \"application/json\"\n      },\n      {\n        uri: \"services://whatsapp\",\n        name: \"WhatsApp Services\",\n        description: \"Access to WhatsApp Business API messaging\",\n        mimeType: \"application/json\"\n      },\n      {\n        uri: \"services://templates\",\n        name: \"Message Templates\",\n        description: \"Access to message templates across all channels\",\n        mimeType: \"application/json\"\n      },\n      {\n        uri: \"services://providers\",\n        name: \"Service Providers\",\n        description: \"Access to external service provider configurations\",\n        mimeType: \"application/json\"\n      }\n    ];\n\n    // Filter resources based on permissions\n    if (!authContext.permissions.includes('*') && !authContext.permissions.includes('write:org')) {\n      // Users with limited permissions can only view templates and provider status\n      return resources.filter(r => r.uri.includes('templates') || r.uri.includes('providers'));\n    }\n\n    return resources;\n  }\n\n  /**\n   * Read external service resource\n   */\n  protected async readResource(uri: string, authContext: MCPAuthContext): Promise<any> {\n    const url = new URL(uri);\n    const path = url.pathname;\n    const searchParams = url.searchParams;\n\n    // Parse query parameters\n    const queryParams = Object.fromEntries(searchParams.entries());\n\n    switch (path) {\n      case '/email':\n        return await this.getEmailServiceInfo(queryParams, authContext);\n      case '/sms':\n        return await this.getSMSServiceInfo(queryParams, authContext);\n      case '/whatsapp':\n        return await this.getWhatsAppServiceInfo(queryParams, authContext);\n      case '/templates':\n        return await this.getMessageTemplates(queryParams, authContext);\n      case '/providers':\n        return await this.getProviderStatus(queryParams, authContext);\n      default:\n        throw new MCPValidationError(`Unknown resource path: ${path}`);\n    }\n  }\n\n  /**\n   * List available external service tools\n   */\n  protected async listTools(authContext: MCPAuthContext): Promise<any[]> {\n    const tools = [\n      {\n        name: \"send_email\",\n        description: \"Send an email message through configured email service\",\n        inputSchema: {\n          type: \"object\",\n          properties: {\n            to: {\n              type: \"string\",\n              format: \"email\",\n              description: \"Recipient email address\"\n            },\n            subject: {\n              type: \"string\",\n              description: \"Email subject line\"\n            },\n            content: {\n              type: \"string\", \n              description: \"Email content (HTML or text)\"\n            },\n            templateId: {\n              type: \"string\",\n              description: \"Optional template ID to use\"\n            },\n            personalization: {\n              type: \"object\",\n              description: \"Key-value pairs for template personalization\"\n            }\n          },\n          required: [\"to\", \"subject\", \"content\"]\n        }\n      },\n      {\n        name: \"send_sms\",\n        description: \"Send an SMS message through configured SMS provider\",\n        inputSchema: {\n          type: \"object\",\n          properties: {\n            to: {\n              type: \"string\",\n              pattern: \"^\\\\+[1-9]\\\\d{1,14}$\",\n              description: \"Recipient phone number in international format\"\n            },\n            content: {\n              type: \"string\",\n              maxLength: 160,\n              description: \"SMS message content (max 160 characters)\"\n            },\n            templateId: {\n              type: \"string\",\n              description: \"Optional SMS template ID\"\n            },\n            provider: {\n              type: \"string\",\n              enum: [\"africastalking\", \"twilio\", \"auto\"],\n              description: \"SMS provider to use\",\n              default: \"auto\"\n            }\n          },\n          required: [\"to\", \"content\"]\n        }\n      },\n      {\n        name: \"send_whatsapp\",\n        description: \"Send a WhatsApp message through WhatsApp Business API\",\n        inputSchema: {\n          type: \"object\",\n          properties: {\n            to: {\n              type: \"string\",\n              pattern: \"^\\\\+[1-9]\\\\d{1,14}$\",\n              description: \"Recipient WhatsApp number in international format\"\n            },\n            content: {\n              type: \"string\",\n              description: \"WhatsApp message content\"\n            },\n            templateId: {\n              type: \"string\",\n              description: \"Approved WhatsApp template ID\"\n            },\n            templateParams: {\n              type: \"array\",\n              items: { type: \"string\" },\n              description: \"Parameters for template placeholders\"\n            },\n            mediaUrl: {\n              type: \"string\",\n              format: \"uri\",\n              description: \"Optional media attachment URL\"\n            }\n          },\n          required: [\"to\", \"content\"]\n        }\n      },\n      {\n        name: \"get_delivery_status\",\n        description: \"Get delivery status for sent messages\",\n        inputSchema: {\n          type: \"object\",\n          properties: {\n            messageId: {\n              type: \"string\",\n              description: \"Message ID to check status for\"\n            },\n            channel: {\n              type: \"string\",\n              enum: [\"email\", \"sms\", \"whatsapp\"],\n              description: \"Message channel\"\n            }\n          },\n          required: [\"messageId\", \"channel\"]\n        }\n      },\n      {\n        name: \"get_provider_balance\",\n        description: \"Get remaining balance/credits for service providers\",\n        inputSchema: {\n          type: \"object\",\n          properties: {\n            provider: {\n              type: \"string\",\n              enum: [\"africastalking\", \"twilio\", \"email\", \"whatsapp\"],\n              description: \"Provider to check balance for\"\n            }\n          },\n          required: [\"provider\"]\n        }\n      },\n      {\n        name: \"validate_message\",\n        description: \"Validate message content and recipient before sending\",\n        inputSchema: {\n          type: \"object\",\n          properties: {\n            channel: {\n              type: \"string\",\n              enum: [\"email\", \"sms\", \"whatsapp\"],\n              description: \"Message channel\"\n            },\n            to: {\n              type: \"string\",\n              description: \"Recipient address/number\"\n            },\n            content: {\n              type: \"string\",\n              description: \"Message content to validate\"\n            }\n          },\n          required: [\"channel\", \"to\", \"content\"]\n        }\n      }\n    ];\n\n    // Filter tools based on permissions\n    if (!authContext.permissions.includes('*') && !authContext.permissions.includes('write:org')) {\n      // Users with limited permissions can only validate and check status\n      return tools.filter(t => ['get_delivery_status', 'get_provider_balance', 'validate_message'].includes(t.name));\n    }\n\n    return tools;\n  }\n\n  /**\n   * Execute external service tools\n   */\n  protected async callTool(name: string, args: any, authContext: MCPAuthContext): Promise<any> {\n    switch (name) {\n      case 'send_email':\n        return await this.sendEmailTool(args, authContext);\n      case 'send_sms':\n        return await this.sendSMSTool(args, authContext);\n      case 'send_whatsapp':\n        return await this.sendWhatsAppTool(args, authContext);\n      case 'get_delivery_status':\n        return await this.getDeliveryStatus(args, authContext);\n      case 'get_provider_balance':\n        return await this.getProviderBalance(args, authContext);\n      case 'validate_message':\n        return await this.validateMessage(args, authContext);\n      default:\n        throw new MCPValidationError(`Unknown tool: ${name}`);\n    }\n  }\n\n  /**\n   * Send email tool implementation\n   */\n  private async sendEmailTool(args: any, authContext: MCPAuthContext): Promise<any> {\n    const { to, subject, content, templateId, personalization = {} } = args;\n\n    try {\n      logger.info('MCP External Services: Sending email', { \n        to, \n        subject: subject.substring(0, 50),\n        templateId,\n        userId: authContext.userId \n      });\n\n      // Validate email address\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(to)) {\n        return {\n          content: [{\n            type: \"text\",\n            text: JSON.stringify({\n              success: false,\n              error: \"Invalid email address format\",\n              to\n            })\n          }],\n          isError: true\n        };\n      }\n\n      // Prepare email data\n      const emailData = {\n        to,\n        subject,\n        content,\n        templateId,\n        personalization,\n        organizationId: authContext.organizationId,\n        userId: authContext.userId\n      };\n\n      // Send email through real email service\n      const result = await this.sendEmailWithRealService(emailData);\n\n      return {\n        content: [{\n          type: \"text\",\n          text: JSON.stringify({\n            success: true,\n            data: result,\n            meta: {\n              timestamp: new Date().toISOString(),\n              channel: 'email',\n              provider: result.provider || 'unknown'\n            }\n          })\n        }]\n      };\n\n    } catch (error) {\n      logger.error('MCP External Services: Email sending failed', error);\n      \n      return {\n        content: [{\n          type: \"text\",\n          text: JSON.stringify({\n            success: false,\n            error: \"Failed to send email\",\n            details: error instanceof Error ? error.message : 'Unknown error'\n          })\n        }],\n        isError: true\n      };\n    }\n  }\n\n  /**\n   * Send SMS tool implementation\n   */\n  private async sendSMSTool(args: any, authContext: MCPAuthContext): Promise<any> {\n    const { to, content, templateId, provider = 'auto' } = args;\n\n    try {\n      logger.info('MCP External Services: Sending SMS', { \n        to, \n        contentLength: content.length,\n        provider,\n        userId: authContext.userId \n      });\n\n      // Validate phone number format\n      const phoneRegex = /^\\+[1-9]\\d{1,14}$/;\n      if (!phoneRegex.test(to)) {\n        return {\n          content: [{\n            type: \"text\",\n            text: JSON.stringify({\n              success: false,\n              error: \"Invalid phone number format. Use international format (+1234567890)\",\n              to\n            })\n          }],\n          isError: true\n        };\n      }\n\n      // Validate content length\n      if (content.length > 160) {\n        return {\n          content: [{\n            type: \"text\",\n            text: JSON.stringify({\n              success: false,\n              error: \"SMS content exceeds 160 character limit\",\n              contentLength: content.length,\n              maxLength: 160\n            })\n          }],\n          isError: true\n        };\n      }\n\n      // Prepare SMS data\n      const smsData = {\n        to,\n        content,\n        templateId,\n        provider,\n        organizationId: authContext.organizationId,\n        userId: authContext.userId\n      };\n\n      // Send SMS through real SMS service\n      const result = await this.sendSMSWithRealService(smsData);\n\n      return {\n        content: [{\n          type: \"text\",\n          text: JSON.stringify({\n            success: true,\n            data: result,\n            meta: {\n              timestamp: new Date().toISOString(),\n              channel: 'sms',\n              provider: result.provider || provider,\n              cost: result.cost || 0\n            }\n          })\n        }]\n      };\n\n    } catch (error) {\n      logger.error('MCP External Services: SMS sending failed', error);\n      \n      return {\n        content: [{\n          type: \"text\",\n          text: JSON.stringify({\n            success: false,\n            error: \"Failed to send SMS\",\n            details: error instanceof Error ? error.message : 'Unknown error'\n          })\n        }],\n        isError: true\n      };\n    }\n  }\n\n  /**\n   * Send WhatsApp tool implementation\n   */\n  private async sendWhatsAppTool(args: any, authContext: MCPAuthContext): Promise<any> {\n    const { to, content, templateId, templateParams = [], mediaUrl } = args;\n\n    try {\n      logger.info('MCP External Services: Sending WhatsApp', { \n        to, \n        contentLength: content.length,\n        templateId,\n        hasMedia: !!mediaUrl,\n        userId: authContext.userId \n      });\n\n      // Validate phone number format\n      const phoneRegex = /^\\+[1-9]\\d{1,14}$/;\n      if (!phoneRegex.test(to)) {\n        return {\n          content: [{\n            type: \"text\",\n            text: JSON.stringify({\n              success: false,\n              error: \"Invalid WhatsApp number format. Use international format (+1234567890)\",\n              to\n            })\n          }],\n          isError: true\n        };\n      }\n\n      // Prepare WhatsApp data\n      const whatsappData = {\n        to,\n        content,\n        templateId,\n        templateParams,\n        mediaUrl,\n        organizationId: authContext.organizationId,\n        userId: authContext.userId\n      };\n\n      // Send WhatsApp through real WhatsApp service\n      const result = await this.sendWhatsAppWithRealService(whatsappData);\n\n      return {\n        content: [{\n          type: \"text\",\n          text: JSON.stringify({\n            success: true,\n            data: result,\n            meta: {\n              timestamp: new Date().toISOString(),\n              channel: 'whatsapp',\n              provider: 'whatsapp_business',\n              templateUsed: !!templateId\n            }\n          })\n        }]\n      };\n\n    } catch (error) {\n      logger.error('MCP External Services: WhatsApp sending failed', error);\n      \n      return {\n        content: [{\n          type: \"text\",\n          text: JSON.stringify({\n            success: false,\n            error: \"Failed to send WhatsApp message\",\n            details: error instanceof Error ? error.message : 'Unknown error'\n          })\n        }],\n        isError: true\n      };\n    }\n  }\n\n  /**\n   * Get delivery status tool\n   */\n  private async getDeliveryStatus(args: any, authContext: MCPAuthContext): Promise<any> {\n    const { messageId, channel } = args;\n\n    try {\n      // Placeholder implementation - would integrate with actual tracking\n      const status = {\n        messageId,\n        channel,\n        status: 'delivered',\n        timestamp: new Date().toISOString(),\n        deliveredAt: new Date(Date.now() - 5 * 60 * 1000).toISOString(), // 5 minutes ago\n        attempts: 1,\n        provider: channel === 'sms' ? 'africastalking' : channel === 'email' ? 'smtp' : 'whatsapp_business'\n      };\n\n      return {\n        content: [{\n          type: \"text\",\n          text: JSON.stringify({\n            success: true,\n            data: status,\n            meta: {\n              timestamp: new Date().toISOString(),\n              fallbackUsed: true\n            }\n          })\n        }]\n      };\n\n    } catch (error) {\n      return {\n        content: [{\n          type: \"text\",\n          text: JSON.stringify({\n            success: false,\n            error: \"Failed to get delivery status\",\n            details: error instanceof Error ? error.message : 'Unknown error'\n          })\n        }],\n        isError: true\n      };\n    }\n  }\n\n  /**\n   * Get provider balance tool\n   */\n  private async getProviderBalance(args: any, authContext: MCPAuthContext): Promise<any> {\n    const { provider } = args;\n\n    try {\n      // Placeholder implementation - would integrate with actual provider APIs\n      const balances = {\n        africastalking: { balance: 1250.50, currency: 'USD', credits: 2501 },\n        twilio: { balance: 890.75, currency: 'USD', credits: 1781 },\n        email: { balance: 'unlimited', currency: 'N/A', credits: 'unlimited' },\n        whatsapp: { balance: 450.25, currency: 'USD', credits: 900 }\n      };\n\n      const balance = balances[provider as keyof typeof balances] || {\n        balance: 0,\n        currency: 'USD',\n        credits: 0,\n        error: 'Provider not found'\n      };\n\n      return {\n        content: [{\n          type: \"text\",\n          text: JSON.stringify({\n            success: true,\n            data: {\n              provider,\n              ...balance,\n              lastUpdated: new Date().toISOString()\n            },\n            meta: {\n              timestamp: new Date().toISOString(),\n              fallbackUsed: true\n            }\n          })\n        }]\n      };\n\n    } catch (error) {\n      return {\n        content: [{\n          type: \"text\",\n          text: JSON.stringify({\n            success: false,\n            error: \"Failed to get provider balance\",\n            details: error instanceof Error ? error.message : 'Unknown error'\n          })\n        }],\n        isError: true\n      };\n    }\n  }\n\n  /**\n   * Validate message tool\n   */\n  private async validateMessage(args: any, authContext: MCPAuthContext): Promise<any> {\n    const { channel, to, content } = args;\n\n    try {\n      const validation = {\n        valid: true,\n        errors: [] as string[],\n        warnings: [] as string[],\n        recommendations: [] as string[]\n      };\n\n      // Validate based on channel\n      switch (channel) {\n        case 'email':\n          const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n          if (!emailRegex.test(to)) {\n            validation.valid = false;\n            validation.errors.push('Invalid email address format');\n          }\n          if (content.length > 100000) {\n            validation.warnings.push('Email content is very large (>100KB)');\n          }\n          break;\n\n        case 'sms':\n          const phoneRegex = /^\\+[1-9]\\d{1,14}$/;\n          if (!phoneRegex.test(to)) {\n            validation.valid = false;\n            validation.errors.push('Invalid phone number format. Use international format (+1234567890)');\n          }\n          if (content.length > 160) {\n            validation.valid = false;\n            validation.errors.push(`SMS content exceeds 160 characters (${content.length} characters)`);\n          }\n          if (content.length > 70) {\n            validation.warnings.push('SMS content is approaching character limit');\n          }\n          break;\n\n        case 'whatsapp':\n          const whatsappRegex = /^\\+[1-9]\\d{1,14}$/;\n          if (!whatsappRegex.test(to)) {\n            validation.valid = false;\n            validation.errors.push('Invalid WhatsApp number format. Use international format (+1234567890)');\n          }\n          if (content.length > 4096) {\n            validation.warnings.push('WhatsApp message is very long (>4KB)');\n          }\n          break;\n\n        default:\n          validation.valid = false;\n          validation.errors.push(`Unsupported channel: ${channel}`);\n      }\n\n      // General content validation\n      if (content.trim().length === 0) {\n        validation.valid = false;\n        validation.errors.push('Message content cannot be empty');\n      }\n\n      // Add recommendations\n      if (validation.valid) {\n        validation.recommendations.push('Message is valid and ready to send');\n        if (channel === 'sms' && content.length < 100) {\n          validation.recommendations.push('Consider adding more context to your SMS message');\n        }\n      }\n\n      return {\n        content: [{\n          type: \"text\",\n          text: JSON.stringify({\n            success: true,\n            data: {\n              channel,\n              to,\n              contentLength: content.length,\n              validation\n            },\n            meta: {\n              timestamp: new Date().toISOString()\n            }\n          })\n        }]\n      };\n\n    } catch (error) {\n      return {\n        content: [{\n          type: \"text\",\n          text: JSON.stringify({\n            success: false,\n            error: \"Failed to validate message\",\n            details: error instanceof Error ? error.message : 'Unknown error'\n          })\n        }],\n        isError: true\n      };\n    }\n  }\n\n  /**\n   * Real implementations for external services\n   */\n  private async sendEmailWithRealService(emailData: any): Promise<MessageResult> {\n    try {\n      const startTime = Date.now();\n      \n      // Prepare email options for the real service\n      const emailOptions = {\n        to: emailData.to,\n        from: process.env.EMAIL_FROM || 'noreply@marketsage.ai',\n        subject: emailData.subject,\n        html: emailData.content,\n        text: emailData.content.replace(/<[^>]*>/g, ''), // Strip HTML for text version\n        metadata: {\n          organizationId: emailData.organizationId,\n          userId: emailData.userId,\n          templateId: emailData.templateId,\n          source: 'mcp-external-services'\n        }\n      };\n\n      // Find or create contact for email tracking\n      let contact = await prisma.contact.findFirst({\n        where: {\n          email: emailData.to,\n          organizationId: emailData.organizationId\n        }\n      });\n\n      if (!contact) {\n        // Create a temporary contact for tracking\n        contact = await prisma.contact.create({\n          data: {\n            email: emailData.to,\n            organizationId: emailData.organizationId,\n            source: 'MCP',\n            firstName: '', // Will be extracted from email if possible\n            lastName: ''\n          }\n        });\n      }\n\n      // Send through real email service with tracking\n      const result = await sendTrackedEmail(\n        contact,\n        null, // No campaign ID for MCP-sent emails\n        {\n          subject: emailData.subject,\n          html: emailData.content,\n          text: emailData.content.replace(/<[^>]*>/g, ''), // Strip HTML\n          templateId: emailData.templateId,\n          personalization: emailData.personalization\n        }\n      );\n      \n      const duration = Date.now() - startTime;\n\n      // Log the email send attempt\n      try {\n        await prisma.messagingUsage.create({\n          data: {\n            organizationId: emailData.organizationId,\n            channel: 'EMAIL',\n            recipient: emailData.to,\n            status: result.success ? 'SENT' : 'FAILED',\n            cost: 0.01, // Standard email cost\n            metadata: {\n              provider: result.provider,\n              messageId: result.messageId,\n              subject: emailData.subject,\n              duration,\n              source: 'MCP'\n            },\n            userId: emailData.userId\n          }\n        });\n      } catch (dbError) {\n        logger.warn('Failed to log email usage to database', { error: dbError });\n      }\n\n      return {\n        id: result.messageId || `email_${Date.now()}`,\n        status: result.success ? 'SENT' : 'FAILED',\n        provider: result.provider,\n        cost: 0.01,\n        timestamp: new Date().toISOString(),\n        error: result.error?.message\n      };\n    } catch (error) {\n      logger.error('Failed to send email via MCP', { error, emailData });\n      return {\n        id: `email_error_${Date.now()}`,\n        status: 'FAILED',\n        provider: 'smtp',\n        cost: 0,\n        timestamp: new Date().toISOString(),\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  private async sendSMSWithRealService(smsData: any): Promise<MessageResult> {\n    try {\n      const startTime = Date.now();\n      \n      // Send SMS through real SMS service\n      const result = await sendSMS({\n        to: smsData.to,\n        message: smsData.content,\n        provider: smsData.provider === 'auto' ? undefined : smsData.provider,\n        organizationId: smsData.organizationId\n      });\n      \n      const duration = Date.now() - startTime;\n\n      // Log the SMS send attempt\n      try {\n        await prisma.messagingUsage.create({\n          data: {\n            organizationId: smsData.organizationId,\n            channel: 'SMS',\n            recipient: smsData.to,\n            status: result.success ? 'SENT' : 'FAILED',\n            cost: result.cost || 0.05, // Use actual cost from provider\n            metadata: {\n              provider: result.provider,\n              messageId: result.id,\n              message: smsData.content.substring(0, 50),\n              duration,\n              source: 'MCP'\n            },\n            userId: smsData.userId\n          }\n        });\n      } catch (dbError) {\n        logger.warn('Failed to log SMS usage to database', { error: dbError });\n      }\n\n      return {\n        id: result.id || `sms_${Date.now()}`,\n        status: result.success ? 'SENT' : 'FAILED',\n        provider: result.provider || 'unknown',\n        cost: result.cost || 0.05,\n        timestamp: new Date().toISOString(),\n        error: result.error?.message\n      };\n    } catch (error) {\n      logger.error('Failed to send SMS via MCP', { error, smsData });\n      return {\n        id: `sms_error_${Date.now()}`,\n        status: 'FAILED',\n        provider: smsData.provider || 'unknown',\n        cost: 0,\n        timestamp: new Date().toISOString(),\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  private async sendWhatsAppWithRealService(whatsappData: any): Promise<MessageResult> {\n    try {\n      const startTime = Date.now();\n      \n      // Prepare WhatsApp message data\n      const messageData: any = {\n        to: whatsappData.to,\n        type: 'text',\n        text: {\n          body: whatsappData.content\n        }\n      };\n\n      // If template is specified, use template format\n      if (whatsappData.templateId) {\n        messageData.type = 'template';\n        messageData.template = {\n          name: whatsappData.templateId,\n          language: { code: 'en' },\n          components: whatsappData.templateParams ? [\n            {\n              type: 'body',\n              parameters: whatsappData.templateParams.map((param: string) => ({\n                type: 'text',\n                text: param\n              }))\n            }\n          ] : []\n        };\n        delete messageData.text;\n      }\n\n      // Send through real WhatsApp service\n      const result = await sendWhatsAppMessage(whatsappData.to, messageData);\n      \n      const duration = Date.now() - startTime;\n\n      // Log the WhatsApp send attempt\n      try {\n        await prisma.messagingUsage.create({\n          data: {\n            organizationId: whatsappData.organizationId,\n            channel: 'WHATSAPP',\n            recipient: whatsappData.to,\n            status: result.success ? 'SENT' : 'FAILED',\n            cost: 0.02, // Standard WhatsApp cost\n            metadata: {\n              provider: 'whatsapp_business',\n              messageId: result.messageId,\n              templateId: whatsappData.templateId,\n              message: whatsappData.content.substring(0, 50),\n              duration,\n              source: 'MCP'\n            },\n            userId: whatsappData.userId\n          }\n        });\n      } catch (dbError) {\n        logger.warn('Failed to log WhatsApp usage to database', { error: dbError });\n      }\n\n      return {\n        id: result.messageId || `whatsapp_${Date.now()}`,\n        status: result.success ? 'SENT' : 'FAILED',\n        provider: 'whatsapp_business',\n        cost: 0.02,\n        timestamp: new Date().toISOString(),\n        error: result.error?.message\n      };\n    } catch (error) {\n      logger.error('Failed to send WhatsApp message via MCP', { error, whatsappData });\n      return {\n        id: `whatsapp_error_${Date.now()}`,\n        status: 'FAILED',\n        provider: 'whatsapp_business',\n        cost: 0,\n        timestamp: new Date().toISOString(),\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Resource implementations\n   */\n  private async getEmailServiceInfo(params: any, authContext: MCPAuthContext): Promise<any> {\n    try {\n      const startTime = Date.now();\n\n      // Get email usage statistics for the organization\n      const last30Days = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);\n      const emailUsage = await prisma.messagingUsage.aggregate({\n        where: {\n          organizationId: authContext.organizationId,\n          channel: 'EMAIL',\n          createdAt: { gte: last30Days }\n        },\n        _count: { id: true },\n        _sum: { cost: true }\n      });\n\n      // Get email templates count\n      const templatesCount = await prisma.emailTemplate.count({\n        where: {\n          organizationId: authContext.organizationId\n        }\n      });\n\n      // Get today's email count\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      const todayEmails = await prisma.messagingUsage.count({\n        where: {\n          organizationId: authContext.organizationId,\n          channel: 'EMAIL',\n          createdAt: { gte: today }\n        }\n      });\n\n      // Check provider configuration\n      const emailProvider = process.env.EMAIL_PROVIDER || 'smtp';\n      const emailConfigured = !!(process.env.SMTP_HOST || process.env.SENDGRID_API_KEY || process.env.RESEND_API_KEY);\n\n      const duration = Date.now() - startTime;\n\n      // Log resource access\n      await this.logMCPResourceAccess(\n        authContext,\n        'services://email',\n        'READ',\n        'success',\n        { duration, dataSize: 1 }\n      );\n\n      return {\n        uri: \"services://email\",\n        mimeType: \"application/json\",\n        text: JSON.stringify({\n          service: 'email',\n          status: emailConfigured ? 'active' : 'inactive',\n          provider: emailProvider,\n          configuration: {\n            isConfigured: emailConfigured,\n            fromAddress: process.env.EMAIL_FROM || 'noreply@marketsage.ai',\n            replyToAddress: process.env.EMAIL_REPLY_TO\n          },\n          features: ['templates', 'personalization', 'tracking', 'attachments', 'delivery_reports'],\n          limits: {\n            dailyLimit: 10000,\n            rateLimit: '100/minute',\n            todayUsed: todayEmails,\n            dailyRemaining: Math.max(0, 10000 - todayEmails)\n          },\n          statistics: {\n            last30Days: {\n              sent: emailUsage._count.id || 0,\n              totalCost: emailUsage._sum.cost || 0,\n              averageCost: emailUsage._count.id > 0 ? (emailUsage._sum.cost || 0) / emailUsage._count.id : 0\n            },\n            templatesAvailable: templatesCount\n          },\n          meta: {\n            timestamp: new Date().toISOString(),\n            duration,\n            source: 'DATABASE'\n          }\n        })\n      };\n    } catch (error) {\n      await this.logMCPResourceAccess(\n        authContext,\n        'services://email',\n        'READ',\n        'failure',\n        { errorMessage: error instanceof Error ? error.message : 'Unknown error' }\n      );\n\n      return {\n        uri: \"services://email\",\n        mimeType: \"application/json\",\n        text: JSON.stringify({\n          service: 'email',\n          status: 'error',\n          error: 'Failed to retrieve email service information',\n          details: error instanceof Error ? error.message : 'Unknown error'\n        })\n      };\n    }\n  }\n\n  private async getSMSServiceInfo(params: any, authContext: MCPAuthContext): Promise<any> {\n    try {\n      const startTime = Date.now();\n\n      // Get SMS usage statistics for the organization\n      const last30Days = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);\n      const smsUsage = await prisma.messagingUsage.aggregate({\n        where: {\n          organizationId: authContext.organizationId,\n          channel: 'SMS',\n          createdAt: { gte: last30Days }\n        },\n        _count: { id: true },\n        _sum: { cost: true }\n      });\n\n      // Get SMS providers configuration\n      const smsProviders = await prisma.sMSProvider.findMany({\n        where: {\n          organizationId: authContext.organizationId,\n          isActive: true\n        },\n        select: {\n          name: true,\n          providerType: true,\n          isActive: true,\n          balance: true,\n          lastUsed: true\n        }\n      });\n\n      // Get today's SMS count\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      const todaySMS = await prisma.messagingUsage.count({\n        where: {\n          organizationId: authContext.organizationId,\n          channel: 'SMS',\n          createdAt: { gte: today }\n        }\n      });\n\n      // Check which providers are configured\n      const availableProviders = [];\n      if (process.env.AFRICASTALKING_USERNAME && process.env.AFRICASTALKING_API_KEY) {\n        availableProviders.push('africastalking');\n      }\n      if (process.env.TWILIO_ACCOUNT_SID && process.env.TWILIO_AUTH_TOKEN) {\n        availableProviders.push('twilio');\n      }\n\n      const duration = Date.now() - startTime;\n\n      // Log resource access\n      await this.logMCPResourceAccess(\n        authContext,\n        'services://sms',\n        'READ',\n        'success',\n        { duration, dataSize: smsProviders.length }\n      );\n\n      return {\n        uri: \"services://sms\",\n        mimeType: \"application/json\",\n        text: JSON.stringify({\n          service: 'sms',\n          status: availableProviders.length > 0 ? 'active' : 'inactive',\n          providers: availableProviders,\n          configuration: {\n            configuredProviders: smsProviders.map(p => ({\n              name: p.name,\n              type: p.providerType,\n              isActive: p.isActive,\n              balance: p.balance,\n              lastUsed: p.lastUsed?.toISOString()\n            })),\n            defaultProvider: process.env.SMS_PROVIDER || 'auto'\n          },\n          features: ['delivery_reports', 'sender_id', 'scheduling', 'auto_failover'],\n          limits: {\n            dailyLimit: 5000,\n            rateLimit: '50/minute',\n            todayUsed: todaySMS,\n            dailyRemaining: Math.max(0, 5000 - todaySMS)\n          },\n          statistics: {\n            last30Days: {\n              sent: smsUsage._count.id || 0,\n              totalCost: smsUsage._sum.cost || 0,\n              averageCost: smsUsage._count.id > 0 ? (smsUsage._sum.cost || 0) / smsUsage._count.id : 0\n            }\n          },\n          meta: {\n            timestamp: new Date().toISOString(),\n            duration,\n            source: 'DATABASE'\n          }\n        })\n      };\n    } catch (error) {\n      await this.logMCPResourceAccess(\n        authContext,\n        'services://sms',\n        'READ',\n        'failure',\n        { errorMessage: error instanceof Error ? error.message : 'Unknown error' }\n      );\n\n      return {\n        uri: \"services://sms\",\n        mimeType: \"application/json\",\n        text: JSON.stringify({\n          service: 'sms',\n          status: 'error',\n          error: 'Failed to retrieve SMS service information',\n          details: error instanceof Error ? error.message : 'Unknown error'\n        })\n      };\n    }\n  }\n\n  private async getWhatsAppServiceInfo(params: any, authContext: MCPAuthContext): Promise<any> {\n    try {\n      const startTime = Date.now();\n\n      // Get WhatsApp usage statistics for the organization\n      const last30Days = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);\n      const whatsappUsage = await prisma.messagingUsage.aggregate({\n        where: {\n          organizationId: authContext.organizationId,\n          channel: 'WHATSAPP',\n          createdAt: { gte: last30Days }\n        },\n        _count: { id: true },\n        _sum: { cost: true }\n      });\n\n      // Get WhatsApp templates count\n      const templatesCount = await prisma.whatsAppTemplate.count({\n        where: {\n          organizationId: authContext.organizationId\n        }\n      });\n\n      // Get today's WhatsApp message count\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      const todayWhatsApp = await prisma.messagingUsage.count({\n        where: {\n          organizationId: authContext.organizationId,\n          channel: 'WHATSAPP',\n          createdAt: { gte: today }\n        }\n      });\n\n      // Check WhatsApp Business API configuration\n      const whatsappConfigured = !!(\n        process.env.WHATSAPP_PHONE_NUMBER_ID && \n        process.env.WHATSAPP_ACCESS_TOKEN &&\n        process.env.WHATSAPP_WEBHOOK_VERIFY_TOKEN\n      );\n\n      // Get approved templates\n      const approvedTemplates = await prisma.whatsAppTemplate.findMany({\n        where: {\n          organizationId: authContext.organizationId,\n          status: 'APPROVED'\n        },\n        select: {\n          name: true,\n          category: true,\n          language: true,\n          status: true\n        }\n      });\n\n      const duration = Date.now() - startTime;\n\n      // Log resource access\n      await this.logMCPResourceAccess(\n        authContext,\n        'services://whatsapp',\n        'READ',\n        'success',\n        { duration, dataSize: templatesCount }\n      );\n\n      return {\n        uri: \"services://whatsapp\",\n        mimeType: \"application/json\",\n        text: JSON.stringify({\n          service: 'whatsapp',\n          status: whatsappConfigured ? 'active' : 'inactive',\n          provider: 'whatsapp_business',\n          configuration: {\n            isConfigured: whatsappConfigured,\n            phoneNumberId: process.env.WHATSAPP_PHONE_NUMBER_ID ? '***masked***' : null,\n            businessAccountId: process.env.WHATSAPP_BUSINESS_ACCOUNT_ID ? '***masked***' : null,\n            webhookConfigured: !!process.env.WHATSAPP_WEBHOOK_VERIFY_TOKEN\n          },\n          features: ['templates', 'media', 'delivery_reports', 'read_receipts', 'interactive_messages'],\n          limits: {\n            dailyLimit: 1000,\n            rateLimit: '20/minute',\n            todayUsed: todayWhatsApp,\n            dailyRemaining: Math.max(0, 1000 - todayWhatsApp)\n          },\n          templates: {\n            total: templatesCount,\n            approved: approvedTemplates.length,\n            approved_templates: approvedTemplates.map(t => ({\n              name: t.name,\n              category: t.category,\n              language: t.language,\n              status: t.status\n            }))\n          },\n          statistics: {\n            last30Days: {\n              sent: whatsappUsage._count.id || 0,\n              totalCost: whatsappUsage._sum.cost || 0,\n              averageCost: whatsappUsage._count.id > 0 ? (whatsappUsage._sum.cost || 0) / whatsappUsage._count.id : 0\n            }\n          },\n          meta: {\n            timestamp: new Date().toISOString(),\n            duration,\n            source: 'DATABASE'\n          }\n        })\n      };\n    } catch (error) {\n      await this.logMCPResourceAccess(\n        authContext,\n        'services://whatsapp',\n        'READ',\n        'failure',\n        { errorMessage: error instanceof Error ? error.message : 'Unknown error' }\n      );\n\n      return {\n        uri: \"services://whatsapp\",\n        mimeType: \"application/json\",\n        text: JSON.stringify({\n          service: 'whatsapp',\n          status: 'error',\n          error: 'Failed to retrieve WhatsApp service information',\n          details: error instanceof Error ? error.message : 'Unknown error'\n        })\n      };\n    }\n  }\n\n  private async getMessageTemplates(params: any, authContext: MCPAuthContext): Promise<any> {\n    return {\n      uri: \"services://templates\",\n      mimeType: \"application/json\",\n      text: JSON.stringify({\n        message: \"Message templates functionality coming soon\",\n        fallbackUsed: true\n      })\n    };\n  }\n\n  private async getProviderStatus(params: any, authContext: MCPAuthContext): Promise<any> {\n    return {\n      uri: \"services://providers\",\n      mimeType: \"application/json\",\n      text: JSON.stringify({\n        message: \"Provider status functionality coming soon\",\n        fallbackUsed: true\n      })\n    };\n  }\n}"],"names":["ExternalServicesMCPServer","BaseMCPServer","constructor","config","defaultMCPConfig","servers","services","listResources","authContext","resources","uri","name","description","mimeType","permissions","includes","filter","r","readResource","url","URL","path","pathname","searchParams","queryParams","Object","fromEntries","entries","getEmailServiceInfo","getSMSServiceInfo","getWhatsAppServiceInfo","getMessageTemplates","getProviderStatus","MCPValidationError","listTools","tools","inputSchema","type","properties","to","format","subject","content","templateId","personalization","required","pattern","maxLength","provider","enum","default","templateParams","items","mediaUrl","messageId","channel","t","callTool","args","sendEmailTool","sendSMSTool","sendWhatsAppTool","getDeliveryStatus","getProviderBalance","validateMessage","logger","info","substring","userId","emailRegex","test","text","JSON","stringify","success","error","isError","emailData","organizationId","result","sendEmailWithRealService","data","meta","timestamp","Date","toISOString","details","Error","message","contentLength","length","phoneRegex","smsData","sendSMSWithRealService","cost","hasMedia","whatsappData","sendWhatsAppWithRealService","templateUsed","status","deliveredAt","now","attempts","fallbackUsed","balances","africastalking","balance","currency","credits","twilio","email","whatsapp","lastUpdated","validation","valid","errors","warnings","recommendations","push","whatsappRegex","trim","startTime","emailOptions","from","process","env","EMAIL_FROM","html","replace","metadata","source","contact","prisma","findFirst","where","create","firstName","lastName","sendTrackedEmail","duration","messagingUsage","recipient","dbError","warn","id","sendSMS","undefined","messageData","body","template","language","code","components","parameters","map","param","sendWhatsAppMessage","params","last30Days","emailUsage","aggregate","createdAt","gte","_count","_sum","templatesCount","emailTemplate","count","today","setHours","todayEmails","emailProvider","EMAIL_PROVIDER","emailConfigured","SMTP_HOST","SENDGRID_API_KEY","RESEND_API_KEY","logMCPResourceAccess","dataSize","service","configuration","isConfigured","fromAddress","replyToAddress","EMAIL_REPLY_TO","features","limits","dailyLimit","rateLimit","todayUsed","dailyRemaining","Math","max","statistics","sent","totalCost","averageCost","templatesAvailable","errorMessage","smsUsage","smsProviders","sMSProvider","findMany","isActive","select","providerType","lastUsed","todaySMS","availableProviders","AFRICASTALKING_USERNAME","AFRICASTALKING_API_KEY","TWILIO_ACCOUNT_SID","TWILIO_AUTH_TOKEN","providers","configuredProviders","p","defaultProvider","SMS_PROVIDER","whatsappUsage","whatsAppTemplate","todayWhatsApp","whatsappConfigured","WHATSAPP_PHONE_NUMBER_ID","WHATSAPP_ACCESS_TOKEN","WHATSAPP_WEBHOOK_VERIFY_TOKEN","approvedTemplates","category","phoneNumberId","businessAccountId","WHATSAPP_BUSINESS_ACCOUNT_ID","webhookConfigured","templates","total","approved","approved_templates"],"mappings":"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"}