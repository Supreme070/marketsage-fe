{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/__tests__/integration/mcp/jest.integration.config.js"],"sourcesContent":["/**\n * Jest Configuration for MCP Integration Tests\n * \n * Specialized configuration for running integration tests with real database\n * and Docker environment support.\n */\n\nconst path = require('path');\n\nmodule.exports = {\n  // Use the same display name for consistency\n  displayName: 'MCP Integration Tests',\n\n  // Test environment\n  testEnvironment: 'node',\n\n  // Root directory for tests\n  rootDir: path.resolve(__dirname, '../../../..'),\n\n  // Test file patterns\n  testMatch: [\n    '<rootDir>/src/__tests__/integration/mcp/**/*.test.ts'\n  ],\n\n  // Setup files\n  setupFilesAfterEnv: [\n    '<rootDir>/src/__tests__/integration/mcp/setup.ts'\n  ],\n\n  // Transform TypeScript files\n  preset: 'ts-jest',\n  \n  // Module file extensions\n  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json'],\n\n  // Transform configuration\n  transform: {\n    '^.+\\\\.(ts|tsx)$': ['ts-jest', {\n      tsconfig: '<rootDir>/tsconfig.json'\n    }]\n  },\n\n  // Module name mapping\n  moduleNameMapping: {\n    '^@/(.*)$': '<rootDir>/src/$1',\n    '^@prisma/client$': '<rootDir>/node_modules/@prisma/client'\n  },\n\n  // Test timeout (increased for integration tests)\n  testTimeout: 300000, // 5 minutes\n\n  // Run tests in band (sequentially) for database consistency\n  maxWorkers: 1,\n\n  // Verbose output for integration tests\n  verbose: true,\n\n  // Collect coverage from integration test files\n  collectCoverageFrom: [\n    'src/mcp/**/*.ts',\n    'src/lib/**/*.ts',\n    'src/scripts/seed-mcp-*.ts',\n    '!src/**/*.d.ts',\n    '!src/**/*.test.ts',\n    '!src/**/__tests__/**',\n    '!src/**/__mocks__/**'\n  ],\n\n  // Coverage thresholds (lower for integration tests focusing on functionality)\n  coverageThreshold: {\n    global: {\n      branches: 60,\n      functions: 70,\n      lines: 70,\n      statements: 70\n    }\n  },\n\n  // Coverage reporters\n  coverageReporters: ['text', 'lcov', 'html'],\n\n  // Coverage directory\n  coverageDirectory: '<rootDir>/coverage/integration',\n\n  // Environment variables for tests\n  setupFiles: ['<rootDir>/src/__tests__/integration/mcp/test-env.ts'],\n\n  // Global setup and teardown\n  globalSetup: '<rootDir>/src/__tests__/integration/mcp/global-setup.ts',\n  globalTeardown: '<rootDir>/src/__tests__/integration/mcp/global-teardown.ts',\n\n  // Reporter configuration\n  reporters: [\n    'default',\n    [\n      'jest-html-reporters',\n      {\n        publicPath: '<rootDir>/test-reports/integration',\n        filename: 'integration-test-report.html',\n        expand: true,\n        hideIcon: false,\n        pageTitle: 'MCP Integration Test Report'\n      }\n    ],\n    [\n      'jest-junit',\n      {\n        outputDirectory: '<rootDir>/test-reports/integration',\n        outputName: 'junit.xml',\n        classNameTemplate: '{classname}',\n        titleTemplate: '{title}',\n        ancestorSeparator: ' â€º ',\n        usePathForSuiteName: true\n      }\n    ]\n  ],\n\n  // Cache configuration\n  cache: false, // Disable cache for integration tests to ensure fresh runs\n\n  // Clear mocks between tests\n  clearMocks: true,\n  restoreMocks: true,\n\n  // Detect open handles (useful for database connections)\n  detectOpenHandles: true,\n  forceExit: true,\n\n  // Silence console output during tests (can be disabled for debugging)\n  silent: false,\n\n  // Error on deprecated features\n  errorOnDeprecated: true,\n\n  // Fail fast on first error (can be disabled for comprehensive testing)\n  bail: false,\n\n  // Additional options for Docker environment\n  ...(process.env.DOCKER_ENV === 'true' && {\n    // Docker-specific timeouts\n    testTimeout: 600000, // 10 minutes for Docker\n    \n    // Additional setup for Docker\n    setupFilesAfterEnv: [\n      '<rootDir>/src/__tests__/integration/mcp/setup.ts',\n      '<rootDir>/src/__tests__/integration/mcp/docker-setup.ts'\n    ]\n  })\n};"],"names":["path","require","module","exports","displayName","testEnvironment","rootDir","resolve","__dirname","testMatch","setupFilesAfterEnv","preset","moduleFileExtensions","transform","tsconfig","moduleNameMapping","testTimeout","maxWorkers","verbose","collectCoverageFrom","coverageThreshold","global","branches","functions","lines","statements","coverageReporters","coverageDirectory","setupFiles","globalSetup","globalTeardown","reporters","publicPath","filename","expand","hideIcon","pageTitle","outputDirectory","outputName","classNameTemplate","titleTemplate","ancestorSeparator","usePathForSuiteName","cache","clearMocks","restoreMocks","detectOpenHandles","forceExit","silent","errorOnDeprecated","bail","process","env","DOCKER_ENV"],"mappings":"AAAA;;;;;CAKC;AAED,MAAMA,OAAOC,QAAQ;AAErBC,OAAOC,OAAO,GAAG;IACf,4CAA4C;IAC5CC,aAAa;IAEb,mBAAmB;IACnBC,iBAAiB;IAEjB,2BAA2B;IAC3BC,SAASN,KAAKO,OAAO,CAACC,WAAW;IAEjC,qBAAqB;IACrBC,WAAW;QACT;KACD;IAED,cAAc;IACdC,oBAAoB;QAClB;KACD;IAED,6BAA6B;IAC7BC,QAAQ;IAER,yBAAyB;IACzBC,sBAAsB;QAAC;QAAM;QAAO;QAAM;QAAO;KAAO;IAExD,0BAA0B;IAC1BC,WAAW;QACT,mBAAmB;YAAC;YAAW;gBAC7BC,UAAU;YACZ;SAAE;IACJ;IAEA,sBAAsB;IACtBC,mBAAmB;QACjB,YAAY;QACZ,oBAAoB;IACtB;IAEA,iDAAiD;IACjDC,aAAa;IAEb,4DAA4D;IAC5DC,YAAY;IAEZ,uCAAuC;IACvCC,SAAS;IAET,+CAA+C;IAC/CC,qBAAqB;QACnB;QACA;QACA;QACA;QACA;QACA;QACA;KACD;IAED,8EAA8E;IAC9EC,mBAAmB;QACjBC,QAAQ;YACNC,UAAU;YACVC,WAAW;YACXC,OAAO;YACPC,YAAY;QACd;IACF;IAEA,qBAAqB;IACrBC,mBAAmB;QAAC;QAAQ;QAAQ;KAAO;IAE3C,qBAAqB;IACrBC,mBAAmB;IAEnB,kCAAkC;IAClCC,YAAY;QAAC;KAAsD;IAEnE,4BAA4B;IAC5BC,aAAa;IACbC,gBAAgB;IAEhB,yBAAyB;IACzBC,WAAW;QACT;QACA;YACE;YACA;gBACEC,YAAY;gBACZC,UAAU;gBACVC,QAAQ;gBACRC,UAAU;gBACVC,WAAW;YACb;SACD;QACD;YACE;YACA;gBACEC,iBAAiB;gBACjBC,YAAY;gBACZC,mBAAmB;gBACnBC,eAAe;gBACfC,mBAAmB;gBACnBC,qBAAqB;YACvB;SACD;KACF;IAED,sBAAsB;IACtBC,OAAO;IAEP,4BAA4B;IAC5BC,YAAY;IACZC,cAAc;IAEd,wDAAwD;IACxDC,mBAAmB;IACnBC,WAAW;IAEX,sEAAsE;IACtEC,QAAQ;IAER,+BAA+B;IAC/BC,mBAAmB;IAEnB,uEAAuE;IACvEC,MAAM;IAEN,4CAA4C;IAC5C,GAAIC,QAAQC,GAAG,CAACC,UAAU,KAAK,UAAU;QACvC,2BAA2B;QAC3BrC,aAAa;QAEb,8BAA8B;QAC9BN,oBAAoB;YAClB;YACA;SACD;IACH,CAAC;AACH"}