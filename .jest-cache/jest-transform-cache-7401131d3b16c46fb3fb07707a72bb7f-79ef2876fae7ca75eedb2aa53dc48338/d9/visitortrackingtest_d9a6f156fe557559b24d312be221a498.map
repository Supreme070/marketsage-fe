{"version":3,"sources":["/Users/supreme/Desktop/marketsage/__tests__/leadpulse/visitor-tracking.test.ts"],"sourcesContent":["/**\n * LeadPulse Visitor Tracking Tests\n * \n * Tests for visitor tracking functionality including:\n * - Visitor identification and fingerprinting\n * - Event tracking and analytics\n * - Real-time updates and WebSocket communication\n * - Engagement scoring\n */\n\nimport { describe, test, expect, beforeEach, afterEach, jest } from '@jest/globals';\nimport { NextRequest, NextResponse } from 'next/server';\nimport { createMocks } from 'node-mocks-http';\nimport { POST, GET } from '@/app/api/leadpulse/visitors/route';\nimport prisma from '@/lib/db/prisma';\nimport { leadPulseCache } from '@/lib/cache/leadpulse-cache';\nimport { leadPulseRealtime } from '@/lib/websocket/leadpulse-realtime';\n\n// Mock dependencies\njest.mock('@/lib/db/prisma', () => ({\n  leadPulseVisitor: {\n    create: jest.fn(),\n    findUnique: jest.fn(),\n    findMany: jest.fn(),\n    update: jest.fn(),\n    upsert: jest.fn(),\n  },\n  leadPulseTouchpoint: {\n    create: jest.fn(),\n  },\n  user: {\n    findUnique: jest.fn(),\n  },\n}));\n\njest.mock('@/lib/cache/leadpulse-cache', () => ({\n  leadPulseCache: {\n    get: jest.fn(),\n    set: jest.fn(),\n    del: jest.fn(),\n    addRecentActivity: jest.fn(),\n    incrementCounter: jest.fn(),\n    getAnalyticsOverview: jest.fn(),\n  },\n}));\n\njest.mock('@/lib/websocket/leadpulse-realtime', () => ({\n  leadPulseRealtime: {\n    broadcastNewVisitor: jest.fn(),\n    broadcastVisitorActivity: jest.fn(),\n    broadcastAnalyticsUpdate: jest.fn(),\n  },\n}));\n\njest.mock('next-auth', () => ({\n  getServerSession: jest.fn(() => Promise.resolve({\n    user: { id: 'user123', email: 'test@example.com' }\n  })),\n}));\n\n// Helper function to create NextRequest\nfunction createNextRequest(method: string, url: string, body?: any) {\n  const request = new NextRequest(url, {\n    method,\n    headers: {\n      'Content-Type': 'application/json',\n      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',\n      'X-Forwarded-For': '192.168.1.1',\n    },\n    body: body ? JSON.stringify(body) : undefined,\n  });\n  return request;\n}\n\ndescribe('LeadPulse Visitor Tracking API', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('POST /api/leadpulse/visitors', () => {\n    test('should create new visitor with valid data', async () => {\n      const visitorData = {\n        fingerprint: 'fp_test123456789',\n        event: {\n          type: 'pageview',\n          sessionId: 'lp_session123',\n          timestamp: Date.now(),\n          data: {\n            url: 'https://example.com',\n            title: 'Test Page',\n            viewport: { width: 1920, height: 1080 },\n            referrer: 'https://google.com',\n          },\n        },\n        url: 'https://example.com',\n        title: 'Test Page',\n        location: 'Africa/Lagos',\n        device: 'Desktop',\n        browser: 'Chrome',\n      };\n\n      const mockVisitor = {\n        id: 'visitor123',\n        fingerprint: visitorData.fingerprint,\n        score: 10,\n        metadata: {},\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      // Mock Prisma responses\n      (prisma.leadPulseVisitor.findUnique as jest.Mock).mockResolvedValue(null);\n      (prisma.leadPulseVisitor.create as jest.Mock).mockResolvedValue(mockVisitor);\n      (prisma.leadPulseTouchpoint.create as jest.Mock).mockResolvedValue({\n        id: 'touchpoint123',\n        visitorId: 'visitor123',\n        type: 'pageview',\n        data: visitorData.event.data,\n      });\n\n      // Mock cache responses\n      (leadPulseCache.set as jest.Mock).mockResolvedValue(true);\n      (leadPulseCache.addRecentActivity as jest.Mock).mockResolvedValue(true);\n\n      const request = createNextRequest('POST', 'http://localhost:3000/api/leadpulse/visitors', visitorData);\n      const response = await POST(request);\n      const responseData = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(responseData.success).toBe(true);\n      expect(responseData.visitorId).toBe('visitor123');\n      expect(responseData.score).toBe(10);\n\n      // Verify database calls\n      expect(prisma.leadPulseVisitor.findUnique).toHaveBeenCalledWith({\n        where: { fingerprint: visitorData.fingerprint },\n      });\n      expect(prisma.leadPulseVisitor.create).toHaveBeenCalled();\n      expect(prisma.leadPulseTouchpoint.create).toHaveBeenCalled();\n\n      // Verify real-time broadcast\n      expect(leadPulseRealtime.broadcastNewVisitor).toHaveBeenCalledWith(\n        expect.objectContaining({\n          id: 'visitor123',\n          fingerprint: visitorData.fingerprint,\n        })\n      );\n    });\n\n    test('should update existing visitor with new event', async () => {\n      const visitorData = {\n        fingerprint: 'fp_existing123',\n        event: {\n          type: 'click',\n          sessionId: 'lp_session123',\n          timestamp: Date.now(),\n          data: {\n            element: {\n              tagName: 'button',\n              text: 'Sign Up',\n              id: 'signup-btn',\n            },\n            x: 100,\n            y: 200,\n          },\n        },\n        url: 'https://example.com/signup',\n        title: 'Sign Up Page',\n        device: 'Mobile',\n        browser: 'Safari',\n      };\n\n      const existingVisitor = {\n        id: 'visitor456',\n        fingerprint: visitorData.fingerprint,\n        score: 25,\n        sessionCount: 2,\n        metadata: { device: 'Desktop' },\n        createdAt: new Date(Date.now() - 86400000), // 1 day ago\n        updatedAt: new Date(),\n      };\n\n      const updatedVisitor = {\n        ...existingVisitor,\n        score: 35, // Score increased due to click event\n        metadata: { device: 'Mobile' }, // Updated device info\n        updatedAt: new Date(),\n      };\n\n      // Mock Prisma responses\n      (prisma.leadPulseVisitor.findUnique as jest.Mock).mockResolvedValue(existingVisitor);\n      (prisma.leadPulseVisitor.update as jest.Mock).mockResolvedValue(updatedVisitor);\n      (prisma.leadPulseTouchpoint.create as jest.Mock).mockResolvedValue({\n        id: 'touchpoint456',\n        visitorId: 'visitor456',\n        type: 'click',\n        data: visitorData.event.data,\n      });\n\n      const request = createNextRequest('POST', 'http://localhost:3000/api/leadpulse/visitors', visitorData);\n      const response = await POST(request);\n      const responseData = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(responseData.success).toBe(true);\n      expect(responseData.visitorId).toBe('visitor456');\n      expect(responseData.score).toBe(35);\n      expect(responseData.isNew).toBe(false);\n\n      // Verify visitor was updated, not created\n      expect(prisma.leadPulseVisitor.update).toHaveBeenCalledWith({\n        where: { id: 'visitor456' },\n        data: expect.objectContaining({\n          score: 35,\n          metadata: expect.objectContaining({\n            device: 'Mobile',\n          }),\n        }),\n      });\n\n      // Verify activity broadcast\n      expect(leadPulseRealtime.broadcastVisitorActivity).toHaveBeenCalledWith(\n        expect.objectContaining({\n          visitorId: 'visitor456',\n          activity: {\n            type: 'click',\n            data: visitorData.event.data,\n          },\n        })\n      );\n    });\n\n    test('should handle engagement scoring correctly', async () => {\n      const testCases = [\n        {\n          eventType: 'pageview',\n          expectedScoreIncrease: 5,\n          description: 'basic page view',\n        },\n        {\n          eventType: 'click',\n          expectedScoreIncrease: 10,\n          description: 'button click',\n        },\n        {\n          eventType: 'form_focus',\n          expectedScoreIncrease: 15,\n          description: 'form interaction',\n        },\n        {\n          eventType: 'form_submit',\n          expectedScoreIncrease: 30,\n          description: 'form submission',\n        },\n        {\n          eventType: 'scroll_milestone',\n          expectedScoreIncrease: 2,\n          description: 'scroll depth milestone',\n        },\n      ];\n\n      for (const testCase of testCases) {\n        const visitorData = {\n          fingerprint: `fp_${testCase.eventType}_test`,\n          event: {\n            type: testCase.eventType,\n            sessionId: 'lp_session123',\n            timestamp: Date.now(),\n            data: {},\n          },\n          url: 'https://example.com',\n          title: 'Test Page',\n        };\n\n        const existingVisitor = {\n          id: 'visitor_test',\n          fingerprint: visitorData.fingerprint,\n          score: 20,\n          metadata: {},\n        };\n\n        (prisma.leadPulseVisitor.findUnique as jest.Mock).mockResolvedValue(existingVisitor);\n        (prisma.leadPulseVisitor.update as jest.Mock).mockResolvedValue({\n          ...existingVisitor,\n          score: 20 + testCase.expectedScoreIncrease,\n        });\n        (prisma.leadPulseTouchpoint.create as jest.Mock).mockResolvedValue({});\n\n        const request = createNextRequest('POST', 'http://localhost:3000/api/leadpulse/visitors', visitorData);\n        const response = await POST(request);\n        const responseData = await response.json();\n\n        expect(responseData.score).toBe(20 + testCase.expectedScoreIncrease);\n      }\n    });\n\n    test('should validate required fields', async () => {\n      const invalidRequests = [\n        {\n          description: 'missing fingerprint',\n          data: {\n            event: { type: 'pageview', sessionId: 'test', timestamp: Date.now() },\n            url: 'https://example.com',\n          },\n        },\n        {\n          description: 'missing event',\n          data: {\n            fingerprint: 'fp_test123',\n            url: 'https://example.com',\n          },\n        },\n        {\n          description: 'invalid event type',\n          data: {\n            fingerprint: 'fp_test123',\n            event: { type: 'invalid_event', sessionId: 'test', timestamp: Date.now() },\n            url: 'https://example.com',\n          },\n        },\n        {\n          description: 'missing URL',\n          data: {\n            fingerprint: 'fp_test123',\n            event: { type: 'pageview', sessionId: 'test', timestamp: Date.now() },\n          },\n        },\n      ];\n\n      for (const invalidRequest of invalidRequests) {\n        const request = createNextRequest('POST', 'http://localhost:3000/api/leadpulse/visitors', invalidRequest.data);\n        const response = await POST(request);\n        const responseData = await response.json();\n\n        expect(response.status).toBe(400);\n        expect(responseData.success).toBe(false);\n        expect(responseData.error).toBeDefined();\n      }\n    });\n\n    test('should handle rate limiting', async () => {\n      // Mock rate limit exceeded scenario\n      const visitorData = {\n        fingerprint: 'fp_rate_limit_test',\n        event: {\n          type: 'pageview',\n          sessionId: 'lp_session123',\n          timestamp: Date.now(),\n        },\n        url: 'https://example.com',\n      };\n\n      // Simulate multiple rapid requests\n      const requests = Array(15).fill(null).map(() => \n        createNextRequest('POST', 'http://localhost:3000/api/leadpulse/visitors', visitorData)\n      );\n\n      // The rate limiter should kick in after a certain number of requests\n      // Note: This test depends on the actual rate limiting implementation\n      const responses = await Promise.all(requests.map(req => POST(req)));\n      \n      // Some requests should be rate limited (status 429)\n      const rateLimitedResponses = responses.filter(res => res.status === 429);\n      expect(rateLimitedResponses.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe('GET /api/leadpulse/visitors', () => {\n    test('should return visitor analytics for authenticated user', async () => {\n      const mockAnalytics = {\n        totalVisitors: 150,\n        uniqueVisitors: 120,\n        avgEngagementScore: 45.5,\n        conversionRate: 3.2,\n        topPages: [\n          { url: '/home', views: 50, conversionRate: 2.1 },\n          { url: '/products', views: 30, conversionRate: 5.5 },\n        ],\n        deviceBreakdown: {\n          desktop: 65.4,\n          mobile: 28.7,\n          tablet: 5.9,\n        },\n      };\n\n      const mockVisitors = [\n        {\n          id: 'visitor1',\n          fingerprint: 'fp_123',\n          score: 75,\n          firstSeen: new Date(),\n          lastSeen: new Date(),\n          location: { country: 'Nigeria', city: 'Lagos' },\n          device: 'Desktop',\n          browser: 'Chrome',\n          isConverted: false,\n        },\n        {\n          id: 'visitor2',\n          fingerprint: 'fp_456',\n          score: 25,\n          firstSeen: new Date(),\n          lastSeen: new Date(),\n          location: { country: 'Kenya', city: 'Nairobi' },\n          device: 'Mobile',\n          browser: 'Safari',\n          isConverted: true,\n        },\n      ];\n\n      // Mock authenticated user\n      (prisma.user.findUnique as jest.Mock).mockResolvedValue({\n        id: 'user123',\n        email: 'test@example.com',\n      });\n\n      // Mock cache response\n      (leadPulseCache.getAnalyticsOverview as jest.Mock).mockResolvedValue(mockAnalytics);\n\n      // Mock database response\n      (prisma.leadPulseVisitor.findMany as jest.Mock).mockResolvedValue(mockVisitors);\n\n      const request = createNextRequest('GET', 'http://localhost:3000/api/leadpulse/visitors?timeframe=week&limit=50');\n      const response = await GET(request);\n      const responseData = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(responseData.success).toBe(true);\n      expect(responseData.visitors).toHaveLength(2);\n      expect(responseData.analytics).toEqual(mockAnalytics);\n      expect(responseData.pagination).toBeDefined();\n\n      // Verify database query with correct filters\n      expect(prisma.leadPulseVisitor.findMany).toHaveBeenCalledWith({\n        where: expect.objectContaining({\n          createdAt: expect.objectContaining({\n            gte: expect.any(Date),\n          }),\n        }),\n        orderBy: { createdAt: 'desc' },\n        take: 50,\n        skip: 0,\n        include: expect.any(Object),\n      });\n    });\n\n    test('should handle pagination correctly', async () => {\n      const request = createNextRequest('GET', 'http://localhost:3000/api/leadpulse/visitors?limit=10&offset=20');\n      const response = await GET(request);\n      const responseData = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(responseData.pagination).toEqual({\n        limit: 10,\n        offset: 20,\n        hasNext: expect.any(Boolean),\n        hasPrev: true,\n      });\n\n      // Verify pagination parameters passed to database\n      expect(prisma.leadPulseVisitor.findMany).toHaveBeenCalledWith(\n        expect.objectContaining({\n          take: 10,\n          skip: 20,\n        })\n      );\n    });\n\n    test('should filter by timeframe correctly', async () => {\n      const timeframes = ['hour', 'day', 'week', 'month'];\n\n      for (const timeframe of timeframes) {\n        const request = createNextRequest('GET', `http://localhost:3000/api/leadpulse/visitors?timeframe=${timeframe}`);\n        await GET(request);\n\n        // Verify the correct date filter was applied\n        expect(prisma.leadPulseVisitor.findMany).toHaveBeenCalledWith(\n          expect.objectContaining({\n            where: expect.objectContaining({\n              createdAt: expect.objectContaining({\n                gte: expect.any(Date),\n              }),\n            }),\n          })\n        );\n      }\n    });\n\n    test('should require authentication', async () => {\n      // Mock unauthenticated request\n      jest.doMock('next-auth', () => ({\n        getServerSession: jest.fn(() => Promise.resolve(null)),\n      }));\n\n      const request = createNextRequest('GET', 'http://localhost:3000/api/leadpulse/visitors');\n      const response = await GET(request);\n      const responseData = await response.json();\n\n      expect(response.status).toBe(401);\n      expect(responseData.success).toBe(false);\n      expect(responseData.error).toBe('Unauthorized');\n    });\n  });\n\n  describe('Real-time Features', () => {\n    test('should broadcast new visitor events', async () => {\n      const visitorData = {\n        fingerprint: 'fp_realtime_test',\n        event: {\n          type: 'pageview',\n          sessionId: 'lp_session123',\n          timestamp: Date.now(),\n        },\n        url: 'https://example.com',\n        title: 'Test Page',\n      };\n\n      const mockVisitor = {\n        id: 'visitor_realtime',\n        fingerprint: visitorData.fingerprint,\n        score: 10,\n      };\n\n      (prisma.leadPulseVisitor.findUnique as jest.Mock).mockResolvedValue(null);\n      (prisma.leadPulseVisitor.create as jest.Mock).mockResolvedValue(mockVisitor);\n      (prisma.leadPulseTouchpoint.create as jest.Mock).mockResolvedValue({});\n\n      const request = createNextRequest('POST', 'http://localhost:3000/api/leadpulse/visitors', visitorData);\n      await POST(request);\n\n      // Verify real-time broadcast was called\n      expect(leadPulseRealtime.broadcastNewVisitor).toHaveBeenCalledWith(\n        expect.objectContaining({\n          id: 'visitor_realtime',\n          fingerprint: visitorData.fingerprint,\n        })\n      );\n\n      expect(leadPulseRealtime.broadcastAnalyticsUpdate).toHaveBeenCalled();\n    });\n\n    test('should broadcast visitor activity updates', async () => {\n      const visitorData = {\n        fingerprint: 'fp_activity_test',\n        event: {\n          type: 'form_submit',\n          sessionId: 'lp_session123',\n          timestamp: Date.now(),\n          data: {\n            formId: 'contact-form',\n            fields: ['name', 'email'],\n          },\n        },\n        url: 'https://example.com/contact',\n      };\n\n      const existingVisitor = {\n        id: 'visitor_activity',\n        fingerprint: visitorData.fingerprint,\n        score: 30,\n      };\n\n      (prisma.leadPulseVisitor.findUnique as jest.Mock).mockResolvedValue(existingVisitor);\n      (prisma.leadPulseVisitor.update as jest.Mock).mockResolvedValue({\n        ...existingVisitor,\n        score: 60,\n      });\n      (prisma.leadPulseTouchpoint.create as jest.Mock).mockResolvedValue({});\n\n      const request = createNextRequest('POST', 'http://localhost:3000/api/leadpulse/visitors', visitorData);\n      await POST(request);\n\n      // Verify activity broadcast\n      expect(leadPulseRealtime.broadcastVisitorActivity).toHaveBeenCalledWith(\n        expect.objectContaining({\n          visitorId: 'visitor_activity',\n          activity: expect.objectContaining({\n            type: 'form_submit',\n          }),\n        })\n      );\n    });\n  });\n\n  describe('Caching Behavior', () => {\n    test('should cache visitor data correctly', async () => {\n      const visitorData = {\n        fingerprint: 'fp_cache_test',\n        event: {\n          type: 'pageview',\n          sessionId: 'lp_session123',\n          timestamp: Date.now(),\n        },\n        url: 'https://example.com',\n      };\n\n      const mockVisitor = {\n        id: 'visitor_cache',\n        fingerprint: visitorData.fingerprint,\n        score: 15,\n      };\n\n      (prisma.leadPulseVisitor.findUnique as jest.Mock).mockResolvedValue(null);\n      (prisma.leadPulseVisitor.create as jest.Mock).mockResolvedValue(mockVisitor);\n      (prisma.leadPulseTouchpoint.create as jest.Mock).mockResolvedValue({});\n\n      const request = createNextRequest('POST', 'http://localhost:3000/api/leadpulse/visitors', visitorData);\n      await POST(request);\n\n      // Verify caching operations\n      expect(leadPulseCache.set).toHaveBeenCalledWith(\n        `visitor:${visitorData.fingerprint}`,\n        expect.objectContaining({\n          id: 'visitor_cache',\n          fingerprint: visitorData.fingerprint,\n        }),\n        expect.any(Number) // TTL\n      );\n\n      expect(leadPulseCache.addRecentActivity).toHaveBeenCalledWith(\n        expect.objectContaining({\n          type: 'visitor_activity',\n          visitorId: 'visitor_cache',\n        })\n      );\n    });\n\n    test('should use cached data when available', async () => {\n      const fingerprint = 'fp_cached_visitor';\n      const cachedVisitor = {\n        id: 'cached_visitor',\n        fingerprint,\n        score: 40,\n      };\n\n      // Mock cache hit\n      (leadPulseCache.get as jest.Mock).mockResolvedValue(cachedVisitor);\n\n      const visitorData = {\n        fingerprint,\n        event: {\n          type: 'click',\n          sessionId: 'lp_session123',\n          timestamp: Date.now(),\n        },\n        url: 'https://example.com',\n      };\n\n      const request = createNextRequest('POST', 'http://localhost:3000/api/leadpulse/visitors', visitorData);\n      await POST(request);\n\n      // Should use cached data and not query database for visitor lookup\n      expect(leadPulseCache.get).toHaveBeenCalledWith(`visitor:${fingerprint}`);\n      expect(prisma.leadPulseVisitor.findUnique).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('Error Handling', () => {\n    test('should handle database errors gracefully', async () => {\n      const visitorData = {\n        fingerprint: 'fp_db_error_test',\n        event: {\n          type: 'pageview',\n          sessionId: 'lp_session123',\n          timestamp: Date.now(),\n        },\n        url: 'https://example.com',\n      };\n\n      // Mock database error\n      (prisma.leadPulseVisitor.findUnique as jest.Mock).mockRejectedValue(\n        new Error('Database connection failed')\n      );\n\n      const request = createNextRequest('POST', 'http://localhost:3000/api/leadpulse/visitors', visitorData);\n      const response = await POST(request);\n      const responseData = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(responseData.success).toBe(false);\n      expect(responseData.error).toBe('Failed to track visitor');\n    });\n\n    test('should handle cache errors gracefully', async () => {\n      const visitorData = {\n        fingerprint: 'fp_cache_error_test',\n        event: {\n          type: 'pageview',\n          sessionId: 'lp_session123',\n          timestamp: Date.now(),\n        },\n        url: 'https://example.com',\n      };\n\n      const mockVisitor = {\n        id: 'visitor_cache_error',\n        fingerprint: visitorData.fingerprint,\n        score: 10,\n      };\n\n      // Mock cache error\n      (leadPulseCache.set as jest.Mock).mockRejectedValue(\n        new Error('Redis connection failed')\n      );\n\n      (prisma.leadPulseVisitor.findUnique as jest.Mock).mockResolvedValue(null);\n      (prisma.leadPulseVisitor.create as jest.Mock).mockResolvedValue(mockVisitor);\n      (prisma.leadPulseTouchpoint.create as jest.Mock).mockResolvedValue({});\n\n      const request = createNextRequest('POST', 'http://localhost:3000/api/leadpulse/visitors', visitorData);\n      const response = await POST(request);\n      const responseData = await response.json();\n\n      // Should still succeed even if cache fails\n      expect(response.status).toBe(200);\n      expect(responseData.success).toBe(true);\n      expect(responseData.visitorId).toBe('visitor_cache_error');\n    });\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n});"],"names":["jest","mock","leadPulseVisitor","create","fn","findUnique","findMany","update","upsert","leadPulseTouchpoint","user","leadPulseCache","get","set","del","addRecentActivity","incrementCounter","getAnalyticsOverview","leadPulseRealtime","broadcastNewVisitor","broadcastVisitorActivity","broadcastAnalyticsUpdate","getServerSession","Promise","resolve","id","email","createNextRequest","method","url","body","request","NextRequest","headers","JSON","stringify","undefined","describe","beforeEach","clearAllMocks","test","visitorData","fingerprint","event","type","sessionId","timestamp","Date","now","data","title","viewport","width","height","referrer","location","device","browser","mockVisitor","score","metadata","createdAt","updatedAt","prisma","mockResolvedValue","visitorId","response","POST","responseData","json","expect","status","toBe","success","toHaveBeenCalledWith","where","toHaveBeenCalled","objectContaining","element","tagName","text","x","y","existingVisitor","sessionCount","updatedVisitor","isNew","activity","testCases","eventType","expectedScoreIncrease","description","testCase","invalidRequests","invalidRequest","error","toBeDefined","requests","Array","fill","map","responses","all","req","rateLimitedResponses","filter","res","length","toBeGreaterThan","mockAnalytics","totalVisitors","uniqueVisitors","avgEngagementScore","conversionRate","topPages","views","deviceBreakdown","desktop","mobile","tablet","mockVisitors","firstSeen","lastSeen","country","city","isConverted","GET","visitors","toHaveLength","analytics","toEqual","pagination","gte","any","orderBy","take","skip","include","Object","limit","offset","hasNext","Boolean","hasPrev","timeframes","timeframe","doMock","formId","fields","Number","cachedVisitor","not","mockRejectedValue","Error","afterEach"],"mappings":"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"}