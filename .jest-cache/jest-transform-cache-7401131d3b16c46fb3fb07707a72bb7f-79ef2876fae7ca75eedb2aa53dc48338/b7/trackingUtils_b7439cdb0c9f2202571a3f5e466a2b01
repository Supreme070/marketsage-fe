cd3eaa14cff4ddf526a38e971304d5fd
/**
 * Tracking Utilities
 * 
 * This module provides utility functions for tracking user interactions
 * with emails, SMS, WhatsApp messages, and other content.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    addLinkTracking: function() {
        return addLinkTracking;
    },
    addTrackingPixel: function() {
        return addTrackingPixel;
    },
    getTrackingUrl: function() {
        return getTrackingUrl;
    },
    trackEngagement: function() {
        return trackEngagement;
    }
});
function getTrackingUrl(originalUrl, contactId, entityId, entityType = 'EMAIL_CAMPAIGN', metadata) {
    // Create a base URL for the tracking endpoint
    const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000';
    const trackingUrl = new URL(`${baseUrl}/api/redirect`);
    // Add tracking parameters
    trackingUrl.searchParams.append('url', encodeURIComponent(originalUrl));
    trackingUrl.searchParams.append('cid', contactId);
    trackingUrl.searchParams.append('eid', entityId);
    trackingUrl.searchParams.append('type', entityType);
    // Add optional metadata
    if (metadata) {
        trackingUrl.searchParams.append('meta', encodeURIComponent(JSON.stringify(metadata)));
    }
    return trackingUrl.toString();
}
function addLinkTracking(content, contactId, campaignId) {
    // Simple regex to find all links in the HTML
    const linkPattern = /<a\s+(?:[^>]*?\s+)?href="([^"]*)"([^>]*)>/gi;
    // Replace all links with tracking links
    return content.replace(linkPattern, (match, url, rest)=>{
        // Skip tracking for certain links
        if (url.startsWith('#') || url.startsWith('mailto:') || url.startsWith('tel:')) {
            return match;
        }
        // Use campaign-specific tracking endpoint for click tracking
        const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000';
        const trackingUrl = `${baseUrl}/api/email/campaigns/${campaignId}/track?cid=${contactId}&type=click&url=${encodeURIComponent(url)}`;
        return `<a href="${trackingUrl}"${rest}>`;
    });
}
function addTrackingPixel(content, contactId, campaignId) {
    // Create the tracking pixel URL using campaign-specific endpoint
    const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000';
    const trackingUrl = `${baseUrl}/api/email/campaigns/${campaignId}/track?cid=${contactId}&type=open&t=${Date.now()}`;
    // Add the pixel before the closing body tag
    const pixelHtml = `<img src="${trackingUrl}" alt="" width="1" height="1" style="display:none !important;" />`;
    if (content.includes('</body>')) {
        return content.replace('</body>', `${pixelHtml}</body>`);
    } else {
        return `${content}${pixelHtml}`;
    }
}
async function trackEngagement(contactId, entityId, entityType, activityType, metadata) {
    try {
        const response = await fetch('/api/engagements/track', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                contactId,
                entityType,
                entityId,
                activityType,
                metadata: {
                    ...metadata,
                    userAgent: navigator.userAgent,
                    timestamp: new Date().toISOString()
                }
            })
        });
        return response.ok;
    } catch (error) {
        console.error('Failed to track engagement:', error);
        return false;
    }
}

//# sourceMappingURL=data:application/json;base64,