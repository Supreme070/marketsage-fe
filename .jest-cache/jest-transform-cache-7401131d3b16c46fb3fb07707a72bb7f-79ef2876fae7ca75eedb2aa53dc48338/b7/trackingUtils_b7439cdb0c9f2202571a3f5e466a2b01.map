{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/lib/trackingUtils.ts"],"sourcesContent":["/**\n * Tracking Utilities\n * \n * This module provides utility functions for tracking user interactions\n * with emails, SMS, WhatsApp messages, and other content.\n */\n\nimport type { ActivityType, EntityType } from '@prisma/client';\n\n/**\n * Get a tracking URL for email links\n * \n * @param originalUrl The original URL to redirect to\n * @param contactId The ID of the contact clicking the link\n * @param campaignId The ID of the campaign containing the link\n * @param metadata Optional additional data to track\n * @returns A URL that tracks the click and then redirects\n */\nexport function getTrackingUrl(\n  originalUrl: string,\n  contactId: string,\n  entityId: string,\n  entityType: EntityType = 'EMAIL_CAMPAIGN',\n  metadata?: Record<string, any>\n): string {\n  // Create a base URL for the tracking endpoint\n  const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000';\n  const trackingUrl = new URL(`${baseUrl}/api/redirect`);\n  \n  // Add tracking parameters\n  trackingUrl.searchParams.append('url', encodeURIComponent(originalUrl));\n  trackingUrl.searchParams.append('cid', contactId);\n  trackingUrl.searchParams.append('eid', entityId);\n  trackingUrl.searchParams.append('type', entityType);\n  \n  // Add optional metadata\n  if (metadata) {\n    trackingUrl.searchParams.append('meta', encodeURIComponent(JSON.stringify(metadata)));\n  }\n  \n  return trackingUrl.toString();\n}\n\n/**\n * Process email content to add tracking to all links\n * \n * @param content The original email HTML content\n * @param contactId The ID of the contact receiving the email\n * @param campaignId The ID of the campaign\n * @returns The HTML content with tracking added to all links\n */\nexport function addLinkTracking(\n  content: string,\n  contactId: string,\n  campaignId: string\n): string {\n  // Simple regex to find all links in the HTML\n  const linkPattern = /<a\\s+(?:[^>]*?\\s+)?href=\"([^\"]*)\"([^>]*)>/gi;\n  \n  // Replace all links with tracking links\n  return content.replace(linkPattern, (match, url, rest) => {\n    // Skip tracking for certain links\n    if (url.startsWith('#') || url.startsWith('mailto:') || url.startsWith('tel:')) {\n      return match;\n    }\n    \n    // Use campaign-specific tracking endpoint for click tracking\n    const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000';\n    const trackingUrl = `${baseUrl}/api/email/campaigns/${campaignId}/track?cid=${contactId}&type=click&url=${encodeURIComponent(url)}`;\n    return `<a href=\"${trackingUrl}\"${rest}>`;\n  });\n}\n\n/**\n * Add a tracking pixel to email HTML content\n * \n * @param content The original email HTML content\n * @param contactId The ID of the contact receiving the email\n * @param campaignId The ID of the campaign\n * @returns The HTML content with a tracking pixel added\n */\nexport function addTrackingPixel(\n  content: string,\n  contactId: string,\n  campaignId: string\n): string {\n  // Create the tracking pixel URL using campaign-specific endpoint\n  const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000';\n  const trackingUrl = `${baseUrl}/api/email/campaigns/${campaignId}/track?cid=${contactId}&type=open&t=${Date.now()}`;\n  \n  // Add the pixel before the closing body tag\n  const pixelHtml = `<img src=\"${trackingUrl}\" alt=\"\" width=\"1\" height=\"1\" style=\"display:none !important;\" />`;\n  \n  if (content.includes('</body>')) {\n    return content.replace('</body>', `${pixelHtml}</body>`);\n  } else {\n    return `${content}${pixelHtml}`;\n  }\n}\n\n/**\n * Record a client-side engagement event\n * \n * @param contactId The ID of the contact\n * @param entityId The ID of the entity being interacted with\n * @param entityType The type of entity\n * @param activityType The type of activity\n * @param metadata Optional additional data\n */\nexport async function trackEngagement(\n  contactId: string,\n  entityId: string,\n  entityType: EntityType,\n  activityType: ActivityType,\n  metadata?: Record<string, any>\n): Promise<boolean> {\n  try {\n    const response = await fetch('/api/engagements/track', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        contactId,\n        entityType,\n        entityId,\n        activityType,\n        metadata: {\n          ...metadata,\n          userAgent: navigator.userAgent,\n          timestamp: new Date().toISOString(),\n        }\n      }),\n    });\n    \n    return response.ok;\n  } catch (error) {\n    console.error('Failed to track engagement:', error);\n    return false;\n  }\n} "],"names":["addLinkTracking","addTrackingPixel","getTrackingUrl","trackEngagement","originalUrl","contactId","entityId","entityType","metadata","baseUrl","process","env","NEXT_PUBLIC_BASE_URL","trackingUrl","URL","searchParams","append","encodeURIComponent","JSON","stringify","toString","content","campaignId","linkPattern","replace","match","url","rest","startsWith","Date","now","pixelHtml","includes","activityType","response","fetch","method","headers","body","userAgent","navigator","timestamp","toISOString","ok","error","console"],"mappings":"AAAA;;;;;CAKC;;;;;;;;;;;IA8CeA,eAAe;eAAfA;;IA8BAC,gBAAgB;eAAhBA;;IA/DAC,cAAc;eAAdA;;IA2FMC,eAAe;eAAfA;;;AA3Ff,SAASD,eACdE,WAAmB,EACnBC,SAAiB,EACjBC,QAAgB,EAChBC,aAAyB,gBAAgB,EACzCC,QAA8B;IAE9B,8CAA8C;IAC9C,MAAMC,UAAUC,QAAQC,GAAG,CAACC,oBAAoB,IAAI;IACpD,MAAMC,cAAc,IAAIC,IAAI,GAAGL,QAAQ,aAAa,CAAC;IAErD,0BAA0B;IAC1BI,YAAYE,YAAY,CAACC,MAAM,CAAC,OAAOC,mBAAmBb;IAC1DS,YAAYE,YAAY,CAACC,MAAM,CAAC,OAAOX;IACvCQ,YAAYE,YAAY,CAACC,MAAM,CAAC,OAAOV;IACvCO,YAAYE,YAAY,CAACC,MAAM,CAAC,QAAQT;IAExC,wBAAwB;IACxB,IAAIC,UAAU;QACZK,YAAYE,YAAY,CAACC,MAAM,CAAC,QAAQC,mBAAmBC,KAAKC,SAAS,CAACX;IAC5E;IAEA,OAAOK,YAAYO,QAAQ;AAC7B;AAUO,SAASpB,gBACdqB,OAAe,EACfhB,SAAiB,EACjBiB,UAAkB;IAElB,6CAA6C;IAC7C,MAAMC,cAAc;IAEpB,wCAAwC;IACxC,OAAOF,QAAQG,OAAO,CAACD,aAAa,CAACE,OAAOC,KAAKC;QAC/C,kCAAkC;QAClC,IAAID,IAAIE,UAAU,CAAC,QAAQF,IAAIE,UAAU,CAAC,cAAcF,IAAIE,UAAU,CAAC,SAAS;YAC9E,OAAOH;QACT;QAEA,6DAA6D;QAC7D,MAAMhB,UAAUC,QAAQC,GAAG,CAACC,oBAAoB,IAAI;QACpD,MAAMC,cAAc,GAAGJ,QAAQ,qBAAqB,EAAEa,WAAW,WAAW,EAAEjB,UAAU,gBAAgB,EAAEY,mBAAmBS,MAAM;QACnI,OAAO,CAAC,SAAS,EAAEb,YAAY,CAAC,EAAEc,KAAK,CAAC,CAAC;IAC3C;AACF;AAUO,SAAS1B,iBACdoB,OAAe,EACfhB,SAAiB,EACjBiB,UAAkB;IAElB,iEAAiE;IACjE,MAAMb,UAAUC,QAAQC,GAAG,CAACC,oBAAoB,IAAI;IACpD,MAAMC,cAAc,GAAGJ,QAAQ,qBAAqB,EAAEa,WAAW,WAAW,EAAEjB,UAAU,aAAa,EAAEwB,KAAKC,GAAG,IAAI;IAEnH,4CAA4C;IAC5C,MAAMC,YAAY,CAAC,UAAU,EAAElB,YAAY,iEAAiE,CAAC;IAE7G,IAAIQ,QAAQW,QAAQ,CAAC,YAAY;QAC/B,OAAOX,QAAQG,OAAO,CAAC,WAAW,GAAGO,UAAU,OAAO,CAAC;IACzD,OAAO;QACL,OAAO,GAAGV,UAAUU,WAAW;IACjC;AACF;AAWO,eAAe5B,gBACpBE,SAAiB,EACjBC,QAAgB,EAChBC,UAAsB,EACtB0B,YAA0B,EAC1BzB,QAA8B;IAE9B,IAAI;QACF,MAAM0B,WAAW,MAAMC,MAAM,0BAA0B;YACrDC,QAAQ;YACRC,SAAS;gBACP,gBAAgB;YAClB;YACAC,MAAMpB,KAAKC,SAAS,CAAC;gBACnBd;gBACAE;gBACAD;gBACA2B;gBACAzB,UAAU;oBACR,GAAGA,QAAQ;oBACX+B,WAAWC,UAAUD,SAAS;oBAC9BE,WAAW,IAAIZ,OAAOa,WAAW;gBACnC;YACF;QACF;QAEA,OAAOR,SAASS,EAAE;IACpB,EAAE,OAAOC,OAAO;QACdC,QAAQD,KAAK,CAAC,+BAA+BA;QAC7C,OAAO;IACT;AACF"}