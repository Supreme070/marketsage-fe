82d9520ae1c66dfbbde066fd59e260c1
"use strict";
// Mock dependencies
jest.mock('next-auth/react');
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _testutils = require("../../utils/test-utils");
const _react1 = require("next-auth/react");
const _WorkflowPerformanceDashboard = require("../../../components/dashboard/WorkflowPerformanceDashboard");
const _SessionRecordingDashboard = require("../../../components/dashboard/SessionRecordingDashboard");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const mockUseSession = _react1.useSession;
describe('Monitoring Dashboard Integration Tests', ()=>{
    const mockSession = {
        user: {
            id: 'user_123',
            email: 'admin@marketsage.ai',
            role: 'admin',
            organizationId: 'org_123',
            permissions: [
                'read:monitoring',
                'read:analytics',
                'read:workflows'
            ]
        },
        expires: '2024-12-31'
    };
    // Mock monitoring data from MCP sources
    const mockMonitoringData = {
        workflows: {
            active: 12,
            completed: 847,
            failed: 23,
            averageExecutionTime: 245,
            successRate: 0.973,
            performanceMetrics: [
                {
                    name: 'Email Campaign Workflow',
                    executions: 156,
                    successRate: 0.98,
                    avgTime: 180
                },
                {
                    name: 'Lead Scoring Workflow',
                    executions: 89,
                    successRate: 0.95,
                    avgTime: 320
                },
                {
                    name: 'Customer Segmentation',
                    executions: 234,
                    successRate: 0.99,
                    avgTime: 150
                }
            ]
        },
        sessions: {
            totalSessions: 2847,
            activeSessions: 23,
            averageDuration: 342,
            bounceRate: 0.32,
            conversionRate: 0.042,
            topPages: [
                '/pricing',
                '/features',
                '/dashboard'
            ],
            userJourneys: [
                {
                    id: '1',
                    path: 'Landing → Pricing → Signup',
                    users: 234,
                    conversion: 0.15
                },
                {
                    id: '2',
                    path: 'Blog → Features → Trial',
                    users: 189,
                    conversion: 0.12
                },
                {
                    id: '3',
                    path: 'Organic → Dashboard → Upgrade',
                    users: 156,
                    conversion: 0.08
                }
            ]
        },
        performance: {
            pageLoadTime: 1.2,
            timeToInteractive: 2.1,
            firstContentfulPaint: 0.8,
            cumulativeLayoutShift: 0.05,
            largestContentfulPaint: 1.8,
            uptime: 0.9987,
            errorRate: 0.002
        },
        mcpMetrics: {
            connected: true,
            servers: [
                'leadpulse',
                'analytics',
                'workflows',
                'campaigns'
            ],
            dataLatency: 45,
            throughput: 1250,
            errorRate: 0.001,
            lastSync: new Date()
        }
    };
    beforeEach(()=>{
        mockUseSession.mockReturnValue({
            data: mockSession,
            status: 'authenticated'
        });
        // Mock APIs for monitoring data
        global.fetch = jest.fn().mockImplementation((url)=>{
            if (url.includes('/api/workflows/monitoring')) {
                return Promise.resolve({
                    ok: true,
                    json: ()=>Promise.resolve({
                            success: true,
                            data: mockMonitoringData.workflows
                        })
                });
            }
            if (url.includes('/api/analytics/sessions')) {
                return Promise.resolve({
                    ok: true,
                    json: ()=>Promise.resolve({
                            success: true,
                            data: mockMonitoringData.sessions
                        })
                });
            }
            if (url.includes('/api/monitoring/performance')) {
                return Promise.resolve({
                    ok: true,
                    json: ()=>Promise.resolve({
                            success: true,
                            data: mockMonitoringData.performance
                        })
                });
            }
            if (url.includes('/api/mcp/metrics')) {
                return Promise.resolve({
                    ok: true,
                    json: ()=>Promise.resolve({
                            success: true,
                            data: mockMonitoringData.mcpMetrics
                        })
                });
            }
            return Promise.reject(new Error('Unknown endpoint'));
        });
    });
    afterEach(()=>{
        jest.clearAllMocks();
    });
    describe('Workflow Performance Monitoring', ()=>{
        it('should display real workflow execution metrics', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_WorkflowPerformanceDashboard.WorkflowPerformanceDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                // Check workflow metrics
                expect(_testutils.screen.getByText('Active Workflows')).toBeInTheDocument();
                expect(_testutils.screen.getByText('12')).toBeInTheDocument(); // Active workflows
                expect(_testutils.screen.getByText('847')).toBeInTheDocument(); // Completed workflows
                expect(_testutils.screen.getByText('23')).toBeInTheDocument(); // Failed workflows
                // Check success rate
                expect(_testutils.screen.getByText('97.3%')).toBeInTheDocument(); // Success rate
                expect(_testutils.screen.getByText('245ms')).toBeInTheDocument(); // Average execution time
            });
        });
        it('should show workflow performance breakdown', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_WorkflowPerformanceDashboard.WorkflowPerformanceDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                // Check individual workflow performance
                expect(_testutils.screen.getByText('Email Campaign Workflow')).toBeInTheDocument();
                expect(_testutils.screen.getByText('156 executions')).toBeInTheDocument();
                expect(_testutils.screen.getByText('98% success')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Lead Scoring Workflow')).toBeInTheDocument();
                expect(_testutils.screen.getByText('89 executions')).toBeInTheDocument();
                expect(_testutils.screen.getByText('95% success')).toBeInTheDocument();
            });
        });
        it('should display workflow execution trends', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_WorkflowPerformanceDashboard.WorkflowPerformanceDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                // Check trend chart
                expect(_testutils.screen.getByTestId('workflow-trends-chart')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Execution Trends')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Performance Over Time')).toBeInTheDocument();
            });
        });
        it('should show real-time workflow status', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_WorkflowPerformanceDashboard.WorkflowPerformanceDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                // Check real-time indicators
                expect(_testutils.screen.getByTestId('realtime-status')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Live Monitoring')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Last updated: just now')).toBeInTheDocument();
            });
        });
    });
    describe('Session Recording and Analytics', ()=>{
        it('should display session analytics from real data', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SessionRecordingDashboard.SessionRecordingDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                // Check session metrics
                expect(_testutils.screen.getByText('Total Sessions')).toBeInTheDocument();
                expect(_testutils.screen.getByText('2,847')).toBeInTheDocument(); // Total sessions
                expect(_testutils.screen.getByText('23')).toBeInTheDocument(); // Active sessions
                expect(_testutils.screen.getByText('342s')).toBeInTheDocument(); // Average duration
                // Check conversion metrics
                expect(_testutils.screen.getByText('4.2%')).toBeInTheDocument(); // Conversion rate
                expect(_testutils.screen.getByText('32%')).toBeInTheDocument(); // Bounce rate
            });
        });
        it('should show user journey analytics', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SessionRecordingDashboard.SessionRecordingDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                // Check user journeys
                expect(_testutils.screen.getByText('User Journeys')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Landing → Pricing → Signup')).toBeInTheDocument();
                expect(_testutils.screen.getByText('234 users')).toBeInTheDocument();
                expect(_testutils.screen.getByText('15% conversion')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Blog → Features → Trial')).toBeInTheDocument();
                expect(_testutils.screen.getByText('189 users')).toBeInTheDocument();
                expect(_testutils.screen.getByText('12% conversion')).toBeInTheDocument();
            });
        });
        it('should display top performing pages', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SessionRecordingDashboard.SessionRecordingDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                // Check top pages
                expect(_testutils.screen.getByText('Top Pages')).toBeInTheDocument();
                expect(_testutils.screen.getByText('/pricing')).toBeInTheDocument();
                expect(_testutils.screen.getByText('/features')).toBeInTheDocument();
                expect(_testutils.screen.getByText('/dashboard')).toBeInTheDocument();
            });
        });
        it('should show session heatmap data', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_SessionRecordingDashboard.SessionRecordingDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                // Check heatmap visualization
                expect(_testutils.screen.getByTestId('session-heatmap')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Click Heatmap')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Scroll Depth')).toBeInTheDocument();
            });
        });
    });
    describe('Performance Monitoring', ()=>{
        it('should display Core Web Vitals metrics', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_WorkflowPerformanceDashboard.WorkflowPerformanceDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                // Check Core Web Vitals
                expect(_testutils.screen.getByText('Page Load Time')).toBeInTheDocument();
                expect(_testutils.screen.getByText('1.2s')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Time to Interactive')).toBeInTheDocument();
                expect(_testutils.screen.getByText('2.1s')).toBeInTheDocument();
                expect(_testutils.screen.getByText('First Contentful Paint')).toBeInTheDocument();
                expect(_testutils.screen.getByText('0.8s')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Cumulative Layout Shift')).toBeInTheDocument();
                expect(_testutils.screen.getByText('0.05')).toBeInTheDocument();
            });
        });
        it('should show uptime and error metrics', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_WorkflowPerformanceDashboard.WorkflowPerformanceDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                // Check uptime metrics
                expect(_testutils.screen.getByText('Uptime')).toBeInTheDocument();
                expect(_testutils.screen.getByText('99.87%')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Error Rate')).toBeInTheDocument();
                expect(_testutils.screen.getByText('0.2%')).toBeInTheDocument();
            });
        });
        it('should display performance trends over time', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_WorkflowPerformanceDashboard.WorkflowPerformanceDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                // Check performance charts
                expect(_testutils.screen.getByTestId('performance-trends')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Performance Trends')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Response Time')).toBeInTheDocument();
            });
        });
    });
    describe('MCP Integration Monitoring', ()=>{
        it('should display MCP server connection status', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_WorkflowPerformanceDashboard.WorkflowPerformanceDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                // Check MCP status
                expect(_testutils.screen.getByTestId('mcp-status-panel')).toBeInTheDocument();
                expect(_testutils.screen.getByText('MCP Servers')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Connected')).toBeInTheDocument();
                // Check individual server status
                expect(_testutils.screen.getByText('leadpulse')).toBeInTheDocument();
                expect(_testutils.screen.getByText('analytics')).toBeInTheDocument();
                expect(_testutils.screen.getByText('workflows')).toBeInTheDocument();
                expect(_testutils.screen.getByText('campaigns')).toBeInTheDocument();
            });
        });
        it('should show MCP performance metrics', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_WorkflowPerformanceDashboard.WorkflowPerformanceDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                // Check MCP metrics
                expect(_testutils.screen.getByText('Data Latency')).toBeInTheDocument();
                expect(_testutils.screen.getByText('45ms')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Throughput')).toBeInTheDocument();
                expect(_testutils.screen.getByText('1,250 req/min')).toBeInTheDocument();
                expect(_testutils.screen.getByText('MCP Error Rate')).toBeInTheDocument();
                expect(_testutils.screen.getByText('0.1%')).toBeInTheDocument();
            });
        });
        it('should display MCP data synchronization status', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_WorkflowPerformanceDashboard.WorkflowPerformanceDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                // Check sync status
                expect(_testutils.screen.getByText('Last Sync')).toBeInTheDocument();
                expect(_testutils.screen.getByText('just now')).toBeInTheDocument();
                expect(_testutils.screen.getByTestId('sync-indicator')).toHaveClass('text-green-500');
            });
        });
    });
    describe('Error Handling and Resilience', ()=>{
        it('should handle monitoring API failures gracefully', async ()=>{
            global.fetch = jest.fn().mockRejectedValue(new Error('Monitoring service unavailable'));
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_WorkflowPerformanceDashboard.WorkflowPerformanceDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByRole('alert')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Monitoring data unavailable')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Retry')).toBeInTheDocument();
            });
        });
        it('should show degraded functionality when MCP is down', async ()=>{
            const mcpDownData = {
                ...mockMonitoringData,
                mcpMetrics: {
                    connected: false,
                    servers: [],
                    dataLatency: null,
                    throughput: 0,
                    errorRate: 1,
                    lastSync: null
                }
            };
            global.fetch = jest.fn().mockImplementation((url)=>{
                if (url.includes('/api/mcp/metrics')) {
                    return Promise.resolve({
                        ok: true,
                        json: ()=>Promise.resolve({
                                success: true,
                                data: mcpDownData.mcpMetrics
                            })
                    });
                }
                return Promise.resolve({
                    ok: true,
                    json: ()=>Promise.resolve({
                            success: true,
                            data: {}
                        })
                });
            });
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_WorkflowPerformanceDashboard.WorkflowPerformanceDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByText('MCP Disconnected')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Fallback Mode')).toBeInTheDocument();
                expect(_testutils.screen.getByTestId('degraded-indicator')).toBeInTheDocument();
            });
        });
        it('should handle partial data loading', async ()=>{
            global.fetch = jest.fn().mockImplementation((url)=>{
                if (url.includes('/api/workflows/monitoring')) {
                    return Promise.resolve({
                        ok: true,
                        json: ()=>Promise.resolve({
                                success: true,
                                data: mockMonitoringData.workflows
                            })
                    });
                }
                // Fail other endpoints
                return Promise.reject(new Error('Service unavailable'));
            });
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_WorkflowPerformanceDashboard.WorkflowPerformanceDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                // Should show available data
                expect(_testutils.screen.getByText('Active Workflows')).toBeInTheDocument();
                expect(_testutils.screen.getByText('12')).toBeInTheDocument();
                // Should show warnings for unavailable data
                expect(_testutils.screen.getByText('Some monitoring data unavailable')).toBeInTheDocument();
            });
        });
    });
    describe('Mobile Optimization for African Markets', ()=>{
        beforeEach(()=>{
            // Mock mobile viewport
            Object.defineProperty(window, 'innerWidth', {
                writable: true,
                configurable: true,
                value: 375
            });
        });
        it('should render mobile-optimized monitoring dashboard', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_WorkflowPerformanceDashboard.WorkflowPerformanceDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                // Check mobile layout
                expect(_testutils.screen.getByTestId('mobile-monitoring-dashboard')).toBeInTheDocument();
                expect(_testutils.screen.getByTestId('mobile-metrics-grid')).toHaveClass('grid-cols-1');
            });
        });
        it('should prioritize key metrics on mobile', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_WorkflowPerformanceDashboard.WorkflowPerformanceDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                // Should show essential metrics first
                const metricCards = _testutils.screen.getAllByTestId('metric-card');
                expect(metricCards[0]).toHaveTextContent('Success Rate');
                expect(metricCards[1]).toHaveTextContent('Active Workflows');
                expect(metricCards[2]).toHaveTextContent('Uptime');
            });
        });
        it('should optimize charts for mobile viewing', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_WorkflowPerformanceDashboard.WorkflowPerformanceDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                // Charts should be mobile-responsive
                const charts = _testutils.screen.getAllByTestId(/chart$/);
                charts.forEach((chart)=>{
                    expect(chart).toHaveClass('mobile-chart');
                });
            });
        });
        it('should show data usage warnings for African users', async ()=>{
            // Mock limited data connection
            Object.defineProperty(navigator, 'connection', {
                value: {
                    effectiveType: '3g',
                    saveData: true
                },
                configurable: true
            });
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_WorkflowPerformanceDashboard.WorkflowPerformanceDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByText('Data Saver Mode')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Reduced monitoring frequency')).toBeInTheDocument();
            });
        });
    });
    describe('Real-time Updates and Performance', ()=>{
        it('should update metrics in real-time', async ()=>{
            const mockWebSocket = {
                send: jest.fn(),
                close: jest.fn(),
                readyState: WebSocket.OPEN
            };
            global.WebSocket = jest.fn(()=>mockWebSocket);
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_WorkflowPerformanceDashboard.WorkflowPerformanceDashboard, {
                enableRealtime: true
            }));
            await (0, _testutils.waitFor)(()=>{
                // Should establish WebSocket connection
                expect(WebSocket).toHaveBeenCalledWith(expect.stringContaining('ws://localhost:3000/api/monitoring/ws'));
            });
            // Simulate real-time update
            const updateEvent = new MessageEvent('message', {
                data: JSON.stringify({
                    type: 'workflow_completed',
                    data: {
                        workflowId: 'wf_123',
                        success: true,
                        duration: 180
                    }
                })
            });
            mockWebSocket.onmessage?.(updateEvent);
            await (0, _testutils.waitFor)(()=>{
                // Should update displayed metrics
                expect(_testutils.screen.getByTestId('realtime-indicator')).toHaveClass('animate-pulse');
            });
        });
        it('should render within performance thresholds', async ()=>{
            const renderTime = await (0, _testutils.measureComponentPerformance)(()=>(0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_WorkflowPerformanceDashboard.WorkflowPerformanceDashboard, {})), 'Monitoring Dashboard');
            expect(renderTime).toBeLessThan(_testutils.PERFORMANCE_THRESHOLDS.COMPONENT_RENDER);
        });
        it('should handle large monitoring datasets efficiently', async ()=>{
            // Mock large dataset
            const largeMonitoringData = {
                ...mockMonitoringData,
                workflows: {
                    ...mockMonitoringData.workflows,
                    performanceMetrics: Array.from({
                        length: 100
                    }, (_, i)=>({
                            name: `Workflow ${i}`,
                            executions: Math.floor(Math.random() * 500),
                            successRate: Math.random(),
                            avgTime: Math.floor(Math.random() * 1000)
                        }))
                }
            };
            global.fetch = jest.fn().mockResolvedValue({
                ok: true,
                json: ()=>Promise.resolve({
                        success: true,
                        data: largeMonitoringData.workflows
                    })
            });
            const renderTime = await (0, _testutils.measureComponentPerformance)(()=>(0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_WorkflowPerformanceDashboard.WorkflowPerformanceDashboard, {})), 'Monitoring Dashboard with large dataset');
            expect(renderTime).toBeLessThan(_testutils.PERFORMANCE_THRESHOLDS.COMPONENT_RENDER * 2);
        });
    });
    describe('Accessibility and User Experience', ()=>{
        it('should meet accessibility standards', async ()=>{
            const { container } = (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_WorkflowPerformanceDashboard.WorkflowPerformanceDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                (0, _testutils.checkAccessibility)(container);
            });
            // Check semantic structure
            expect(_testutils.screen.getByRole('main')).toBeInTheDocument();
            expect(_testutils.screen.getByLabelText(/monitoring dashboard/i)).toBeInTheDocument();
        });
        it('should provide clear status indicators', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_WorkflowPerformanceDashboard.WorkflowPerformanceDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                // Status indicators should be clearly visible
                expect(_testutils.screen.getByTestId('overall-health')).toBeInTheDocument();
                expect(_testutils.screen.getByText('System Healthy')).toBeInTheDocument();
                expect(_testutils.screen.getByTestId('health-indicator')).toHaveClass('text-green-500');
            });
        });
        it('should show meaningful error messages', async ()=>{
            global.fetch = jest.fn().mockRejectedValue(new Error('Network timeout'));
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_WorkflowPerformanceDashboard.WorkflowPerformanceDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByText('Network timeout')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Check your internet connection')).toBeInTheDocument();
            });
        });
        it('should support keyboard navigation', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_WorkflowPerformanceDashboard.WorkflowPerformanceDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                // All interactive elements should be keyboard accessible
                const buttons = _testutils.screen.getAllByRole('button');
                buttons.forEach((button)=>{
                    expect(button).toHaveAttribute('tabIndex');
                });
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,