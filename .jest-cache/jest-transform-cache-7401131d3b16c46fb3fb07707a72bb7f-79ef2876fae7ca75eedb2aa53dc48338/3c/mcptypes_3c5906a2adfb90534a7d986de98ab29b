cb65a6c065c59cff4f0e3f6a3bca8253
/**
 * MCP Types for MarketSage
 * 
 * This file defines all TypeScript interfaces and types used by the MCP implementation.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    CampaignAnalyticsQuerySchema: function() {
        return CampaignAnalyticsQuerySchema;
    },
    CustomerQuerySchema: function() {
        return CustomerQuerySchema;
    },
    LeadPulseQuerySchema: function() {
        return LeadPulseQuerySchema;
    },
    MCPAuthenticationError: function() {
        return MCPAuthenticationError;
    },
    MCPAuthorizationError: function() {
        return MCPAuthorizationError;
    },
    MCPRateLimitError: function() {
        return MCPRateLimitError;
    },
    MCPValidationError: function() {
        return MCPValidationError;
    },
    MonitoringQuerySchema: function() {
        return MonitoringQuerySchema;
    },
    SendMessageSchema: function() {
        return SendMessageSchema;
    }
});
const _zod = require("zod");
const CustomerQuerySchema = _zod.z.object({
    id: _zod.z.string().optional(),
    email: _zod.z.string().optional(),
    phone: _zod.z.string().optional(),
    organizationId: _zod.z.string().optional(),
    limit: _zod.z.number().min(1).max(100).default(10),
    offset: _zod.z.number().min(0).default(0),
    includeSegments: _zod.z.boolean().default(false),
    includePredictions: _zod.z.boolean().default(false)
});
const CampaignAnalyticsQuerySchema = _zod.z.object({
    campaignId: _zod.z.string().optional(),
    organizationId: _zod.z.string().optional(),
    type: _zod.z.enum([
        'EMAIL',
        'SMS',
        'WHATSAPP'
    ]).optional(),
    dateFrom: _zod.z.string().optional(),
    dateTo: _zod.z.string().optional(),
    limit: _zod.z.number().min(1).max(100).default(10),
    offset: _zod.z.number().min(0).default(0),
    includeABTests: _zod.z.boolean().default(false)
});
const LeadPulseQuerySchema = _zod.z.object({
    visitorId: _zod.z.string().optional(),
    sessionId: _zod.z.string().optional(),
    organizationId: _zod.z.string().optional(),
    dateFrom: _zod.z.string().optional(),
    dateTo: _zod.z.string().optional(),
    limit: _zod.z.number().min(1).max(100).default(10),
    offset: _zod.z.number().min(0).default(0),
    includeHeatmap: _zod.z.boolean().default(false),
    includeJourney: _zod.z.boolean().default(false)
});
const SendMessageSchema = _zod.z.object({
    type: _zod.z.enum([
        'EMAIL',
        'SMS',
        'WHATSAPP'
    ]),
    to: _zod.z.string(),
    subject: _zod.z.string().optional(),
    content: _zod.z.string(),
    templateId: _zod.z.string().optional(),
    organizationId: _zod.z.string()
});
const MonitoringQuerySchema = _zod.z.object({
    metric: _zod.z.enum([
        'users',
        'campaigns',
        'revenue',
        'ai-performance',
        'system-health'
    ]),
    organizationId: _zod.z.string().optional(),
    timeRange: _zod.z.enum([
        '1h',
        '1d',
        '7d',
        '30d'
    ]).default('1d'),
    aggregation: _zod.z.enum([
        'avg',
        'sum',
        'max',
        'min',
        'count'
    ]).default('avg')
});
class MCPAuthenticationError extends Error {
    constructor(message){
        super(message);
        this.name = 'MCPAuthenticationError';
    }
}
class MCPAuthorizationError extends Error {
    constructor(message){
        super(message);
        this.name = 'MCPAuthorizationError';
    }
}
class MCPRateLimitError extends Error {
    constructor(message){
        super(message);
        this.name = 'MCPRateLimitError';
    }
}
class MCPValidationError extends Error {
    constructor(message, details){
        super(message);
        this.name = 'MCPValidationError';
        this.details = details;
    }
}

//# sourceMappingURL=data:application/json;base64,