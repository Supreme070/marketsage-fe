{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/__tests__/integration/mcp/monitoring-server.integration.test.ts"],"sourcesContent":["/**\n * Monitoring MCP Server Integration Tests\n * \n * These tests verify the Monitoring MCP server works correctly with real monitoring\n * metrics, system health data, and business KPI tracking.\n */\n\nimport { describe, beforeAll, afterAll, beforeEach, test, expect } from '@jest/jest';\nimport { MonitoringMCPServer } from '../../../mcp/servers/monitoring-server';\nimport { \n  TestDatabaseManager, \n  testPrisma, \n  PerformanceTracker,\n  testConfig\n} from './setup';\nimport { MCPAuthContext } from '../../../mcp/types/mcp-types';\n\ndescribe('Monitoring MCP Server Integration Tests', () => {\n  let server: MonitoringMCPServer;\n  let dbManager: TestDatabaseManager;\n  let performanceTracker: PerformanceTracker;\n  let authContext: MCPAuthContext;\n\n  beforeAll(async () => {\n    dbManager = TestDatabaseManager.getInstance();\n    await dbManager.setup();\n    \n    performanceTracker = new PerformanceTracker();\n    \n    server = new MonitoringMCPServer({\n      rateLimiting: {\n        enabled: false\n      }\n    });\n    \n    authContext = {\n      organizationId: 'test-org-1',\n      userId: 'test-user-1',\n      role: 'ADMIN',\n      permissions: ['read:monitoring', 'read:metrics']\n    };\n  }, testConfig.timeouts.database);\n\n  afterAll(async () => {\n    await dbManager.teardown();\n  });\n\n  beforeEach(() => {\n    performanceTracker.reset();\n  });\n\n  describe('Monitoring Metrics Data Integrity', () => {\n    test('should verify monitoring metrics data structure and relationships', async () => {\n      const metrics = await testPrisma.mCPMonitoringMetrics.findMany({\n        include: {\n          organization: true\n        }\n      });\n\n      expect(metrics.length).toBeGreaterThan(0);\n      \n      let globalMetrics = 0;\n      let orgSpecificMetrics = 0;\n      \n      for (const metric of metrics) {\n        // Verify basic structure\n        expect(metric.id).toBeDefined();\n        expect(metric.category).toBeDefined();\n        expect(metric.metricName).toBeDefined();\n        expect(typeof metric.metricValue).toBe('number');\n        expect(metric.unit).toBeDefined();\n        expect(metric.timestamp).toBeInstanceOf(Date);\n        \n        // Verify categories\n        const validCategories = ['business', 'system', 'security', 'infrastructure', 'system_overview'];\n        expect(validCategories).toContain(metric.category);\n        \n        // Verify alert levels\n        const validAlertLevels = ['info', 'warning', 'critical'];\n        expect(validAlertLevels).toContain(metric.alertLevel);\n        \n        // Count global vs org-specific metrics\n        if (metric.organizationId) {\n          orgSpecificMetrics++;\n          expect(metric.organization).toBeDefined();\n        } else {\n          globalMetrics++;\n        }\n        \n        // Verify metadata structure\n        if (metric.metadata) {\n          const metadata = JSON.parse(metric.metadata as string);\n          expect(typeof metadata).toBe('object');\n        }\n        \n        // Verify tags structure\n        if (metric.tags) {\n          const tags = JSON.parse(metric.tags as string);\n          expect(Array.isArray(tags)).toBe(true);\n        }\n      }\n      \n      expect(globalMetrics).toBeGreaterThan(0); // Should have global system metrics\n      console.log(`✅ Verified ${metrics.length} monitoring metrics (${globalMetrics} global, ${orgSpecificMetrics} org-specific)`);\n    });\n\n    test('should validate comprehensive monitoring snapshot structure', async () => {\n      // Find the comprehensive monitoring snapshot\n      const snapshot = await testPrisma.mCPMonitoringMetrics.findFirst({\n        where: {\n          metricName: 'comprehensive_monitoring',\n          category: 'system_overview'\n        }\n      });\n\n      expect(snapshot).toBeDefined();\n      expect(snapshot!.metadata).toBeDefined();\n      \n      const monitoringData = JSON.parse(snapshot!.metadata as string);\n      \n      // Verify main sections\n      expect(monitoringData).toHaveProperty('business_metrics');\n      expect(monitoringData).toHaveProperty('system_metrics');\n      expect(monitoringData).toHaveProperty('security_metrics');\n      expect(monitoringData).toHaveProperty('infrastructure_health');\n      expect(monitoringData).toHaveProperty('alerts');\n      expect(monitoringData).toHaveProperty('overall_health_score');\n      \n      // Verify business metrics\n      const businessMetrics = monitoringData.business_metrics;\n      expect(businessMetrics).toHaveProperty('total_users');\n      expect(businessMetrics).toHaveProperty('total_organizations');\n      expect(businessMetrics).toHaveProperty('total_contacts');\n      expect(businessMetrics).toHaveProperty('total_campaigns');\n      expect(businessMetrics).toHaveProperty('monthly_recurring_revenue');\n      expect(businessMetrics).toHaveProperty('conversion_rate');\n      \n      // Verify system metrics\n      const systemMetrics = monitoringData.system_metrics;\n      expect(systemMetrics).toHaveProperty('avg_response_time');\n      expect(systemMetrics).toHaveProperty('error_rate_percentage');\n      expect(systemMetrics).toHaveProperty('cpu_usage_percentage');\n      expect(systemMetrics).toHaveProperty('memory_usage_percentage');\n      expect(systemMetrics).toHaveProperty('uptime_percentage');\n      \n      // Verify security metrics\n      const securityMetrics = monitoringData.security_metrics;\n      expect(securityMetrics).toHaveProperty('security_score');\n      expect(securityMetrics).toHaveProperty('compliance_score');\n      expect(securityMetrics).toHaveProperty('failed_login_attempts_today');\n      \n      // Verify infrastructure health\n      const infraHealth = monitoringData.infrastructure_health;\n      expect(Array.isArray(infraHealth)).toBe(true);\n      for (const component of infraHealth) {\n        expect(component).toHaveProperty('name');\n        expect(component).toHaveProperty('type');\n        expect(component).toHaveProperty('status');\n        expect(component).toHaveProperty('health_score');\n        expect(component).toHaveProperty('response_time_ms');\n      }\n      \n      // Verify alerts\n      const alerts = monitoringData.alerts;\n      expect(Array.isArray(alerts)).toBe(true);\n      for (const alert of alerts) {\n        expect(alert).toHaveProperty('name');\n        expect(alert).toHaveProperty('condition');\n        expect(alert).toHaveProperty('severity');\n        expect(alert).toHaveProperty('threshold');\n        expect(alert).toHaveProperty('current_value');\n        expect(alert).toHaveProperty('is_triggered');\n      }\n      \n      // Verify African market insights\n      expect(monitoringData).toHaveProperty('market_insights');\n      const marketInsights = monitoringData.market_insights;\n      expect(marketInsights).toHaveProperty('mobile_vs_desktop_ratio');\n      expect(marketInsights).toHaveProperty('whatsapp_adoption_rate');\n      expect(marketInsights).toHaveProperty('currency_distribution');\n      \n      console.log('✅ Comprehensive monitoring snapshot structure validated');\n    });\n  });\n\n  describe('System Health Monitoring', () => {\n    test('should retrieve system health overview', async () => {\n      performanceTracker.start();\n      \n      const result = await server.readResource(\n        'monitoring://system-health',\n        {\n          organizationId: 'test-org-1'\n        },\n        authContext\n      );\n      \n      const duration = performanceTracker.measure('systemHealth');\n      \n      expect(result.success).toBe(true);\n      expect(result.data).toBeDefined();\n      \n      const data = result.data;\n      expect(data).toHaveProperty('overallHealth');\n      expect(data).toHaveProperty('components');\n      expect(data).toHaveProperty('metrics');\n      expect(data).toHaveProperty('alerts');\n      \n      // Verify overall health score\n      expect(data.overallHealth.score).toBeGreaterThanOrEqual(0);\n      expect(data.overallHealth.score).toBeLessThanOrEqual(100);\n      expect(data.overallHealth.status).toBeDefined();\n      \n      // Verify components\n      expect(Array.isArray(data.components)).toBe(true);\n      for (const component of data.components) {\n        expect(component).toHaveProperty('name');\n        expect(component).toHaveProperty('status');\n        expect(component).toHaveProperty('healthScore');\n        expect(component).toHaveProperty('responseTime');\n        expect(['healthy', 'degraded', 'unhealthy']).toContain(component.status);\n      }\n      \n      // Verify metrics\n      expect(data.metrics).toHaveProperty('responseTime');\n      expect(data.metrics).toHaveProperty('errorRate');\n      expect(data.metrics).toHaveProperty('throughput');\n      expect(data.metrics).toHaveProperty('uptime');\n      \n      expect(duration).toBeLessThan(testConfig.performance.maxResponseTime);\n      console.log(`✅ Retrieved system health with ${data.components.length} components in ${duration}ms`);\n    });\n\n    test('should monitor business KPIs and metrics', async () => {\n      performanceTracker.start();\n      \n      const result = await server.readResource(\n        'monitoring://business-metrics',\n        {\n          organizationId: 'test-org-1',\n          timeRange: 'last_30_days'\n        },\n        authContext\n      );\n      \n      const duration = performanceTracker.measure('businessMetrics');\n      \n      expect(result.success).toBe(true);\n      const data = result.data;\n      \n      expect(data).toHaveProperty('kpis');\n      expect(data).toHaveProperty('growth');\n      expect(data).toHaveProperty('conversion');\n      expect(data).toHaveProperty('revenue');\n      \n      // Verify KPIs\n      const kpis = data.kpis;\n      expect(kpis).toHaveProperty('totalUsers');\n      expect(kpis).toHaveProperty('activeUsers');\n      expect(kpis).toHaveProperty('totalOrganizations');\n      expect(kpis).toHaveProperty('totalCampaigns');\n      expect(kpis.totalUsers).toBeGreaterThanOrEqual(0);\n      expect(kpis.totalOrganizations).toBeGreaterThanOrEqual(0);\n      \n      // Verify growth metrics\n      const growth = data.growth;\n      expect(growth).toHaveProperty('userGrowthRate');\n      expect(growth).toHaveProperty('revenueGrowthRate');\n      expect(growth).toHaveProperty('churnRate');\n      \n      // Verify conversion metrics\n      const conversion = data.conversion;\n      expect(conversion).toHaveProperty('overallConversionRate');\n      expect(conversion).toHaveProperty('emailConversionRate');\n      expect(conversion).toHaveProperty('smsConversionRate');\n      expect(conversion).toHaveProperty('whatsappConversionRate');\n      \n      // Verify revenue metrics\n      const revenue = data.revenue;\n      expect(revenue).toHaveProperty('monthlyRecurringRevenue');\n      expect(revenue).toHaveProperty('revenuePerUser');\n      expect(revenue).toHaveProperty('totalRevenue');\n      \n      expect(duration).toBeLessThan(testConfig.performance.maxResponseTime);\n      console.log(`✅ Retrieved business metrics in ${duration}ms`);\n    });\n\n    test('should track infrastructure component health', async () => {\n      performanceTracker.start();\n      \n      const result = await server.readResource(\n        'monitoring://infrastructure',\n        {\n          organizationId: 'test-org-1'\n        },\n        authContext\n      );\n      \n      const duration = performanceTracker.measure('infrastructure');\n      \n      expect(result.success).toBe(true);\n      const data = result.data;\n      \n      expect(data).toHaveProperty('components');\n      expect(data).toHaveProperty('summary');\n      expect(data).toHaveProperty('criticalServices');\n      \n      // Verify components\n      expect(Array.isArray(data.components)).toBe(true);\n      expect(data.components.length).toBeGreaterThan(0);\n      \n      for (const component of data.components) {\n        expect(component).toHaveProperty('name');\n        expect(component).toHaveProperty('type');\n        expect(component).toHaveProperty('status');\n        expect(component).toHaveProperty('healthScore');\n        expect(component).toHaveProperty('responseTime');\n        expect(component).toHaveProperty('criticality');\n        \n        // Verify valid statuses\n        expect(['healthy', 'degraded', 'unhealthy']).toContain(component.status);\n        \n        // Verify health score range\n        expect(component.healthScore).toBeGreaterThanOrEqual(0);\n        expect(component.healthScore).toBeLessThanOrEqual(100);\n        \n        // Verify criticality levels\n        expect(['critical', 'high', 'medium', 'low']).toContain(component.criticality);\n      }\n      \n      // Verify summary\n      expect(data.summary).toHaveProperty('totalComponents');\n      expect(data.summary).toHaveProperty('healthyComponents');\n      expect(data.summary).toHaveProperty('degradedComponents');\n      expect(data.summary).toHaveProperty('unhealthyComponents');\n      expect(data.summary).toHaveProperty('overallHealthPercentage');\n      \n      expect(duration).toBeLessThan(testConfig.performance.maxResponseTime);\n      console.log(`✅ Tracked ${data.components.length} infrastructure components in ${duration}ms`);\n    });\n\n    test('should provide security and compliance monitoring', async () => {\n      performanceTracker.start();\n      \n      const result = await server.readResource(\n        'monitoring://security',\n        {\n          organizationId: 'test-org-1'\n        },\n        authContext\n      );\n      \n      const duration = performanceTracker.measure('security');\n      \n      expect(result.success).toBe(true);\n      const data = result.data;\n      \n      expect(data).toHaveProperty('securityScore');\n      expect(data).toHaveProperty('complianceScore');\n      expect(data).toHaveProperty('threats');\n      expect(data).toHaveProperty('vulnerabilities');\n      expect(data).toHaveProperty('auditEvents');\n      expect(data).toHaveProperty('gdprCompliance');\n      \n      // Verify security score\n      expect(data.securityScore).toBeGreaterThanOrEqual(0);\n      expect(data.securityScore).toBeLessThanOrEqual(100);\n      \n      // Verify compliance score\n      expect(data.complianceScore).toBeGreaterThanOrEqual(0);\n      expect(data.complianceScore).toBeLessThanOrEqual(100);\n      \n      // Verify threats\n      expect(data.threats).toHaveProperty('failedLogins');\n      expect(data.threats).toHaveProperty('suspiciousActivity');\n      expect(data.threats).toHaveProperty('criticalEvents');\n      \n      // Verify vulnerabilities\n      expect(data.vulnerabilities).toHaveProperty('critical');\n      expect(data.vulnerabilities).toHaveProperty('high');\n      expect(data.vulnerabilities).toHaveProperty('medium');\n      expect(data.vulnerabilities).toHaveProperty('low');\n      \n      // Verify GDPR compliance\n      expect(data.gdprCompliance).toHaveProperty('consentRate');\n      expect(data.gdprCompliance).toHaveProperty('dataRequests');\n      expect(data.gdprCompliance).toHaveProperty('deletionRequests');\n      \n      expect(duration).toBeLessThan(testConfig.performance.maxResponseTime);\n      console.log(`✅ Retrieved security monitoring in ${duration}ms`);\n    });\n  });\n\n  describe('Alerting and Notifications', () => {\n    test('should retrieve active alerts and warnings', async () => {\n      performanceTracker.start();\n      \n      const result = await server.readResource(\n        'monitoring://alerts',\n        {\n          organizationId: 'test-org-1',\n          severity: 'all'\n        },\n        authContext\n      );\n      \n      const duration = performanceTracker.measure('alerts');\n      \n      expect(result.success).toBe(true);\n      const data = result.data;\n      \n      expect(data).toHaveProperty('activeAlerts');\n      expect(data).toHaveProperty('alertSummary');\n      expect(data).toHaveProperty('recentAlerts');\n      \n      // Verify active alerts structure\n      expect(Array.isArray(data.activeAlerts)).toBe(true);\n      for (const alert of data.activeAlerts) {\n        expect(alert).toHaveProperty('id');\n        expect(alert).toHaveProperty('name');\n        expect(alert).toHaveProperty('severity');\n        expect(alert).toHaveProperty('condition');\n        expect(alert).toHaveProperty('threshold');\n        expect(alert).toHaveProperty('currentValue');\n        expect(alert).toHaveProperty('isTriggered');\n        expect(alert).toHaveProperty('description');\n        \n        // Verify severity levels\n        expect(['info', 'warning', 'critical']).toContain(alert.severity);\n      }\n      \n      // Verify alert summary\n      expect(data.alertSummary).toHaveProperty('total');\n      expect(data.alertSummary).toHaveProperty('critical');\n      expect(data.alertSummary).toHaveProperty('warning');\n      expect(data.alertSummary).toHaveProperty('info');\n      \n      expect(duration).toBeLessThan(testConfig.performance.maxResponseTime);\n      console.log(`✅ Retrieved ${data.activeAlerts.length} alerts in ${duration}ms`);\n    });\n\n    test('should filter alerts by severity level', async () => {\n      const severityLevels = ['critical', 'warning', 'info'];\n      \n      for (const severity of severityLevels) {\n        performanceTracker.start();\n        \n        const result = await server.readResource(\n          'monitoring://alerts',\n          {\n            organizationId: 'test-org-1',\n            severity: severity\n          },\n          authContext\n        );\n        \n        const duration = performanceTracker.measure(`alerts_${severity}`);\n        \n        expect(result.success).toBe(true);\n        const data = result.data;\n        \n        // Verify all returned alerts match the requested severity\n        for (const alert of data.activeAlerts) {\n          expect(alert.severity).toBe(severity);\n        }\n        \n        expect(duration).toBeLessThan(testConfig.performance.maxResponseTime);\n      }\n      \n      console.log('✅ Validated alert filtering by severity levels');\n    });\n  });\n\n  describe('Performance Metrics and Trends', () => {\n    test('should provide performance trend analysis', async () => {\n      performanceTracker.start();\n      \n      const result = await server.readResource(\n        'monitoring://performance-trends',\n        {\n          organizationId: 'test-org-1',\n          timeRange: 'last_24_hours'\n        },\n        authContext\n      );\n      \n      const duration = performanceTracker.measure('performanceTrends');\n      \n      expect(result.success).toBe(true);\n      const data = result.data;\n      \n      expect(data).toHaveProperty('responseTime');\n      expect(data).toHaveProperty('errorRate');\n      expect(data).toHaveProperty('throughput');\n      expect(data).toHaveProperty('userActivity');\n      expect(data).toHaveProperty('revenue');\n      \n      // Verify response time trend\n      const responseTimeTrend = data.responseTime;\n      expect(responseTimeTrend).toHaveProperty('current');\n      expect(responseTimeTrend).toHaveProperty('trend');\n      expect(responseTimeTrend).toHaveProperty('timeSeries');\n      expect(Array.isArray(responseTimeTrend.timeSeries)).toBe(true);\n      \n      // Verify time series data points\n      for (const point of responseTimeTrend.timeSeries) {\n        expect(point).toHaveProperty('timestamp');\n        expect(point).toHaveProperty('value');\n        expect(typeof point.value).toBe('number');\n      }\n      \n      // Verify error rate trend\n      const errorRateTrend = data.errorRate;\n      expect(errorRateTrend).toHaveProperty('current');\n      expect(errorRateTrend).toHaveProperty('trend');\n      expect(errorRateTrend.current).toBeGreaterThanOrEqual(0);\n      expect(errorRateTrend.current).toBeLessThanOrEqual(100);\n      \n      expect(duration).toBeLessThan(testConfig.performance.maxResponseTime);\n      console.log(`✅ Analyzed performance trends in ${duration}ms`);\n    });\n\n    test('should calculate system capacity and utilization', async () => {\n      performanceTracker.start();\n      \n      const result = await server.readResource(\n        'monitoring://capacity',\n        {\n          organizationId: 'test-org-1'\n        },\n        authContext\n      );\n      \n      const duration = performanceTracker.measure('capacity');\n      \n      expect(result.success).toBe(true);\n      const data = result.data;\n      \n      expect(data).toHaveProperty('cpu');\n      expect(data).toHaveProperty('memory');\n      expect(data).toHaveProperty('storage');\n      expect(data).toHaveProperty('database');\n      expect(data).toHaveProperty('recommendations');\n      \n      // Verify CPU utilization\n      expect(data.cpu).toHaveProperty('current');\n      expect(data.cpu).toHaveProperty('average');\n      expect(data.cpu).toHaveProperty('peak');\n      expect(data.cpu.current).toBeGreaterThanOrEqual(0);\n      expect(data.cpu.current).toBeLessThanOrEqual(100);\n      \n      // Verify memory utilization\n      expect(data.memory).toHaveProperty('current');\n      expect(data.memory).toHaveProperty('available');\n      expect(data.memory).toHaveProperty('utilized');\n      \n      // Verify database metrics\n      expect(data.database).toHaveProperty('connections');\n      expect(data.database).toHaveProperty('queryTime');\n      expect(data.database).toHaveProperty('cacheHitRate');\n      \n      // Verify recommendations\n      expect(Array.isArray(data.recommendations)).toBe(true);\n      for (const recommendation of data.recommendations) {\n        expect(recommendation).toHaveProperty('type');\n        expect(recommendation).toHaveProperty('priority');\n        expect(recommendation).toHaveProperty('description');\n        expect(recommendation).toHaveProperty('impact');\n      }\n      \n      expect(duration).toBeLessThan(testConfig.performance.maxResponseTime);\n      console.log(`✅ Calculated system capacity in ${duration}ms`);\n    });\n  });\n\n  describe('African Market Specific Monitoring', () => {\n    test('should track African market-specific metrics', async () => {\n      performanceTracker.start();\n      \n      const result = await server.readResource(\n        'monitoring://african-market-insights',\n        {\n          organizationId: 'test-org-1'\n        },\n        authContext\n      );\n      \n      const duration = performanceTracker.measure('africanMarketInsights');\n      \n      expect(result.success).toBe(true);\n      const data = result.data;\n      \n      expect(data).toHaveProperty('mobileUsage');\n      expect(data).toHaveProperty('whatsappPenetration');\n      expect(data).toHaveProperty('smsReliability');\n      expect(data).toHaveProperty('countriesServed');\n      expect(data).toHaveProperty('peakUsageHours');\n      expect(data).toHaveProperty('currencyDistribution');\n      \n      // Verify mobile usage (should be high for African market)\n      expect(data.mobileUsage).toHaveProperty('percentage');\n      expect(data.mobileUsage.percentage).toBeGreaterThan(70);\n      \n      // Verify WhatsApp penetration\n      expect(data.whatsappPenetration).toHaveProperty('percentage');\n      expect(data.whatsappPenetration.percentage).toBeGreaterThan(60);\n      \n      // Verify SMS reliability\n      expect(data.smsReliability).toHaveProperty('percentage');\n      expect(data.smsReliability.percentage).toBeGreaterThan(80);\n      \n      // Verify countries served\n      expect(Array.isArray(data.countriesServed)).toBe(true);\n      const expectedCountries = ['Nigeria', 'Ghana', 'Kenya', 'South Africa', 'Egypt'];\n      const hasAfricanCountries = expectedCountries.some(country => \n        data.countriesServed.includes(country)\n      );\n      expect(hasAfricanCountries).toBe(true);\n      \n      // Verify peak usage hours (African time zones)\n      expect(Array.isArray(data.peakUsageHours)).toBe(true);\n      expect(data.peakUsageHours.length).toBeGreaterThan(0);\n      \n      // Verify currency distribution\n      expect(data.currencyDistribution).toHaveProperty('NGN'); // Nigerian Naira\n      expect(data.currencyDistribution).toHaveProperty('GHS'); // Ghanaian Cedi\n      expect(data.currencyDistribution).toHaveProperty('KES'); // Kenyan Shilling\n      \n      expect(duration).toBeLessThan(testConfig.performance.maxResponseTime);\n      console.log(`✅ Retrieved African market insights in ${duration}ms`);\n    });\n  });\n\n  describe('Performance and Scalability', () => {\n    test('should handle monitoring dashboard queries efficiently', async () => {\n      const dashboardQueries = [\n        'monitoring://system-health',\n        'monitoring://business-metrics',\n        'monitoring://infrastructure',\n        'monitoring://security',\n        'monitoring://alerts'\n      ];\n      \n      performanceTracker.start();\n      \n      const promises = dashboardQueries.map(query => \n        server.readResource(\n          query,\n          { organizationId: 'test-org-1' },\n          authContext\n        )\n      );\n      \n      const results = await Promise.all(promises);\n      const duration = performanceTracker.measure('dashboardQueries');\n      \n      // Verify all queries succeeded\n      for (const result of results) {\n        expect(result.success).toBe(true);\n        expect(result.data).toBeDefined();\n      }\n      \n      expect(duration).toBeLessThan(testConfig.performance.maxResponseTime * 3);\n      console.log(`✅ Executed ${dashboardQueries.length} dashboard queries in ${duration}ms`);\n    });\n\n    test('should validate monitoring query performance', async () => {\n      const startTime = Date.now();\n      \n      // Complex monitoring query with aggregations\n      const metrics = await testPrisma.mCPMonitoringMetrics.groupBy({\n        by: ['category', 'alertLevel'],\n        _count: { id: true },\n        _avg: { metricValue: true },\n        where: {\n          isActive: true,\n          timestamp: {\n            gte: new Date(Date.now() - 24 * 60 * 60 * 1000) // Last 24 hours\n          }\n        },\n        orderBy: {\n          _count: {\n            id: 'desc'\n          }\n        }\n      });\n      \n      const queryDuration = Date.now() - startTime;\n      \n      expect(metrics.length).toBeGreaterThan(0);\n      expect(queryDuration).toBeLessThan(testConfig.performance.maxQueryTime);\n      \n      console.log(`✅ Complex monitoring query: ${metrics.length} metric groups in ${queryDuration}ms`);\n    });\n  });\n\n  describe('Data Accuracy and Validation', () => {\n    test('should validate calculated business metrics against database', async () => {\n      // Get MCP server calculations\n      const serverResult = await server.readResource(\n        'monitoring://business-metrics',\n        { organizationId: 'test-org-1' },\n        authContext\n      );\n      \n      // Get actual database counts\n      const dbCounts = await dbManager.getDataCounts();\n      \n      expect(serverResult.success).toBe(true);\n      const serverData = serverResult.data;\n      \n      // Verify user counts match\n      expect(serverData.kpis.totalUsers).toBe(dbCounts.users);\n      expect(serverData.kpis.totalOrganizations).toBe(dbCounts.organizations);\n      \n      // Verify campaign counts\n      const totalCampaigns = dbCounts.emailCampaigns + dbCounts.smsCampaigns + dbCounts.whatsappCampaigns;\n      expect(serverData.kpis.totalCampaigns).toBe(totalCampaigns);\n      \n      console.log('✅ Business metrics validated against database');\n    });\n\n    test('should ensure health scores are within valid ranges', async () => {\n      const result = await server.readResource(\n        'monitoring://system-health',\n        { organizationId: 'test-org-1' },\n        authContext\n      );\n      \n      expect(result.success).toBe(true);\n      const data = result.data;\n      \n      // Verify overall health score\n      expect(data.overallHealth.score).toBeGreaterThanOrEqual(0);\n      expect(data.overallHealth.score).toBeLessThanOrEqual(100);\n      \n      // Verify component health scores\n      for (const component of data.components) {\n        expect(component.healthScore).toBeGreaterThanOrEqual(0);\n        expect(component.healthScore).toBeLessThanOrEqual(100);\n        \n        // Response time should be positive\n        expect(component.responseTime).toBeGreaterThan(0);\n      }\n      \n      console.log('✅ Health scores validated within proper ranges');\n    });\n  });\n\n  afterAll(() => {\n    const stats = performanceTracker.getAllStats();\n    console.log('\\n📊 Monitoring Server Performance Summary:');\n    for (const [operation, operationStats] of Object.entries(stats)) {\n      console.log(`  ${operation}: avg ${operationStats.avg}ms, min ${operationStats.min}ms, max ${operationStats.max}ms`);\n    }\n  });\n});\n"],"names":["describe","server","dbManager","performanceTracker","authContext","beforeAll","TestDatabaseManager","getInstance","setup","PerformanceTracker","MonitoringMCPServer","rateLimiting","enabled","organizationId","userId","role","permissions","testConfig","timeouts","database","afterAll","teardown","beforeEach","reset","test","metrics","testPrisma","mCPMonitoringMetrics","findMany","include","organization","expect","length","toBeGreaterThan","globalMetrics","orgSpecificMetrics","metric","id","toBeDefined","category","metricName","metricValue","toBe","unit","timestamp","toBeInstanceOf","Date","validCategories","toContain","validAlertLevels","alertLevel","metadata","JSON","parse","tags","Array","isArray","console","log","snapshot","findFirst","where","monitoringData","toHaveProperty","businessMetrics","business_metrics","systemMetrics","system_metrics","securityMetrics","security_metrics","infraHealth","infrastructure_health","component","alerts","alert","marketInsights","market_insights","start","result","readResource","duration","measure","success","data","overallHealth","score","toBeGreaterThanOrEqual","toBeLessThanOrEqual","status","components","toBeLessThan","performance","maxResponseTime","timeRange","kpis","totalUsers","totalOrganizations","growth","conversion","revenue","healthScore","criticality","summary","securityScore","complianceScore","threats","vulnerabilities","gdprCompliance","severity","activeAlerts","alertSummary","severityLevels","responseTimeTrend","responseTime","timeSeries","point","value","errorRateTrend","errorRate","current","cpu","memory","recommendations","recommendation","mobileUsage","percentage","whatsappPenetration","smsReliability","countriesServed","expectedCountries","hasAfricanCountries","some","country","includes","peakUsageHours","currencyDistribution","dashboardQueries","promises","map","query","results","Promise","all","startTime","now","groupBy","by","_count","_avg","isActive","gte","orderBy","queryDuration","maxQueryTime","serverResult","dbCounts","getDataCounts","serverData","users","organizations","totalCampaigns","emailCampaigns","smsCampaigns","whatsappCampaigns","stats","getAllStats","operation","operationStats","Object","entries","avg","min","max"],"mappings":"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"}