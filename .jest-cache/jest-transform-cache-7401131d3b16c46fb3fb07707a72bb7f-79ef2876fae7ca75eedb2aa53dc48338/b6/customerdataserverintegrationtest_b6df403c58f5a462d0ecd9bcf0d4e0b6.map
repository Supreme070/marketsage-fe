{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/__tests__/integration/mcp/customer-data-server.integration.test.ts"],"sourcesContent":["/**\n * Customer Data MCP Server Integration Tests\n * \n * These tests verify the Customer Data MCP server works correctly with real customer\n * prediction data, behavioral scoring, and segmentation.\n */\n\nimport { describe, beforeAll, afterAll, beforeEach, test, expect } from '@jest/jest';\nimport { CustomerDataMCPServer } from '../../../mcp/servers/customer-data-server';\nimport { \n  TestDatabaseManager, \n  testPrisma, \n  PerformanceTracker,\n  testConfig\n} from './setup';\nimport { MCPAuthContext } from '../../../mcp/types/mcp-types';\n\ndescribe('Customer Data MCP Server Integration Tests', () => {\n  let server: CustomerDataMCPServer;\n  let dbManager: TestDatabaseManager;\n  let performanceTracker: PerformanceTracker;\n  let authContext: MCPAuthContext;\n\n  beforeAll(async () => {\n    dbManager = TestDatabaseManager.getInstance();\n    await dbManager.setup();\n    \n    performanceTracker = new PerformanceTracker();\n    \n    server = new CustomerDataMCPServer({\n      rateLimiting: {\n        enabled: false\n      }\n    });\n    \n    authContext = {\n      organizationId: 'test-org-1',\n      userId: 'test-user-1',\n      role: 'ADMIN',\n      permissions: ['read:customers', 'read:predictions']\n    };\n  }, testConfig.timeouts.database);\n\n  afterAll(async () => {\n    await dbManager.teardown();\n  });\n\n  beforeEach(() => {\n    performanceTracker.reset();\n  });\n\n  describe('Customer Predictions Data Integrity', () => {\n    test('should verify customer prediction data relationships', async () => {\n      const predictions = await testPrisma.mCPCustomerPredictions.findMany({\n        include: {\n          contact: true,\n          organization: true\n        }\n      });\n\n      expect(predictions.length).toBeGreaterThan(0);\n      \n      for (const prediction of predictions) {\n        // Verify relationships\n        expect(prediction.contact).toBeDefined();\n        expect(prediction.organization).toBeDefined();\n        expect(prediction.contactId).toBe(prediction.contact.id);\n        expect(prediction.organizationId).toBe(prediction.organization.id);\n        \n        // Verify prediction scores are within valid ranges\n        expect(prediction.churnRisk).toBeGreaterThanOrEqual(0);\n        expect(prediction.churnRisk).toBeLessThanOrEqual(100);\n        expect(prediction.lifetimeValue).toBeGreaterThanOrEqual(0);\n        expect(prediction.engagementScore).toBeGreaterThanOrEqual(0);\n        expect(prediction.engagementScore).toBeLessThanOrEqual(100);\n        expect(prediction.confidenceScore).toBeGreaterThanOrEqual(0);\n        expect(prediction.confidenceScore).toBeLessThanOrEqual(100);\n        \n        // Verify behavioral scores structure\n        if (prediction.behavioralScores) {\n          const scores = JSON.parse(prediction.behavioralScores as string);\n          expect(scores).toHaveProperty('mobileUsage');\n          expect(scores).toHaveProperty('priceSensitivity');\n          expect(scores).toHaveProperty('whatsappPreference');\n          expect(scores.mobileUsage).toBeGreaterThanOrEqual(0);\n          expect(scores.mobileUsage).toBeLessThanOrEqual(100);\n        }\n        \n        // Verify insights structure\n        if (prediction.insights) {\n          const insights = JSON.parse(prediction.insights as string);\n          expect(Array.isArray(insights)).toBe(true);\n        }\n      }\n      \n      console.log(`✅ Verified ${predictions.length} customer predictions for data integrity`);\n    });\n\n    test('should validate customer segmentation distribution', async () => {\n      const segmentCounts = await testPrisma.mCPCustomerPredictions.groupBy({\n        by: ['segment'],\n        _count: { segment: true },\n        where: { organizationId: 'test-org-1' }\n      });\n\n      expect(segmentCounts.length).toBeGreaterThan(0);\n      \n      const validSegments = [\n        'VIP Customers', 'Growth Potential', 'At Risk', \n        'New Customers', 'Loyal Base', 'Price Sensitive', 'Inactive'\n      ];\n      \n      for (const segmentData of segmentCounts) {\n        expect(validSegments).toContain(segmentData.segment);\n        expect(segmentData._count.segment).toBeGreaterThan(0);\n      }\n      \n      console.log('✅ Customer segment distribution:', segmentCounts);\n    });\n  });\n\n  describe('MCP Server Operations', () => {\n    test('should retrieve customer segments with real data', async () => {\n      performanceTracker.start();\n      \n      const result = await server.readResource(\n        'customer://segments',\n        {\n          organizationId: 'test-org-1'\n        },\n        authContext\n      );\n      \n      const duration = performanceTracker.measure('getCustomerSegments');\n      \n      expect(result.success).toBe(true);\n      expect(result.data).toBeDefined();\n      \n      const data = result.data;\n      expect(data).toHaveProperty('segments');\n      expect(data).toHaveProperty('summary');\n      \n      // Verify segment data structure\n      for (const segment of data.segments) {\n        expect(segment).toHaveProperty('name');\n        expect(segment).toHaveProperty('count');\n        expect(segment).toHaveProperty('avgLifetimeValue');\n        expect(segment).toHaveProperty('avgChurnRisk');\n        expect(segment).toHaveProperty('avgEngagementScore');\n        \n        expect(segment.count).toBeGreaterThan(0);\n        expect(segment.avgLifetimeValue).toBeGreaterThanOrEqual(0);\n        expect(segment.avgChurnRisk).toBeGreaterThanOrEqual(0);\n        expect(segment.avgChurnRisk).toBeLessThanOrEqual(100);\n      }\n      \n      expect(duration).toBeLessThan(testConfig.performance.maxResponseTime);\n      console.log(`✅ Retrieved ${data.segments.length} customer segments in ${duration}ms`);\n    });\n\n    test('should get high-risk customers for retention', async () => {\n      performanceTracker.start();\n      \n      const result = await server.readResource(\n        'customer://at-risk',\n        {\n          organizationId: 'test-org-1',\n          riskThreshold: 70\n        },\n        authContext\n      );\n      \n      const duration = performanceTracker.measure('getAtRiskCustomers');\n      \n      expect(result.success).toBe(true);\n      expect(result.data).toBeDefined();\n      \n      const data = result.data;\n      expect(data).toHaveProperty('customers');\n      expect(data).toHaveProperty('totalAtRisk');\n      expect(data).toHaveProperty('recommendations');\n      \n      // Verify all returned customers meet risk threshold\n      for (const customer of data.customers) {\n        expect(customer.churnRisk).toBeGreaterThanOrEqual(70);\n        expect(customer).toHaveProperty('contactId');\n        expect(customer).toHaveProperty('nextBestAction');\n        expect(customer).toHaveProperty('urgencyLevel');\n      }\n      \n      expect(duration).toBeLessThan(testConfig.performance.maxResponseTime);\n      console.log(`✅ Retrieved ${data.customers.length} at-risk customers in ${duration}ms`);\n    });\n\n    test('should analyze customer lifetime value distribution', async () => {\n      performanceTracker.start();\n      \n      const result = await server.readResource(\n        'customer://ltv-analysis',\n        {\n          organizationId: 'test-org-1'\n        },\n        authContext\n      );\n      \n      const duration = performanceTracker.measure('ltvAnalysis');\n      \n      expect(result.success).toBe(true);\n      expect(result.data).toBeDefined();\n      \n      const data = result.data;\n      expect(data).toHaveProperty('distribution');\n      expect(data).toHaveProperty('percentiles');\n      expect(data).toHaveProperty('topCustomers');\n      expect(data).toHaveProperty('summary');\n      \n      // Verify LTV distribution\n      expect(data.distribution.length).toBeGreaterThan(0);\n      for (const bucket of data.distribution) {\n        expect(bucket).toHaveProperty('range');\n        expect(bucket).toHaveProperty('count');\n        expect(bucket).toHaveProperty('percentage');\n        expect(bucket.count).toBeGreaterThanOrEqual(0);\n      }\n      \n      // Verify percentiles\n      expect(data.percentiles).toHaveProperty('p25');\n      expect(data.percentiles).toHaveProperty('p50');\n      expect(data.percentiles).toHaveProperty('p75');\n      expect(data.percentiles).toHaveProperty('p90');\n      expect(data.percentiles.p25).toBeLessThanOrEqual(data.percentiles.p50);\n      expect(data.percentiles.p50).toBeLessThanOrEqual(data.percentiles.p75);\n      expect(data.percentiles.p75).toBeLessThanOrEqual(data.percentiles.p90);\n      \n      expect(duration).toBeLessThan(testConfig.performance.maxResponseTime);\n      console.log(`✅ Analyzed LTV distribution in ${duration}ms`);\n    });\n\n    test('should provide behavioral insights and recommendations', async () => {\n      performanceTracker.start();\n      \n      const result = await server.readResource(\n        'customer://behavioral-insights',\n        {\n          organizationId: 'test-org-1',\n          segmentFilter: 'Growth Potential'\n        },\n        authContext\n      );\n      \n      const duration = performanceTracker.measure('behavioralInsights');\n      \n      expect(result.success).toBe(true);\n      expect(result.data).toBeDefined();\n      \n      const data = result.data;\n      expect(data).toHaveProperty('insights');\n      expect(data).toHaveProperty('channelPreferences');\n      expect(data).toHaveProperty('behaviorPatterns');\n      expect(data).toHaveProperty('actionableRecommendations');\n      \n      // Verify channel preferences\n      const channelPrefs = data.channelPreferences;\n      expect(channelPrefs).toHaveProperty('whatsappPreference');\n      expect(channelPrefs).toHaveProperty('smsEngagement');\n      expect(channelPrefs).toHaveProperty('emailEffectiveness');\n      \n      // Verify behavior patterns\n      const patterns = data.behaviorPatterns;\n      expect(patterns).toHaveProperty('mobileUsage');\n      expect(patterns).toHaveProperty('priceSensitivity');\n      expect(patterns).toHaveProperty('socialInfluence');\n      \n      // Verify recommendations are actionable\n      expect(Array.isArray(data.actionableRecommendations)).toBe(true);\n      for (const recommendation of data.actionableRecommendations) {\n        expect(recommendation).toHaveProperty('action');\n        expect(recommendation).toHaveProperty('priority');\n        expect(recommendation).toHaveProperty('expectedImpact');\n      }\n      \n      expect(duration).toBeLessThan(testConfig.performance.maxResponseTime);\n      console.log(`✅ Generated behavioral insights in ${duration}ms`);\n    });\n  });\n\n  describe('Advanced Analytics and Predictions', () => {\n    test('should perform churn prediction analysis', async () => {\n      performanceTracker.start();\n      \n      const result = await server.readResource(\n        'customer://churn-prediction',\n        {\n          organizationId: 'test-org-1',\n          timeHorizon: '30_days'\n        },\n        authContext\n      );\n      \n      const duration = performanceTracker.measure('churnPrediction');\n      \n      expect(result.success).toBe(true);\n      const data = result.data;\n      \n      expect(data).toHaveProperty('riskDistribution');\n      expect(data).toHaveProperty('predictedChurners');\n      expect(data).toHaveProperty('retentionStrategies');\n      expect(data).toHaveProperty('potentialRevenueLoss');\n      \n      // Verify risk distribution\n      const riskDist = data.riskDistribution;\n      expect(riskDist).toHaveProperty('low');\n      expect(riskDist).toHaveProperty('medium');\n      expect(riskDist).toHaveProperty('high');\n      expect(riskDist).toHaveProperty('critical');\n      \n      // Verify predicted churners have high risk scores\n      for (const customer of data.predictedChurners) {\n        expect(customer.churnRisk).toBeGreaterThan(60);\n        expect(customer).toHaveProperty('retentionStrategy');\n        expect(customer).toHaveProperty('interventionUrgency');\n      }\n      \n      expect(duration).toBeLessThan(testConfig.performance.maxResponseTime);\n      console.log(`✅ Performed churn prediction analysis in ${duration}ms`);\n    });\n\n    test('should calculate customer engagement trends', async () => {\n      performanceTracker.start();\n      \n      const result = await server.readResource(\n        'customer://engagement-trends',\n        {\n          organizationId: 'test-org-1',\n          period: 'last_90_days'\n        },\n        authContext\n      );\n      \n      const duration = performanceTracker.measure('engagementTrends');\n      \n      expect(result.success).toBe(true);\n      const data = result.data;\n      \n      expect(data).toHaveProperty('trends');\n      expect(data).toHaveProperty('segmentComparison');\n      expect(data).toHaveProperty('engagementDrivers');\n      \n      // Verify trends data\n      expect(Array.isArray(data.trends)).toBe(true);\n      for (const trend of data.trends) {\n        expect(trend).toHaveProperty('period');\n        expect(trend).toHaveProperty('avgEngagementScore');\n        expect(trend).toHaveProperty('trend'); // 'increasing', 'decreasing', 'stable'\n      }\n      \n      // Verify segment comparison\n      expect(Array.isArray(data.segmentComparison)).toBe(true);\n      for (const comparison of data.segmentComparison) {\n        expect(comparison).toHaveProperty('segment');\n        expect(comparison).toHaveProperty('currentScore');\n        expect(comparison).toHaveProperty('previousScore');\n        expect(comparison).toHaveProperty('change');\n      }\n      \n      expect(duration).toBeLessThan(testConfig.performance.maxResponseTime);\n      console.log(`✅ Calculated engagement trends in ${duration}ms`);\n    });\n  });\n\n  describe('Performance and Scalability', () => {\n    test('should handle complex customer analytics queries efficiently', async () => {\n      const complexQueries = [\n        { resource: 'customer://segments', params: { organizationId: 'test-org-1' } },\n        { resource: 'customer://ltv-analysis', params: { organizationId: 'test-org-1' } },\n        { resource: 'customer://at-risk', params: { organizationId: 'test-org-1', riskThreshold: 70 } },\n        { resource: 'customer://behavioral-insights', params: { organizationId: 'test-org-1' } }\n      ];\n      \n      performanceTracker.start();\n      \n      const promises = complexQueries.map(query => \n        server.readResource(query.resource, query.params, authContext)\n      );\n      \n      const results = await Promise.all(promises);\n      const duration = performanceTracker.measure('complexQueriesConcurrent');\n      \n      // Verify all queries succeeded\n      for (const result of results) {\n        expect(result.success).toBe(true);\n        expect(result.data).toBeDefined();\n      }\n      \n      expect(duration).toBeLessThan(testConfig.performance.maxResponseTime * 3);\n      console.log(`✅ Executed ${complexQueries.length} complex queries concurrently in ${duration}ms`);\n    });\n\n    test('should validate database query optimization for customer data', async () => {\n      const startTime = Date.now();\n      \n      // Test complex query with joins and aggregations\n      const result = await testPrisma.mCPCustomerPredictions.findMany({\n        where: {\n          organizationId: 'test-org-1',\n          churnRisk: { gte: 50 }\n        },\n        include: {\n          contact: {\n            select: {\n              firstName: true,\n              lastName: true,\n              email: true,\n              status: true\n            }\n          }\n        },\n        orderBy: [\n          { churnRisk: 'desc' },\n          { lifetimeValue: 'desc' }\n        ]\n      });\n      \n      const queryDuration = Date.now() - startTime;\n      \n      expect(result.length).toBeGreaterThan(0);\n      expect(queryDuration).toBeLessThan(testConfig.performance.maxQueryTime);\n      \n      console.log(`✅ Complex customer query: ${result.length} records in ${queryDuration}ms`);\n    });\n  });\n\n  describe('Data Quality and Validation', () => {\n    test('should validate prediction model accuracy indicators', async () => {\n      const predictions = await testPrisma.mCPCustomerPredictions.findMany({\n        where: { organizationId: 'test-org-1' }\n      });\n\n      let totalConfidence = 0;\n      let validPredictions = 0;\n      \n      for (const prediction of predictions) {\n        // Verify confidence scores\n        expect(prediction.confidenceScore).toBeGreaterThanOrEqual(80); // Should be high confidence\n        totalConfidence += prediction.confidenceScore;\n        \n        // Verify logical consistency\n        if (prediction.segment === 'At Risk') {\n          expect(prediction.churnRisk).toBeGreaterThan(60);\n        }\n        if (prediction.segment === 'VIP Customers') {\n          expect(prediction.lifetimeValue).toBeGreaterThan(150);\n          expect(prediction.churnRisk).toBeLessThan(40);\n        }\n        \n        validPredictions++;\n      }\n      \n      const avgConfidence = totalConfidence / validPredictions;\n      expect(avgConfidence).toBeGreaterThan(85); // Average confidence should be high\n      \n      console.log(`✅ Validated ${validPredictions} predictions, avg confidence: ${avgConfidence.toFixed(1)}%`);\n    });\n\n    test('should ensure behavioral scores are realistic for African market', async () => {\n      const predictions = await testPrisma.mCPCustomerPredictions.findMany({\n        where: { organizationId: 'test-org-1' }\n      });\n\n      for (const prediction of predictions) {\n        if (prediction.behavioralScores) {\n          const scores = JSON.parse(prediction.behavioralScores as string);\n          \n          // African market characteristics\n          expect(scores.mobileUsage).toBeGreaterThan(70); // High mobile usage in Africa\n          expect(scores.whatsappPreference).toBeGreaterThan(60); // WhatsApp dominant\n          expect(scores.priceSensitivity).toBeGreaterThan(50); // Price sensitivity higher\n          \n          // Verify scores are within realistic ranges\n          Object.values(scores).forEach(score => {\n            expect(typeof score).toBe('number');\n            expect(score).toBeGreaterThanOrEqual(0);\n            expect(score).toBeLessThanOrEqual(100);\n          });\n        }\n      }\n      \n      console.log('✅ Validated behavioral scores for African market context');\n    });\n  });\n\n  afterAll(() => {\n    const stats = performanceTracker.getAllStats();\n    console.log('\\n📊 Customer Data Server Performance Summary:');\n    for (const [operation, operationStats] of Object.entries(stats)) {\n      console.log(`  ${operation}: avg ${operationStats.avg}ms, min ${operationStats.min}ms, max ${operationStats.max}ms`);\n    }\n  });\n});\n"],"names":["describe","server","dbManager","performanceTracker","authContext","beforeAll","TestDatabaseManager","getInstance","setup","PerformanceTracker","CustomerDataMCPServer","rateLimiting","enabled","organizationId","userId","role","permissions","testConfig","timeouts","database","afterAll","teardown","beforeEach","reset","test","predictions","testPrisma","mCPCustomerPredictions","findMany","include","contact","organization","expect","length","toBeGreaterThan","prediction","toBeDefined","contactId","toBe","id","churnRisk","toBeGreaterThanOrEqual","toBeLessThanOrEqual","lifetimeValue","engagementScore","confidenceScore","behavioralScores","scores","JSON","parse","toHaveProperty","mobileUsage","insights","Array","isArray","console","log","segmentCounts","groupBy","by","_count","segment","where","validSegments","segmentData","toContain","start","result","readResource","duration","measure","success","data","segments","count","avgLifetimeValue","avgChurnRisk","toBeLessThan","performance","maxResponseTime","riskThreshold","customer","customers","distribution","bucket","percentiles","p25","p50","p75","p90","segmentFilter","channelPrefs","channelPreferences","patterns","behaviorPatterns","actionableRecommendations","recommendation","timeHorizon","riskDist","riskDistribution","predictedChurners","period","trends","trend","segmentComparison","comparison","complexQueries","resource","params","promises","map","query","results","Promise","all","startTime","Date","now","gte","select","firstName","lastName","email","status","orderBy","queryDuration","maxQueryTime","totalConfidence","validPredictions","avgConfidence","toFixed","whatsappPreference","priceSensitivity","Object","values","forEach","score","stats","getAllStats","operation","operationStats","entries","avg","min","max"],"mappings":"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"}