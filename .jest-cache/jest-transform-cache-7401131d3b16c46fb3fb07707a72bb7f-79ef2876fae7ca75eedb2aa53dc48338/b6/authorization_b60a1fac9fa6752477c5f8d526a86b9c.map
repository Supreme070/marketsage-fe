{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/lib/security/authorization.ts"],"sourcesContent":["/**\n * Role-Based Access Control (RBAC) System\n * =======================================\n * Comprehensive authorization system with fine-grained permissions\n */\n\nimport { UserRole } from '@prisma/client';\nimport { logger } from '@/lib/logger';\nimport prisma from '@/lib/db/prisma';\n\n// Permission definitions\nexport enum Permission {\n  // User management\n  CREATE_USER = 'CREATE_USER',\n  UPDATE_USER = 'UPDATE_USER',\n  DELETE_USER = 'DELETE_USER',\n  VIEW_USER = 'VIEW_USER',\n  MANAGE_USER_ROLES = 'MANAGE_USER_ROLES',\n  \n  // Organization management\n  CREATE_ORGANIZATION = 'CREATE_ORGANIZATION',\n  UPDATE_ORGANIZATION = 'UPDATE_ORGANIZATION',\n  DELETE_ORGANIZATION = 'DELETE_ORGANIZATION',\n  VIEW_ORGANIZATION = 'VIEW_ORGANIZATION',\n  MANAGE_ORGANIZATION_SETTINGS = 'MANAGE_ORGANIZATION_SETTINGS',\n  \n  // Contact management\n  CREATE_CONTACT = 'CREATE_CONTACT',\n  UPDATE_CONTACT = 'UPDATE_CONTACT',\n  DELETE_CONTACT = 'DELETE_CONTACT',\n  VIEW_CONTACT = 'VIEW_CONTACT',\n  BULK_CONTACT_OPERATIONS = 'BULK_CONTACT_OPERATIONS',\n  EXPORT_CONTACTS = 'EXPORT_CONTACTS',\n  \n  // Campaign management\n  CREATE_CAMPAIGN = 'CREATE_CAMPAIGN',\n  UPDATE_CAMPAIGN = 'UPDATE_CAMPAIGN',\n  DELETE_CAMPAIGN = 'DELETE_CAMPAIGN',\n  VIEW_CAMPAIGN = 'VIEW_CAMPAIGN',\n  SEND_CAMPAIGN = 'SEND_CAMPAIGN',\n  SCHEDULE_CAMPAIGN = 'SCHEDULE_CAMPAIGN',\n  \n  // Task management\n  CREATE_TASK = 'CREATE_TASK',\n  UPDATE_TASK = 'UPDATE_TASK',\n  DELETE_TASK = 'DELETE_TASK',\n  VIEW_TASK = 'VIEW_TASK',\n  ASSIGN_TASK = 'ASSIGN_TASK',\n  \n  // Workflow management\n  CREATE_WORKFLOW = 'CREATE_WORKFLOW',\n  UPDATE_WORKFLOW = 'UPDATE_WORKFLOW',\n  DELETE_WORKFLOW = 'DELETE_WORKFLOW',\n  VIEW_WORKFLOW = 'VIEW_WORKFLOW',\n  EXECUTE_WORKFLOW = 'EXECUTE_WORKFLOW',\n  \n  // AI operations\n  USE_AI_FEATURES = 'USE_AI_FEATURES',\n  EXECUTE_AI_TASKS = 'EXECUTE_AI_TASKS',\n  APPROVE_AI_OPERATIONS = 'APPROVE_AI_OPERATIONS',\n  CONFIGURE_AI_SETTINGS = 'CONFIGURE_AI_SETTINGS',\n  \n  // Data operations\n  VIEW_ANALYTICS = 'VIEW_ANALYTICS',\n  EXPORT_DATA = 'EXPORT_DATA',\n  IMPORT_DATA = 'IMPORT_DATA',\n  DELETE_DATA = 'DELETE_DATA',\n  \n  // System administration\n  MANAGE_INTEGRATIONS = 'MANAGE_INTEGRATIONS',\n  MANAGE_BILLING = 'MANAGE_BILLING',\n  VIEW_SYSTEM_LOGS = 'VIEW_SYSTEM_LOGS',\n  MANAGE_SYSTEM_SETTINGS = 'MANAGE_SYSTEM_SETTINGS',\n  \n  // Security operations\n  MANAGE_SECURITY_SETTINGS = 'MANAGE_SECURITY_SETTINGS',\n  VIEW_SECURITY_LOGS = 'VIEW_SECURITY_LOGS',\n  MANAGE_API_KEYS = 'MANAGE_API_KEYS'\n}\n\n// Base permissions for each role\nconst userPermissions = [\n  Permission.VIEW_USER,\n  Permission.UPDATE_USER, // Own profile only\n  Permission.CREATE_CONTACT,\n  Permission.UPDATE_CONTACT,\n  Permission.VIEW_CONTACT,\n  Permission.CREATE_CAMPAIGN,\n  Permission.UPDATE_CAMPAIGN,\n  Permission.VIEW_CAMPAIGN,\n  Permission.SEND_CAMPAIGN,\n  Permission.SCHEDULE_CAMPAIGN,\n  Permission.CREATE_TASK,\n  Permission.UPDATE_TASK,\n  Permission.VIEW_TASK,\n  Permission.CREATE_WORKFLOW,\n  Permission.UPDATE_WORKFLOW,\n  Permission.VIEW_WORKFLOW,\n  Permission.EXECUTE_WORKFLOW,\n  Permission.USE_AI_FEATURES,\n  Permission.VIEW_ANALYTICS,\n  Permission.EXPORT_DATA,\n  Permission.IMPORT_DATA\n];\n\nconst adminPermissions = [\n  ...userPermissions,\n  Permission.DELETE_CONTACT,\n  Permission.BULK_CONTACT_OPERATIONS,\n  Permission.EXPORT_CONTACTS,\n  Permission.DELETE_CAMPAIGN,\n  Permission.DELETE_TASK,\n  Permission.ASSIGN_TASK,\n  Permission.DELETE_WORKFLOW,\n  Permission.EXECUTE_AI_TASKS,\n  Permission.DELETE_DATA,\n  Permission.MANAGE_INTEGRATIONS,\n  Permission.MANAGE_BILLING,\n  Permission.UPDATE_ORGANIZATION,\n  Permission.VIEW_ORGANIZATION,\n  Permission.MANAGE_ORGANIZATION_SETTINGS\n];\n\nconst itAdminPermissions = [\n  ...adminPermissions,\n  Permission.CREATE_USER,\n  Permission.UPDATE_USER,\n  Permission.DELETE_USER,\n  Permission.VIEW_SYSTEM_LOGS,\n  Permission.MANAGE_SYSTEM_SETTINGS,\n  Permission.MANAGE_SECURITY_SETTINGS,\n  Permission.VIEW_SECURITY_LOGS,\n  Permission.MANAGE_API_KEYS,\n  Permission.CONFIGURE_AI_SETTINGS,\n  Permission.APPROVE_AI_OPERATIONS\n];\n\nconst aiAgentPermissions = [\n  // AI Agent gets carefully selected permissions for autonomous operation\n  Permission.VIEW_USER,\n  Permission.CREATE_CONTACT,\n  Permission.UPDATE_CONTACT,\n  Permission.VIEW_CONTACT,\n  Permission.BULK_CONTACT_OPERATIONS,\n  Permission.CREATE_CAMPAIGN,\n  Permission.UPDATE_CAMPAIGN,\n  Permission.VIEW_CAMPAIGN,\n  Permission.SEND_CAMPAIGN,\n  Permission.SCHEDULE_CAMPAIGN,\n  Permission.CREATE_TASK,\n  Permission.UPDATE_TASK,\n  Permission.VIEW_TASK,\n  Permission.ASSIGN_TASK,\n  Permission.CREATE_WORKFLOW,\n  Permission.UPDATE_WORKFLOW,\n  Permission.VIEW_WORKFLOW,\n  Permission.EXECUTE_WORKFLOW,\n  Permission.USE_AI_FEATURES,\n  Permission.EXECUTE_AI_TASKS,\n  Permission.VIEW_ANALYTICS,\n  Permission.EXPORT_DATA,\n  Permission.IMPORT_DATA\n];\n\n// Role-based permission matrix\nconst rolePermissions: Record<UserRole, Permission[]> = {\n  [UserRole.USER]: userPermissions,\n  [UserRole.ADMIN]: adminPermissions,\n  [UserRole.IT_ADMIN]: itAdminPermissions,\n  [UserRole.SUPER_ADMIN]: Object.values(Permission),\n  [UserRole.AI_AGENT]: aiAgentPermissions\n};\n\n// Resource ownership validation\nexport interface ResourceOwnership {\n  userId?: string;\n  organizationId?: string;\n  createdById?: string;\n  assignedUserId?: string;\n}\n\nexport class AuthorizationService {\n  \n  /**\n   * Check if user has specific permission\n   */\n  static hasPermission(userRole: UserRole, permission: Permission): boolean {\n    const permissions = rolePermissions[userRole] || [];\n    return permissions.includes(permission);\n  }\n  \n  /**\n   * Check multiple permissions (user must have ALL)\n   */\n  static hasAllPermissions(userRole: UserRole, permissions: Permission[]): boolean {\n    return permissions.every(permission => this.hasPermission(userRole, permission));\n  }\n  \n  /**\n   * Check multiple permissions (user must have ANY)\n   */\n  static hasAnyPermission(userRole: UserRole, permissions: Permission[]): boolean {\n    return permissions.some(permission => this.hasPermission(userRole, permission));\n  }\n  \n  /**\n   * Validate resource access based on ownership\n   */\n  static async validateResourceAccess(\n    userId: string,\n    userRole: UserRole,\n    organizationId: string,\n    permission: Permission,\n    resourceOwnership: ResourceOwnership\n  ): Promise<{ allowed: boolean; reason?: string }> {\n    \n    // Super admin can access everything\n    if (userRole === UserRole.SUPER_ADMIN) {\n      return { allowed: true };\n    }\n    \n    // Check base permission\n    if (!this.hasPermission(userRole, permission)) {\n      return { \n        allowed: false, \n        reason: 'Insufficient permissions' \n      };\n    }\n    \n    // Check organization access\n    if (resourceOwnership.organizationId && resourceOwnership.organizationId !== organizationId) {\n      return { \n        allowed: false, \n        reason: 'Resource belongs to different organization' \n      };\n    }\n    \n    // Check user-specific access rules\n    switch (permission) {\n      case Permission.UPDATE_USER:\n      case Permission.VIEW_USER:\n        // Users can only view/update their own profile (unless admin+)\n        if (userRole === UserRole.USER && resourceOwnership.userId !== userId) {\n          return { \n            allowed: false, \n            reason: 'Can only access own profile' \n          };\n        }\n        break;\n        \n      case Permission.DELETE_USER:\n        // Prevent self-deletion\n        if (resourceOwnership.userId === userId) {\n          return { \n            allowed: false, \n            reason: 'Cannot delete own account' \n          };\n        }\n        break;\n        \n      case Permission.ASSIGN_TASK:\n        // Check if user can assign tasks to the target user\n        if (userRole === UserRole.USER && resourceOwnership.assignedUserId !== userId) {\n          return { \n            allowed: false, \n            reason: 'Can only assign tasks to self' \n          };\n        }\n        break;\n        \n      case Permission.APPROVE_AI_OPERATIONS:\n        // Only IT_ADMIN and SUPER_ADMIN can approve AI operations\n        if (userRole !== UserRole.IT_ADMIN && userRole !== UserRole.SUPER_ADMIN) {\n          return { \n            allowed: false, \n            reason: 'AI operation approval requires IT Admin privileges' \n          };\n        }\n        break;\n    }\n    \n    return { allowed: true };\n  }\n  \n  /**\n   * Validate bulk operation permissions\n   */\n  static async validateBulkOperation(\n    userId: string,\n    userRole: UserRole,\n    organizationId: string,\n    permission: Permission,\n    resourceCount: number\n  ): Promise<{ allowed: boolean; reason?: string; maxAllowed?: number }> {\n    \n    // Check base permission\n    if (!this.hasPermission(userRole, permission)) {\n      return { \n        allowed: false, \n        reason: 'Insufficient permissions' \n      };\n    }\n    \n    // Define bulk operation limits by role\n    const bulkLimits: Record<UserRole, number> = {\n      [UserRole.USER]: 100,\n      [UserRole.ADMIN]: 1000,\n      [UserRole.IT_ADMIN]: 5000,\n      [UserRole.SUPER_ADMIN]: 10000\n    };\n    \n    const maxAllowed = bulkLimits[userRole];\n    \n    if (resourceCount > maxAllowed) {\n      return {\n        allowed: false,\n        reason: `Bulk operation exceeds limit for your role`,\n        maxAllowed\n      };\n    }\n    \n    // Additional validation for sensitive operations\n    if (permission === Permission.DELETE_DATA && resourceCount > 10) {\n      // Require higher privileges for bulk delete\n      if (userRole === UserRole.USER) {\n        return {\n          allowed: false,\n          reason: 'Bulk delete requires admin privileges',\n          maxAllowed: 10\n        };\n      }\n    }\n    \n    return { allowed: true };\n  }\n  \n  /**\n   * Get user's effective permissions\n   */\n  static getUserPermissions(userRole: UserRole): Permission[] {\n    return rolePermissions[userRole] || [];\n  }\n  \n  /**\n   * Check if user can perform action on specific entity\n   */\n  static async canPerformAction(\n    userId: string,\n    userRole: UserRole,\n    organizationId: string,\n    action: string,\n    entityType: string,\n    entityId?: string\n  ): Promise<{ allowed: boolean; reason?: string }> {\n    \n    // Map action + entity to permission\n    const permissionMap: Record<string, Permission> = {\n      'CREATE_USER': Permission.CREATE_USER,\n      'UPDATE_USER': Permission.UPDATE_USER,\n      'DELETE_USER': Permission.DELETE_USER,\n      'VIEW_USER': Permission.VIEW_USER,\n      'CREATE_CONTACT': Permission.CREATE_CONTACT,\n      'UPDATE_CONTACT': Permission.UPDATE_CONTACT,\n      'DELETE_CONTACT': Permission.DELETE_CONTACT,\n      'VIEW_CONTACT': Permission.VIEW_CONTACT,\n      'CREATE_CAMPAIGN': Permission.CREATE_CAMPAIGN,\n      'UPDATE_CAMPAIGN': Permission.UPDATE_CAMPAIGN,\n      'DELETE_CAMPAIGN': Permission.DELETE_CAMPAIGN,\n      'VIEW_CAMPAIGN': Permission.VIEW_CAMPAIGN,\n      'CREATE_TASK': Permission.CREATE_TASK,\n      'UPDATE_TASK': Permission.UPDATE_TASK,\n      'DELETE_TASK': Permission.DELETE_TASK,\n      'VIEW_TASK': Permission.VIEW_TASK,\n      'EXECUTE_AI_TASKS': Permission.EXECUTE_AI_TASKS,\n      'APPROVE_AI_OPERATIONS': Permission.APPROVE_AI_OPERATIONS\n    };\n    \n    const permissionKey = `${action}_${entityType}`;\n    const permission = permissionMap[permissionKey];\n    \n    if (!permission) {\n      return { \n        allowed: false, \n        reason: `Unknown action: ${action} on ${entityType}` \n      };\n    }\n    \n    // Check base permission\n    if (!this.hasPermission(userRole, permission)) {\n      return { \n        allowed: false, \n        reason: 'Insufficient permissions' \n      };\n    }\n    \n    // If entity ID provided, check resource-specific access\n    if (entityId) {\n      try {\n        let resourceOwnership: ResourceOwnership = {};\n        \n        // Fetch resource ownership info based on entity type\n        switch (entityType) {\n          case 'USER':\n            const user = await prisma.user.findUnique({\n              where: { id: entityId },\n              select: { id: true, organizationId: true }\n            });\n            resourceOwnership = {\n              userId: user?.id,\n              organizationId: user?.organizationId || undefined\n            };\n            break;\n            \n          case 'CONTACT':\n            const contact = await prisma.contact.findUnique({\n              where: { id: entityId },\n              select: { organizationId: true, createdById: true }\n            });\n            resourceOwnership = {\n              organizationId: contact?.organizationId,\n              createdById: contact?.createdById\n            };\n            break;\n            \n          case 'CAMPAIGN':\n            const campaign = await prisma.emailCampaign.findUnique({\n              where: { id: entityId },\n              select: { organizationId: true, createdById: true }\n            });\n            resourceOwnership = {\n              organizationId: campaign?.organizationId,\n              createdById: campaign?.createdById\n            };\n            break;\n            \n          case 'TASK':\n            const task = await prisma.task.findUnique({\n              where: { id: entityId },\n              select: { organizationId: true, createdById: true, assigneeId: true }\n            });\n            resourceOwnership = {\n              organizationId: task?.organizationId,\n              createdById: task?.createdById,\n              assignedUserId: task?.assigneeId || undefined\n            };\n            break;\n        }\n        \n        return await this.validateResourceAccess(\n          userId,\n          userRole,\n          organizationId,\n          permission,\n          resourceOwnership\n        );\n        \n      } catch (error) {\n        logger.error('Authorization resource check failed', {\n          userId,\n          entityType,\n          entityId,\n          error: error instanceof Error ? error.message : String(error)\n        });\n        \n        return { \n          allowed: false, \n          reason: 'Failed to validate resource access' \n        };\n      }\n    }\n    \n    return { allowed: true };\n  }\n  \n  /**\n   * Log authorization events\n   */\n  static logAuthorizationEvent(\n    userId: string,\n    action: string,\n    resource: string,\n    allowed: boolean,\n    reason?: string\n  ): void {\n    logger.info('Authorization event', {\n      userId,\n      action,\n      resource,\n      allowed,\n      reason,\n      timestamp: new Date().toISOString()\n    });\n  }\n}\n\n// Export helper functions\nexport function requirePermission(userRole: UserRole, permission: Permission): boolean {\n  return AuthorizationService.hasPermission(userRole, permission);\n}\n\nexport function requireAnyPermission(userRole: UserRole, permissions: Permission[]): boolean {\n  return AuthorizationService.hasAnyPermission(userRole, permissions);\n}\n\nexport function requireAllPermissions(userRole: UserRole, permissions: Permission[]): boolean {\n  return AuthorizationService.hasAllPermissions(userRole, permissions);\n}"],"names":["AuthorizationService","Permission","requireAllPermissions","requireAnyPermission","requirePermission","userPermissions","adminPermissions","itAdminPermissions","aiAgentPermissions","rolePermissions","UserRole","USER","ADMIN","IT_ADMIN","SUPER_ADMIN","Object","values","AI_AGENT","hasPermission","userRole","permission","permissions","includes","hasAllPermissions","every","hasAnyPermission","some","validateResourceAccess","userId","organizationId","resourceOwnership","allowed","reason","assignedUserId","validateBulkOperation","resourceCount","bulkLimits","maxAllowed","getUserPermissions","canPerformAction","action","entityType","entityId","permissionMap","permissionKey","user","prisma","findUnique","where","id","select","undefined","contact","createdById","campaign","emailCampaign","task","assigneeId","error","logger","Error","message","String","logAuthorizationEvent","resource","info","timestamp","Date","toISOString"],"mappings":"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"}