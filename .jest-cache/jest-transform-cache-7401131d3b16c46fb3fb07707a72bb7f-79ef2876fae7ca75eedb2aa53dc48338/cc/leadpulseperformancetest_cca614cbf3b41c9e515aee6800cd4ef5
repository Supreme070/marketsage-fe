605623f6c57140aa05ea265e3052a8c8
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _perf_hooks = require("perf_hooks");
const _CustomerJourneyVisualization = require("../../components/leadpulse/CustomerJourneyVisualization");
const _BasicVisitorMap = require("../../components/leadpulse/BasicVisitorMap");
const _EngagementMetrics = require("../../components/leadpulse/EngagementMetrics");
const _FormTracker = require("../../components/leadpulse/FormTracker");
const _CoreAnalyticsDashboard = require("../../components/leadpulse/CoreAnalyticsDashboard");
const _testutils = require("../utils/test-utils");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Performance testing utilities
const measureRenderTime = async (renderFn)=>{
    const start = _perf_hooks.performance.now();
    renderFn();
    const end = _perf_hooks.performance.now();
    return end - start;
};
const measureInteractionTime = async (interactionFn)=>{
    const start = _perf_hooks.performance.now();
    interactionFn();
    const end = _perf_hooks.performance.now();
    return end - start;
};
describe('LeadPulse Components Performance Tests', ()=>{
    describe('CustomerJourneyVisualization Performance', ()=>{
        it('renders within performance threshold with small dataset', async ()=>{
            const smallDataset = Array.from({
                length: 10
            }, (_, i)=>(0, _testutils.mockCustomerJourney)({
                    sessionId: `session_${i}`
                }));
            const renderTime = await measureRenderTime(()=>{
                (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CustomerJourneyVisualization.CustomerJourneyVisualization, {
                    journeys: smallDataset
                }));
            });
            expect(renderTime).toBeLessThan(_testutils.PERFORMANCE_THRESHOLDS.COMPONENT_RENDER);
            console.log(`CustomerJourneyVisualization (10 items): ${renderTime.toFixed(2)}ms`);
        });
        it('handles medium dataset efficiently', async ()=>{
            const mediumDataset = Array.from({
                length: 100
            }, (_, i)=>(0, _testutils.mockCustomerJourney)({
                    sessionId: `session_${i}`
                }));
            const renderTime = await measureRenderTime(()=>{
                (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CustomerJourneyVisualization.CustomerJourneyVisualization, {
                    journeys: mediumDataset
                }));
            });
            expect(renderTime).toBeLessThan(_testutils.PERFORMANCE_THRESHOLDS.COMPONENT_RENDER * 2);
            console.log(`CustomerJourneyVisualization (100 items): ${renderTime.toFixed(2)}ms`);
        });
        it('handles large dataset without performance degradation', async ()=>{
            const largeDataset = Array.from({
                length: 1000
            }, (_, i)=>(0, _testutils.mockCustomerJourney)({
                    sessionId: `session_${i}`
                }));
            const renderTime = await measureRenderTime(()=>{
                (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CustomerJourneyVisualization.CustomerJourneyVisualization, {
                    journeys: largeDataset
                }));
            });
            expect(renderTime).toBeLessThan(_testutils.PERFORMANCE_THRESHOLDS.COMPONENT_RENDER * 5);
            console.log(`CustomerJourneyVisualization (1000 items): ${renderTime.toFixed(2)}ms`);
        });
        it('view mode switching is fast', async ()=>{
            const dataset = Array.from({
                length: 50
            }, (_, i)=>(0, _testutils.mockCustomerJourney)({
                    sessionId: `session_${i}`
                }));
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CustomerJourneyVisualization.CustomerJourneyVisualization, {
                journeys: dataset
            }));
            const interactionTime = await measureInteractionTime(()=>{
                const detailedButton = _react1.screen.getByRole('button', {
                    name: /detailed/i
                });
                _react1.fireEvent.click(detailedButton);
            });
            expect(interactionTime).toBeLessThan(_testutils.PERFORMANCE_THRESHOLDS.INTERACTION_RESPONSE);
            console.log(`View mode switch: ${interactionTime.toFixed(2)}ms`);
        });
        it('filtering operations are performant', async ()=>{
            const dataset = Array.from({
                length: 500
            }, (_, i)=>(0, _testutils.mockCustomerJourney)({
                    sessionId: `session_${i}`,
                    outcome: i % 2 === 0 ? 'converted' : 'abandoned'
                }));
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CustomerJourneyVisualization.CustomerJourneyVisualization, {
                journeys: dataset
            }));
            const interactionTime = await measureInteractionTime(()=>{
                const filterSelect = _react1.screen.getByDisplayValue('All Journeys');
                _react1.fireEvent.change(filterSelect, {
                    target: {
                        value: 'converted'
                    }
                });
            });
            expect(interactionTime).toBeLessThan(_testutils.PERFORMANCE_THRESHOLDS.INTERACTION_RESPONSE * 2);
            console.log(`Filter operation (500 items): ${interactionTime.toFixed(2)}ms`);
        });
    });
    describe('BasicVisitorMap Performance', ()=>{
        it('renders efficiently with multiple locations', async ()=>{
            const locations = Array.from({
                length: 100
            }, (_, i)=>(0, _testutils.mockVisitorLocation)({
                    city: `City${i}`,
                    visitors: Math.floor(Math.random() * 100)
                }));
            const renderTime = await measureRenderTime(()=>{
                (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BasicVisitorMap.BasicVisitorMap, {
                    locations: locations
                }));
            });
            expect(renderTime).toBeLessThan(_testutils.PERFORMANCE_THRESHOLDS.COMPONENT_RENDER);
            console.log(`BasicVisitorMap (100 locations): ${renderTime.toFixed(2)}ms`);
        });
        it('handles map interactions smoothly', async ()=>{
            const locations = Array.from({
                length: 50
            }, (_, i)=>(0, _testutils.mockVisitorLocation)({
                    city: `City${i}`
                }));
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BasicVisitorMap.BasicVisitorMap, {
                locations: locations
            }));
            const interactionTime = await measureInteractionTime(()=>{
                const firstDot = document.querySelector('.group');
                if (firstDot) {
                    _react1.fireEvent.mouseEnter(firstDot);
                    _react1.fireEvent.mouseLeave(firstDot);
                }
            });
            expect(interactionTime).toBeLessThan(_testutils.PERFORMANCE_THRESHOLDS.INTERACTION_RESPONSE);
            console.log(`Map hover interaction: ${interactionTime.toFixed(2)}ms`);
        });
    });
    describe('EngagementMetrics Performance', ()=>{
        it('processes large journey datasets efficiently', async ()=>{
            const journeys = Array.from({
                length: 500
            }, (_, i)=>(0, _testutils.mockVisitorJourney)({
                    engagementScore: Math.floor(Math.random() * 100)
                }));
            const renderTime = await measureRenderTime(()=>{
                (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_EngagementMetrics.EngagementMetrics, {
                    journeys: journeys
                }));
            });
            expect(renderTime).toBeLessThan(_testutils.PERFORMANCE_THRESHOLDS.COMPONENT_RENDER * 2);
            console.log(`EngagementMetrics (500 journeys): ${renderTime.toFixed(2)}ms`);
        });
        it('calculations complete quickly', async ()=>{
            const journeys = Array.from({
                length: 1000
            }, (_, i)=>(0, _testutils.mockVisitorJourney)({
                    engagementScore: Math.floor(Math.random() * 100),
                    totalPages: Math.floor(Math.random() * 20)
                }));
            const start = _perf_hooks.performance.now();
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_EngagementMetrics.EngagementMetrics, {
                journeys: journeys
            }));
            const end = _perf_hooks.performance.now();
            const calculationTime = end - start;
            expect(calculationTime).toBeLessThan(_testutils.PERFORMANCE_THRESHOLDS.COMPONENT_RENDER * 3);
            console.log(`EngagementMetrics calculations (1000 journeys): ${calculationTime.toFixed(2)}ms`);
        });
    });
    describe('FormTracker Performance', ()=>{
        it('renders form data efficiently', async ()=>{
            const renderTime = await measureRenderTime(()=>{
                (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_FormTracker.FormTracker, {
                    isLoading: false
                }));
            });
            expect(renderTime).toBeLessThan(_testutils.PERFORMANCE_THRESHOLDS.COMPONENT_RENDER);
            console.log(`FormTracker render: ${renderTime.toFixed(2)}ms`);
        });
    });
    describe('CoreAnalyticsDashboard Performance', ()=>{
        it('renders analytics dashboard efficiently', async ()=>{
            const renderTime = await measureRenderTime(()=>{
                (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CoreAnalyticsDashboard.CoreAnalyticsDashboard, {
                    isLoading: false
                }));
            });
            expect(renderTime).toBeLessThan(_testutils.PERFORMANCE_THRESHOLDS.COMPONENT_RENDER);
            console.log(`CoreAnalyticsDashboard render: ${renderTime.toFixed(2)}ms`);
        });
        it('chart rendering is performant', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CoreAnalyticsDashboard.CoreAnalyticsDashboard, {
                isLoading: false
            }));
            // Test hourly traffic chart interaction
            const interactionTime = await measureInteractionTime(()=>{
                const chartBar = document.querySelector('.bg-blue-500');
                if (chartBar) {
                    _react1.fireEvent.mouseEnter(chartBar);
                    _react1.fireEvent.mouseLeave(chartBar);
                }
            });
            expect(interactionTime).toBeLessThan(_testutils.PERFORMANCE_THRESHOLDS.INTERACTION_RESPONSE);
            console.log(`Chart interaction: ${interactionTime.toFixed(2)}ms`);
        });
    });
    describe('Memory Usage Performance', ()=>{
        it('components clean up properly on unmount', async ()=>{
            const dataset = Array.from({
                length: 100
            }, (_, i)=>(0, _testutils.mockCustomerJourney)({
                    sessionId: `session_${i}`
                }));
            const { unmount } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CustomerJourneyVisualization.CustomerJourneyVisualization, {
                journeys: dataset
            }));
            // Measure memory before and after unmount
            const memoryBefore = _perf_hooks.performance.memory?.usedJSHeapSize || 0;
            unmount();
            // Force garbage collection if available
            if (global.gc) {
                global.gc();
            }
            const memoryAfter = _perf_hooks.performance.memory?.usedJSHeapSize || 0;
            console.log(`Memory before unmount: ${memoryBefore}`);
            console.log(`Memory after unmount: ${memoryAfter}`);
            // Memory should not continuously grow
            expect(memoryAfter).toBeLessThanOrEqual(memoryBefore * 1.1);
        });
        it('handles rapid re-renders without memory leaks', async ()=>{
            const datasets = Array.from({
                length: 10
            }, (_, i)=>Array.from({
                    length: 50
                }, (_, j)=>(0, _testutils.mockCustomerJourney)({
                        sessionId: `session_${i}_${j}`
                    })));
            const { rerender } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CustomerJourneyVisualization.CustomerJourneyVisualization, {
                journeys: datasets[0]
            }));
            const memoryBefore = _perf_hooks.performance.memory?.usedJSHeapSize || 0;
            // Rapidly re-render with different datasets
            for(let i = 1; i < datasets.length; i++){
                rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CustomerJourneyVisualization.CustomerJourneyVisualization, {
                    journeys: datasets[i]
                }));
            }
            const memoryAfter = _perf_hooks.performance.memory?.usedJSHeapSize || 0;
            const memoryGrowth = memoryAfter - memoryBefore;
            console.log(`Memory growth after 10 re-renders: ${memoryGrowth} bytes`);
            // Memory growth should be reasonable
            expect(memoryGrowth).toBeLessThan(10 * 1024 * 1024); // Less than 10MB growth
        });
    });
    describe('Animation Performance', ()=>{
        it('animations run at acceptable frame rates', async ()=>{
            const dataset = Array.from({
                length: 20
            }, (_, i)=>(0, _testutils.mockCustomerJourney)({
                    sessionId: `session_${i}`
                }));
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CustomerJourneyVisualization.CustomerJourneyVisualization, {
                journeys: dataset
            }));
            // Select first journey and switch to detailed view
            const journeyCard = _react1.screen.getAllByText(/Session/)[0];
            _react1.fireEvent.click(journeyCard.closest('div'));
            _react1.fireEvent.click(_react1.screen.getByRole('button', {
                name: /detailed/i
            }));
            // Measure animation frame time
            const animationTime = await measureInteractionTime(()=>{
                const playButton = _react1.screen.getByRole('button', {
                    name: /play/i
                });
                _react1.fireEvent.click(playButton);
            });
            expect(animationTime).toBeLessThan(_testutils.PERFORMANCE_THRESHOLDS.ANIMATION_FRAME * 5);
            console.log(`Animation trigger time: ${animationTime.toFixed(2)}ms`);
        });
    });
    describe('Concurrent Performance', ()=>{
        it('handles multiple components rendering simultaneously', async ()=>{
            const journeys = Array.from({
                length: 50
            }, (_, i)=>(0, _testutils.mockCustomerJourney)({
                    sessionId: `session_${i}`
                }));
            const locations = Array.from({
                length: 20
            }, (_, i)=>(0, _testutils.mockVisitorLocation)({
                    city: `City${i}`
                }));
            const visitorJourneys = Array.from({
                length: 30
            }, (_, i)=>(0, _testutils.mockVisitorJourney)({
                    id: `journey_${i}`
                }));
            const renderTime = await measureRenderTime(()=>{
                (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_CustomerJourneyVisualization.CustomerJourneyVisualization, {
                            journeys: journeys
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_BasicVisitorMap.BasicVisitorMap, {
                            locations: locations
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_EngagementMetrics.EngagementMetrics, {
                            journeys: visitorJourneys
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_FormTracker.FormTracker, {}),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_CoreAnalyticsDashboard.CoreAnalyticsDashboard, {})
                    ]
                }));
            });
            expect(renderTime).toBeLessThan(_testutils.PERFORMANCE_THRESHOLDS.COMPONENT_RENDER * 3);
            console.log(`All components together: ${renderTime.toFixed(2)}ms`);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,