c84fee9cf97ba20b14d16cfb695a54fb
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    DatabaseSeeder: function() {
        return DatabaseSeeder;
    },
    databaseSeeder: function() {
        return databaseSeeder;
    }
});
const _client = require("@prisma/client");
const _faker = require("@faker-js/faker");
class DatabaseSeeder {
    constructor(){
        this.prisma = new _client.PrismaClient();
    }
    async seedAll() {
        console.log('üå± Seeding database for E2E tests...');
        try {
            // Clear existing data
            await this.clearDatabase();
            // Seed in order due to foreign key constraints
            const user = await this.seedUser();
            await this.seedContacts(user.id);
            await this.seedCampaigns(user.id);
            await this.seedWorkflows(user.id);
            await this.seedVisitorData();
            await this.seedMCPData();
            console.log('‚úÖ Database seeding completed');
        } catch (error) {
            console.error('‚ùå Database seeding failed:', error);
            throw error;
        } finally{
            await this.prisma.$disconnect();
        }
    }
    async clearDatabase() {
        console.log('üßπ Clearing existing test data...');
        // Clear in reverse dependency order
        await this.prisma.mcpMonitoringMetric.deleteMany({});
        await this.prisma.mcpVisitorSession.deleteMany({});
        await this.prisma.mcpCustomerPrediction.deleteMany({});
        await this.prisma.mcpCampaignAnalytic.deleteMany({});
        await this.prisma.workflowExecution.deleteMany({});
        await this.prisma.workflowNode.deleteMany({});
        await this.prisma.workflow.deleteMany({});
        await this.prisma.campaignAnalytics.deleteMany({});
        await this.prisma.campaign.deleteMany({});
        await this.prisma.contactSegment.deleteMany({});
        await this.prisma.segment.deleteMany({});
        await this.prisma.contact.deleteMany({});
    // Don't delete user as it's needed for authentication
    }
    async seedUser() {
        console.log('üë§ Seeding test user...');
        const user = await this.prisma.user.findUnique({
            where: {
                email: 'test@marketsage.com'
            }
        });
        if (!user) {
            throw new Error('Test user not found. Run auth setup first.');
        }
        return user;
    }
    async seedContacts(userId) {
        console.log('üìá Seeding contacts...');
        const contacts = [];
        // Create diverse contact profiles
        for(let i = 0; i < 50; i++){
            const contact = await this.prisma.contact.create({
                data: {
                    email: _faker.faker.internet.email(),
                    firstName: _faker.faker.person.firstName(),
                    lastName: _faker.faker.person.lastName(),
                    phone: _faker.faker.phone.number(),
                    company: _faker.faker.company.name(),
                    jobTitle: _faker.faker.person.jobTitle(),
                    country: _faker.faker.location.country(),
                    city: _faker.faker.location.city(),
                    leadScore: _faker.faker.number.int({
                        min: 0,
                        max: 100
                    }),
                    totalPurchases: _faker.faker.number.float({
                        min: 0,
                        max: 10000,
                        fractionDigits: 2
                    }),
                    lastActivity: _faker.faker.date.recent({
                        days: 30
                    }),
                    source: _faker.faker.helpers.arrayElement([
                        'Website',
                        'Social Media',
                        'Email',
                        'Referral'
                    ]),
                    status: _faker.faker.helpers.arrayElement([
                        'ACTIVE',
                        'INACTIVE',
                        'UNSUBSCRIBED'
                    ]),
                    userId: userId,
                    tags: _faker.faker.helpers.arrayElements([
                        'VIP',
                        'High Value',
                        'New Lead',
                        'Engaged'
                    ], {
                        min: 0,
                        max: 3
                    }),
                    customFields: {
                        industry: _faker.faker.company.buzzNoun(),
                        website: _faker.faker.internet.url(),
                        employees: _faker.faker.number.int({
                            min: 1,
                            max: 1000
                        })
                    }
                }
            });
            contacts.push(contact);
        }
        // Create segments
        await this.seedSegments(userId, contacts);
        return contacts;
    }
    async seedSegments(userId, contacts) {
        console.log('üéØ Seeding segments...');
        const segments = [
            {
                name: 'High-Value Customers',
                description: 'Customers with high purchase value',
                criteria: {
                    totalPurchases: {
                        gte: 1000
                    }
                }
            },
            {
                name: 'Recent Signups',
                description: 'Contacts added in the last 30 days',
                criteria: {
                    createdAt: {
                        gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)
                    }
                }
            },
            {
                name: 'Nigerian Customers',
                description: 'Customers based in Nigeria',
                criteria: {
                    country: 'Nigeria'
                }
            }
        ];
        for (const segmentData of segments){
            const segment = await this.prisma.segment.create({
                data: {
                    ...segmentData,
                    userId: userId,
                    contactCount: _faker.faker.number.int({
                        min: 5,
                        max: 20
                    })
                }
            });
            // Assign random contacts to segment
            const randomContacts = _faker.faker.helpers.arrayElements(contacts, {
                min: 5,
                max: 15
            });
            for (const contact of randomContacts){
                await this.prisma.contactSegment.create({
                    data: {
                        contactId: contact.id,
                        segmentId: segment.id
                    }
                });
            }
        }
    }
    async seedCampaigns(userId) {
        console.log('üìß Seeding campaigns...');
        const campaignTypes = [
            'EMAIL',
            'SMS',
            'WHATSAPP'
        ];
        const campaigns = [];
        for(let i = 0; i < 15; i++){
            const type = _faker.faker.helpers.arrayElement(campaignTypes);
            const campaign = await this.prisma.campaign.create({
                data: {
                    name: _faker.faker.company.catchPhrase(),
                    type: type,
                    subject: type === 'EMAIL' ? _faker.faker.lorem.sentence() : undefined,
                    content: _faker.faker.lorem.paragraphs(3),
                    status: _faker.faker.helpers.arrayElement([
                        'DRAFT',
                        'SCHEDULED',
                        'SENT',
                        'COMPLETED'
                    ]),
                    scheduledAt: _faker.faker.date.future(),
                    userId: userId,
                    settings: {
                        trackOpens: true,
                        trackClicks: true,
                        timezone: 'UTC'
                    }
                }
            });
            // Create analytics for completed campaigns
            if (campaign.status === 'COMPLETED') {
                await this.prisma.campaignAnalytics.create({
                    data: {
                        campaignId: campaign.id,
                        sent: _faker.faker.number.int({
                            min: 100,
                            max: 1000
                        }),
                        delivered: _faker.faker.number.int({
                            min: 90,
                            max: 950
                        }),
                        opened: _faker.faker.number.int({
                            min: 20,
                            max: 400
                        }),
                        clicked: _faker.faker.number.int({
                            min: 5,
                            max: 100
                        }),
                        bounced: _faker.faker.number.int({
                            min: 0,
                            max: 20
                        }),
                        unsubscribed: _faker.faker.number.int({
                            min: 0,
                            max: 5
                        }),
                        revenue: _faker.faker.number.float({
                            min: 0,
                            max: 5000,
                            fractionDigits: 2
                        })
                    }
                });
            }
            campaigns.push(campaign);
        }
        return campaigns;
    }
    async seedWorkflows(userId) {
        console.log('‚öôÔ∏è Seeding workflows...');
        const workflows = [];
        for(let i = 0; i < 10; i++){
            const workflow = await this.prisma.workflow.create({
                data: {
                    name: _faker.faker.hacker.phrase(),
                    description: _faker.faker.lorem.paragraph(),
                    isActive: _faker.faker.datatype.boolean(),
                    userId: userId,
                    trigger: {
                        type: _faker.faker.helpers.arrayElement([
                            'CONTACT_CREATED',
                            'FORM_SUBMITTED',
                            'EMAIL_OPENED'
                        ]),
                        conditions: {}
                    }
                }
            });
            // Create workflow nodes
            const nodeCount = _faker.faker.number.int({
                min: 3,
                max: 8
            });
            for(let j = 0; j < nodeCount; j++){
                await this.prisma.workflowNode.create({
                    data: {
                        workflowId: workflow.id,
                        type: _faker.faker.helpers.arrayElement([
                            'EMAIL',
                            'SMS',
                            'DELAY',
                            'CONDITION'
                        ]),
                        position: {
                            x: j * 200,
                            y: 100
                        },
                        config: {
                            delay: _faker.faker.number.int({
                                min: 1,
                                max: 24
                            }),
                            template: _faker.faker.lorem.sentence()
                        }
                    }
                });
            }
            // Create execution records
            const executionCount = _faker.faker.number.int({
                min: 0,
                max: 50
            });
            for(let k = 0; k < executionCount; k++){
                await this.prisma.workflowExecution.create({
                    data: {
                        workflowId: workflow.id,
                        status: _faker.faker.helpers.arrayElement([
                            'COMPLETED',
                            'FAILED',
                            'RUNNING'
                        ]),
                        startedAt: _faker.faker.date.recent({
                            days: 30
                        }),
                        completedAt: _faker.faker.date.recent({
                            days: 25
                        }),
                        executionData: {
                            steps: _faker.faker.number.int({
                                min: 1,
                                max: 5
                            }),
                            success: _faker.faker.datatype.boolean()
                        }
                    }
                });
            }
            workflows.push(workflow);
        }
        return workflows;
    }
    async seedVisitorData() {
        console.log('üë• Seeding visitor data...');
        // Create visitor sessions for LeadPulse
        for(let i = 0; i < 100; i++){
            const sessionStart = _faker.faker.date.recent({
                days: 7
            });
            const sessionEnd = new Date(sessionStart.getTime() + _faker.faker.number.int({
                min: 30000,
                max: 1800000
            }));
            await this.prisma.visitorSession.create({
                data: {
                    sessionId: _faker.faker.string.uuid(),
                    ipAddress: _faker.faker.internet.ip(),
                    userAgent: _faker.faker.internet.userAgent(),
                    country: _faker.faker.location.country(),
                    city: _faker.faker.location.city(),
                    device: _faker.faker.helpers.arrayElement([
                        'Desktop',
                        'Mobile',
                        'Tablet'
                    ]),
                    browser: _faker.faker.helpers.arrayElement([
                        'Chrome',
                        'Firefox',
                        'Safari',
                        'Edge'
                    ]),
                    source: _faker.faker.helpers.arrayElement([
                        'Google',
                        'Direct',
                        'Social',
                        'Email'
                    ]),
                    landingPage: _faker.faker.internet.url(),
                    pageViews: _faker.faker.number.int({
                        min: 1,
                        max: 10
                    }),
                    duration: Math.floor((sessionEnd.getTime() - sessionStart.getTime()) / 1000),
                    startTime: sessionStart,
                    endTime: sessionEnd,
                    isActive: _faker.faker.datatype.boolean(0.2),
                    events: Array.from({
                        length: _faker.faker.number.int({
                            min: 1,
                            max: 5
                        })
                    }, ()=>({
                            type: _faker.faker.helpers.arrayElement([
                                'page_view',
                                'click',
                                'form_submit',
                                'download'
                            ]),
                            timestamp: _faker.faker.date.between({
                                from: sessionStart,
                                to: sessionEnd
                            }),
                            data: {
                                element: _faker.faker.lorem.word()
                            }
                        }))
                }
            });
        }
    }
    async seedMCPData() {
        console.log('üîó Seeding MCP test data...');
        // MCP Campaign Analytics
        for(let i = 0; i < 25; i++){
            await this.prisma.mcpCampaignAnalytic.create({
                data: {
                    campaignId: _faker.faker.string.uuid(),
                    campaignName: _faker.faker.company.catchPhrase(),
                    channel: _faker.faker.helpers.arrayElement([
                        'email',
                        'sms',
                        'whatsapp'
                    ]),
                    sent: _faker.faker.number.int({
                        min: 100,
                        max: 5000
                    }),
                    delivered: _faker.faker.number.int({
                        min: 90,
                        max: 4500
                    }),
                    opened: _faker.faker.number.int({
                        min: 20,
                        max: 2000
                    }),
                    clicked: _faker.faker.number.int({
                        min: 5,
                        max: 500
                    }),
                    conversions: _faker.faker.number.int({
                        min: 1,
                        max: 100
                    }),
                    revenue: _faker.faker.number.float({
                        min: 100,
                        max: 10000,
                        fractionDigits: 2
                    }),
                    timestamp: _faker.faker.date.recent({
                        days: 30
                    })
                }
            });
        }
        // MCP Customer Predictions
        for(let i = 0; i < 30; i++){
            await this.prisma.mcpCustomerPrediction.create({
                data: {
                    customerId: _faker.faker.string.uuid(),
                    customerEmail: _faker.faker.internet.email(),
                    churnProbability: _faker.faker.number.float({
                        min: 0,
                        max: 1,
                        fractionDigits: 3
                    }),
                    lifetimeValue: _faker.faker.number.float({
                        min: 100,
                        max: 5000,
                        fractionDigits: 2
                    }),
                    nextPurchaseDate: _faker.faker.date.future(),
                    recommendedActions: _faker.faker.helpers.arrayElements([
                        'send_discount',
                        'premium_upgrade',
                        'retention_campaign',
                        'personalized_content'
                    ], {
                        min: 1,
                        max: 3
                    }),
                    confidence: _faker.faker.number.float({
                        min: 0.5,
                        max: 1,
                        fractionDigits: 3
                    }),
                    lastUpdated: _faker.faker.date.recent({
                        days: 1
                    })
                }
            });
        }
        // MCP Visitor Sessions
        for(let i = 0; i < 75; i++){
            await this.prisma.mcpVisitorSession.create({
                data: {
                    sessionId: _faker.faker.string.uuid(),
                    visitorId: _faker.faker.string.uuid(),
                    pageViews: _faker.faker.number.int({
                        min: 1,
                        max: 15
                    }),
                    duration: _faker.faker.number.int({
                        min: 30,
                        max: 3600
                    }),
                    bounceRate: _faker.faker.number.float({
                        min: 0,
                        max: 1,
                        fractionDigits: 3
                    }),
                    conversionEvents: _faker.faker.number.int({
                        min: 0,
                        max: 5
                    }),
                    source: _faker.faker.helpers.arrayElement([
                        'organic',
                        'paid',
                        'social',
                        'direct',
                        'email'
                    ]),
                    device: _faker.faker.helpers.arrayElement([
                        'desktop',
                        'mobile',
                        'tablet'
                    ]),
                    location: {
                        country: _faker.faker.location.country(),
                        city: _faker.faker.location.city(),
                        coordinates: {
                            lat: _faker.faker.location.latitude(),
                            lng: _faker.faker.location.longitude()
                        }
                    },
                    timestamp: _faker.faker.date.recent({
                        days: 7
                    })
                }
            });
        }
        // MCP Monitoring Metrics
        for(let i = 0; i < 50; i++){
            await this.prisma.mcpMonitoringMetric.create({
                data: {
                    metricName: _faker.faker.helpers.arrayElement([
                        'api_response_time',
                        'database_connections',
                        'memory_usage',
                        'cpu_utilization',
                        'error_rate'
                    ]),
                    value: _faker.faker.number.float({
                        min: 0,
                        max: 100,
                        fractionDigits: 2
                    }),
                    unit: _faker.faker.helpers.arrayElement([
                        'ms',
                        '%',
                        'MB',
                        'count'
                    ]),
                    tags: {
                        service: _faker.faker.helpers.arrayElement([
                            'api',
                            'database',
                            'cache',
                            'queue'
                        ]),
                        environment: 'test'
                    },
                    timestamp: _faker.faker.date.recent({
                        days: 1
                    })
                }
            });
        }
    }
    async cleanup() {
        await this.clearDatabase();
        await this.prisma.$disconnect();
    }
}
const databaseSeeder = new DatabaseSeeder();

//# sourceMappingURL=data:application/json;base64,