f4b2ff0d30d2e0892746bccac0b66da6
/**
 * MCP Client for MarketSage
 * 
 * This client provides a unified interface for the Supreme-AI v3 engine
 * to interact with all MCP servers with fallback mechanisms.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    MCPClient: function() {
        return MCPClient;
    },
    MarketSageMCPClient: function() {
        return MarketSageMCPClient;
    }
});
const _mcpconfig = require("../config/mcp-config");
const _prisma = require("../../lib/db/prisma");
class MarketSageMCPClient {
    constructor(authContext){
        this.config = (0, _mcpconfig.getMCPConfig)();
        this.authContext = null;
        this.authContext = authContext || null;
    }
    /**
   * Set authentication context
   */ setAuthContext(authContext) {
        this.authContext = authContext;
    }
    /**
   * Check if MCP is enabled and configured
   */ isEnabled() {
        return (0, _mcpconfig.isMCPEnabled)();
    }
    // ============================================================================
    // Customer Data Methods
    // ============================================================================
    /**
   * Search customers using MCP or fallback to direct database
   */ async searchCustomers(query, options = {}) {
        if (!this.isEnabled() || !this.config.features.customerDataEnabled) {
            return await this.searchCustomersFallback(query, options);
        }
        try {
            // MCP implementation would go here
            // For now, use fallback
            return await this.searchCustomersFallback(query, options);
        } catch (error) {
            console.error('MCP Customer search failed:', error);
            return await this.searchCustomersFallback(query, options);
        }
    }
    /**
   * Get customer profile using MCP or fallback
   */ async getCustomerProfile(customerId, options = {}) {
        if (!this.isEnabled() || !this.config.features.customerDataEnabled) {
            return await this.getCustomerProfileFallback(customerId, options);
        }
        try {
            // MCP implementation would go here
            // For now, use fallback
            return await this.getCustomerProfileFallback(customerId, options);
        } catch (error) {
            console.error('MCP Customer profile failed:', error);
            return await this.getCustomerProfileFallback(customerId, options);
        }
    }
    /**
   * Get customer segments using MCP or fallback
   */ async getCustomerSegments(organizationId) {
        if (!this.isEnabled() || !this.config.features.customerDataEnabled) {
            return await this.getCustomerSegmentsFallback(organizationId);
        }
        try {
            // MCP implementation would go here
            // For now, use fallback
            return await this.getCustomerSegmentsFallback(organizationId);
        } catch (error) {
            console.error('MCP Customer segments failed:', error);
            return await this.getCustomerSegmentsFallback(organizationId);
        }
    }
    // ============================================================================
    // Campaign Analytics Methods
    // ============================================================================
    /**
   * Get campaign analytics using MCP or fallback
   */ async getCampaignAnalytics(query) {
        if (!this.isEnabled() || !this.config.features.campaignAnalyticsEnabled) {
            return await this.getCampaignAnalyticsFallback(query);
        }
        try {
            // MCP implementation would go here
            // For now, use fallback
            return await this.getCampaignAnalyticsFallback(query);
        } catch (error) {
            console.error('MCP Campaign analytics failed:', error);
            return await this.getCampaignAnalyticsFallback(query);
        }
    }
    /**
   * Get campaign performance metrics using MCP or fallback
   */ async getCampaignPerformance(campaignId) {
        if (!this.isEnabled() || !this.config.features.campaignAnalyticsEnabled) {
            return await this.getCampaignPerformanceFallback(campaignId);
        }
        try {
            // MCP implementation would go here
            // For now, use fallback
            return await this.getCampaignPerformanceFallback(campaignId);
        } catch (error) {
            console.error('MCP Campaign performance failed:', error);
            return await this.getCampaignPerformanceFallback(campaignId);
        }
    }
    // ============================================================================
    // LeadPulse Methods
    // ============================================================================
    /**
   * Get visitor data using MCP or fallback
   */ async getVisitorData(query) {
        if (!this.isEnabled() || !this.config.features.leadpulseEnabled) {
            return await this.getVisitorDataFallback(query);
        }
        try {
            // MCP implementation would go here
            // For now, use fallback
            return await this.getVisitorDataFallback(query);
        } catch (error) {
            console.error('MCP Visitor data failed:', error);
            return await this.getVisitorDataFallback(query);
        }
    }
    /**
   * Get visitor behavior analytics using MCP or fallback
   */ async getVisitorBehavior(visitorId) {
        if (!this.isEnabled() || !this.config.features.leadpulseEnabled) {
            return await this.getVisitorBehaviorFallback(visitorId);
        }
        try {
            // MCP implementation would go here
            // For now, use fallback
            return await this.getVisitorBehaviorFallback(visitorId);
        } catch (error) {
            console.error('MCP Visitor behavior failed:', error);
            return await this.getVisitorBehaviorFallback(visitorId);
        }
    }
    // ============================================================================
    // External Services Methods
    // ============================================================================
    /**
   * Send message using MCP or fallback
   */ async sendMessage(request) {
        if (!this.isEnabled() || !this.config.features.externalServicesEnabled) {
            return await this.sendMessageFallback(request);
        }
        try {
            // MCP implementation would go here
            // For now, use fallback
            return await this.sendMessageFallback(request);
        } catch (error) {
            console.error('MCP Send message failed:', error);
            return await this.sendMessageFallback(request);
        }
    }
    // ============================================================================
    // Monitoring Methods
    // ============================================================================
    /**
   * Get monitoring data using MCP or fallback
   */ async getMonitoringData(query) {
        if (!this.isEnabled() || !this.config.features.monitoringEnabled) {
            return await this.getMonitoringDataFallback(query);
        }
        try {
            // MCP implementation would go here
            // For now, use fallback
            return await this.getMonitoringDataFallback(query);
        } catch (error) {
            console.error('MCP Monitoring data failed:', error);
            return await this.getMonitoringDataFallback(query);
        }
    }
    // ============================================================================
    // Fallback Methods (Direct Database Access)
    // ============================================================================
    /**
   * Fallback: Search customers via direct database
   */ async searchCustomersFallback(query, options) {
        try {
            const orgId = this.authContext?.organizationId;
            if (!orgId) {
                return {
                    success: false,
                    error: 'No organization context'
                };
            }
            const customers = await _prisma.prisma.contact.findMany({
                where: {
                    organizationId: orgId,
                    OR: [
                        {
                            email: {
                                contains: query,
                                mode: 'insensitive'
                            }
                        },
                        {
                            phone: {
                                contains: query
                            }
                        },
                        {
                            firstName: {
                                contains: query,
                                mode: 'insensitive'
                            }
                        },
                        {
                            lastName: {
                                contains: query,
                                mode: 'insensitive'
                            }
                        }
                    ]
                },
                take: options.limit || 10,
                include: {
                    segmentMembers: options.includeSegments ? {
                        include: {
                            segment: true
                        }
                    } : false
                }
            });
            return {
                success: true,
                data: customers,
                fromFallback: true
            };
        } catch (error) {
            return {
                success: false,
                error: error instanceof Error ? error.message : 'Unknown error',
                fromFallback: true
            };
        }
    }
    /**
   * Fallback: Get customer profile via direct database
   */ async getCustomerProfileFallback(customerId, options) {
        try {
            const orgId = this.authContext?.organizationId;
            if (!orgId) {
                return {
                    success: false,
                    error: 'No organization context'
                };
            }
            const customer = await _prisma.prisma.contact.findFirst({
                where: {
                    id: customerId,
                    organizationId: orgId
                },
                include: {
                    segmentMembers: options.includeSegments ? {
                        include: {
                            segment: true
                        }
                    } : false
                }
            });
            if (!customer) {
                return {
                    success: false,
                    error: 'Customer not found'
                };
            }
            return {
                success: true,
                data: customer,
                fromFallback: true
            };
        } catch (error) {
            return {
                success: false,
                error: error instanceof Error ? error.message : 'Unknown error',
                fromFallback: true
            };
        }
    }
    /**
   * Fallback: Get customer segments via direct database
   */ async getCustomerSegmentsFallback(organizationId) {
        try {
            const orgId = organizationId || this.authContext?.organizationId;
            if (!orgId) {
                return {
                    success: false,
                    error: 'No organization context'
                };
            }
            const segments = await _prisma.prisma.segment.findMany({
                where: {
                    organizationId: orgId
                },
                include: {
                    _count: {
                        select: {
                            contacts: true
                        }
                    }
                }
            });
            return {
                success: true,
                data: segments,
                fromFallback: true
            };
        } catch (error) {
            return {
                success: false,
                error: error instanceof Error ? error.message : 'Unknown error',
                fromFallback: true
            };
        }
    }
    /**
   * Fallback: Get campaign analytics via direct database
   */ async getCampaignAnalyticsFallback(query) {
        try {
            const orgId = query.organizationId || this.authContext?.organizationId;
            if (!orgId) {
                return {
                    success: false,
                    error: 'No organization context'
                };
            }
            // Placeholder implementation - would need actual campaign analytics logic
            return {
                success: true,
                data: {
                    message: 'Campaign analytics fallback - implementation needed'
                },
                fromFallback: true
            };
        } catch (error) {
            return {
                success: false,
                error: error instanceof Error ? error.message : 'Unknown error',
                fromFallback: true
            };
        }
    }
    /**
   * Fallback: Get campaign performance via direct database
   */ async getCampaignPerformanceFallback(campaignId) {
        try {
            // Placeholder implementation - would need actual campaign performance logic
            return {
                success: true,
                data: {
                    message: 'Campaign performance fallback - implementation needed'
                },
                fromFallback: true
            };
        } catch (error) {
            return {
                success: false,
                error: error instanceof Error ? error.message : 'Unknown error',
                fromFallback: true
            };
        }
    }
    /**
   * Fallback: Get visitor data via direct database
   */ async getVisitorDataFallback(query) {
        try {
            // Placeholder implementation - would need actual visitor data logic
            return {
                success: true,
                data: {
                    message: 'Visitor data fallback - implementation needed'
                },
                fromFallback: true
            };
        } catch (error) {
            return {
                success: false,
                error: error instanceof Error ? error.message : 'Unknown error',
                fromFallback: true
            };
        }
    }
    /**
   * Fallback: Get visitor behavior via direct database
   */ async getVisitorBehaviorFallback(visitorId) {
        try {
            // Placeholder implementation - would need actual visitor behavior logic
            return {
                success: true,
                data: {
                    message: 'Visitor behavior fallback - implementation needed'
                },
                fromFallback: true
            };
        } catch (error) {
            return {
                success: false,
                error: error instanceof Error ? error.message : 'Unknown error',
                fromFallback: true
            };
        }
    }
    /**
   * Fallback: Send message via existing services
   */ async sendMessageFallback(request) {
        try {
            // Placeholder implementation - would use existing email/SMS/WhatsApp services
            return {
                success: true,
                data: {
                    message: 'Message sending fallback - implementation needed'
                },
                fromFallback: true
            };
        } catch (error) {
            return {
                success: false,
                error: error instanceof Error ? error.message : 'Unknown error',
                fromFallback: true
            };
        }
    }
    /**
   * Fallback: Get monitoring data via direct database
   */ async getMonitoringDataFallback(query) {
        try {
            // Placeholder implementation - would need actual monitoring data logic
            return {
                success: true,
                data: {
                    message: 'Monitoring data fallback - implementation needed'
                },
                fromFallback: true
            };
        } catch (error) {
            return {
                success: false,
                error: error instanceof Error ? error.message : 'Unknown error',
                fromFallback: true
            };
        }
    }
}
class MCPClient extends MarketSageMCPClient {
}

//# sourceMappingURL=data:application/json;base64,