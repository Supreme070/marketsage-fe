{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/mcp/clients/mcp-client.ts"],"sourcesContent":["/**\n * MCP Client for MarketSage\n * \n * This client provides a unified interface for the Supreme-AI v3 engine\n * to interact with all MCP servers with fallback mechanisms.\n */\n\nimport { \n  MCPClientConfig, \n  type MCPClientResponse, \n  type MCPAuthContext,\n  CustomerQuery,\n  type CampaignAnalyticsQuery,\n  type LeadPulseQuery,\n  type SendMessageRequest,\n  type MonitoringQuery\n} from '../types/mcp-types';\n\nimport { getMCPConfig, isMCPEnabled } from '../config/mcp-config';\nimport { prisma } from '../../lib/db/prisma';\n\nexport class MarketSageMCPClient {\n  private config = getMCPConfig();\n  private authContext: MCPAuthContext | null = null;\n\n  constructor(authContext?: MCPAuthContext) {\n    this.authContext = authContext || null;\n  }\n\n  /**\n   * Set authentication context\n   */\n  setAuthContext(authContext: MCPAuthContext): void {\n    this.authContext = authContext;\n  }\n\n  /**\n   * Check if MCP is enabled and configured\n   */\n  isEnabled(): boolean {\n    return isMCPEnabled();\n  }\n\n  // ============================================================================\n  // Customer Data Methods\n  // ============================================================================\n\n  /**\n   * Search customers using MCP or fallback to direct database\n   */\n  async searchCustomers(query: string, options: {\n    limit?: number;\n    includeSegments?: boolean;\n    includePredictions?: boolean;\n  } = {}): Promise<MCPClientResponse> {\n    if (!this.isEnabled() || !this.config.features.customerDataEnabled) {\n      return await this.searchCustomersFallback(query, options);\n    }\n\n    try {\n      // MCP implementation would go here\n      // For now, use fallback\n      return await this.searchCustomersFallback(query, options);\n    } catch (error) {\n      console.error('MCP Customer search failed:', error);\n      return await this.searchCustomersFallback(query, options);\n    }\n  }\n\n  /**\n   * Get customer profile using MCP or fallback\n   */\n  async getCustomerProfile(customerId: string, options: {\n    includeSegments?: boolean;\n    includePredictions?: boolean;\n  } = {}): Promise<MCPClientResponse> {\n    if (!this.isEnabled() || !this.config.features.customerDataEnabled) {\n      return await this.getCustomerProfileFallback(customerId, options);\n    }\n\n    try {\n      // MCP implementation would go here\n      // For now, use fallback\n      return await this.getCustomerProfileFallback(customerId, options);\n    } catch (error) {\n      console.error('MCP Customer profile failed:', error);\n      return await this.getCustomerProfileFallback(customerId, options);\n    }\n  }\n\n  /**\n   * Get customer segments using MCP or fallback\n   */\n  async getCustomerSegments(organizationId?: string): Promise<MCPClientResponse> {\n    if (!this.isEnabled() || !this.config.features.customerDataEnabled) {\n      return await this.getCustomerSegmentsFallback(organizationId);\n    }\n\n    try {\n      // MCP implementation would go here\n      // For now, use fallback\n      return await this.getCustomerSegmentsFallback(organizationId);\n    } catch (error) {\n      console.error('MCP Customer segments failed:', error);\n      return await this.getCustomerSegmentsFallback(organizationId);\n    }\n  }\n\n  // ============================================================================\n  // Campaign Analytics Methods\n  // ============================================================================\n\n  /**\n   * Get campaign analytics using MCP or fallback\n   */\n  async getCampaignAnalytics(query: CampaignAnalyticsQuery): Promise<MCPClientResponse> {\n    if (!this.isEnabled() || !this.config.features.campaignAnalyticsEnabled) {\n      return await this.getCampaignAnalyticsFallback(query);\n    }\n\n    try {\n      // MCP implementation would go here\n      // For now, use fallback\n      return await this.getCampaignAnalyticsFallback(query);\n    } catch (error) {\n      console.error('MCP Campaign analytics failed:', error);\n      return await this.getCampaignAnalyticsFallback(query);\n    }\n  }\n\n  /**\n   * Get campaign performance metrics using MCP or fallback\n   */\n  async getCampaignPerformance(campaignId: string): Promise<MCPClientResponse> {\n    if (!this.isEnabled() || !this.config.features.campaignAnalyticsEnabled) {\n      return await this.getCampaignPerformanceFallback(campaignId);\n    }\n\n    try {\n      // MCP implementation would go here\n      // For now, use fallback\n      return await this.getCampaignPerformanceFallback(campaignId);\n    } catch (error) {\n      console.error('MCP Campaign performance failed:', error);\n      return await this.getCampaignPerformanceFallback(campaignId);\n    }\n  }\n\n  // ============================================================================\n  // LeadPulse Methods\n  // ============================================================================\n\n  /**\n   * Get visitor data using MCP or fallback\n   */\n  async getVisitorData(query: LeadPulseQuery): Promise<MCPClientResponse> {\n    if (!this.isEnabled() || !this.config.features.leadpulseEnabled) {\n      return await this.getVisitorDataFallback(query);\n    }\n\n    try {\n      // MCP implementation would go here\n      // For now, use fallback\n      return await this.getVisitorDataFallback(query);\n    } catch (error) {\n      console.error('MCP Visitor data failed:', error);\n      return await this.getVisitorDataFallback(query);\n    }\n  }\n\n  /**\n   * Get visitor behavior analytics using MCP or fallback\n   */\n  async getVisitorBehavior(visitorId: string): Promise<MCPClientResponse> {\n    if (!this.isEnabled() || !this.config.features.leadpulseEnabled) {\n      return await this.getVisitorBehaviorFallback(visitorId);\n    }\n\n    try {\n      // MCP implementation would go here\n      // For now, use fallback\n      return await this.getVisitorBehaviorFallback(visitorId);\n    } catch (error) {\n      console.error('MCP Visitor behavior failed:', error);\n      return await this.getVisitorBehaviorFallback(visitorId);\n    }\n  }\n\n  // ============================================================================\n  // External Services Methods\n  // ============================================================================\n\n  /**\n   * Send message using MCP or fallback\n   */\n  async sendMessage(request: SendMessageRequest): Promise<MCPClientResponse> {\n    if (!this.isEnabled() || !this.config.features.externalServicesEnabled) {\n      return await this.sendMessageFallback(request);\n    }\n\n    try {\n      // MCP implementation would go here\n      // For now, use fallback\n      return await this.sendMessageFallback(request);\n    } catch (error) {\n      console.error('MCP Send message failed:', error);\n      return await this.sendMessageFallback(request);\n    }\n  }\n\n  // ============================================================================\n  // Monitoring Methods\n  // ============================================================================\n\n  /**\n   * Get monitoring data using MCP or fallback\n   */\n  async getMonitoringData(query: MonitoringQuery): Promise<MCPClientResponse> {\n    if (!this.isEnabled() || !this.config.features.monitoringEnabled) {\n      return await this.getMonitoringDataFallback(query);\n    }\n\n    try {\n      // MCP implementation would go here\n      // For now, use fallback\n      return await this.getMonitoringDataFallback(query);\n    } catch (error) {\n      console.error('MCP Monitoring data failed:', error);\n      return await this.getMonitoringDataFallback(query);\n    }\n  }\n\n  // ============================================================================\n  // Fallback Methods (Direct Database Access)\n  // ============================================================================\n\n  /**\n   * Fallback: Search customers via direct database\n   */\n  private async searchCustomersFallback(query: string, options: any): Promise<MCPClientResponse> {\n    try {\n      const orgId = this.authContext?.organizationId;\n      if (!orgId) {\n        return { success: false, error: 'No organization context' };\n      }\n\n      const customers = await prisma.contact.findMany({\n        where: {\n          organizationId: orgId,\n          OR: [\n            { email: { contains: query, mode: 'insensitive' } },\n            { phone: { contains: query } },\n            { firstName: { contains: query, mode: 'insensitive' } },\n            { lastName: { contains: query, mode: 'insensitive' } }\n          ]\n        },\n        take: options.limit || 10,\n        include: {\n          segmentMembers: options.includeSegments ? {\n            include: {\n              segment: true\n            }\n          } : false\n        }\n      });\n\n      return { \n        success: true, \n        data: customers,\n        fromFallback: true \n      };\n    } catch (error) {\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : 'Unknown error',\n        fromFallback: true \n      };\n    }\n  }\n\n  /**\n   * Fallback: Get customer profile via direct database\n   */\n  private async getCustomerProfileFallback(customerId: string, options: any): Promise<MCPClientResponse> {\n    try {\n      const orgId = this.authContext?.organizationId;\n      if (!orgId) {\n        return { success: false, error: 'No organization context' };\n      }\n\n      const customer = await prisma.contact.findFirst({\n        where: {\n          id: customerId,\n          organizationId: orgId\n        },\n        include: {\n          segmentMembers: options.includeSegments ? {\n            include: {\n              segment: true\n            }\n          } : false\n        }\n      });\n\n      if (!customer) {\n        return { success: false, error: 'Customer not found' };\n      }\n\n      return { \n        success: true, \n        data: customer,\n        fromFallback: true \n      };\n    } catch (error) {\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : 'Unknown error',\n        fromFallback: true \n      };\n    }\n  }\n\n  /**\n   * Fallback: Get customer segments via direct database\n   */\n  private async getCustomerSegmentsFallback(organizationId?: string): Promise<MCPClientResponse> {\n    try {\n      const orgId = organizationId || this.authContext?.organizationId;\n      if (!orgId) {\n        return { success: false, error: 'No organization context' };\n      }\n\n      const segments = await prisma.segment.findMany({\n        where: {\n          organizationId: orgId\n        },\n        include: {\n          _count: {\n            select: { contacts: true }\n          }\n        }\n      });\n\n      return { \n        success: true, \n        data: segments,\n        fromFallback: true \n      };\n    } catch (error) {\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : 'Unknown error',\n        fromFallback: true \n      };\n    }\n  }\n\n  /**\n   * Fallback: Get campaign analytics via direct database\n   */\n  private async getCampaignAnalyticsFallback(query: CampaignAnalyticsQuery): Promise<MCPClientResponse> {\n    try {\n      const orgId = query.organizationId || this.authContext?.organizationId;\n      if (!orgId) {\n        return { success: false, error: 'No organization context' };\n      }\n\n      // Placeholder implementation - would need actual campaign analytics logic\n      return { \n        success: true, \n        data: { message: 'Campaign analytics fallback - implementation needed' },\n        fromFallback: true \n      };\n    } catch (error) {\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : 'Unknown error',\n        fromFallback: true \n      };\n    }\n  }\n\n  /**\n   * Fallback: Get campaign performance via direct database\n   */\n  private async getCampaignPerformanceFallback(campaignId: string): Promise<MCPClientResponse> {\n    try {\n      // Placeholder implementation - would need actual campaign performance logic\n      return { \n        success: true, \n        data: { message: 'Campaign performance fallback - implementation needed' },\n        fromFallback: true \n      };\n    } catch (error) {\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : 'Unknown error',\n        fromFallback: true \n      };\n    }\n  }\n\n  /**\n   * Fallback: Get visitor data via direct database\n   */\n  private async getVisitorDataFallback(query: LeadPulseQuery): Promise<MCPClientResponse> {\n    try {\n      // Placeholder implementation - would need actual visitor data logic\n      return { \n        success: true, \n        data: { message: 'Visitor data fallback - implementation needed' },\n        fromFallback: true \n      };\n    } catch (error) {\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : 'Unknown error',\n        fromFallback: true \n      };\n    }\n  }\n\n  /**\n   * Fallback: Get visitor behavior via direct database\n   */\n  private async getVisitorBehaviorFallback(visitorId: string): Promise<MCPClientResponse> {\n    try {\n      // Placeholder implementation - would need actual visitor behavior logic\n      return { \n        success: true, \n        data: { message: 'Visitor behavior fallback - implementation needed' },\n        fromFallback: true \n      };\n    } catch (error) {\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : 'Unknown error',\n        fromFallback: true \n      };\n    }\n  }\n\n  /**\n   * Fallback: Send message via existing services\n   */\n  private async sendMessageFallback(request: SendMessageRequest): Promise<MCPClientResponse> {\n    try {\n      // Placeholder implementation - would use existing email/SMS/WhatsApp services\n      return { \n        success: true, \n        data: { message: 'Message sending fallback - implementation needed' },\n        fromFallback: true \n      };\n    } catch (error) {\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : 'Unknown error',\n        fromFallback: true \n      };\n    }\n  }\n\n  /**\n   * Fallback: Get monitoring data via direct database\n   */\n  private async getMonitoringDataFallback(query: MonitoringQuery): Promise<MCPClientResponse> {\n    try {\n      // Placeholder implementation - would need actual monitoring data logic\n      return { \n        success: true, \n        data: { message: 'Monitoring data fallback - implementation needed' },\n        fromFallback: true \n      };\n    } catch (error) {\n      return { \n        success: false, \n        error: error instanceof Error ? error.message : 'Unknown error',\n        fromFallback: true \n      };\n    }\n  }\n}\n\n// Add MCPClient as named export for backward compatibility\nexport class MCPClient extends MarketSageMCPClient {}"],"names":["MCPClient","MarketSageMCPClient","constructor","authContext","config","getMCPConfig","setAuthContext","isEnabled","isMCPEnabled","searchCustomers","query","options","features","customerDataEnabled","searchCustomersFallback","error","console","getCustomerProfile","customerId","getCustomerProfileFallback","getCustomerSegments","organizationId","getCustomerSegmentsFallback","getCampaignAnalytics","campaignAnalyticsEnabled","getCampaignAnalyticsFallback","getCampaignPerformance","campaignId","getCampaignPerformanceFallback","getVisitorData","leadpulseEnabled","getVisitorDataFallback","getVisitorBehavior","visitorId","getVisitorBehaviorFallback","sendMessage","request","externalServicesEnabled","sendMessageFallback","getMonitoringData","monitoringEnabled","getMonitoringDataFallback","orgId","success","customers","prisma","contact","findMany","where","OR","email","contains","mode","phone","firstName","lastName","take","limit","include","segmentMembers","includeSegments","segment","data","fromFallback","Error","message","customer","findFirst","id","segments","_count","select","contacts"],"mappings":"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"}