{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/__tests__/mcp/leadpulse-server.test.ts"],"sourcesContent":["/**\n * LeadPulse MCP Server Unit Tests\n * \n * Comprehensive tests for the LeadPulse MCP server including:\n * - Visitor tracking validation with real session data\n * - Behavioral analytics and intent scoring\n * - Session data processing and transformation\n * - Heatmap data integration\n * - Customer journey mapping\n * - Conversion funnel analysis\n * - Real-time visitor monitoring\n * - High-intent visitor identification\n * - Geographic and device analytics\n * - Performance testing for large datasets\n * - Privacy and GDPR compliance\n * - Error handling and fallback mechanisms\n * - Audit logging for visitor data access\n */\n\nimport { LeadPulseMCPServer } from '../../mcp/servers/leadpulse-server';\nimport { MCPServerConfig } from '../../mcp/config/mcp-config';\nimport { MCPAuthContext, MCPValidationError, LeadPulseQuery } from '../../mcp/types/mcp-types';\nimport { \n  mockPrismaClient, \n  mockRedisClient, \n  mockAuditLogger,\n  testDataFactory,\n  mockAuthScenarios,\n  mockDatabaseScenarios,\n  resetAllMocks,\n  setupDefaultMocks\n} from './__mocks__/mcp-mocks';\n\n// Mock the external dependencies\njest.mock('../../lib/db/prisma', () => ({\n  prisma: mockPrismaClient\n}));\n\njest.mock('../../lib/cache/redis-client', () => ({\n  redisCache: mockRedisClient,\n  CACHE_KEYS: {\n    API_RATE_LIMIT: (key: string) => `rate_limit:${key}`\n  }\n}));\n\njest.mock('../../lib/audit/enterprise-audit-logger', () => ({\n  enterpriseAuditLogger: mockAuditLogger\n}));\n\n// Test data factories for LeadPulse\nconst createMockVisitorSession = (overrides?: any) => ({\n  id: 'session-123',\n  sessionId: 'session-123',\n  visitorId: 'visitor-456',\n  organizationId: 'org-456',\n  sessionStart: new Date(Date.now() - 3600000), // 1 hour ago\n  sessionEnd: new Date(),\n  pageViews: 5,\n  duration: 300, // 5 minutes\n  bounceRate: 0.2,\n  conversionValue: 0,\n  intentScore: 75,\n  landingPage: '/home',\n  exitPage: '/contact',\n  country: 'NG',\n  city: 'Lagos',\n  region: 'Lagos State',\n  deviceType: 'desktop',\n  browser: 'Chrome',\n  operatingSystem: 'Windows',\n  source: 'google',\n  medium: 'organic',\n  campaign: null,\n  referrer: 'https://google.com',\n  scrollDepth: 85,\n  avgTimeOnPage: 60,\n  interactions: 8,\n  insights: JSON.stringify([\n    'High engagement visitor',\n    'Viewed multiple pages',\n    'Strong conversion intent'\n  ]),\n  organization: { id: 'org-456', name: 'Test Organization' },\n  ...overrides\n});\n\nconst createMockHeatmapData = (overrides?: any) => ({\n  id: 'heatmap-123',\n  pageUrl: '/pricing',\n  organizationId: 'org-456',\n  clickMap: {\n    '/pricing': {\n      clicks: [\n        { x: 150, y: 300, count: 25 },\n        { x: 400, y: 500, count: 15 }\n      ]\n    }\n  },\n  scrollMap: {\n    '/pricing': {\n      maxScroll: 85,\n      avgScroll: 65,\n      distribution: [100, 95, 85, 70, 50, 30, 15, 5]\n    }\n  },\n  sessionCount: 100,\n  uniqueVisitors: 85,\n  avgTimeOnPage: 120,\n  bounceRate: 0.25,\n  calculatedAt: new Date(),\n  ...overrides\n});\n\ndescribe('LeadPulse MCP Server', () => {\n  let server: LeadPulseMCPServer;\n  let config: MCPServerConfig;\n\n  beforeEach(() => {\n    resetAllMocks();\n    setupDefaultMocks();\n\n    config = {\n      name: 'leadpulse-server',\n      version: '1.0.0',\n      port: 3005,\n      enabled: true,\n      authentication: { required: true, methods: ['jwt'] },\n      rateLimit: { enabled: true, maxRequests: 30, windowMs: 60000 },\n      fallback: { enabled: true, timeout: 5000 },\n      validation: { strict: true, sanitizeOutput: true }\n    };\n\n    server = new LeadPulseMCPServer(config);\n  });\n\n  afterEach(() => {\n    resetAllMocks();\n  });\n\n  describe('Resource Listing', () => {\n    it('should list available visitor resources for regular users', async () => {\n      // Arrange\n      const userContext = testUtils.createMockAuthContext({\n        role: 'USER',\n        permissions: ['read:own:leadpulse']\n      });\n\n      // Act\n      const resources = await server['listResources'](userContext);\n\n      // Assert\n      expect(resources).toHaveLength(2);\n      expect(resources.map(r => r.uri)).toEqual([\n        'leadpulse://visitors',\n        'leadpulse://sessions'\n      ]);\n    });\n\n    it('should list all visitor resources for admin users', async () => {\n      // Arrange\n      const adminContext = testUtils.createMockAuthContext({\n        role: 'ADMIN',\n        permissions: ['*']\n      });\n\n      // Act\n      const resources = await server['listResources'](adminContext);\n\n      // Assert\n      expect(resources).toHaveLength(6);\n      expect(resources.map(r => r.uri)).toEqual([\n        'leadpulse://visitors',\n        'leadpulse://sessions',\n        'leadpulse://heatmaps',\n        'leadpulse://journeys',\n        'leadpulse://conversions',\n        'leadpulse://analytics'\n      ]);\n    });\n\n    it('should list all resources for users with org read permissions', async () => {\n      // Arrange\n      const orgUserContext = testUtils.createMockAuthContext({\n        role: 'IT_ADMIN',\n        permissions: ['read:org']\n      });\n\n      // Act\n      const resources = await server['listResources'](orgUserContext);\n\n      // Assert\n      expect(resources).toHaveLength(6);\n    });\n  });\n\n  describe('Tool Listing', () => {\n    it('should list available tools for regular users', async () => {\n      // Arrange\n      const userContext = testUtils.createMockAuthContext({\n        role: 'USER',\n        permissions: ['read:own:leadpulse']\n      });\n\n      // Act\n      const tools = await server['listTools'](userContext);\n\n      // Assert\n      expect(tools).toHaveLength(3);\n      expect(tools.map(t => t.name)).toEqual([\n        'track_visitor',\n        'analyze_visitor_behavior',\n        'get_real_time_visitors'\n      ]);\n      \n      // Verify tool schemas\n      const trackTool = tools.find(t => t.name === 'track_visitor');\n      expect(trackTool?.inputSchema.properties.visitorId).toBeDefined();\n      expect(trackTool?.inputSchema.required).toContain('visitorId');\n    });\n\n    it('should list all tools for admin users', async () => {\n      // Arrange\n      const adminContext = testUtils.createMockAuthContext({\n        role: 'ADMIN',\n        permissions: ['*']\n      });\n\n      // Act\n      const tools = await server['listTools'](adminContext);\n\n      // Assert\n      expect(tools).toHaveLength(6);\n      expect(tools.map(t => t.name)).toEqual([\n        'track_visitor',\n        'analyze_visitor_behavior',\n        'get_conversion_funnel',\n        'get_page_analytics',\n        'get_real_time_visitors',\n        'identify_high_intent_visitors'\n      ]);\n    });\n  });\n\n  describe('Visitor Data Retrieval', () => {\n    it('should retrieve visitor data with real database queries', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const mockSessions = [\n        createMockVisitorSession({\n          visitorId: 'visitor-1',\n          organizationId: authContext.organizationId,\n          deviceType: 'desktop',\n          country: 'NG',\n          intentScore: 85\n        }),\n        createMockVisitorSession({\n          visitorId: 'visitor-2',\n          organizationId: authContext.organizationId,\n          deviceType: 'mobile',\n          country: 'KE',\n          intentScore: 65,\n          bounceRate: 0.8 // High bounce rate\n        })\n      ];\n\n      mockPrismaClient.mCPVisitorSessions.findMany.mockResolvedValue(mockSessions);\n\n      const uri = 'leadpulse://visitors?limit=10&offset=0';\n      \n      // Act\n      const result = await server['readResource'](uri, authContext);\n\n      // Assert\n      expect(result.uri).toBe('leadpulse://visitors');\n      expect(result.mimeType).toBe('application/json');\n      \n      const data = JSON.parse(result.text);\n      expect(data.visitors).toHaveLength(2);\n      expect(data.visitors[0].id).toBe('visitor-1');\n      expect(data.visitors[0].intentScore).toBe(85);\n      expect(data.visitors[0].geoLocation.country).toBe('NG');\n      expect(data.visitors[0].device.type).toBe('desktop');\n      expect(data.visitors[0].bounce).toBe(false); // bounceRate 0.2 < 0.5\n      expect(data.visitors[1].bounce).toBe(true); // bounceRate 0.8 > 0.5\n      \n      // Verify summary statistics\n      expect(data.summary.totalSessions).toBe(2);\n      expect(data.summary.avgIntentScore).toBe(75); // (85 + 65) / 2\n      expect(data.summary.bounceRate).toBe(50); // 1 out of 2 bounced\n      expect(data.summary.deviceDistribution.desktop).toBe(1);\n      expect(data.summary.deviceDistribution.mobile).toBe(1);\n      expect(data.summary.countryDistribution.NG).toBe(1);\n      expect(data.summary.countryDistribution.KE).toBe(1);\n\n      // Verify database query\n      expect(mockPrismaClient.mCPVisitorSessions.findMany).toHaveBeenCalledWith({\n        where: {\n          organizationId: authContext.organizationId\n        },\n        take: 10,\n        skip: 0,\n        include: {\n          organization: {\n            select: { id: true, name: true }\n          }\n        },\n        orderBy: {\n          sessionStart: 'desc'\n        }\n      });\n\n      // Verify metadata\n      expect(data.meta.source).toBe('MCP_VISITOR_SESSIONS');\n      expect(data.meta.duration).toBeDefined();\n    });\n\n    it('should filter visitors by date range and visitor ID', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const mockSessions = [createMockVisitorSession()];\n      mockPrismaClient.mCPVisitorSessions.findMany.mockResolvedValue(mockSessions);\n\n      const uri = 'leadpulse://visitors?visitorId=visitor-123&dateFrom=2024-01-01T00:00:00.000Z&dateTo=2024-01-31T23:59:59.999Z';\n      \n      // Act\n      const result = await server['readResource'](uri, authContext);\n\n      // Assert\n      expect(mockPrismaClient.mCPVisitorSessions.findMany).toHaveBeenCalledWith({\n        where: {\n          organizationId: authContext.organizationId,\n          visitorId: 'visitor-123',\n          sessionStart: {\n            gte: new Date('2024-01-01T00:00:00.000Z'),\n            lte: new Date('2024-01-31T23:59:59.999Z')\n          }\n        },\n        take: 10,\n        skip: 0,\n        include: {\n          organization: {\n            select: { id: true, name: true }\n          }\n        },\n        orderBy: {\n          sessionStart: 'desc'\n        }\n      });\n    });\n\n    it('should use fallback when primary query fails', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      \n      // First call fails, fallback succeeds\n      mockPrismaClient.mCPVisitorSessions.findMany\n        .mockRejectedValueOnce(new Error('Analytics service unavailable'))\n        .mockResolvedValueOnce([createMockVisitorSession()]);\n\n      const uri = 'leadpulse://visitors';\n      \n      // Act\n      const result = await server['readResource'](uri, authContext);\n\n      // Assert\n      expect(result.success).toBe(true);\n      expect(result.meta.fallbackUsed).toBe(true);\n    });\n  });\n\n  describe('Visitor Tracking Tool', () => {\n    it('should track visitor with comprehensive session analysis', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const mockSessions = [\n        createMockVisitorSession({\n          visitorId: 'visitor-123',\n          sessionId: 'session-current',\n          organizationId: authContext.organizationId,\n          sessionStart: new Date(Date.now() - 1800000), // 30 minutes ago\n          sessionEnd: new Date(),\n          pageViews: 8,\n          duration: 1800,\n          conversionValue: 150,\n          intentScore: 90\n        }),\n        createMockVisitorSession({\n          visitorId: 'visitor-123',\n          sessionId: 'session-previous',\n          organizationId: authContext.organizationId,\n          sessionStart: new Date(Date.now() - 86400000), // 1 day ago\n          sessionEnd: new Date(Date.now() - 86400000 + 600000), // 10 minutes duration\n          pageViews: 3,\n          duration: 600,\n          conversionValue: 0,\n          intentScore: 70\n        })\n      ];\n\n      mockPrismaClient.mCPVisitorSessions.findMany.mockResolvedValue(mockSessions);\n\n      const args = { visitorId: 'visitor-123', includeJourney: true, includeHeatmap: false };\n\n      // Act\n      const result = await server['callTool']('track_visitor', args, authContext);\n\n      // Assert\n      expect(result.content[0].type).toBe('text');\n      const data = JSON.parse(result.content[0].text);\n      expect(data.success).toBe(true);\n      expect(data.data.id).toBe('visitor-123');\n      \n      // Verify current session data\n      expect(data.data.currentSession.sessionId).toBe('session-current');\n      expect(data.data.currentSession.pageViews).toBe(8);\n      expect(data.data.currentSession.duration).toBe(1800);\n      expect(data.data.currentSession.intentScore).toBe(90);\n      expect(data.data.currentSession.converted).toBe(true);\n      expect(data.data.currentSession.conversionValue).toBe(150);\n      \n      // Verify visitor profile aggregation\n      expect(data.data.profile.isReturning).toBe(true);\n      expect(data.data.profile.totalSessions).toBe(2);\n      expect(data.data.profile.totalPageViews).toBe(11); // 8 + 3\n      expect(data.data.profile.totalConversions).toBe(1);\n      expect(data.data.profile.averageSessionDuration).toBe(1200); // (1800 + 600) / 2\n\n      // Verify database query\n      expect(mockPrismaClient.mCPVisitorSessions.findMany).toHaveBeenCalledWith({\n        where: {\n          visitorId: 'visitor-123',\n          organizationId: authContext.organizationId\n        },\n        include: {\n          organization: {\n            select: { id: true, name: true }\n          }\n        },\n        orderBy: {\n          sessionStart: 'desc'\n        },\n        take: 10\n      });\n\n      // Verify audit logging\n      expect(mockAuditLogger.logEvent).toHaveBeenCalledWith(\n        expect.objectContaining({\n          eventType: 'API_ACCESS',\n          action: 'CREATE',\n          outcome: 'success'\n        })\n      );\n    });\n\n    it('should return error for non-existent visitor', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      mockPrismaClient.mCPVisitorSessions.findMany.mockResolvedValue([]);\n\n      const args = { visitorId: 'non-existent' };\n\n      // Act\n      const result = await server['callTool']('track_visitor', args, authContext);\n\n      // Assert\n      expect(result.isError).toBe(true);\n      const data = JSON.parse(result.content[0].text);\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('Visitor not found');\n      expect(data.visitorId).toBe('non-existent');\n    });\n\n    it('should handle single session visitors correctly', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const mockSession = createMockVisitorSession({\n        visitorId: 'new-visitor',\n        organizationId: authContext.organizationId\n      });\n\n      mockPrismaClient.mCPVisitorSessions.findMany.mockResolvedValue([mockSession]);\n\n      const args = { visitorId: 'new-visitor' };\n\n      // Act\n      const result = await server['callTool']('track_visitor', args, authContext);\n\n      // Assert\n      const data = JSON.parse(result.content[0].text);\n      expect(data.data.profile.isReturning).toBe(false);\n      expect(data.data.profile.totalSessions).toBe(1);\n    });\n  });\n\n  describe('Visitor Behavior Analysis Tool', () => {\n    it('should analyze visitor behavior patterns with insights', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      \n      // Mock the behavior analysis method\n      server['analyzeVisitorBehavior'] = jest.fn().mockResolvedValue({\n        content: [{\n          type: \"text\",\n          text: JSON.stringify({\n            success: true,\n            data: {\n              visitorId: 'visitor-123',\n              timeRange: '7d',\n              behaviorMetrics: {\n                avgSessionDuration: 450,\n                avgPageViews: 6.5,\n                avgScrollDepth: 78,\n                avgInteractions: 12,\n                intentTrend: 'increasing',\n                engagementLevel: 'high'\n              },\n              patterns: [\n                'Consistent page progression through product pages',\n                'High interaction with pricing information',\n                'Multiple visits to contact page',\n                'Strong mobile engagement'\n              ],\n              insights: [\n                'Visitor shows strong purchase intent',\n                'Likely in decision-making phase',\n                'Recommend targeted offer or follow-up'\n              ],\n              riskFactors: [],\n              recommendations: [\n                'Send personalized product demo invitation',\n                'Provide pricing consultation',\n                'Enable live chat for immediate support'\n              ]\n            }\n          })\n        }]\n      });\n\n      const args = { visitorId: 'visitor-123', timeRange: '7d' };\n\n      // Act\n      const result = await server['callTool']('analyze_visitor_behavior', args, authContext);\n\n      // Assert\n      const data = JSON.parse(result.content[0].text);\n      expect(data.success).toBe(true);\n      expect(data.data.visitorId).toBe('visitor-123');\n      expect(data.data.behaviorMetrics.engagementLevel).toBe('high');\n      expect(data.data.patterns).toHaveLength(4);\n      expect(data.data.insights).toContain('Visitor shows strong purchase intent');\n      expect(data.data.recommendations).toContain('Send personalized product demo invitation');\n    });\n  });\n\n  describe('Real-time Visitors Tool', () => {\n    it('should get current active visitors with location and device info', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      \n      // Mock real-time visitors method\n      server['getRealTimeVisitors'] = jest.fn().mockResolvedValue({\n        content: [{\n          type: \"text\",\n          text: JSON.stringify({\n            success: true,\n            data: {\n              activeVisitors: [\n                {\n                  visitorId: 'visitor-active-1',\n                  currentPage: '/pricing',\n                  sessionDuration: 180,\n                  pageViews: 3,\n                  location: { country: 'NG', city: 'Lagos' },\n                  device: { type: 'desktop', browser: 'Chrome' },\n                  intentScore: 85,\n                  lastActivity: new Date().toISOString()\n                },\n                {\n                  visitorId: 'visitor-active-2',\n                  currentPage: '/features',\n                  sessionDuration: 45,\n                  pageViews: 1,\n                  location: { country: 'KE', city: 'Nairobi' },\n                  device: { type: 'mobile', browser: 'Safari' },\n                  intentScore: 45,\n                  lastActivity: new Date().toISOString()\n                }\n              ],\n              summary: {\n                totalActive: 2,\n                avgSessionDuration: 112.5,\n                topPages: ['/pricing', '/features'],\n                topCountries: ['NG', 'KE'],\n                deviceBreakdown: { desktop: 1, mobile: 1 }\n              }\n            }\n          })\n        }]\n      });\n\n      const args = { includeLocation: true, includeDevice: true };\n\n      // Act\n      const result = await server['callTool']('get_real_time_visitors', args, authContext);\n\n      // Assert\n      const data = JSON.parse(result.content[0].text);\n      expect(data.success).toBe(true);\n      expect(data.data.activeVisitors).toHaveLength(2);\n      expect(data.data.activeVisitors[0].location.country).toBe('NG');\n      expect(data.data.activeVisitors[0].device.type).toBe('desktop');\n      expect(data.data.summary.totalActive).toBe(2);\n      expect(data.data.summary.deviceBreakdown.desktop).toBe(1);\n      expect(data.data.summary.deviceBreakdown.mobile).toBe(1);\n    });\n  });\n\n  describe('High Intent Visitor Identification', () => {\n    it('should identify visitors with high conversion intent', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      \n      // Mock high intent identification\n      server['identifyHighIntentVisitors'] = jest.fn().mockResolvedValue({\n        content: [{\n          type: \"text\",\n          text: JSON.stringify({\n            success: true,\n            data: {\n              highIntentVisitors: [\n                {\n                  visitorId: 'visitor-intent-1',\n                  intentScore: 92,\n                  signals: [\n                    'Multiple pricing page visits',\n                    'Extended time on product demos',\n                    'Downloaded resources',\n                    'Viewed contact information'\n                  ],\n                  lastActivity: new Date().toISOString(),\n                  sessionCount: 3,\n                  conversionProbability: 85,\n                  recommendedActions: [\n                    'Immediate sales outreach',\n                    'Personalized demo offer',\n                    'Limited-time pricing incentive'\n                  ]\n                },\n                {\n                  visitorId: 'visitor-intent-2',\n                  intentScore: 78,\n                  signals: [\n                    'Comparison page visits',\n                    'FAQ section engagement',\n                    'Case study downloads'\n                  ],\n                  lastActivity: new Date().toISOString(),\n                  sessionCount: 2,\n                  conversionProbability: 65,\n                  recommendedActions: [\n                    'Follow-up email sequence',\n                    'Customer success story sharing',\n                    'Free trial offer'\n                  ]\n                }\n              ],\n              summary: {\n                totalIdentified: 2,\n                avgIntentScore: 85,\n                avgConversionProbability: 75,\n                threshold: 70\n              }\n            }\n          })\n        }]\n      });\n\n      const args = { threshold: 70, limit: 20 };\n\n      // Act\n      const result = await server['callTool']('identify_high_intent_visitors', args, authContext);\n\n      // Assert\n      const data = JSON.parse(result.content[0].text);\n      expect(data.success).toBe(true);\n      expect(data.data.highIntentVisitors).toHaveLength(2);\n      expect(data.data.highIntentVisitors[0].intentScore).toBe(92);\n      expect(data.data.highIntentVisitors[0].conversionProbability).toBe(85);\n      expect(data.data.highIntentVisitors[0].signals).toContain('Multiple pricing page visits');\n      expect(data.data.highIntentVisitors[0].recommendedActions).toContain('Immediate sales outreach');\n      expect(data.data.summary.threshold).toBe(70);\n      expect(data.data.summary.avgIntentScore).toBe(85);\n    });\n  });\n\n  describe('Conversion Funnel Analysis', () => {\n    it('should analyze conversion funnel with drop-off points', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      \n      // Mock conversion funnel analysis\n      server['getConversionFunnel'] = jest.fn().mockResolvedValue({\n        content: [{\n          type: \"text\",\n          text: JSON.stringify({\n            success: true,\n            data: {\n              funnelId: 'default-funnel',\n              dateRange: '30d',\n              stages: [\n                {\n                  name: 'Landing Page',\n                  visitors: 1000,\n                  conversions: 800,\n                  conversionRate: 80,\n                  dropOff: 200,\n                  dropOffRate: 20\n                },\n                {\n                  name: 'Product Page',\n                  visitors: 800,\n                  conversions: 400,\n                  conversionRate: 50,\n                  dropOff: 400,\n                  dropOffRate: 50\n                },\n                {\n                  name: 'Pricing Page',\n                  visitors: 400,\n                  conversions: 200,\n                  conversionRate: 50,\n                  dropOff: 200,\n                  dropOffRate: 50\n                },\n                {\n                  name: 'Signup',\n                  visitors: 200,\n                  conversions: 50,\n                  conversionRate: 25,\n                  dropOff: 150,\n                  dropOffRate: 75\n                }\n              ],\n              insights: [\n                'Biggest drop-off occurs at signup stage (75%)',\n                'Product to pricing conversion is healthy (50%)',\n                'Landing page performance is strong (80%)'\n              ],\n              recommendations: [\n                'Simplify signup process',\n                'Add social proof on signup page',\n                'Implement exit-intent popup'\n              ],\n              totalConversionRate: 5.0 // 50/1000 * 100\n            }\n          })\n        }]\n      });\n\n      const args = { dateRange: '30d', includeSegments: false };\n\n      // Act\n      const result = await server['callTool']('get_conversion_funnel', args, authContext);\n\n      // Assert\n      const data = JSON.parse(result.content[0].text);\n      expect(data.success).toBe(true);\n      expect(data.data.stages).toHaveLength(4);\n      expect(data.data.stages[0].name).toBe('Landing Page');\n      expect(data.data.stages[0].conversionRate).toBe(80);\n      expect(data.data.stages[3].dropOffRate).toBe(75); // Highest drop-off\n      expect(data.data.insights).toContain('Biggest drop-off occurs at signup stage (75%)');\n      expect(data.data.recommendations).toContain('Simplify signup process');\n      expect(data.data.totalConversionRate).toBe(5.0);\n    });\n  });\n\n  describe('Page Analytics Tool', () => {\n    it('should analyze specific page performance with heatmap data', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      \n      // Mock page analytics\n      server['getPageAnalytics'] = jest.fn().mockResolvedValue({\n        content: [{\n          type: \"text\",\n          text: JSON.stringify({\n            success: true,\n            data: {\n              pageUrl: '/pricing',\n              dateRange: '7d',\n              metrics: {\n                pageViews: 1500,\n                uniqueVisitors: 1200,\n                avgTimeOnPage: 120,\n                bounceRate: 25,\n                exitRate: 35,\n                conversions: 75,\n                conversionRate: 5.0\n              },\n              heatmapData: {\n                clickMap: [\n                  { element: 'pricing-button', clicks: 150, conversionRate: 12 },\n                  { element: 'feature-list', clicks: 89, conversionRate: 5 },\n                  { element: 'testimonial', clicks: 45, conversionRate: 8 }\n                ],\n                scrollData: {\n                  maxScrollReached: 95,\n                  avgScrollDepth: 75,\n                  scrollDistribution: [100, 95, 85, 75, 60, 45, 30, 15]\n                }\n              },\n              insights: [\n                'High engagement with pricing information',\n                'Strong scroll depth indicates content relevance',\n                'Testimonials drive meaningful interactions'\n              ],\n              optimizations: [\n                'Move CTA higher on page',\n                'Add more social proof',\n                'Optimize mobile layout'\n              ]\n            }\n          })\n        }]\n      });\n\n      const args = { pageUrl: '/pricing', includeHeatmap: true, dateRange: '7d' };\n\n      // Act\n      const result = await server['callTool']('get_page_analytics', args, authContext);\n\n      // Assert\n      const data = JSON.parse(result.content[0].text);\n      expect(data.success).toBe(true);\n      expect(data.data.pageUrl).toBe('/pricing');\n      expect(data.data.metrics.pageViews).toBe(1500);\n      expect(data.data.metrics.conversionRate).toBe(5.0);\n      expect(data.data.heatmapData.clickMap).toHaveLength(3);\n      expect(data.data.heatmapData.clickMap[0].element).toBe('pricing-button');\n      expect(data.data.heatmapData.scrollData.avgScrollDepth).toBe(75);\n      expect(data.data.insights).toContain('High engagement with pricing information');\n      expect(data.data.optimizations).toContain('Move CTA higher on page');\n    });\n  });\n\n  describe('Resource URI Validation', () => {\n    it('should throw error for unknown resource paths', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const invalidUri = 'leadpulse://unknown-resource';\n\n      // Act & Assert\n      await expect(\n        server['readResource'](invalidUri, authContext)\n      ).rejects.toThrow(MCPValidationError);\n    });\n\n    it('should parse query parameters correctly', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      mockPrismaClient.mCPVisitorSessions.findMany.mockResolvedValue([]);\n\n      const uri = 'leadpulse://visitors?visitorId=test-123&limit=25&includeHeatmap=true&includeJourney=true';\n\n      // Act\n      await server['readResource'](uri, authContext);\n\n      // Assert\n      expect(mockPrismaClient.mCPVisitorSessions.findMany).toHaveBeenCalledWith(\n        expect.objectContaining({\n          where: expect.objectContaining({\n            visitorId: 'test-123'\n          }),\n          take: 25\n        })\n      );\n    });\n  });\n\n  describe('Tool Validation', () => {\n    it('should throw error for unknown tools', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n\n      // Act & Assert\n      await expect(\n        server['callTool']('unknown_tool', {}, authContext)\n      ).rejects.toThrow(MCPValidationError);\n    });\n  });\n\n  describe('Performance Testing', () => {\n    it('should handle large visitor datasets efficiently', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const largeSessionSet = Array.from({ length: 200 }, (_, i) => \n        createMockVisitorSession({ \n          visitorId: `visitor-${i}`,\n          sessionId: `session-${i}`\n        })\n      );\n\n      mockPrismaClient.mCPVisitorSessions.findMany.mockImplementation(() => \n        mockDatabaseScenarios.fastQuery(largeSessionSet)\n      );\n\n      const uri = 'leadpulse://visitors?limit=200';\n\n      // Act\n      const startTime = performance.now();\n      const result = await server['readResource'](uri, authContext);\n      const endTime = performance.now();\n      const duration = endTime - startTime;\n\n      // Assert\n      expect(duration).toBeLessThan(400); // Should complete quickly\n      const data = JSON.parse(result.text);\n      expect(data.visitors).toHaveLength(200);\n      expect(data.summary.totalSessions).toBe(200);\n      expect(data.meta.duration).toBeDefined();\n    });\n\n    it('should track duration in tool execution', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const mockSession = createMockVisitorSession();\n      mockPrismaClient.mCPVisitorSessions.findMany.mockResolvedValue([mockSession]);\n\n      const args = { visitorId: 'visitor-123' };\n\n      // Act\n      const result = await server['callTool']('track_visitor', args, authContext);\n\n      // Assert\n      const data = JSON.parse(result.content[0].text);\n      expect(data.meta?.duration).toBeGreaterThan(0);\n      expect(typeof data.meta?.duration).toBe('number');\n\n      // Verify duration is logged in audit\n      expect(mockAuditLogger.logEvent).toHaveBeenCalledWith(\n        expect.objectContaining({\n          details: expect.objectContaining({\n            duration: expect.any(Number)\n          })\n        })\n      );\n    });\n  });\n\n  describe('Data Privacy and Security', () => {\n    it('should enforce organization isolation in visitor data', async () => {\n      // Arrange\n      const userContext = testUtils.createMockAuthContext({ organizationId: 'org-123' });\n\n      mockPrismaClient.mCPVisitorSessions.findMany.mockResolvedValue([]);\n\n      const uri = 'leadpulse://visitors';\n\n      // Act\n      await server['readResource'](uri, userContext);\n\n      // Assert\n      expect(mockPrismaClient.mCPVisitorSessions.findMany).toHaveBeenCalledWith(\n        expect.objectContaining({\n          where: expect.objectContaining({\n            organizationId: 'org-123'\n          })\n        })\n      );\n    });\n\n    it('should sanitize sensitive visitor data', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const sessionWithPII = createMockVisitorSession({\n        insights: JSON.stringify([\n          'High value customer',\n          'IP: 192.168.1.100',\n          'Email: user@example.com'\n        ])\n      });\n\n      mockPrismaClient.mCPVisitorSessions.findMany.mockResolvedValue([sessionWithPII]);\n\n      const uri = 'leadpulse://visitors';\n\n      // Act\n      const result = await server['readResource'](uri, authContext);\n\n      // Assert\n      const data = JSON.parse(result.text);\n      const visitor = data.visitors[0];\n      \n      // Sensitive data should be sanitized\n      expect(JSON.stringify(visitor)).not.toContain('192.168.1.100');\n      expect(JSON.stringify(visitor)).not.toContain('user@example.com');\n      \n      // General insights should remain\n      expect(visitor.insights).toContain('High value customer');\n    });\n\n    it('should respect GDPR data minimization principles', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext({ role: 'USER' });\n      const mockSession = createMockVisitorSession();\n      mockPrismaClient.mCPVisitorSessions.findMany.mockResolvedValue([mockSession]);\n\n      const args = { visitorId: 'visitor-123', includeJourney: false, includeHeatmap: false };\n\n      // Act\n      const result = await server['callTool']('track_visitor', args, authContext);\n\n      // Assert\n      const data = JSON.parse(result.content[0].text);\n      \n      // Should only include requested data\n      expect(data.data.currentSession).toBeDefined();\n      expect(data.data.profile).toBeDefined();\n      \n      // Should not include detailed journey or heatmap data when not requested\n      expect(data.data.detailedJourney).toBeUndefined();\n      expect(data.data.heatmapInteractions).toBeUndefined();\n    });\n\n    it('should log privacy-sensitive data access appropriately', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      mockPrismaClient.mCPVisitorSessions.findMany.mockResolvedValue([]);\n\n      const uri = 'leadpulse://visitors';\n\n      // Act\n      await server['readResource'](uri, authContext);\n\n      // Assert\n      expect(mockAuditLogger.logEvent).toHaveBeenCalledWith(\n        expect.objectContaining({\n          eventType: 'DATA_ACCESS',\n          action: 'read',\n          outcome: 'success',\n          details: expect.objectContaining({\n            metadata: expect.objectContaining({\n              resourceUri: 'leadpulse://visitors'\n            })\n          }),\n          compliance: expect.objectContaining({\n            gdprRelevant: expect.any(Boolean)\n          })\n        })\n      );\n    });\n  });\n\n  describe('Intent Scoring and Behavioral Analysis', () => {\n    it('should calculate accurate intent scores from behavioral signals', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const highIntentSession = createMockVisitorSession({\n        pageViews: 15,\n        duration: 1800, // 30 minutes\n        scrollDepth: 95,\n        interactions: 25,\n        landingPage: '/home',\n        exitPage: '/contact',\n        intentScore: 95\n      });\n\n      const lowIntentSession = createMockVisitorSession({\n        pageViews: 1,\n        duration: 30, // 30 seconds\n        scrollDepth: 15,\n        interactions: 1,\n        landingPage: '/home',\n        exitPage: '/home',\n        intentScore: 15,\n        bounceRate: 0.9\n      });\n\n      mockPrismaClient.mCPVisitorSessions.findMany.mockResolvedValue([\n        highIntentSession,\n        lowIntentSession\n      ]);\n\n      const uri = 'leadpulse://visitors';\n\n      // Act\n      const result = await server['readResource'](uri, authContext);\n\n      // Assert\n      const data = JSON.parse(result.text);\n      expect(data.visitors[0].intentScore).toBe(95);\n      expect(data.visitors[1].intentScore).toBe(15);\n      expect(data.summary.avgIntentScore).toBe(55); // (95 + 15) / 2\n    });\n\n    it('should identify behavioral patterns for segmentation', async () => {\n      // Arrange\n      const sessions = [\n        createMockVisitorSession({\n          visitorId: 'mobile-user',\n          deviceType: 'mobile',\n          pageViews: 3,\n          duration: 180\n        }),\n        createMockVisitorSession({\n          visitorId: 'desktop-power-user',\n          deviceType: 'desktop',\n          pageViews: 12,\n          duration: 1200\n        })\n      ];\n\n      mockPrismaClient.mCPVisitorSessions.findMany.mockResolvedValue(sessions);\n\n      const uri = 'leadpulse://visitors';\n\n      // Act\n      const result = await server['readResource'](uri, authContext);\n\n      // Assert\n      const data = JSON.parse(result.text);\n      expect(data.summary.deviceDistribution.mobile).toBe(1);\n      expect(data.summary.deviceDistribution.desktop).toBe(1);\n      expect(data.summary.averageDuration).toBe(690); // (180 + 1200) / 2\n    });\n  });\n\n  describe('Integration Testing', () => {\n    it('should handle complete visitor tracking workflow', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      \n      // Setup visitor data\n      const mockSession = createMockVisitorSession();\n      mockPrismaClient.mCPVisitorSessions.findMany.mockResolvedValue([mockSession]);\n\n      // Act - Get visitors overview\n      const visitorsResult = await server['readResource']('leadpulse://visitors', authContext);\n      \n      // Act - Track specific visitor\n      const trackResult = await server['callTool']('track_visitor', \n        { visitorId: mockSession.visitorId }, authContext);\n\n      // Assert - Visitors\n      const visitorsData = JSON.parse(visitorsResult.text);\n      expect(visitorsData.visitors).toHaveLength(1);\n      expect(visitorsData.summary.totalSessions).toBe(1);\n\n      // Assert - Tracking\n      const trackData = JSON.parse(trackResult.content[0].text);\n      expect(trackData.success).toBe(true);\n      expect(trackData.data.id).toBe(mockSession.visitorId);\n\n      // Verify both operations were logged\n      expect(mockAuditLogger.logEvent).toHaveBeenCalledTimes(3); // 2 operations + 1 additional\n    });\n  });\n});"],"names":["jest","mock","prisma","mockPrismaClient","redisCache","mockRedisClient","CACHE_KEYS","API_RATE_LIMIT","key","enterpriseAuditLogger","mockAuditLogger","createMockVisitorSession","overrides","id","sessionId","visitorId","organizationId","sessionStart","Date","now","sessionEnd","pageViews","duration","bounceRate","conversionValue","intentScore","landingPage","exitPage","country","city","region","deviceType","browser","operatingSystem","source","medium","campaign","referrer","scrollDepth","avgTimeOnPage","interactions","insights","JSON","stringify","organization","name","createMockHeatmapData","pageUrl","clickMap","clicks","x","y","count","scrollMap","maxScroll","avgScroll","distribution","sessionCount","uniqueVisitors","calculatedAt","describe","server","config","beforeEach","resetAllMocks","setupDefaultMocks","version","port","enabled","authentication","required","methods","rateLimit","maxRequests","windowMs","fallback","timeout","validation","strict","sanitizeOutput","LeadPulseMCPServer","afterEach","it","userContext","testUtils","createMockAuthContext","role","permissions","resources","expect","toHaveLength","map","r","uri","toEqual","adminContext","orgUserContext","tools","t","trackTool","find","inputSchema","properties","toBeDefined","toContain","authContext","mockSessions","mCPVisitorSessions","findMany","mockResolvedValue","result","toBe","mimeType","data","parse","text","visitors","geoLocation","device","type","bounce","summary","totalSessions","avgIntentScore","deviceDistribution","desktop","mobile","countryDistribution","NG","KE","toHaveBeenCalledWith","where","take","skip","include","select","orderBy","meta","gte","lte","mockRejectedValueOnce","Error","mockResolvedValueOnce","success","fallbackUsed","args","includeJourney","includeHeatmap","content","currentSession","converted","profile","isReturning","totalPageViews","totalConversions","averageSessionDuration","logEvent","objectContaining","eventType","action","outcome","isError","error","mockSession","fn","timeRange","behaviorMetrics","avgSessionDuration","avgPageViews","avgScrollDepth","avgInteractions","intentTrend","engagementLevel","patterns","riskFactors","recommendations","activeVisitors","currentPage","sessionDuration","location","lastActivity","toISOString","totalActive","topPages","topCountries","deviceBreakdown","includeLocation","includeDevice","highIntentVisitors","signals","conversionProbability","recommendedActions","totalIdentified","avgConversionProbability","threshold","limit","funnelId","dateRange","stages","conversions","conversionRate","dropOff","dropOffRate","totalConversionRate","includeSegments","metrics","exitRate","heatmapData","element","scrollData","maxScrollReached","scrollDistribution","optimizations","invalidUri","rejects","toThrow","MCPValidationError","largeSessionSet","Array","from","length","_","i","mockImplementation","mockDatabaseScenarios","fastQuery","startTime","performance","endTime","toBeLessThan","toBeGreaterThan","details","any","Number","sessionWithPII","visitor","not","detailedJourney","toBeUndefined","heatmapInteractions","metadata","resourceUri","compliance","gdprRelevant","Boolean","highIntentSession","lowIntentSession","sessions","averageDuration","visitorsResult","trackResult","visitorsData","trackData","toHaveBeenCalledTimes"],"mappings":"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"}