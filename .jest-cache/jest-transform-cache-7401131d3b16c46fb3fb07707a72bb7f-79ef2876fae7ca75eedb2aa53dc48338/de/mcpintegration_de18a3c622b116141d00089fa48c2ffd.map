{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/lib/ai/mcp-integration.ts"],"sourcesContent":["/**\n * MCP Integration for Supreme-AI v3 Engine\n * \n * This module provides MCP (Model Context Protocol) integration for the Supreme-AI v3 engine,\n * allowing the AI to access MarketSage data through standardized MCP servers with fallback\n * to direct database access when MCP is disabled or unavailable.\n */\n\nimport { MarketSageMCPClient } from '../../mcp/clients/mcp-client';\nimport { \n  type MCPAuthContext, \n  type MCPClientResponse,\n  CustomerQuery,\n  type CampaignAnalyticsQuery,\n  LeadPulseQuery,\n  type SendMessageRequest,\n  type MonitoringQuery \n} from '../../mcp/types/mcp-types';\n\nimport { logger } from '../logger';\nimport { prisma } from '../db/prisma';\n\n/**\n * MCP-enhanced AI context for Supreme-AI v3\n */\nexport interface MCPAIContext {\n  userId: string;\n  organizationId: string;\n  role: string;\n  sessionId?: string;\n  preferences?: Record<string, any>;\n  capabilities?: string[];\n}\n\n/**\n * MCP Integration service for Supreme-AI v3\n */\nexport class SupremeAIMCPIntegration {\n  private mcpClient: MarketSageMCPClient;\n  private enabled: boolean;\n\n  constructor(authContext?: MCPAuthContext) {\n    this.mcpClient = new MarketSageMCPClient(authContext);\n    this.enabled = this.mcpClient.isEnabled();\n  }\n\n  /**\n   * Update authentication context\n   */\n  updateAuthContext(authContext: MCPAuthContext): void {\n    this.mcpClient.setAuthContext(authContext);\n  }\n\n  /**\n   * Check if MCP is enabled\n   */\n  isEnabled(): boolean {\n    return this.enabled;\n  }\n\n  // ============================================================================\n  // Customer Intelligence Methods\n  // ============================================================================\n\n  /**\n   * Get customer insights for AI context\n   */\n  async getCustomerInsights(query: string, options: {\n    includeSegments?: boolean;\n    includePredictions?: boolean;\n    includeEngagement?: boolean;\n  } = {}): Promise<MCPClientResponse> {\n    try {\n      logger.info('MCP Integration: Getting customer insights', { query, options });\n\n      // Search customers first\n      const searchResult = await this.mcpClient.searchCustomers(query, {\n        limit: 10,\n        includeSegments: options.includeSegments || true,\n        includePredictions: options.includePredictions || true\n      });\n\n      if (searchResult.success && searchResult.data) {\n        const customers = Array.isArray(searchResult.data) ? searchResult.data : [searchResult.data];\n        \n        // Enhance with additional context for AI\n        const enhancedInsights = await this.enhanceCustomerInsights(customers, options);\n        \n        return {\n          success: true,\n          data: enhancedInsights,\n          fromFallback: searchResult.fromFallback\n        };\n      }\n\n      return searchResult;\n    } catch (error) {\n      logger.error('MCP Integration: Customer insights failed', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Get detailed customer profile for AI decision making\n   */\n  async getCustomerProfile(customerId: string, includeFullContext = true): Promise<MCPClientResponse> {\n    try {\n      logger.info('MCP Integration: Getting customer profile', { customerId });\n\n      const profileResult = await this.mcpClient.getCustomerProfile(customerId, {\n        includeSegments: includeFullContext,\n        includePredictions: includeFullContext\n      });\n\n      if (profileResult.success && profileResult.data) {\n        // Add AI-specific context\n        const aiContext = await this.buildCustomerAIContext(profileResult.data);\n        \n        return {\n          success: true,\n          data: {\n            ...profileResult.data,\n            aiContext\n          },\n          fromFallback: profileResult.fromFallback\n        };\n      }\n\n      return profileResult;\n    } catch (error) {\n      logger.error('MCP Integration: Customer profile failed', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Get customer segments for AI segmentation decisions\n   */\n  async getCustomerSegments(organizationId?: string): Promise<MCPClientResponse> {\n    try {\n      logger.info('MCP Integration: Getting customer segments', { organizationId });\n\n      const segmentsResult = await this.mcpClient.getCustomerSegments(organizationId);\n\n      if (segmentsResult.success && segmentsResult.data) {\n        // Add AI-friendly segment analysis\n        const aiSegmentAnalysis = await this.buildSegmentAIContext(segmentsResult.data);\n        \n        return {\n          success: true,\n          data: {\n            segments: segmentsResult.data,\n            aiAnalysis: aiSegmentAnalysis\n          },\n          fromFallback: segmentsResult.fromFallback\n        };\n      }\n\n      return segmentsResult;\n    } catch (error) {\n      logger.error('MCP Integration: Customer segments failed', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  // ============================================================================\n  // Campaign Intelligence Methods\n  // ============================================================================\n\n  /**\n   * Get campaign analytics for AI optimization\n   */\n  async getCampaignAnalytics(query: CampaignAnalyticsQuery): Promise<MCPClientResponse> {\n    try {\n      logger.info('MCP Integration: Getting campaign analytics', { query });\n\n      const analyticsResult = await this.mcpClient.getCampaignAnalytics(query);\n\n      if (analyticsResult.success && analyticsResult.data) {\n        // Add AI-specific campaign insights\n        const aiInsights = await this.buildCampaignAIInsights(analyticsResult.data);\n        \n        return {\n          success: true,\n          data: {\n            ...analyticsResult.data,\n            aiInsights\n          },\n          fromFallback: analyticsResult.fromFallback\n        };\n      }\n\n      return analyticsResult;\n    } catch (error) {\n      logger.error('MCP Integration: Campaign analytics failed', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Get campaign performance for AI decision making\n   */\n  async getCampaignPerformance(campaignId: string): Promise<MCPClientResponse> {\n    try {\n      logger.info('MCP Integration: Getting campaign performance', { campaignId });\n\n      const performanceResult = await this.mcpClient.getCampaignPerformance(campaignId);\n\n      if (performanceResult.success && performanceResult.data) {\n        // Add AI performance analysis\n        const aiPerformanceAnalysis = await this.buildPerformanceAIAnalysis(performanceResult.data);\n        \n        return {\n          success: true,\n          data: {\n            ...performanceResult.data,\n            aiAnalysis: aiPerformanceAnalysis\n          },\n          fromFallback: performanceResult.fromFallback\n        };\n      }\n\n      return performanceResult;\n    } catch (error) {\n      logger.error('MCP Integration: Campaign performance failed', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  // ============================================================================\n  // Visitor Intelligence Methods\n  // ============================================================================\n\n  /**\n   * Get visitor behavior for AI analysis\n   */\n  async getVisitorBehavior(visitorId: string): Promise<MCPClientResponse> {\n    try {\n      logger.info('MCP Integration: Getting visitor behavior', { visitorId });\n\n      const behaviorResult = await this.mcpClient.getVisitorBehavior(visitorId);\n\n      if (behaviorResult.success && behaviorResult.data) {\n        // Add AI behavior analysis\n        const aiBehaviorAnalysis = await this.buildVisitorBehaviorAIAnalysis(behaviorResult.data);\n        \n        return {\n          success: true,\n          data: {\n            ...behaviorResult.data,\n            aiAnalysis: aiBehaviorAnalysis\n          },\n          fromFallback: behaviorResult.fromFallback\n        };\n      }\n\n      return behaviorResult;\n    } catch (error) {\n      logger.error('MCP Integration: Visitor behavior failed', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  // ============================================================================\n  // Action Execution Methods\n  // ============================================================================\n\n  /**\n   * Execute AI-requested actions through MCP\n   */\n  async executeAction(actionType: string, actionData: any): Promise<MCPClientResponse> {\n    try {\n      logger.info('MCP Integration: Executing action', { actionType, actionData });\n\n      switch (actionType) {\n        case 'send_message':\n          return await this.mcpClient.sendMessage(actionData as SendMessageRequest);\n        \n        case 'update_customer':\n          // Would implement customer update through MCP\n          return { success: true, data: { message: 'Customer update not yet implemented' } };\n        \n        case 'create_campaign':\n          // Would implement campaign creation through MCP\n          return { success: true, data: { message: 'Campaign creation not yet implemented' } };\n        \n        default:\n          return {\n            success: false,\n            error: `Unknown action type: ${actionType}`\n          };\n      }\n    } catch (error) {\n      logger.error('MCP Integration: Action execution failed', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  // ============================================================================\n  // Context Building Methods\n  // ============================================================================\n\n  /**\n   * Build comprehensive AI context from multiple MCP sources\n   */\n  async buildComprehensiveAIContext(userId: string, organizationId: string): Promise<{\n    customer: any;\n    campaigns: any;\n    visitors: any;\n    monitoring: any;\n  }> {\n    try {\n      logger.info('MCP Integration: Building comprehensive AI context', { userId, organizationId });\n\n      const [customerData, campaignData, visitorData, monitoringData] = await Promise.allSettled([\n        this.getCustomerInsights(userId, { includeSegments: true, includePredictions: true }),\n        this.getCampaignAnalytics({ organizationId, limit: 10 }),\n        this.getVisitorBehavior(userId),\n        this.getMonitoringData({ metric: 'users', organizationId })\n      ]);\n\n      return {\n        customer: customerData.status === 'fulfilled' ? customerData.value.data : null,\n        campaigns: campaignData.status === 'fulfilled' ? campaignData.value.data : null,\n        visitors: visitorData.status === 'fulfilled' ? visitorData.value.data : null,\n        monitoring: monitoringData.status === 'fulfilled' ? monitoringData.value.data : null\n      };\n    } catch (error) {\n      logger.error('MCP Integration: Context building failed', error);\n      return {\n        customer: null,\n        campaigns: null,\n        visitors: null,\n        monitoring: null\n      };\n    }\n  }\n\n  // ============================================================================\n  // Private Helper Methods\n  // ============================================================================\n\n  /**\n   * Enhance customer insights with AI context\n   */\n  private async enhanceCustomerInsights(customers: any[], options: any): Promise<any> {\n    return {\n      customers,\n      totalCount: customers.length,\n      insights: {\n        highValueCustomers: customers.filter(c => c.predictions?.lifetimeValue > 1000).length,\n        atRiskCustomers: customers.filter(c => c.predictions?.churnRisk > 0.7).length,\n        activeSegments: [...new Set(customers.flatMap(c => c.segments || []))],\n        averageEngagement: customers.reduce((sum, c) => sum + (c.predictions?.engagementScore || 0), 0) / customers.length\n      }\n    };\n  }\n\n  /**\n   * Build customer AI context\n   */\n  private async buildCustomerAIContext(customer: any): Promise<any> {\n    return {\n      summary: `Customer ${customer.firstName} ${customer.lastName} (${customer.email})`,\n      keyInsights: [\n        customer.predictions?.churnRisk > 0.7 ? 'High churn risk' : 'Low churn risk',\n        customer.predictions?.lifetimeValue > 1000 ? 'High value customer' : 'Standard value customer',\n        `Engagement score: ${customer.predictions?.engagementScore || 0}/100`\n      ],\n      recommendations: this.generateCustomerRecommendations(customer)\n    };\n  }\n\n  /**\n   * Build segment AI context\n   */\n  private async buildSegmentAIContext(segments: any[]): Promise<any> {\n    return {\n      totalSegments: segments.length,\n      largestSegment: segments.reduce((max, segment) => \n        segment._count?.contacts > (max._count?.contacts || 0) ? segment : max, {}\n      ),\n      recommendations: [\n        'Consider creating more granular segments for better targeting',\n        'Monitor segment performance for optimization opportunities'\n      ]\n    };\n  }\n\n  /**\n   * Build campaign AI insights\n   */\n  private async buildCampaignAIInsights(campaignData: any): Promise<any> {\n    return {\n      performanceInsights: 'Campaign performance analysis not yet implemented',\n      recommendations: [\n        'Optimize send times based on engagement patterns',\n        'A/B test subject lines for better open rates'\n      ]\n    };\n  }\n\n  /**\n   * Build performance AI analysis\n   */\n  private async buildPerformanceAIAnalysis(performanceData: any): Promise<any> {\n    return {\n      insights: 'Performance analysis not yet implemented',\n      recommendations: ['Implement performance tracking']\n    };\n  }\n\n  /**\n   * Build visitor behavior AI analysis\n   */\n  private async buildVisitorBehaviorAIAnalysis(behaviorData: any): Promise<any> {\n    return {\n      insights: 'Visitor behavior analysis not yet implemented',\n      recommendations: ['Implement behavior tracking']\n    };\n  }\n\n  /**\n   * Generate customer recommendations\n   */\n  private generateCustomerRecommendations(customer: any): string[] {\n    const recommendations = [];\n    \n    if (customer.predictions?.churnRisk > 0.7) {\n      recommendations.push('Send retention campaign');\n    }\n    \n    if (customer.predictions?.lifetimeValue > 1000) {\n      recommendations.push('Offer premium services');\n    }\n    \n    if (customer.predictions?.engagementScore < 30) {\n      recommendations.push('Re-engagement campaign needed');\n    }\n    \n    return recommendations;\n  }\n\n  /**\n   * Get monitoring data\n   */\n  private async getMonitoringData(query: MonitoringQuery): Promise<MCPClientResponse> {\n    return await this.mcpClient.getMonitoringData(query);\n  }\n}"],"names":["SupremeAIMCPIntegration","constructor","authContext","mcpClient","MarketSageMCPClient","enabled","isEnabled","updateAuthContext","setAuthContext","getCustomerInsights","query","options","logger","info","searchResult","searchCustomers","limit","includeSegments","includePredictions","success","data","customers","Array","isArray","enhancedInsights","enhanceCustomerInsights","fromFallback","error","Error","message","getCustomerProfile","customerId","includeFullContext","profileResult","aiContext","buildCustomerAIContext","getCustomerSegments","organizationId","segmentsResult","aiSegmentAnalysis","buildSegmentAIContext","segments","aiAnalysis","getCampaignAnalytics","analyticsResult","aiInsights","buildCampaignAIInsights","getCampaignPerformance","campaignId","performanceResult","aiPerformanceAnalysis","buildPerformanceAIAnalysis","getVisitorBehavior","visitorId","behaviorResult","aiBehaviorAnalysis","buildVisitorBehaviorAIAnalysis","executeAction","actionType","actionData","sendMessage","buildComprehensiveAIContext","userId","customerData","campaignData","visitorData","monitoringData","Promise","allSettled","getMonitoringData","metric","customer","status","value","campaigns","visitors","monitoring","totalCount","length","insights","highValueCustomers","filter","c","predictions","lifetimeValue","atRiskCustomers","churnRisk","activeSegments","Set","flatMap","averageEngagement","reduce","sum","engagementScore","summary","firstName","lastName","email","keyInsights","recommendations","generateCustomerRecommendations","totalSegments","largestSegment","max","segment","_count","contacts","performanceInsights","performanceData","behaviorData","push"],"mappings":"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"}