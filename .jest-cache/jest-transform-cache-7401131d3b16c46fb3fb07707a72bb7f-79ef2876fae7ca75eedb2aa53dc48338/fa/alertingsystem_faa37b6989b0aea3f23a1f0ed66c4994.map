{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/lib/leadpulse/integrations/alerting-system.ts"],"sourcesContent":["/**\n * LeadPulse External Alerting System\n * \n * Provides real-time alerting through multiple channels:\n * - Email notifications\n * - Slack integration\n * - Microsoft Teams\n * - SMS alerts (Twilio)\n * - Discord webhooks\n * - PagerDuty integration\n */\n\nimport { logger } from '@/lib/logger';\nimport { leadPulseCache } from '@/lib/cache/leadpulse-cache';\nimport { type ErrorRecord, ErrorSeverity } from '../error-handler';\nimport nodemailer from 'nodemailer';\n\n// Alert Types\nexport interface Alert {\n  id: string;\n  type: 'ERROR' | 'VISITOR_SPIKE' | 'CONVERSION_DROP' | 'HIGH_VALUE_VISITOR' | 'SYSTEM_HEALTH' | 'SECURITY_INCIDENT';\n  severity: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\n  title: string;\n  message: string;\n  data?: Record<string, any>;\n  timestamp: Date;\n  channels: AlertChannel[];\n  acknowledged?: boolean;\n  acknowledgedBy?: string;\n  acknowledgedAt?: Date;\n}\n\nexport type AlertChannel = 'email' | 'slack' | 'teams' | 'sms' | 'discord' | 'pagerduty';\n\nexport interface AlertConfig {\n  email?: {\n    enabled: boolean;\n    recipients: string[];\n    smtpConfig: {\n      host: string;\n      port: number;\n      secure: boolean;\n      auth: {\n        user: string;\n        pass: string;\n      };\n    };\n    templates: {\n      subject: string;\n      body: string;\n    };\n  };\n  slack?: {\n    enabled: boolean;\n    webhookUrl: string;\n    channel: string;\n    username?: string;\n    iconEmoji?: string;\n    mentionUsers?: string[];\n  };\n  teams?: {\n    enabled: boolean;\n    webhookUrl: string;\n    adaptiveCard?: boolean;\n  };\n  sms?: {\n    enabled: boolean;\n    provider: 'twilio' | 'aws_sns';\n    config: {\n      accountSid?: string;\n      authToken?: string;\n      fromNumber?: string;\n      awsAccessKey?: string;\n      awsSecretKey?: string;\n      awsRegion?: string;\n    };\n    recipients: string[];\n  };\n  discord?: {\n    enabled: boolean;\n    webhookUrl: string;\n    username?: string;\n    avatarUrl?: string;\n  };\n  pagerduty?: {\n    enabled: boolean;\n    routingKey: string;\n    severity: 'critical' | 'error' | 'warning' | 'info';\n  };\n}\n\nexport class AlertingSystem {\n  private config: AlertConfig;\n  private emailTransporter: nodemailer.Transporter | null = null;\n  private alertQueue: Alert[] = [];\n  private maxQueueSize = 1000;\n\n  constructor(config: AlertConfig) {\n    this.config = config;\n    this.initializeServices();\n    this.startAlertProcessor();\n  }\n\n  private async initializeServices() {\n    // Initialize email transporter\n    if (this.config.email?.enabled && this.config.email.smtpConfig) {\n      try {\n        this.emailTransporter = nodemailer.createTransporter(this.config.email.smtpConfig);\n        await this.emailTransporter.verify();\n        logger.info('Email alerting service initialized');\n      } catch (error) {\n        logger.error('Failed to initialize email alerting:', error);\n      }\n    }\n  }\n\n  // Send alert through specified channels\n  async sendAlert(alert: Alert): Promise<{ success: boolean; results: Record<AlertChannel, boolean> }> {\n    const results: Record<AlertChannel, boolean> = {} as any;\n\n    // Add to queue for processing\n    this.addToQueue(alert);\n\n    // Send through each configured channel\n    for (const channel of alert.channels) {\n      try {\n        switch (channel) {\n          case 'email':\n            results[channel] = await this.sendEmailAlert(alert);\n            break;\n          case 'slack':\n            results[channel] = await this.sendSlackAlert(alert);\n            break;\n          case 'teams':\n            results[channel] = await this.sendTeamsAlert(alert);\n            break;\n          case 'sms':\n            results[channel] = await this.sendSMSAlert(alert);\n            break;\n          case 'discord':\n            results[channel] = await this.sendDiscordAlert(alert);\n            break;\n          case 'pagerduty':\n            results[channel] = await this.sendPagerDutyAlert(alert);\n            break;\n        }\n      } catch (error) {\n        logger.error(`Failed to send alert via ${channel}:`, error);\n        results[channel] = false;\n      }\n    }\n\n    const success = Object.values(results).some(result => result);\n    \n    // Store alert in cache\n    await this.storeAlert(alert, results);\n\n    logger.info(`Alert sent: ${alert.id}`, { channels: alert.channels, results });\n    return { success, results };\n  }\n\n  // Email alerting\n  private async sendEmailAlert(alert: Alert): Promise<boolean> {\n    if (!this.config.email?.enabled || !this.emailTransporter) {\n      return false;\n    }\n\n    try {\n      const subject = this.config.email.templates.subject\n        .replace('{severity}', alert.severity)\n        .replace('{title}', alert.title)\n        .replace('{timestamp}', alert.timestamp.toISOString());\n\n      const htmlBody = this.generateEmailHTML(alert);\n\n      await this.emailTransporter.sendMail({\n        from: this.config.email.smtpConfig.auth.user,\n        to: this.config.email.recipients.join(', '),\n        subject,\n        html: htmlBody,\n      });\n\n      return true;\n    } catch (error) {\n      logger.error('Email alert failed:', error);\n      return false;\n    }\n  }\n\n  // Slack alerting\n  private async sendSlackAlert(alert: Alert): Promise<boolean> {\n    if (!this.config.slack?.enabled || !this.config.slack.webhookUrl) {\n      return false;\n    }\n\n    try {\n      const color = this.getSeverityColor(alert.severity);\n      const mentions = this.config.slack.mentionUsers?.map(user => `<@${user}>`).join(' ') || '';\n\n      const slackMessage = {\n        channel: this.config.slack.channel,\n        username: this.config.slack.username || 'LeadPulse Alerts',\n        icon_emoji: this.config.slack.iconEmoji || ':warning:',\n        text: mentions,\n        attachments: [\n          {\n            color,\n            title: `${alert.severity} Alert: ${alert.title}`,\n            text: alert.message,\n            fields: [\n              {\n                title: 'Alert Type',\n                value: alert.type,\n                short: true,\n              },\n              {\n                title: 'Timestamp',\n                value: alert.timestamp.toISOString(),\n                short: true,\n              },\n              ...(alert.data ? Object.entries(alert.data).map(([key, value]) => ({\n                title: key,\n                value: String(value),\n                short: true,\n              })) : []),\n            ],\n            ts: Math.floor(alert.timestamp.getTime() / 1000),\n          },\n        ],\n      };\n\n      const response = await fetch(this.config.slack.webhookUrl, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(slackMessage),\n      });\n\n      return response.ok;\n    } catch (error) {\n      logger.error('Slack alert failed:', error);\n      return false;\n    }\n  }\n\n  // Microsoft Teams alerting\n  private async sendTeamsAlert(alert: Alert): Promise<boolean> {\n    if (!this.config.teams?.enabled || !this.config.teams.webhookUrl) {\n      return false;\n    }\n\n    try {\n      const color = this.getSeverityColor(alert.severity);\n      \n      let teamsMessage: any;\n\n      if (this.config.teams.adaptiveCard) {\n        // Adaptive Card format\n        teamsMessage = {\n          type: 'message',\n          attachments: [\n            {\n              contentType: 'application/vnd.microsoft.card.adaptive',\n              content: {\n                type: 'AdaptiveCard',\n                version: '1.2',\n                body: [\n                  {\n                    type: 'TextBlock',\n                    text: `${alert.severity} Alert`,\n                    weight: 'Bolder',\n                    size: 'Medium',\n                    color: alert.severity === 'CRITICAL' ? 'Attention' : 'Warning',\n                  },\n                  {\n                    type: 'TextBlock',\n                    text: alert.title,\n                    weight: 'Bolder',\n                  },\n                  {\n                    type: 'TextBlock',\n                    text: alert.message,\n                    wrap: true,\n                  },\n                  {\n                    type: 'FactSet',\n                    facts: [\n                      {\n                        title: 'Type:',\n                        value: alert.type,\n                      },\n                      {\n                        title: 'Timestamp:',\n                        value: alert.timestamp.toISOString(),\n                      },\n                      ...(alert.data ? Object.entries(alert.data).map(([key, value]) => ({\n                        title: `${key}:`,\n                        value: String(value),\n                      })) : []),\n                    ],\n                  },\n                ],\n              },\n            },\n          ],\n        };\n      } else {\n        // Simple message format\n        teamsMessage = {\n          '@type': 'MessageCard',\n          '@context': 'https://schema.org/extensions',\n          summary: `${alert.severity} Alert: ${alert.title}`,\n          themeColor: color.replace('#', ''),\n          title: `${alert.severity} Alert`,\n          text: alert.message,\n          sections: [\n            {\n              activityTitle: alert.title,\n              activitySubtitle: alert.type,\n              facts: [\n                {\n                  name: 'Timestamp',\n                  value: alert.timestamp.toISOString(),\n                },\n                ...(alert.data ? Object.entries(alert.data).map(([key, value]) => ({\n                  name: key,\n                  value: String(value),\n                })) : []),\n              ],\n            },\n          ],\n        };\n      }\n\n      const response = await fetch(this.config.teams.webhookUrl, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(teamsMessage),\n      });\n\n      return response.ok;\n    } catch (error) {\n      logger.error('Teams alert failed:', error);\n      return false;\n    }\n  }\n\n  // SMS alerting\n  private async sendSMSAlert(alert: Alert): Promise<boolean> {\n    if (!this.config.sms?.enabled || !this.config.sms.recipients.length) {\n      return false;\n    }\n\n    try {\n      const message = `${alert.severity} Alert: ${alert.title}\\n${alert.message}`;\n\n      if (this.config.sms.provider === 'twilio') {\n        return await this.sendTwilioSMS(message);\n      } else if (this.config.sms.provider === 'aws_sns') {\n        return await this.sendAWSSNS(message);\n      }\n\n      return false;\n    } catch (error) {\n      logger.error('SMS alert failed:', error);\n      return false;\n    }\n  }\n\n  // Discord alerting\n  private async sendDiscordAlert(alert: Alert): Promise<boolean> {\n    if (!this.config.discord?.enabled || !this.config.discord.webhookUrl) {\n      return false;\n    }\n\n    try {\n      const color = Number.parseInt(this.getSeverityColor(alert.severity).replace('#', ''), 16);\n\n      const discordMessage = {\n        username: this.config.discord.username || 'LeadPulse Alerts',\n        avatar_url: this.config.discord.avatarUrl,\n        embeds: [\n          {\n            title: `${alert.severity} Alert: ${alert.title}`,\n            description: alert.message,\n            color,\n            fields: [\n              {\n                name: 'Type',\n                value: alert.type,\n                inline: true,\n              },\n              {\n                name: 'Timestamp',\n                value: alert.timestamp.toISOString(),\n                inline: true,\n              },\n              ...(alert.data ? Object.entries(alert.data).slice(0, 10).map(([key, value]) => ({\n                name: key,\n                value: String(value),\n                inline: true,\n              })) : []),\n            ],\n            timestamp: alert.timestamp.toISOString(),\n          },\n        ],\n      };\n\n      const response = await fetch(this.config.discord.webhookUrl, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(discordMessage),\n      });\n\n      return response.ok;\n    } catch (error) {\n      logger.error('Discord alert failed:', error);\n      return false;\n    }\n  }\n\n  // PagerDuty alerting\n  private async sendPagerDutyAlert(alert: Alert): Promise<boolean> {\n    if (!this.config.pagerduty?.enabled || !this.config.pagerduty.routingKey) {\n      return false;\n    }\n\n    try {\n      const pagerDutyEvent = {\n        routing_key: this.config.pagerduty.routingKey,\n        event_action: 'trigger',\n        dedup_key: alert.id,\n        payload: {\n          summary: `${alert.severity} Alert: ${alert.title}`,\n          source: 'LeadPulse',\n          severity: this.config.pagerduty.severity,\n          component: 'leadpulse',\n          group: alert.type.toLowerCase(),\n          class: alert.severity.toLowerCase(),\n          custom_details: {\n            message: alert.message,\n            alert_type: alert.type,\n            timestamp: alert.timestamp.toISOString(),\n            ...alert.data,\n          },\n        },\n      };\n\n      const response = await fetch('https://events.pagerduty.com/v2/enqueue', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(pagerDutyEvent),\n      });\n\n      return response.ok;\n    } catch (error) {\n      logger.error('PagerDuty alert failed:', error);\n      return false;\n    }\n  }\n\n  // Twilio SMS implementation\n  private async sendTwilioSMS(message: string): Promise<boolean> {\n    if (!this.config.sms?.config.accountSid || !this.config.sms?.config.authToken) {\n      return false;\n    }\n\n    try {\n      const auth = Buffer.from(\n        `${this.config.sms.config.accountSid}:${this.config.sms.config.authToken}`\n      ).toString('base64');\n\n      for (const recipient of this.config.sms.recipients) {\n        const response = await fetch(\n          `https://api.twilio.com/2010-04-01/Accounts/${this.config.sms.config.accountSid}/Messages.json`,\n          {\n            method: 'POST',\n            headers: {\n              'Authorization': `Basic ${auth}`,\n              'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: new URLSearchParams({\n              From: this.config.sms.config.fromNumber!,\n              To: recipient,\n              Body: message,\n            }),\n          }\n        );\n\n        if (!response.ok) {\n          logger.error(`Failed to send SMS to ${recipient}:`, await response.text());\n        }\n      }\n\n      return true;\n    } catch (error) {\n      logger.error('Twilio SMS failed:', error);\n      return false;\n    }\n  }\n\n  // AWS SNS implementation\n  private async sendAWSSNS(message: string): Promise<boolean> {\n    // Implementation would require AWS SDK\n    // For now, return false to indicate not implemented\n    logger.warn('AWS SNS SMS not implemented yet');\n    return false;\n  }\n\n  // Helper methods\n  private getSeverityColor(severity: string): string {\n    switch (severity) {\n      case 'CRITICAL': return '#FF0000';\n      case 'HIGH': return '#FF8000';\n      case 'MEDIUM': return '#FFFF00';\n      case 'LOW': return '#00FF00';\n      default: return '#808080';\n    }\n  }\n\n  private generateEmailHTML(alert: Alert): string {\n    const color = this.getSeverityColor(alert.severity);\n    \n    return `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <style>\n          body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5; }\n          .container { max-width: 600px; margin: 0 auto; background: white; border-radius: 8px; overflow: hidden; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }\n          .header { background: ${color}; color: white; padding: 20px; text-align: center; }\n          .content { padding: 20px; }\n          .alert-details { background: #f8f9fa; padding: 15px; border-radius: 5px; margin: 15px 0; }\n          .footer { padding: 20px; text-align: center; font-size: 12px; color: #666; }\n          .severity { display: inline-block; padding: 4px 8px; border-radius: 4px; color: white; background: ${color}; font-weight: bold; }\n        </style>\n      </head>\n      <body>\n        <div class=\"container\">\n          <div class=\"header\">\n            <h1>🚨 LeadPulse Alert</h1>\n            <span class=\"severity\">${alert.severity}</span>\n          </div>\n          <div class=\"content\">\n            <h2>${alert.title}</h2>\n            <p>${alert.message}</p>\n            \n            <div class=\"alert-details\">\n              <h3>Alert Details</h3>\n              <p><strong>Type:</strong> ${alert.type}</p>\n              <p><strong>Timestamp:</strong> ${alert.timestamp.toISOString()}</p>\n              <p><strong>Alert ID:</strong> ${alert.id}</p>\n              ${alert.data ? Object.entries(alert.data).map(([key, value]) => \n                `<p><strong>${key}:</strong> ${value}</p>`\n              ).join('') : ''}\n            </div>\n            \n            <p>This alert was automatically generated by LeadPulse monitoring system.</p>\n          </div>\n          <div class=\"footer\">\n            <p>LeadPulse - Visitor Intelligence Platform</p>\n            <p>Generated at ${new Date().toISOString()}</p>\n          </div>\n        </div>\n      </body>\n      </html>\n    `;\n  }\n\n  // Queue management\n  private addToQueue(alert: Alert): void {\n    if (this.alertQueue.length >= this.maxQueueSize) {\n      this.alertQueue.shift();\n    }\n    this.alertQueue.push(alert);\n  }\n\n  private async storeAlert(alert: Alert, results: Record<AlertChannel, boolean>): Promise<void> {\n    try {\n      const cacheKey = `leadpulse:alerts:${alert.id}`;\n      await leadPulseCache.set(cacheKey, { ...alert, deliveryResults: results }, 24 * 60 * 60);\n      await leadPulseCache.addRecentActivity({\n        type: 'ALERT_SENT',\n        alertId: alert.id,\n        severity: alert.severity,\n        channels: alert.channels,\n        timestamp: alert.timestamp,\n      });\n    } catch (error) {\n      logger.error('Failed to store alert:', error);\n    }\n  }\n\n  // Alert processor for queued alerts\n  private startAlertProcessor(): void {\n    setInterval(() => {\n      this.processAlertQueue();\n    }, 10000); // Process every 10 seconds\n  }\n\n  private processAlertQueue(): void {\n    // Process any failed alerts for retry\n    // Implementation for retry logic\n    logger.debug(`Alert queue size: ${this.alertQueue.length}`);\n  }\n\n  // Acknowledge alert\n  async acknowledgeAlert(alertId: string, acknowledgedBy: string): Promise<boolean> {\n    try {\n      const cacheKey = `leadpulse:alerts:${alertId}`;\n      const alert = await leadPulseCache.get(cacheKey);\n      \n      if (alert) {\n        alert.acknowledged = true;\n        alert.acknowledgedBy = acknowledgedBy;\n        alert.acknowledgedAt = new Date();\n        \n        await leadPulseCache.set(cacheKey, alert, 24 * 60 * 60);\n        logger.info(`Alert acknowledged: ${alertId} by ${acknowledgedBy}`);\n        return true;\n      }\n      \n      return false;\n    } catch (error) {\n      logger.error('Failed to acknowledge alert:', error);\n      return false;\n    }\n  }\n\n  // Get alert history\n  async getAlertHistory(hours = 24): Promise<Alert[]> {\n    try {\n      const alerts = await leadPulseCache.lrange('leadpulse:alerts:list', 0, 100);\n      const cutoff = new Date(Date.now() - hours * 60 * 60 * 1000);\n      \n      return alerts.filter(alert => new Date(alert.timestamp) > cutoff);\n    } catch (error) {\n      logger.error('Failed to get alert history:', error);\n      return [];\n    }\n  }\n}\n\n// Predefined alert templates\nexport const AlertTemplates = {\n  ERROR_ALERT: (error: ErrorRecord): Omit<Alert, 'id' | 'timestamp'> => ({\n    type: 'ERROR',\n    severity: error.severity.toUpperCase() as Alert['severity'],\n    title: `System Error: ${error.type}`,\n    message: error.message,\n    data: {\n      errorId: error.id,\n      errorType: error.type,\n      context: error.context,\n      retryCount: error.retryCount,\n    },\n    channels: error.severity === ErrorSeverity.CRITICAL \n      ? ['email', 'slack', 'pagerduty'] \n      : ['slack'],\n  }),\n\n  VISITOR_SPIKE: (count: number, threshold: number): Omit<Alert, 'id' | 'timestamp'> => ({\n    type: 'VISITOR_SPIKE',\n    severity: 'MEDIUM',\n    title: 'Unusual Visitor Activity Detected',\n    message: `Visitor count (${count}) has exceeded the threshold (${threshold}) indicating unusual traffic patterns.`,\n    data: { visitorCount: count, threshold },\n    channels: ['slack', 'email'],\n  }),\n\n  HIGH_VALUE_VISITOR: (visitorId: string, score: number): Omit<Alert, 'id' | 'timestamp'> => ({\n    type: 'HIGH_VALUE_VISITOR',\n    severity: 'HIGH',\n    title: 'High-Value Visitor Detected',\n    message: `A visitor with high engagement score (${score}) has been identified. Consider immediate outreach.`,\n    data: { visitorId, score },\n    channels: ['slack', 'email'],\n  }),\n\n  CONVERSION_DROP: (currentRate: number, previousRate: number): Omit<Alert, 'id' | 'timestamp'> => ({\n    type: 'CONVERSION_DROP',\n    severity: 'HIGH',\n    title: 'Conversion Rate Drop Alert',\n    message: `Conversion rate has dropped from ${previousRate}% to ${currentRate}%. Immediate attention required.`,\n    data: { currentRate, previousRate, dropPercentage: ((previousRate - currentRate) / previousRate * 100).toFixed(2) },\n    channels: ['email', 'slack', 'teams'],\n  }),\n\n  SECURITY_INCIDENT: (incidentType: string, details: any): Omit<Alert, 'id' | 'timestamp'> => ({\n    type: 'SECURITY_INCIDENT',\n    severity: 'CRITICAL',\n    title: `Security Incident: ${incidentType}`,\n    message: `A security incident has been detected and requires immediate attention.`,\n    data: { incidentType, ...details },\n    channels: ['email', 'slack', 'pagerduty', 'sms'],\n  }),\n};\n\n// Generate unique alert ID\nexport function generateAlertId(): string {\n  return `alert-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n}\n\n// Export instance for direct use with default config\nconst defaultConfig: AlertConfig = {\n  email: {\n    enabled: false,\n    recipients: [],\n    smtpConfig: {\n      host: 'localhost',\n      port: 587,\n      secure: false,\n      auth: { user: '', pass: '' }\n    },\n    templates: { subject: '', body: '' }\n  }\n};\n\nexport const alertingSystem = new AlertingSystem(defaultConfig);"],"names":["AlertTemplates","AlertingSystem","alertingSystem","generateAlertId","constructor","config","emailTransporter","alertQueue","maxQueueSize","initializeServices","startAlertProcessor","email","enabled","smtpConfig","nodemailer","createTransporter","verify","logger","info","error","sendAlert","alert","results","addToQueue","channel","channels","sendEmailAlert","sendSlackAlert","sendTeamsAlert","sendSMSAlert","sendDiscordAlert","sendPagerDutyAlert","success","Object","values","some","result","storeAlert","id","subject","templates","replace","severity","title","timestamp","toISOString","htmlBody","generateEmailHTML","sendMail","from","auth","user","to","recipients","join","html","slack","webhookUrl","color","getSeverityColor","mentions","mentionUsers","map","slackMessage","username","icon_emoji","iconEmoji","text","attachments","message","fields","value","type","short","data","entries","key","String","ts","Math","floor","getTime","response","fetch","method","headers","body","JSON","stringify","ok","teams","teamsMessage","adaptiveCard","contentType","content","version","weight","size","wrap","facts","summary","themeColor","sections","activityTitle","activitySubtitle","name","sms","length","provider","sendTwilioSMS","sendAWSSNS","discord","Number","parseInt","discordMessage","avatar_url","avatarUrl","embeds","description","inline","slice","pagerduty","routingKey","pagerDutyEvent","routing_key","event_action","dedup_key","payload","source","component","group","toLowerCase","class","custom_details","alert_type","accountSid","authToken","Buffer","toString","recipient","URLSearchParams","From","fromNumber","To","Body","warn","Date","shift","push","cacheKey","leadPulseCache","set","deliveryResults","addRecentActivity","alertId","setInterval","processAlertQueue","debug","acknowledgeAlert","acknowledgedBy","get","acknowledged","acknowledgedAt","getAlertHistory","hours","alerts","lrange","cutoff","now","filter","ERROR_ALERT","toUpperCase","errorId","errorType","context","retryCount","ErrorSeverity","CRITICAL","VISITOR_SPIKE","count","threshold","visitorCount","HIGH_VALUE_VISITOR","visitorId","score","CONVERSION_DROP","currentRate","previousRate","dropPercentage","toFixed","SECURITY_INCIDENT","incidentType","details","random","substr","defaultConfig","host","port","secure","pass"],"mappings":"AAAA;;;;;;;;;;CAUC;;;;;;;;;;;IAynBYA,cAAc;eAAdA;;IAxiBAC,cAAc;eAAdA;;IAknBAC,cAAc;eAAdA;;IAnBGC,eAAe;eAAfA;;;wBA9qBO;gCACQ;8BACiB;mEACzB;;;;;;AA4EhB,MAAMF;IAMXG,YAAYC,MAAmB,CAAE;aAJzBC,mBAAkD;aAClDC,aAAsB,EAAE;aACxBC,eAAe;QAGrB,IAAI,CAACH,MAAM,GAAGA;QACd,IAAI,CAACI,kBAAkB;QACvB,IAAI,CAACC,mBAAmB;IAC1B;IAEA,MAAcD,qBAAqB;QACjC,+BAA+B;QAC/B,IAAI,IAAI,CAACJ,MAAM,CAACM,KAAK,EAAEC,WAAW,IAAI,CAACP,MAAM,CAACM,KAAK,CAACE,UAAU,EAAE;YAC9D,IAAI;gBACF,IAAI,CAACP,gBAAgB,GAAGQ,mBAAU,CAACC,iBAAiB,CAAC,IAAI,CAACV,MAAM,CAACM,KAAK,CAACE,UAAU;gBACjF,MAAM,IAAI,CAACP,gBAAgB,CAACU,MAAM;gBAClCC,cAAM,CAACC,IAAI,CAAC;YACd,EAAE,OAAOC,OAAO;gBACdF,cAAM,CAACE,KAAK,CAAC,wCAAwCA;YACvD;QACF;IACF;IAEA,wCAAwC;IACxC,MAAMC,UAAUC,KAAY,EAAyE;QACnG,MAAMC,UAAyC,CAAC;QAEhD,8BAA8B;QAC9B,IAAI,CAACC,UAAU,CAACF;QAEhB,uCAAuC;QACvC,KAAK,MAAMG,WAAWH,MAAMI,QAAQ,CAAE;YACpC,IAAI;gBACF,OAAQD;oBACN,KAAK;wBACHF,OAAO,CAACE,QAAQ,GAAG,MAAM,IAAI,CAACE,cAAc,CAACL;wBAC7C;oBACF,KAAK;wBACHC,OAAO,CAACE,QAAQ,GAAG,MAAM,IAAI,CAACG,cAAc,CAACN;wBAC7C;oBACF,KAAK;wBACHC,OAAO,CAACE,QAAQ,GAAG,MAAM,IAAI,CAACI,cAAc,CAACP;wBAC7C;oBACF,KAAK;wBACHC,OAAO,CAACE,QAAQ,GAAG,MAAM,IAAI,CAACK,YAAY,CAACR;wBAC3C;oBACF,KAAK;wBACHC,OAAO,CAACE,QAAQ,GAAG,MAAM,IAAI,CAACM,gBAAgB,CAACT;wBAC/C;oBACF,KAAK;wBACHC,OAAO,CAACE,QAAQ,GAAG,MAAM,IAAI,CAACO,kBAAkB,CAACV;wBACjD;gBACJ;YACF,EAAE,OAAOF,OAAO;gBACdF,cAAM,CAACE,KAAK,CAAC,CAAC,yBAAyB,EAAEK,QAAQ,CAAC,CAAC,EAAEL;gBACrDG,OAAO,CAACE,QAAQ,GAAG;YACrB;QACF;QAEA,MAAMQ,UAAUC,OAAOC,MAAM,CAACZ,SAASa,IAAI,CAACC,CAAAA,SAAUA;QAEtD,uBAAuB;QACvB,MAAM,IAAI,CAACC,UAAU,CAAChB,OAAOC;QAE7BL,cAAM,CAACC,IAAI,CAAC,CAAC,YAAY,EAAEG,MAAMiB,EAAE,EAAE,EAAE;YAAEb,UAAUJ,MAAMI,QAAQ;YAAEH;QAAQ;QAC3E,OAAO;YAAEU;YAASV;QAAQ;IAC5B;IAEA,iBAAiB;IACjB,MAAcI,eAAeL,KAAY,EAAoB;QAC3D,IAAI,CAAC,IAAI,CAAChB,MAAM,CAACM,KAAK,EAAEC,WAAW,CAAC,IAAI,CAACN,gBAAgB,EAAE;YACzD,OAAO;QACT;QAEA,IAAI;YACF,MAAMiC,UAAU,IAAI,CAAClC,MAAM,CAACM,KAAK,CAAC6B,SAAS,CAACD,OAAO,CAChDE,OAAO,CAAC,cAAcpB,MAAMqB,QAAQ,EACpCD,OAAO,CAAC,WAAWpB,MAAMsB,KAAK,EAC9BF,OAAO,CAAC,eAAepB,MAAMuB,SAAS,CAACC,WAAW;YAErD,MAAMC,WAAW,IAAI,CAACC,iBAAiB,CAAC1B;YAExC,MAAM,IAAI,CAACf,gBAAgB,CAAC0C,QAAQ,CAAC;gBACnCC,MAAM,IAAI,CAAC5C,MAAM,CAACM,KAAK,CAACE,UAAU,CAACqC,IAAI,CAACC,IAAI;gBAC5CC,IAAI,IAAI,CAAC/C,MAAM,CAACM,KAAK,CAAC0C,UAAU,CAACC,IAAI,CAAC;gBACtCf;gBACAgB,MAAMT;YACR;YAEA,OAAO;QACT,EAAE,OAAO3B,OAAO;YACdF,cAAM,CAACE,KAAK,CAAC,uBAAuBA;YACpC,OAAO;QACT;IACF;IAEA,iBAAiB;IACjB,MAAcQ,eAAeN,KAAY,EAAoB;QAC3D,IAAI,CAAC,IAAI,CAAChB,MAAM,CAACmD,KAAK,EAAE5C,WAAW,CAAC,IAAI,CAACP,MAAM,CAACmD,KAAK,CAACC,UAAU,EAAE;YAChE,OAAO;QACT;QAEA,IAAI;YACF,MAAMC,QAAQ,IAAI,CAACC,gBAAgB,CAACtC,MAAMqB,QAAQ;YAClD,MAAMkB,WAAW,IAAI,CAACvD,MAAM,CAACmD,KAAK,CAACK,YAAY,EAAEC,IAAIX,CAAAA,OAAQ,CAAC,EAAE,EAAEA,KAAK,CAAC,CAAC,EAAEG,KAAK,QAAQ;YAExF,MAAMS,eAAe;gBACnBvC,SAAS,IAAI,CAACnB,MAAM,CAACmD,KAAK,CAAChC,OAAO;gBAClCwC,UAAU,IAAI,CAAC3D,MAAM,CAACmD,KAAK,CAACQ,QAAQ,IAAI;gBACxCC,YAAY,IAAI,CAAC5D,MAAM,CAACmD,KAAK,CAACU,SAAS,IAAI;gBAC3CC,MAAMP;gBACNQ,aAAa;oBACX;wBACEV;wBACAf,OAAO,GAAGtB,MAAMqB,QAAQ,CAAC,QAAQ,EAAErB,MAAMsB,KAAK,EAAE;wBAChDwB,MAAM9C,MAAMgD,OAAO;wBACnBC,QAAQ;4BACN;gCACE3B,OAAO;gCACP4B,OAAOlD,MAAMmD,IAAI;gCACjBC,OAAO;4BACT;4BACA;gCACE9B,OAAO;gCACP4B,OAAOlD,MAAMuB,SAAS,CAACC,WAAW;gCAClC4B,OAAO;4BACT;+BACIpD,MAAMqD,IAAI,GAAGzC,OAAO0C,OAAO,CAACtD,MAAMqD,IAAI,EAAEZ,GAAG,CAAC,CAAC,CAACc,KAAKL,MAAM,GAAM,CAAA;oCACjE5B,OAAOiC;oCACPL,OAAOM,OAAON;oCACdE,OAAO;gCACT,CAAA,KAAM,EAAE;yBACT;wBACDK,IAAIC,KAAKC,KAAK,CAAC3D,MAAMuB,SAAS,CAACqC,OAAO,KAAK;oBAC7C;iBACD;YACH;YAEA,MAAMC,WAAW,MAAMC,MAAM,IAAI,CAAC9E,MAAM,CAACmD,KAAK,CAACC,UAAU,EAAE;gBACzD2B,QAAQ;gBACRC,SAAS;oBAAE,gBAAgB;gBAAmB;gBAC9CC,MAAMC,KAAKC,SAAS,CAACzB;YACvB;YAEA,OAAOmB,SAASO,EAAE;QACpB,EAAE,OAAOtE,OAAO;YACdF,cAAM,CAACE,KAAK,CAAC,uBAAuBA;YACpC,OAAO;QACT;IACF;IAEA,2BAA2B;IAC3B,MAAcS,eAAeP,KAAY,EAAoB;QAC3D,IAAI,CAAC,IAAI,CAAChB,MAAM,CAACqF,KAAK,EAAE9E,WAAW,CAAC,IAAI,CAACP,MAAM,CAACqF,KAAK,CAACjC,UAAU,EAAE;YAChE,OAAO;QACT;QAEA,IAAI;YACF,MAAMC,QAAQ,IAAI,CAACC,gBAAgB,CAACtC,MAAMqB,QAAQ;YAElD,IAAIiD;YAEJ,IAAI,IAAI,CAACtF,MAAM,CAACqF,KAAK,CAACE,YAAY,EAAE;gBAClC,uBAAuB;gBACvBD,eAAe;oBACbnB,MAAM;oBACNJ,aAAa;wBACX;4BACEyB,aAAa;4BACbC,SAAS;gCACPtB,MAAM;gCACNuB,SAAS;gCACTT,MAAM;oCACJ;wCACEd,MAAM;wCACNL,MAAM,GAAG9C,MAAMqB,QAAQ,CAAC,MAAM,CAAC;wCAC/BsD,QAAQ;wCACRC,MAAM;wCACNvC,OAAOrC,MAAMqB,QAAQ,KAAK,aAAa,cAAc;oCACvD;oCACA;wCACE8B,MAAM;wCACNL,MAAM9C,MAAMsB,KAAK;wCACjBqD,QAAQ;oCACV;oCACA;wCACExB,MAAM;wCACNL,MAAM9C,MAAMgD,OAAO;wCACnB6B,MAAM;oCACR;oCACA;wCACE1B,MAAM;wCACN2B,OAAO;4CACL;gDACExD,OAAO;gDACP4B,OAAOlD,MAAMmD,IAAI;4CACnB;4CACA;gDACE7B,OAAO;gDACP4B,OAAOlD,MAAMuB,SAAS,CAACC,WAAW;4CACpC;+CACIxB,MAAMqD,IAAI,GAAGzC,OAAO0C,OAAO,CAACtD,MAAMqD,IAAI,EAAEZ,GAAG,CAAC,CAAC,CAACc,KAAKL,MAAM,GAAM,CAAA;oDACjE5B,OAAO,GAAGiC,IAAI,CAAC,CAAC;oDAChBL,OAAOM,OAAON;gDAChB,CAAA,KAAM,EAAE;yCACT;oCACH;iCACD;4BACH;wBACF;qBACD;gBACH;YACF,OAAO;gBACL,wBAAwB;gBACxBoB,eAAe;oBACb,SAAS;oBACT,YAAY;oBACZS,SAAS,GAAG/E,MAAMqB,QAAQ,CAAC,QAAQ,EAAErB,MAAMsB,KAAK,EAAE;oBAClD0D,YAAY3C,MAAMjB,OAAO,CAAC,KAAK;oBAC/BE,OAAO,GAAGtB,MAAMqB,QAAQ,CAAC,MAAM,CAAC;oBAChCyB,MAAM9C,MAAMgD,OAAO;oBACnBiC,UAAU;wBACR;4BACEC,eAAelF,MAAMsB,KAAK;4BAC1B6D,kBAAkBnF,MAAMmD,IAAI;4BAC5B2B,OAAO;gCACL;oCACEM,MAAM;oCACNlC,OAAOlD,MAAMuB,SAAS,CAACC,WAAW;gCACpC;mCACIxB,MAAMqD,IAAI,GAAGzC,OAAO0C,OAAO,CAACtD,MAAMqD,IAAI,EAAEZ,GAAG,CAAC,CAAC,CAACc,KAAKL,MAAM,GAAM,CAAA;wCACjEkC,MAAM7B;wCACNL,OAAOM,OAAON;oCAChB,CAAA,KAAM,EAAE;6BACT;wBACH;qBACD;gBACH;YACF;YAEA,MAAMW,WAAW,MAAMC,MAAM,IAAI,CAAC9E,MAAM,CAACqF,KAAK,CAACjC,UAAU,EAAE;gBACzD2B,QAAQ;gBACRC,SAAS;oBAAE,gBAAgB;gBAAmB;gBAC9CC,MAAMC,KAAKC,SAAS,CAACG;YACvB;YAEA,OAAOT,SAASO,EAAE;QACpB,EAAE,OAAOtE,OAAO;YACdF,cAAM,CAACE,KAAK,CAAC,uBAAuBA;YACpC,OAAO;QACT;IACF;IAEA,eAAe;IACf,MAAcU,aAAaR,KAAY,EAAoB;QACzD,IAAI,CAAC,IAAI,CAAChB,MAAM,CAACqG,GAAG,EAAE9F,WAAW,CAAC,IAAI,CAACP,MAAM,CAACqG,GAAG,CAACrD,UAAU,CAACsD,MAAM,EAAE;YACnE,OAAO;QACT;QAEA,IAAI;YACF,MAAMtC,UAAU,GAAGhD,MAAMqB,QAAQ,CAAC,QAAQ,EAAErB,MAAMsB,KAAK,CAAC,EAAE,EAAEtB,MAAMgD,OAAO,EAAE;YAE3E,IAAI,IAAI,CAAChE,MAAM,CAACqG,GAAG,CAACE,QAAQ,KAAK,UAAU;gBACzC,OAAO,MAAM,IAAI,CAACC,aAAa,CAACxC;YAClC,OAAO,IAAI,IAAI,CAAChE,MAAM,CAACqG,GAAG,CAACE,QAAQ,KAAK,WAAW;gBACjD,OAAO,MAAM,IAAI,CAACE,UAAU,CAACzC;YAC/B;YAEA,OAAO;QACT,EAAE,OAAOlD,OAAO;YACdF,cAAM,CAACE,KAAK,CAAC,qBAAqBA;YAClC,OAAO;QACT;IACF;IAEA,mBAAmB;IACnB,MAAcW,iBAAiBT,KAAY,EAAoB;QAC7D,IAAI,CAAC,IAAI,CAAChB,MAAM,CAAC0G,OAAO,EAAEnG,WAAW,CAAC,IAAI,CAACP,MAAM,CAAC0G,OAAO,CAACtD,UAAU,EAAE;YACpE,OAAO;QACT;QAEA,IAAI;YACF,MAAMC,QAAQsD,OAAOC,QAAQ,CAAC,IAAI,CAACtD,gBAAgB,CAACtC,MAAMqB,QAAQ,EAAED,OAAO,CAAC,KAAK,KAAK;YAEtF,MAAMyE,iBAAiB;gBACrBlD,UAAU,IAAI,CAAC3D,MAAM,CAAC0G,OAAO,CAAC/C,QAAQ,IAAI;gBAC1CmD,YAAY,IAAI,CAAC9G,MAAM,CAAC0G,OAAO,CAACK,SAAS;gBACzCC,QAAQ;oBACN;wBACE1E,OAAO,GAAGtB,MAAMqB,QAAQ,CAAC,QAAQ,EAAErB,MAAMsB,KAAK,EAAE;wBAChD2E,aAAajG,MAAMgD,OAAO;wBAC1BX;wBACAY,QAAQ;4BACN;gCACEmC,MAAM;gCACNlC,OAAOlD,MAAMmD,IAAI;gCACjB+C,QAAQ;4BACV;4BACA;gCACEd,MAAM;gCACNlC,OAAOlD,MAAMuB,SAAS,CAACC,WAAW;gCAClC0E,QAAQ;4BACV;+BACIlG,MAAMqD,IAAI,GAAGzC,OAAO0C,OAAO,CAACtD,MAAMqD,IAAI,EAAE8C,KAAK,CAAC,GAAG,IAAI1D,GAAG,CAAC,CAAC,CAACc,KAAKL,MAAM,GAAM,CAAA;oCAC9EkC,MAAM7B;oCACNL,OAAOM,OAAON;oCACdgD,QAAQ;gCACV,CAAA,KAAM,EAAE;yBACT;wBACD3E,WAAWvB,MAAMuB,SAAS,CAACC,WAAW;oBACxC;iBACD;YACH;YAEA,MAAMqC,WAAW,MAAMC,MAAM,IAAI,CAAC9E,MAAM,CAAC0G,OAAO,CAACtD,UAAU,EAAE;gBAC3D2B,QAAQ;gBACRC,SAAS;oBAAE,gBAAgB;gBAAmB;gBAC9CC,MAAMC,KAAKC,SAAS,CAAC0B;YACvB;YAEA,OAAOhC,SAASO,EAAE;QACpB,EAAE,OAAOtE,OAAO;YACdF,cAAM,CAACE,KAAK,CAAC,yBAAyBA;YACtC,OAAO;QACT;IACF;IAEA,qBAAqB;IACrB,MAAcY,mBAAmBV,KAAY,EAAoB;QAC/D,IAAI,CAAC,IAAI,CAAChB,MAAM,CAACoH,SAAS,EAAE7G,WAAW,CAAC,IAAI,CAACP,MAAM,CAACoH,SAAS,CAACC,UAAU,EAAE;YACxE,OAAO;QACT;QAEA,IAAI;YACF,MAAMC,iBAAiB;gBACrBC,aAAa,IAAI,CAACvH,MAAM,CAACoH,SAAS,CAACC,UAAU;gBAC7CG,cAAc;gBACdC,WAAWzG,MAAMiB,EAAE;gBACnByF,SAAS;oBACP3B,SAAS,GAAG/E,MAAMqB,QAAQ,CAAC,QAAQ,EAAErB,MAAMsB,KAAK,EAAE;oBAClDqF,QAAQ;oBACRtF,UAAU,IAAI,CAACrC,MAAM,CAACoH,SAAS,CAAC/E,QAAQ;oBACxCuF,WAAW;oBACXC,OAAO7G,MAAMmD,IAAI,CAAC2D,WAAW;oBAC7BC,OAAO/G,MAAMqB,QAAQ,CAACyF,WAAW;oBACjCE,gBAAgB;wBACdhE,SAAShD,MAAMgD,OAAO;wBACtBiE,YAAYjH,MAAMmD,IAAI;wBACtB5B,WAAWvB,MAAMuB,SAAS,CAACC,WAAW;wBACtC,GAAGxB,MAAMqD,IAAI;oBACf;gBACF;YACF;YAEA,MAAMQ,WAAW,MAAMC,MAAM,2CAA2C;gBACtEC,QAAQ;gBACRC,SAAS;oBAAE,gBAAgB;gBAAmB;gBAC9CC,MAAMC,KAAKC,SAAS,CAACmC;YACvB;YAEA,OAAOzC,SAASO,EAAE;QACpB,EAAE,OAAOtE,OAAO;YACdF,cAAM,CAACE,KAAK,CAAC,2BAA2BA;YACxC,OAAO;QACT;IACF;IAEA,4BAA4B;IAC5B,MAAc0F,cAAcxC,OAAe,EAAoB;QAC7D,IAAI,CAAC,IAAI,CAAChE,MAAM,CAACqG,GAAG,EAAErG,OAAOkI,cAAc,CAAC,IAAI,CAAClI,MAAM,CAACqG,GAAG,EAAErG,OAAOmI,WAAW;YAC7E,OAAO;QACT;QAEA,IAAI;YACF,MAAMtF,OAAOuF,OAAOxF,IAAI,CACtB,GAAG,IAAI,CAAC5C,MAAM,CAACqG,GAAG,CAACrG,MAAM,CAACkI,UAAU,CAAC,CAAC,EAAE,IAAI,CAAClI,MAAM,CAACqG,GAAG,CAACrG,MAAM,CAACmI,SAAS,EAAE,EAC1EE,QAAQ,CAAC;YAEX,KAAK,MAAMC,aAAa,IAAI,CAACtI,MAAM,CAACqG,GAAG,CAACrD,UAAU,CAAE;gBAClD,MAAM6B,WAAW,MAAMC,MACrB,CAAC,2CAA2C,EAAE,IAAI,CAAC9E,MAAM,CAACqG,GAAG,CAACrG,MAAM,CAACkI,UAAU,CAAC,cAAc,CAAC,EAC/F;oBACEnD,QAAQ;oBACRC,SAAS;wBACP,iBAAiB,CAAC,MAAM,EAAEnC,MAAM;wBAChC,gBAAgB;oBAClB;oBACAoC,MAAM,IAAIsD,gBAAgB;wBACxBC,MAAM,IAAI,CAACxI,MAAM,CAACqG,GAAG,CAACrG,MAAM,CAACyI,UAAU;wBACvCC,IAAIJ;wBACJK,MAAM3E;oBACR;gBACF;gBAGF,IAAI,CAACa,SAASO,EAAE,EAAE;oBAChBxE,cAAM,CAACE,KAAK,CAAC,CAAC,sBAAsB,EAAEwH,UAAU,CAAC,CAAC,EAAE,MAAMzD,SAASf,IAAI;gBACzE;YACF;YAEA,OAAO;QACT,EAAE,OAAOhD,OAAO;YACdF,cAAM,CAACE,KAAK,CAAC,sBAAsBA;YACnC,OAAO;QACT;IACF;IAEA,yBAAyB;IACzB,MAAc2F,WAAWzC,OAAe,EAAoB;QAC1D,uCAAuC;QACvC,oDAAoD;QACpDpD,cAAM,CAACgI,IAAI,CAAC;QACZ,OAAO;IACT;IAEA,iBAAiB;IACTtF,iBAAiBjB,QAAgB,EAAU;QACjD,OAAQA;YACN,KAAK;gBAAY,OAAO;YACxB,KAAK;gBAAQ,OAAO;YACpB,KAAK;gBAAU,OAAO;YACtB,KAAK;gBAAO,OAAO;YACnB;gBAAS,OAAO;QAClB;IACF;IAEQK,kBAAkB1B,KAAY,EAAU;QAC9C,MAAMqC,QAAQ,IAAI,CAACC,gBAAgB,CAACtC,MAAMqB,QAAQ;QAElD,OAAO,CAAC;;;;;;;gCAOoB,EAAEgB,MAAM;;;;6GAIqE,EAAEA,MAAM;;;;;;;mCAOlF,EAAErC,MAAMqB,QAAQ,CAAC;;;gBAGpC,EAAErB,MAAMsB,KAAK,CAAC;eACf,EAAEtB,MAAMgD,OAAO,CAAC;;;;wCAIS,EAAEhD,MAAMmD,IAAI,CAAC;6CACR,EAAEnD,MAAMuB,SAAS,CAACC,WAAW,GAAG;4CACjC,EAAExB,MAAMiB,EAAE,CAAC;cACzC,EAAEjB,MAAMqD,IAAI,GAAGzC,OAAO0C,OAAO,CAACtD,MAAMqD,IAAI,EAAEZ,GAAG,CAAC,CAAC,CAACc,KAAKL,MAAM,GACzD,CAAC,WAAW,EAAEK,IAAI,WAAW,EAAEL,MAAM,IAAI,CAAC,EAC1CjB,IAAI,CAAC,MAAM,GAAG;;;;;;;4BAOF,EAAE,IAAI4F,OAAOrG,WAAW,GAAG;;;;;IAKnD,CAAC;IACH;IAEA,mBAAmB;IACXtB,WAAWF,KAAY,EAAQ;QACrC,IAAI,IAAI,CAACd,UAAU,CAACoG,MAAM,IAAI,IAAI,CAACnG,YAAY,EAAE;YAC/C,IAAI,CAACD,UAAU,CAAC4I,KAAK;QACvB;QACA,IAAI,CAAC5I,UAAU,CAAC6I,IAAI,CAAC/H;IACvB;IAEA,MAAcgB,WAAWhB,KAAY,EAAEC,OAAsC,EAAiB;QAC5F,IAAI;YACF,MAAM+H,WAAW,CAAC,iBAAiB,EAAEhI,MAAMiB,EAAE,EAAE;YAC/C,MAAMgH,8BAAc,CAACC,GAAG,CAACF,UAAU;gBAAE,GAAGhI,KAAK;gBAAEmI,iBAAiBlI;YAAQ,GAAG,KAAK,KAAK;YACrF,MAAMgI,8BAAc,CAACG,iBAAiB,CAAC;gBACrCjF,MAAM;gBACNkF,SAASrI,MAAMiB,EAAE;gBACjBI,UAAUrB,MAAMqB,QAAQ;gBACxBjB,UAAUJ,MAAMI,QAAQ;gBACxBmB,WAAWvB,MAAMuB,SAAS;YAC5B;QACF,EAAE,OAAOzB,OAAO;YACdF,cAAM,CAACE,KAAK,CAAC,0BAA0BA;QACzC;IACF;IAEA,oCAAoC;IAC5BT,sBAA4B;QAClCiJ,YAAY;YACV,IAAI,CAACC,iBAAiB;QACxB,GAAG,QAAQ,2BAA2B;IACxC;IAEQA,oBAA0B;QAChC,sCAAsC;QACtC,iCAAiC;QACjC3I,cAAM,CAAC4I,KAAK,CAAC,CAAC,kBAAkB,EAAE,IAAI,CAACtJ,UAAU,CAACoG,MAAM,EAAE;IAC5D;IAEA,oBAAoB;IACpB,MAAMmD,iBAAiBJ,OAAe,EAAEK,cAAsB,EAAoB;QAChF,IAAI;YACF,MAAMV,WAAW,CAAC,iBAAiB,EAAEK,SAAS;YAC9C,MAAMrI,QAAQ,MAAMiI,8BAAc,CAACU,GAAG,CAACX;YAEvC,IAAIhI,OAAO;gBACTA,MAAM4I,YAAY,GAAG;gBACrB5I,MAAM0I,cAAc,GAAGA;gBACvB1I,MAAM6I,cAAc,GAAG,IAAIhB;gBAE3B,MAAMI,8BAAc,CAACC,GAAG,CAACF,UAAUhI,OAAO,KAAK,KAAK;gBACpDJ,cAAM,CAACC,IAAI,CAAC,CAAC,oBAAoB,EAAEwI,QAAQ,IAAI,EAAEK,gBAAgB;gBACjE,OAAO;YACT;YAEA,OAAO;QACT,EAAE,OAAO5I,OAAO;YACdF,cAAM,CAACE,KAAK,CAAC,gCAAgCA;YAC7C,OAAO;QACT;IACF;IAEA,oBAAoB;IACpB,MAAMgJ,gBAAgBC,QAAQ,EAAE,EAAoB;QAClD,IAAI;YACF,MAAMC,SAAS,MAAMf,8BAAc,CAACgB,MAAM,CAAC,yBAAyB,GAAG;YACvE,MAAMC,SAAS,IAAIrB,KAAKA,KAAKsB,GAAG,KAAKJ,QAAQ,KAAK,KAAK;YAEvD,OAAOC,OAAOI,MAAM,CAACpJ,CAAAA,QAAS,IAAI6H,KAAK7H,MAAMuB,SAAS,IAAI2H;QAC5D,EAAE,OAAOpJ,OAAO;YACdF,cAAM,CAACE,KAAK,CAAC,gCAAgCA;YAC7C,OAAO,EAAE;QACX;IACF;AACF;AAGO,MAAMnB,iBAAiB;IAC5B0K,aAAa,CAACvJ,QAAyD,CAAA;YACrEqD,MAAM;YACN9B,UAAUvB,MAAMuB,QAAQ,CAACiI,WAAW;YACpChI,OAAO,CAAC,cAAc,EAAExB,MAAMqD,IAAI,EAAE;YACpCH,SAASlD,MAAMkD,OAAO;YACtBK,MAAM;gBACJkG,SAASzJ,MAAMmB,EAAE;gBACjBuI,WAAW1J,MAAMqD,IAAI;gBACrBsG,SAAS3J,MAAM2J,OAAO;gBACtBC,YAAY5J,MAAM4J,UAAU;YAC9B;YACAtJ,UAAUN,MAAMuB,QAAQ,KAAKsI,2BAAa,CAACC,QAAQ,GAC/C;gBAAC;gBAAS;gBAAS;aAAY,GAC/B;gBAAC;aAAQ;QACf,CAAA;IAEAC,eAAe,CAACC,OAAeC,YAAwD,CAAA;YACrF5G,MAAM;YACN9B,UAAU;YACVC,OAAO;YACP0B,SAAS,CAAC,eAAe,EAAE8G,MAAM,8BAA8B,EAAEC,UAAU,sCAAsC,CAAC;YAClH1G,MAAM;gBAAE2G,cAAcF;gBAAOC;YAAU;YACvC3J,UAAU;gBAAC;gBAAS;aAAQ;QAC9B,CAAA;IAEA6J,oBAAoB,CAACC,WAAmBC,QAAoD,CAAA;YAC1FhH,MAAM;YACN9B,UAAU;YACVC,OAAO;YACP0B,SAAS,CAAC,sCAAsC,EAAEmH,MAAM,mDAAmD,CAAC;YAC5G9G,MAAM;gBAAE6G;gBAAWC;YAAM;YACzB/J,UAAU;gBAAC;gBAAS;aAAQ;QAC9B,CAAA;IAEAgK,iBAAiB,CAACC,aAAqBC,eAA2D,CAAA;YAChGnH,MAAM;YACN9B,UAAU;YACVC,OAAO;YACP0B,SAAS,CAAC,iCAAiC,EAAEsH,aAAa,KAAK,EAAED,YAAY,gCAAgC,CAAC;YAC9GhH,MAAM;gBAAEgH;gBAAaC;gBAAcC,gBAAgB,AAAC,CAAA,AAACD,CAAAA,eAAeD,WAAU,IAAKC,eAAe,GAAE,EAAGE,OAAO,CAAC;YAAG;YAClHpK,UAAU;gBAAC;gBAAS;gBAAS;aAAQ;QACvC,CAAA;IAEAqK,mBAAmB,CAACC,cAAsBC,UAAmD,CAAA;YAC3FxH,MAAM;YACN9B,UAAU;YACVC,OAAO,CAAC,mBAAmB,EAAEoJ,cAAc;YAC3C1H,SAAS,CAAC,uEAAuE,CAAC;YAClFK,MAAM;gBAAEqH;gBAAc,GAAGC,OAAO;YAAC;YACjCvK,UAAU;gBAAC;gBAAS;gBAAS;gBAAa;aAAM;QAClD,CAAA;AACF;AAGO,SAAStB;IACd,OAAO,CAAC,MAAM,EAAE+I,KAAKsB,GAAG,GAAG,CAAC,EAAEzF,KAAKkH,MAAM,GAAGvD,QAAQ,CAAC,IAAIwD,MAAM,CAAC,GAAG,IAAI;AACzE;AAEA,qDAAqD;AACrD,MAAMC,gBAA6B;IACjCxL,OAAO;QACLC,SAAS;QACTyC,YAAY,EAAE;QACdxC,YAAY;YACVuL,MAAM;YACNC,MAAM;YACNC,QAAQ;YACRpJ,MAAM;gBAAEC,MAAM;gBAAIoJ,MAAM;YAAG;QAC7B;QACA/J,WAAW;YAAED,SAAS;YAAI+C,MAAM;QAAG;IACrC;AACF;AAEO,MAAMpF,iBAAiB,IAAID,eAAekM"}