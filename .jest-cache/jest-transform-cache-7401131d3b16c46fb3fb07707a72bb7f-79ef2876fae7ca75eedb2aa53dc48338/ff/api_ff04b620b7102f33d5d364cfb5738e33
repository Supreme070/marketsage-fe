e3e7a361532a7d8ae4c2cd1fd23ef69a
// API Client for MarketSage
// Lists
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    cancelScheduledWhatsAppCampaign: function() {
        return cancelScheduledWhatsAppCampaign;
    },
    getContactById: function() {
        return getContactById;
    },
    getContacts: function() {
        return getContacts;
    },
    getEmailCampaignById: function() {
        return getEmailCampaignById;
    },
    getEmailCampaignStats: function() {
        return getEmailCampaignStats;
    },
    getEmailCampaigns: function() {
        return getEmailCampaigns;
    },
    getEmailTemplateById: function() {
        return getEmailTemplateById;
    },
    getEmailTemplates: function() {
        return getEmailTemplates;
    },
    getListById: function() {
        return getListById;
    },
    getLists: function() {
        return getLists;
    },
    getListsWithContactCount: function() {
        return getListsWithContactCount;
    },
    getSMSCampaignById: function() {
        return getSMSCampaignById;
    },
    getSMSCampaignStats: function() {
        return getSMSCampaignStats;
    },
    getSMSCampaigns: function() {
        return getSMSCampaigns;
    },
    getSMSTemplateById: function() {
        return getSMSTemplateById;
    },
    getSMSTemplates: function() {
        return getSMSTemplates;
    },
    getSegmentById: function() {
        return getSegmentById;
    },
    getSegments: function() {
        return getSegments;
    },
    getSegmentsWithContactCount: function() {
        return getSegmentsWithContactCount;
    },
    getWhatsAppCampaignById: function() {
        return getWhatsAppCampaignById;
    },
    getWhatsAppCampaignStats: function() {
        return getWhatsAppCampaignStats;
    },
    getWhatsAppCampaigns: function() {
        return getWhatsAppCampaigns;
    },
    getWhatsAppTemplateById: function() {
        return getWhatsAppTemplateById;
    },
    getWhatsAppTemplates: function() {
        return getWhatsAppTemplates;
    },
    scheduleWhatsAppCampaign: function() {
        return scheduleWhatsAppCampaign;
    },
    sendWhatsAppCampaign: function() {
        return sendWhatsAppCampaign;
    }
});
const getLists = async ()=>{
    const response = await fetch('/api/lists');
    if (!response.ok) {
        throw new Error('Failed to fetch lists');
    }
    return response.json();
};
const getListById = async (id)=>{
    const response = await fetch(`/api/lists/${id}`);
    if (!response.ok) {
        throw new Error('Failed to fetch list');
    }
    return response.json();
};
const getListsWithContactCount = async ()=>{
    const response = await fetch('/api/lists?includeCount=true');
    if (!response.ok) {
        throw new Error('Failed to fetch lists with contact count');
    }
    return response.json();
};
const getSegments = async ()=>{
    const response = await fetch('/api/segments');
    if (!response.ok) {
        throw new Error('Failed to fetch segments');
    }
    return response.json();
};
const getSegmentById = async (id)=>{
    const response = await fetch(`/api/segments/${id}`);
    if (!response.ok) {
        throw new Error('Failed to fetch segment');
    }
    return response.json();
};
const getSegmentsWithContactCount = async ()=>{
    const response = await fetch('/api/segments?includeCount=true');
    if (!response.ok) {
        throw new Error('Failed to fetch segments with contact count');
    }
    return response.json();
};
const getEmailTemplates = async ()=>{
    const response = await fetch('/api/email/templates');
    if (!response.ok) {
        throw new Error('Failed to fetch email templates');
    }
    return response.json();
};
const getEmailTemplateById = async (id)=>{
    const response = await fetch(`/api/email/templates/${id}`);
    if (!response.ok) {
        throw new Error('Failed to fetch email template');
    }
    return response.json();
};
const getEmailCampaigns = async ()=>{
    const response = await fetch('/api/email/campaigns');
    if (!response.ok) {
        throw new Error('Failed to fetch email campaigns');
    }
    return response.json();
};
const getEmailCampaignById = async (id)=>{
    const response = await fetch(`/api/email/campaigns/${id}`);
    if (!response.ok) {
        throw new Error('Failed to fetch email campaign');
    }
    return response.json();
};
const getEmailCampaignStats = async (id)=>{
    const response = await fetch(`/api/email/campaigns/${id}/stats`);
    if (!response.ok) {
        throw new Error('Failed to fetch email campaign statistics');
    }
    return response.json();
};
const getSMSTemplates = async ()=>{
    const response = await fetch('/api/sms/templates');
    if (!response.ok) {
        throw new Error('Failed to fetch SMS templates');
    }
    return response.json();
};
const getSMSTemplateById = async (id)=>{
    const response = await fetch(`/api/sms/templates/${id}`);
    if (!response.ok) {
        throw new Error('Failed to fetch SMS template');
    }
    return response.json();
};
const getSMSCampaigns = async ()=>{
    const response = await fetch('/api/sms/campaigns');
    if (!response.ok) {
        throw new Error('Failed to fetch SMS campaigns');
    }
    const data = await response.json();
    // Return the campaigns array if the response is an object with campaigns property
    return Array.isArray(data) ? data : data?.campaigns || [];
};
const getSMSCampaignById = async (id)=>{
    try {
        const response = await fetch(`/api/sms/campaigns/${id}`);
        if (response.status === 404) {
            return null; // Return null for not found
        }
        if (!response.ok) {
            throw new Error('Failed to fetch SMS campaign');
        }
        return response.json();
    } catch (error) {
        console.error("Error fetching SMS campaign:", error);
        throw error;
    }
};
const getSMSCampaignStats = async (id)=>{
    const response = await fetch(`/api/sms/campaigns/${id}/stats`);
    if (!response.ok) {
        throw new Error('Failed to fetch SMS campaign statistics');
    }
    return response.json();
};
const getContacts = async ()=>{
    const response = await fetch('/api/contacts');
    if (!response.ok) {
        throw new Error('Failed to fetch contacts');
    }
    return response.json();
};
const getContactById = async (id)=>{
    const response = await fetch(`/api/contacts/${id}`);
    if (!response.ok) {
        throw new Error('Failed to fetch contact');
    }
    return response.json();
};
const getWhatsAppTemplates = async ()=>{
    try {
        const response = await fetch('/api/whatsapp/templates');
        if (response.status === 404) {
            console.warn('WhatsApp templates endpoint not found, returning empty array');
            return []; // Return empty array if endpoint not found
        }
        if (!response.ok) {
            throw new Error(`Failed to fetch WhatsApp templates: ${response.status} ${response.statusText}`);
        }
        return response.json();
    } catch (error) {
        console.error("Error fetching WhatsApp templates:", error);
        // Return empty array instead of throwing to prevent UI failures
        return [];
    }
};
const getWhatsAppTemplateById = async (id)=>{
    const response = await fetch(`/api/whatsapp/templates/${id}`);
    if (!response.ok) {
        throw new Error('Failed to fetch WhatsApp template');
    }
    return response.json();
};
const getWhatsAppCampaigns = async ()=>{
    const response = await fetch('/api/whatsapp/campaigns');
    if (!response.ok) {
        throw new Error('Failed to fetch WhatsApp campaigns');
    }
    const data = await response.json();
    // Return the campaigns array if the response is an object with campaigns property
    return Array.isArray(data) ? data : data?.campaigns || [];
};
const getWhatsAppCampaignById = async (id)=>{
    try {
        const response = await fetch(`/api/whatsapp/campaigns/${id}`);
        if (response.status === 404) {
            return null; // Return null for not found
        }
        if (!response.ok) {
            throw new Error('Failed to fetch WhatsApp campaign');
        }
        return response.json();
    } catch (error) {
        console.error("Error fetching WhatsApp campaign:", error);
        throw error;
    }
};
const getWhatsAppCampaignStats = async (id)=>{
    const response = await fetch(`/api/whatsapp/campaigns/${id}/statistics`);
    if (!response.ok) {
        throw new Error('Failed to fetch WhatsApp campaign statistics');
    }
    return response.json();
};
const sendWhatsAppCampaign = async (id)=>{
    const response = await fetch(`/api/whatsapp/campaigns/${id}/send`, {
        method: 'POST'
    });
    if (!response.ok) {
        throw new Error('Failed to send WhatsApp campaign');
    }
    return response.json();
};
const scheduleWhatsAppCampaign = async (id, scheduledFor)=>{
    const response = await fetch(`/api/whatsapp/campaigns/${id}/schedule`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            scheduledFor
        })
    });
    if (!response.ok) {
        throw new Error('Failed to schedule WhatsApp campaign');
    }
    return response.json();
};
const cancelScheduledWhatsAppCampaign = async (id)=>{
    const response = await fetch(`/api/whatsapp/campaigns/${id}/schedule`, {
        method: 'DELETE'
    });
    if (!response.ok) {
        throw new Error('Failed to cancel scheduled WhatsApp campaign');
    }
    return response.json();
};

//# sourceMappingURL=data:application/json;base64,