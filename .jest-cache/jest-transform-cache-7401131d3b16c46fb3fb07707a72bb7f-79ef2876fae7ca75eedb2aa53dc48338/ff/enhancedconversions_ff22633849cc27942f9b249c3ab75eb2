59282e40000720722dcf342525bc3fdb
/**
 * Enhanced Conversion Tracking & Attribution
 * 
 * This module provides advanced functionality for tracking conversions,
 * implementing different attribution models, and analyzing funnel performance.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ConversionEventTypes: function() {
        return ConversionEventTypes;
    },
    applyAttributionModel: function() {
        return applyAttributionModel;
    },
    createConversionEvent: function() {
        return createConversionEvent;
    },
    createConversionFunnel: function() {
        return createConversionFunnel;
    },
    generateFunnelReport: function() {
        return generateFunnelReport;
    },
    getAttributionSettings: function() {
        return getAttributionSettings;
    },
    getConversionAttribution: function() {
        return getConversionAttribution;
    },
    getConversionEvents: function() {
        return getConversionEvents;
    },
    getEntityConversions: function() {
        return getEntityConversions;
    },
    trackConversion: function() {
        return trackConversion;
    },
    updateAttributionSettings: function() {
        return updateAttributionSettings;
    }
});
const _client = require("@prisma/client");
const _prisma = /*#__PURE__*/ _interop_require_default(require("./db/prisma"));
const _logger = require("./logger");
const _crypto = require("crypto");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const ConversionEventTypes = {
    // Email events
    EMAIL_OPEN: 'email_open',
    EMAIL_CLICK: 'email_click',
    EMAIL_REPLY: 'email_reply',
    // SMS events
    SMS_DELIVERY: 'sms_delivery',
    SMS_REPLY: 'sms_reply',
    // WhatsApp events
    WHATSAPP_DELIVERY: 'whatsapp_delivery',
    WHATSAPP_READ: 'whatsapp_read',
    WHATSAPP_REPLY: 'whatsapp_reply',
    // Web events
    PAGE_VIEW: 'page_view',
    CONTENT_VIEW: 'content_view',
    FORM_START: 'form_start',
    FORM_SUBMIT: 'form_submit',
    // E-commerce events
    PRODUCT_VIEW: 'product_view',
    ADD_TO_CART: 'add_to_cart',
    CHECKOUT_START: 'checkout_start',
    PURCHASE: 'purchase',
    // Custom event prefix
    CUSTOM: 'custom_'
};
async function createConversionEvent(data, userId) {
    try {
        const event = await _prisma.default.conversionEvent.create({
            data: {
                id: (0, _crypto.randomUUID)(),
                name: data.name,
                description: data.description,
                eventType: data.eventType,
                category: data.category,
                valueType: data.valueType,
                isSystem: data.isSystem || false,
                createdById: userId,
                createdAt: new Date(),
                updatedAt: new Date()
            }
        });
        _logger.logger.info(`Created conversion event: ${event.id}`, {
            eventId: event.id,
            name: data.name
        });
        return event.id;
    } catch (error) {
        _logger.logger.error('Error creating conversion event', error);
        throw error;
    }
}
async function trackConversion(data) {
    try {
        // Get attribution settings for default values
        const attributionSettings = await getAttributionSettings();
        // Create the conversion record
        await _prisma.default.conversionTracking.create({
            data: {
                id: (0, _crypto.randomUUID)(),
                eventId: data.eventId,
                entityType: data.entityType,
                entityId: data.entityId,
                contactId: data.contactId,
                value: data.value,
                metadata: data.metadata ? JSON.stringify(data.metadata) : null,
                attributionModel: data.attributionModel || attributionSettings.defaultModel,
                touchPoints: data.touchPoints ? JSON.stringify(data.touchPoints) : null,
                occurredAt: new Date()
            }
        });
        return true;
    } catch (error) {
        _logger.logger.error('Error tracking conversion', error);
        return false;
    }
}
async function getAttributionSettings() {
    try {
        // Look for existing settings
        const settings = await _prisma.default.attributionSettings.findFirst();
        if (settings) {
            return {
                defaultModel: settings.defaultModel,
                customWeights: settings.customWeights ? JSON.parse(settings.customWeights) : undefined,
                lookbackWindow: settings.lookbackWindow
            };
        }
        // Create default settings if none exist
        const defaultSettings = await _prisma.default.attributionSettings.create({
            data: {
                id: (0, _crypto.randomUUID)(),
                defaultModel: _client.AttributionModel.LAST_TOUCH,
                lookbackWindow: 30,
                createdAt: new Date(),
                updatedAt: new Date()
            }
        });
        return {
            defaultModel: defaultSettings.defaultModel,
            lookbackWindow: defaultSettings.lookbackWindow
        };
    } catch (error) {
        _logger.logger.error('Error getting attribution settings', error);
        // Return sensible defaults if there's an error
        return {
            defaultModel: _client.AttributionModel.LAST_TOUCH,
            lookbackWindow: 30
        };
    }
}
async function updateAttributionSettings(defaultModel, lookbackWindow, customWeights) {
    try {
        // Look for existing settings
        const settings = await _prisma.default.attributionSettings.findFirst();
        const data = {
            defaultModel,
            lookbackWindow,
            customWeights: customWeights ? JSON.stringify(customWeights) : null,
            updatedAt: new Date()
        };
        if (settings) {
            // Update existing settings
            await _prisma.default.attributionSettings.update({
                where: {
                    id: settings.id
                },
                data
            });
        } else {
            // Create new settings
            await _prisma.default.attributionSettings.create({
                data: {
                    id: (0, _crypto.randomUUID)(),
                    ...data,
                    createdAt: new Date()
                }
            });
        }
        return true;
    } catch (error) {
        _logger.logger.error('Error updating attribution settings', error);
        return false;
    }
}
async function createConversionFunnel(name, stages, userId, description) {
    try {
        const funnel = await _prisma.default.conversionFunnel.create({
            data: {
                id: (0, _crypto.randomUUID)(),
                name,
                description,
                stages: JSON.stringify(stages),
                createdById: userId,
                createdAt: new Date(),
                updatedAt: new Date()
            }
        });
        _logger.logger.info(`Created conversion funnel: ${funnel.id}`, {
            funnelId: funnel.id,
            name
        });
        return funnel.id;
    } catch (error) {
        _logger.logger.error('Error creating conversion funnel', error);
        throw error;
    }
}
async function generateFunnelReport(funnelId, startDate, endDate) {
    try {
        // Get the funnel
        const funnel = await _prisma.default.conversionFunnel.findUnique({
            where: {
                id: funnelId
            }
        });
        if (!funnel) {
            _logger.logger.warn(`Funnel not found: ${funnelId}`);
            return null;
        }
        // Parse stages
        const stageIds = JSON.parse(funnel.stages);
        // Get the events for these stages
        const events = await _prisma.default.conversionEvent.findMany({
            where: {
                id: {
                    in: stageIds
                }
            },
            select: {
                id: true,
                name: true
            }
        });
        // Create a map of event IDs to names
        const eventMap = new Map(events.map((event)=>[
                event.id,
                event.name
            ]));
        // Get conversion counts for each stage
        const stageCounts = await Promise.all(stageIds.map(async (eventId)=>{
            const conversions = await _prisma.default.conversionTracking.findMany({
                where: {
                    eventId,
                    occurredAt: {
                        gte: startDate,
                        lte: endDate
                    }
                },
                select: {
                    id: true,
                    contactId: true,
                    value: true
                }
            });
            const uniqueContacts = new Set(conversions.map((c)=>c.contactId).filter(Boolean));
            const totalValue = conversions.reduce((sum, c)=>sum + (c.value || 0), 0);
            return {
                eventId,
                name: eventMap.get(eventId) || 'Unknown Event',
                count: uniqueContacts.size,
                totalValue
            };
        }));
        // Calculate drop-off and conversion rates
        const stages = [];
        let previousCount = stageCounts[0]?.count || 0;
        const totalEntries = previousCount;
        for(let i = 0; i < stageCounts.length; i++){
            const stage = stageCounts[i];
            const dropOffRate = i > 0 ? (previousCount - stage.count) / previousCount : 0;
            const conversionRate = totalEntries > 0 ? stage.count / totalEntries : 0;
            stages.push({
                eventId: stage.eventId,
                name: stage.name,
                count: stage.count,
                dropOffRate,
                conversionRate,
                totalValue: stage.totalValue
            });
            previousCount = stage.count;
        }
        // Calculate overall funnel metrics
        const totalConversions = stages[stages.length - 1]?.count || 0;
        const conversionRate = totalEntries > 0 ? totalConversions / totalEntries : 0;
        const totalValue = stages.reduce((sum, stage)=>sum + (stage.totalValue || 0), 0);
        // Create a report record in the database
        const reportData = {
            stages,
            totalEntries,
            totalConversions,
            conversionRate,
            totalValue
        };
        await _prisma.default.conversionFunnelReport.create({
            data: {
                id: (0, _crypto.randomUUID)(),
                funnelId,
                startDate,
                endDate,
                data: JSON.stringify(reportData),
                createdAt: new Date()
            }
        });
        return {
            name: funnel.name,
            ...reportData,
            startDate,
            endDate
        };
    } catch (error) {
        _logger.logger.error(`Error generating funnel report: ${funnelId}`, error);
        return null;
    }
}
function applyAttributionModel(touchPoints, model, customWeights) {
    // Sort touch points by timestamp
    const sortedPoints = [
        ...touchPoints
    ].sort((a, b)=>a.timestamp.getTime() - b.timestamp.getTime());
    if (sortedPoints.length === 0) {
        return [];
    }
    if (sortedPoints.length === 1) {
        // If there's only one touch point, it gets 100% credit
        sortedPoints[0].weight = 1;
        return sortedPoints;
    }
    switch(model){
        case _client.AttributionModel.FIRST_TOUCH:
            // First touch gets 100% credit
            sortedPoints.forEach((point, index)=>{
                point.weight = index === 0 ? 1 : 0;
            });
            break;
        case _client.AttributionModel.LAST_TOUCH:
            // Last touch gets 100% credit
            sortedPoints.forEach((point, index)=>{
                point.weight = index === sortedPoints.length - 1 ? 1 : 0;
            });
            break;
        case _client.AttributionModel.LINEAR:
            // Equal distribution
            const equalWeight = 1 / sortedPoints.length;
            sortedPoints.forEach((point)=>{
                point.weight = equalWeight;
            });
            break;
        case _client.AttributionModel.TIME_DECAY:
            // More recent touches get more credit
            const halfLifeDays = 7; // 7-day half-life
            const latestTime = sortedPoints[sortedPoints.length - 1].timestamp.getTime();
            // Calculate raw weights based on time decay
            let totalWeight = 0;
            sortedPoints.forEach((point)=>{
                const daysAgo = (latestTime - point.timestamp.getTime()) / (1000 * 60 * 60 * 24);
                const weight = Math.pow(0.5, daysAgo / halfLifeDays);
                point.weight = weight;
                totalWeight += weight;
            });
            // Normalize weights to sum to 1
            sortedPoints.forEach((point)=>{
                point.weight = (point.weight || 0) / totalWeight;
            });
            break;
        case _client.AttributionModel.POSITION_BASED:
            // U-shaped: 40% to first, 40% to last, 20% distributed among middle touches
            sortedPoints.forEach((point, index)=>{
                if (index === 0) {
                    point.weight = 0.4;
                } else if (index === sortedPoints.length - 1) {
                    point.weight = 0.4;
                } else {
                    // Distribute the remaining 20% among middle touch points
                    point.weight = 0.2 / (sortedPoints.length - 2);
                }
            });
            break;
        case _client.AttributionModel.CUSTOM:
            // Use custom weights if provided
            if (customWeights) {
                sortedPoints.forEach((point, index)=>{
                    const position = index === 0 ? 'first' : index === sortedPoints.length - 1 ? 'last' : 'middle';
                    point.weight = customWeights[position] || 0;
                });
                // Normalize weights to sum to 1
                const totalCustomWeight = sortedPoints.reduce((sum, point)=>sum + (point.weight || 0), 0);
                if (totalCustomWeight > 0) {
                    sortedPoints.forEach((point)=>{
                        point.weight = (point.weight || 0) / totalCustomWeight;
                    });
                }
            } else {
                // Fall back to position-based if no custom weights
                return applyAttributionModel(touchPoints, _client.AttributionModel.POSITION_BASED);
            }
            break;
    }
    return sortedPoints;
}
async function getConversionAttribution(conversionTrackingId) {
    try {
        const conversion = await _prisma.default.conversionTracking.findUnique({
            where: {
                id: conversionTrackingId
            }
        });
        if (!conversion || !conversion.touchPoints) {
            return null;
        }
        const touchPoints = JSON.parse(conversion.touchPoints);
        const attributionSettings = await getAttributionSettings();
        // Apply the attribution model
        const attributedPoints = applyAttributionModel(touchPoints, conversion.attributionModel || attributionSettings.defaultModel, attributionSettings.customWeights);
        return attributedPoints;
    } catch (error) {
        _logger.logger.error(`Error getting conversion attribution: ${conversionTrackingId}`, error);
        return null;
    }
}
async function getConversionEvents() {
    try {
        const events = await _prisma.default.conversionEvent.findMany({
            select: {
                id: true,
                name: true,
                eventType: true,
                category: true,
                isSystem: true
            },
            orderBy: {
                name: 'asc'
            }
        });
        return {
            system: events.filter((e)=>e.isSystem).map(({ isSystem, ...rest })=>rest),
            custom: events.filter((e)=>!e.isSystem).map(({ isSystem, ...rest })=>rest)
        };
    } catch (error) {
        _logger.logger.error('Error getting conversion events', error);
        return {
            system: [],
            custom: []
        };
    }
}
async function getEntityConversions(entityType, entityId, startDate, endDate) {
    try {
        const dateFilter = {};
        if (startDate || endDate) {
            dateFilter.occurredAt = {};
            if (startDate) {
                dateFilter.occurredAt.gte = startDate;
            }
            if (endDate) {
                dateFilter.occurredAt.lte = endDate;
            }
        }
        const conversions = await _prisma.default.conversionTracking.findMany({
            where: {
                entityType,
                entityId,
                ...dateFilter
            },
            include: {
                event: {
                    select: {
                        eventType: true
                    }
                }
            }
        });
        // Group by event type
        const results = {};
        conversions.forEach((conversion)=>{
            const eventType = conversion.event.eventType;
            if (!results[eventType]) {
                results[eventType] = {
                    count: 0,
                    value: 0
                };
            }
            results[eventType].count += 1;
            results[eventType].value += conversion.value || 0;
        });
        return results;
    } catch (error) {
        _logger.logger.error(`Error getting entity conversions: ${entityType}/${entityId}`, error);
        return {};
    }
}

//# sourceMappingURL=data:application/json;base64,