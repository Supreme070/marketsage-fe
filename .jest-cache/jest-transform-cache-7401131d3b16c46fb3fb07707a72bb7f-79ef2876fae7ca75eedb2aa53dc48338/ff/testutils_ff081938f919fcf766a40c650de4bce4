aa98a22b3c44f787cfc2b8e9076d24da
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    PERFORMANCE_THRESHOLDS: function() {
        return PERFORMANCE_THRESHOLDS;
    },
    TEST_CONSTANTS: function() {
        return TEST_CONSTANTS;
    },
    checkAccessibility: function() {
        return checkAccessibility;
    },
    createMockHook: function() {
        return createMockHook;
    },
    createMockMCPData: function() {
        return createMockMCPData;
    },
    measureComponentPerformance: function() {
        return measureComponentPerformance;
    },
    mockAnalyticsOverview: function() {
        return mockAnalyticsOverview;
    },
    mockCustomerJourney: function() {
        return mockCustomerJourney;
    },
    mockVisitorJourney: function() {
        return mockVisitorJourney;
    },
    mockVisitorLocation: function() {
        return mockVisitorLocation;
    },
    render: function() {
        return customRender;
    },
    waitForComponentToStabilize: function() {
        return waitForComponentToStabilize;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = _export_star(require("@testing-library/react"), exports);
const _reactquery = require("@tanstack/react-query");
function _export_star(from, to) {
    Object.keys(from).forEach(function(k) {
        if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
            Object.defineProperty(to, k, {
                enumerable: true,
                get: function() {
                    return from[k];
                }
            });
        }
    });
    return from;
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const mockVisitorLocation = (overrides = {})=>({
        id: 'loc_123',
        city: 'Lagos',
        country: 'Nigeria',
        visitors: 42,
        latitude: 6.5244,
        longitude: 3.3792,
        ...overrides
    });
const mockVisitorJourney = (overrides = {})=>({
        id: 'journey_123',
        visitorId: 'visitor_123',
        sessionId: 'session_123',
        startTime: '2024-07-18T10:00:00Z',
        endTime: '2024-07-18T10:30:00Z',
        totalPages: 5,
        engagementScore: 85,
        conversionEvents: [],
        pulseData: [
            {
                id: 'pulse_1',
                timestamp: '2024-07-18T10:00:00Z',
                type: 'PAGE_VIEW',
                value: 120,
                metadata: {
                    page: '/',
                    device: 'desktop'
                }
            }
        ],
        ...overrides
    });
const mockCustomerJourney = (overrides = {})=>({
        visitorId: 'visitor_123',
        sessionId: 'session_123',
        startTime: '2024-07-18T10:00:00Z',
        endTime: '2024-07-18T10:30:00Z',
        totalDuration: 1800,
        outcome: 'converted',
        value: 299,
        engagementScore: 85,
        steps: [
            {
                id: 'step_1',
                timestamp: '2024-07-18T10:00:00Z',
                action: 'Landing Page Visit',
                page: '/',
                duration: 120,
                type: 'page_view',
                metadata: {
                    device: 'desktop',
                    location: 'Lagos, Nigeria',
                    engagement: 85
                }
            }
        ],
        ...overrides
    });
const mockAnalyticsOverview = (overrides = {})=>({
        activeVisitors: 23,
        totalVisitors: 1547,
        bounceRate: 32,
        averageSessionDuration: 245,
        conversionRate: 4.2,
        engagementScore: 78,
        topPages: [
            '/features',
            '/pricing',
            '/'
        ],
        topSources: [
            'direct',
            'google',
            'social'
        ],
        ...overrides
    });
// Custom render function with providers
const AllTheProviders = ({ children })=>{
    const queryClient = new _reactquery.QueryClient({
        defaultOptions: {
            queries: {
                retry: false
            }
        }
    });
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactquery.QueryClientProvider, {
        client: queryClient,
        children: children
    });
};
const customRender = (ui, options)=>(0, _react1.render)(ui, {
        wrapper: AllTheProviders,
        ...options
    });
const measureComponentPerformance = async (componentRender, name)=>{
    const startTime = performance.now();
    await componentRender();
    const endTime = performance.now();
    const duration = endTime - startTime;
    console.log(`${name} render time: ${duration.toFixed(2)}ms`);
    // Assert performance thresholds
    expect(duration).toBeLessThan(100); // Components should render in < 100ms
    return duration;
};
const checkAccessibility = async (container)=>{
    // Check for basic accessibility attributes
    const interactiveElements = container.querySelectorAll('button, a, input, select, textarea, [tabindex]');
    interactiveElements.forEach((element)=>{
        // Check for accessible names
        const hasAccessibleName = element.getAttribute('aria-label') || element.getAttribute('aria-labelledby') || element.textContent?.trim() || element.placeholder;
        if (!hasAccessibleName) {
            console.warn('Interactive element missing accessible name:', element);
        }
    });
    // Check for proper heading hierarchy
    const headings = container.querySelectorAll('h1, h2, h3, h4, h5, h6');
    let previousLevel = 0;
    headings.forEach((heading)=>{
        const level = parseInt(heading.tagName.charAt(1));
        if (level > previousLevel + 1) {
            console.warn('Heading hierarchy skipped level:', heading);
        }
        previousLevel = level;
    });
};
const createMockHook = (defaultValue)=>{
    let mockReturnValue = defaultValue;
    const mockHook = jest.fn(()=>mockReturnValue);
    mockHook.mockReturnValue = (value)=>{
        mockReturnValue = value;
    };
    return mockHook;
};
const waitForComponentToStabilize = async (timeout = 1000)=>{
    return new Promise((resolve)=>setTimeout(resolve, timeout));
};
const createMockMCPData = ()=>({
        visitorLocations: [
            mockVisitorLocation({
                city: 'Lagos',
                visitors: 45
            }),
            mockVisitorLocation({
                city: 'Abuja',
                visitors: 32
            }),
            mockVisitorLocation({
                city: 'Kano',
                visitors: 28
            })
        ],
        visitorJourneys: [
            mockVisitorJourney({
                engagementScore: 92
            }),
            mockVisitorJourney({
                engagementScore: 76
            }),
            mockVisitorJourney({
                engagementScore: 84
            })
        ],
        insights: [
            {
                id: '1',
                type: 'engagement',
                message: 'High engagement detected'
            },
            {
                id: '2',
                type: 'conversion',
                message: 'Conversion rate improved'
            }
        ],
        segments: [
            {
                id: '1',
                name: 'High Value Visitors',
                count: 234
            },
            {
                id: '2',
                name: 'New Visitors',
                count: 567
            }
        ],
        analyticsOverview: mockAnalyticsOverview(),
        isLoading: false,
        error: null,
        dataSource: 'mcp',
        mcpEnabled: true,
        mcpConnected: true
    });
const PERFORMANCE_THRESHOLDS = {
    COMPONENT_RENDER: 100,
    DATA_FETCH: 500,
    INTERACTION_RESPONSE: 50,
    ANIMATION_FRAME: 16.67
};
const TEST_CONSTANTS = {
    MOCK_SESSION_ID: 'test_session_123',
    MOCK_VISITOR_ID: 'test_visitor_456',
    MOCK_TIMESTAMP: '2024-07-18T10:00:00Z',
    MOCK_LOCATIONS: [
        'Lagos, Nigeria',
        'Abuja, Nigeria',
        'Kano, Nigeria'
    ],
    MOCK_DEVICES: [
        'desktop',
        'mobile',
        'tablet'
    ]
};

//# sourceMappingURL=data:application/json;base64,