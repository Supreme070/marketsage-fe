e2c6ec3e9f0284ba9c69261fbfd21bd7
/**
 * LeadPulse MCP Server for MarketSage
 * 
 * This server provides read-only access to visitor intelligence data,
 * behavioral analytics, and conversion tracking through the MCP protocol.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "LeadPulseMCPServer", {
    enumerable: true,
    get: function() {
        return LeadPulseMCPServer;
    }
});
const _basemcpserver = require("./base-mcp-server");
const _mcptypes = require("../types/mcp-types");
const _prisma = require("../../lib/db/prisma");
const _mcpconfig = require("../config/mcp-config");
class LeadPulseMCPServer extends _basemcpserver.BaseMCPServer {
    constructor(config){
        super({
            ..._mcpconfig.defaultMCPConfig.servers.leadpulse,
            ...config
        });
    }
    /**
   * List available LeadPulse resources
   */ async listResources(authContext) {
        const resources = [
            {
                uri: "leadpulse://visitors",
                name: "Visitor Data",
                description: "Access to visitor sessions and behavioral data",
                mimeType: "application/json"
            },
            {
                uri: "leadpulse://sessions",
                name: "Session Data",
                description: "Access to detailed visitor session information",
                mimeType: "application/json"
            },
            {
                uri: "leadpulse://heatmaps",
                name: "Heatmap Data",
                description: "Access to page heatmap and interaction data",
                mimeType: "application/json"
            },
            {
                uri: "leadpulse://journeys",
                name: "Customer Journeys",
                description: "Access to customer journey and conversion paths",
                mimeType: "application/json"
            },
            {
                uri: "leadpulse://conversions",
                name: "Conversion Data",
                description: "Access to conversion events and funnel analytics",
                mimeType: "application/json"
            },
            {
                uri: "leadpulse://analytics",
                name: "Behavioral Analytics",
                description: "Access to visitor behavior analytics and insights",
                mimeType: "application/json"
            }
        ];
        // Filter resources based on permissions
        if (!authContext.permissions.includes('*') && !authContext.permissions.includes('read:org')) {
            // Users can only access basic visitor data
            return resources.filter((r)=>r.uri.includes('visitors') || r.uri.includes('sessions'));
        }
        return resources;
    }
    /**
   * Read LeadPulse resource
   */ async readResource(uri, authContext) {
        const url = new URL(uri);
        const path = url.pathname;
        const searchParams = url.searchParams;
        // Parse query parameters
        const queryParams = Object.fromEntries(searchParams.entries());
        const validatedQuery = _mcptypes.LeadPulseQuerySchema.parse({
            ...queryParams,
            organizationId: authContext.organizationId,
            limit: queryParams.limit ? Number.parseInt(queryParams.limit) : 10,
            offset: queryParams.offset ? Number.parseInt(queryParams.offset) : 0,
            includeHeatmap: queryParams.includeHeatmap === 'true',
            includeJourney: queryParams.includeJourney === 'true'
        });
        switch(path){
            case '/visitors':
                return await this.getVisitorData(validatedQuery, authContext);
            case '/sessions':
                return await this.getSessionData(validatedQuery, authContext);
            case '/heatmaps':
                return await this.getHeatmapData(validatedQuery, authContext);
            case '/journeys':
                return await this.getJourneyData(validatedQuery, authContext);
            case '/conversions':
                return await this.getConversionData(validatedQuery, authContext);
            case '/analytics':
                return await this.getAnalyticsData(validatedQuery, authContext);
            default:
                throw new _mcptypes.MCPValidationError(`Unknown resource path: ${path}`);
        }
    }
    /**
   * List available LeadPulse tools
   */ async listTools(authContext) {
        const tools = [
            {
                name: "track_visitor",
                description: "Get visitor tracking information and behavior",
                inputSchema: {
                    type: "object",
                    properties: {
                        visitorId: {
                            type: "string",
                            description: "Visitor ID to track"
                        },
                        includeJourney: {
                            type: "boolean",
                            description: "Include customer journey data",
                            default: true
                        },
                        includeHeatmap: {
                            type: "boolean",
                            description: "Include heatmap interaction data",
                            default: false
                        }
                    },
                    required: [
                        "visitorId"
                    ]
                }
            },
            {
                name: "analyze_visitor_behavior",
                description: "Analyze visitor behavior patterns and generate insights",
                inputSchema: {
                    type: "object",
                    properties: {
                        visitorId: {
                            type: "string",
                            description: "Visitor ID to analyze"
                        },
                        sessionId: {
                            type: "string",
                            description: "Specific session ID (optional)"
                        },
                        timeRange: {
                            type: "string",
                            enum: [
                                "1h",
                                "1d",
                                "7d",
                                "30d"
                            ],
                            description: "Time range for analysis",
                            default: "7d"
                        }
                    },
                    required: [
                        "visitorId"
                    ]
                }
            },
            {
                name: "get_conversion_funnel",
                description: "Get conversion funnel data and drop-off points",
                inputSchema: {
                    type: "object",
                    properties: {
                        funnelId: {
                            type: "string",
                            description: "Funnel ID (optional for default funnel)"
                        },
                        dateRange: {
                            type: "string",
                            enum: [
                                "7d",
                                "30d",
                                "90d"
                            ],
                            description: "Date range for funnel analysis",
                            default: "30d"
                        },
                        includeSegments: {
                            type: "boolean",
                            description: "Include segment-based funnel analysis",
                            default: false
                        }
                    }
                }
            },
            {
                name: "get_page_analytics",
                description: "Get page-level analytics and performance metrics",
                inputSchema: {
                    type: "object",
                    properties: {
                        pageUrl: {
                            type: "string",
                            description: "Page URL to analyze"
                        },
                        includeHeatmap: {
                            type: "boolean",
                            description: "Include heatmap data",
                            default: true
                        },
                        dateRange: {
                            type: "string",
                            enum: [
                                "1d",
                                "7d",
                                "30d"
                            ],
                            description: "Date range for analysis",
                            default: "7d"
                        }
                    },
                    required: [
                        "pageUrl"
                    ]
                }
            },
            {
                name: "get_real_time_visitors",
                description: "Get current active visitors and their activities",
                inputSchema: {
                    type: "object",
                    properties: {
                        includeLocation: {
                            type: "boolean",
                            description: "Include geographic location data",
                            default: true
                        },
                        includeDevice: {
                            type: "boolean",
                            description: "Include device and browser information",
                            default: true
                        }
                    }
                }
            },
            {
                name: "identify_high_intent_visitors",
                description: "Identify visitors with high purchase/conversion intent",
                inputSchema: {
                    type: "object",
                    properties: {
                        threshold: {
                            type: "number",
                            description: "Intent score threshold (0-100)",
                            minimum: 0,
                            maximum: 100,
                            default: 70
                        },
                        limit: {
                            type: "number",
                            description: "Maximum number of visitors to return",
                            minimum: 1,
                            maximum: 100,
                            default: 20
                        }
                    }
                }
            }
        ];
        // Filter tools based on permissions
        if (!authContext.permissions.includes('*') && !authContext.permissions.includes('read:org')) {
            // Regular users get limited tools
            return tools.filter((t)=>[
                    'track_visitor',
                    'analyze_visitor_behavior',
                    'get_real_time_visitors'
                ].includes(t.name));
        }
        return tools;
    }
    /**
   * Execute LeadPulse tools
   */ async callTool(name, args, authContext) {
        switch(name){
            case 'track_visitor':
                return await this.trackVisitor(args, authContext);
            case 'analyze_visitor_behavior':
                return await this.analyzeVisitorBehavior(args, authContext);
            case 'get_conversion_funnel':
                return await this.getConversionFunnel(args, authContext);
            case 'get_page_analytics':
                return await this.getPageAnalytics(args, authContext);
            case 'get_real_time_visitors':
                return await this.getRealTimeVisitors(args, authContext);
            case 'identify_high_intent_visitors':
                return await this.identifyHighIntentVisitors(args, authContext);
            default:
                throw new _mcptypes.MCPValidationError(`Unknown tool: ${name}`);
        }
    }
    /**
   * Get visitor data with real MCPVisitorSessions queries
   */ async getVisitorData(query, authContext) {
        try {
            const startTime = Date.now();
            // Build where clause for visitor sessions
            const whereClause = {
                organizationId: authContext.organizationId
            };
            if (query.visitorId) {
                whereClause.visitorId = query.visitorId;
            }
            if (query.dateFrom || query.dateTo) {
                whereClause.sessionStart = {};
                if (query.dateFrom) {
                    whereClause.sessionStart.gte = new Date(query.dateFrom);
                }
                if (query.dateTo) {
                    whereClause.sessionStart.lte = new Date(query.dateTo);
                }
            }
            // Get real visitor sessions from MCP table
            const visitorSessions = await _prisma.prisma.mCPVisitorSessions.findMany({
                where: whereClause,
                take: query.limit,
                skip: query.offset,
                include: {
                    organization: {
                        select: {
                            id: true,
                            name: true
                        }
                    }
                },
                orderBy: {
                    sessionStart: 'desc'
                }
            });
            // Transform sessions to visitor format
            const visitors = visitorSessions.map((session)=>({
                    id: session.visitorId,
                    sessionId: session.sessionId,
                    organizationId: session.organizationId,
                    startTime: session.sessionStart.toISOString(),
                    endTime: session.sessionEnd.toISOString(),
                    pageViews: session.pageViews,
                    duration: session.duration,
                    bounce: session.bounceRate > 0.5,
                    converted: session.conversionValue > 0,
                    intentScore: session.intentScore,
                    geoLocation: {
                        country: session.country,
                        city: session.city,
                        region: session.region
                    },
                    device: {
                        type: session.deviceType,
                        browser: session.browser,
                        os: session.operatingSystem
                    },
                    traffic: {
                        source: session.source,
                        medium: session.medium,
                        campaign: session.campaign,
                        referrer: session.referrer
                    },
                    engagement: {
                        scrollDepth: session.scrollDepth,
                        timeOnPage: session.avgTimeOnPage,
                        interactions: session.interactions,
                        exitPage: session.exitPage
                    },
                    insights: session.insights ? JSON.parse(session.insights) : []
                }));
            // Calculate summary statistics
            const totalSessions = visitors.length;
            const totalPageViews = visitors.reduce((sum, v)=>sum + v.pageViews, 0);
            const avgDuration = totalSessions > 0 ? visitors.reduce((sum, v)=>sum + v.duration, 0) / totalSessions : 0;
            const bounceRate = totalSessions > 0 ? visitors.filter((v)=>v.bounce).length / totalSessions : 0;
            const conversionRate = totalSessions > 0 ? visitors.filter((v)=>v.converted).length / totalSessions : 0;
            const avgIntentScore = totalSessions > 0 ? visitors.reduce((sum, v)=>sum + v.intentScore, 0) / totalSessions : 0;
            // Device and location distribution
            const deviceDistribution = visitors.reduce((acc, v)=>{
                acc[v.device.type] = (acc[v.device.type] || 0) + 1;
                return acc;
            }, {});
            const countryDistribution = visitors.reduce((acc, v)=>{
                acc[v.geoLocation.country] = (acc[v.geoLocation.country] || 0) + 1;
                return acc;
            }, {});
            const duration = Date.now() - startTime;
            // Log resource access
            await this.logMCPResourceAccess(authContext, 'leadpulse://visitors', 'LIST', 'success', {
                duration,
                dataSize: visitors.length
            });
            return {
                uri: "leadpulse://visitors",
                mimeType: "application/json",
                text: JSON.stringify({
                    visitors,
                    summary: {
                        totalSessions,
                        totalPageViews,
                        averageDuration: Math.round(avgDuration),
                        bounceRate: Math.round(bounceRate * 100 * 100) / 100,
                        conversionRate: Math.round(conversionRate * 100 * 100) / 100,
                        avgIntentScore: Math.round(avgIntentScore * 100) / 100,
                        deviceDistribution,
                        countryDistribution
                    },
                    meta: {
                        query: {
                            limit: query.limit,
                            offset: query.offset,
                            organizationId: authContext.organizationId
                        },
                        total: visitors.length,
                        timestamp: new Date().toISOString(),
                        duration,
                        source: 'MCP_VISITOR_SESSIONS'
                    }
                })
            };
        } catch (error) {
            // Log failed access
            await this.logMCPResourceAccess(authContext, 'leadpulse://visitors', 'LIST', 'failure', {
                errorMessage: error instanceof Error ? error.message : 'Unknown error'
            });
            return await this.createFallbackResponse(()=>this.getVisitorDataFallback(query, authContext), 'Failed to retrieve visitor data via MCP');
        }
    }
    /**
   * Track visitor tool with real data
   */ async trackVisitor(args, authContext) {
        const { visitorId, includeJourney = true, includeHeatmap = false } = args;
        const startTime = Date.now();
        try {
            // Log tool execution
            await this.logMCPToolExecution(authContext, 'track_visitor', args, 'success', {
                duration: 0,
                riskLevel: 'low'
            });
            // Get visitor sessions from MCP table
            const visitorSessions = await _prisma.prisma.mCPVisitorSessions.findMany({
                where: {
                    visitorId,
                    organizationId: authContext.organizationId
                },
                include: {
                    organization: {
                        select: {
                            id: true,
                            name: true
                        }
                    }
                },
                orderBy: {
                    sessionStart: 'desc'
                },
                take: 10 // Last 10 sessions for analysis
            });
            if (visitorSessions.length === 0) {
                const duration = Date.now() - startTime;
                await this.logMCPToolExecution(authContext, 'track_visitor', args, 'failure', {
                    duration,
                    errorMessage: 'Visitor not found',
                    riskLevel: 'low'
                });
                return {
                    content: [
                        {
                            type: "text",
                            text: JSON.stringify({
                                success: false,
                                error: "Visitor not found",
                                visitorId
                            })
                        }
                    ],
                    isError: true
                };
            }
            // Get current (most recent) session
            const currentSession = visitorSessions[0];
            // Calculate visitor profile from all sessions
            const totalSessions = visitorSessions.length;
            const totalPageViews = visitorSessions.reduce((sum, s)=>sum + s.pageViews, 0);
            const avgSessionDuration = visitorSessions.reduce((sum, s)=>sum + s.duration, 0) / totalSessions;
            const totalConversions = visitorSessions.filter((s)=>s.conversionValue > 0).length;
            const avgIntentScore = visitorSessions.reduce((sum, s)=>sum + s.intentScore, 0) / totalSessions;
            // Determine if returning visitor
            const isReturning = totalSessions > 1;
            const firstSessionDate = visitorSessions[visitorSessions.length - 1].sessionStart;
            const lastSessionDate = visitorSessions[0].sessionStart;
            // Build visitor profile
            const visitorData = {
                id: visitorId,
                currentSession: {
                    sessionId: currentSession.sessionId,
                    startTime: currentSession.sessionStart.toISOString(),
                    endTime: currentSession.sessionEnd.toISOString(),
                    currentPage: currentSession.exitPage || currentSession.landingPage,
                    pageViews: currentSession.pageViews,
                    duration: currentSession.duration,
                    interactions: currentSession.interactions,
                    intentScore: currentSession.intentScore,
                    scrollDepth: currentSession.scrollDepth,
                    bounced: currentSession.bounceRate > 0.5,
                    converted: currentSession.conversionValue > 0,
                    conversionValue: currentSession.conversionValue
                },
                profile: {
                    isReturning,
                    totalSessions,
                    totalPageViews,
                    totalConversions,
                    averageSessionDuration: Math.round(avgSessionDuration),
                    averageIntentScore: Math.round(avgIntentScore * 100) / 100,
                    firstSeen: firstSessionDate.toISOString(),
                    lastSeen: lastSessionDate.toISOString(),
                    daysSinceFirstVisit: Math.floor((Date.now() - firstSessionDate.getTime()) / (1000 * 60 * 60 * 24))
                },
                geoLocation: {
                    country: currentSession.country,
                    city: currentSession.city,
                    region: currentSession.region,
                    timezone: this.getTimezoneFromCountry(currentSession.country)
                },
                device: {
                    type: currentSession.deviceType,
                    browser: currentSession.browser,
                    os: currentSession.operatingSystem
                },
                trafficSource: {
                    source: currentSession.source,
                    medium: currentSession.medium,
                    campaign: currentSession.campaign,
                    referrer: currentSession.referrer
                },
                behavioral: {
                    avgTimeOnPage: currentSession.avgTimeOnPage,
                    bounceRate: this.calculateVisitorBounceRate(visitorSessions),
                    conversionRate: totalConversions / totalSessions * 100,
                    engagementScore: this.calculateEngagementScore(visitorSessions)
                }
            };
            // Add journey data if requested
            if (includeJourney) {
                visitorData.journey = this.buildVisitorJourney(visitorSessions);
            }
            // Add insights
            visitorData.insights = this.generateVisitorInsights(visitorData, visitorSessions);
            const duration = Date.now() - startTime;
            // Log successful tool execution
            await this.logMCPToolExecution(authContext, 'track_visitor', args, 'success', {
                duration,
                outputSize: 1,
                riskLevel: includeJourney ? 'medium' : 'low'
            });
            return {
                content: [
                    {
                        type: "text",
                        text: JSON.stringify({
                            success: true,
                            data: visitorData,
                            meta: {
                                includeJourney,
                                includeHeatmap,
                                timestamp: new Date().toISOString(),
                                duration,
                                source: 'MCP_VISITOR_SESSIONS'
                            }
                        })
                    }
                ]
            };
        } catch (error) {
            const duration = Date.now() - startTime;
            // Log failed tool execution
            await this.logMCPToolExecution(authContext, 'track_visitor', args, 'failure', {
                duration,
                errorMessage: error instanceof Error ? error.message : 'Unknown error',
                riskLevel: 'medium'
            });
            return {
                content: [
                    {
                        type: "text",
                        text: JSON.stringify({
                            success: false,
                            error: "Failed to track visitor",
                            details: error instanceof Error ? error.message : 'Unknown error'
                        })
                    }
                ],
                isError: true
            };
        }
    }
    /**
   * Analyze visitor behavior tool
   */ async analyzeVisitorBehavior(args, authContext) {
        const { visitorId, sessionId, timeRange = '7d' } = args;
        try {
            // Placeholder behavior analysis
            const behaviorAnalysis = {
                visitorId,
                sessionId,
                timeRange,
                behaviorPattern: {
                    pageViewsPerSession: 6.5,
                    averageSessionDuration: 420,
                    bounceRate: 0.15,
                    conversionRate: 0.08,
                    engagementScore: 78
                },
                interests: [
                    {
                        category: 'Premium Services',
                        score: 92
                    },
                    {
                        category: 'Analytics',
                        score: 78
                    },
                    {
                        category: 'Automation',
                        score: 65
                    }
                ],
                actions: {
                    totalClicks: 45,
                    formSubmissions: 2,
                    downloadRequests: 1,
                    socialShares: 0
                },
                predictions: {
                    likelihoodToConvert: 0.74,
                    timeToConversion: '2-3 days',
                    preferredChannel: 'email',
                    nextBestAction: 'Send targeted premium service offer'
                },
                insights: [
                    "Visitor shows high engagement with premium content",
                    "Multiple return sessions indicate strong interest",
                    "Behavior pattern suggests readiness to purchase",
                    "Recommended: Send personalized offer within 24 hours"
                ]
            };
            return {
                content: [
                    {
                        type: "text",
                        text: JSON.stringify({
                            success: true,
                            data: behaviorAnalysis,
                            meta: {
                                timeRange,
                                analysisType: 'behavioral',
                                timestamp: new Date().toISOString(),
                                fallbackUsed: true
                            }
                        })
                    }
                ]
            };
        } catch (error) {
            return {
                content: [
                    {
                        type: "text",
                        text: JSON.stringify({
                            success: false,
                            error: "Failed to analyze visitor behavior",
                            details: error instanceof Error ? error.message : 'Unknown error'
                        })
                    }
                ],
                isError: true
            };
        }
    }
    /**
   * Get conversion funnel tool
   */ async getConversionFunnel(args, authContext) {
        const { funnelId, dateRange = '30d', includeSegments = false } = args;
        const startTime = Date.now();
        try {
            // Calculate date range
            const daysBack = this.parseDateRange(dateRange);
            const startDate = new Date(Date.now() - daysBack * 24 * 60 * 60 * 1000);
            // Get visitor sessions data for funnel analysis
            const sessions = await _prisma.prisma.mCPVisitorSessions.findMany({
                where: {
                    organizationId: authContext.organizationId,
                    sessionStart: {
                        gte: startDate
                    }
                },
                orderBy: {
                    sessionStart: 'asc'
                }
            });
            // Define funnel steps based on common customer journey
            const funnelSteps = [
                {
                    name: 'Landing Page Visit',
                    pagePattern: '/'
                },
                {
                    name: 'Product/Service View',
                    pagePattern: '/features|/products|/services'
                },
                {
                    name: 'Pricing Page View',
                    pagePattern: '/pricing'
                },
                {
                    name: 'Contact/Demo Request',
                    pagePattern: '/contact|/demo|/signup'
                },
                {
                    name: 'Conversion',
                    conversionRequired: true
                }
            ];
            // Analyze visitor progression through funnel
            const funnelData = this.analyzeFunnelProgression(sessions, funnelSteps);
            // Add segment analysis if requested
            let segmentData = undefined;
            if (includeSegments) {
                segmentData = await this.analyzeFunnelBySegments(sessions, funnelSteps, authContext);
            }
            // Generate insights based on real data
            const insights = this.generateFunnelInsights(funnelData.steps, segmentData);
            const duration = Date.now() - startTime;
            // Log tool execution
            await this.logMCPToolExecution(authContext, 'get_conversion_funnel', args, 'success', {
                duration,
                outputSize: funnelData.steps.length,
                riskLevel: 'low'
            });
            const result = {
                funnelId: funnelId || 'organization-funnel',
                dateRange,
                totalSessions: sessions.length,
                timeframe: {
                    startDate: startDate.toISOString(),
                    endDate: new Date().toISOString(),
                    daysAnalyzed: daysBack
                },
                steps: funnelData.steps,
                overallConversion: funnelData.overallConversion,
                totalRevenue: funnelData.totalRevenue,
                averageOrderValue: funnelData.averageOrderValue,
                segments: segmentData,
                insights,
                performance: {
                    bestPerformingStep: funnelData.bestStep,
                    worstPerformingStep: funnelData.worstStep,
                    biggestDropOff: funnelData.biggestDropOff
                }
            };
            return {
                content: [
                    {
                        type: "text",
                        text: JSON.stringify({
                            success: true,
                            data: result,
                            meta: {
                                dateRange,
                                includeSegments,
                                timestamp: new Date().toISOString(),
                                duration,
                                source: 'MCP_VISITOR_SESSIONS'
                            }
                        })
                    }
                ]
            };
        } catch (error) {
            return {
                content: [
                    {
                        type: "text",
                        text: JSON.stringify({
                            success: false,
                            error: "Failed to get conversion funnel",
                            details: error instanceof Error ? error.message : 'Unknown error'
                        })
                    }
                ],
                isError: true
            };
        }
    }
    /**
   * Get page analytics tool
   */ async getPageAnalytics(args, authContext) {
        const { pageUrl, includeHeatmap = true, dateRange = '7d' } = args;
        try {
            // Placeholder page analytics
            const pageAnalytics = {
                pageUrl,
                dateRange,
                metrics: {
                    pageViews: 2500,
                    uniqueVisitors: 1800,
                    averageTimeOnPage: 180,
                    bounceRate: 0.35,
                    exitRate: 0.42,
                    scrollDepth: 0.68,
                    clickThroughRate: 0.15
                },
                heatmapData: includeHeatmap ? {
                    clickMap: {
                        headerNav: 45,
                        primaryCTA: 120,
                        secondaryCTA: 67,
                        footer: 23
                    },
                    scrollMap: {
                        '0-25%': 100,
                        '25-50%': 85,
                        '50-75%': 68,
                        '75-100%': 42
                    },
                    attentionMap: {
                        hero: 8.5,
                        features: 6.2,
                        pricing: 7.8,
                        testimonials: 4.1
                    }
                } : undefined,
                insights: [
                    "Primary CTA has good engagement (120 clicks)",
                    "Users tend to drop off at 50% scroll depth",
                    "Pricing section gets high attention (7.8 seconds average)",
                    "Consider moving testimonials higher up the page"
                ]
            };
            return {
                content: [
                    {
                        type: "text",
                        text: JSON.stringify({
                            success: true,
                            data: pageAnalytics,
                            meta: {
                                pageUrl,
                                dateRange,
                                includeHeatmap,
                                timestamp: new Date().toISOString(),
                                fallbackUsed: true
                            }
                        })
                    }
                ]
            };
        } catch (error) {
            return {
                content: [
                    {
                        type: "text",
                        text: JSON.stringify({
                            success: false,
                            error: "Failed to get page analytics",
                            details: error instanceof Error ? error.message : 'Unknown error'
                        })
                    }
                ],
                isError: true
            };
        }
    }
    /**
   * Get real-time visitors tool with actual visitor session data
   */ async getRealTimeVisitors(args, authContext) {
        const { includeLocation = true, includeDevice = true } = args;
        const startTime = Date.now();
        try {
            // Log tool execution
            await this.logMCPToolExecution(authContext, 'get_real_time_visitors', args, 'success', {
                duration: 0,
                riskLevel: 'low'
            });
            // Define "real-time" as sessions that are still active (within last 30 minutes)
            const thirtyMinutesAgo = new Date(Date.now() - 30 * 60 * 1000);
            const now = new Date();
            // Get currently active visitor sessions
            const activeSessions = await _prisma.prisma.mCPVisitorSessions.findMany({
                where: {
                    organizationId: authContext.organizationId,
                    sessionStart: {
                        gte: thirtyMinutesAgo
                    },
                    sessionEnd: {
                        gte: thirtyMinutesAgo // Sessions that ended recently or are still ongoing
                    }
                },
                include: {
                    organization: {
                        select: {
                            id: true,
                            name: true
                        }
                    }
                },
                orderBy: {
                    sessionStart: 'desc'
                },
                take: 50 // Limit for performance
            });
            // Calculate current visitor count (unique visitors in last 30 minutes)
            const uniqueVisitors = new Set(activeSessions.map((s)=>s.visitorId));
            const currentVisitors = uniqueVisitors.size;
            // Calculate active pages by grouping current page views
            const pageActivity = activeSessions.reduce((acc, session)=>{
                const currentPage = session.exitPage || session.landingPage || '/';
                acc[currentPage] = (acc[currentPage] || 0) + 1;
                return acc;
            }, {});
            const activePages = Object.entries(pageActivity).map(([page, visitors])=>({
                    page,
                    visitors
                })).sort((a, b)=>b.visitors - a.visitors).slice(0, 10); // Top 10 pages
            // Transform visitor data
            const visitors = activeSessions.slice(0, 20).map((session)=>{
                const sessionDurationMs = session.sessionEnd.getTime() - session.sessionStart.getTime();
                const timeOnCurrentPage = Math.max(0, (now.getTime() - session.sessionStart.getTime()) / 1000);
                return {
                    id: session.visitorId,
                    sessionId: session.sessionId,
                    currentPage: session.exitPage || session.landingPage,
                    timeOnPage: Math.round(timeOnCurrentPage),
                    sessionDuration: Math.round(sessionDurationMs / 1000),
                    pageViews: session.pageViews,
                    interactions: session.interactions,
                    intentScore: session.intentScore,
                    scrollDepth: session.scrollDepth,
                    isReturning: this.isReturningVisitor(session.visitorId, activeSessions),
                    isConverted: session.conversionValue > 0,
                    trafficSource: {
                        source: session.source,
                        medium: session.medium,
                        campaign: session.campaign
                    },
                    location: includeLocation ? {
                        country: session.country,
                        city: session.city,
                        region: session.region
                    } : undefined,
                    device: includeDevice ? {
                        type: session.deviceType,
                        browser: session.browser,
                        os: session.operatingSystem
                    } : undefined
                };
            });
            // Calculate real-time insights
            const insights = this.generateRealTimeInsights(activeSessions, visitors, currentVisitors);
            // Calculate traffic trends (compare with previous 30 minutes)
            const previousPeriodStart = new Date(thirtyMinutesAgo.getTime() - 30 * 60 * 1000);
            const previousSessions = await _prisma.prisma.mCPVisitorSessions.count({
                where: {
                    organizationId: authContext.organizationId,
                    sessionStart: {
                        gte: previousPeriodStart,
                        lt: thirtyMinutesAgo
                    }
                }
            });
            const trafficChange = previousSessions > 0 ? (currentVisitors - previousSessions) / previousSessions * 100 : 0;
            // Device and location statistics
            const deviceStats = includeDevice ? this.calculateDeviceStats(visitors) : undefined;
            const locationStats = includeLocation ? this.calculateLocationStats(visitors) : undefined;
            const duration = Date.now() - startTime;
            // Log successful tool execution
            await this.logMCPToolExecution(authContext, 'get_real_time_visitors', args, 'success', {
                duration,
                outputSize: visitors.length,
                riskLevel: 'low'
            });
            const realTimeData = {
                currentVisitors,
                trafficTrend: {
                    change: Math.round(trafficChange * 100) / 100,
                    direction: trafficChange > 0 ? 'increasing' : trafficChange < 0 ? 'decreasing' : 'stable',
                    previousPeriodVisitors: previousSessions
                },
                activePages,
                visitors,
                deviceStats,
                locationStats,
                insights,
                sessionStats: {
                    totalActiveSessions: activeSessions.length,
                    avgSessionDuration: activeSessions.length > 0 ? Math.round(activeSessions.reduce((sum, s)=>sum + s.duration, 0) / activeSessions.length) : 0,
                    avgPageViews: activeSessions.length > 0 ? Math.round(activeSessions.reduce((sum, s)=>sum + s.pageViews, 0) / activeSessions.length * 100) / 100 : 0,
                    avgIntentScore: activeSessions.length > 0 ? Math.round(activeSessions.reduce((sum, s)=>sum + s.intentScore, 0) / activeSessions.length * 100) / 100 : 0,
                    conversionRate: activeSessions.length > 0 ? Math.round(activeSessions.filter((s)=>s.conversionValue > 0).length / activeSessions.length * 100 * 100) / 100 : 0
                }
            };
            return {
                content: [
                    {
                        type: "text",
                        text: JSON.stringify({
                            success: true,
                            data: realTimeData,
                            meta: {
                                includeLocation,
                                includeDevice,
                                timestamp: new Date().toISOString(),
                                duration,
                                timeWindow: '30 minutes',
                                source: 'MCP_VISITOR_SESSIONS'
                            }
                        })
                    }
                ]
            };
        } catch (error) {
            const duration = Date.now() - startTime;
            // Log failed tool execution
            await this.logMCPToolExecution(authContext, 'get_real_time_visitors', args, 'failure', {
                duration,
                errorMessage: error instanceof Error ? error.message : 'Unknown error',
                riskLevel: 'medium'
            });
            return {
                content: [
                    {
                        type: "text",
                        text: JSON.stringify({
                            success: false,
                            error: "Failed to get real-time visitors",
                            details: error instanceof Error ? error.message : 'Unknown error'
                        })
                    }
                ],
                isError: true
            };
        }
    }
    /**
   * Identify high intent visitors tool with real data
   */ async identifyHighIntentVisitors(args, authContext) {
        const { threshold = 70, limit = 20 } = args;
        const startTime = Date.now();
        try {
            // Log tool execution
            await this.logMCPToolExecution(authContext, 'identify_high_intent_visitors', args, 'success', {
                duration: 0,
                riskLevel: 'low'
            });
            // Get high intent visitors from real session data
            const highIntentSessions = await _prisma.prisma.mCPVisitorSessions.findMany({
                where: {
                    organizationId: authContext.organizationId,
                    intentScore: {
                        gte: threshold
                    },
                    sessionStart: {
                        gte: new Date(Date.now() - 24 * 60 * 60 * 1000) // Last 24 hours
                    }
                },
                include: {
                    organization: {
                        select: {
                            id: true,
                            name: true
                        }
                    }
                },
                orderBy: {
                    intentScore: 'desc'
                },
                take: limit
            });
            // Transform to high intent visitor format
            const highIntentVisitors = await Promise.all(highIntentSessions.map(async (session)=>{
                // Get historical sessions for this visitor to determine behavior patterns
                const visitorSessions = await _prisma.prisma.mCPVisitorSessions.findMany({
                    where: {
                        visitorId: session.visitorId,
                        organizationId: authContext.organizationId
                    },
                    orderBy: {
                        sessionStart: 'desc'
                    },
                    take: 10
                });
                // Analyze visitor behavior patterns
                const signals = this.analyzeVisitorSignals(session, visitorSessions);
                const recommendation = this.generateRecommendation(session, signals);
                return {
                    id: session.visitorId,
                    sessionId: session.sessionId,
                    intentScore: session.intentScore,
                    currentPage: session.exitPage || session.landingPage,
                    sessionDuration: session.duration,
                    pageViews: session.pageViews,
                    interactions: session.interactions,
                    scrollDepth: session.scrollDepth,
                    conversionValue: session.conversionValue,
                    signals,
                    profile: {
                        isReturning: visitorSessions.length > 1,
                        totalSessions: visitorSessions.length,
                        totalPageViews: visitorSessions.reduce((sum, s)=>sum + s.pageViews, 0),
                        avgSessionDuration: Math.round(visitorSessions.reduce((sum, s)=>sum + s.duration, 0) / visitorSessions.length),
                        lastSeen: session.sessionStart.toISOString(),
                        location: {
                            country: session.country,
                            city: session.city,
                            region: session.region
                        },
                        device: {
                            type: session.deviceType,
                            browser: session.browser,
                            os: session.operatingSystem
                        }
                    },
                    trafficSource: {
                        source: session.source,
                        medium: session.medium,
                        campaign: session.campaign,
                        referrer: session.referrer
                    },
                    recommendation
                };
            }));
            // Calculate insights
            const totalCount = highIntentVisitors.length;
            const averageIntentScore = totalCount > 0 ? highIntentVisitors.reduce((sum, v)=>sum + v.intentScore, 0) / totalCount : 0;
            const returningVisitors = highIntentVisitors.filter((v)=>v.profile.isReturning).length;
            const convertedVisitors = highIntentVisitors.filter((v)=>v.conversionValue > 0).length;
            const mobileVisitors = highIntentVisitors.filter((v)=>v.profile.device.type === 'mobile').length;
            const insights = [
                `${totalCount} visitors above ${threshold}% intent threshold in last 24 hours`,
                `Average intent score: ${Math.round(averageIntentScore)}%`,
                `${Math.round(returningVisitors / totalCount * 100)}% are returning visitors showing continued interest`,
                `${convertedVisitors} have already converted in their current session`,
                `${Math.round(mobileVisitors / totalCount * 100)}% are browsing on mobile devices`,
                "Recommend immediate personalized outreach for best conversion rates"
            ];
            const duration = Date.now() - startTime;
            // Log successful tool execution
            await this.logMCPToolExecution(authContext, 'identify_high_intent_visitors', args, 'success', {
                duration,
                outputSize: totalCount,
                riskLevel: 'medium' // Higher risk due to visitor identification
            });
            return {
                content: [
                    {
                        type: "text",
                        text: JSON.stringify({
                            success: true,
                            data: {
                                visitors: highIntentVisitors,
                                totalCount,
                                averageIntentScore: Math.round(averageIntentScore * 100) / 100,
                                statistics: {
                                    returningVisitors,
                                    convertedVisitors,
                                    mobileVisitors,
                                    returningPercentage: Math.round(returningVisitors / totalCount * 100),
                                    conversionRate: Math.round(convertedVisitors / totalCount * 100 * 100) / 100,
                                    mobilePercentage: Math.round(mobileVisitors / totalCount * 100)
                                },
                                insights
                            },
                            meta: {
                                threshold,
                                limit,
                                timeRange: '24 hours',
                                timestamp: new Date().toISOString(),
                                duration,
                                source: 'MCP_VISITOR_SESSIONS'
                            }
                        })
                    }
                ]
            };
        } catch (error) {
            const duration = Date.now() - startTime;
            // Log failed tool execution
            await this.logMCPToolExecution(authContext, 'identify_high_intent_visitors', args, 'failure', {
                duration,
                errorMessage: error instanceof Error ? error.message : 'Unknown error',
                riskLevel: 'medium'
            });
            return {
                content: [
                    {
                        type: "text",
                        text: JSON.stringify({
                            success: false,
                            error: "Failed to identify high intent visitors",
                            details: error instanceof Error ? error.message : 'Unknown error'
                        })
                    }
                ],
                isError: true
            };
        }
    }
    /**
   * Fallback methods for LeadPulse data
   */ async getVisitorDataFallback(query, authContext) {
        return {
            visitors: [],
            meta: {
                total: 0,
                offset: query.offset,
                limit: query.limit,
                fallbackUsed: true,
                message: "Visitor data fallback - implementation needed"
            }
        };
    }
    /**
   * Get session data (placeholder)
   */ async getSessionData(query, authContext) {
        return {
            uri: "leadpulse://sessions",
            mimeType: "application/json",
            text: JSON.stringify({
                message: "Session data functionality coming soon",
                fallbackUsed: true
            })
        };
    }
    /**
   * Get heatmap data (placeholder)
   */ async getHeatmapData(query, authContext) {
        return {
            uri: "leadpulse://heatmaps",
            mimeType: "application/json",
            text: JSON.stringify({
                message: "Heatmap data functionality coming soon",
                fallbackUsed: true
            })
        };
    }
    /**
   * Get journey data (placeholder)
   */ async getJourneyData(query, authContext) {
        return {
            uri: "leadpulse://journeys",
            mimeType: "application/json",
            text: JSON.stringify({
                message: "Journey data functionality coming soon",
                fallbackUsed: true
            })
        };
    }
    /**
   * Get conversion data (placeholder)
   */ async getConversionData(query, authContext) {
        return {
            uri: "leadpulse://conversions",
            mimeType: "application/json",
            text: JSON.stringify({
                message: "Conversion data functionality coming soon",
                fallbackUsed: true
            })
        };
    }
    /**
   * Get analytics data (placeholder)
   */ async getAnalyticsData(query, authContext) {
        return {
            uri: "leadpulse://analytics",
            mimeType: "application/json",
            text: JSON.stringify({
                message: "Analytics data functionality coming soon",
                fallbackUsed: true
            })
        };
    }
    /**
   * Helper methods for visitor analysis
   */ /**
   * Get timezone from country code
   */ getTimezoneFromCountry(country) {
        const timezoneMap = {
            'Nigeria': 'Africa/Lagos',
            'Kenya': 'Africa/Nairobi',
            'Ghana': 'Africa/Accra',
            'South Africa': 'Africa/Johannesburg',
            'Egypt': 'Africa/Cairo',
            'Morocco': 'Africa/Casablanca',
            'Tanzania': 'Africa/Dar_es_Salaam',
            'Uganda': 'Africa/Kampala',
            'Rwanda': 'Africa/Kigali',
            'Zambia': 'Africa/Lusaka'
        };
        return timezoneMap[country] || 'UTC';
    }
    /**
   * Calculate visitor bounce rate across sessions
   */ calculateVisitorBounceRate(sessions) {
        if (sessions.length === 0) return 0;
        const bouncedSessions = sessions.filter((s)=>s.bounceRate > 0.5).length;
        return bouncedSessions / sessions.length * 100;
    }
    /**
   * Calculate engagement score based on visitor behavior
   */ calculateEngagementScore(sessions) {
        if (sessions.length === 0) return 0;
        let score = 0;
        const weights = {
            sessionDuration: 0.3,
            pageViews: 0.25,
            interactions: 0.2,
            scrollDepth: 0.15,
            conversions: 0.1
        };
        // Average session duration (normalized to 0-100)
        const avgDuration = sessions.reduce((sum, s)=>sum + s.duration, 0) / sessions.length;
        score += Math.min(avgDuration / 300, 1) * 100 * weights.sessionDuration; // 5 minutes = 100%
        // Average page views per session
        const avgPageViews = sessions.reduce((sum, s)=>sum + s.pageViews, 0) / sessions.length;
        score += Math.min(avgPageViews / 10, 1) * 100 * weights.pageViews; // 10 pages = 100%
        // Average interactions
        const avgInteractions = sessions.reduce((sum, s)=>sum + s.interactions, 0) / sessions.length;
        score += Math.min(avgInteractions / 20, 1) * 100 * weights.interactions; // 20 interactions = 100%
        // Average scroll depth
        const avgScrollDepth = sessions.reduce((sum, s)=>sum + s.scrollDepth, 0) / sessions.length;
        score += avgScrollDepth * 100 * weights.scrollDepth;
        // Conversion bonus
        const conversions = sessions.filter((s)=>s.conversionValue > 0).length;
        score += conversions / sessions.length * 100 * weights.conversions;
        return Math.round(score * 100) / 100;
    }
    /**
   * Build visitor journey from sessions
   */ buildVisitorJourney(sessions) {
        const journey = [];
        sessions.reverse().forEach((session, sessionIndex)=>{
            // Add session start
            journey.push({
                timestamp: session.sessionStart.toISOString(),
                action: 'session_start',
                sessionId: session.sessionId,
                page: session.landingPage,
                source: session.source,
                medium: session.medium,
                campaign: session.campaign
            });
            // Simulate page views based on session data
            const pageViews = Math.max(1, session.pageViews);
            const sessionDuration = session.duration;
            const timePerPage = sessionDuration / pageViews;
            for(let i = 0; i < pageViews; i++){
                const pageTimestamp = new Date(session.sessionStart.getTime() + i * timePerPage * 1000);
                journey.push({
                    timestamp: pageTimestamp.toISOString(),
                    action: 'page_view',
                    page: i === 0 ? session.landingPage : i === pageViews - 1 ? session.exitPage : `/page-${i + 1}`,
                    duration: Math.round(timePerPage),
                    scrollDepth: session.scrollDepth,
                    interactions: Math.round(session.interactions / pageViews)
                });
            }
            // Add conversion event if applicable
            if (session.conversionValue > 0) {
                journey.push({
                    timestamp: new Date(session.sessionEnd.getTime() - 30000).toISOString(),
                    action: 'conversion',
                    page: session.exitPage,
                    value: session.conversionValue,
                    conversionType: 'purchase' // Could be determined from data
                });
            }
            // Add session end
            journey.push({
                timestamp: session.sessionEnd.toISOString(),
                action: 'session_end',
                sessionId: session.sessionId,
                page: session.exitPage,
                duration: session.duration,
                bounced: session.bounceRate > 0.5
            });
        });
        return journey;
    }
    /**
   * Generate insights for visitor behavior
   */ generateVisitorInsights(visitorData, sessions) {
        const insights = [];
        const profile = visitorData.profile;
        const current = visitorData.currentSession;
        const behavioral = visitorData.behavioral;
        // Intent score insights
        if (current.intentScore > 80) {
            insights.push(`High intent visitor - ${current.intentScore}% intent score indicates strong purchase likelihood`);
        } else if (current.intentScore > 60) {
            insights.push(`Moderate intent visitor - ${current.intentScore}% intent score shows interest`);
        } else {
            insights.push(`Low intent visitor - ${current.intentScore}% intent score suggests early stage exploration`);
        }
        // Engagement insights
        if (behavioral.engagementScore > 70) {
            insights.push(`Highly engaged visitor - ${behavioral.engagementScore.toFixed(1)} engagement score`);
        } else if (behavioral.engagementScore > 40) {
            insights.push(`Moderately engaged visitor - ${behavioral.engagementScore.toFixed(1)} engagement score`);
        }
        // Session insights
        if (current.pageViews > 5) {
            insights.push(`Engaged user - ${current.pageViews} page views in current session shows strong interest`);
        }
        if (current.duration > 300) {
            insights.push(`Extended session - ${Math.round(current.duration / 60)} minutes indicates serious consideration`);
        }
        // Returning visitor insights
        if (profile.isReturning) {
            insights.push(`Returning visitor - ${profile.totalSessions} total sessions shows continued interest`);
            if (profile.daysSinceFirstVisit > 7) {
                insights.push(`Long-term interest - first visited ${profile.daysSinceFirstVisit} days ago`);
            }
        } else {
            insights.push("New visitor - first-time visit represents acquisition opportunity");
        }
        // Conversion insights
        if (profile.totalConversions > 0) {
            insights.push(`Converting visitor - ${profile.totalConversions} previous conversions`);
        } else if (behavioral.conversionRate > 0) {
            insights.push("Conversion potential - behavioral patterns suggest readiness to convert");
        }
        // Geographic insights
        if (visitorData.geoLocation.country === 'Nigeria') {
            insights.push("Nigerian visitor - optimize for mobile experience and local payment methods");
        }
        // Device insights
        if (visitorData.device.type === 'mobile') {
            insights.push("Mobile visitor - ensure mobile-optimized experience and WhatsApp integration");
        }
        // Bounce rate insights
        if (behavioral.bounceRate < 20) {
            insights.push("Low bounce rate indicates strong content engagement");
        } else if (behavioral.bounceRate > 60) {
            insights.push("High bounce rate suggests need for content optimization");
        }
        return insights;
    }
    /**
   * Check if visitor is returning based on visitor ID occurrence
   */ isReturningVisitor(visitorId, sessions) {
        return sessions.filter((s)=>s.visitorId === visitorId).length > 1;
    }
    /**
   * Generate real-time insights based on current activity
   */ generateRealTimeInsights(activeSessions, visitors, currentVisitors) {
        const insights = [];
        if (currentVisitors === 0) {
            insights.push("No active visitors currently on the site");
            return insights;
        }
        // Traffic level insights
        if (currentVisitors > 20) {
            insights.push(`High traffic period - ${currentVisitors} active visitors`);
        } else if (currentVisitors > 5) {
            insights.push(`Moderate traffic - ${currentVisitors} active visitors`);
        } else {
            insights.push(`Low traffic period - ${currentVisitors} active visitors`);
        }
        // Device distribution insights
        const mobileVisitors = visitors.filter((v)=>v.device?.type === 'mobile').length;
        const mobilePercentage = visitors.length > 0 ? mobileVisitors / visitors.length * 100 : 0;
        if (mobilePercentage > 70) {
            insights.push(`${Math.round(mobilePercentage)}% of visitors are on mobile devices`);
        }
        // Geographic insights
        const countries = new Set(visitors.map((v)=>v.location?.country).filter(Boolean));
        if (countries.size > 1) {
            insights.push(`Visitors from ${countries.size} countries currently active`);
        }
        // High intent visitors
        const highIntentVisitors = visitors.filter((v)=>v.intentScore > 70).length;
        if (highIntentVisitors > 0) {
            insights.push(`${highIntentVisitors} high-intent visitors (>70% intent score) currently browsing`);
        }
        // Session duration insights
        const longSessions = visitors.filter((v)=>v.sessionDuration > 300).length; // > 5 minutes
        if (longSessions > 0) {
            insights.push(`${longSessions} visitors have been browsing for over 5 minutes`);
        }
        // Page popularity
        const avgPageViews = visitors.length > 0 ? visitors.reduce((sum, v)=>sum + v.pageViews, 0) / visitors.length : 0;
        if (avgPageViews > 3) {
            insights.push(`High engagement - average ${Math.round(avgPageViews * 10) / 10} pages per session`);
        }
        // Returning visitors
        const returningVisitors = visitors.filter((v)=>v.isReturning).length;
        if (returningVisitors > 0) {
            const returningPercentage = returningVisitors / visitors.length * 100;
            insights.push(`${Math.round(returningPercentage)}% are returning visitors`);
        }
        // Conversion insights
        const convertedVisitors = visitors.filter((v)=>v.isConverted).length;
        if (convertedVisitors > 0) {
            insights.push(`${convertedVisitors} visitors have converted in their current session`);
        }
        return insights;
    }
    /**
   * Calculate device statistics for real-time data
   */ calculateDeviceStats(visitors) {
        if (visitors.length === 0) return null;
        const deviceTypes = visitors.reduce((acc, v)=>{
            if (v.device?.type) {
                acc[v.device.type] = (acc[v.device.type] || 0) + 1;
            }
            return acc;
        }, {});
        const browsers = visitors.reduce((acc, v)=>{
            if (v.device?.browser) {
                acc[v.device.browser] = (acc[v.device.browser] || 0) + 1;
            }
            return acc;
        }, {});
        const operatingSystems = visitors.reduce((acc, v)=>{
            if (v.device?.os) {
                acc[v.device.os] = (acc[v.device.os] || 0) + 1;
            }
            return acc;
        }, {});
        return {
            deviceTypes,
            browsers,
            operatingSystems,
            mobilePercentage: deviceTypes.mobile ? deviceTypes.mobile / visitors.length * 100 : 0
        };
    }
    /**
   * Calculate location statistics for real-time data
   */ calculateLocationStats(visitors) {
        if (visitors.length === 0) return null;
        const countries = visitors.reduce((acc, v)=>{
            if (v.location?.country) {
                acc[v.location.country] = (acc[v.location.country] || 0) + 1;
            }
            return acc;
        }, {});
        const cities = visitors.reduce((acc, v)=>{
            if (v.location?.city) {
                acc[v.location.city] = (acc[v.location.city] || 0) + 1;
            }
            return acc;
        }, {});
        const regions = visitors.reduce((acc, v)=>{
            if (v.location?.region) {
                acc[v.location.region] = (acc[v.location.region] || 0) + 1;
            }
            return acc;
        }, {});
        return {
            countries,
            cities,
            regions,
            topCountry: Object.entries(countries).sort((a, b)=>b[1] - a[1])[0]?.[0],
            totalCountries: Object.keys(countries).length
        };
    }
    /**
   * Analyze visitor behavior signals for intent scoring
   */ analyzeVisitorSignals(currentSession, visitorSessions) {
        const signals = {
            engagementSignals: [],
            behavioralSignals: [],
            intentSignals: [],
            riskSignals: []
        };
        // Engagement signals
        if (currentSession.duration > 300) {
            signals.engagementSignals.push({
                type: 'long_session',
                value: currentSession.duration,
                weight: 0.8,
                description: `Extended session duration of ${Math.round(currentSession.duration / 60)} minutes`
            });
        }
        if (currentSession.pageViews > 5) {
            signals.engagementSignals.push({
                type: 'high_page_views',
                value: currentSession.pageViews,
                weight: 0.7,
                description: `High engagement with ${currentSession.pageViews} page views`
            });
        }
        if (currentSession.interactions > 10) {
            signals.engagementSignals.push({
                type: 'high_interactions',
                value: currentSession.interactions,
                weight: 0.6,
                description: `Active user with ${currentSession.interactions} interactions`
            });
        }
        if (currentSession.scrollDepth > 75) {
            signals.engagementSignals.push({
                type: 'deep_scroll',
                value: currentSession.scrollDepth,
                weight: 0.5,
                description: `Deep content engagement with ${currentSession.scrollDepth}% scroll depth`
            });
        }
        // Behavioral signals
        const isReturning = visitorSessions.length > 1;
        if (isReturning) {
            signals.behavioralSignals.push({
                type: 'returning_visitor',
                value: visitorSessions.length,
                weight: 0.9,
                description: `Returning visitor with ${visitorSessions.length} total sessions`
            });
        }
        // Calculate average session duration across all sessions
        const avgSessionDuration = visitorSessions.reduce((sum, s)=>sum + s.duration, 0) / visitorSessions.length;
        if (avgSessionDuration > 180) {
            signals.behavioralSignals.push({
                type: 'consistent_engagement',
                value: avgSessionDuration,
                weight: 0.7,
                description: `Consistent engagement with ${Math.round(avgSessionDuration / 60)} minute average sessions`
            });
        }
        // Intent signals based on pages visited
        const landingPage = currentSession.landingPage?.toLowerCase() || '';
        const exitPage = currentSession.exitPage?.toLowerCase() || '';
        if (landingPage.includes('pricing') || exitPage.includes('pricing')) {
            signals.intentSignals.push({
                type: 'pricing_interest',
                value: 1,
                weight: 0.9,
                description: 'Visited pricing page indicating purchase intent'
            });
        }
        if (landingPage.includes('contact') || exitPage.includes('contact') || landingPage.includes('demo')) {
            signals.intentSignals.push({
                type: 'contact_interest',
                value: 1,
                weight: 0.8,
                description: 'Visited contact/demo page indicating high intent'
            });
        }
        if (currentSession.conversionValue > 0) {
            signals.intentSignals.push({
                type: 'conversion_completed',
                value: currentSession.conversionValue,
                weight: 1.0,
                description: `Completed conversion with value ${currentSession.conversionValue}`
            });
        }
        // Risk signals
        if (currentSession.bounceRate > 0.8) {
            signals.riskSignals.push({
                type: 'high_bounce_risk',
                value: currentSession.bounceRate,
                weight: -0.5,
                description: 'High bounce rate indicates potential disengagement'
            });
        }
        if (currentSession.duration < 30) {
            signals.riskSignals.push({
                type: 'quick_exit',
                value: currentSession.duration,
                weight: -0.6,
                description: 'Very short session duration suggests low interest'
            });
        }
        // Traffic source insights
        if (currentSession.source === 'direct' && isReturning) {
            signals.behavioralSignals.push({
                type: 'direct_return',
                value: 1,
                weight: 0.8,
                description: 'Direct traffic from returning visitor shows brand awareness'
            });
        }
        if (currentSession.source === 'organic') {
            signals.behavioralSignals.push({
                type: 'organic_discovery',
                value: 1,
                weight: 0.6,
                description: 'Organic search traffic indicates active problem-solving'
            });
        }
        return signals;
    }
    /**
   * Generate personalized recommendation based on visitor signals
   */ generateRecommendation(currentSession, signals) {
        const recommendations = [];
        let urgency = 'low';
        let priority = 1;
        // Calculate overall intent score from signals
        let intentScore = currentSession.intentScore || 0;
        // Analyze engagement signals
        if (signals.engagementSignals.length > 2) {
            recommendations.push({
                action: 'immediate_engagement',
                channel: 'live_chat',
                message: 'Offer live chat assistance due to high engagement',
                reason: 'Multiple strong engagement signals detected'
            });
            urgency = 'high';
            priority = 3;
        }
        // Analyze intent signals
        const hasHighIntent = signals.intentSignals.some((s)=>s.weight > 0.8);
        if (hasHighIntent) {
            recommendations.push({
                action: 'sales_outreach',
                channel: 'phone',
                message: 'Schedule immediate sales call',
                reason: 'High purchase intent detected',
                timing: 'within_1_hour'
            });
            urgency = 'critical';
            priority = 5;
        }
        // Pricing page visitors
        const visitedPricing = signals.intentSignals.some((s)=>s.type === 'pricing_interest');
        if (visitedPricing) {
            recommendations.push({
                action: 'pricing_assistance',
                channel: 'email',
                message: 'Send personalized pricing information and case studies',
                reason: 'Showed interest in pricing',
                timing: 'within_2_hours'
            });
            if (currentSession.duration > 180) {
                recommendations.push({
                    action: 'discount_offer',
                    channel: 'popup',
                    message: 'Offer limited-time discount or consultation',
                    reason: 'Extended time on pricing page',
                    timing: 'immediate'
                });
            }
        }
        // Returning visitor recommendations
        const isReturning = signals.behavioralSignals.some((s)=>s.type === 'returning_visitor');
        if (isReturning && !hasHighIntent) {
            recommendations.push({
                action: 'nurture_campaign',
                channel: 'email',
                message: 'Add to targeted nurture campaign with case studies',
                reason: 'Returning visitor showing continued interest',
                timing: 'within_24_hours'
            });
        }
        // Mobile-specific recommendations
        if (currentSession.deviceType === 'mobile') {
            recommendations.push({
                action: 'mobile_optimization',
                channel: 'whatsapp',
                message: 'Offer WhatsApp consultation for mobile convenience',
                reason: 'Mobile user in African market',
                timing: 'within_4_hours'
            });
        }
        // Geographic recommendations
        if (currentSession.country === 'Nigeria' || currentSession.country === 'South Africa') {
            recommendations.push({
                action: 'local_approach',
                channel: 'sms',
                message: 'Send localized message with regional case studies',
                reason: 'African market visitor',
                timing: 'within_6_hours'
            });
        }
        // Risk mitigation
        const hasRiskSignals = signals.riskSignals.length > 0;
        if (hasRiskSignals && !hasHighIntent) {
            recommendations.push({
                action: 'retention_effort',
                channel: 'popup',
                message: 'Show value proposition or offer assistance',
                reason: 'Risk signals detected - prevent bounce',
                timing: 'immediate'
            });
        }
        // Default recommendation for new visitors
        if (!isReturning && intentScore < 50) {
            recommendations.push({
                action: 'lead_magnet',
                channel: 'popup',
                message: 'Offer valuable content download for email capture',
                reason: 'New visitor - build relationship',
                timing: 'after_60_seconds'
            });
        }
        return {
            recommendations,
            urgency,
            priority,
            nextBestAction: recommendations.length > 0 ? recommendations[0] : null,
            confidence: Math.min(intentScore / 100 + signals.engagementSignals.length * 0.1, 1.0),
            reasoning: {
                intentScore,
                engagementLevel: signals.engagementSignals.length > 2 ? 'high' : signals.engagementSignals.length > 0 ? 'medium' : 'low',
                riskLevel: signals.riskSignals.length > 1 ? 'high' : signals.riskSignals.length > 0 ? 'medium' : 'low',
                visitorType: isReturning ? 'returning' : 'new'
            }
        };
    }
    /**
   * Parse date range string to number of days
   */ parseDateRange(dateRange) {
        const rangeMap = {
            '1d': 1,
            '7d': 7,
            '14d': 14,
            '30d': 30,
            '60d': 60,
            '90d': 90,
            '180d': 180,
            '365d': 365
        };
        return rangeMap[dateRange] || 30;
    }
    /**
   * Analyze visitor progression through conversion funnel
   */ analyzeFunnelProgression(sessions, funnelSteps) {
        const stepAnalysis = [];
        let previousStepVisitors = sessions.length;
        // Analyze each funnel step
        for(let i = 0; i < funnelSteps.length; i++){
            const step = funnelSteps[i];
            let stepVisitors = 0;
            let stepRevenue = 0;
            if (step.conversionRequired) {
                // Final conversion step - count sessions with conversions
                const convertedSessions = sessions.filter((session)=>session.conversionValue > 0);
                stepVisitors = convertedSessions.length;
                stepRevenue = convertedSessions.reduce((sum, session)=>sum + session.conversionValue, 0);
            } else {
                // Page visit step - count sessions that visited matching pages
                stepVisitors = sessions.filter((session)=>{
                    const landingPage = session.landingPage?.toLowerCase() || '';
                    const exitPage = session.exitPage?.toLowerCase() || '';
                    const pattern = new RegExp(step.pagePattern, 'i');
                    return pattern.test(landingPage) || pattern.test(exitPage);
                }).length;
            }
            const conversionRate = previousStepVisitors > 0 ? stepVisitors / previousStepVisitors * 100 : 0;
            const dropOffRate = previousStepVisitors > 0 ? (previousStepVisitors - stepVisitors) / previousStepVisitors * 100 : 0;
            stepAnalysis.push({
                step: i + 1,
                name: step.name,
                visitors: stepVisitors,
                conversionRate: Math.round(conversionRate * 100) / 100,
                dropOffRate: Math.round(dropOffRate * 100) / 100,
                revenue: stepRevenue,
                pattern: step.pagePattern || 'conversion'
            });
            previousStepVisitors = stepVisitors;
        }
        // Calculate overall metrics
        const totalSessions = sessions.length;
        const totalConversions = stepAnalysis[stepAnalysis.length - 1]?.visitors || 0;
        const totalRevenue = stepAnalysis[stepAnalysis.length - 1]?.revenue || 0;
        const overallConversion = totalSessions > 0 ? totalConversions / totalSessions * 100 : 0;
        const averageOrderValue = totalConversions > 0 ? totalRevenue / totalConversions : 0;
        // Find best and worst performing steps
        const stepRates = stepAnalysis.slice(1).map((step)=>({
                name: step.name,
                rate: step.conversionRate
            }));
        const bestStep = stepRates.reduce((max, step)=>step.rate > max.rate ? step : max, stepRates[0] || {
            name: 'N/A',
            rate: 0
        });
        const worstStep = stepRates.reduce((min, step)=>step.rate < min.rate ? step : min, stepRates[0] || {
            name: 'N/A',
            rate: 0
        });
        // Find biggest drop-off
        const dropOffs = stepAnalysis.map((step)=>({
                name: step.name,
                dropOff: step.dropOffRate
            }));
        const biggestDropOff = dropOffs.reduce((max, step)=>step.dropOff > max.dropOff ? step : max, dropOffs[0] || {
            name: 'N/A',
            dropOff: 0
        });
        return {
            steps: stepAnalysis,
            overallConversion: Math.round(overallConversion * 100) / 100,
            totalRevenue: Math.round(totalRevenue * 100) / 100,
            averageOrderValue: Math.round(averageOrderValue * 100) / 100,
            bestStep: bestStep.name,
            worstStep: worstStep.name,
            biggestDropOff: biggestDropOff.name
        };
    }
    /**
   * Analyze funnel performance by customer segments
   */ async analyzeFunnelBySegments(sessions, funnelSteps, authContext) {
        try {
            // Get segments for the organization
            const segments = await _prisma.prisma.segment.findMany({
                where: {
                    createdBy: {
                        organizationId: authContext.organizationId
                    }
                },
                include: {
                    members: {
                        include: {
                            contact: true
                        }
                    }
                }
            });
            const segmentAnalysis = [];
            // Analyze new vs returning visitors
            const newVisitorSessions = sessions.filter((session)=>{
                const visitorSessions = sessions.filter((s)=>s.visitorId === session.visitorId);
                return visitorSessions.length === 1;
            });
            const returningVisitorSessions = sessions.filter((session)=>{
                const visitorSessions = sessions.filter((s)=>s.visitorId === session.visitorId);
                return visitorSessions.length > 1;
            });
            // Analyze new visitors
            if (newVisitorSessions.length > 0) {
                const newVisitorFunnel = this.analyzeFunnelProgression(newVisitorSessions, funnelSteps);
                segmentAnalysis.push({
                    name: 'New Visitors',
                    totalSessions: newVisitorSessions.length,
                    overallConversion: newVisitorFunnel.overallConversion,
                    totalRevenue: newVisitorFunnel.totalRevenue,
                    averageOrderValue: newVisitorFunnel.averageOrderValue,
                    topDropOffStep: newVisitorFunnel.biggestDropOff,
                    steps: newVisitorFunnel.steps
                });
            }
            // Analyze returning visitors
            if (returningVisitorSessions.length > 0) {
                const returningVisitorFunnel = this.analyzeFunnelProgression(returningVisitorSessions, funnelSteps);
                segmentAnalysis.push({
                    name: 'Returning Visitors',
                    totalSessions: returningVisitorSessions.length,
                    overallConversion: returningVisitorFunnel.overallConversion,
                    totalRevenue: returningVisitorFunnel.totalRevenue,
                    averageOrderValue: returningVisitorFunnel.averageOrderValue,
                    topDropOffStep: returningVisitorFunnel.biggestDropOff,
                    steps: returningVisitorFunnel.steps
                });
            }
            // Analyze by device type
            const mobileReqs = sessions.filter((s)=>s.deviceType === 'mobile');
            const desktopSessions = sessions.filter((s)=>s.deviceType === 'desktop');
            if (mobileReqs.length > 0) {
                const mobileFunnel = this.analyzeFunnelProgression(mobileReqs, funnelSteps);
                segmentAnalysis.push({
                    name: 'Mobile Visitors',
                    totalSessions: mobileReqs.length,
                    overallConversion: mobileFunnel.overallConversion,
                    totalRevenue: mobileFunnel.totalRevenue,
                    averageOrderValue: mobileFunnel.averageOrderValue,
                    topDropOffStep: mobileFunnel.biggestDropOff,
                    steps: mobileFunnel.steps
                });
            }
            if (desktopSessions.length > 0) {
                const desktopFunnel = this.analyzeFunnelProgression(desktopSessions, funnelSteps);
                segmentAnalysis.push({
                    name: 'Desktop Visitors',
                    totalSessions: desktopSessions.length,
                    overallConversion: desktopFunnel.overallConversion,
                    totalRevenue: desktopFunnel.totalRevenue,
                    averageOrderValue: desktopFunnel.averageOrderValue,
                    topDropOffStep: desktopFunnel.biggestDropOff,
                    steps: desktopFunnel.steps
                });
            }
            // Analyze by traffic source
            const organicSessions = sessions.filter((s)=>s.source === 'organic');
            const directSessions = sessions.filter((s)=>s.source === 'direct');
            const socialSessions = sessions.filter((s)=>s.source === 'social');
            if (organicSessions.length > 0) {
                const organicFunnel = this.analyzeFunnelProgression(organicSessions, funnelSteps);
                segmentAnalysis.push({
                    name: 'Organic Traffic',
                    totalSessions: organicSessions.length,
                    overallConversion: organicFunnel.overallConversion,
                    totalRevenue: organicFunnel.totalRevenue,
                    averageOrderValue: organicFunnel.averageOrderValue,
                    topDropOffStep: organicFunnel.biggestDropOff,
                    steps: organicFunnel.steps
                });
            }
            return segmentAnalysis;
        } catch (error) {
            console.error('Error analyzing funnel by segments:', error);
            return [];
        }
    }
    /**
   * Generate actionable insights from funnel data
   */ generateFunnelInsights(steps, segmentData) {
        const insights = [];
        // Overall funnel insights
        if (steps.length > 0) {
            const firstStep = steps[0];
            const lastStep = steps[steps.length - 1];
            insights.push(`Funnel starts with ${firstStep.visitors.toLocaleString()} visitors and converts ${lastStep.visitors.toLocaleString()} (${lastStep.conversionRate}% overall)`);
            // Find biggest drop-off
            const biggestDropOff = steps.reduce((max, step)=>step.dropOffRate > max.dropOffRate ? step : max, steps[0]);
            if (biggestDropOff.dropOffRate > 50) {
                insights.push(`⚠️ Critical drop-off at ${biggestDropOff.name} (${biggestDropOff.dropOffRate}% exit rate) - requires immediate optimization`);
            } else if (biggestDropOff.dropOffRate > 30) {
                insights.push(`📉 Significant drop-off at ${biggestDropOff.name} (${biggestDropOff.dropOffRate}% exit rate) - optimization opportunity`);
            }
            // Revenue insights
            const revenueStep = steps.find((step)=>step.revenue > 0);
            if (revenueStep) {
                insights.push(`💰 Generated ${revenueStep.revenue.toLocaleString()} in revenue from ${revenueStep.visitors} conversions`);
            }
            // Conversion rate insights
            const overallRate = lastStep.conversionRate;
            if (overallRate > 5) {
                insights.push(`🎯 Excellent conversion rate of ${overallRate}% - above industry average`);
            } else if (overallRate > 2) {
                insights.push(`✅ Good conversion rate of ${overallRate}% - room for improvement`);
            } else {
                insights.push(`📊 Conversion rate of ${overallRate}% is below average - funnel optimization needed`);
            }
        }
        // Segment-specific insights
        if (segmentData && segmentData.length > 0) {
            const newVisitors = segmentData.find((s)=>s.name === 'New Visitors');
            const returningVisitors = segmentData.find((s)=>s.name === 'Returning Visitors');
            if (newVisitors && returningVisitors) {
                const conversionDiff = returningVisitors.overallConversion - newVisitors.overallConversion;
                if (conversionDiff > 2) {
                    insights.push(`🔄 Returning visitors convert ${conversionDiff.toFixed(1)}x better (${returningVisitors.overallConversion}% vs ${newVisitors.overallConversion}%)`);
                }
            }
            const mobileSegment = segmentData.find((s)=>s.name === 'Mobile Visitors');
            const desktopSegment = segmentData.find((s)=>s.name === 'Desktop Visitors');
            if (mobileSegment && desktopSegment) {
                if (mobileSegment.overallConversion < desktopSegment.overallConversion * 0.7) {
                    insights.push(`📱 Mobile conversion (${mobileSegment.overallConversion}%) significantly lower than desktop (${desktopSegment.overallConversion}%) - mobile optimization needed`);
                }
            }
            // Traffic source insights
            const organicSegment = segmentData.find((s)=>s.name === 'Organic Traffic');
            if (organicSegment && organicSegment.overallConversion > 3) {
                insights.push(`🌱 Organic traffic shows strong intent with ${organicSegment.overallConversion}% conversion - invest in SEO`);
            }
        }
        // African market specific insights
        insights.push(`🌍 Consider African market optimization: mobile-first design, WhatsApp integration, and local payment methods`);
        return insights;
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zdXByZW1lL0Rlc2t0b3AvbWFya2V0c2FnZS9zcmMvbWNwL3NlcnZlcnMvbGVhZHB1bHNlLXNlcnZlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIExlYWRQdWxzZSBNQ1AgU2VydmVyIGZvciBNYXJrZXRTYWdlXG4gKiBcbiAqIFRoaXMgc2VydmVyIHByb3ZpZGVzIHJlYWQtb25seSBhY2Nlc3MgdG8gdmlzaXRvciBpbnRlbGxpZ2VuY2UgZGF0YSxcbiAqIGJlaGF2aW9yYWwgYW5hbHl0aWNzLCBhbmQgY29udmVyc2lvbiB0cmFja2luZyB0aHJvdWdoIHRoZSBNQ1AgcHJvdG9jb2wuXG4gKi9cblxuaW1wb3J0IHsgeiB9IGZyb20gJ3pvZCc7XG5pbXBvcnQgeyBCYXNlTUNQU2VydmVyIH0gZnJvbSAnLi9iYXNlLW1jcC1zZXJ2ZXInO1xuaW1wb3J0IHsgXG4gIHR5cGUgTUNQQXV0aENvbnRleHQsIFxuICB0eXBlIE1DUFNlcnZlckNvbmZpZyxcbiAgTGVhZFB1bHNlUXVlcnlTY2hlbWEsXG4gIHR5cGUgTGVhZFB1bHNlUXVlcnksXG4gIFZpc2l0b3JTZXNzaW9uLFxuICBNQ1BBdXRob3JpemF0aW9uRXJyb3IsXG4gIE1DUFZhbGlkYXRpb25FcnJvclxufSBmcm9tICcuLi90eXBlcy9tY3AtdHlwZXMnO1xuXG5pbXBvcnQgeyBwcmlzbWEgfSBmcm9tICcuLi8uLi9saWIvZGIvcHJpc21hJztcbmltcG9ydCB7IGRlZmF1bHRNQ1BDb25maWcgfSBmcm9tICcuLi9jb25maWcvbWNwLWNvbmZpZyc7XG5cbmV4cG9ydCBjbGFzcyBMZWFkUHVsc2VNQ1BTZXJ2ZXIgZXh0ZW5kcyBCYXNlTUNQU2VydmVyIHtcbiAgY29uc3RydWN0b3IoY29uZmlnPzogUGFydGlhbDxNQ1BTZXJ2ZXJDb25maWc+KSB7XG4gICAgc3VwZXIoe1xuICAgICAgLi4uZGVmYXVsdE1DUENvbmZpZy5zZXJ2ZXJzLmxlYWRwdWxzZSxcbiAgICAgIC4uLmNvbmZpZ1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIExpc3QgYXZhaWxhYmxlIExlYWRQdWxzZSByZXNvdXJjZXNcbiAgICovXG4gIHByb3RlY3RlZCBhc3luYyBsaXN0UmVzb3VyY2VzKGF1dGhDb250ZXh0OiBNQ1BBdXRoQ29udGV4dCk6IFByb21pc2U8YW55W10+IHtcbiAgICBjb25zdCByZXNvdXJjZXMgPSBbXG4gICAgICB7XG4gICAgICAgIHVyaTogXCJsZWFkcHVsc2U6Ly92aXNpdG9yc1wiLFxuICAgICAgICBuYW1lOiBcIlZpc2l0b3IgRGF0YVwiLFxuICAgICAgICBkZXNjcmlwdGlvbjogXCJBY2Nlc3MgdG8gdmlzaXRvciBzZXNzaW9ucyBhbmQgYmVoYXZpb3JhbCBkYXRhXCIsXG4gICAgICAgIG1pbWVUeXBlOiBcImFwcGxpY2F0aW9uL2pzb25cIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgdXJpOiBcImxlYWRwdWxzZTovL3Nlc3Npb25zXCIsXG4gICAgICAgIG5hbWU6IFwiU2Vzc2lvbiBEYXRhXCIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIkFjY2VzcyB0byBkZXRhaWxlZCB2aXNpdG9yIHNlc3Npb24gaW5mb3JtYXRpb25cIixcbiAgICAgICAgbWltZVR5cGU6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICB1cmk6IFwibGVhZHB1bHNlOi8vaGVhdG1hcHNcIixcbiAgICAgICAgbmFtZTogXCJIZWF0bWFwIERhdGFcIixcbiAgICAgICAgZGVzY3JpcHRpb246IFwiQWNjZXNzIHRvIHBhZ2UgaGVhdG1hcCBhbmQgaW50ZXJhY3Rpb24gZGF0YVwiLFxuICAgICAgICBtaW1lVHlwZTogXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHVyaTogXCJsZWFkcHVsc2U6Ly9qb3VybmV5c1wiLFxuICAgICAgICBuYW1lOiBcIkN1c3RvbWVyIEpvdXJuZXlzXCIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIkFjY2VzcyB0byBjdXN0b21lciBqb3VybmV5IGFuZCBjb252ZXJzaW9uIHBhdGhzXCIsXG4gICAgICAgIG1pbWVUeXBlOiBcImFwcGxpY2F0aW9uL2pzb25cIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgdXJpOiBcImxlYWRwdWxzZTovL2NvbnZlcnNpb25zXCIsXG4gICAgICAgIG5hbWU6IFwiQ29udmVyc2lvbiBEYXRhXCIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIkFjY2VzcyB0byBjb252ZXJzaW9uIGV2ZW50cyBhbmQgZnVubmVsIGFuYWx5dGljc1wiLFxuICAgICAgICBtaW1lVHlwZTogXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHVyaTogXCJsZWFkcHVsc2U6Ly9hbmFseXRpY3NcIixcbiAgICAgICAgbmFtZTogXCJCZWhhdmlvcmFsIEFuYWx5dGljc1wiLFxuICAgICAgICBkZXNjcmlwdGlvbjogXCJBY2Nlc3MgdG8gdmlzaXRvciBiZWhhdmlvciBhbmFseXRpY3MgYW5kIGluc2lnaHRzXCIsXG4gICAgICAgIG1pbWVUeXBlOiBcImFwcGxpY2F0aW9uL2pzb25cIlxuICAgICAgfVxuICAgIF07XG5cbiAgICAvLyBGaWx0ZXIgcmVzb3VyY2VzIGJhc2VkIG9uIHBlcm1pc3Npb25zXG4gICAgaWYgKCFhdXRoQ29udGV4dC5wZXJtaXNzaW9ucy5pbmNsdWRlcygnKicpICYmICFhdXRoQ29udGV4dC5wZXJtaXNzaW9ucy5pbmNsdWRlcygncmVhZDpvcmcnKSkge1xuICAgICAgLy8gVXNlcnMgY2FuIG9ubHkgYWNjZXNzIGJhc2ljIHZpc2l0b3IgZGF0YVxuICAgICAgcmV0dXJuIHJlc291cmNlcy5maWx0ZXIociA9PiByLnVyaS5pbmNsdWRlcygndmlzaXRvcnMnKSB8fCByLnVyaS5pbmNsdWRlcygnc2Vzc2lvbnMnKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc291cmNlcztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWFkIExlYWRQdWxzZSByZXNvdXJjZVxuICAgKi9cbiAgcHJvdGVjdGVkIGFzeW5jIHJlYWRSZXNvdXJjZSh1cmk6IHN0cmluZywgYXV0aENvbnRleHQ6IE1DUEF1dGhDb250ZXh0KTogUHJvbWlzZTxhbnk+IHtcbiAgICBjb25zdCB1cmwgPSBuZXcgVVJMKHVyaSk7XG4gICAgY29uc3QgcGF0aCA9IHVybC5wYXRobmFtZTtcbiAgICBjb25zdCBzZWFyY2hQYXJhbXMgPSB1cmwuc2VhcmNoUGFyYW1zO1xuXG4gICAgLy8gUGFyc2UgcXVlcnkgcGFyYW1ldGVyc1xuICAgIGNvbnN0IHF1ZXJ5UGFyYW1zID0gT2JqZWN0LmZyb21FbnRyaWVzKHNlYXJjaFBhcmFtcy5lbnRyaWVzKCkpO1xuICAgIGNvbnN0IHZhbGlkYXRlZFF1ZXJ5ID0gTGVhZFB1bHNlUXVlcnlTY2hlbWEucGFyc2Uoe1xuICAgICAgLi4ucXVlcnlQYXJhbXMsXG4gICAgICBvcmdhbml6YXRpb25JZDogYXV0aENvbnRleHQub3JnYW5pemF0aW9uSWQsIC8vIEFsd2F5cyB1c2UgdXNlcidzIG9yZ1xuICAgICAgbGltaXQ6IHF1ZXJ5UGFyYW1zLmxpbWl0ID8gTnVtYmVyLnBhcnNlSW50KHF1ZXJ5UGFyYW1zLmxpbWl0KSA6IDEwLFxuICAgICAgb2Zmc2V0OiBxdWVyeVBhcmFtcy5vZmZzZXQgPyBOdW1iZXIucGFyc2VJbnQocXVlcnlQYXJhbXMub2Zmc2V0KSA6IDAsXG4gICAgICBpbmNsdWRlSGVhdG1hcDogcXVlcnlQYXJhbXMuaW5jbHVkZUhlYXRtYXAgPT09ICd0cnVlJyxcbiAgICAgIGluY2x1ZGVKb3VybmV5OiBxdWVyeVBhcmFtcy5pbmNsdWRlSm91cm5leSA9PT0gJ3RydWUnXG4gICAgfSk7XG5cbiAgICBzd2l0Y2ggKHBhdGgpIHtcbiAgICAgIGNhc2UgJy92aXNpdG9ycyc6XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmdldFZpc2l0b3JEYXRhKHZhbGlkYXRlZFF1ZXJ5LCBhdXRoQ29udGV4dCk7XG4gICAgICBjYXNlICcvc2Vzc2lvbnMnOlxuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5nZXRTZXNzaW9uRGF0YSh2YWxpZGF0ZWRRdWVyeSwgYXV0aENvbnRleHQpO1xuICAgICAgY2FzZSAnL2hlYXRtYXBzJzpcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZ2V0SGVhdG1hcERhdGEodmFsaWRhdGVkUXVlcnksIGF1dGhDb250ZXh0KTtcbiAgICAgIGNhc2UgJy9qb3VybmV5cyc6XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmdldEpvdXJuZXlEYXRhKHZhbGlkYXRlZFF1ZXJ5LCBhdXRoQ29udGV4dCk7XG4gICAgICBjYXNlICcvY29udmVyc2lvbnMnOlxuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5nZXRDb252ZXJzaW9uRGF0YSh2YWxpZGF0ZWRRdWVyeSwgYXV0aENvbnRleHQpO1xuICAgICAgY2FzZSAnL2FuYWx5dGljcyc6XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmdldEFuYWx5dGljc0RhdGEodmFsaWRhdGVkUXVlcnksIGF1dGhDb250ZXh0KTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBNQ1BWYWxpZGF0aW9uRXJyb3IoYFVua25vd24gcmVzb3VyY2UgcGF0aDogJHtwYXRofWApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBMaXN0IGF2YWlsYWJsZSBMZWFkUHVsc2UgdG9vbHNcbiAgICovXG4gIHByb3RlY3RlZCBhc3luYyBsaXN0VG9vbHMoYXV0aENvbnRleHQ6IE1DUEF1dGhDb250ZXh0KTogUHJvbWlzZTxhbnlbXT4ge1xuICAgIGNvbnN0IHRvb2xzID0gW1xuICAgICAge1xuICAgICAgICBuYW1lOiBcInRyYWNrX3Zpc2l0b3JcIixcbiAgICAgICAgZGVzY3JpcHRpb246IFwiR2V0IHZpc2l0b3IgdHJhY2tpbmcgaW5mb3JtYXRpb24gYW5kIGJlaGF2aW9yXCIsXG4gICAgICAgIGlucHV0U2NoZW1hOiB7XG4gICAgICAgICAgdHlwZTogXCJvYmplY3RcIixcbiAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICB2aXNpdG9ySWQ6IHtcbiAgICAgICAgICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiVmlzaXRvciBJRCB0byB0cmFja1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaW5jbHVkZUpvdXJuZXk6IHtcbiAgICAgICAgICAgICAgdHlwZTogXCJib29sZWFuXCIsXG4gICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkluY2x1ZGUgY3VzdG9tZXIgam91cm5leSBkYXRhXCIsXG4gICAgICAgICAgICAgIGRlZmF1bHQ6IHRydWVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbmNsdWRlSGVhdG1hcDoge1xuICAgICAgICAgICAgICB0eXBlOiBcImJvb2xlYW5cIiwgXG4gICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkluY2x1ZGUgaGVhdG1hcCBpbnRlcmFjdGlvbiBkYXRhXCIsXG4gICAgICAgICAgICAgIGRlZmF1bHQ6IGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICByZXF1aXJlZDogW1widmlzaXRvcklkXCJdXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwiYW5hbHl6ZV92aXNpdG9yX2JlaGF2aW9yXCIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIkFuYWx5emUgdmlzaXRvciBiZWhhdmlvciBwYXR0ZXJucyBhbmQgZ2VuZXJhdGUgaW5zaWdodHNcIixcbiAgICAgICAgaW5wdXRTY2hlbWE6IHtcbiAgICAgICAgICB0eXBlOiBcIm9iamVjdFwiLFxuICAgICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIHZpc2l0b3JJZDoge1xuICAgICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJWaXNpdG9yIElEIHRvIGFuYWx5emVcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNlc3Npb25JZDoge1xuICAgICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJTcGVjaWZpYyBzZXNzaW9uIElEIChvcHRpb25hbClcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRpbWVSYW5nZToge1xuICAgICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICBlbnVtOiBbXCIxaFwiLCBcIjFkXCIsIFwiN2RcIiwgXCIzMGRcIl0sXG4gICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlRpbWUgcmFuZ2UgZm9yIGFuYWx5c2lzXCIsXG4gICAgICAgICAgICAgIGRlZmF1bHQ6IFwiN2RcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgcmVxdWlyZWQ6IFtcInZpc2l0b3JJZFwiXVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiBcImdldF9jb252ZXJzaW9uX2Z1bm5lbFwiLFxuICAgICAgICBkZXNjcmlwdGlvbjogXCJHZXQgY29udmVyc2lvbiBmdW5uZWwgZGF0YSBhbmQgZHJvcC1vZmYgcG9pbnRzXCIsXG4gICAgICAgIGlucHV0U2NoZW1hOiB7XG4gICAgICAgICAgdHlwZTogXCJvYmplY3RcIixcbiAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBmdW5uZWxJZDoge1xuICAgICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJGdW5uZWwgSUQgKG9wdGlvbmFsIGZvciBkZWZhdWx0IGZ1bm5lbClcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGVSYW5nZToge1xuICAgICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICBlbnVtOiBbXCI3ZFwiLCBcIjMwZFwiLCBcIjkwZFwiXSxcbiAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiRGF0ZSByYW5nZSBmb3IgZnVubmVsIGFuYWx5c2lzXCIsXG4gICAgICAgICAgICAgIGRlZmF1bHQ6IFwiMzBkXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbmNsdWRlU2VnbWVudHM6IHtcbiAgICAgICAgICAgICAgdHlwZTogXCJib29sZWFuXCIsXG4gICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkluY2x1ZGUgc2VnbWVudC1iYXNlZCBmdW5uZWwgYW5hbHlzaXNcIixcbiAgICAgICAgICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwiZ2V0X3BhZ2VfYW5hbHl0aWNzXCIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIkdldCBwYWdlLWxldmVsIGFuYWx5dGljcyBhbmQgcGVyZm9ybWFuY2UgbWV0cmljc1wiLFxuICAgICAgICBpbnB1dFNjaGVtYToge1xuICAgICAgICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgICAgcGFnZVVybDoge1xuICAgICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJQYWdlIFVSTCB0byBhbmFseXplXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbmNsdWRlSGVhdG1hcDoge1xuICAgICAgICAgICAgICB0eXBlOiBcImJvb2xlYW5cIixcbiAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiSW5jbHVkZSBoZWF0bWFwIGRhdGFcIixcbiAgICAgICAgICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGVSYW5nZToge1xuICAgICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICBlbnVtOiBbXCIxZFwiLCBcIjdkXCIsIFwiMzBkXCJdLFxuICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJEYXRlIHJhbmdlIGZvciBhbmFseXNpc1wiLFxuICAgICAgICAgICAgICBkZWZhdWx0OiBcIjdkXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHJlcXVpcmVkOiBbXCJwYWdlVXJsXCJdXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwiZ2V0X3JlYWxfdGltZV92aXNpdG9yc1wiLFxuICAgICAgICBkZXNjcmlwdGlvbjogXCJHZXQgY3VycmVudCBhY3RpdmUgdmlzaXRvcnMgYW5kIHRoZWlyIGFjdGl2aXRpZXNcIixcbiAgICAgICAgaW5wdXRTY2hlbWE6IHtcbiAgICAgICAgICB0eXBlOiBcIm9iamVjdFwiLFxuICAgICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIGluY2x1ZGVMb2NhdGlvbjoge1xuICAgICAgICAgICAgICB0eXBlOiBcImJvb2xlYW5cIixcbiAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiSW5jbHVkZSBnZW9ncmFwaGljIGxvY2F0aW9uIGRhdGFcIixcbiAgICAgICAgICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGluY2x1ZGVEZXZpY2U6IHtcbiAgICAgICAgICAgICAgdHlwZTogXCJib29sZWFuXCIsXG4gICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkluY2x1ZGUgZGV2aWNlIGFuZCBicm93c2VyIGluZm9ybWF0aW9uXCIsXG4gICAgICAgICAgICAgIGRlZmF1bHQ6IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwiaWRlbnRpZnlfaGlnaF9pbnRlbnRfdmlzaXRvcnNcIixcbiAgICAgICAgZGVzY3JpcHRpb246IFwiSWRlbnRpZnkgdmlzaXRvcnMgd2l0aCBoaWdoIHB1cmNoYXNlL2NvbnZlcnNpb24gaW50ZW50XCIsXG4gICAgICAgIGlucHV0U2NoZW1hOiB7XG4gICAgICAgICAgdHlwZTogXCJvYmplY3RcIixcbiAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICB0aHJlc2hvbGQ6IHtcbiAgICAgICAgICAgICAgdHlwZTogXCJudW1iZXJcIixcbiAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiSW50ZW50IHNjb3JlIHRocmVzaG9sZCAoMC0xMDApXCIsXG4gICAgICAgICAgICAgIG1pbmltdW06IDAsXG4gICAgICAgICAgICAgIG1heGltdW06IDEwMCxcbiAgICAgICAgICAgICAgZGVmYXVsdDogNzBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsaW1pdDoge1xuICAgICAgICAgICAgICB0eXBlOiBcIm51bWJlclwiLFxuICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJNYXhpbXVtIG51bWJlciBvZiB2aXNpdG9ycyB0byByZXR1cm5cIixcbiAgICAgICAgICAgICAgbWluaW11bTogMSxcbiAgICAgICAgICAgICAgbWF4aW11bTogMTAwLFxuICAgICAgICAgICAgICBkZWZhdWx0OiAyMFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIF07XG5cbiAgICAvLyBGaWx0ZXIgdG9vbHMgYmFzZWQgb24gcGVybWlzc2lvbnNcbiAgICBpZiAoIWF1dGhDb250ZXh0LnBlcm1pc3Npb25zLmluY2x1ZGVzKCcqJykgJiYgIWF1dGhDb250ZXh0LnBlcm1pc3Npb25zLmluY2x1ZGVzKCdyZWFkOm9yZycpKSB7XG4gICAgICAvLyBSZWd1bGFyIHVzZXJzIGdldCBsaW1pdGVkIHRvb2xzXG4gICAgICByZXR1cm4gdG9vbHMuZmlsdGVyKHQgPT4gWyd0cmFja192aXNpdG9yJywgJ2FuYWx5emVfdmlzaXRvcl9iZWhhdmlvcicsICdnZXRfcmVhbF90aW1lX3Zpc2l0b3JzJ10uaW5jbHVkZXModC5uYW1lKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRvb2xzO1xuICB9XG5cbiAgLyoqXG4gICAqIEV4ZWN1dGUgTGVhZFB1bHNlIHRvb2xzXG4gICAqL1xuICBwcm90ZWN0ZWQgYXN5bmMgY2FsbFRvb2wobmFtZTogc3RyaW5nLCBhcmdzOiBhbnksIGF1dGhDb250ZXh0OiBNQ1BBdXRoQ29udGV4dCk6IFByb21pc2U8YW55PiB7XG4gICAgc3dpdGNoIChuYW1lKSB7XG4gICAgICBjYXNlICd0cmFja192aXNpdG9yJzpcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudHJhY2tWaXNpdG9yKGFyZ3MsIGF1dGhDb250ZXh0KTtcbiAgICAgIGNhc2UgJ2FuYWx5emVfdmlzaXRvcl9iZWhhdmlvcic6XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmFuYWx5emVWaXNpdG9yQmVoYXZpb3IoYXJncywgYXV0aENvbnRleHQpO1xuICAgICAgY2FzZSAnZ2V0X2NvbnZlcnNpb25fZnVubmVsJzpcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZ2V0Q29udmVyc2lvbkZ1bm5lbChhcmdzLCBhdXRoQ29udGV4dCk7XG4gICAgICBjYXNlICdnZXRfcGFnZV9hbmFseXRpY3MnOlxuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5nZXRQYWdlQW5hbHl0aWNzKGFyZ3MsIGF1dGhDb250ZXh0KTtcbiAgICAgIGNhc2UgJ2dldF9yZWFsX3RpbWVfdmlzaXRvcnMnOlxuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5nZXRSZWFsVGltZVZpc2l0b3JzKGFyZ3MsIGF1dGhDb250ZXh0KTtcbiAgICAgIGNhc2UgJ2lkZW50aWZ5X2hpZ2hfaW50ZW50X3Zpc2l0b3JzJzpcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuaWRlbnRpZnlIaWdoSW50ZW50VmlzaXRvcnMoYXJncywgYXV0aENvbnRleHQpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IE1DUFZhbGlkYXRpb25FcnJvcihgVW5rbm93biB0b29sOiAke25hbWV9YCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCB2aXNpdG9yIGRhdGEgd2l0aCByZWFsIE1DUFZpc2l0b3JTZXNzaW9ucyBxdWVyaWVzXG4gICAqL1xuICBwcml2YXRlIGFzeW5jIGdldFZpc2l0b3JEYXRhKHF1ZXJ5OiBMZWFkUHVsc2VRdWVyeSwgYXV0aENvbnRleHQ6IE1DUEF1dGhDb250ZXh0KTogUHJvbWlzZTxhbnk+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3Qgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgIFxuICAgICAgLy8gQnVpbGQgd2hlcmUgY2xhdXNlIGZvciB2aXNpdG9yIHNlc3Npb25zXG4gICAgICBjb25zdCB3aGVyZUNsYXVzZTogYW55ID0ge1xuICAgICAgICBvcmdhbml6YXRpb25JZDogYXV0aENvbnRleHQub3JnYW5pemF0aW9uSWRcbiAgICAgIH07XG5cbiAgICAgIGlmIChxdWVyeS52aXNpdG9ySWQpIHtcbiAgICAgICAgd2hlcmVDbGF1c2UudmlzaXRvcklkID0gcXVlcnkudmlzaXRvcklkO1xuICAgICAgfVxuXG4gICAgICBpZiAocXVlcnkuZGF0ZUZyb20gfHwgcXVlcnkuZGF0ZVRvKSB7XG4gICAgICAgIHdoZXJlQ2xhdXNlLnNlc3Npb25TdGFydCA9IHt9O1xuICAgICAgICBpZiAocXVlcnkuZGF0ZUZyb20pIHtcbiAgICAgICAgICB3aGVyZUNsYXVzZS5zZXNzaW9uU3RhcnQuZ3RlID0gbmV3IERhdGUocXVlcnkuZGF0ZUZyb20pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChxdWVyeS5kYXRlVG8pIHtcbiAgICAgICAgICB3aGVyZUNsYXVzZS5zZXNzaW9uU3RhcnQubHRlID0gbmV3IERhdGUocXVlcnkuZGF0ZVRvKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBHZXQgcmVhbCB2aXNpdG9yIHNlc3Npb25zIGZyb20gTUNQIHRhYmxlXG4gICAgICBjb25zdCB2aXNpdG9yU2Vzc2lvbnMgPSBhd2FpdCBwcmlzbWEubUNQVmlzaXRvclNlc3Npb25zLmZpbmRNYW55KHtcbiAgICAgICAgd2hlcmU6IHdoZXJlQ2xhdXNlLFxuICAgICAgICB0YWtlOiBxdWVyeS5saW1pdCxcbiAgICAgICAgc2tpcDogcXVlcnkub2Zmc2V0LFxuICAgICAgICBpbmNsdWRlOiB7XG4gICAgICAgICAgb3JnYW5pemF0aW9uOiB7XG4gICAgICAgICAgICBzZWxlY3Q6IHsgaWQ6IHRydWUsIG5hbWU6IHRydWUgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgb3JkZXJCeToge1xuICAgICAgICAgIHNlc3Npb25TdGFydDogJ2Rlc2MnXG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBUcmFuc2Zvcm0gc2Vzc2lvbnMgdG8gdmlzaXRvciBmb3JtYXRcbiAgICAgIGNvbnN0IHZpc2l0b3JzID0gdmlzaXRvclNlc3Npb25zLm1hcChzZXNzaW9uID0+ICh7XG4gICAgICAgIGlkOiBzZXNzaW9uLnZpc2l0b3JJZCxcbiAgICAgICAgc2Vzc2lvbklkOiBzZXNzaW9uLnNlc3Npb25JZCxcbiAgICAgICAgb3JnYW5pemF0aW9uSWQ6IHNlc3Npb24ub3JnYW5pemF0aW9uSWQsXG4gICAgICAgIHN0YXJ0VGltZTogc2Vzc2lvbi5zZXNzaW9uU3RhcnQudG9JU09TdHJpbmcoKSxcbiAgICAgICAgZW5kVGltZTogc2Vzc2lvbi5zZXNzaW9uRW5kLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIHBhZ2VWaWV3czogc2Vzc2lvbi5wYWdlVmlld3MsXG4gICAgICAgIGR1cmF0aW9uOiBzZXNzaW9uLmR1cmF0aW9uLFxuICAgICAgICBib3VuY2U6IHNlc3Npb24uYm91bmNlUmF0ZSA+IDAuNSxcbiAgICAgICAgY29udmVydGVkOiBzZXNzaW9uLmNvbnZlcnNpb25WYWx1ZSA+IDAsXG4gICAgICAgIGludGVudFNjb3JlOiBzZXNzaW9uLmludGVudFNjb3JlLFxuICAgICAgICBnZW9Mb2NhdGlvbjoge1xuICAgICAgICAgIGNvdW50cnk6IHNlc3Npb24uY291bnRyeSxcbiAgICAgICAgICBjaXR5OiBzZXNzaW9uLmNpdHksXG4gICAgICAgICAgcmVnaW9uOiBzZXNzaW9uLnJlZ2lvblxuICAgICAgICB9LFxuICAgICAgICBkZXZpY2U6IHtcbiAgICAgICAgICB0eXBlOiBzZXNzaW9uLmRldmljZVR5cGUsXG4gICAgICAgICAgYnJvd3Nlcjogc2Vzc2lvbi5icm93c2VyLFxuICAgICAgICAgIG9zOiBzZXNzaW9uLm9wZXJhdGluZ1N5c3RlbVxuICAgICAgICB9LFxuICAgICAgICB0cmFmZmljOiB7XG4gICAgICAgICAgc291cmNlOiBzZXNzaW9uLnNvdXJjZSxcbiAgICAgICAgICBtZWRpdW06IHNlc3Npb24ubWVkaXVtLFxuICAgICAgICAgIGNhbXBhaWduOiBzZXNzaW9uLmNhbXBhaWduLFxuICAgICAgICAgIHJlZmVycmVyOiBzZXNzaW9uLnJlZmVycmVyXG4gICAgICAgIH0sXG4gICAgICAgIGVuZ2FnZW1lbnQ6IHtcbiAgICAgICAgICBzY3JvbGxEZXB0aDogc2Vzc2lvbi5zY3JvbGxEZXB0aCxcbiAgICAgICAgICB0aW1lT25QYWdlOiBzZXNzaW9uLmF2Z1RpbWVPblBhZ2UsXG4gICAgICAgICAgaW50ZXJhY3Rpb25zOiBzZXNzaW9uLmludGVyYWN0aW9ucyxcbiAgICAgICAgICBleGl0UGFnZTogc2Vzc2lvbi5leGl0UGFnZVxuICAgICAgICB9LFxuICAgICAgICBpbnNpZ2h0czogc2Vzc2lvbi5pbnNpZ2h0cyA/IEpTT04ucGFyc2Uoc2Vzc2lvbi5pbnNpZ2h0cykgOiBbXVxuICAgICAgfSkpO1xuXG4gICAgICAvLyBDYWxjdWxhdGUgc3VtbWFyeSBzdGF0aXN0aWNzXG4gICAgICBjb25zdCB0b3RhbFNlc3Npb25zID0gdmlzaXRvcnMubGVuZ3RoO1xuICAgICAgY29uc3QgdG90YWxQYWdlVmlld3MgPSB2aXNpdG9ycy5yZWR1Y2UoKHN1bSwgdikgPT4gc3VtICsgdi5wYWdlVmlld3MsIDApO1xuICAgICAgY29uc3QgYXZnRHVyYXRpb24gPSB0b3RhbFNlc3Npb25zID4gMCA/IHZpc2l0b3JzLnJlZHVjZSgoc3VtLCB2KSA9PiBzdW0gKyB2LmR1cmF0aW9uLCAwKSAvIHRvdGFsU2Vzc2lvbnMgOiAwO1xuICAgICAgY29uc3QgYm91bmNlUmF0ZSA9IHRvdGFsU2Vzc2lvbnMgPiAwID8gdmlzaXRvcnMuZmlsdGVyKHYgPT4gdi5ib3VuY2UpLmxlbmd0aCAvIHRvdGFsU2Vzc2lvbnMgOiAwO1xuICAgICAgY29uc3QgY29udmVyc2lvblJhdGUgPSB0b3RhbFNlc3Npb25zID4gMCA/IHZpc2l0b3JzLmZpbHRlcih2ID0+IHYuY29udmVydGVkKS5sZW5ndGggLyB0b3RhbFNlc3Npb25zIDogMDtcbiAgICAgIGNvbnN0IGF2Z0ludGVudFNjb3JlID0gdG90YWxTZXNzaW9ucyA+IDAgPyB2aXNpdG9ycy5yZWR1Y2UoKHN1bSwgdikgPT4gc3VtICsgdi5pbnRlbnRTY29yZSwgMCkgLyB0b3RhbFNlc3Npb25zIDogMDtcblxuICAgICAgLy8gRGV2aWNlIGFuZCBsb2NhdGlvbiBkaXN0cmlidXRpb25cbiAgICAgIGNvbnN0IGRldmljZURpc3RyaWJ1dGlvbiA9IHZpc2l0b3JzLnJlZHVjZSgoYWNjOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+LCB2KSA9PiB7XG4gICAgICAgIGFjY1t2LmRldmljZS50eXBlXSA9IChhY2Nbdi5kZXZpY2UudHlwZV0gfHwgMCkgKyAxO1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgfSwge30pO1xuXG4gICAgICBjb25zdCBjb3VudHJ5RGlzdHJpYnV0aW9uID0gdmlzaXRvcnMucmVkdWNlKChhY2M6IFJlY29yZDxzdHJpbmcsIG51bWJlcj4sIHYpID0+IHtcbiAgICAgICAgYWNjW3YuZ2VvTG9jYXRpb24uY291bnRyeV0gPSAoYWNjW3YuZ2VvTG9jYXRpb24uY291bnRyeV0gfHwgMCkgKyAxO1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgfSwge30pO1xuXG4gICAgICBjb25zdCBkdXJhdGlvbiA9IERhdGUubm93KCkgLSBzdGFydFRpbWU7XG5cbiAgICAgIC8vIExvZyByZXNvdXJjZSBhY2Nlc3NcbiAgICAgIGF3YWl0IHRoaXMubG9nTUNQUmVzb3VyY2VBY2Nlc3MoXG4gICAgICAgIGF1dGhDb250ZXh0LFxuICAgICAgICAnbGVhZHB1bHNlOi8vdmlzaXRvcnMnLFxuICAgICAgICAnTElTVCcsXG4gICAgICAgICdzdWNjZXNzJyxcbiAgICAgICAgeyBkdXJhdGlvbiwgZGF0YVNpemU6IHZpc2l0b3JzLmxlbmd0aCB9XG4gICAgICApO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICB1cmk6IFwibGVhZHB1bHNlOi8vdmlzaXRvcnNcIixcbiAgICAgICAgbWltZVR5cGU6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICB0ZXh0OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgdmlzaXRvcnMsXG4gICAgICAgICAgc3VtbWFyeToge1xuICAgICAgICAgICAgdG90YWxTZXNzaW9ucyxcbiAgICAgICAgICAgIHRvdGFsUGFnZVZpZXdzLFxuICAgICAgICAgICAgYXZlcmFnZUR1cmF0aW9uOiBNYXRoLnJvdW5kKGF2Z0R1cmF0aW9uKSxcbiAgICAgICAgICAgIGJvdW5jZVJhdGU6IE1hdGgucm91bmQoYm91bmNlUmF0ZSAqIDEwMCAqIDEwMCkgLyAxMDAsXG4gICAgICAgICAgICBjb252ZXJzaW9uUmF0ZTogTWF0aC5yb3VuZChjb252ZXJzaW9uUmF0ZSAqIDEwMCAqIDEwMCkgLyAxMDAsXG4gICAgICAgICAgICBhdmdJbnRlbnRTY29yZTogTWF0aC5yb3VuZChhdmdJbnRlbnRTY29yZSAqIDEwMCkgLyAxMDAsXG4gICAgICAgICAgICBkZXZpY2VEaXN0cmlidXRpb24sXG4gICAgICAgICAgICBjb3VudHJ5RGlzdHJpYnV0aW9uXG4gICAgICAgICAgfSxcbiAgICAgICAgICBtZXRhOiB7XG4gICAgICAgICAgICBxdWVyeToge1xuICAgICAgICAgICAgICBsaW1pdDogcXVlcnkubGltaXQsXG4gICAgICAgICAgICAgIG9mZnNldDogcXVlcnkub2Zmc2V0LFxuICAgICAgICAgICAgICBvcmdhbml6YXRpb25JZDogYXV0aENvbnRleHQub3JnYW5pemF0aW9uSWRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0b3RhbDogdmlzaXRvcnMubGVuZ3RoLFxuICAgICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgICAgICBkdXJhdGlvbixcbiAgICAgICAgICAgIHNvdXJjZTogJ01DUF9WSVNJVE9SX1NFU1NJT05TJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIC8vIExvZyBmYWlsZWQgYWNjZXNzXG4gICAgICBhd2FpdCB0aGlzLmxvZ01DUFJlc291cmNlQWNjZXNzKFxuICAgICAgICBhdXRoQ29udGV4dCxcbiAgICAgICAgJ2xlYWRwdWxzZTovL3Zpc2l0b3JzJyxcbiAgICAgICAgJ0xJU1QnLFxuICAgICAgICAnZmFpbHVyZScsXG4gICAgICAgIHsgZXJyb3JNZXNzYWdlOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJyB9XG4gICAgICApO1xuXG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5jcmVhdGVGYWxsYmFja1Jlc3BvbnNlKFxuICAgICAgICAoKSA9PiB0aGlzLmdldFZpc2l0b3JEYXRhRmFsbGJhY2socXVlcnksIGF1dGhDb250ZXh0KSxcbiAgICAgICAgJ0ZhaWxlZCB0byByZXRyaWV2ZSB2aXNpdG9yIGRhdGEgdmlhIE1DUCdcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRyYWNrIHZpc2l0b3IgdG9vbCB3aXRoIHJlYWwgZGF0YVxuICAgKi9cbiAgcHJpdmF0ZSBhc3luYyB0cmFja1Zpc2l0b3IoYXJnczogYW55LCBhdXRoQ29udGV4dDogTUNQQXV0aENvbnRleHQpOiBQcm9taXNlPGFueT4ge1xuICAgIGNvbnN0IHsgdmlzaXRvcklkLCBpbmNsdWRlSm91cm5leSA9IHRydWUsIGluY2x1ZGVIZWF0bWFwID0gZmFsc2UgfSA9IGFyZ3M7XG4gICAgY29uc3Qgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcblxuICAgIHRyeSB7XG4gICAgICAvLyBMb2cgdG9vbCBleGVjdXRpb25cbiAgICAgIGF3YWl0IHRoaXMubG9nTUNQVG9vbEV4ZWN1dGlvbihcbiAgICAgICAgYXV0aENvbnRleHQsXG4gICAgICAgICd0cmFja192aXNpdG9yJyxcbiAgICAgICAgYXJncyxcbiAgICAgICAgJ3N1Y2Nlc3MnLFxuICAgICAgICB7IGR1cmF0aW9uOiAwLCByaXNrTGV2ZWw6ICdsb3cnIH1cbiAgICAgICk7XG5cbiAgICAgIC8vIEdldCB2aXNpdG9yIHNlc3Npb25zIGZyb20gTUNQIHRhYmxlXG4gICAgICBjb25zdCB2aXNpdG9yU2Vzc2lvbnMgPSBhd2FpdCBwcmlzbWEubUNQVmlzaXRvclNlc3Npb25zLmZpbmRNYW55KHtcbiAgICAgICAgd2hlcmU6IHtcbiAgICAgICAgICB2aXNpdG9ySWQsXG4gICAgICAgICAgb3JnYW5pemF0aW9uSWQ6IGF1dGhDb250ZXh0Lm9yZ2FuaXphdGlvbklkXG4gICAgICAgIH0sXG4gICAgICAgIGluY2x1ZGU6IHtcbiAgICAgICAgICBvcmdhbml6YXRpb246IHtcbiAgICAgICAgICAgIHNlbGVjdDogeyBpZDogdHJ1ZSwgbmFtZTogdHJ1ZSB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBvcmRlckJ5OiB7XG4gICAgICAgICAgc2Vzc2lvblN0YXJ0OiAnZGVzYydcbiAgICAgICAgfSxcbiAgICAgICAgdGFrZTogMTAgLy8gTGFzdCAxMCBzZXNzaW9ucyBmb3IgYW5hbHlzaXNcbiAgICAgIH0pO1xuXG4gICAgICBpZiAodmlzaXRvclNlc3Npb25zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBjb25zdCBkdXJhdGlvbiA9IERhdGUubm93KCkgLSBzdGFydFRpbWU7XG4gICAgICAgIFxuICAgICAgICBhd2FpdCB0aGlzLmxvZ01DUFRvb2xFeGVjdXRpb24oXG4gICAgICAgICAgYXV0aENvbnRleHQsXG4gICAgICAgICAgJ3RyYWNrX3Zpc2l0b3InLFxuICAgICAgICAgIGFyZ3MsXG4gICAgICAgICAgJ2ZhaWx1cmUnLFxuICAgICAgICAgIHsgXG4gICAgICAgICAgICBkdXJhdGlvbixcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZTogJ1Zpc2l0b3Igbm90IGZvdW5kJyxcbiAgICAgICAgICAgIHJpc2tMZXZlbDogJ2xvdydcbiAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBjb250ZW50OiBbe1xuICAgICAgICAgICAgdHlwZTogXCJ0ZXh0XCIsXG4gICAgICAgICAgICB0ZXh0OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICBlcnJvcjogXCJWaXNpdG9yIG5vdCBmb3VuZFwiLFxuICAgICAgICAgICAgICB2aXNpdG9ySWRcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfV0sXG4gICAgICAgICAgaXNFcnJvcjogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICAvLyBHZXQgY3VycmVudCAobW9zdCByZWNlbnQpIHNlc3Npb25cbiAgICAgIGNvbnN0IGN1cnJlbnRTZXNzaW9uID0gdmlzaXRvclNlc3Npb25zWzBdO1xuICAgICAgXG4gICAgICAvLyBDYWxjdWxhdGUgdmlzaXRvciBwcm9maWxlIGZyb20gYWxsIHNlc3Npb25zXG4gICAgICBjb25zdCB0b3RhbFNlc3Npb25zID0gdmlzaXRvclNlc3Npb25zLmxlbmd0aDtcbiAgICAgIGNvbnN0IHRvdGFsUGFnZVZpZXdzID0gdmlzaXRvclNlc3Npb25zLnJlZHVjZSgoc3VtLCBzKSA9PiBzdW0gKyBzLnBhZ2VWaWV3cywgMCk7XG4gICAgICBjb25zdCBhdmdTZXNzaW9uRHVyYXRpb24gPSB2aXNpdG9yU2Vzc2lvbnMucmVkdWNlKChzdW0sIHMpID0+IHN1bSArIHMuZHVyYXRpb24sIDApIC8gdG90YWxTZXNzaW9ucztcbiAgICAgIGNvbnN0IHRvdGFsQ29udmVyc2lvbnMgPSB2aXNpdG9yU2Vzc2lvbnMuZmlsdGVyKHMgPT4gcy5jb252ZXJzaW9uVmFsdWUgPiAwKS5sZW5ndGg7XG4gICAgICBjb25zdCBhdmdJbnRlbnRTY29yZSA9IHZpc2l0b3JTZXNzaW9ucy5yZWR1Y2UoKHN1bSwgcykgPT4gc3VtICsgcy5pbnRlbnRTY29yZSwgMCkgLyB0b3RhbFNlc3Npb25zO1xuXG4gICAgICAvLyBEZXRlcm1pbmUgaWYgcmV0dXJuaW5nIHZpc2l0b3JcbiAgICAgIGNvbnN0IGlzUmV0dXJuaW5nID0gdG90YWxTZXNzaW9ucyA+IDE7XG4gICAgICBjb25zdCBmaXJzdFNlc3Npb25EYXRlID0gdmlzaXRvclNlc3Npb25zW3Zpc2l0b3JTZXNzaW9ucy5sZW5ndGggLSAxXS5zZXNzaW9uU3RhcnQ7XG4gICAgICBjb25zdCBsYXN0U2Vzc2lvbkRhdGUgPSB2aXNpdG9yU2Vzc2lvbnNbMF0uc2Vzc2lvblN0YXJ0O1xuXG4gICAgICAvLyBCdWlsZCB2aXNpdG9yIHByb2ZpbGVcbiAgICAgIGNvbnN0IHZpc2l0b3JEYXRhID0ge1xuICAgICAgICBpZDogdmlzaXRvcklkLFxuICAgICAgICBjdXJyZW50U2Vzc2lvbjoge1xuICAgICAgICAgIHNlc3Npb25JZDogY3VycmVudFNlc3Npb24uc2Vzc2lvbklkLFxuICAgICAgICAgIHN0YXJ0VGltZTogY3VycmVudFNlc3Npb24uc2Vzc2lvblN0YXJ0LnRvSVNPU3RyaW5nKCksXG4gICAgICAgICAgZW5kVGltZTogY3VycmVudFNlc3Npb24uc2Vzc2lvbkVuZC50b0lTT1N0cmluZygpLFxuICAgICAgICAgIGN1cnJlbnRQYWdlOiBjdXJyZW50U2Vzc2lvbi5leGl0UGFnZSB8fCBjdXJyZW50U2Vzc2lvbi5sYW5kaW5nUGFnZSxcbiAgICAgICAgICBwYWdlVmlld3M6IGN1cnJlbnRTZXNzaW9uLnBhZ2VWaWV3cyxcbiAgICAgICAgICBkdXJhdGlvbjogY3VycmVudFNlc3Npb24uZHVyYXRpb24sXG4gICAgICAgICAgaW50ZXJhY3Rpb25zOiBjdXJyZW50U2Vzc2lvbi5pbnRlcmFjdGlvbnMsXG4gICAgICAgICAgaW50ZW50U2NvcmU6IGN1cnJlbnRTZXNzaW9uLmludGVudFNjb3JlLFxuICAgICAgICAgIHNjcm9sbERlcHRoOiBjdXJyZW50U2Vzc2lvbi5zY3JvbGxEZXB0aCxcbiAgICAgICAgICBib3VuY2VkOiBjdXJyZW50U2Vzc2lvbi5ib3VuY2VSYXRlID4gMC41LFxuICAgICAgICAgIGNvbnZlcnRlZDogY3VycmVudFNlc3Npb24uY29udmVyc2lvblZhbHVlID4gMCxcbiAgICAgICAgICBjb252ZXJzaW9uVmFsdWU6IGN1cnJlbnRTZXNzaW9uLmNvbnZlcnNpb25WYWx1ZVxuICAgICAgICB9LFxuICAgICAgICBwcm9maWxlOiB7XG4gICAgICAgICAgaXNSZXR1cm5pbmcsXG4gICAgICAgICAgdG90YWxTZXNzaW9ucyxcbiAgICAgICAgICB0b3RhbFBhZ2VWaWV3cyxcbiAgICAgICAgICB0b3RhbENvbnZlcnNpb25zLFxuICAgICAgICAgIGF2ZXJhZ2VTZXNzaW9uRHVyYXRpb246IE1hdGgucm91bmQoYXZnU2Vzc2lvbkR1cmF0aW9uKSxcbiAgICAgICAgICBhdmVyYWdlSW50ZW50U2NvcmU6IE1hdGgucm91bmQoYXZnSW50ZW50U2NvcmUgKiAxMDApIC8gMTAwLFxuICAgICAgICAgIGZpcnN0U2VlbjogZmlyc3RTZXNzaW9uRGF0ZS50b0lTT1N0cmluZygpLFxuICAgICAgICAgIGxhc3RTZWVuOiBsYXN0U2Vzc2lvbkRhdGUudG9JU09TdHJpbmcoKSxcbiAgICAgICAgICBkYXlzU2luY2VGaXJzdFZpc2l0OiBNYXRoLmZsb29yKChEYXRlLm5vdygpIC0gZmlyc3RTZXNzaW9uRGF0ZS5nZXRUaW1lKCkpIC8gKDEwMDAgKiA2MCAqIDYwICogMjQpKVxuICAgICAgICB9LFxuICAgICAgICBnZW9Mb2NhdGlvbjoge1xuICAgICAgICAgIGNvdW50cnk6IGN1cnJlbnRTZXNzaW9uLmNvdW50cnksXG4gICAgICAgICAgY2l0eTogY3VycmVudFNlc3Npb24uY2l0eSxcbiAgICAgICAgICByZWdpb246IGN1cnJlbnRTZXNzaW9uLnJlZ2lvbixcbiAgICAgICAgICB0aW1lem9uZTogdGhpcy5nZXRUaW1lem9uZUZyb21Db3VudHJ5KGN1cnJlbnRTZXNzaW9uLmNvdW50cnkpXG4gICAgICAgIH0sXG4gICAgICAgIGRldmljZToge1xuICAgICAgICAgIHR5cGU6IGN1cnJlbnRTZXNzaW9uLmRldmljZVR5cGUsXG4gICAgICAgICAgYnJvd3NlcjogY3VycmVudFNlc3Npb24uYnJvd3NlcixcbiAgICAgICAgICBvczogY3VycmVudFNlc3Npb24ub3BlcmF0aW5nU3lzdGVtXG4gICAgICAgIH0sXG4gICAgICAgIHRyYWZmaWNTb3VyY2U6IHtcbiAgICAgICAgICBzb3VyY2U6IGN1cnJlbnRTZXNzaW9uLnNvdXJjZSxcbiAgICAgICAgICBtZWRpdW06IGN1cnJlbnRTZXNzaW9uLm1lZGl1bSxcbiAgICAgICAgICBjYW1wYWlnbjogY3VycmVudFNlc3Npb24uY2FtcGFpZ24sXG4gICAgICAgICAgcmVmZXJyZXI6IGN1cnJlbnRTZXNzaW9uLnJlZmVycmVyXG4gICAgICAgIH0sXG4gICAgICAgIGJlaGF2aW9yYWw6IHtcbiAgICAgICAgICBhdmdUaW1lT25QYWdlOiBjdXJyZW50U2Vzc2lvbi5hdmdUaW1lT25QYWdlLFxuICAgICAgICAgIGJvdW5jZVJhdGU6IHRoaXMuY2FsY3VsYXRlVmlzaXRvckJvdW5jZVJhdGUodmlzaXRvclNlc3Npb25zKSxcbiAgICAgICAgICBjb252ZXJzaW9uUmF0ZTogdG90YWxDb252ZXJzaW9ucyAvIHRvdGFsU2Vzc2lvbnMgKiAxMDAsXG4gICAgICAgICAgZW5nYWdlbWVudFNjb3JlOiB0aGlzLmNhbGN1bGF0ZUVuZ2FnZW1lbnRTY29yZSh2aXNpdG9yU2Vzc2lvbnMpXG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIC8vIEFkZCBqb3VybmV5IGRhdGEgaWYgcmVxdWVzdGVkXG4gICAgICBpZiAoaW5jbHVkZUpvdXJuZXkpIHtcbiAgICAgICAgdmlzaXRvckRhdGEuam91cm5leSA9IHRoaXMuYnVpbGRWaXNpdG9ySm91cm5leSh2aXNpdG9yU2Vzc2lvbnMpO1xuICAgICAgfVxuXG4gICAgICAvLyBBZGQgaW5zaWdodHNcbiAgICAgIHZpc2l0b3JEYXRhLmluc2lnaHRzID0gdGhpcy5nZW5lcmF0ZVZpc2l0b3JJbnNpZ2h0cyh2aXNpdG9yRGF0YSwgdmlzaXRvclNlc3Npb25zKTtcblxuICAgICAgY29uc3QgZHVyYXRpb24gPSBEYXRlLm5vdygpIC0gc3RhcnRUaW1lO1xuXG4gICAgICAvLyBMb2cgc3VjY2Vzc2Z1bCB0b29sIGV4ZWN1dGlvblxuICAgICAgYXdhaXQgdGhpcy5sb2dNQ1BUb29sRXhlY3V0aW9uKFxuICAgICAgICBhdXRoQ29udGV4dCxcbiAgICAgICAgJ3RyYWNrX3Zpc2l0b3InLFxuICAgICAgICBhcmdzLFxuICAgICAgICAnc3VjY2VzcycsXG4gICAgICAgIHsgXG4gICAgICAgICAgZHVyYXRpb24sXG4gICAgICAgICAgb3V0cHV0U2l6ZTogMSxcbiAgICAgICAgICByaXNrTGV2ZWw6IGluY2x1ZGVKb3VybmV5ID8gJ21lZGl1bScgOiAnbG93J1xuICAgICAgICB9XG4gICAgICApO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBjb250ZW50OiBbe1xuICAgICAgICAgIHR5cGU6IFwidGV4dFwiLFxuICAgICAgICAgIHRleHQ6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgICAgICBkYXRhOiB2aXNpdG9yRGF0YSxcbiAgICAgICAgICAgIG1ldGE6IHtcbiAgICAgICAgICAgICAgaW5jbHVkZUpvdXJuZXksXG4gICAgICAgICAgICAgIGluY2x1ZGVIZWF0bWFwLFxuICAgICAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgICAgICAgZHVyYXRpb24sXG4gICAgICAgICAgICAgIHNvdXJjZTogJ01DUF9WSVNJVE9SX1NFU1NJT05TJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH1dXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zdCBkdXJhdGlvbiA9IERhdGUubm93KCkgLSBzdGFydFRpbWU7XG4gICAgICBcbiAgICAgIC8vIExvZyBmYWlsZWQgdG9vbCBleGVjdXRpb25cbiAgICAgIGF3YWl0IHRoaXMubG9nTUNQVG9vbEV4ZWN1dGlvbihcbiAgICAgICAgYXV0aENvbnRleHQsXG4gICAgICAgICd0cmFja192aXNpdG9yJyxcbiAgICAgICAgYXJncyxcbiAgICAgICAgJ2ZhaWx1cmUnLFxuICAgICAgICB7IFxuICAgICAgICAgIGR1cmF0aW9uLFxuICAgICAgICAgIGVycm9yTWVzc2FnZTogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcicsXG4gICAgICAgICAgcmlza0xldmVsOiAnbWVkaXVtJ1xuICAgICAgICB9XG4gICAgICApO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBjb250ZW50OiBbe1xuICAgICAgICAgIHR5cGU6IFwidGV4dFwiLFxuICAgICAgICAgIHRleHQ6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgZXJyb3I6IFwiRmFpbGVkIHRvIHRyYWNrIHZpc2l0b3JcIixcbiAgICAgICAgICAgIGRldGFpbHM6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InXG4gICAgICAgICAgfSlcbiAgICAgICAgfV0sXG4gICAgICAgIGlzRXJyb3I6IHRydWVcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFuYWx5emUgdmlzaXRvciBiZWhhdmlvciB0b29sXG4gICAqL1xuICBwcml2YXRlIGFzeW5jIGFuYWx5emVWaXNpdG9yQmVoYXZpb3IoYXJnczogYW55LCBhdXRoQ29udGV4dDogTUNQQXV0aENvbnRleHQpOiBQcm9taXNlPGFueT4ge1xuICAgIGNvbnN0IHsgdmlzaXRvcklkLCBzZXNzaW9uSWQsIHRpbWVSYW5nZSA9ICc3ZCcgfSA9IGFyZ3M7XG5cbiAgICB0cnkge1xuICAgICAgLy8gUGxhY2Vob2xkZXIgYmVoYXZpb3IgYW5hbHlzaXNcbiAgICAgIGNvbnN0IGJlaGF2aW9yQW5hbHlzaXMgPSB7XG4gICAgICAgIHZpc2l0b3JJZCxcbiAgICAgICAgc2Vzc2lvbklkLFxuICAgICAgICB0aW1lUmFuZ2UsXG4gICAgICAgIGJlaGF2aW9yUGF0dGVybjoge1xuICAgICAgICAgIHBhZ2VWaWV3c1BlclNlc3Npb246IDYuNSxcbiAgICAgICAgICBhdmVyYWdlU2Vzc2lvbkR1cmF0aW9uOiA0MjAsXG4gICAgICAgICAgYm91bmNlUmF0ZTogMC4xNSxcbiAgICAgICAgICBjb252ZXJzaW9uUmF0ZTogMC4wOCxcbiAgICAgICAgICBlbmdhZ2VtZW50U2NvcmU6IDc4XG4gICAgICAgIH0sXG4gICAgICAgIGludGVyZXN0czogW1xuICAgICAgICAgIHsgY2F0ZWdvcnk6ICdQcmVtaXVtIFNlcnZpY2VzJywgc2NvcmU6IDkyIH0sXG4gICAgICAgICAgeyBjYXRlZ29yeTogJ0FuYWx5dGljcycsIHNjb3JlOiA3OCB9LFxuICAgICAgICAgIHsgY2F0ZWdvcnk6ICdBdXRvbWF0aW9uJywgc2NvcmU6IDY1IH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczoge1xuICAgICAgICAgIHRvdGFsQ2xpY2tzOiA0NSxcbiAgICAgICAgICBmb3JtU3VibWlzc2lvbnM6IDIsXG4gICAgICAgICAgZG93bmxvYWRSZXF1ZXN0czogMSxcbiAgICAgICAgICBzb2NpYWxTaGFyZXM6IDBcbiAgICAgICAgfSxcbiAgICAgICAgcHJlZGljdGlvbnM6IHtcbiAgICAgICAgICBsaWtlbGlob29kVG9Db252ZXJ0OiAwLjc0LFxuICAgICAgICAgIHRpbWVUb0NvbnZlcnNpb246ICcyLTMgZGF5cycsXG4gICAgICAgICAgcHJlZmVycmVkQ2hhbm5lbDogJ2VtYWlsJyxcbiAgICAgICAgICBuZXh0QmVzdEFjdGlvbjogJ1NlbmQgdGFyZ2V0ZWQgcHJlbWl1bSBzZXJ2aWNlIG9mZmVyJ1xuICAgICAgICB9LFxuICAgICAgICBpbnNpZ2h0czogW1xuICAgICAgICAgIFwiVmlzaXRvciBzaG93cyBoaWdoIGVuZ2FnZW1lbnQgd2l0aCBwcmVtaXVtIGNvbnRlbnRcIixcbiAgICAgICAgICBcIk11bHRpcGxlIHJldHVybiBzZXNzaW9ucyBpbmRpY2F0ZSBzdHJvbmcgaW50ZXJlc3RcIixcbiAgICAgICAgICBcIkJlaGF2aW9yIHBhdHRlcm4gc3VnZ2VzdHMgcmVhZGluZXNzIHRvIHB1cmNoYXNlXCIsXG4gICAgICAgICAgXCJSZWNvbW1lbmRlZDogU2VuZCBwZXJzb25hbGl6ZWQgb2ZmZXIgd2l0aGluIDI0IGhvdXJzXCJcbiAgICAgICAgXVxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY29udGVudDogW3tcbiAgICAgICAgICB0eXBlOiBcInRleHRcIixcbiAgICAgICAgICB0ZXh0OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgICAgZGF0YTogYmVoYXZpb3JBbmFseXNpcyxcbiAgICAgICAgICAgIG1ldGE6IHtcbiAgICAgICAgICAgICAgdGltZVJhbmdlLFxuICAgICAgICAgICAgICBhbmFseXNpc1R5cGU6ICdiZWhhdmlvcmFsJyxcbiAgICAgICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgICAgICAgIGZhbGxiYWNrVXNlZDogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH1dXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjb250ZW50OiBbe1xuICAgICAgICAgIHR5cGU6IFwidGV4dFwiLFxuICAgICAgICAgIHRleHQ6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgZXJyb3I6IFwiRmFpbGVkIHRvIGFuYWx5emUgdmlzaXRvciBiZWhhdmlvclwiLFxuICAgICAgICAgICAgZGV0YWlsczogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcidcbiAgICAgICAgICB9KVxuICAgICAgICB9XSxcbiAgICAgICAgaXNFcnJvcjogdHJ1ZVxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2V0IGNvbnZlcnNpb24gZnVubmVsIHRvb2xcbiAgICovXG4gIHByaXZhdGUgYXN5bmMgZ2V0Q29udmVyc2lvbkZ1bm5lbChhcmdzOiBhbnksIGF1dGhDb250ZXh0OiBNQ1BBdXRoQ29udGV4dCk6IFByb21pc2U8YW55PiB7XG4gICAgY29uc3QgeyBmdW5uZWxJZCwgZGF0ZVJhbmdlID0gJzMwZCcsIGluY2x1ZGVTZWdtZW50cyA9IGZhbHNlIH0gPSBhcmdzO1xuICAgIGNvbnN0IHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG5cbiAgICB0cnkge1xuICAgICAgLy8gQ2FsY3VsYXRlIGRhdGUgcmFuZ2VcbiAgICAgIGNvbnN0IGRheXNCYWNrID0gdGhpcy5wYXJzZURhdGVSYW5nZShkYXRlUmFuZ2UpO1xuICAgICAgY29uc3Qgc3RhcnREYXRlID0gbmV3IERhdGUoRGF0ZS5ub3coKSAtIGRheXNCYWNrICogMjQgKiA2MCAqIDYwICogMTAwMCk7XG5cbiAgICAgIC8vIEdldCB2aXNpdG9yIHNlc3Npb25zIGRhdGEgZm9yIGZ1bm5lbCBhbmFseXNpc1xuICAgICAgY29uc3Qgc2Vzc2lvbnMgPSBhd2FpdCBwcmlzbWEubUNQVmlzaXRvclNlc3Npb25zLmZpbmRNYW55KHtcbiAgICAgICAgd2hlcmU6IHtcbiAgICAgICAgICBvcmdhbml6YXRpb25JZDogYXV0aENvbnRleHQub3JnYW5pemF0aW9uSWQsXG4gICAgICAgICAgc2Vzc2lvblN0YXJ0OiB7XG4gICAgICAgICAgICBndGU6IHN0YXJ0RGF0ZVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgb3JkZXJCeToge1xuICAgICAgICAgIHNlc3Npb25TdGFydDogJ2FzYydcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIC8vIERlZmluZSBmdW5uZWwgc3RlcHMgYmFzZWQgb24gY29tbW9uIGN1c3RvbWVyIGpvdXJuZXlcbiAgICAgIGNvbnN0IGZ1bm5lbFN0ZXBzID0gW1xuICAgICAgICB7IG5hbWU6ICdMYW5kaW5nIFBhZ2UgVmlzaXQnLCBwYWdlUGF0dGVybjogJy8nIH0sXG4gICAgICAgIHsgbmFtZTogJ1Byb2R1Y3QvU2VydmljZSBWaWV3JywgcGFnZVBhdHRlcm46ICcvZmVhdHVyZXN8L3Byb2R1Y3RzfC9zZXJ2aWNlcycgfSxcbiAgICAgICAgeyBuYW1lOiAnUHJpY2luZyBQYWdlIFZpZXcnLCBwYWdlUGF0dGVybjogJy9wcmljaW5nJyB9LFxuICAgICAgICB7IG5hbWU6ICdDb250YWN0L0RlbW8gUmVxdWVzdCcsIHBhZ2VQYXR0ZXJuOiAnL2NvbnRhY3R8L2RlbW98L3NpZ251cCcgfSxcbiAgICAgICAgeyBuYW1lOiAnQ29udmVyc2lvbicsIGNvbnZlcnNpb25SZXF1aXJlZDogdHJ1ZSB9XG4gICAgICBdO1xuXG4gICAgICAvLyBBbmFseXplIHZpc2l0b3IgcHJvZ3Jlc3Npb24gdGhyb3VnaCBmdW5uZWxcbiAgICAgIGNvbnN0IGZ1bm5lbERhdGEgPSB0aGlzLmFuYWx5emVGdW5uZWxQcm9ncmVzc2lvbihzZXNzaW9ucywgZnVubmVsU3RlcHMpO1xuXG4gICAgICAvLyBBZGQgc2VnbWVudCBhbmFseXNpcyBpZiByZXF1ZXN0ZWRcbiAgICAgIGxldCBzZWdtZW50RGF0YSA9IHVuZGVmaW5lZDtcbiAgICAgIGlmIChpbmNsdWRlU2VnbWVudHMpIHtcbiAgICAgICAgc2VnbWVudERhdGEgPSBhd2FpdCB0aGlzLmFuYWx5emVGdW5uZWxCeVNlZ21lbnRzKHNlc3Npb25zLCBmdW5uZWxTdGVwcywgYXV0aENvbnRleHQpO1xuICAgICAgfVxuXG4gICAgICAvLyBHZW5lcmF0ZSBpbnNpZ2h0cyBiYXNlZCBvbiByZWFsIGRhdGFcbiAgICAgIGNvbnN0IGluc2lnaHRzID0gdGhpcy5nZW5lcmF0ZUZ1bm5lbEluc2lnaHRzKGZ1bm5lbERhdGEuc3RlcHMsIHNlZ21lbnREYXRhKTtcblxuICAgICAgY29uc3QgZHVyYXRpb24gPSBEYXRlLm5vdygpIC0gc3RhcnRUaW1lO1xuXG4gICAgICAvLyBMb2cgdG9vbCBleGVjdXRpb25cbiAgICAgIGF3YWl0IHRoaXMubG9nTUNQVG9vbEV4ZWN1dGlvbihcbiAgICAgICAgYXV0aENvbnRleHQsXG4gICAgICAgICdnZXRfY29udmVyc2lvbl9mdW5uZWwnLFxuICAgICAgICBhcmdzLFxuICAgICAgICAnc3VjY2VzcycsXG4gICAgICAgIHsgXG4gICAgICAgICAgZHVyYXRpb24sXG4gICAgICAgICAgb3V0cHV0U2l6ZTogZnVubmVsRGF0YS5zdGVwcy5sZW5ndGgsXG4gICAgICAgICAgcmlza0xldmVsOiAnbG93J1xuICAgICAgICB9XG4gICAgICApO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSB7XG4gICAgICAgIGZ1bm5lbElkOiBmdW5uZWxJZCB8fCAnb3JnYW5pemF0aW9uLWZ1bm5lbCcsXG4gICAgICAgIGRhdGVSYW5nZSxcbiAgICAgICAgdG90YWxTZXNzaW9uczogc2Vzc2lvbnMubGVuZ3RoLFxuICAgICAgICB0aW1lZnJhbWU6IHtcbiAgICAgICAgICBzdGFydERhdGU6IHN0YXJ0RGF0ZS50b0lTT1N0cmluZygpLFxuICAgICAgICAgIGVuZERhdGU6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgICBkYXlzQW5hbHl6ZWQ6IGRheXNCYWNrXG4gICAgICAgIH0sXG4gICAgICAgIHN0ZXBzOiBmdW5uZWxEYXRhLnN0ZXBzLFxuICAgICAgICBvdmVyYWxsQ29udmVyc2lvbjogZnVubmVsRGF0YS5vdmVyYWxsQ29udmVyc2lvbixcbiAgICAgICAgdG90YWxSZXZlbnVlOiBmdW5uZWxEYXRhLnRvdGFsUmV2ZW51ZSxcbiAgICAgICAgYXZlcmFnZU9yZGVyVmFsdWU6IGZ1bm5lbERhdGEuYXZlcmFnZU9yZGVyVmFsdWUsXG4gICAgICAgIHNlZ21lbnRzOiBzZWdtZW50RGF0YSxcbiAgICAgICAgaW5zaWdodHMsXG4gICAgICAgIHBlcmZvcm1hbmNlOiB7XG4gICAgICAgICAgYmVzdFBlcmZvcm1pbmdTdGVwOiBmdW5uZWxEYXRhLmJlc3RTdGVwLFxuICAgICAgICAgIHdvcnN0UGVyZm9ybWluZ1N0ZXA6IGZ1bm5lbERhdGEud29yc3RTdGVwLFxuICAgICAgICAgIGJpZ2dlc3REcm9wT2ZmOiBmdW5uZWxEYXRhLmJpZ2dlc3REcm9wT2ZmXG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNvbnRlbnQ6IFt7XG4gICAgICAgICAgdHlwZTogXCJ0ZXh0XCIsXG4gICAgICAgICAgdGV4dDogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgICAgIGRhdGE6IHJlc3VsdCxcbiAgICAgICAgICAgIG1ldGE6IHtcbiAgICAgICAgICAgICAgZGF0ZVJhbmdlLFxuICAgICAgICAgICAgICBpbmNsdWRlU2VnbWVudHMsXG4gICAgICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgICAgICAgICBkdXJhdGlvbixcbiAgICAgICAgICAgICAgc291cmNlOiAnTUNQX1ZJU0lUT1JfU0VTU0lPTlMnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgfV1cbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNvbnRlbnQ6IFt7XG4gICAgICAgICAgdHlwZTogXCJ0ZXh0XCIsXG4gICAgICAgICAgdGV4dDogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICBlcnJvcjogXCJGYWlsZWQgdG8gZ2V0IGNvbnZlcnNpb24gZnVubmVsXCIsXG4gICAgICAgICAgICBkZXRhaWxzOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJ1xuICAgICAgICAgIH0pXG4gICAgICAgIH1dLFxuICAgICAgICBpc0Vycm9yOiB0cnVlXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgcGFnZSBhbmFseXRpY3MgdG9vbFxuICAgKi9cbiAgcHJpdmF0ZSBhc3luYyBnZXRQYWdlQW5hbHl0aWNzKGFyZ3M6IGFueSwgYXV0aENvbnRleHQ6IE1DUEF1dGhDb250ZXh0KTogUHJvbWlzZTxhbnk+IHtcbiAgICBjb25zdCB7IHBhZ2VVcmwsIGluY2x1ZGVIZWF0bWFwID0gdHJ1ZSwgZGF0ZVJhbmdlID0gJzdkJyB9ID0gYXJncztcblxuICAgIHRyeSB7XG4gICAgICAvLyBQbGFjZWhvbGRlciBwYWdlIGFuYWx5dGljc1xuICAgICAgY29uc3QgcGFnZUFuYWx5dGljcyA9IHtcbiAgICAgICAgcGFnZVVybCxcbiAgICAgICAgZGF0ZVJhbmdlLFxuICAgICAgICBtZXRyaWNzOiB7XG4gICAgICAgICAgcGFnZVZpZXdzOiAyNTAwLFxuICAgICAgICAgIHVuaXF1ZVZpc2l0b3JzOiAxODAwLFxuICAgICAgICAgIGF2ZXJhZ2VUaW1lT25QYWdlOiAxODAsXG4gICAgICAgICAgYm91bmNlUmF0ZTogMC4zNSxcbiAgICAgICAgICBleGl0UmF0ZTogMC40MixcbiAgICAgICAgICBzY3JvbGxEZXB0aDogMC42OCxcbiAgICAgICAgICBjbGlja1Rocm91Z2hSYXRlOiAwLjE1XG4gICAgICAgIH0sXG4gICAgICAgIGhlYXRtYXBEYXRhOiBpbmNsdWRlSGVhdG1hcCA/IHtcbiAgICAgICAgICBjbGlja01hcDoge1xuICAgICAgICAgICAgaGVhZGVyTmF2OiA0NSxcbiAgICAgICAgICAgIHByaW1hcnlDVEE6IDEyMCxcbiAgICAgICAgICAgIHNlY29uZGFyeUNUQTogNjcsXG4gICAgICAgICAgICBmb290ZXI6IDIzXG4gICAgICAgICAgfSxcbiAgICAgICAgICBzY3JvbGxNYXA6IHtcbiAgICAgICAgICAgICcwLTI1JSc6IDEwMCxcbiAgICAgICAgICAgICcyNS01MCUnOiA4NSxcbiAgICAgICAgICAgICc1MC03NSUnOiA2OCxcbiAgICAgICAgICAgICc3NS0xMDAlJzogNDJcbiAgICAgICAgICB9LFxuICAgICAgICAgIGF0dGVudGlvbk1hcDoge1xuICAgICAgICAgICAgaGVybzogOC41LFxuICAgICAgICAgICAgZmVhdHVyZXM6IDYuMixcbiAgICAgICAgICAgIHByaWNpbmc6IDcuOCxcbiAgICAgICAgICAgIHRlc3RpbW9uaWFsczogNC4xXG4gICAgICAgICAgfVxuICAgICAgICB9IDogdW5kZWZpbmVkLFxuICAgICAgICBpbnNpZ2h0czogW1xuICAgICAgICAgIFwiUHJpbWFyeSBDVEEgaGFzIGdvb2QgZW5nYWdlbWVudCAoMTIwIGNsaWNrcylcIixcbiAgICAgICAgICBcIlVzZXJzIHRlbmQgdG8gZHJvcCBvZmYgYXQgNTAlIHNjcm9sbCBkZXB0aFwiLFxuICAgICAgICAgIFwiUHJpY2luZyBzZWN0aW9uIGdldHMgaGlnaCBhdHRlbnRpb24gKDcuOCBzZWNvbmRzIGF2ZXJhZ2UpXCIsXG4gICAgICAgICAgXCJDb25zaWRlciBtb3ZpbmcgdGVzdGltb25pYWxzIGhpZ2hlciB1cCB0aGUgcGFnZVwiXG4gICAgICAgIF1cbiAgICAgIH07XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNvbnRlbnQ6IFt7XG4gICAgICAgICAgdHlwZTogXCJ0ZXh0XCIsXG4gICAgICAgICAgdGV4dDogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgICAgIGRhdGE6IHBhZ2VBbmFseXRpY3MsXG4gICAgICAgICAgICBtZXRhOiB7XG4gICAgICAgICAgICAgIHBhZ2VVcmwsXG4gICAgICAgICAgICAgIGRhdGVSYW5nZSxcbiAgICAgICAgICAgICAgaW5jbHVkZUhlYXRtYXAsXG4gICAgICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgICAgICAgICBmYWxsYmFja1VzZWQ6IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICB9XVxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY29udGVudDogW3tcbiAgICAgICAgICB0eXBlOiBcInRleHRcIixcbiAgICAgICAgICB0ZXh0OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgIGVycm9yOiBcIkZhaWxlZCB0byBnZXQgcGFnZSBhbmFseXRpY3NcIixcbiAgICAgICAgICAgIGRldGFpbHM6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InXG4gICAgICAgICAgfSlcbiAgICAgICAgfV0sXG4gICAgICAgIGlzRXJyb3I6IHRydWVcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCByZWFsLXRpbWUgdmlzaXRvcnMgdG9vbCB3aXRoIGFjdHVhbCB2aXNpdG9yIHNlc3Npb24gZGF0YVxuICAgKi9cbiAgcHJpdmF0ZSBhc3luYyBnZXRSZWFsVGltZVZpc2l0b3JzKGFyZ3M6IGFueSwgYXV0aENvbnRleHQ6IE1DUEF1dGhDb250ZXh0KTogUHJvbWlzZTxhbnk+IHtcbiAgICBjb25zdCB7IGluY2x1ZGVMb2NhdGlvbiA9IHRydWUsIGluY2x1ZGVEZXZpY2UgPSB0cnVlIH0gPSBhcmdzO1xuICAgIGNvbnN0IHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG5cbiAgICB0cnkge1xuICAgICAgLy8gTG9nIHRvb2wgZXhlY3V0aW9uXG4gICAgICBhd2FpdCB0aGlzLmxvZ01DUFRvb2xFeGVjdXRpb24oXG4gICAgICAgIGF1dGhDb250ZXh0LFxuICAgICAgICAnZ2V0X3JlYWxfdGltZV92aXNpdG9ycycsXG4gICAgICAgIGFyZ3MsXG4gICAgICAgICdzdWNjZXNzJyxcbiAgICAgICAgeyBkdXJhdGlvbjogMCwgcmlza0xldmVsOiAnbG93JyB9XG4gICAgICApO1xuXG4gICAgICAvLyBEZWZpbmUgXCJyZWFsLXRpbWVcIiBhcyBzZXNzaW9ucyB0aGF0IGFyZSBzdGlsbCBhY3RpdmUgKHdpdGhpbiBsYXN0IDMwIG1pbnV0ZXMpXG4gICAgICBjb25zdCB0aGlydHlNaW51dGVzQWdvID0gbmV3IERhdGUoRGF0ZS5ub3coKSAtIDMwICogNjAgKiAxMDAwKTtcbiAgICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG5cbiAgICAgIC8vIEdldCBjdXJyZW50bHkgYWN0aXZlIHZpc2l0b3Igc2Vzc2lvbnNcbiAgICAgIGNvbnN0IGFjdGl2ZVNlc3Npb25zID0gYXdhaXQgcHJpc21hLm1DUFZpc2l0b3JTZXNzaW9ucy5maW5kTWFueSh7XG4gICAgICAgIHdoZXJlOiB7XG4gICAgICAgICAgb3JnYW5pemF0aW9uSWQ6IGF1dGhDb250ZXh0Lm9yZ2FuaXphdGlvbklkLFxuICAgICAgICAgIHNlc3Npb25TdGFydDoge1xuICAgICAgICAgICAgZ3RlOiB0aGlydHlNaW51dGVzQWdvXG4gICAgICAgICAgfSxcbiAgICAgICAgICBzZXNzaW9uRW5kOiB7XG4gICAgICAgICAgICBndGU6IHRoaXJ0eU1pbnV0ZXNBZ28gLy8gU2Vzc2lvbnMgdGhhdCBlbmRlZCByZWNlbnRseSBvciBhcmUgc3RpbGwgb25nb2luZ1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgaW5jbHVkZToge1xuICAgICAgICAgIG9yZ2FuaXphdGlvbjoge1xuICAgICAgICAgICAgc2VsZWN0OiB7IGlkOiB0cnVlLCBuYW1lOiB0cnVlIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG9yZGVyQnk6IHtcbiAgICAgICAgICBzZXNzaW9uU3RhcnQ6ICdkZXNjJ1xuICAgICAgICB9LFxuICAgICAgICB0YWtlOiA1MCAvLyBMaW1pdCBmb3IgcGVyZm9ybWFuY2VcbiAgICAgIH0pO1xuXG4gICAgICAvLyBDYWxjdWxhdGUgY3VycmVudCB2aXNpdG9yIGNvdW50ICh1bmlxdWUgdmlzaXRvcnMgaW4gbGFzdCAzMCBtaW51dGVzKVxuICAgICAgY29uc3QgdW5pcXVlVmlzaXRvcnMgPSBuZXcgU2V0KGFjdGl2ZVNlc3Npb25zLm1hcChzID0+IHMudmlzaXRvcklkKSk7XG4gICAgICBjb25zdCBjdXJyZW50VmlzaXRvcnMgPSB1bmlxdWVWaXNpdG9ycy5zaXplO1xuXG4gICAgICAvLyBDYWxjdWxhdGUgYWN0aXZlIHBhZ2VzIGJ5IGdyb3VwaW5nIGN1cnJlbnQgcGFnZSB2aWV3c1xuICAgICAgY29uc3QgcGFnZUFjdGl2aXR5ID0gYWN0aXZlU2Vzc2lvbnMucmVkdWNlKChhY2M6IFJlY29yZDxzdHJpbmcsIG51bWJlcj4sIHNlc3Npb24pID0+IHtcbiAgICAgICAgY29uc3QgY3VycmVudFBhZ2UgPSBzZXNzaW9uLmV4aXRQYWdlIHx8IHNlc3Npb24ubGFuZGluZ1BhZ2UgfHwgJy8nO1xuICAgICAgICBhY2NbY3VycmVudFBhZ2VdID0gKGFjY1tjdXJyZW50UGFnZV0gfHwgMCkgKyAxO1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgfSwge30pO1xuXG4gICAgICBjb25zdCBhY3RpdmVQYWdlcyA9IE9iamVjdC5lbnRyaWVzKHBhZ2VBY3Rpdml0eSlcbiAgICAgICAgLm1hcCgoW3BhZ2UsIHZpc2l0b3JzXSkgPT4gKHsgcGFnZSwgdmlzaXRvcnMgfSkpXG4gICAgICAgIC5zb3J0KChhLCBiKSA9PiBiLnZpc2l0b3JzIC0gYS52aXNpdG9ycylcbiAgICAgICAgLnNsaWNlKDAsIDEwKTsgLy8gVG9wIDEwIHBhZ2VzXG5cbiAgICAgIC8vIFRyYW5zZm9ybSB2aXNpdG9yIGRhdGFcbiAgICAgIGNvbnN0IHZpc2l0b3JzID0gYWN0aXZlU2Vzc2lvbnMuc2xpY2UoMCwgMjApLm1hcChzZXNzaW9uID0+IHtcbiAgICAgICAgY29uc3Qgc2Vzc2lvbkR1cmF0aW9uTXMgPSBzZXNzaW9uLnNlc3Npb25FbmQuZ2V0VGltZSgpIC0gc2Vzc2lvbi5zZXNzaW9uU3RhcnQuZ2V0VGltZSgpO1xuICAgICAgICBjb25zdCB0aW1lT25DdXJyZW50UGFnZSA9IE1hdGgubWF4KDAsIChub3cuZ2V0VGltZSgpIC0gc2Vzc2lvbi5zZXNzaW9uU3RhcnQuZ2V0VGltZSgpKSAvIDEwMDApO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBpZDogc2Vzc2lvbi52aXNpdG9ySWQsXG4gICAgICAgICAgc2Vzc2lvbklkOiBzZXNzaW9uLnNlc3Npb25JZCxcbiAgICAgICAgICBjdXJyZW50UGFnZTogc2Vzc2lvbi5leGl0UGFnZSB8fCBzZXNzaW9uLmxhbmRpbmdQYWdlLFxuICAgICAgICAgIHRpbWVPblBhZ2U6IE1hdGgucm91bmQodGltZU9uQ3VycmVudFBhZ2UpLFxuICAgICAgICAgIHNlc3Npb25EdXJhdGlvbjogTWF0aC5yb3VuZChzZXNzaW9uRHVyYXRpb25NcyAvIDEwMDApLFxuICAgICAgICAgIHBhZ2VWaWV3czogc2Vzc2lvbi5wYWdlVmlld3MsXG4gICAgICAgICAgaW50ZXJhY3Rpb25zOiBzZXNzaW9uLmludGVyYWN0aW9ucyxcbiAgICAgICAgICBpbnRlbnRTY29yZTogc2Vzc2lvbi5pbnRlbnRTY29yZSxcbiAgICAgICAgICBzY3JvbGxEZXB0aDogc2Vzc2lvbi5zY3JvbGxEZXB0aCxcbiAgICAgICAgICBpc1JldHVybmluZzogdGhpcy5pc1JldHVybmluZ1Zpc2l0b3Ioc2Vzc2lvbi52aXNpdG9ySWQsIGFjdGl2ZVNlc3Npb25zKSxcbiAgICAgICAgICBpc0NvbnZlcnRlZDogc2Vzc2lvbi5jb252ZXJzaW9uVmFsdWUgPiAwLFxuICAgICAgICAgIHRyYWZmaWNTb3VyY2U6IHtcbiAgICAgICAgICAgIHNvdXJjZTogc2Vzc2lvbi5zb3VyY2UsXG4gICAgICAgICAgICBtZWRpdW06IHNlc3Npb24ubWVkaXVtLFxuICAgICAgICAgICAgY2FtcGFpZ246IHNlc3Npb24uY2FtcGFpZ25cbiAgICAgICAgICB9LFxuICAgICAgICAgIGxvY2F0aW9uOiBpbmNsdWRlTG9jYXRpb24gPyB7XG4gICAgICAgICAgICBjb3VudHJ5OiBzZXNzaW9uLmNvdW50cnksXG4gICAgICAgICAgICBjaXR5OiBzZXNzaW9uLmNpdHksXG4gICAgICAgICAgICByZWdpb246IHNlc3Npb24ucmVnaW9uXG4gICAgICAgICAgfSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICBkZXZpY2U6IGluY2x1ZGVEZXZpY2UgPyB7XG4gICAgICAgICAgICB0eXBlOiBzZXNzaW9uLmRldmljZVR5cGUsXG4gICAgICAgICAgICBicm93c2VyOiBzZXNzaW9uLmJyb3dzZXIsXG4gICAgICAgICAgICBvczogc2Vzc2lvbi5vcGVyYXRpbmdTeXN0ZW1cbiAgICAgICAgICB9IDogdW5kZWZpbmVkXG4gICAgICAgIH07XG4gICAgICB9KTtcblxuICAgICAgLy8gQ2FsY3VsYXRlIHJlYWwtdGltZSBpbnNpZ2h0c1xuICAgICAgY29uc3QgaW5zaWdodHMgPSB0aGlzLmdlbmVyYXRlUmVhbFRpbWVJbnNpZ2h0cyhhY3RpdmVTZXNzaW9ucywgdmlzaXRvcnMsIGN1cnJlbnRWaXNpdG9ycyk7XG5cbiAgICAgIC8vIENhbGN1bGF0ZSB0cmFmZmljIHRyZW5kcyAoY29tcGFyZSB3aXRoIHByZXZpb3VzIDMwIG1pbnV0ZXMpXG4gICAgICBjb25zdCBwcmV2aW91c1BlcmlvZFN0YXJ0ID0gbmV3IERhdGUodGhpcnR5TWludXRlc0Fnby5nZXRUaW1lKCkgLSAzMCAqIDYwICogMTAwMCk7XG4gICAgICBjb25zdCBwcmV2aW91c1Nlc3Npb25zID0gYXdhaXQgcHJpc21hLm1DUFZpc2l0b3JTZXNzaW9ucy5jb3VudCh7XG4gICAgICAgIHdoZXJlOiB7XG4gICAgICAgICAgb3JnYW5pemF0aW9uSWQ6IGF1dGhDb250ZXh0Lm9yZ2FuaXphdGlvbklkLFxuICAgICAgICAgIHNlc3Npb25TdGFydDoge1xuICAgICAgICAgICAgZ3RlOiBwcmV2aW91c1BlcmlvZFN0YXJ0LFxuICAgICAgICAgICAgbHQ6IHRoaXJ0eU1pbnV0ZXNBZ29cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCB0cmFmZmljQ2hhbmdlID0gcHJldmlvdXNTZXNzaW9ucyA+IDAgXG4gICAgICAgID8gKChjdXJyZW50VmlzaXRvcnMgLSBwcmV2aW91c1Nlc3Npb25zKSAvIHByZXZpb3VzU2Vzc2lvbnMpICogMTAwIFxuICAgICAgICA6IDA7XG5cbiAgICAgIC8vIERldmljZSBhbmQgbG9jYXRpb24gc3RhdGlzdGljc1xuICAgICAgY29uc3QgZGV2aWNlU3RhdHMgPSBpbmNsdWRlRGV2aWNlID8gdGhpcy5jYWxjdWxhdGVEZXZpY2VTdGF0cyh2aXNpdG9ycykgOiB1bmRlZmluZWQ7XG4gICAgICBjb25zdCBsb2NhdGlvblN0YXRzID0gaW5jbHVkZUxvY2F0aW9uID8gdGhpcy5jYWxjdWxhdGVMb2NhdGlvblN0YXRzKHZpc2l0b3JzKSA6IHVuZGVmaW5lZDtcblxuICAgICAgY29uc3QgZHVyYXRpb24gPSBEYXRlLm5vdygpIC0gc3RhcnRUaW1lO1xuXG4gICAgICAvLyBMb2cgc3VjY2Vzc2Z1bCB0b29sIGV4ZWN1dGlvblxuICAgICAgYXdhaXQgdGhpcy5sb2dNQ1BUb29sRXhlY3V0aW9uKFxuICAgICAgICBhdXRoQ29udGV4dCxcbiAgICAgICAgJ2dldF9yZWFsX3RpbWVfdmlzaXRvcnMnLFxuICAgICAgICBhcmdzLFxuICAgICAgICAnc3VjY2VzcycsXG4gICAgICAgIHsgXG4gICAgICAgICAgZHVyYXRpb24sXG4gICAgICAgICAgb3V0cHV0U2l6ZTogdmlzaXRvcnMubGVuZ3RoLFxuICAgICAgICAgIHJpc2tMZXZlbDogJ2xvdydcbiAgICAgICAgfVxuICAgICAgKTtcblxuICAgICAgY29uc3QgcmVhbFRpbWVEYXRhID0ge1xuICAgICAgICBjdXJyZW50VmlzaXRvcnMsXG4gICAgICAgIHRyYWZmaWNUcmVuZDoge1xuICAgICAgICAgIGNoYW5nZTogTWF0aC5yb3VuZCh0cmFmZmljQ2hhbmdlICogMTAwKSAvIDEwMCxcbiAgICAgICAgICBkaXJlY3Rpb246IHRyYWZmaWNDaGFuZ2UgPiAwID8gJ2luY3JlYXNpbmcnIDogdHJhZmZpY0NoYW5nZSA8IDAgPyAnZGVjcmVhc2luZycgOiAnc3RhYmxlJyxcbiAgICAgICAgICBwcmV2aW91c1BlcmlvZFZpc2l0b3JzOiBwcmV2aW91c1Nlc3Npb25zXG4gICAgICAgIH0sXG4gICAgICAgIGFjdGl2ZVBhZ2VzLFxuICAgICAgICB2aXNpdG9ycyxcbiAgICAgICAgZGV2aWNlU3RhdHMsXG4gICAgICAgIGxvY2F0aW9uU3RhdHMsXG4gICAgICAgIGluc2lnaHRzLFxuICAgICAgICBzZXNzaW9uU3RhdHM6IHtcbiAgICAgICAgICB0b3RhbEFjdGl2ZVNlc3Npb25zOiBhY3RpdmVTZXNzaW9ucy5sZW5ndGgsXG4gICAgICAgICAgYXZnU2Vzc2lvbkR1cmF0aW9uOiBhY3RpdmVTZXNzaW9ucy5sZW5ndGggPiAwIFxuICAgICAgICAgICAgPyBNYXRoLnJvdW5kKGFjdGl2ZVNlc3Npb25zLnJlZHVjZSgoc3VtLCBzKSA9PiBzdW0gKyBzLmR1cmF0aW9uLCAwKSAvIGFjdGl2ZVNlc3Npb25zLmxlbmd0aClcbiAgICAgICAgICAgIDogMCxcbiAgICAgICAgICBhdmdQYWdlVmlld3M6IGFjdGl2ZVNlc3Npb25zLmxlbmd0aCA+IDAgXG4gICAgICAgICAgICA/IE1hdGgucm91bmQoYWN0aXZlU2Vzc2lvbnMucmVkdWNlKChzdW0sIHMpID0+IHN1bSArIHMucGFnZVZpZXdzLCAwKSAvIGFjdGl2ZVNlc3Npb25zLmxlbmd0aCAqIDEwMCkgLyAxMDBcbiAgICAgICAgICAgIDogMCxcbiAgICAgICAgICBhdmdJbnRlbnRTY29yZTogYWN0aXZlU2Vzc2lvbnMubGVuZ3RoID4gMCBcbiAgICAgICAgICAgID8gTWF0aC5yb3VuZChhY3RpdmVTZXNzaW9ucy5yZWR1Y2UoKHN1bSwgcykgPT4gc3VtICsgcy5pbnRlbnRTY29yZSwgMCkgLyBhY3RpdmVTZXNzaW9ucy5sZW5ndGggKiAxMDApIC8gMTAwXG4gICAgICAgICAgICA6IDAsXG4gICAgICAgICAgY29udmVyc2lvblJhdGU6IGFjdGl2ZVNlc3Npb25zLmxlbmd0aCA+IDAgXG4gICAgICAgICAgICA/IE1hdGgucm91bmQoYWN0aXZlU2Vzc2lvbnMuZmlsdGVyKHMgPT4gcy5jb252ZXJzaW9uVmFsdWUgPiAwKS5sZW5ndGggLyBhY3RpdmVTZXNzaW9ucy5sZW5ndGggKiAxMDAgKiAxMDApIC8gMTAwXG4gICAgICAgICAgICA6IDBcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY29udGVudDogW3tcbiAgICAgICAgICB0eXBlOiBcInRleHRcIixcbiAgICAgICAgICB0ZXh0OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgICAgZGF0YTogcmVhbFRpbWVEYXRhLFxuICAgICAgICAgICAgbWV0YToge1xuICAgICAgICAgICAgICBpbmNsdWRlTG9jYXRpb24sXG4gICAgICAgICAgICAgIGluY2x1ZGVEZXZpY2UsXG4gICAgICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgICAgICAgICBkdXJhdGlvbixcbiAgICAgICAgICAgICAgdGltZVdpbmRvdzogJzMwIG1pbnV0ZXMnLFxuICAgICAgICAgICAgICBzb3VyY2U6ICdNQ1BfVklTSVRPUl9TRVNTSU9OUydcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICB9XVxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc3QgZHVyYXRpb24gPSBEYXRlLm5vdygpIC0gc3RhcnRUaW1lO1xuICAgICAgXG4gICAgICAvLyBMb2cgZmFpbGVkIHRvb2wgZXhlY3V0aW9uXG4gICAgICBhd2FpdCB0aGlzLmxvZ01DUFRvb2xFeGVjdXRpb24oXG4gICAgICAgIGF1dGhDb250ZXh0LFxuICAgICAgICAnZ2V0X3JlYWxfdGltZV92aXNpdG9ycycsXG4gICAgICAgIGFyZ3MsXG4gICAgICAgICdmYWlsdXJlJyxcbiAgICAgICAgeyBcbiAgICAgICAgICBkdXJhdGlvbixcbiAgICAgICAgICBlcnJvck1lc3NhZ2U6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InLFxuICAgICAgICAgIHJpc2tMZXZlbDogJ21lZGl1bSdcbiAgICAgICAgfVxuICAgICAgKTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY29udGVudDogW3tcbiAgICAgICAgICB0eXBlOiBcInRleHRcIixcbiAgICAgICAgICB0ZXh0OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgIGVycm9yOiBcIkZhaWxlZCB0byBnZXQgcmVhbC10aW1lIHZpc2l0b3JzXCIsXG4gICAgICAgICAgICBkZXRhaWxzOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJ1xuICAgICAgICAgIH0pXG4gICAgICAgIH1dLFxuICAgICAgICBpc0Vycm9yOiB0cnVlXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJZGVudGlmeSBoaWdoIGludGVudCB2aXNpdG9ycyB0b29sIHdpdGggcmVhbCBkYXRhXG4gICAqL1xuICBwcml2YXRlIGFzeW5jIGlkZW50aWZ5SGlnaEludGVudFZpc2l0b3JzKGFyZ3M6IGFueSwgYXV0aENvbnRleHQ6IE1DUEF1dGhDb250ZXh0KTogUHJvbWlzZTxhbnk+IHtcbiAgICBjb25zdCB7IHRocmVzaG9sZCA9IDcwLCBsaW1pdCA9IDIwIH0gPSBhcmdzO1xuICAgIGNvbnN0IHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG5cbiAgICB0cnkge1xuICAgICAgLy8gTG9nIHRvb2wgZXhlY3V0aW9uXG4gICAgICBhd2FpdCB0aGlzLmxvZ01DUFRvb2xFeGVjdXRpb24oXG4gICAgICAgIGF1dGhDb250ZXh0LFxuICAgICAgICAnaWRlbnRpZnlfaGlnaF9pbnRlbnRfdmlzaXRvcnMnLFxuICAgICAgICBhcmdzLFxuICAgICAgICAnc3VjY2VzcycsXG4gICAgICAgIHsgZHVyYXRpb246IDAsIHJpc2tMZXZlbDogJ2xvdycgfVxuICAgICAgKTtcblxuICAgICAgLy8gR2V0IGhpZ2ggaW50ZW50IHZpc2l0b3JzIGZyb20gcmVhbCBzZXNzaW9uIGRhdGFcbiAgICAgIGNvbnN0IGhpZ2hJbnRlbnRTZXNzaW9ucyA9IGF3YWl0IHByaXNtYS5tQ1BWaXNpdG9yU2Vzc2lvbnMuZmluZE1hbnkoe1xuICAgICAgICB3aGVyZToge1xuICAgICAgICAgIG9yZ2FuaXphdGlvbklkOiBhdXRoQ29udGV4dC5vcmdhbml6YXRpb25JZCxcbiAgICAgICAgICBpbnRlbnRTY29yZToge1xuICAgICAgICAgICAgZ3RlOiB0aHJlc2hvbGRcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNlc3Npb25TdGFydDoge1xuICAgICAgICAgICAgZ3RlOiBuZXcgRGF0ZShEYXRlLm5vdygpIC0gMjQgKiA2MCAqIDYwICogMTAwMCkgLy8gTGFzdCAyNCBob3Vyc1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgaW5jbHVkZToge1xuICAgICAgICAgIG9yZ2FuaXphdGlvbjoge1xuICAgICAgICAgICAgc2VsZWN0OiB7IGlkOiB0cnVlLCBuYW1lOiB0cnVlIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG9yZGVyQnk6IHtcbiAgICAgICAgICBpbnRlbnRTY29yZTogJ2Rlc2MnXG4gICAgICAgIH0sXG4gICAgICAgIHRha2U6IGxpbWl0XG4gICAgICB9KTtcblxuICAgICAgLy8gVHJhbnNmb3JtIHRvIGhpZ2ggaW50ZW50IHZpc2l0b3IgZm9ybWF0XG4gICAgICBjb25zdCBoaWdoSW50ZW50VmlzaXRvcnMgPSBhd2FpdCBQcm9taXNlLmFsbChoaWdoSW50ZW50U2Vzc2lvbnMubWFwKGFzeW5jIChzZXNzaW9uKSA9PiB7XG4gICAgICAgIC8vIEdldCBoaXN0b3JpY2FsIHNlc3Npb25zIGZvciB0aGlzIHZpc2l0b3IgdG8gZGV0ZXJtaW5lIGJlaGF2aW9yIHBhdHRlcm5zXG4gICAgICAgIGNvbnN0IHZpc2l0b3JTZXNzaW9ucyA9IGF3YWl0IHByaXNtYS5tQ1BWaXNpdG9yU2Vzc2lvbnMuZmluZE1hbnkoe1xuICAgICAgICAgIHdoZXJlOiB7XG4gICAgICAgICAgICB2aXNpdG9ySWQ6IHNlc3Npb24udmlzaXRvcklkLFxuICAgICAgICAgICAgb3JnYW5pemF0aW9uSWQ6IGF1dGhDb250ZXh0Lm9yZ2FuaXphdGlvbklkXG4gICAgICAgICAgfSxcbiAgICAgICAgICBvcmRlckJ5OiB7XG4gICAgICAgICAgICBzZXNzaW9uU3RhcnQ6ICdkZXNjJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgdGFrZTogMTBcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gQW5hbHl6ZSB2aXNpdG9yIGJlaGF2aW9yIHBhdHRlcm5zXG4gICAgICAgIGNvbnN0IHNpZ25hbHMgPSB0aGlzLmFuYWx5emVWaXNpdG9yU2lnbmFscyhzZXNzaW9uLCB2aXNpdG9yU2Vzc2lvbnMpO1xuICAgICAgICBjb25zdCByZWNvbW1lbmRhdGlvbiA9IHRoaXMuZ2VuZXJhdGVSZWNvbW1lbmRhdGlvbihzZXNzaW9uLCBzaWduYWxzKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGlkOiBzZXNzaW9uLnZpc2l0b3JJZCxcbiAgICAgICAgICBzZXNzaW9uSWQ6IHNlc3Npb24uc2Vzc2lvbklkLFxuICAgICAgICAgIGludGVudFNjb3JlOiBzZXNzaW9uLmludGVudFNjb3JlLFxuICAgICAgICAgIGN1cnJlbnRQYWdlOiBzZXNzaW9uLmV4aXRQYWdlIHx8IHNlc3Npb24ubGFuZGluZ1BhZ2UsXG4gICAgICAgICAgc2Vzc2lvbkR1cmF0aW9uOiBzZXNzaW9uLmR1cmF0aW9uLFxuICAgICAgICAgIHBhZ2VWaWV3czogc2Vzc2lvbi5wYWdlVmlld3MsXG4gICAgICAgICAgaW50ZXJhY3Rpb25zOiBzZXNzaW9uLmludGVyYWN0aW9ucyxcbiAgICAgICAgICBzY3JvbGxEZXB0aDogc2Vzc2lvbi5zY3JvbGxEZXB0aCxcbiAgICAgICAgICBjb252ZXJzaW9uVmFsdWU6IHNlc3Npb24uY29udmVyc2lvblZhbHVlLFxuICAgICAgICAgIHNpZ25hbHMsXG4gICAgICAgICAgcHJvZmlsZToge1xuICAgICAgICAgICAgaXNSZXR1cm5pbmc6IHZpc2l0b3JTZXNzaW9ucy5sZW5ndGggPiAxLFxuICAgICAgICAgICAgdG90YWxTZXNzaW9uczogdmlzaXRvclNlc3Npb25zLmxlbmd0aCxcbiAgICAgICAgICAgIHRvdGFsUGFnZVZpZXdzOiB2aXNpdG9yU2Vzc2lvbnMucmVkdWNlKChzdW0sIHMpID0+IHN1bSArIHMucGFnZVZpZXdzLCAwKSxcbiAgICAgICAgICAgIGF2Z1Nlc3Npb25EdXJhdGlvbjogTWF0aC5yb3VuZCh2aXNpdG9yU2Vzc2lvbnMucmVkdWNlKChzdW0sIHMpID0+IHN1bSArIHMuZHVyYXRpb24sIDApIC8gdmlzaXRvclNlc3Npb25zLmxlbmd0aCksXG4gICAgICAgICAgICBsYXN0U2Vlbjogc2Vzc2lvbi5zZXNzaW9uU3RhcnQudG9JU09TdHJpbmcoKSxcbiAgICAgICAgICAgIGxvY2F0aW9uOiB7XG4gICAgICAgICAgICAgIGNvdW50cnk6IHNlc3Npb24uY291bnRyeSxcbiAgICAgICAgICAgICAgY2l0eTogc2Vzc2lvbi5jaXR5LFxuICAgICAgICAgICAgICByZWdpb246IHNlc3Npb24ucmVnaW9uXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGV2aWNlOiB7XG4gICAgICAgICAgICAgIHR5cGU6IHNlc3Npb24uZGV2aWNlVHlwZSxcbiAgICAgICAgICAgICAgYnJvd3Nlcjogc2Vzc2lvbi5icm93c2VyLFxuICAgICAgICAgICAgICBvczogc2Vzc2lvbi5vcGVyYXRpbmdTeXN0ZW1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHRyYWZmaWNTb3VyY2U6IHtcbiAgICAgICAgICAgIHNvdXJjZTogc2Vzc2lvbi5zb3VyY2UsXG4gICAgICAgICAgICBtZWRpdW06IHNlc3Npb24ubWVkaXVtLFxuICAgICAgICAgICAgY2FtcGFpZ246IHNlc3Npb24uY2FtcGFpZ24sXG4gICAgICAgICAgICByZWZlcnJlcjogc2Vzc2lvbi5yZWZlcnJlclxuICAgICAgICAgIH0sXG4gICAgICAgICAgcmVjb21tZW5kYXRpb25cbiAgICAgICAgfTtcbiAgICAgIH0pKTtcblxuICAgICAgLy8gQ2FsY3VsYXRlIGluc2lnaHRzXG4gICAgICBjb25zdCB0b3RhbENvdW50ID0gaGlnaEludGVudFZpc2l0b3JzLmxlbmd0aDtcbiAgICAgIGNvbnN0IGF2ZXJhZ2VJbnRlbnRTY29yZSA9IHRvdGFsQ291bnQgPiAwIFxuICAgICAgICA/IGhpZ2hJbnRlbnRWaXNpdG9ycy5yZWR1Y2UoKHN1bSwgdikgPT4gc3VtICsgdi5pbnRlbnRTY29yZSwgMCkgLyB0b3RhbENvdW50IFxuICAgICAgICA6IDA7XG4gICAgICBcbiAgICAgIGNvbnN0IHJldHVybmluZ1Zpc2l0b3JzID0gaGlnaEludGVudFZpc2l0b3JzLmZpbHRlcih2ID0+IHYucHJvZmlsZS5pc1JldHVybmluZykubGVuZ3RoO1xuICAgICAgY29uc3QgY29udmVydGVkVmlzaXRvcnMgPSBoaWdoSW50ZW50VmlzaXRvcnMuZmlsdGVyKHYgPT4gdi5jb252ZXJzaW9uVmFsdWUgPiAwKS5sZW5ndGg7XG4gICAgICBjb25zdCBtb2JpbGVWaXNpdG9ycyA9IGhpZ2hJbnRlbnRWaXNpdG9ycy5maWx0ZXIodiA9PiB2LnByb2ZpbGUuZGV2aWNlLnR5cGUgPT09ICdtb2JpbGUnKS5sZW5ndGg7XG5cbiAgICAgIGNvbnN0IGluc2lnaHRzID0gW1xuICAgICAgICBgJHt0b3RhbENvdW50fSB2aXNpdG9ycyBhYm92ZSAke3RocmVzaG9sZH0lIGludGVudCB0aHJlc2hvbGQgaW4gbGFzdCAyNCBob3Vyc2AsXG4gICAgICAgIGBBdmVyYWdlIGludGVudCBzY29yZTogJHtNYXRoLnJvdW5kKGF2ZXJhZ2VJbnRlbnRTY29yZSl9JWAsXG4gICAgICAgIGAke01hdGgucm91bmQoKHJldHVybmluZ1Zpc2l0b3JzIC8gdG90YWxDb3VudCkgKiAxMDApfSUgYXJlIHJldHVybmluZyB2aXNpdG9ycyBzaG93aW5nIGNvbnRpbnVlZCBpbnRlcmVzdGAsXG4gICAgICAgIGAke2NvbnZlcnRlZFZpc2l0b3JzfSBoYXZlIGFscmVhZHkgY29udmVydGVkIGluIHRoZWlyIGN1cnJlbnQgc2Vzc2lvbmAsXG4gICAgICAgIGAke01hdGgucm91bmQoKG1vYmlsZVZpc2l0b3JzIC8gdG90YWxDb3VudCkgKiAxMDApfSUgYXJlIGJyb3dzaW5nIG9uIG1vYmlsZSBkZXZpY2VzYCxcbiAgICAgICAgXCJSZWNvbW1lbmQgaW1tZWRpYXRlIHBlcnNvbmFsaXplZCBvdXRyZWFjaCBmb3IgYmVzdCBjb252ZXJzaW9uIHJhdGVzXCJcbiAgICAgIF07XG5cbiAgICAgIGNvbnN0IGR1cmF0aW9uID0gRGF0ZS5ub3coKSAtIHN0YXJ0VGltZTtcblxuICAgICAgLy8gTG9nIHN1Y2Nlc3NmdWwgdG9vbCBleGVjdXRpb25cbiAgICAgIGF3YWl0IHRoaXMubG9nTUNQVG9vbEV4ZWN1dGlvbihcbiAgICAgICAgYXV0aENvbnRleHQsXG4gICAgICAgICdpZGVudGlmeV9oaWdoX2ludGVudF92aXNpdG9ycycsXG4gICAgICAgIGFyZ3MsXG4gICAgICAgICdzdWNjZXNzJyxcbiAgICAgICAgeyBcbiAgICAgICAgICBkdXJhdGlvbixcbiAgICAgICAgICBvdXRwdXRTaXplOiB0b3RhbENvdW50LFxuICAgICAgICAgIHJpc2tMZXZlbDogJ21lZGl1bScgLy8gSGlnaGVyIHJpc2sgZHVlIHRvIHZpc2l0b3IgaWRlbnRpZmljYXRpb25cbiAgICAgICAgfVxuICAgICAgKTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY29udGVudDogW3tcbiAgICAgICAgICB0eXBlOiBcInRleHRcIixcbiAgICAgICAgICB0ZXh0OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICB2aXNpdG9yczogaGlnaEludGVudFZpc2l0b3JzLFxuICAgICAgICAgICAgICB0b3RhbENvdW50LFxuICAgICAgICAgICAgICBhdmVyYWdlSW50ZW50U2NvcmU6IE1hdGgucm91bmQoYXZlcmFnZUludGVudFNjb3JlICogMTAwKSAvIDEwMCxcbiAgICAgICAgICAgICAgc3RhdGlzdGljczoge1xuICAgICAgICAgICAgICAgIHJldHVybmluZ1Zpc2l0b3JzLFxuICAgICAgICAgICAgICAgIGNvbnZlcnRlZFZpc2l0b3JzLFxuICAgICAgICAgICAgICAgIG1vYmlsZVZpc2l0b3JzLFxuICAgICAgICAgICAgICAgIHJldHVybmluZ1BlcmNlbnRhZ2U6IE1hdGgucm91bmQoKHJldHVybmluZ1Zpc2l0b3JzIC8gdG90YWxDb3VudCkgKiAxMDApLFxuICAgICAgICAgICAgICAgIGNvbnZlcnNpb25SYXRlOiBNYXRoLnJvdW5kKChjb252ZXJ0ZWRWaXNpdG9ycyAvIHRvdGFsQ291bnQpICogMTAwICogMTAwKSAvIDEwMCxcbiAgICAgICAgICAgICAgICBtb2JpbGVQZXJjZW50YWdlOiBNYXRoLnJvdW5kKChtb2JpbGVWaXNpdG9ycyAvIHRvdGFsQ291bnQpICogMTAwKVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBpbnNpZ2h0c1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1ldGE6IHtcbiAgICAgICAgICAgICAgdGhyZXNob2xkLFxuICAgICAgICAgICAgICBsaW1pdCxcbiAgICAgICAgICAgICAgdGltZVJhbmdlOiAnMjQgaG91cnMnLFxuICAgICAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgICAgICAgZHVyYXRpb24sXG4gICAgICAgICAgICAgIHNvdXJjZTogJ01DUF9WSVNJVE9SX1NFU1NJT05TJ1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH1dXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zdCBkdXJhdGlvbiA9IERhdGUubm93KCkgLSBzdGFydFRpbWU7XG4gICAgICBcbiAgICAgIC8vIExvZyBmYWlsZWQgdG9vbCBleGVjdXRpb25cbiAgICAgIGF3YWl0IHRoaXMubG9nTUNQVG9vbEV4ZWN1dGlvbihcbiAgICAgICAgYXV0aENvbnRleHQsXG4gICAgICAgICdpZGVudGlmeV9oaWdoX2ludGVudF92aXNpdG9ycycsXG4gICAgICAgIGFyZ3MsXG4gICAgICAgICdmYWlsdXJlJyxcbiAgICAgICAgeyBcbiAgICAgICAgICBkdXJhdGlvbixcbiAgICAgICAgICBlcnJvck1lc3NhZ2U6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InLFxuICAgICAgICAgIHJpc2tMZXZlbDogJ21lZGl1bSdcbiAgICAgICAgfVxuICAgICAgKTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY29udGVudDogW3tcbiAgICAgICAgICB0eXBlOiBcInRleHRcIixcbiAgICAgICAgICB0ZXh0OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgIGVycm9yOiBcIkZhaWxlZCB0byBpZGVudGlmeSBoaWdoIGludGVudCB2aXNpdG9yc1wiLFxuICAgICAgICAgICAgZGV0YWlsczogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcidcbiAgICAgICAgICB9KVxuICAgICAgICB9XSxcbiAgICAgICAgaXNFcnJvcjogdHJ1ZVxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRmFsbGJhY2sgbWV0aG9kcyBmb3IgTGVhZFB1bHNlIGRhdGFcbiAgICovXG4gIHByaXZhdGUgYXN5bmMgZ2V0VmlzaXRvckRhdGFGYWxsYmFjayhxdWVyeTogTGVhZFB1bHNlUXVlcnksIGF1dGhDb250ZXh0OiBNQ1BBdXRoQ29udGV4dCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZpc2l0b3JzOiBbXSxcbiAgICAgIG1ldGE6IHtcbiAgICAgICAgdG90YWw6IDAsXG4gICAgICAgIG9mZnNldDogcXVlcnkub2Zmc2V0LFxuICAgICAgICBsaW1pdDogcXVlcnkubGltaXQsXG4gICAgICAgIGZhbGxiYWNrVXNlZDogdHJ1ZSxcbiAgICAgICAgbWVzc2FnZTogXCJWaXNpdG9yIGRhdGEgZmFsbGJhY2sgLSBpbXBsZW1lbnRhdGlvbiBuZWVkZWRcIlxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogR2V0IHNlc3Npb24gZGF0YSAocGxhY2Vob2xkZXIpXG4gICAqL1xuICBwcml2YXRlIGFzeW5jIGdldFNlc3Npb25EYXRhKHF1ZXJ5OiBMZWFkUHVsc2VRdWVyeSwgYXV0aENvbnRleHQ6IE1DUEF1dGhDb250ZXh0KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdXJpOiBcImxlYWRwdWxzZTovL3Nlc3Npb25zXCIsXG4gICAgICBtaW1lVHlwZTogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICB0ZXh0OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIG1lc3NhZ2U6IFwiU2Vzc2lvbiBkYXRhIGZ1bmN0aW9uYWxpdHkgY29taW5nIHNvb25cIixcbiAgICAgICAgZmFsbGJhY2tVc2VkOiB0cnVlXG4gICAgICB9KVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogR2V0IGhlYXRtYXAgZGF0YSAocGxhY2Vob2xkZXIpXG4gICAqL1xuICBwcml2YXRlIGFzeW5jIGdldEhlYXRtYXBEYXRhKHF1ZXJ5OiBMZWFkUHVsc2VRdWVyeSwgYXV0aENvbnRleHQ6IE1DUEF1dGhDb250ZXh0KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdXJpOiBcImxlYWRwdWxzZTovL2hlYXRtYXBzXCIsXG4gICAgICBtaW1lVHlwZTogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICB0ZXh0OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIG1lc3NhZ2U6IFwiSGVhdG1hcCBkYXRhIGZ1bmN0aW9uYWxpdHkgY29taW5nIHNvb25cIixcbiAgICAgICAgZmFsbGJhY2tVc2VkOiB0cnVlXG4gICAgICB9KVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogR2V0IGpvdXJuZXkgZGF0YSAocGxhY2Vob2xkZXIpXG4gICAqL1xuICBwcml2YXRlIGFzeW5jIGdldEpvdXJuZXlEYXRhKHF1ZXJ5OiBMZWFkUHVsc2VRdWVyeSwgYXV0aENvbnRleHQ6IE1DUEF1dGhDb250ZXh0KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdXJpOiBcImxlYWRwdWxzZTovL2pvdXJuZXlzXCIsXG4gICAgICBtaW1lVHlwZTogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICB0ZXh0OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIG1lc3NhZ2U6IFwiSm91cm5leSBkYXRhIGZ1bmN0aW9uYWxpdHkgY29taW5nIHNvb25cIixcbiAgICAgICAgZmFsbGJhY2tVc2VkOiB0cnVlXG4gICAgICB9KVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogR2V0IGNvbnZlcnNpb24gZGF0YSAocGxhY2Vob2xkZXIpXG4gICAqL1xuICBwcml2YXRlIGFzeW5jIGdldENvbnZlcnNpb25EYXRhKHF1ZXJ5OiBMZWFkUHVsc2VRdWVyeSwgYXV0aENvbnRleHQ6IE1DUEF1dGhDb250ZXh0KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdXJpOiBcImxlYWRwdWxzZTovL2NvbnZlcnNpb25zXCIsXG4gICAgICBtaW1lVHlwZTogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICB0ZXh0OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIG1lc3NhZ2U6IFwiQ29udmVyc2lvbiBkYXRhIGZ1bmN0aW9uYWxpdHkgY29taW5nIHNvb25cIixcbiAgICAgICAgZmFsbGJhY2tVc2VkOiB0cnVlXG4gICAgICB9KVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogR2V0IGFuYWx5dGljcyBkYXRhIChwbGFjZWhvbGRlcilcbiAgICovXG4gIHByaXZhdGUgYXN5bmMgZ2V0QW5hbHl0aWNzRGF0YShxdWVyeTogTGVhZFB1bHNlUXVlcnksIGF1dGhDb250ZXh0OiBNQ1BBdXRoQ29udGV4dCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVyaTogXCJsZWFkcHVsc2U6Ly9hbmFseXRpY3NcIixcbiAgICAgIG1pbWVUeXBlOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgIHRleHQ6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgbWVzc2FnZTogXCJBbmFseXRpY3MgZGF0YSBmdW5jdGlvbmFsaXR5IGNvbWluZyBzb29uXCIsXG4gICAgICAgIGZhbGxiYWNrVXNlZDogdHJ1ZVxuICAgICAgfSlcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEhlbHBlciBtZXRob2RzIGZvciB2aXNpdG9yIGFuYWx5c2lzXG4gICAqL1xuICBcbiAgLyoqXG4gICAqIEdldCB0aW1lem9uZSBmcm9tIGNvdW50cnkgY29kZVxuICAgKi9cbiAgcHJpdmF0ZSBnZXRUaW1lem9uZUZyb21Db3VudHJ5KGNvdW50cnk6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgY29uc3QgdGltZXpvbmVNYXA6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7XG4gICAgICAnTmlnZXJpYSc6ICdBZnJpY2EvTGFnb3MnLFxuICAgICAgJ0tlbnlhJzogJ0FmcmljYS9OYWlyb2JpJyxcbiAgICAgICdHaGFuYSc6ICdBZnJpY2EvQWNjcmEnLFxuICAgICAgJ1NvdXRoIEFmcmljYSc6ICdBZnJpY2EvSm9oYW5uZXNidXJnJyxcbiAgICAgICdFZ3lwdCc6ICdBZnJpY2EvQ2Fpcm8nLFxuICAgICAgJ01vcm9jY28nOiAnQWZyaWNhL0Nhc2FibGFuY2EnLFxuICAgICAgJ1RhbnphbmlhJzogJ0FmcmljYS9EYXJfZXNfU2FsYWFtJyxcbiAgICAgICdVZ2FuZGEnOiAnQWZyaWNhL0thbXBhbGEnLFxuICAgICAgJ1J3YW5kYSc6ICdBZnJpY2EvS2lnYWxpJyxcbiAgICAgICdaYW1iaWEnOiAnQWZyaWNhL0x1c2FrYSdcbiAgICB9O1xuICAgIHJldHVybiB0aW1lem9uZU1hcFtjb3VudHJ5XSB8fCAnVVRDJztcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgdmlzaXRvciBib3VuY2UgcmF0ZSBhY3Jvc3Mgc2Vzc2lvbnNcbiAgICovXG4gIHByaXZhdGUgY2FsY3VsYXRlVmlzaXRvckJvdW5jZVJhdGUoc2Vzc2lvbnM6IGFueVtdKTogbnVtYmVyIHtcbiAgICBpZiAoc2Vzc2lvbnMubGVuZ3RoID09PSAwKSByZXR1cm4gMDtcbiAgICBjb25zdCBib3VuY2VkU2Vzc2lvbnMgPSBzZXNzaW9ucy5maWx0ZXIocyA9PiBzLmJvdW5jZVJhdGUgPiAwLjUpLmxlbmd0aDtcbiAgICByZXR1cm4gKGJvdW5jZWRTZXNzaW9ucyAvIHNlc3Npb25zLmxlbmd0aCkgKiAxMDA7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIGVuZ2FnZW1lbnQgc2NvcmUgYmFzZWQgb24gdmlzaXRvciBiZWhhdmlvclxuICAgKi9cbiAgcHJpdmF0ZSBjYWxjdWxhdGVFbmdhZ2VtZW50U2NvcmUoc2Vzc2lvbnM6IGFueVtdKTogbnVtYmVyIHtcbiAgICBpZiAoc2Vzc2lvbnMubGVuZ3RoID09PSAwKSByZXR1cm4gMDtcblxuICAgIGxldCBzY29yZSA9IDA7XG4gICAgY29uc3Qgd2VpZ2h0cyA9IHtcbiAgICAgIHNlc3Npb25EdXJhdGlvbjogMC4zLFxuICAgICAgcGFnZVZpZXdzOiAwLjI1LFxuICAgICAgaW50ZXJhY3Rpb25zOiAwLjIsXG4gICAgICBzY3JvbGxEZXB0aDogMC4xNSxcbiAgICAgIGNvbnZlcnNpb25zOiAwLjFcbiAgICB9O1xuXG4gICAgLy8gQXZlcmFnZSBzZXNzaW9uIGR1cmF0aW9uIChub3JtYWxpemVkIHRvIDAtMTAwKVxuICAgIGNvbnN0IGF2Z0R1cmF0aW9uID0gc2Vzc2lvbnMucmVkdWNlKChzdW0sIHMpID0+IHN1bSArIHMuZHVyYXRpb24sIDApIC8gc2Vzc2lvbnMubGVuZ3RoO1xuICAgIHNjb3JlICs9IE1hdGgubWluKGF2Z0R1cmF0aW9uIC8gMzAwLCAxKSAqIDEwMCAqIHdlaWdodHMuc2Vzc2lvbkR1cmF0aW9uOyAvLyA1IG1pbnV0ZXMgPSAxMDAlXG5cbiAgICAvLyBBdmVyYWdlIHBhZ2Ugdmlld3MgcGVyIHNlc3Npb25cbiAgICBjb25zdCBhdmdQYWdlVmlld3MgPSBzZXNzaW9ucy5yZWR1Y2UoKHN1bSwgcykgPT4gc3VtICsgcy5wYWdlVmlld3MsIDApIC8gc2Vzc2lvbnMubGVuZ3RoO1xuICAgIHNjb3JlICs9IE1hdGgubWluKGF2Z1BhZ2VWaWV3cyAvIDEwLCAxKSAqIDEwMCAqIHdlaWdodHMucGFnZVZpZXdzOyAvLyAxMCBwYWdlcyA9IDEwMCVcblxuICAgIC8vIEF2ZXJhZ2UgaW50ZXJhY3Rpb25zXG4gICAgY29uc3QgYXZnSW50ZXJhY3Rpb25zID0gc2Vzc2lvbnMucmVkdWNlKChzdW0sIHMpID0+IHN1bSArIHMuaW50ZXJhY3Rpb25zLCAwKSAvIHNlc3Npb25zLmxlbmd0aDtcbiAgICBzY29yZSArPSBNYXRoLm1pbihhdmdJbnRlcmFjdGlvbnMgLyAyMCwgMSkgKiAxMDAgKiB3ZWlnaHRzLmludGVyYWN0aW9uczsgLy8gMjAgaW50ZXJhY3Rpb25zID0gMTAwJVxuXG4gICAgLy8gQXZlcmFnZSBzY3JvbGwgZGVwdGhcbiAgICBjb25zdCBhdmdTY3JvbGxEZXB0aCA9IHNlc3Npb25zLnJlZHVjZSgoc3VtLCBzKSA9PiBzdW0gKyBzLnNjcm9sbERlcHRoLCAwKSAvIHNlc3Npb25zLmxlbmd0aDtcbiAgICBzY29yZSArPSBhdmdTY3JvbGxEZXB0aCAqIDEwMCAqIHdlaWdodHMuc2Nyb2xsRGVwdGg7XG5cbiAgICAvLyBDb252ZXJzaW9uIGJvbnVzXG4gICAgY29uc3QgY29udmVyc2lvbnMgPSBzZXNzaW9ucy5maWx0ZXIocyA9PiBzLmNvbnZlcnNpb25WYWx1ZSA+IDApLmxlbmd0aDtcbiAgICBzY29yZSArPSAoY29udmVyc2lvbnMgLyBzZXNzaW9ucy5sZW5ndGgpICogMTAwICogd2VpZ2h0cy5jb252ZXJzaW9ucztcblxuICAgIHJldHVybiBNYXRoLnJvdW5kKHNjb3JlICogMTAwKSAvIDEwMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBCdWlsZCB2aXNpdG9yIGpvdXJuZXkgZnJvbSBzZXNzaW9uc1xuICAgKi9cbiAgcHJpdmF0ZSBidWlsZFZpc2l0b3JKb3VybmV5KHNlc3Npb25zOiBhbnlbXSk6IGFueVtdIHtcbiAgICBjb25zdCBqb3VybmV5OiBhbnlbXSA9IFtdO1xuXG4gICAgc2Vzc2lvbnMucmV2ZXJzZSgpLmZvckVhY2goKHNlc3Npb24sIHNlc3Npb25JbmRleCkgPT4ge1xuICAgICAgLy8gQWRkIHNlc3Npb24gc3RhcnRcbiAgICAgIGpvdXJuZXkucHVzaCh7XG4gICAgICAgIHRpbWVzdGFtcDogc2Vzc2lvbi5zZXNzaW9uU3RhcnQudG9JU09TdHJpbmcoKSxcbiAgICAgICAgYWN0aW9uOiAnc2Vzc2lvbl9zdGFydCcsXG4gICAgICAgIHNlc3Npb25JZDogc2Vzc2lvbi5zZXNzaW9uSWQsXG4gICAgICAgIHBhZ2U6IHNlc3Npb24ubGFuZGluZ1BhZ2UsXG4gICAgICAgIHNvdXJjZTogc2Vzc2lvbi5zb3VyY2UsXG4gICAgICAgIG1lZGl1bTogc2Vzc2lvbi5tZWRpdW0sXG4gICAgICAgIGNhbXBhaWduOiBzZXNzaW9uLmNhbXBhaWduXG4gICAgICB9KTtcblxuICAgICAgLy8gU2ltdWxhdGUgcGFnZSB2aWV3cyBiYXNlZCBvbiBzZXNzaW9uIGRhdGFcbiAgICAgIGNvbnN0IHBhZ2VWaWV3cyA9IE1hdGgubWF4KDEsIHNlc3Npb24ucGFnZVZpZXdzKTtcbiAgICAgIGNvbnN0IHNlc3Npb25EdXJhdGlvbiA9IHNlc3Npb24uZHVyYXRpb247XG4gICAgICBjb25zdCB0aW1lUGVyUGFnZSA9IHNlc3Npb25EdXJhdGlvbiAvIHBhZ2VWaWV3cztcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYWdlVmlld3M7IGkrKykge1xuICAgICAgICBjb25zdCBwYWdlVGltZXN0YW1wID0gbmV3IERhdGUoc2Vzc2lvbi5zZXNzaW9uU3RhcnQuZ2V0VGltZSgpICsgKGkgKiB0aW1lUGVyUGFnZSAqIDEwMDApKTtcbiAgICAgICAgam91cm5leS5wdXNoKHtcbiAgICAgICAgICB0aW1lc3RhbXA6IHBhZ2VUaW1lc3RhbXAudG9JU09TdHJpbmcoKSxcbiAgICAgICAgICBhY3Rpb246ICdwYWdlX3ZpZXcnLFxuICAgICAgICAgIHBhZ2U6IGkgPT09IDAgPyBzZXNzaW9uLmxhbmRpbmdQYWdlIDogKGkgPT09IHBhZ2VWaWV3cyAtIDEgPyBzZXNzaW9uLmV4aXRQYWdlIDogYC9wYWdlLSR7aSArIDF9YCksXG4gICAgICAgICAgZHVyYXRpb246IE1hdGgucm91bmQodGltZVBlclBhZ2UpLFxuICAgICAgICAgIHNjcm9sbERlcHRoOiBzZXNzaW9uLnNjcm9sbERlcHRoLFxuICAgICAgICAgIGludGVyYWN0aW9uczogTWF0aC5yb3VuZChzZXNzaW9uLmludGVyYWN0aW9ucyAvIHBhZ2VWaWV3cylcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIEFkZCBjb252ZXJzaW9uIGV2ZW50IGlmIGFwcGxpY2FibGVcbiAgICAgIGlmIChzZXNzaW9uLmNvbnZlcnNpb25WYWx1ZSA+IDApIHtcbiAgICAgICAgam91cm5leS5wdXNoKHtcbiAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKHNlc3Npb24uc2Vzc2lvbkVuZC5nZXRUaW1lKCkgLSAzMDAwMCkudG9JU09TdHJpbmcoKSwgLy8gMzAgc2Vjb25kcyBiZWZvcmUgc2Vzc2lvbiBlbmRcbiAgICAgICAgICBhY3Rpb246ICdjb252ZXJzaW9uJyxcbiAgICAgICAgICBwYWdlOiBzZXNzaW9uLmV4aXRQYWdlLFxuICAgICAgICAgIHZhbHVlOiBzZXNzaW9uLmNvbnZlcnNpb25WYWx1ZSxcbiAgICAgICAgICBjb252ZXJzaW9uVHlwZTogJ3B1cmNoYXNlJyAvLyBDb3VsZCBiZSBkZXRlcm1pbmVkIGZyb20gZGF0YVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gQWRkIHNlc3Npb24gZW5kXG4gICAgICBqb3VybmV5LnB1c2goe1xuICAgICAgICB0aW1lc3RhbXA6IHNlc3Npb24uc2Vzc2lvbkVuZC50b0lTT1N0cmluZygpLFxuICAgICAgICBhY3Rpb246ICdzZXNzaW9uX2VuZCcsXG4gICAgICAgIHNlc3Npb25JZDogc2Vzc2lvbi5zZXNzaW9uSWQsXG4gICAgICAgIHBhZ2U6IHNlc3Npb24uZXhpdFBhZ2UsXG4gICAgICAgIGR1cmF0aW9uOiBzZXNzaW9uLmR1cmF0aW9uLFxuICAgICAgICBib3VuY2VkOiBzZXNzaW9uLmJvdW5jZVJhdGUgPiAwLjVcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGpvdXJuZXk7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGUgaW5zaWdodHMgZm9yIHZpc2l0b3IgYmVoYXZpb3JcbiAgICovXG4gIHByaXZhdGUgZ2VuZXJhdGVWaXNpdG9ySW5zaWdodHModmlzaXRvckRhdGE6IGFueSwgc2Vzc2lvbnM6IGFueVtdKTogc3RyaW5nW10ge1xuICAgIGNvbnN0IGluc2lnaHRzOiBzdHJpbmdbXSA9IFtdO1xuICAgIGNvbnN0IHByb2ZpbGUgPSB2aXNpdG9yRGF0YS5wcm9maWxlO1xuICAgIGNvbnN0IGN1cnJlbnQgPSB2aXNpdG9yRGF0YS5jdXJyZW50U2Vzc2lvbjtcbiAgICBjb25zdCBiZWhhdmlvcmFsID0gdmlzaXRvckRhdGEuYmVoYXZpb3JhbDtcblxuICAgIC8vIEludGVudCBzY29yZSBpbnNpZ2h0c1xuICAgIGlmIChjdXJyZW50LmludGVudFNjb3JlID4gODApIHtcbiAgICAgIGluc2lnaHRzLnB1c2goYEhpZ2ggaW50ZW50IHZpc2l0b3IgLSAke2N1cnJlbnQuaW50ZW50U2NvcmV9JSBpbnRlbnQgc2NvcmUgaW5kaWNhdGVzIHN0cm9uZyBwdXJjaGFzZSBsaWtlbGlob29kYCk7XG4gICAgfSBlbHNlIGlmIChjdXJyZW50LmludGVudFNjb3JlID4gNjApIHtcbiAgICAgIGluc2lnaHRzLnB1c2goYE1vZGVyYXRlIGludGVudCB2aXNpdG9yIC0gJHtjdXJyZW50LmludGVudFNjb3JlfSUgaW50ZW50IHNjb3JlIHNob3dzIGludGVyZXN0YCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluc2lnaHRzLnB1c2goYExvdyBpbnRlbnQgdmlzaXRvciAtICR7Y3VycmVudC5pbnRlbnRTY29yZX0lIGludGVudCBzY29yZSBzdWdnZXN0cyBlYXJseSBzdGFnZSBleHBsb3JhdGlvbmApO1xuICAgIH1cblxuICAgIC8vIEVuZ2FnZW1lbnQgaW5zaWdodHNcbiAgICBpZiAoYmVoYXZpb3JhbC5lbmdhZ2VtZW50U2NvcmUgPiA3MCkge1xuICAgICAgaW5zaWdodHMucHVzaChgSGlnaGx5IGVuZ2FnZWQgdmlzaXRvciAtICR7YmVoYXZpb3JhbC5lbmdhZ2VtZW50U2NvcmUudG9GaXhlZCgxKX0gZW5nYWdlbWVudCBzY29yZWApO1xuICAgIH0gZWxzZSBpZiAoYmVoYXZpb3JhbC5lbmdhZ2VtZW50U2NvcmUgPiA0MCkge1xuICAgICAgaW5zaWdodHMucHVzaChgTW9kZXJhdGVseSBlbmdhZ2VkIHZpc2l0b3IgLSAke2JlaGF2aW9yYWwuZW5nYWdlbWVudFNjb3JlLnRvRml4ZWQoMSl9IGVuZ2FnZW1lbnQgc2NvcmVgKTtcbiAgICB9XG5cbiAgICAvLyBTZXNzaW9uIGluc2lnaHRzXG4gICAgaWYgKGN1cnJlbnQucGFnZVZpZXdzID4gNSkge1xuICAgICAgaW5zaWdodHMucHVzaChgRW5nYWdlZCB1c2VyIC0gJHtjdXJyZW50LnBhZ2VWaWV3c30gcGFnZSB2aWV3cyBpbiBjdXJyZW50IHNlc3Npb24gc2hvd3Mgc3Ryb25nIGludGVyZXN0YCk7XG4gICAgfVxuXG4gICAgaWYgKGN1cnJlbnQuZHVyYXRpb24gPiAzMDApIHsgLy8gNSBtaW51dGVzXG4gICAgICBpbnNpZ2h0cy5wdXNoKGBFeHRlbmRlZCBzZXNzaW9uIC0gJHtNYXRoLnJvdW5kKGN1cnJlbnQuZHVyYXRpb24gLyA2MCl9IG1pbnV0ZXMgaW5kaWNhdGVzIHNlcmlvdXMgY29uc2lkZXJhdGlvbmApO1xuICAgIH1cblxuICAgIC8vIFJldHVybmluZyB2aXNpdG9yIGluc2lnaHRzXG4gICAgaWYgKHByb2ZpbGUuaXNSZXR1cm5pbmcpIHtcbiAgICAgIGluc2lnaHRzLnB1c2goYFJldHVybmluZyB2aXNpdG9yIC0gJHtwcm9maWxlLnRvdGFsU2Vzc2lvbnN9IHRvdGFsIHNlc3Npb25zIHNob3dzIGNvbnRpbnVlZCBpbnRlcmVzdGApO1xuICAgICAgXG4gICAgICBpZiAocHJvZmlsZS5kYXlzU2luY2VGaXJzdFZpc2l0ID4gNykge1xuICAgICAgICBpbnNpZ2h0cy5wdXNoKGBMb25nLXRlcm0gaW50ZXJlc3QgLSBmaXJzdCB2aXNpdGVkICR7cHJvZmlsZS5kYXlzU2luY2VGaXJzdFZpc2l0fSBkYXlzIGFnb2ApO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpbnNpZ2h0cy5wdXNoKFwiTmV3IHZpc2l0b3IgLSBmaXJzdC10aW1lIHZpc2l0IHJlcHJlc2VudHMgYWNxdWlzaXRpb24gb3Bwb3J0dW5pdHlcIik7XG4gICAgfVxuXG4gICAgLy8gQ29udmVyc2lvbiBpbnNpZ2h0c1xuICAgIGlmIChwcm9maWxlLnRvdGFsQ29udmVyc2lvbnMgPiAwKSB7XG4gICAgICBpbnNpZ2h0cy5wdXNoKGBDb252ZXJ0aW5nIHZpc2l0b3IgLSAke3Byb2ZpbGUudG90YWxDb252ZXJzaW9uc30gcHJldmlvdXMgY29udmVyc2lvbnNgKTtcbiAgICB9IGVsc2UgaWYgKGJlaGF2aW9yYWwuY29udmVyc2lvblJhdGUgPiAwKSB7XG4gICAgICBpbnNpZ2h0cy5wdXNoKFwiQ29udmVyc2lvbiBwb3RlbnRpYWwgLSBiZWhhdmlvcmFsIHBhdHRlcm5zIHN1Z2dlc3QgcmVhZGluZXNzIHRvIGNvbnZlcnRcIik7XG4gICAgfVxuXG4gICAgLy8gR2VvZ3JhcGhpYyBpbnNpZ2h0c1xuICAgIGlmICh2aXNpdG9yRGF0YS5nZW9Mb2NhdGlvbi5jb3VudHJ5ID09PSAnTmlnZXJpYScpIHtcbiAgICAgIGluc2lnaHRzLnB1c2goXCJOaWdlcmlhbiB2aXNpdG9yIC0gb3B0aW1pemUgZm9yIG1vYmlsZSBleHBlcmllbmNlIGFuZCBsb2NhbCBwYXltZW50IG1ldGhvZHNcIik7XG4gICAgfVxuXG4gICAgLy8gRGV2aWNlIGluc2lnaHRzXG4gICAgaWYgKHZpc2l0b3JEYXRhLmRldmljZS50eXBlID09PSAnbW9iaWxlJykge1xuICAgICAgaW5zaWdodHMucHVzaChcIk1vYmlsZSB2aXNpdG9yIC0gZW5zdXJlIG1vYmlsZS1vcHRpbWl6ZWQgZXhwZXJpZW5jZSBhbmQgV2hhdHNBcHAgaW50ZWdyYXRpb25cIik7XG4gICAgfVxuXG4gICAgLy8gQm91bmNlIHJhdGUgaW5zaWdodHNcbiAgICBpZiAoYmVoYXZpb3JhbC5ib3VuY2VSYXRlIDwgMjApIHtcbiAgICAgIGluc2lnaHRzLnB1c2goXCJMb3cgYm91bmNlIHJhdGUgaW5kaWNhdGVzIHN0cm9uZyBjb250ZW50IGVuZ2FnZW1lbnRcIik7XG4gICAgfSBlbHNlIGlmIChiZWhhdmlvcmFsLmJvdW5jZVJhdGUgPiA2MCkge1xuICAgICAgaW5zaWdodHMucHVzaChcIkhpZ2ggYm91bmNlIHJhdGUgc3VnZ2VzdHMgbmVlZCBmb3IgY29udGVudCBvcHRpbWl6YXRpb25cIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGluc2lnaHRzO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIHZpc2l0b3IgaXMgcmV0dXJuaW5nIGJhc2VkIG9uIHZpc2l0b3IgSUQgb2NjdXJyZW5jZVxuICAgKi9cbiAgcHJpdmF0ZSBpc1JldHVybmluZ1Zpc2l0b3IodmlzaXRvcklkOiBzdHJpbmcsIHNlc3Npb25zOiBhbnlbXSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBzZXNzaW9ucy5maWx0ZXIocyA9PiBzLnZpc2l0b3JJZCA9PT0gdmlzaXRvcklkKS5sZW5ndGggPiAxO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIHJlYWwtdGltZSBpbnNpZ2h0cyBiYXNlZCBvbiBjdXJyZW50IGFjdGl2aXR5XG4gICAqL1xuICBwcml2YXRlIGdlbmVyYXRlUmVhbFRpbWVJbnNpZ2h0cyhhY3RpdmVTZXNzaW9uczogYW55W10sIHZpc2l0b3JzOiBhbnlbXSwgY3VycmVudFZpc2l0b3JzOiBudW1iZXIpOiBzdHJpbmdbXSB7XG4gICAgY29uc3QgaW5zaWdodHM6IHN0cmluZ1tdID0gW107XG5cbiAgICBpZiAoY3VycmVudFZpc2l0b3JzID09PSAwKSB7XG4gICAgICBpbnNpZ2h0cy5wdXNoKFwiTm8gYWN0aXZlIHZpc2l0b3JzIGN1cnJlbnRseSBvbiB0aGUgc2l0ZVwiKTtcbiAgICAgIHJldHVybiBpbnNpZ2h0cztcbiAgICB9XG5cbiAgICAvLyBUcmFmZmljIGxldmVsIGluc2lnaHRzXG4gICAgaWYgKGN1cnJlbnRWaXNpdG9ycyA+IDIwKSB7XG4gICAgICBpbnNpZ2h0cy5wdXNoKGBIaWdoIHRyYWZmaWMgcGVyaW9kIC0gJHtjdXJyZW50VmlzaXRvcnN9IGFjdGl2ZSB2aXNpdG9yc2ApO1xuICAgIH0gZWxzZSBpZiAoY3VycmVudFZpc2l0b3JzID4gNSkge1xuICAgICAgaW5zaWdodHMucHVzaChgTW9kZXJhdGUgdHJhZmZpYyAtICR7Y3VycmVudFZpc2l0b3JzfSBhY3RpdmUgdmlzaXRvcnNgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5zaWdodHMucHVzaChgTG93IHRyYWZmaWMgcGVyaW9kIC0gJHtjdXJyZW50VmlzaXRvcnN9IGFjdGl2ZSB2aXNpdG9yc2ApO1xuICAgIH1cblxuICAgIC8vIERldmljZSBkaXN0cmlidXRpb24gaW5zaWdodHNcbiAgICBjb25zdCBtb2JpbGVWaXNpdG9ycyA9IHZpc2l0b3JzLmZpbHRlcih2ID0+IHYuZGV2aWNlPy50eXBlID09PSAnbW9iaWxlJykubGVuZ3RoO1xuICAgIGNvbnN0IG1vYmlsZVBlcmNlbnRhZ2UgPSB2aXNpdG9ycy5sZW5ndGggPiAwID8gKG1vYmlsZVZpc2l0b3JzIC8gdmlzaXRvcnMubGVuZ3RoKSAqIDEwMCA6IDA7XG4gICAgXG4gICAgaWYgKG1vYmlsZVBlcmNlbnRhZ2UgPiA3MCkge1xuICAgICAgaW5zaWdodHMucHVzaChgJHtNYXRoLnJvdW5kKG1vYmlsZVBlcmNlbnRhZ2UpfSUgb2YgdmlzaXRvcnMgYXJlIG9uIG1vYmlsZSBkZXZpY2VzYCk7XG4gICAgfVxuXG4gICAgLy8gR2VvZ3JhcGhpYyBpbnNpZ2h0c1xuICAgIGNvbnN0IGNvdW50cmllcyA9IG5ldyBTZXQodmlzaXRvcnMubWFwKHYgPT4gdi5sb2NhdGlvbj8uY291bnRyeSkuZmlsdGVyKEJvb2xlYW4pKTtcbiAgICBpZiAoY291bnRyaWVzLnNpemUgPiAxKSB7XG4gICAgICBpbnNpZ2h0cy5wdXNoKGBWaXNpdG9ycyBmcm9tICR7Y291bnRyaWVzLnNpemV9IGNvdW50cmllcyBjdXJyZW50bHkgYWN0aXZlYCk7XG4gICAgfVxuXG4gICAgLy8gSGlnaCBpbnRlbnQgdmlzaXRvcnNcbiAgICBjb25zdCBoaWdoSW50ZW50VmlzaXRvcnMgPSB2aXNpdG9ycy5maWx0ZXIodiA9PiB2LmludGVudFNjb3JlID4gNzApLmxlbmd0aDtcbiAgICBpZiAoaGlnaEludGVudFZpc2l0b3JzID4gMCkge1xuICAgICAgaW5zaWdodHMucHVzaChgJHtoaWdoSW50ZW50VmlzaXRvcnN9IGhpZ2gtaW50ZW50IHZpc2l0b3JzICg+NzAlIGludGVudCBzY29yZSkgY3VycmVudGx5IGJyb3dzaW5nYCk7XG4gICAgfVxuXG4gICAgLy8gU2Vzc2lvbiBkdXJhdGlvbiBpbnNpZ2h0c1xuICAgIGNvbnN0IGxvbmdTZXNzaW9ucyA9IHZpc2l0b3JzLmZpbHRlcih2ID0+IHYuc2Vzc2lvbkR1cmF0aW9uID4gMzAwKS5sZW5ndGg7IC8vID4gNSBtaW51dGVzXG4gICAgaWYgKGxvbmdTZXNzaW9ucyA+IDApIHtcbiAgICAgIGluc2lnaHRzLnB1c2goYCR7bG9uZ1Nlc3Npb25zfSB2aXNpdG9ycyBoYXZlIGJlZW4gYnJvd3NpbmcgZm9yIG92ZXIgNSBtaW51dGVzYCk7XG4gICAgfVxuXG4gICAgLy8gUGFnZSBwb3B1bGFyaXR5XG4gICAgY29uc3QgYXZnUGFnZVZpZXdzID0gdmlzaXRvcnMubGVuZ3RoID4gMCBcbiAgICAgID8gdmlzaXRvcnMucmVkdWNlKChzdW0sIHYpID0+IHN1bSArIHYucGFnZVZpZXdzLCAwKSAvIHZpc2l0b3JzLmxlbmd0aCBcbiAgICAgIDogMDtcbiAgICBcbiAgICBpZiAoYXZnUGFnZVZpZXdzID4gMykge1xuICAgICAgaW5zaWdodHMucHVzaChgSGlnaCBlbmdhZ2VtZW50IC0gYXZlcmFnZSAke01hdGgucm91bmQoYXZnUGFnZVZpZXdzICogMTApIC8gMTB9IHBhZ2VzIHBlciBzZXNzaW9uYCk7XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuaW5nIHZpc2l0b3JzXG4gICAgY29uc3QgcmV0dXJuaW5nVmlzaXRvcnMgPSB2aXNpdG9ycy5maWx0ZXIodiA9PiB2LmlzUmV0dXJuaW5nKS5sZW5ndGg7XG4gICAgaWYgKHJldHVybmluZ1Zpc2l0b3JzID4gMCkge1xuICAgICAgY29uc3QgcmV0dXJuaW5nUGVyY2VudGFnZSA9IChyZXR1cm5pbmdWaXNpdG9ycyAvIHZpc2l0b3JzLmxlbmd0aCkgKiAxMDA7XG4gICAgICBpbnNpZ2h0cy5wdXNoKGAke01hdGgucm91bmQocmV0dXJuaW5nUGVyY2VudGFnZSl9JSBhcmUgcmV0dXJuaW5nIHZpc2l0b3JzYCk7XG4gICAgfVxuXG4gICAgLy8gQ29udmVyc2lvbiBpbnNpZ2h0c1xuICAgIGNvbnN0IGNvbnZlcnRlZFZpc2l0b3JzID0gdmlzaXRvcnMuZmlsdGVyKHYgPT4gdi5pc0NvbnZlcnRlZCkubGVuZ3RoO1xuICAgIGlmIChjb252ZXJ0ZWRWaXNpdG9ycyA+IDApIHtcbiAgICAgIGluc2lnaHRzLnB1c2goYCR7Y29udmVydGVkVmlzaXRvcnN9IHZpc2l0b3JzIGhhdmUgY29udmVydGVkIGluIHRoZWlyIGN1cnJlbnQgc2Vzc2lvbmApO1xuICAgIH1cblxuICAgIHJldHVybiBpbnNpZ2h0cztcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgZGV2aWNlIHN0YXRpc3RpY3MgZm9yIHJlYWwtdGltZSBkYXRhXG4gICAqL1xuICBwcml2YXRlIGNhbGN1bGF0ZURldmljZVN0YXRzKHZpc2l0b3JzOiBhbnlbXSk6IGFueSB7XG4gICAgaWYgKHZpc2l0b3JzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIG51bGw7XG5cbiAgICBjb25zdCBkZXZpY2VUeXBlcyA9IHZpc2l0b3JzLnJlZHVjZSgoYWNjOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+LCB2KSA9PiB7XG4gICAgICBpZiAodi5kZXZpY2U/LnR5cGUpIHtcbiAgICAgICAgYWNjW3YuZGV2aWNlLnR5cGVdID0gKGFjY1t2LmRldmljZS50eXBlXSB8fCAwKSArIDE7XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcblxuICAgIGNvbnN0IGJyb3dzZXJzID0gdmlzaXRvcnMucmVkdWNlKChhY2M6IFJlY29yZDxzdHJpbmcsIG51bWJlcj4sIHYpID0+IHtcbiAgICAgIGlmICh2LmRldmljZT8uYnJvd3Nlcikge1xuICAgICAgICBhY2Nbdi5kZXZpY2UuYnJvd3Nlcl0gPSAoYWNjW3YuZGV2aWNlLmJyb3dzZXJdIHx8IDApICsgMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xuXG4gICAgY29uc3Qgb3BlcmF0aW5nU3lzdGVtcyA9IHZpc2l0b3JzLnJlZHVjZSgoYWNjOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+LCB2KSA9PiB7XG4gICAgICBpZiAodi5kZXZpY2U/Lm9zKSB7XG4gICAgICAgIGFjY1t2LmRldmljZS5vc10gPSAoYWNjW3YuZGV2aWNlLm9zXSB8fCAwKSArIDE7XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcblxuICAgIHJldHVybiB7XG4gICAgICBkZXZpY2VUeXBlcyxcbiAgICAgIGJyb3dzZXJzLFxuICAgICAgb3BlcmF0aW5nU3lzdGVtcyxcbiAgICAgIG1vYmlsZVBlcmNlbnRhZ2U6IGRldmljZVR5cGVzLm1vYmlsZSA/IChkZXZpY2VUeXBlcy5tb2JpbGUgLyB2aXNpdG9ycy5sZW5ndGgpICogMTAwIDogMFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIGxvY2F0aW9uIHN0YXRpc3RpY3MgZm9yIHJlYWwtdGltZSBkYXRhXG4gICAqL1xuICBwcml2YXRlIGNhbGN1bGF0ZUxvY2F0aW9uU3RhdHModmlzaXRvcnM6IGFueVtdKTogYW55IHtcbiAgICBpZiAodmlzaXRvcnMubGVuZ3RoID09PSAwKSByZXR1cm4gbnVsbDtcblxuICAgIGNvbnN0IGNvdW50cmllcyA9IHZpc2l0b3JzLnJlZHVjZSgoYWNjOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+LCB2KSA9PiB7XG4gICAgICBpZiAodi5sb2NhdGlvbj8uY291bnRyeSkge1xuICAgICAgICBhY2Nbdi5sb2NhdGlvbi5jb3VudHJ5XSA9IChhY2Nbdi5sb2NhdGlvbi5jb3VudHJ5XSB8fCAwKSArIDE7XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcblxuICAgIGNvbnN0IGNpdGllcyA9IHZpc2l0b3JzLnJlZHVjZSgoYWNjOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+LCB2KSA9PiB7XG4gICAgICBpZiAodi5sb2NhdGlvbj8uY2l0eSkge1xuICAgICAgICBhY2Nbdi5sb2NhdGlvbi5jaXR5XSA9IChhY2Nbdi5sb2NhdGlvbi5jaXR5XSB8fCAwKSArIDE7XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcblxuICAgIGNvbnN0IHJlZ2lvbnMgPSB2aXNpdG9ycy5yZWR1Y2UoKGFjYzogUmVjb3JkPHN0cmluZywgbnVtYmVyPiwgdikgPT4ge1xuICAgICAgaWYgKHYubG9jYXRpb24/LnJlZ2lvbikge1xuICAgICAgICBhY2Nbdi5sb2NhdGlvbi5yZWdpb25dID0gKGFjY1t2LmxvY2F0aW9uLnJlZ2lvbl0gfHwgMCkgKyAxO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgY291bnRyaWVzLFxuICAgICAgY2l0aWVzLFxuICAgICAgcmVnaW9ucyxcbiAgICAgIHRvcENvdW50cnk6IE9iamVjdC5lbnRyaWVzKGNvdW50cmllcykuc29ydCgoYSwgYikgPT4gYlsxXSAtIGFbMV0pWzBdPy5bMF0sXG4gICAgICB0b3RhbENvdW50cmllczogT2JqZWN0LmtleXMoY291bnRyaWVzKS5sZW5ndGhcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEFuYWx5emUgdmlzaXRvciBiZWhhdmlvciBzaWduYWxzIGZvciBpbnRlbnQgc2NvcmluZ1xuICAgKi9cbiAgcHJpdmF0ZSBhbmFseXplVmlzaXRvclNpZ25hbHMoY3VycmVudFNlc3Npb246IGFueSwgdmlzaXRvclNlc3Npb25zOiBhbnlbXSk6IGFueSB7XG4gICAgY29uc3Qgc2lnbmFscyA9IHtcbiAgICAgIGVuZ2FnZW1lbnRTaWduYWxzOiBbXSxcbiAgICAgIGJlaGF2aW9yYWxTaWduYWxzOiBbXSxcbiAgICAgIGludGVudFNpZ25hbHM6IFtdLFxuICAgICAgcmlza1NpZ25hbHM6IFtdXG4gICAgfTtcblxuICAgIC8vIEVuZ2FnZW1lbnQgc2lnbmFsc1xuICAgIGlmIChjdXJyZW50U2Vzc2lvbi5kdXJhdGlvbiA+IDMwMCkgeyAvLyA1KyBtaW51dGVzXG4gICAgICBzaWduYWxzLmVuZ2FnZW1lbnRTaWduYWxzLnB1c2goe1xuICAgICAgICB0eXBlOiAnbG9uZ19zZXNzaW9uJyxcbiAgICAgICAgdmFsdWU6IGN1cnJlbnRTZXNzaW9uLmR1cmF0aW9uLFxuICAgICAgICB3ZWlnaHQ6IDAuOCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBFeHRlbmRlZCBzZXNzaW9uIGR1cmF0aW9uIG9mICR7TWF0aC5yb3VuZChjdXJyZW50U2Vzc2lvbi5kdXJhdGlvbiAvIDYwKX0gbWludXRlc2BcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChjdXJyZW50U2Vzc2lvbi5wYWdlVmlld3MgPiA1KSB7XG4gICAgICBzaWduYWxzLmVuZ2FnZW1lbnRTaWduYWxzLnB1c2goe1xuICAgICAgICB0eXBlOiAnaGlnaF9wYWdlX3ZpZXdzJyxcbiAgICAgICAgdmFsdWU6IGN1cnJlbnRTZXNzaW9uLnBhZ2VWaWV3cyxcbiAgICAgICAgd2VpZ2h0OiAwLjcsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgSGlnaCBlbmdhZ2VtZW50IHdpdGggJHtjdXJyZW50U2Vzc2lvbi5wYWdlVmlld3N9IHBhZ2Ugdmlld3NgXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoY3VycmVudFNlc3Npb24uaW50ZXJhY3Rpb25zID4gMTApIHtcbiAgICAgIHNpZ25hbHMuZW5nYWdlbWVudFNpZ25hbHMucHVzaCh7XG4gICAgICAgIHR5cGU6ICdoaWdoX2ludGVyYWN0aW9ucycsXG4gICAgICAgIHZhbHVlOiBjdXJyZW50U2Vzc2lvbi5pbnRlcmFjdGlvbnMsXG4gICAgICAgIHdlaWdodDogMC42LFxuICAgICAgICBkZXNjcmlwdGlvbjogYEFjdGl2ZSB1c2VyIHdpdGggJHtjdXJyZW50U2Vzc2lvbi5pbnRlcmFjdGlvbnN9IGludGVyYWN0aW9uc2BcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChjdXJyZW50U2Vzc2lvbi5zY3JvbGxEZXB0aCA+IDc1KSB7XG4gICAgICBzaWduYWxzLmVuZ2FnZW1lbnRTaWduYWxzLnB1c2goe1xuICAgICAgICB0eXBlOiAnZGVlcF9zY3JvbGwnLFxuICAgICAgICB2YWx1ZTogY3VycmVudFNlc3Npb24uc2Nyb2xsRGVwdGgsXG4gICAgICAgIHdlaWdodDogMC41LFxuICAgICAgICBkZXNjcmlwdGlvbjogYERlZXAgY29udGVudCBlbmdhZ2VtZW50IHdpdGggJHtjdXJyZW50U2Vzc2lvbi5zY3JvbGxEZXB0aH0lIHNjcm9sbCBkZXB0aGBcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEJlaGF2aW9yYWwgc2lnbmFsc1xuICAgIGNvbnN0IGlzUmV0dXJuaW5nID0gdmlzaXRvclNlc3Npb25zLmxlbmd0aCA+IDE7XG4gICAgaWYgKGlzUmV0dXJuaW5nKSB7XG4gICAgICBzaWduYWxzLmJlaGF2aW9yYWxTaWduYWxzLnB1c2goe1xuICAgICAgICB0eXBlOiAncmV0dXJuaW5nX3Zpc2l0b3InLFxuICAgICAgICB2YWx1ZTogdmlzaXRvclNlc3Npb25zLmxlbmd0aCxcbiAgICAgICAgd2VpZ2h0OiAwLjksXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgUmV0dXJuaW5nIHZpc2l0b3Igd2l0aCAke3Zpc2l0b3JTZXNzaW9ucy5sZW5ndGh9IHRvdGFsIHNlc3Npb25zYFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQ2FsY3VsYXRlIGF2ZXJhZ2Ugc2Vzc2lvbiBkdXJhdGlvbiBhY3Jvc3MgYWxsIHNlc3Npb25zXG4gICAgY29uc3QgYXZnU2Vzc2lvbkR1cmF0aW9uID0gdmlzaXRvclNlc3Npb25zLnJlZHVjZSgoc3VtLCBzKSA9PiBzdW0gKyBzLmR1cmF0aW9uLCAwKSAvIHZpc2l0b3JTZXNzaW9ucy5sZW5ndGg7XG4gICAgaWYgKGF2Z1Nlc3Npb25EdXJhdGlvbiA+IDE4MCkgeyAvLyAzKyBtaW51dGVzIGF2ZXJhZ2VcbiAgICAgIHNpZ25hbHMuYmVoYXZpb3JhbFNpZ25hbHMucHVzaCh7XG4gICAgICAgIHR5cGU6ICdjb25zaXN0ZW50X2VuZ2FnZW1lbnQnLFxuICAgICAgICB2YWx1ZTogYXZnU2Vzc2lvbkR1cmF0aW9uLFxuICAgICAgICB3ZWlnaHQ6IDAuNyxcbiAgICAgICAgZGVzY3JpcHRpb246IGBDb25zaXN0ZW50IGVuZ2FnZW1lbnQgd2l0aCAke01hdGgucm91bmQoYXZnU2Vzc2lvbkR1cmF0aW9uIC8gNjApfSBtaW51dGUgYXZlcmFnZSBzZXNzaW9uc2BcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEludGVudCBzaWduYWxzIGJhc2VkIG9uIHBhZ2VzIHZpc2l0ZWRcbiAgICBjb25zdCBsYW5kaW5nUGFnZSA9IGN1cnJlbnRTZXNzaW9uLmxhbmRpbmdQYWdlPy50b0xvd2VyQ2FzZSgpIHx8ICcnO1xuICAgIGNvbnN0IGV4aXRQYWdlID0gY3VycmVudFNlc3Npb24uZXhpdFBhZ2U/LnRvTG93ZXJDYXNlKCkgfHwgJyc7XG5cbiAgICBpZiAobGFuZGluZ1BhZ2UuaW5jbHVkZXMoJ3ByaWNpbmcnKSB8fCBleGl0UGFnZS5pbmNsdWRlcygncHJpY2luZycpKSB7XG4gICAgICBzaWduYWxzLmludGVudFNpZ25hbHMucHVzaCh7XG4gICAgICAgIHR5cGU6ICdwcmljaW5nX2ludGVyZXN0JyxcbiAgICAgICAgdmFsdWU6IDEsXG4gICAgICAgIHdlaWdodDogMC45LFxuICAgICAgICBkZXNjcmlwdGlvbjogJ1Zpc2l0ZWQgcHJpY2luZyBwYWdlIGluZGljYXRpbmcgcHVyY2hhc2UgaW50ZW50J1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGxhbmRpbmdQYWdlLmluY2x1ZGVzKCdjb250YWN0JykgfHwgZXhpdFBhZ2UuaW5jbHVkZXMoJ2NvbnRhY3QnKSB8fCBsYW5kaW5nUGFnZS5pbmNsdWRlcygnZGVtbycpKSB7XG4gICAgICBzaWduYWxzLmludGVudFNpZ25hbHMucHVzaCh7XG4gICAgICAgIHR5cGU6ICdjb250YWN0X2ludGVyZXN0JyxcbiAgICAgICAgdmFsdWU6IDEsXG4gICAgICAgIHdlaWdodDogMC44LFxuICAgICAgICBkZXNjcmlwdGlvbjogJ1Zpc2l0ZWQgY29udGFjdC9kZW1vIHBhZ2UgaW5kaWNhdGluZyBoaWdoIGludGVudCdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChjdXJyZW50U2Vzc2lvbi5jb252ZXJzaW9uVmFsdWUgPiAwKSB7XG4gICAgICBzaWduYWxzLmludGVudFNpZ25hbHMucHVzaCh7XG4gICAgICAgIHR5cGU6ICdjb252ZXJzaW9uX2NvbXBsZXRlZCcsXG4gICAgICAgIHZhbHVlOiBjdXJyZW50U2Vzc2lvbi5jb252ZXJzaW9uVmFsdWUsXG4gICAgICAgIHdlaWdodDogMS4wLFxuICAgICAgICBkZXNjcmlwdGlvbjogYENvbXBsZXRlZCBjb252ZXJzaW9uIHdpdGggdmFsdWUgJHtjdXJyZW50U2Vzc2lvbi5jb252ZXJzaW9uVmFsdWV9YFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gUmlzayBzaWduYWxzXG4gICAgaWYgKGN1cnJlbnRTZXNzaW9uLmJvdW5jZVJhdGUgPiAwLjgpIHtcbiAgICAgIHNpZ25hbHMucmlza1NpZ25hbHMucHVzaCh7XG4gICAgICAgIHR5cGU6ICdoaWdoX2JvdW5jZV9yaXNrJyxcbiAgICAgICAgdmFsdWU6IGN1cnJlbnRTZXNzaW9uLmJvdW5jZVJhdGUsXG4gICAgICAgIHdlaWdodDogLTAuNSxcbiAgICAgICAgZGVzY3JpcHRpb246ICdIaWdoIGJvdW5jZSByYXRlIGluZGljYXRlcyBwb3RlbnRpYWwgZGlzZW5nYWdlbWVudCdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChjdXJyZW50U2Vzc2lvbi5kdXJhdGlvbiA8IDMwKSB7IC8vIExlc3MgdGhhbiAzMCBzZWNvbmRzXG4gICAgICBzaWduYWxzLnJpc2tTaWduYWxzLnB1c2goe1xuICAgICAgICB0eXBlOiAncXVpY2tfZXhpdCcsXG4gICAgICAgIHZhbHVlOiBjdXJyZW50U2Vzc2lvbi5kdXJhdGlvbixcbiAgICAgICAgd2VpZ2h0OiAtMC42LFxuICAgICAgICBkZXNjcmlwdGlvbjogJ1Zlcnkgc2hvcnQgc2Vzc2lvbiBkdXJhdGlvbiBzdWdnZXN0cyBsb3cgaW50ZXJlc3QnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBUcmFmZmljIHNvdXJjZSBpbnNpZ2h0c1xuICAgIGlmIChjdXJyZW50U2Vzc2lvbi5zb3VyY2UgPT09ICdkaXJlY3QnICYmIGlzUmV0dXJuaW5nKSB7XG4gICAgICBzaWduYWxzLmJlaGF2aW9yYWxTaWduYWxzLnB1c2goe1xuICAgICAgICB0eXBlOiAnZGlyZWN0X3JldHVybicsXG4gICAgICAgIHZhbHVlOiAxLFxuICAgICAgICB3ZWlnaHQ6IDAuOCxcbiAgICAgICAgZGVzY3JpcHRpb246ICdEaXJlY3QgdHJhZmZpYyBmcm9tIHJldHVybmluZyB2aXNpdG9yIHNob3dzIGJyYW5kIGF3YXJlbmVzcydcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChjdXJyZW50U2Vzc2lvbi5zb3VyY2UgPT09ICdvcmdhbmljJykge1xuICAgICAgc2lnbmFscy5iZWhhdmlvcmFsU2lnbmFscy5wdXNoKHtcbiAgICAgICAgdHlwZTogJ29yZ2FuaWNfZGlzY292ZXJ5JyxcbiAgICAgICAgdmFsdWU6IDEsXG4gICAgICAgIHdlaWdodDogMC42LFxuICAgICAgICBkZXNjcmlwdGlvbjogJ09yZ2FuaWMgc2VhcmNoIHRyYWZmaWMgaW5kaWNhdGVzIGFjdGl2ZSBwcm9ibGVtLXNvbHZpbmcnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2lnbmFscztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBwZXJzb25hbGl6ZWQgcmVjb21tZW5kYXRpb24gYmFzZWQgb24gdmlzaXRvciBzaWduYWxzXG4gICAqL1xuICBwcml2YXRlIGdlbmVyYXRlUmVjb21tZW5kYXRpb24oY3VycmVudFNlc3Npb246IGFueSwgc2lnbmFsczogYW55KTogYW55IHtcbiAgICBjb25zdCByZWNvbW1lbmRhdGlvbnMgPSBbXTtcbiAgICBsZXQgdXJnZW5jeSA9ICdsb3cnO1xuICAgIGxldCBwcmlvcml0eSA9IDE7XG5cbiAgICAvLyBDYWxjdWxhdGUgb3ZlcmFsbCBpbnRlbnQgc2NvcmUgZnJvbSBzaWduYWxzXG4gICAgbGV0IGludGVudFNjb3JlID0gY3VycmVudFNlc3Npb24uaW50ZW50U2NvcmUgfHwgMDtcbiAgICBcbiAgICAvLyBBbmFseXplIGVuZ2FnZW1lbnQgc2lnbmFsc1xuICAgIGlmIChzaWduYWxzLmVuZ2FnZW1lbnRTaWduYWxzLmxlbmd0aCA+IDIpIHtcbiAgICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKHtcbiAgICAgICAgYWN0aW9uOiAnaW1tZWRpYXRlX2VuZ2FnZW1lbnQnLFxuICAgICAgICBjaGFubmVsOiAnbGl2ZV9jaGF0JyxcbiAgICAgICAgbWVzc2FnZTogJ09mZmVyIGxpdmUgY2hhdCBhc3Npc3RhbmNlIGR1ZSB0byBoaWdoIGVuZ2FnZW1lbnQnLFxuICAgICAgICByZWFzb246ICdNdWx0aXBsZSBzdHJvbmcgZW5nYWdlbWVudCBzaWduYWxzIGRldGVjdGVkJ1xuICAgICAgfSk7XG4gICAgICB1cmdlbmN5ID0gJ2hpZ2gnO1xuICAgICAgcHJpb3JpdHkgPSAzO1xuICAgIH1cblxuICAgIC8vIEFuYWx5emUgaW50ZW50IHNpZ25hbHNcbiAgICBjb25zdCBoYXNIaWdoSW50ZW50ID0gc2lnbmFscy5pbnRlbnRTaWduYWxzLnNvbWUocyA9PiBzLndlaWdodCA+IDAuOCk7XG4gICAgaWYgKGhhc0hpZ2hJbnRlbnQpIHtcbiAgICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKHtcbiAgICAgICAgYWN0aW9uOiAnc2FsZXNfb3V0cmVhY2gnLFxuICAgICAgICBjaGFubmVsOiAncGhvbmUnLFxuICAgICAgICBtZXNzYWdlOiAnU2NoZWR1bGUgaW1tZWRpYXRlIHNhbGVzIGNhbGwnLFxuICAgICAgICByZWFzb246ICdIaWdoIHB1cmNoYXNlIGludGVudCBkZXRlY3RlZCcsXG4gICAgICAgIHRpbWluZzogJ3dpdGhpbl8xX2hvdXInXG4gICAgICB9KTtcbiAgICAgIHVyZ2VuY3kgPSAnY3JpdGljYWwnO1xuICAgICAgcHJpb3JpdHkgPSA1O1xuICAgIH1cblxuICAgIC8vIFByaWNpbmcgcGFnZSB2aXNpdG9yc1xuICAgIGNvbnN0IHZpc2l0ZWRQcmljaW5nID0gc2lnbmFscy5pbnRlbnRTaWduYWxzLnNvbWUocyA9PiBzLnR5cGUgPT09ICdwcmljaW5nX2ludGVyZXN0Jyk7XG4gICAgaWYgKHZpc2l0ZWRQcmljaW5nKSB7XG4gICAgICByZWNvbW1lbmRhdGlvbnMucHVzaCh7XG4gICAgICAgIGFjdGlvbjogJ3ByaWNpbmdfYXNzaXN0YW5jZScsXG4gICAgICAgIGNoYW5uZWw6ICdlbWFpbCcsXG4gICAgICAgIG1lc3NhZ2U6ICdTZW5kIHBlcnNvbmFsaXplZCBwcmljaW5nIGluZm9ybWF0aW9uIGFuZCBjYXNlIHN0dWRpZXMnLFxuICAgICAgICByZWFzb246ICdTaG93ZWQgaW50ZXJlc3QgaW4gcHJpY2luZycsXG4gICAgICAgIHRpbWluZzogJ3dpdGhpbl8yX2hvdXJzJ1xuICAgICAgfSk7XG4gICAgICBcbiAgICAgIGlmIChjdXJyZW50U2Vzc2lvbi5kdXJhdGlvbiA+IDE4MCkgeyAvLyAzKyBtaW51dGVzIG9uIHByaWNpbmdcbiAgICAgICAgcmVjb21tZW5kYXRpb25zLnB1c2goe1xuICAgICAgICAgIGFjdGlvbjogJ2Rpc2NvdW50X29mZmVyJyxcbiAgICAgICAgICBjaGFubmVsOiAncG9wdXAnLFxuICAgICAgICAgIG1lc3NhZ2U6ICdPZmZlciBsaW1pdGVkLXRpbWUgZGlzY291bnQgb3IgY29uc3VsdGF0aW9uJyxcbiAgICAgICAgICByZWFzb246ICdFeHRlbmRlZCB0aW1lIG9uIHByaWNpbmcgcGFnZScsXG4gICAgICAgICAgdGltaW5nOiAnaW1tZWRpYXRlJ1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm5pbmcgdmlzaXRvciByZWNvbW1lbmRhdGlvbnNcbiAgICBjb25zdCBpc1JldHVybmluZyA9IHNpZ25hbHMuYmVoYXZpb3JhbFNpZ25hbHMuc29tZShzID0+IHMudHlwZSA9PT0gJ3JldHVybmluZ192aXNpdG9yJyk7XG4gICAgaWYgKGlzUmV0dXJuaW5nICYmICFoYXNIaWdoSW50ZW50KSB7XG4gICAgICByZWNvbW1lbmRhdGlvbnMucHVzaCh7XG4gICAgICAgIGFjdGlvbjogJ251cnR1cmVfY2FtcGFpZ24nLFxuICAgICAgICBjaGFubmVsOiAnZW1haWwnLFxuICAgICAgICBtZXNzYWdlOiAnQWRkIHRvIHRhcmdldGVkIG51cnR1cmUgY2FtcGFpZ24gd2l0aCBjYXNlIHN0dWRpZXMnLFxuICAgICAgICByZWFzb246ICdSZXR1cm5pbmcgdmlzaXRvciBzaG93aW5nIGNvbnRpbnVlZCBpbnRlcmVzdCcsXG4gICAgICAgIHRpbWluZzogJ3dpdGhpbl8yNF9ob3VycydcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIE1vYmlsZS1zcGVjaWZpYyByZWNvbW1lbmRhdGlvbnNcbiAgICBpZiAoY3VycmVudFNlc3Npb24uZGV2aWNlVHlwZSA9PT0gJ21vYmlsZScpIHtcbiAgICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKHtcbiAgICAgICAgYWN0aW9uOiAnbW9iaWxlX29wdGltaXphdGlvbicsXG4gICAgICAgIGNoYW5uZWw6ICd3aGF0c2FwcCcsXG4gICAgICAgIG1lc3NhZ2U6ICdPZmZlciBXaGF0c0FwcCBjb25zdWx0YXRpb24gZm9yIG1vYmlsZSBjb252ZW5pZW5jZScsXG4gICAgICAgIHJlYXNvbjogJ01vYmlsZSB1c2VyIGluIEFmcmljYW4gbWFya2V0JyxcbiAgICAgICAgdGltaW5nOiAnd2l0aGluXzRfaG91cnMnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBHZW9ncmFwaGljIHJlY29tbWVuZGF0aW9uc1xuICAgIGlmIChjdXJyZW50U2Vzc2lvbi5jb3VudHJ5ID09PSAnTmlnZXJpYScgfHwgY3VycmVudFNlc3Npb24uY291bnRyeSA9PT0gJ1NvdXRoIEFmcmljYScpIHtcbiAgICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKHtcbiAgICAgICAgYWN0aW9uOiAnbG9jYWxfYXBwcm9hY2gnLFxuICAgICAgICBjaGFubmVsOiAnc21zJyxcbiAgICAgICAgbWVzc2FnZTogJ1NlbmQgbG9jYWxpemVkIG1lc3NhZ2Ugd2l0aCByZWdpb25hbCBjYXNlIHN0dWRpZXMnLFxuICAgICAgICByZWFzb246ICdBZnJpY2FuIG1hcmtldCB2aXNpdG9yJyxcbiAgICAgICAgdGltaW5nOiAnd2l0aGluXzZfaG91cnMnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBSaXNrIG1pdGlnYXRpb25cbiAgICBjb25zdCBoYXNSaXNrU2lnbmFscyA9IHNpZ25hbHMucmlza1NpZ25hbHMubGVuZ3RoID4gMDtcbiAgICBpZiAoaGFzUmlza1NpZ25hbHMgJiYgIWhhc0hpZ2hJbnRlbnQpIHtcbiAgICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKHtcbiAgICAgICAgYWN0aW9uOiAncmV0ZW50aW9uX2VmZm9ydCcsXG4gICAgICAgIGNoYW5uZWw6ICdwb3B1cCcsXG4gICAgICAgIG1lc3NhZ2U6ICdTaG93IHZhbHVlIHByb3Bvc2l0aW9uIG9yIG9mZmVyIGFzc2lzdGFuY2UnLFxuICAgICAgICByZWFzb246ICdSaXNrIHNpZ25hbHMgZGV0ZWN0ZWQgLSBwcmV2ZW50IGJvdW5jZScsXG4gICAgICAgIHRpbWluZzogJ2ltbWVkaWF0ZSdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIERlZmF1bHQgcmVjb21tZW5kYXRpb24gZm9yIG5ldyB2aXNpdG9yc1xuICAgIGlmICghaXNSZXR1cm5pbmcgJiYgaW50ZW50U2NvcmUgPCA1MCkge1xuICAgICAgcmVjb21tZW5kYXRpb25zLnB1c2goe1xuICAgICAgICBhY3Rpb246ICdsZWFkX21hZ25ldCcsXG4gICAgICAgIGNoYW5uZWw6ICdwb3B1cCcsXG4gICAgICAgIG1lc3NhZ2U6ICdPZmZlciB2YWx1YWJsZSBjb250ZW50IGRvd25sb2FkIGZvciBlbWFpbCBjYXB0dXJlJyxcbiAgICAgICAgcmVhc29uOiAnTmV3IHZpc2l0b3IgLSBidWlsZCByZWxhdGlvbnNoaXAnLFxuICAgICAgICB0aW1pbmc6ICdhZnRlcl82MF9zZWNvbmRzJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHJlY29tbWVuZGF0aW9ucyxcbiAgICAgIHVyZ2VuY3ksXG4gICAgICBwcmlvcml0eSxcbiAgICAgIG5leHRCZXN0QWN0aW9uOiByZWNvbW1lbmRhdGlvbnMubGVuZ3RoID4gMCA/IHJlY29tbWVuZGF0aW9uc1swXSA6IG51bGwsXG4gICAgICBjb25maWRlbmNlOiBNYXRoLm1pbihpbnRlbnRTY29yZSAvIDEwMCArIChzaWduYWxzLmVuZ2FnZW1lbnRTaWduYWxzLmxlbmd0aCAqIDAuMSksIDEuMCksXG4gICAgICByZWFzb25pbmc6IHtcbiAgICAgICAgaW50ZW50U2NvcmUsXG4gICAgICAgIGVuZ2FnZW1lbnRMZXZlbDogc2lnbmFscy5lbmdhZ2VtZW50U2lnbmFscy5sZW5ndGggPiAyID8gJ2hpZ2gnIDogc2lnbmFscy5lbmdhZ2VtZW50U2lnbmFscy5sZW5ndGggPiAwID8gJ21lZGl1bScgOiAnbG93JyxcbiAgICAgICAgcmlza0xldmVsOiBzaWduYWxzLnJpc2tTaWduYWxzLmxlbmd0aCA+IDEgPyAnaGlnaCcgOiBzaWduYWxzLnJpc2tTaWduYWxzLmxlbmd0aCA+IDAgPyAnbWVkaXVtJyA6ICdsb3cnLFxuICAgICAgICB2aXNpdG9yVHlwZTogaXNSZXR1cm5pbmcgPyAncmV0dXJuaW5nJyA6ICduZXcnXG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXJzZSBkYXRlIHJhbmdlIHN0cmluZyB0byBudW1iZXIgb2YgZGF5c1xuICAgKi9cbiAgcHJpdmF0ZSBwYXJzZURhdGVSYW5nZShkYXRlUmFuZ2U6IHN0cmluZyk6IG51bWJlciB7XG4gICAgY29uc3QgcmFuZ2VNYXA6IFJlY29yZDxzdHJpbmcsIG51bWJlcj4gPSB7XG4gICAgICAnMWQnOiAxLFxuICAgICAgJzdkJzogNyxcbiAgICAgICcxNGQnOiAxNCxcbiAgICAgICczMGQnOiAzMCxcbiAgICAgICc2MGQnOiA2MCxcbiAgICAgICc5MGQnOiA5MCxcbiAgICAgICcxODBkJzogMTgwLFxuICAgICAgJzM2NWQnOiAzNjVcbiAgICB9O1xuICAgIHJldHVybiByYW5nZU1hcFtkYXRlUmFuZ2VdIHx8IDMwO1xuICB9XG5cbiAgLyoqXG4gICAqIEFuYWx5emUgdmlzaXRvciBwcm9ncmVzc2lvbiB0aHJvdWdoIGNvbnZlcnNpb24gZnVubmVsXG4gICAqL1xuICBwcml2YXRlIGFuYWx5emVGdW5uZWxQcm9ncmVzc2lvbihzZXNzaW9uczogYW55W10sIGZ1bm5lbFN0ZXBzOiBhbnlbXSk6IGFueSB7XG4gICAgY29uc3Qgc3RlcEFuYWx5c2lzID0gW107XG4gICAgbGV0IHByZXZpb3VzU3RlcFZpc2l0b3JzID0gc2Vzc2lvbnMubGVuZ3RoO1xuXG4gICAgLy8gQW5hbHl6ZSBlYWNoIGZ1bm5lbCBzdGVwXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmdW5uZWxTdGVwcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qgc3RlcCA9IGZ1bm5lbFN0ZXBzW2ldO1xuICAgICAgbGV0IHN0ZXBWaXNpdG9ycyA9IDA7XG4gICAgICBsZXQgc3RlcFJldmVudWUgPSAwO1xuXG4gICAgICBpZiAoc3RlcC5jb252ZXJzaW9uUmVxdWlyZWQpIHtcbiAgICAgICAgLy8gRmluYWwgY29udmVyc2lvbiBzdGVwIC0gY291bnQgc2Vzc2lvbnMgd2l0aCBjb252ZXJzaW9uc1xuICAgICAgICBjb25zdCBjb252ZXJ0ZWRTZXNzaW9ucyA9IHNlc3Npb25zLmZpbHRlcihzZXNzaW9uID0+IHNlc3Npb24uY29udmVyc2lvblZhbHVlID4gMCk7XG4gICAgICAgIHN0ZXBWaXNpdG9ycyA9IGNvbnZlcnRlZFNlc3Npb25zLmxlbmd0aDtcbiAgICAgICAgc3RlcFJldmVudWUgPSBjb252ZXJ0ZWRTZXNzaW9ucy5yZWR1Y2UoKHN1bSwgc2Vzc2lvbikgPT4gc3VtICsgc2Vzc2lvbi5jb252ZXJzaW9uVmFsdWUsIDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUGFnZSB2aXNpdCBzdGVwIC0gY291bnQgc2Vzc2lvbnMgdGhhdCB2aXNpdGVkIG1hdGNoaW5nIHBhZ2VzXG4gICAgICAgIHN0ZXBWaXNpdG9ycyA9IHNlc3Npb25zLmZpbHRlcihzZXNzaW9uID0+IHtcbiAgICAgICAgICBjb25zdCBsYW5kaW5nUGFnZSA9IHNlc3Npb24ubGFuZGluZ1BhZ2U/LnRvTG93ZXJDYXNlKCkgfHwgJyc7XG4gICAgICAgICAgY29uc3QgZXhpdFBhZ2UgPSBzZXNzaW9uLmV4aXRQYWdlPy50b0xvd2VyQ2FzZSgpIHx8ICcnO1xuICAgICAgICAgIGNvbnN0IHBhdHRlcm4gPSBuZXcgUmVnRXhwKHN0ZXAucGFnZVBhdHRlcm4sICdpJyk7XG4gICAgICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdChsYW5kaW5nUGFnZSkgfHwgcGF0dGVybi50ZXN0KGV4aXRQYWdlKTtcbiAgICAgICAgfSkubGVuZ3RoO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBjb252ZXJzaW9uUmF0ZSA9IHByZXZpb3VzU3RlcFZpc2l0b3JzID4gMCA/IChzdGVwVmlzaXRvcnMgLyBwcmV2aW91c1N0ZXBWaXNpdG9ycykgKiAxMDAgOiAwO1xuICAgICAgY29uc3QgZHJvcE9mZlJhdGUgPSBwcmV2aW91c1N0ZXBWaXNpdG9ycyA+IDAgPyAoKHByZXZpb3VzU3RlcFZpc2l0b3JzIC0gc3RlcFZpc2l0b3JzKSAvIHByZXZpb3VzU3RlcFZpc2l0b3JzKSAqIDEwMCA6IDA7XG5cbiAgICAgIHN0ZXBBbmFseXNpcy5wdXNoKHtcbiAgICAgICAgc3RlcDogaSArIDEsXG4gICAgICAgIG5hbWU6IHN0ZXAubmFtZSxcbiAgICAgICAgdmlzaXRvcnM6IHN0ZXBWaXNpdG9ycyxcbiAgICAgICAgY29udmVyc2lvblJhdGU6IE1hdGgucm91bmQoY29udmVyc2lvblJhdGUgKiAxMDApIC8gMTAwLFxuICAgICAgICBkcm9wT2ZmUmF0ZTogTWF0aC5yb3VuZChkcm9wT2ZmUmF0ZSAqIDEwMCkgLyAxMDAsXG4gICAgICAgIHJldmVudWU6IHN0ZXBSZXZlbnVlLFxuICAgICAgICBwYXR0ZXJuOiBzdGVwLnBhZ2VQYXR0ZXJuIHx8ICdjb252ZXJzaW9uJ1xuICAgICAgfSk7XG5cbiAgICAgIHByZXZpb3VzU3RlcFZpc2l0b3JzID0gc3RlcFZpc2l0b3JzO1xuICAgIH1cblxuICAgIC8vIENhbGN1bGF0ZSBvdmVyYWxsIG1ldHJpY3NcbiAgICBjb25zdCB0b3RhbFNlc3Npb25zID0gc2Vzc2lvbnMubGVuZ3RoO1xuICAgIGNvbnN0IHRvdGFsQ29udmVyc2lvbnMgPSBzdGVwQW5hbHlzaXNbc3RlcEFuYWx5c2lzLmxlbmd0aCAtIDFdPy52aXNpdG9ycyB8fCAwO1xuICAgIGNvbnN0IHRvdGFsUmV2ZW51ZSA9IHN0ZXBBbmFseXNpc1tzdGVwQW5hbHlzaXMubGVuZ3RoIC0gMV0/LnJldmVudWUgfHwgMDtcbiAgICBjb25zdCBvdmVyYWxsQ29udmVyc2lvbiA9IHRvdGFsU2Vzc2lvbnMgPiAwID8gKHRvdGFsQ29udmVyc2lvbnMgLyB0b3RhbFNlc3Npb25zKSAqIDEwMCA6IDA7XG4gICAgY29uc3QgYXZlcmFnZU9yZGVyVmFsdWUgPSB0b3RhbENvbnZlcnNpb25zID4gMCA/IHRvdGFsUmV2ZW51ZSAvIHRvdGFsQ29udmVyc2lvbnMgOiAwO1xuXG4gICAgLy8gRmluZCBiZXN0IGFuZCB3b3JzdCBwZXJmb3JtaW5nIHN0ZXBzXG4gICAgY29uc3Qgc3RlcFJhdGVzID0gc3RlcEFuYWx5c2lzLnNsaWNlKDEpLm1hcChzdGVwID0+ICh7IG5hbWU6IHN0ZXAubmFtZSwgcmF0ZTogc3RlcC5jb252ZXJzaW9uUmF0ZSB9KSk7XG4gICAgY29uc3QgYmVzdFN0ZXAgPSBzdGVwUmF0ZXMucmVkdWNlKChtYXgsIHN0ZXApID0+IHN0ZXAucmF0ZSA+IG1heC5yYXRlID8gc3RlcCA6IG1heCwgc3RlcFJhdGVzWzBdIHx8IHsgbmFtZTogJ04vQScsIHJhdGU6IDAgfSk7XG4gICAgY29uc3Qgd29yc3RTdGVwID0gc3RlcFJhdGVzLnJlZHVjZSgobWluLCBzdGVwKSA9PiBzdGVwLnJhdGUgPCBtaW4ucmF0ZSA/IHN0ZXAgOiBtaW4sIHN0ZXBSYXRlc1swXSB8fCB7IG5hbWU6ICdOL0EnLCByYXRlOiAwIH0pO1xuICAgIFxuICAgIC8vIEZpbmQgYmlnZ2VzdCBkcm9wLW9mZlxuICAgIGNvbnN0IGRyb3BPZmZzID0gc3RlcEFuYWx5c2lzLm1hcChzdGVwID0+ICh7IG5hbWU6IHN0ZXAubmFtZSwgZHJvcE9mZjogc3RlcC5kcm9wT2ZmUmF0ZSB9KSk7XG4gICAgY29uc3QgYmlnZ2VzdERyb3BPZmYgPSBkcm9wT2Zmcy5yZWR1Y2UoKG1heCwgc3RlcCkgPT4gc3RlcC5kcm9wT2ZmID4gbWF4LmRyb3BPZmYgPyBzdGVwIDogbWF4LCBkcm9wT2Zmc1swXSB8fCB7IG5hbWU6ICdOL0EnLCBkcm9wT2ZmOiAwIH0pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHN0ZXBzOiBzdGVwQW5hbHlzaXMsXG4gICAgICBvdmVyYWxsQ29udmVyc2lvbjogTWF0aC5yb3VuZChvdmVyYWxsQ29udmVyc2lvbiAqIDEwMCkgLyAxMDAsXG4gICAgICB0b3RhbFJldmVudWU6IE1hdGgucm91bmQodG90YWxSZXZlbnVlICogMTAwKSAvIDEwMCxcbiAgICAgIGF2ZXJhZ2VPcmRlclZhbHVlOiBNYXRoLnJvdW5kKGF2ZXJhZ2VPcmRlclZhbHVlICogMTAwKSAvIDEwMCxcbiAgICAgIGJlc3RTdGVwOiBiZXN0U3RlcC5uYW1lLFxuICAgICAgd29yc3RTdGVwOiB3b3JzdFN0ZXAubmFtZSxcbiAgICAgIGJpZ2dlc3REcm9wT2ZmOiBiaWdnZXN0RHJvcE9mZi5uYW1lXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBbmFseXplIGZ1bm5lbCBwZXJmb3JtYW5jZSBieSBjdXN0b21lciBzZWdtZW50c1xuICAgKi9cbiAgcHJpdmF0ZSBhc3luYyBhbmFseXplRnVubmVsQnlTZWdtZW50cyhzZXNzaW9uczogYW55W10sIGZ1bm5lbFN0ZXBzOiBhbnlbXSwgYXV0aENvbnRleHQ6IE1DUEF1dGhDb250ZXh0KTogUHJvbWlzZTxhbnlbXT4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBHZXQgc2VnbWVudHMgZm9yIHRoZSBvcmdhbml6YXRpb25cbiAgICAgIGNvbnN0IHNlZ21lbnRzID0gYXdhaXQgcHJpc21hLnNlZ21lbnQuZmluZE1hbnkoe1xuICAgICAgICB3aGVyZToge1xuICAgICAgICAgIGNyZWF0ZWRCeToge1xuICAgICAgICAgICAgb3JnYW5pemF0aW9uSWQ6IGF1dGhDb250ZXh0Lm9yZ2FuaXphdGlvbklkXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBpbmNsdWRlOiB7XG4gICAgICAgICAgbWVtYmVyczoge1xuICAgICAgICAgICAgaW5jbHVkZToge1xuICAgICAgICAgICAgICBjb250YWN0OiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgY29uc3Qgc2VnbWVudEFuYWx5c2lzID0gW107XG5cbiAgICAgIC8vIEFuYWx5emUgbmV3IHZzIHJldHVybmluZyB2aXNpdG9yc1xuICAgICAgY29uc3QgbmV3VmlzaXRvclNlc3Npb25zID0gc2Vzc2lvbnMuZmlsdGVyKHNlc3Npb24gPT4ge1xuICAgICAgICBjb25zdCB2aXNpdG9yU2Vzc2lvbnMgPSBzZXNzaW9ucy5maWx0ZXIocyA9PiBzLnZpc2l0b3JJZCA9PT0gc2Vzc2lvbi52aXNpdG9ySWQpO1xuICAgICAgICByZXR1cm4gdmlzaXRvclNlc3Npb25zLmxlbmd0aCA9PT0gMTtcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCByZXR1cm5pbmdWaXNpdG9yU2Vzc2lvbnMgPSBzZXNzaW9ucy5maWx0ZXIoc2Vzc2lvbiA9PiB7XG4gICAgICAgIGNvbnN0IHZpc2l0b3JTZXNzaW9ucyA9IHNlc3Npb25zLmZpbHRlcihzID0+IHMudmlzaXRvcklkID09PSBzZXNzaW9uLnZpc2l0b3JJZCk7XG4gICAgICAgIHJldHVybiB2aXNpdG9yU2Vzc2lvbnMubGVuZ3RoID4gMTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBBbmFseXplIG5ldyB2aXNpdG9yc1xuICAgICAgaWYgKG5ld1Zpc2l0b3JTZXNzaW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IG5ld1Zpc2l0b3JGdW5uZWwgPSB0aGlzLmFuYWx5emVGdW5uZWxQcm9ncmVzc2lvbihuZXdWaXNpdG9yU2Vzc2lvbnMsIGZ1bm5lbFN0ZXBzKTtcbiAgICAgICAgc2VnbWVudEFuYWx5c2lzLnB1c2goe1xuICAgICAgICAgIG5hbWU6ICdOZXcgVmlzaXRvcnMnLFxuICAgICAgICAgIHRvdGFsU2Vzc2lvbnM6IG5ld1Zpc2l0b3JTZXNzaW9ucy5sZW5ndGgsXG4gICAgICAgICAgb3ZlcmFsbENvbnZlcnNpb246IG5ld1Zpc2l0b3JGdW5uZWwub3ZlcmFsbENvbnZlcnNpb24sXG4gICAgICAgICAgdG90YWxSZXZlbnVlOiBuZXdWaXNpdG9yRnVubmVsLnRvdGFsUmV2ZW51ZSxcbiAgICAgICAgICBhdmVyYWdlT3JkZXJWYWx1ZTogbmV3VmlzaXRvckZ1bm5lbC5hdmVyYWdlT3JkZXJWYWx1ZSxcbiAgICAgICAgICB0b3BEcm9wT2ZmU3RlcDogbmV3VmlzaXRvckZ1bm5lbC5iaWdnZXN0RHJvcE9mZixcbiAgICAgICAgICBzdGVwczogbmV3VmlzaXRvckZ1bm5lbC5zdGVwc1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gQW5hbHl6ZSByZXR1cm5pbmcgdmlzaXRvcnNcbiAgICAgIGlmIChyZXR1cm5pbmdWaXNpdG9yU2Vzc2lvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCByZXR1cm5pbmdWaXNpdG9yRnVubmVsID0gdGhpcy5hbmFseXplRnVubmVsUHJvZ3Jlc3Npb24ocmV0dXJuaW5nVmlzaXRvclNlc3Npb25zLCBmdW5uZWxTdGVwcyk7XG4gICAgICAgIHNlZ21lbnRBbmFseXNpcy5wdXNoKHtcbiAgICAgICAgICBuYW1lOiAnUmV0dXJuaW5nIFZpc2l0b3JzJyxcbiAgICAgICAgICB0b3RhbFNlc3Npb25zOiByZXR1cm5pbmdWaXNpdG9yU2Vzc2lvbnMubGVuZ3RoLFxuICAgICAgICAgIG92ZXJhbGxDb252ZXJzaW9uOiByZXR1cm5pbmdWaXNpdG9yRnVubmVsLm92ZXJhbGxDb252ZXJzaW9uLFxuICAgICAgICAgIHRvdGFsUmV2ZW51ZTogcmV0dXJuaW5nVmlzaXRvckZ1bm5lbC50b3RhbFJldmVudWUsXG4gICAgICAgICAgYXZlcmFnZU9yZGVyVmFsdWU6IHJldHVybmluZ1Zpc2l0b3JGdW5uZWwuYXZlcmFnZU9yZGVyVmFsdWUsXG4gICAgICAgICAgdG9wRHJvcE9mZlN0ZXA6IHJldHVybmluZ1Zpc2l0b3JGdW5uZWwuYmlnZ2VzdERyb3BPZmYsXG4gICAgICAgICAgc3RlcHM6IHJldHVybmluZ1Zpc2l0b3JGdW5uZWwuc3RlcHNcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIEFuYWx5emUgYnkgZGV2aWNlIHR5cGVcbiAgICAgIGNvbnN0IG1vYmlsZVJlcXMgPSBzZXNzaW9ucy5maWx0ZXIocyA9PiBzLmRldmljZVR5cGUgPT09ICdtb2JpbGUnKTtcbiAgICAgIGNvbnN0IGRlc2t0b3BTZXNzaW9ucyA9IHNlc3Npb25zLmZpbHRlcihzID0+IHMuZGV2aWNlVHlwZSA9PT0gJ2Rlc2t0b3AnKTtcblxuICAgICAgaWYgKG1vYmlsZVJlcXMubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBtb2JpbGVGdW5uZWwgPSB0aGlzLmFuYWx5emVGdW5uZWxQcm9ncmVzc2lvbihtb2JpbGVSZXFzLCBmdW5uZWxTdGVwcyk7XG4gICAgICAgIHNlZ21lbnRBbmFseXNpcy5wdXNoKHtcbiAgICAgICAgICBuYW1lOiAnTW9iaWxlIFZpc2l0b3JzJyxcbiAgICAgICAgICB0b3RhbFNlc3Npb25zOiBtb2JpbGVSZXFzLmxlbmd0aCxcbiAgICAgICAgICBvdmVyYWxsQ29udmVyc2lvbjogbW9iaWxlRnVubmVsLm92ZXJhbGxDb252ZXJzaW9uLFxuICAgICAgICAgIHRvdGFsUmV2ZW51ZTogbW9iaWxlRnVubmVsLnRvdGFsUmV2ZW51ZSxcbiAgICAgICAgICBhdmVyYWdlT3JkZXJWYWx1ZTogbW9iaWxlRnVubmVsLmF2ZXJhZ2VPcmRlclZhbHVlLFxuICAgICAgICAgIHRvcERyb3BPZmZTdGVwOiBtb2JpbGVGdW5uZWwuYmlnZ2VzdERyb3BPZmYsXG4gICAgICAgICAgc3RlcHM6IG1vYmlsZUZ1bm5lbC5zdGVwc1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRlc2t0b3BTZXNzaW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IGRlc2t0b3BGdW5uZWwgPSB0aGlzLmFuYWx5emVGdW5uZWxQcm9ncmVzc2lvbihkZXNrdG9wU2Vzc2lvbnMsIGZ1bm5lbFN0ZXBzKTtcbiAgICAgICAgc2VnbWVudEFuYWx5c2lzLnB1c2goe1xuICAgICAgICAgIG5hbWU6ICdEZXNrdG9wIFZpc2l0b3JzJyxcbiAgICAgICAgICB0b3RhbFNlc3Npb25zOiBkZXNrdG9wU2Vzc2lvbnMubGVuZ3RoLFxuICAgICAgICAgIG92ZXJhbGxDb252ZXJzaW9uOiBkZXNrdG9wRnVubmVsLm92ZXJhbGxDb252ZXJzaW9uLFxuICAgICAgICAgIHRvdGFsUmV2ZW51ZTogZGVza3RvcEZ1bm5lbC50b3RhbFJldmVudWUsXG4gICAgICAgICAgYXZlcmFnZU9yZGVyVmFsdWU6IGRlc2t0b3BGdW5uZWwuYXZlcmFnZU9yZGVyVmFsdWUsXG4gICAgICAgICAgdG9wRHJvcE9mZlN0ZXA6IGRlc2t0b3BGdW5uZWwuYmlnZ2VzdERyb3BPZmYsXG4gICAgICAgICAgc3RlcHM6IGRlc2t0b3BGdW5uZWwuc3RlcHNcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIEFuYWx5emUgYnkgdHJhZmZpYyBzb3VyY2VcbiAgICAgIGNvbnN0IG9yZ2FuaWNTZXNzaW9ucyA9IHNlc3Npb25zLmZpbHRlcihzID0+IHMuc291cmNlID09PSAnb3JnYW5pYycpO1xuICAgICAgY29uc3QgZGlyZWN0U2Vzc2lvbnMgPSBzZXNzaW9ucy5maWx0ZXIocyA9PiBzLnNvdXJjZSA9PT0gJ2RpcmVjdCcpO1xuICAgICAgY29uc3Qgc29jaWFsU2Vzc2lvbnMgPSBzZXNzaW9ucy5maWx0ZXIocyA9PiBzLnNvdXJjZSA9PT0gJ3NvY2lhbCcpO1xuXG4gICAgICBpZiAob3JnYW5pY1Nlc3Npb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3Qgb3JnYW5pY0Z1bm5lbCA9IHRoaXMuYW5hbHl6ZUZ1bm5lbFByb2dyZXNzaW9uKG9yZ2FuaWNTZXNzaW9ucywgZnVubmVsU3RlcHMpO1xuICAgICAgICBzZWdtZW50QW5hbHlzaXMucHVzaCh7XG4gICAgICAgICAgbmFtZTogJ09yZ2FuaWMgVHJhZmZpYycsXG4gICAgICAgICAgdG90YWxTZXNzaW9uczogb3JnYW5pY1Nlc3Npb25zLmxlbmd0aCxcbiAgICAgICAgICBvdmVyYWxsQ29udmVyc2lvbjogb3JnYW5pY0Z1bm5lbC5vdmVyYWxsQ29udmVyc2lvbixcbiAgICAgICAgICB0b3RhbFJldmVudWU6IG9yZ2FuaWNGdW5uZWwudG90YWxSZXZlbnVlLFxuICAgICAgICAgIGF2ZXJhZ2VPcmRlclZhbHVlOiBvcmdhbmljRnVubmVsLmF2ZXJhZ2VPcmRlclZhbHVlLFxuICAgICAgICAgIHRvcERyb3BPZmZTdGVwOiBvcmdhbmljRnVubmVsLmJpZ2dlc3REcm9wT2ZmLFxuICAgICAgICAgIHN0ZXBzOiBvcmdhbmljRnVubmVsLnN0ZXBzXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VnbWVudEFuYWx5c2lzO1xuXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGFuYWx5emluZyBmdW5uZWwgYnkgc2VnbWVudHM6JywgZXJyb3IpO1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBhY3Rpb25hYmxlIGluc2lnaHRzIGZyb20gZnVubmVsIGRhdGFcbiAgICovXG4gIHByaXZhdGUgZ2VuZXJhdGVGdW5uZWxJbnNpZ2h0cyhzdGVwczogYW55W10sIHNlZ21lbnREYXRhPzogYW55W10pOiBzdHJpbmdbXSB7XG4gICAgY29uc3QgaW5zaWdodHM6IHN0cmluZ1tdID0gW107XG5cbiAgICAvLyBPdmVyYWxsIGZ1bm5lbCBpbnNpZ2h0c1xuICAgIGlmIChzdGVwcy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBmaXJzdFN0ZXAgPSBzdGVwc1swXTtcbiAgICAgIGNvbnN0IGxhc3RTdGVwID0gc3RlcHNbc3RlcHMubGVuZ3RoIC0gMV07XG4gICAgICBcbiAgICAgIGluc2lnaHRzLnB1c2goYEZ1bm5lbCBzdGFydHMgd2l0aCAke2ZpcnN0U3RlcC52aXNpdG9ycy50b0xvY2FsZVN0cmluZygpfSB2aXNpdG9ycyBhbmQgY29udmVydHMgJHtsYXN0U3RlcC52aXNpdG9ycy50b0xvY2FsZVN0cmluZygpfSAoJHtsYXN0U3RlcC5jb252ZXJzaW9uUmF0ZX0lIG92ZXJhbGwpYCk7XG5cbiAgICAgIC8vIEZpbmQgYmlnZ2VzdCBkcm9wLW9mZlxuICAgICAgY29uc3QgYmlnZ2VzdERyb3BPZmYgPSBzdGVwcy5yZWR1Y2UoKG1heCwgc3RlcCkgPT4gc3RlcC5kcm9wT2ZmUmF0ZSA+IG1heC5kcm9wT2ZmUmF0ZSA/IHN0ZXAgOiBtYXgsIHN0ZXBzWzBdKTtcbiAgICAgIGlmIChiaWdnZXN0RHJvcE9mZi5kcm9wT2ZmUmF0ZSA+IDUwKSB7XG4gICAgICAgIGluc2lnaHRzLnB1c2goYOKaoO+4jyBDcml0aWNhbCBkcm9wLW9mZiBhdCAke2JpZ2dlc3REcm9wT2ZmLm5hbWV9ICgke2JpZ2dlc3REcm9wT2ZmLmRyb3BPZmZSYXRlfSUgZXhpdCByYXRlKSAtIHJlcXVpcmVzIGltbWVkaWF0ZSBvcHRpbWl6YXRpb25gKTtcbiAgICAgIH0gZWxzZSBpZiAoYmlnZ2VzdERyb3BPZmYuZHJvcE9mZlJhdGUgPiAzMCkge1xuICAgICAgICBpbnNpZ2h0cy5wdXNoKGDwn5OJIFNpZ25pZmljYW50IGRyb3Atb2ZmIGF0ICR7YmlnZ2VzdERyb3BPZmYubmFtZX0gKCR7YmlnZ2VzdERyb3BPZmYuZHJvcE9mZlJhdGV9JSBleGl0IHJhdGUpIC0gb3B0aW1pemF0aW9uIG9wcG9ydHVuaXR5YCk7XG4gICAgICB9XG5cbiAgICAgIC8vIFJldmVudWUgaW5zaWdodHNcbiAgICAgIGNvbnN0IHJldmVudWVTdGVwID0gc3RlcHMuZmluZChzdGVwID0+IHN0ZXAucmV2ZW51ZSA+IDApO1xuICAgICAgaWYgKHJldmVudWVTdGVwKSB7XG4gICAgICAgIGluc2lnaHRzLnB1c2goYPCfkrAgR2VuZXJhdGVkICR7cmV2ZW51ZVN0ZXAucmV2ZW51ZS50b0xvY2FsZVN0cmluZygpfSBpbiByZXZlbnVlIGZyb20gJHtyZXZlbnVlU3RlcC52aXNpdG9yc30gY29udmVyc2lvbnNgKTtcbiAgICAgIH1cblxuICAgICAgLy8gQ29udmVyc2lvbiByYXRlIGluc2lnaHRzXG4gICAgICBjb25zdCBvdmVyYWxsUmF0ZSA9IGxhc3RTdGVwLmNvbnZlcnNpb25SYXRlO1xuICAgICAgaWYgKG92ZXJhbGxSYXRlID4gNSkge1xuICAgICAgICBpbnNpZ2h0cy5wdXNoKGDwn46vIEV4Y2VsbGVudCBjb252ZXJzaW9uIHJhdGUgb2YgJHtvdmVyYWxsUmF0ZX0lIC0gYWJvdmUgaW5kdXN0cnkgYXZlcmFnZWApO1xuICAgICAgfSBlbHNlIGlmIChvdmVyYWxsUmF0ZSA+IDIpIHtcbiAgICAgICAgaW5zaWdodHMucHVzaChg4pyFIEdvb2QgY29udmVyc2lvbiByYXRlIG9mICR7b3ZlcmFsbFJhdGV9JSAtIHJvb20gZm9yIGltcHJvdmVtZW50YCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbnNpZ2h0cy5wdXNoKGDwn5OKIENvbnZlcnNpb24gcmF0ZSBvZiAke292ZXJhbGxSYXRlfSUgaXMgYmVsb3cgYXZlcmFnZSAtIGZ1bm5lbCBvcHRpbWl6YXRpb24gbmVlZGVkYCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gU2VnbWVudC1zcGVjaWZpYyBpbnNpZ2h0c1xuICAgIGlmIChzZWdtZW50RGF0YSAmJiBzZWdtZW50RGF0YS5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBuZXdWaXNpdG9ycyA9IHNlZ21lbnREYXRhLmZpbmQocyA9PiBzLm5hbWUgPT09ICdOZXcgVmlzaXRvcnMnKTtcbiAgICAgIGNvbnN0IHJldHVybmluZ1Zpc2l0b3JzID0gc2VnbWVudERhdGEuZmluZChzID0+IHMubmFtZSA9PT0gJ1JldHVybmluZyBWaXNpdG9ycycpO1xuXG4gICAgICBpZiAobmV3VmlzaXRvcnMgJiYgcmV0dXJuaW5nVmlzaXRvcnMpIHtcbiAgICAgICAgY29uc3QgY29udmVyc2lvbkRpZmYgPSByZXR1cm5pbmdWaXNpdG9ycy5vdmVyYWxsQ29udmVyc2lvbiAtIG5ld1Zpc2l0b3JzLm92ZXJhbGxDb252ZXJzaW9uO1xuICAgICAgICBpZiAoY29udmVyc2lvbkRpZmYgPiAyKSB7XG4gICAgICAgICAgaW5zaWdodHMucHVzaChg8J+UhCBSZXR1cm5pbmcgdmlzaXRvcnMgY29udmVydCAke2NvbnZlcnNpb25EaWZmLnRvRml4ZWQoMSl9eCBiZXR0ZXIgKCR7cmV0dXJuaW5nVmlzaXRvcnMub3ZlcmFsbENvbnZlcnNpb259JSB2cyAke25ld1Zpc2l0b3JzLm92ZXJhbGxDb252ZXJzaW9ufSUpYCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29uc3QgbW9iaWxlU2VnbWVudCA9IHNlZ21lbnREYXRhLmZpbmQocyA9PiBzLm5hbWUgPT09ICdNb2JpbGUgVmlzaXRvcnMnKTtcbiAgICAgIGNvbnN0IGRlc2t0b3BTZWdtZW50ID0gc2VnbWVudERhdGEuZmluZChzID0+IHMubmFtZSA9PT0gJ0Rlc2t0b3AgVmlzaXRvcnMnKTtcblxuICAgICAgaWYgKG1vYmlsZVNlZ21lbnQgJiYgZGVza3RvcFNlZ21lbnQpIHtcbiAgICAgICAgaWYgKG1vYmlsZVNlZ21lbnQub3ZlcmFsbENvbnZlcnNpb24gPCBkZXNrdG9wU2VnbWVudC5vdmVyYWxsQ29udmVyc2lvbiAqIDAuNykge1xuICAgICAgICAgIGluc2lnaHRzLnB1c2goYPCfk7EgTW9iaWxlIGNvbnZlcnNpb24gKCR7bW9iaWxlU2VnbWVudC5vdmVyYWxsQ29udmVyc2lvbn0lKSBzaWduaWZpY2FudGx5IGxvd2VyIHRoYW4gZGVza3RvcCAoJHtkZXNrdG9wU2VnbWVudC5vdmVyYWxsQ29udmVyc2lvbn0lKSAtIG1vYmlsZSBvcHRpbWl6YXRpb24gbmVlZGVkYCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVHJhZmZpYyBzb3VyY2UgaW5zaWdodHNcbiAgICAgIGNvbnN0IG9yZ2FuaWNTZWdtZW50ID0gc2VnbWVudERhdGEuZmluZChzID0+IHMubmFtZSA9PT0gJ09yZ2FuaWMgVHJhZmZpYycpO1xuICAgICAgaWYgKG9yZ2FuaWNTZWdtZW50ICYmIG9yZ2FuaWNTZWdtZW50Lm92ZXJhbGxDb252ZXJzaW9uID4gMykge1xuICAgICAgICBpbnNpZ2h0cy5wdXNoKGDwn4yxIE9yZ2FuaWMgdHJhZmZpYyBzaG93cyBzdHJvbmcgaW50ZW50IHdpdGggJHtvcmdhbmljU2VnbWVudC5vdmVyYWxsQ29udmVyc2lvbn0lIGNvbnZlcnNpb24gLSBpbnZlc3QgaW4gU0VPYCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWZyaWNhbiBtYXJrZXQgc3BlY2lmaWMgaW5zaWdodHNcbiAgICBpbnNpZ2h0cy5wdXNoKGDwn4yNIENvbnNpZGVyIEFmcmljYW4gbWFya2V0IG9wdGltaXphdGlvbjogbW9iaWxlLWZpcnN0IGRlc2lnbiwgV2hhdHNBcHAgaW50ZWdyYXRpb24sIGFuZCBsb2NhbCBwYXltZW50IG1ldGhvZHNgKTtcblxuICAgIHJldHVybiBpbnNpZ2h0cztcbiAgfVxufSJdLCJuYW1lcyI6WyJMZWFkUHVsc2VNQ1BTZXJ2ZXIiLCJCYXNlTUNQU2VydmVyIiwiY29uc3RydWN0b3IiLCJjb25maWciLCJkZWZhdWx0TUNQQ29uZmlnIiwic2VydmVycyIsImxlYWRwdWxzZSIsImxpc3RSZXNvdXJjZXMiLCJhdXRoQ29udGV4dCIsInJlc291cmNlcyIsInVyaSIsIm5hbWUiLCJkZXNjcmlwdGlvbiIsIm1pbWVUeXBlIiwicGVybWlzc2lvbnMiLCJpbmNsdWRlcyIsImZpbHRlciIsInIiLCJyZWFkUmVzb3VyY2UiLCJ1cmwiLCJVUkwiLCJwYXRoIiwicGF0aG5hbWUiLCJzZWFyY2hQYXJhbXMiLCJxdWVyeVBhcmFtcyIsIk9iamVjdCIsImZyb21FbnRyaWVzIiwiZW50cmllcyIsInZhbGlkYXRlZFF1ZXJ5IiwiTGVhZFB1bHNlUXVlcnlTY2hlbWEiLCJwYXJzZSIsIm9yZ2FuaXphdGlvbklkIiwibGltaXQiLCJOdW1iZXIiLCJwYXJzZUludCIsIm9mZnNldCIsImluY2x1ZGVIZWF0bWFwIiwiaW5jbHVkZUpvdXJuZXkiLCJnZXRWaXNpdG9yRGF0YSIsImdldFNlc3Npb25EYXRhIiwiZ2V0SGVhdG1hcERhdGEiLCJnZXRKb3VybmV5RGF0YSIsImdldENvbnZlcnNpb25EYXRhIiwiZ2V0QW5hbHl0aWNzRGF0YSIsIk1DUFZhbGlkYXRpb25FcnJvciIsImxpc3RUb29scyIsInRvb2xzIiwiaW5wdXRTY2hlbWEiLCJ0eXBlIiwicHJvcGVydGllcyIsInZpc2l0b3JJZCIsImRlZmF1bHQiLCJyZXF1aXJlZCIsInNlc3Npb25JZCIsInRpbWVSYW5nZSIsImVudW0iLCJmdW5uZWxJZCIsImRhdGVSYW5nZSIsImluY2x1ZGVTZWdtZW50cyIsInBhZ2VVcmwiLCJpbmNsdWRlTG9jYXRpb24iLCJpbmNsdWRlRGV2aWNlIiwidGhyZXNob2xkIiwibWluaW11bSIsIm1heGltdW0iLCJ0IiwiY2FsbFRvb2wiLCJhcmdzIiwidHJhY2tWaXNpdG9yIiwiYW5hbHl6ZVZpc2l0b3JCZWhhdmlvciIsImdldENvbnZlcnNpb25GdW5uZWwiLCJnZXRQYWdlQW5hbHl0aWNzIiwiZ2V0UmVhbFRpbWVWaXNpdG9ycyIsImlkZW50aWZ5SGlnaEludGVudFZpc2l0b3JzIiwicXVlcnkiLCJzdGFydFRpbWUiLCJEYXRlIiwibm93Iiwid2hlcmVDbGF1c2UiLCJkYXRlRnJvbSIsImRhdGVUbyIsInNlc3Npb25TdGFydCIsImd0ZSIsImx0ZSIsInZpc2l0b3JTZXNzaW9ucyIsInByaXNtYSIsIm1DUFZpc2l0b3JTZXNzaW9ucyIsImZpbmRNYW55Iiwid2hlcmUiLCJ0YWtlIiwic2tpcCIsImluY2x1ZGUiLCJvcmdhbml6YXRpb24iLCJzZWxlY3QiLCJpZCIsIm9yZGVyQnkiLCJ2aXNpdG9ycyIsIm1hcCIsInNlc3Npb24iLCJ0b0lTT1N0cmluZyIsImVuZFRpbWUiLCJzZXNzaW9uRW5kIiwicGFnZVZpZXdzIiwiZHVyYXRpb24iLCJib3VuY2UiLCJib3VuY2VSYXRlIiwiY29udmVydGVkIiwiY29udmVyc2lvblZhbHVlIiwiaW50ZW50U2NvcmUiLCJnZW9Mb2NhdGlvbiIsImNvdW50cnkiLCJjaXR5IiwicmVnaW9uIiwiZGV2aWNlIiwiZGV2aWNlVHlwZSIsImJyb3dzZXIiLCJvcyIsIm9wZXJhdGluZ1N5c3RlbSIsInRyYWZmaWMiLCJzb3VyY2UiLCJtZWRpdW0iLCJjYW1wYWlnbiIsInJlZmVycmVyIiwiZW5nYWdlbWVudCIsInNjcm9sbERlcHRoIiwidGltZU9uUGFnZSIsImF2Z1RpbWVPblBhZ2UiLCJpbnRlcmFjdGlvbnMiLCJleGl0UGFnZSIsImluc2lnaHRzIiwiSlNPTiIsInRvdGFsU2Vzc2lvbnMiLCJsZW5ndGgiLCJ0b3RhbFBhZ2VWaWV3cyIsInJlZHVjZSIsInN1bSIsInYiLCJhdmdEdXJhdGlvbiIsImNvbnZlcnNpb25SYXRlIiwiYXZnSW50ZW50U2NvcmUiLCJkZXZpY2VEaXN0cmlidXRpb24iLCJhY2MiLCJjb3VudHJ5RGlzdHJpYnV0aW9uIiwibG9nTUNQUmVzb3VyY2VBY2Nlc3MiLCJkYXRhU2l6ZSIsInRleHQiLCJzdHJpbmdpZnkiLCJzdW1tYXJ5IiwiYXZlcmFnZUR1cmF0aW9uIiwiTWF0aCIsInJvdW5kIiwibWV0YSIsInRvdGFsIiwidGltZXN0YW1wIiwiZXJyb3IiLCJlcnJvck1lc3NhZ2UiLCJFcnJvciIsIm1lc3NhZ2UiLCJjcmVhdGVGYWxsYmFja1Jlc3BvbnNlIiwiZ2V0VmlzaXRvckRhdGFGYWxsYmFjayIsImxvZ01DUFRvb2xFeGVjdXRpb24iLCJyaXNrTGV2ZWwiLCJjb250ZW50Iiwic3VjY2VzcyIsImlzRXJyb3IiLCJjdXJyZW50U2Vzc2lvbiIsInMiLCJhdmdTZXNzaW9uRHVyYXRpb24iLCJ0b3RhbENvbnZlcnNpb25zIiwiaXNSZXR1cm5pbmciLCJmaXJzdFNlc3Npb25EYXRlIiwibGFzdFNlc3Npb25EYXRlIiwidmlzaXRvckRhdGEiLCJjdXJyZW50UGFnZSIsImxhbmRpbmdQYWdlIiwiYm91bmNlZCIsInByb2ZpbGUiLCJhdmVyYWdlU2Vzc2lvbkR1cmF0aW9uIiwiYXZlcmFnZUludGVudFNjb3JlIiwiZmlyc3RTZWVuIiwibGFzdFNlZW4iLCJkYXlzU2luY2VGaXJzdFZpc2l0IiwiZmxvb3IiLCJnZXRUaW1lIiwidGltZXpvbmUiLCJnZXRUaW1lem9uZUZyb21Db3VudHJ5IiwidHJhZmZpY1NvdXJjZSIsImJlaGF2aW9yYWwiLCJjYWxjdWxhdGVWaXNpdG9yQm91bmNlUmF0ZSIsImVuZ2FnZW1lbnRTY29yZSIsImNhbGN1bGF0ZUVuZ2FnZW1lbnRTY29yZSIsImpvdXJuZXkiLCJidWlsZFZpc2l0b3JKb3VybmV5IiwiZ2VuZXJhdGVWaXNpdG9ySW5zaWdodHMiLCJvdXRwdXRTaXplIiwiZGF0YSIsImRldGFpbHMiLCJiZWhhdmlvckFuYWx5c2lzIiwiYmVoYXZpb3JQYXR0ZXJuIiwicGFnZVZpZXdzUGVyU2Vzc2lvbiIsImludGVyZXN0cyIsImNhdGVnb3J5Iiwic2NvcmUiLCJhY3Rpb25zIiwidG90YWxDbGlja3MiLCJmb3JtU3VibWlzc2lvbnMiLCJkb3dubG9hZFJlcXVlc3RzIiwic29jaWFsU2hhcmVzIiwicHJlZGljdGlvbnMiLCJsaWtlbGlob29kVG9Db252ZXJ0IiwidGltZVRvQ29udmVyc2lvbiIsInByZWZlcnJlZENoYW5uZWwiLCJuZXh0QmVzdEFjdGlvbiIsImFuYWx5c2lzVHlwZSIsImZhbGxiYWNrVXNlZCIsImRheXNCYWNrIiwicGFyc2VEYXRlUmFuZ2UiLCJzdGFydERhdGUiLCJzZXNzaW9ucyIsImZ1bm5lbFN0ZXBzIiwicGFnZVBhdHRlcm4iLCJjb252ZXJzaW9uUmVxdWlyZWQiLCJmdW5uZWxEYXRhIiwiYW5hbHl6ZUZ1bm5lbFByb2dyZXNzaW9uIiwic2VnbWVudERhdGEiLCJ1bmRlZmluZWQiLCJhbmFseXplRnVubmVsQnlTZWdtZW50cyIsImdlbmVyYXRlRnVubmVsSW5zaWdodHMiLCJzdGVwcyIsInJlc3VsdCIsInRpbWVmcmFtZSIsImVuZERhdGUiLCJkYXlzQW5hbHl6ZWQiLCJvdmVyYWxsQ29udmVyc2lvbiIsInRvdGFsUmV2ZW51ZSIsImF2ZXJhZ2VPcmRlclZhbHVlIiwic2VnbWVudHMiLCJwZXJmb3JtYW5jZSIsImJlc3RQZXJmb3JtaW5nU3RlcCIsImJlc3RTdGVwIiwid29yc3RQZXJmb3JtaW5nU3RlcCIsIndvcnN0U3RlcCIsImJpZ2dlc3REcm9wT2ZmIiwicGFnZUFuYWx5dGljcyIsIm1ldHJpY3MiLCJ1bmlxdWVWaXNpdG9ycyIsImF2ZXJhZ2VUaW1lT25QYWdlIiwiZXhpdFJhdGUiLCJjbGlja1Rocm91Z2hSYXRlIiwiaGVhdG1hcERhdGEiLCJjbGlja01hcCIsImhlYWRlck5hdiIsInByaW1hcnlDVEEiLCJzZWNvbmRhcnlDVEEiLCJmb290ZXIiLCJzY3JvbGxNYXAiLCJhdHRlbnRpb25NYXAiLCJoZXJvIiwiZmVhdHVyZXMiLCJwcmljaW5nIiwidGVzdGltb25pYWxzIiwidGhpcnR5TWludXRlc0FnbyIsImFjdGl2ZVNlc3Npb25zIiwiU2V0IiwiY3VycmVudFZpc2l0b3JzIiwic2l6ZSIsInBhZ2VBY3Rpdml0eSIsImFjdGl2ZVBhZ2VzIiwicGFnZSIsInNvcnQiLCJhIiwiYiIsInNsaWNlIiwic2Vzc2lvbkR1cmF0aW9uTXMiLCJ0aW1lT25DdXJyZW50UGFnZSIsIm1heCIsInNlc3Npb25EdXJhdGlvbiIsImlzUmV0dXJuaW5nVmlzaXRvciIsImlzQ29udmVydGVkIiwibG9jYXRpb24iLCJnZW5lcmF0ZVJlYWxUaW1lSW5zaWdodHMiLCJwcmV2aW91c1BlcmlvZFN0YXJ0IiwicHJldmlvdXNTZXNzaW9ucyIsImNvdW50IiwibHQiLCJ0cmFmZmljQ2hhbmdlIiwiZGV2aWNlU3RhdHMiLCJjYWxjdWxhdGVEZXZpY2VTdGF0cyIsImxvY2F0aW9uU3RhdHMiLCJjYWxjdWxhdGVMb2NhdGlvblN0YXRzIiwicmVhbFRpbWVEYXRhIiwidHJhZmZpY1RyZW5kIiwiY2hhbmdlIiwiZGlyZWN0aW9uIiwicHJldmlvdXNQZXJpb2RWaXNpdG9ycyIsInNlc3Npb25TdGF0cyIsInRvdGFsQWN0aXZlU2Vzc2lvbnMiLCJhdmdQYWdlVmlld3MiLCJ0aW1lV2luZG93IiwiaGlnaEludGVudFNlc3Npb25zIiwiaGlnaEludGVudFZpc2l0b3JzIiwiUHJvbWlzZSIsImFsbCIsInNpZ25hbHMiLCJhbmFseXplVmlzaXRvclNpZ25hbHMiLCJyZWNvbW1lbmRhdGlvbiIsImdlbmVyYXRlUmVjb21tZW5kYXRpb24iLCJ0b3RhbENvdW50IiwicmV0dXJuaW5nVmlzaXRvcnMiLCJjb252ZXJ0ZWRWaXNpdG9ycyIsIm1vYmlsZVZpc2l0b3JzIiwic3RhdGlzdGljcyIsInJldHVybmluZ1BlcmNlbnRhZ2UiLCJtb2JpbGVQZXJjZW50YWdlIiwidGltZXpvbmVNYXAiLCJib3VuY2VkU2Vzc2lvbnMiLCJ3ZWlnaHRzIiwiY29udmVyc2lvbnMiLCJtaW4iLCJhdmdJbnRlcmFjdGlvbnMiLCJhdmdTY3JvbGxEZXB0aCIsInJldmVyc2UiLCJmb3JFYWNoIiwic2Vzc2lvbkluZGV4IiwicHVzaCIsImFjdGlvbiIsInRpbWVQZXJQYWdlIiwiaSIsInBhZ2VUaW1lc3RhbXAiLCJ2YWx1ZSIsImNvbnZlcnNpb25UeXBlIiwiY3VycmVudCIsInRvRml4ZWQiLCJjb3VudHJpZXMiLCJCb29sZWFuIiwibG9uZ1Nlc3Npb25zIiwiZGV2aWNlVHlwZXMiLCJicm93c2VycyIsIm9wZXJhdGluZ1N5c3RlbXMiLCJtb2JpbGUiLCJjaXRpZXMiLCJyZWdpb25zIiwidG9wQ291bnRyeSIsInRvdGFsQ291bnRyaWVzIiwia2V5cyIsImVuZ2FnZW1lbnRTaWduYWxzIiwiYmVoYXZpb3JhbFNpZ25hbHMiLCJpbnRlbnRTaWduYWxzIiwicmlza1NpZ25hbHMiLCJ3ZWlnaHQiLCJ0b0xvd2VyQ2FzZSIsInJlY29tbWVuZGF0aW9ucyIsInVyZ2VuY3kiLCJwcmlvcml0eSIsImNoYW5uZWwiLCJyZWFzb24iLCJoYXNIaWdoSW50ZW50Iiwic29tZSIsInRpbWluZyIsInZpc2l0ZWRQcmljaW5nIiwiaGFzUmlza1NpZ25hbHMiLCJjb25maWRlbmNlIiwicmVhc29uaW5nIiwiZW5nYWdlbWVudExldmVsIiwidmlzaXRvclR5cGUiLCJyYW5nZU1hcCIsInN0ZXBBbmFseXNpcyIsInByZXZpb3VzU3RlcFZpc2l0b3JzIiwic3RlcCIsInN0ZXBWaXNpdG9ycyIsInN0ZXBSZXZlbnVlIiwiY29udmVydGVkU2Vzc2lvbnMiLCJwYXR0ZXJuIiwiUmVnRXhwIiwidGVzdCIsImRyb3BPZmZSYXRlIiwicmV2ZW51ZSIsInN0ZXBSYXRlcyIsInJhdGUiLCJkcm9wT2ZmcyIsImRyb3BPZmYiLCJzZWdtZW50IiwiY3JlYXRlZEJ5IiwibWVtYmVycyIsImNvbnRhY3QiLCJzZWdtZW50QW5hbHlzaXMiLCJuZXdWaXNpdG9yU2Vzc2lvbnMiLCJyZXR1cm5pbmdWaXNpdG9yU2Vzc2lvbnMiLCJuZXdWaXNpdG9yRnVubmVsIiwidG9wRHJvcE9mZlN0ZXAiLCJyZXR1cm5pbmdWaXNpdG9yRnVubmVsIiwibW9iaWxlUmVxcyIsImRlc2t0b3BTZXNzaW9ucyIsIm1vYmlsZUZ1bm5lbCIsImRlc2t0b3BGdW5uZWwiLCJvcmdhbmljU2Vzc2lvbnMiLCJkaXJlY3RTZXNzaW9ucyIsInNvY2lhbFNlc3Npb25zIiwib3JnYW5pY0Z1bm5lbCIsImNvbnNvbGUiLCJmaXJzdFN0ZXAiLCJsYXN0U3RlcCIsInRvTG9jYWxlU3RyaW5nIiwicmV2ZW51ZVN0ZXAiLCJmaW5kIiwib3ZlcmFsbFJhdGUiLCJuZXdWaXNpdG9ycyIsImNvbnZlcnNpb25EaWZmIiwibW9iaWxlU2VnbWVudCIsImRlc2t0b3BTZWdtZW50Iiwib3JnYW5pY1NlZ21lbnQiXSwibWFwcGluZ3MiOiJBQUFBOzs7OztDQUtDOzs7OytCQWlCWUE7OztlQUFBQTs7OytCQWRpQjswQkFTdkI7d0JBRWdCOzJCQUNVO0FBRTFCLE1BQU1BLDJCQUEyQkMsNEJBQWE7SUFDbkRDLFlBQVlDLE1BQWlDLENBQUU7UUFDN0MsS0FBSyxDQUFDO1lBQ0osR0FBR0MsMkJBQWdCLENBQUNDLE9BQU8sQ0FBQ0MsU0FBUztZQUNyQyxHQUFHSCxNQUFNO1FBQ1g7SUFDRjtJQUVBOztHQUVDLEdBQ0QsTUFBZ0JJLGNBQWNDLFdBQTJCLEVBQWtCO1FBQ3pFLE1BQU1DLFlBQVk7WUFDaEI7Z0JBQ0VDLEtBQUs7Z0JBQ0xDLE1BQU07Z0JBQ05DLGFBQWE7Z0JBQ2JDLFVBQVU7WUFDWjtZQUNBO2dCQUNFSCxLQUFLO2dCQUNMQyxNQUFNO2dCQUNOQyxhQUFhO2dCQUNiQyxVQUFVO1lBQ1o7WUFDQTtnQkFDRUgsS0FBSztnQkFDTEMsTUFBTTtnQkFDTkMsYUFBYTtnQkFDYkMsVUFBVTtZQUNaO1lBQ0E7Z0JBQ0VILEtBQUs7Z0JBQ0xDLE1BQU07Z0JBQ05DLGFBQWE7Z0JBQ2JDLFVBQVU7WUFDWjtZQUNBO2dCQUNFSCxLQUFLO2dCQUNMQyxNQUFNO2dCQUNOQyxhQUFhO2dCQUNiQyxV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