{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/lib/sms-providers/sms-service.ts"],"sourcesContent":["import type { SMSProvider, SMSResult } from './base-provider';\nimport { MockSMSProvider } from './mock-provider';\nimport { AfricasTalkingSMSProvider } from './africastalking-provider';\nimport { TwilioSMSProvider } from './twilio-provider';\nimport { TermiiSMSProvider } from './termii-provider';\nimport { DatabaseSMSProvider } from './database-provider';\nimport prisma from '@/lib/db/prisma';\nimport { logger } from '@/lib/logger';\n\n// SMS provider types\nexport type SMSProviderType = 'mock' | 'africastalking' | 'twilio' | 'termii' | 'database';\n\n// SMS service for managing multiple providers\nexport class SMSService {\n  private providers: Map<SMSProviderType, SMSProvider> = new Map();\n  private defaultProvider: SMSProviderType;\n  private organizationProviders: Map<string, SMSProvider> = new Map();\n\n  constructor() {\n    // Initialize all providers\n    this.providers.set('mock', new MockSMSProvider());\n    this.providers.set('africastalking', new AfricasTalkingSMSProvider());\n    this.providers.set('twilio', new TwilioSMSProvider());\n    this.providers.set('termii', new TermiiSMSProvider());\n    this.providers.set('database', new DatabaseSMSProvider());\n\n    // Determine default provider based on configuration and environment\n    this.defaultProvider = this.selectDefaultProvider();\n  }\n\n  private selectDefaultProvider(): SMSProviderType {\n    const configuredProvider = process.env.SMS_PROVIDER as SMSProviderType;\n    \n    // If a specific provider is configured, use it\n    if (configuredProvider && this.providers.has(configuredProvider)) {\n      const provider = this.providers.get(configuredProvider);\n      if (provider?.isConfigured()) {\n        return configuredProvider;\n      }\n    }\n\n    // Auto-select based on available configuration\n    const africastalking = this.providers.get('africastalking');\n    if (africastalking?.isConfigured()) {\n      return 'africastalking';\n    }\n\n    const termii = this.providers.get('termii');\n    if (termii?.isConfigured()) {\n      return 'termii';\n    }\n\n    const twilio = this.providers.get('twilio');\n    if (twilio?.isConfigured()) {\n      return 'twilio';\n    }\n\n    // Fallback to mock for development\n    return 'mock';\n  }\n\n  async sendSMS(phoneNumber: string, message: string, organizationId?: string, providerType?: SMSProviderType): Promise<SMSResult> {\n    try {\n      // If organization ID is provided, try to get organization-specific provider\n      if (organizationId) {\n        const orgProvider = await this.getOrganizationProvider(organizationId);\n        if (orgProvider) {\n          const result = await orgProvider.sendSMS(phoneNumber, message);\n          return {\n            ...result,\n            provider: orgProvider.name\n          } as SMSResult & { provider: string };\n        }\n        \n        // Log fallback for platform default when no org provider exists\n        logger.info('No organization SMS provider found, using platform default SMS provider', { organizationId });\n      }\n\n      // Fall back to default provider selection (platform-managed)\n      const selectedProvider = providerType || this.defaultProvider;\n      const provider = this.providers.get(selectedProvider);\n\n      if (!provider) {\n        return {\n          success: false,\n          error: {\n            message: `SMS provider '${selectedProvider}' not found`,\n            code: 'PROVIDER_NOT_FOUND'\n          }\n        };\n      }\n\n      const result = await provider.sendSMS(phoneNumber, message);\n      \n      // Add provider info to result for tracking\n      return {\n        ...result,\n        provider: provider.name || 'platform-default'\n      } as SMSResult & { provider: string };\n    } catch (error) {\n      logger.error('SMS service error:', { error, phoneNumber, organizationId });\n      return {\n        success: false,\n        error: {\n          message: error instanceof Error ? error.message : 'SMS sending failed',\n          code: 'SMS_SERVICE_ERROR'\n        }\n      };\n    }\n  }\n\n  validatePhoneNumber(phoneNumber: string): boolean {\n    const provider = this.providers.get(this.defaultProvider);\n    return provider?.validatePhoneNumber(phoneNumber) ?? false;\n  }\n\n  getProvider(providerType?: SMSProviderType): SMSProvider | undefined {\n    return this.providers.get(providerType || this.defaultProvider);\n  }\n\n  getConfiguredProviders(): { type: SMSProviderType; name: string; configured: boolean }[] {\n    return Array.from(this.providers.entries()).map(([type, provider]) => ({\n      type,\n      name: provider.name,\n      configured: provider.isConfigured()\n    }));\n  }\n\n  getCurrentProvider(): { type: SMSProviderType; name: string } {\n    const provider = this.providers.get(this.defaultProvider);\n    return {\n      type: this.defaultProvider,\n      name: provider?.name || 'Unknown'\n    };\n  }\n\n  getProviderName(): string {\n    const provider = this.providers.get(this.defaultProvider);\n    return provider?.name || 'Unknown';\n  }\n\n  isConfigured(): boolean {\n    const provider = this.providers.get(this.defaultProvider);\n    return provider?.isConfigured() ?? false;\n  }\n\n  // Get organization-specific SMS provider\n  async getOrganizationProvider(organizationId: string): Promise<SMSProvider | null> {\n    try {\n      // Check cache first\n      const cacheKey = `sms_${organizationId}`;\n      if (this.organizationProviders.has(cacheKey)) {\n        return this.organizationProviders.get(cacheKey) || null;\n      }\n\n      // Get from database\n      const smsConfig = await prisma.sMSProvider.findFirst({\n        where: {\n          organizationId,\n          isActive: true\n        }\n      });\n\n      if (!smsConfig) {\n        return null;\n      }\n\n      // Create provider instance based on type\n      let provider: SMSProvider;\n      \n      switch (smsConfig.providerType) {\n        case 'TWILIO':\n          provider = new TwilioSMSProvider({\n            accountSid: smsConfig.accountSid || '',\n            authToken: smsConfig.authToken || '',\n            fromNumber: smsConfig.fromNumber || ''\n          });\n          break;\n        case 'AFRICASTALKING':\n          provider = new AfricasTalkingSMSProvider({\n            apiKey: smsConfig.apiKey || '',\n            username: smsConfig.username || '',\n            fromNumber: smsConfig.fromNumber || ''\n          });\n          break;\n        case 'TERMII':\n          provider = new TermiiSMSProvider({\n            apiKey: smsConfig.apiKey || '',\n            senderId: smsConfig.fromNumber || ''\n          });\n          break;\n        default:\n          logger.warn(`Unknown SMS provider type: ${smsConfig.providerType}`);\n          return null;\n      }\n\n      // Cache the provider\n      this.organizationProviders.set(cacheKey, provider);\n      \n      return provider;\n    } catch (error) {\n      logger.error('Error getting organization SMS provider:', { error, organizationId });\n      return null;\n    }\n  }\n\n  // Clear organization provider cache\n  clearOrganizationCache(organizationId: string): void {\n    const cacheKey = `sms_${organizationId}`;\n    this.organizationProviders.delete(cacheKey);\n  }\n\n  // Test organization SMS configuration\n  async testOrganizationSMS(organizationId: string, testPhoneNumber: string): Promise<SMSResult> {\n    const provider = await this.getOrganizationProvider(organizationId);\n    \n    if (!provider) {\n      return {\n        success: false,\n        error: {\n          message: 'SMS provider not configured for this organization',\n          code: 'PROVIDER_NOT_CONFIGURED'\n        }\n      };\n    }\n\n    if (!provider.isConfigured()) {\n      return {\n        success: false,\n        error: {\n          message: 'SMS provider configuration is incomplete',\n          code: 'PROVIDER_NOT_CONFIGURED'\n        }\n      };\n    }\n\n    // Send test message\n    return provider.sendSMS(testPhoneNumber, 'Test message from MarketSage SMS service');\n  }\n}\n\n// Export singleton instance for global use\nexport const smsService = new SMSService();\n\n// Export legacy function for backward compatibility\nexport async function sendSMS(phoneNumber: string, message: string, organizationId?: string): Promise<SMSResult> {\n  return smsService.sendSMS(phoneNumber, message, organizationId);\n}"],"names":["SMSService","sendSMS","smsService","constructor","providers","Map","organizationProviders","set","MockSMSProvider","AfricasTalkingSMSProvider","TwilioSMSProvider","TermiiSMSProvider","DatabaseSMSProvider","defaultProvider","selectDefaultProvider","configuredProvider","process","env","SMS_PROVIDER","has","provider","get","isConfigured","africastalking","termii","twilio","phoneNumber","message","organizationId","providerType","orgProvider","getOrganizationProvider","result","name","logger","info","selectedProvider","success","error","code","Error","validatePhoneNumber","getProvider","getConfiguredProviders","Array","from","entries","map","type","configured","getCurrentProvider","getProviderName","cacheKey","smsConfig","prisma","sMSProvider","findFirst","where","isActive","accountSid","authToken","fromNumber","apiKey","username","senderId","warn","clearOrganizationCache","delete","testOrganizationSMS","testPhoneNumber"],"mappings":"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"}