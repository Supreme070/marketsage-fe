5bf50ebe820b3adba721d7ca64c0d24d
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    SMSService: function() {
        return SMSService;
    },
    sendSMS: function() {
        return sendSMS;
    },
    smsService: function() {
        return smsService;
    }
});
const _mockprovider = require("./mock-provider");
const _africastalkingprovider = require("./africastalking-provider");
const _twilioprovider = require("./twilio-provider");
const _termiiprovider = require("./termii-provider");
const _databaseprovider = require("./database-provider");
const _prisma = /*#__PURE__*/ _interop_require_default(require("../db/prisma"));
const _logger = require("../logger");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
class SMSService {
    constructor(){
        this.providers = new Map();
        this.organizationProviders = new Map();
        // Initialize all providers
        this.providers.set('mock', new _mockprovider.MockSMSProvider());
        this.providers.set('africastalking', new _africastalkingprovider.AfricasTalkingSMSProvider());
        this.providers.set('twilio', new _twilioprovider.TwilioSMSProvider());
        this.providers.set('termii', new _termiiprovider.TermiiSMSProvider());
        this.providers.set('database', new _databaseprovider.DatabaseSMSProvider());
        // Determine default provider based on configuration and environment
        this.defaultProvider = this.selectDefaultProvider();
    }
    selectDefaultProvider() {
        const configuredProvider = process.env.SMS_PROVIDER;
        // If a specific provider is configured, use it
        if (configuredProvider && this.providers.has(configuredProvider)) {
            const provider = this.providers.get(configuredProvider);
            if (provider?.isConfigured()) {
                return configuredProvider;
            }
        }
        // Auto-select based on available configuration
        const africastalking = this.providers.get('africastalking');
        if (africastalking?.isConfigured()) {
            return 'africastalking';
        }
        const termii = this.providers.get('termii');
        if (termii?.isConfigured()) {
            return 'termii';
        }
        const twilio = this.providers.get('twilio');
        if (twilio?.isConfigured()) {
            return 'twilio';
        }
        // Fallback to mock for development
        return 'mock';
    }
    async sendSMS(phoneNumber, message, organizationId, providerType) {
        try {
            // If organization ID is provided, try to get organization-specific provider
            if (organizationId) {
                const orgProvider = await this.getOrganizationProvider(organizationId);
                if (orgProvider) {
                    const result = await orgProvider.sendSMS(phoneNumber, message);
                    return {
                        ...result,
                        provider: orgProvider.name
                    };
                }
                // Log fallback for platform default when no org provider exists
                _logger.logger.info('No organization SMS provider found, using platform default SMS provider', {
                    organizationId
                });
            }
            // Fall back to default provider selection (platform-managed)
            const selectedProvider = providerType || this.defaultProvider;
            const provider = this.providers.get(selectedProvider);
            if (!provider) {
                return {
                    success: false,
                    error: {
                        message: `SMS provider '${selectedProvider}' not found`,
                        code: 'PROVIDER_NOT_FOUND'
                    }
                };
            }
            const result = await provider.sendSMS(phoneNumber, message);
            // Add provider info to result for tracking
            return {
                ...result,
                provider: provider.name || 'platform-default'
            };
        } catch (error) {
            _logger.logger.error('SMS service error:', {
                error,
                phoneNumber,
                organizationId
            });
            return {
                success: false,
                error: {
                    message: error instanceof Error ? error.message : 'SMS sending failed',
                    code: 'SMS_SERVICE_ERROR'
                }
            };
        }
    }
    validatePhoneNumber(phoneNumber) {
        const provider = this.providers.get(this.defaultProvider);
        return provider?.validatePhoneNumber(phoneNumber) ?? false;
    }
    getProvider(providerType) {
        return this.providers.get(providerType || this.defaultProvider);
    }
    getConfiguredProviders() {
        return Array.from(this.providers.entries()).map(([type, provider])=>({
                type,
                name: provider.name,
                configured: provider.isConfigured()
            }));
    }
    getCurrentProvider() {
        const provider = this.providers.get(this.defaultProvider);
        return {
            type: this.defaultProvider,
            name: provider?.name || 'Unknown'
        };
    }
    getProviderName() {
        const provider = this.providers.get(this.defaultProvider);
        return provider?.name || 'Unknown';
    }
    isConfigured() {
        const provider = this.providers.get(this.defaultProvider);
        return provider?.isConfigured() ?? false;
    }
    // Get organization-specific SMS provider
    async getOrganizationProvider(organizationId) {
        try {
            // Check cache first
            const cacheKey = `sms_${organizationId}`;
            if (this.organizationProviders.has(cacheKey)) {
                return this.organizationProviders.get(cacheKey) || null;
            }
            // Get from database
            const smsConfig = await _prisma.default.sMSProvider.findFirst({
                where: {
                    organizationId,
                    isActive: true
                }
            });
            if (!smsConfig) {
                return null;
            }
            // Create provider instance based on type
            let provider;
            switch(smsConfig.providerType){
                case 'TWILIO':
                    provider = new _twilioprovider.TwilioSMSProvider({
                        accountSid: smsConfig.accountSid || '',
                        authToken: smsConfig.authToken || '',
                        fromNumber: smsConfig.fromNumber || ''
                    });
                    break;
                case 'AFRICASTALKING':
                    provider = new _africastalkingprovider.AfricasTalkingSMSProvider({
                        apiKey: smsConfig.apiKey || '',
                        username: smsConfig.username || '',
                        fromNumber: smsConfig.fromNumber || ''
                    });
                    break;
                case 'TERMII':
                    provider = new _termiiprovider.TermiiSMSProvider({
                        apiKey: smsConfig.apiKey || '',
                        senderId: smsConfig.fromNumber || ''
                    });
                    break;
                default:
                    _logger.logger.warn(`Unknown SMS provider type: ${smsConfig.providerType}`);
                    return null;
            }
            // Cache the provider
            this.organizationProviders.set(cacheKey, provider);
            return provider;
        } catch (error) {
            _logger.logger.error('Error getting organization SMS provider:', {
                error,
                organizationId
            });
            return null;
        }
    }
    // Clear organization provider cache
    clearOrganizationCache(organizationId) {
        const cacheKey = `sms_${organizationId}`;
        this.organizationProviders.delete(cacheKey);
    }
    // Test organization SMS configuration
    async testOrganizationSMS(organizationId, testPhoneNumber) {
        const provider = await this.getOrganizationProvider(organizationId);
        if (!provider) {
            return {
                success: false,
                error: {
                    message: 'SMS provider not configured for this organization',
                    code: 'PROVIDER_NOT_CONFIGURED'
                }
            };
        }
        if (!provider.isConfigured()) {
            return {
                success: false,
                error: {
                    message: 'SMS provider configuration is incomplete',
                    code: 'PROVIDER_NOT_CONFIGURED'
                }
            };
        }
        // Send test message
        return provider.sendSMS(testPhoneNumber, 'Test message from MarketSage SMS service');
    }
}
const smsService = new SMSService();
async function sendSMS(phoneNumber, message, organizationId) {
    return smsService.sendSMS(phoneNumber, message, organizationId);
}

//# sourceMappingURL=data:application/json;base64,