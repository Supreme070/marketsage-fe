{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/__tests__/integration/mcp/docker-environment.test.ts"],"sourcesContent":["/**\n * Docker Environment Integration Tests for MCP Servers\n * \n * Tests MCP functionality specifically in Docker environments,\n * including database connections, environment variables, and containerized operations.\n */\n\nimport { describe, beforeAll, afterAll, beforeEach, test, expect } from '@jest/test';\nimport { TestDatabaseManager, testPrisma, PerformanceTracker, testConfig, isDockerEnvironment } from './setup';\nimport { execSync } from 'child_process';\nimport path from 'path';\n\ndescribe('Docker Environment Integration Tests', () => {\n  let dbManager: TestDatabaseManager;\n  let performanceTracker: PerformanceTracker;\n\n  beforeAll(async () => {\n    // Skip these tests if not in Docker environment\n    if (!isDockerEnvironment()) {\n      console.log('⚠️  Skipping Docker tests - not in Docker environment');\n      return;\n    }\n\n    dbManager = TestDatabaseManager.getInstance();\n    await dbManager.setup();\n    performanceTracker = new PerformanceTracker();\n    \n    console.log('🐳 Running tests in Docker environment');\n  }, testConfig.timeouts.integration);\n\n  afterAll(async () => {\n    if (!isDockerEnvironment()) return;\n    \n    await dbManager.teardown();\n  }, testConfig.timeouts.database);\n\n  beforeEach(async () => {\n    if (!isDockerEnvironment()) return;\n    \n    performanceTracker.reset();\n  });\n\n  describe('Docker Environment Detection', () => {\n    test('should detect Docker environment correctly', () => {\n      if (!isDockerEnvironment()) {\n        console.log('📍 Running in local environment');\n        return;\n      }\n\n      expect(isDockerEnvironment()).toBe(true);\n      \n      // Check for Docker-specific environment variables\n      expect(process.env.DATABASE_URL).toContain('marketsage-db');\n      \n      console.log('🐳 Docker environment detected');\n    });\n\n    test('should have correct Docker database connection', async () => {\n      if (!isDockerEnvironment()) return;\n\n      performanceTracker.start();\n      \n      // Test direct database connection\n      const result = await testPrisma.$queryRaw`SELECT version()`;\n      \n      const duration = performanceTracker.measure('docker_db_connection');\n      \n      expect(result).toBeDefined();\n      expect(Array.isArray(result)).toBe(true);\n      expect(duration).toBeLessThan(testConfig.performance.maxQueryTime);\n      \n      console.log(`🔌 Docker DB connection: ${duration}ms`);\n    });\n  });\n\n  describe('Docker Database Operations', () => {\n    test('should perform database operations efficiently in Docker', async () => {\n      if (!isDockerEnvironment()) return;\n\n      performanceTracker.start();\n      \n      // Test complex query in Docker environment\n      const campaignMetrics = await testPrisma.mCPCampaignMetrics.findMany({\n        include: {\n          organization: true\n        },\n        where: {\n          campaignType: 'EMAIL'\n        },\n        orderBy: { calculatedAt: 'desc' },\n        take: 20\n      });\n      \n      const duration = performanceTracker.measure('docker_complex_query');\n      \n      expect(campaignMetrics.length).toBeGreaterThan(0);\n      expect(duration).toBeLessThan(testConfig.performance.maxQueryTime * 2); // Allow more time in Docker\n      \n      console.log(`🐳 Docker complex query: ${duration}ms`);\n    });\n\n    test('should handle concurrent database operations in Docker', async () => {\n      if (!isDockerEnvironment()) return;\n\n      const concurrentOperations = Array.from({ length: 5 }, async (_, index) => {\n        performanceTracker.start();\n        \n        const result = await testPrisma.mCPCustomerPredictions.findMany({\n          where: {\n            segment: index % 2 === 0 ? 'VIP Customers' : 'Growth Potential'\n          },\n          take: 10\n        });\n        \n        const duration = performanceTracker.measure(`docker_concurrent_${index}`);\n        \n        return { result, duration };\n      });\n\n      const results = await Promise.all(concurrentOperations);\n      \n      results.forEach(({ result, duration }, index) => {\n        expect(Array.isArray(result)).toBe(true);\n        expect(duration).toBeLessThan(testConfig.performance.maxResponseTime);\n        console.log(`🔄 Docker concurrent operation ${index}: ${duration}ms`);\n      });\n    });\n\n    test('should maintain data consistency in Docker environment', async () => {\n      if (!isDockerEnvironment()) return;\n\n      // Test transaction in Docker\n      const result = await testPrisma.$transaction(async (tx) => {\n        const orgCount = await tx.organization.count();\n        const contactCount = await tx.contact.count();\n        const campaignCount = await tx.mCPCampaignMetrics.count();\n        \n        return { orgCount, contactCount, campaignCount };\n      });\n      \n      expect(result.orgCount).toBeGreaterThan(0);\n      expect(result.contactCount).toBeGreaterThan(0);\n      expect(result.campaignCount).toBeGreaterThan(0);\n      \n      console.log('🔒 Docker transaction test passed');\n    });\n  });\n\n  describe('Docker Container Health', () => {\n    test('should verify Docker container resources', async () => {\n      if (!isDockerEnvironment()) return;\n\n      try {\n        // Check container memory usage\n        const memInfo = execSync('cat /proc/meminfo | grep MemAvailable', { encoding: 'utf8' });\n        const availableMemory = parseInt(memInfo.split(':')[1].trim().split(' ')[0]);\n        \n        expect(availableMemory).toBeGreaterThan(100000); // At least 100MB available\n        \n        console.log(`🧠 Available memory: ${Math.round(availableMemory / 1024)}MB`);\n      } catch (error) {\n        console.log('⚠️  Could not check container memory');\n      }\n    });\n\n    test('should verify Docker network connectivity', async () => {\n      if (!isDockerEnvironment()) return;\n\n      performanceTracker.start();\n      \n      // Test network connectivity to database\n      const networkTest = await testPrisma.$queryRaw`SELECT 1 as connectivity_test`;\n      \n      const duration = performanceTracker.measure('docker_network_test');\n      \n      expect(networkTest).toBeDefined();\n      expect(duration).toBeLessThan(testConfig.performance.maxQueryTime);\n      \n      console.log(`🌐 Docker network test: ${duration}ms`);\n    });\n  });\n\n  describe('Docker Environment Variables', () => {\n    test('should have proper Docker environment configuration', () => {\n      if (!isDockerEnvironment()) return;\n\n      // Verify essential environment variables\n      expect(process.env.DATABASE_URL).toBeDefined();\n      expect(process.env.DATABASE_URL).toContain('marketsage-db');\n      \n      // Check if running in container\n      expect(process.env.DOCKER_ENV || process.env.NODE_ENV).toBeDefined();\n      \n      console.log('✅ Docker environment variables verified');\n    });\n\n    test('should handle Docker-specific database URL format', async () => {\n      if (!isDockerEnvironment()) return;\n\n      const dbUrl = process.env.DATABASE_URL;\n      \n      // Verify Docker internal hostname\n      expect(dbUrl).toContain('marketsage-db:5432');\n      \n      // Test connection with Docker URL\n      await expect(testPrisma.$connect()).resolves.not.toThrow();\n      \n      console.log('🔗 Docker database URL format verified');\n    });\n  });\n\n  describe('Docker Volume Persistence', () => {\n    test('should persist data across container operations', async () => {\n      if (!isDockerEnvironment()) return;\n\n      // Create test data\n      const testMetric = await testPrisma.mCPMonitoringMetrics.create({\n        data: {\n          organizationId: 'test-org-1',\n          metricType: 'docker_persistence_test',\n          value: 42.0,\n          timestamp: new Date(),\n          tags: JSON.stringify({ test: 'docker_persistence' })\n        }\n      });\n\n      expect(testMetric.id).toBeDefined();\n      \n      // Verify data exists\n      const retrievedMetric = await testPrisma.mCPMonitoringMetrics.findUnique({\n        where: { id: testMetric.id }\n      });\n      \n      expect(retrievedMetric).toBeDefined();\n      expect(retrievedMetric!.metricType).toBe('docker_persistence_test');\n      expect(retrievedMetric!.value).toBe(42.0);\n      \n      // Clean up\n      await testPrisma.mCPMonitoringMetrics.delete({\n        where: { id: testMetric.id }\n      });\n      \n      console.log('💾 Docker volume persistence verified');\n    });\n  });\n\n  describe('Docker MCP Integration', () => {\n    test('should run MCP seed scripts in Docker environment', async () => {\n      if (!isDockerEnvironment()) return;\n\n      performanceTracker.start();\n      \n      // Verify MCP data exists (should be seeded during setup)\n      const counts = await dbManager.getDataCounts();\n      \n      const duration = performanceTracker.measure('docker_mcp_data_verification');\n      \n      expect(counts.mcpCampaignMetrics).toBeGreaterThan(0);\n      expect(counts.mcpCustomerPredictions).toBeGreaterThan(0);\n      expect(counts.mcpVisitorSessions).toBeGreaterThan(0);\n      expect(counts.mcpMonitoringMetrics).toBeGreaterThan(0);\n      expect(duration).toBeLessThan(testConfig.performance.maxResponseTime);\n      \n      console.log(`🔄 Docker MCP data verification: ${duration}ms`);\n      console.log('📊 MCP data counts in Docker:', counts);\n    });\n\n    test('should handle Docker-specific file paths', async () => {\n      if (!isDockerEnvironment()) return;\n\n      // Test that we can access files in Docker container\n      try {\n        const packageJsonPath = path.resolve(process.cwd(), 'package.json');\n        const fs = require('fs');\n        \n        expect(fs.existsSync(packageJsonPath)).toBe(true);\n        \n        console.log('📁 Docker file system access verified');\n      } catch (error) {\n        console.log('⚠️  Docker file system access test failed:', error.message);\n      }\n    });\n  });\n\n  describe('Docker Performance Benchmarks', () => {\n    test('should meet performance standards in Docker environment', async () => {\n      if (!isDockerEnvironment()) return;\n\n      const benchmarkTests = [\n        {\n          name: 'Simple Query',\n          test: () => testPrisma.organization.findMany({ take: 10 })\n        },\n        {\n          name: 'Complex Join',\n          test: () => testPrisma.mCPCustomerPredictions.findMany({\n            include: { contact: true, organization: true },\n            take: 20\n          })\n        },\n        {\n          name: 'Aggregation',\n          test: () => testPrisma.mCPCampaignMetrics.aggregate({\n            _avg: { openRate: true, clickRate: true },\n            _count: { id: true }\n          })\n        },\n        {\n          name: 'Time Series',\n          test: () => testPrisma.mCPMonitoringMetrics.findMany({\n            where: {\n              timestamp: {\n                gte: new Date(Date.now() - 24 * 60 * 60 * 1000)\n              }\n            },\n            orderBy: { timestamp: 'desc' },\n            take: 100\n          })\n        }\n      ];\n\n      for (const benchmark of benchmarkTests) {\n        performanceTracker.start();\n        \n        const result = await benchmark.test();\n        \n        const duration = performanceTracker.measure(`docker_${benchmark.name.toLowerCase().replace(' ', '_')}`);\n        \n        expect(result).toBeDefined();\n        expect(duration).toBeLessThan(testConfig.performance.maxResponseTime * 1.5); // Allow 50% more time in Docker\n        \n        console.log(`🐳 Docker ${benchmark.name}: ${duration}ms`);\n      }\n    });\n\n    test('should handle Docker container resource limits', async () => {\n      if (!isDockerEnvironment()) return;\n\n      // Test memory-intensive operation\n      performanceTracker.start();\n      \n      const largeDataset = await testPrisma.mCPVisitorSessions.findMany({\n        include: {\n          organization: true\n        },\n        take: 500 // Larger dataset\n      });\n      \n      const duration = performanceTracker.measure('docker_memory_intensive');\n      \n      expect(largeDataset.length).toBeGreaterThan(0);\n      expect(duration).toBeLessThan(testConfig.performance.maxResponseTime * 3); // Allow more time for large dataset\n      \n      console.log(`🧠 Docker memory-intensive operation: ${duration}ms`);\n    });\n  });\n\n  describe('Docker Error Handling', () => {\n    test('should handle Docker-specific connection errors gracefully', async () => {\n      if (!isDockerEnvironment()) return;\n\n      // Test with temporary invalid database URL\n      const originalUrl = process.env.DATABASE_URL;\n      \n      try {\n        // This test verifies error handling rather than actually breaking the connection\n        const invalidPrisma = new (require('@prisma/client').PrismaClient)({\n          datasources: {\n            db: {\n              url: 'postgresql://invalid:invalid@invalid-host:5432/invalid'\n            }\n          }\n        });\n        \n        await expect(invalidPrisma.$connect()).rejects.toThrow();\n        \n        console.log('🚫 Docker connection error handling verified');\n      } catch (error) {\n        // Expected behavior\n        expect(error).toBeDefined();\n      }\n    });\n  });\n\n  describe('Docker Performance Summary', () => {\n    test('should generate Docker-specific performance report', async () => {\n      if (!isDockerEnvironment()) return;\n\n      const allStats = performanceTracker.getAllStats();\n      \n      console.log('\\n🐳 Docker Environment Performance Report:');\n      console.log('=========================================');\n      \n      Object.entries(allStats).forEach(([operation, stats]) => {\n        if (operation.startsWith('docker_')) {\n          console.log(`${operation}:`);\n          console.log(`  Average: ${stats.avg.toFixed(2)}ms`);\n          console.log(`  Min: ${stats.min}ms`);\n          console.log(`  Max: ${stats.max}ms`);\n          console.log(`  Count: ${stats.count}`);\n          console.log('');\n        }\n      });\n      \n      // Calculate Docker-specific metrics\n      const dockerOperations = Object.entries(allStats).filter(([key]) => key.startsWith('docker_'));\n      const dockerAvg = dockerOperations.reduce((sum, [_, stats]) => sum + stats.avg, 0) / dockerOperations.length;\n      \n      console.log(`🐳 Docker Average Response Time: ${dockerAvg.toFixed(2)}ms`);\n      console.log(`🎯 Docker Performance Target: ${testConfig.performance.maxResponseTime * 1.5}ms`);\n      console.log(`✅ Docker Performance Status: ${dockerAvg < testConfig.performance.maxResponseTime * 1.5 ? 'PASSED' : 'FAILED'}`);\n      \n      expect(dockerAvg).toBeLessThan(testConfig.performance.maxResponseTime * 1.5);\n    });\n  });\n});"],"names":["describe","dbManager","performanceTracker","beforeAll","isDockerEnvironment","console","log","TestDatabaseManager","getInstance","setup","PerformanceTracker","testConfig","timeouts","integration","afterAll","teardown","database","beforeEach","reset","test","expect","toBe","process","env","DATABASE_URL","toContain","start","result","testPrisma","$queryRaw","duration","measure","toBeDefined","Array","isArray","toBeLessThan","performance","maxQueryTime","campaignMetrics","mCPCampaignMetrics","findMany","include","organization","where","campaignType","orderBy","calculatedAt","take","length","toBeGreaterThan","concurrentOperations","from","_","index","mCPCustomerPredictions","segment","results","Promise","all","forEach","maxResponseTime","$transaction","tx","orgCount","count","contactCount","contact","campaignCount","memInfo","execSync","encoding","availableMemory","parseInt","split","trim","Math","round","error","networkTest","DOCKER_ENV","NODE_ENV","dbUrl","$connect","resolves","not","toThrow","testMetric","mCPMonitoringMetrics","create","data","organizationId","metricType","value","timestamp","Date","tags","JSON","stringify","id","retrievedMetric","findUnique","delete","counts","getDataCounts","mcpCampaignMetrics","mcpCustomerPredictions","mcpVisitorSessions","mcpMonitoringMetrics","packageJsonPath","path","resolve","cwd","fs","require","existsSync","message","benchmarkTests","name","aggregate","_avg","openRate","clickRate","_count","gte","now","benchmark","toLowerCase","replace","largeDataset","mCPVisitorSessions","originalUrl","invalidPrisma","PrismaClient","datasources","db","url","rejects","allStats","getAllStats","Object","entries","operation","stats","startsWith","avg","toFixed","min","max","dockerOperations","filter","key","dockerAvg","reduce","sum"],"mappings":"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"}