c2db674e07fcb5435b99dd0047c580a4
/**
 * Docker Environment Integration Tests for MCP Servers
 * 
 * Tests MCP functionality specifically in Docker environments,
 * including database connections, environment variables, and containerized operations.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _test = require("@jest/test");
const _setup = require("./setup");
const _child_process = require("child_process");
const _path = /*#__PURE__*/ _interop_require_default(require("path"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
(0, _test.describe)('Docker Environment Integration Tests', ()=>{
    let dbManager;
    let performanceTracker;
    (0, _test.beforeAll)(async ()=>{
        // Skip these tests if not in Docker environment
        if (!(0, _setup.isDockerEnvironment)()) {
            console.log('⚠️  Skipping Docker tests - not in Docker environment');
            return;
        }
        dbManager = _setup.TestDatabaseManager.getInstance();
        await dbManager.setup();
        performanceTracker = new _setup.PerformanceTracker();
        console.log('🐳 Running tests in Docker environment');
    }, _setup.testConfig.timeouts.integration);
    (0, _test.afterAll)(async ()=>{
        if (!(0, _setup.isDockerEnvironment)()) return;
        await dbManager.teardown();
    }, _setup.testConfig.timeouts.database);
    (0, _test.beforeEach)(async ()=>{
        if (!(0, _setup.isDockerEnvironment)()) return;
        performanceTracker.reset();
    });
    (0, _test.describe)('Docker Environment Detection', ()=>{
        (0, _test.test)('should detect Docker environment correctly', ()=>{
            if (!(0, _setup.isDockerEnvironment)()) {
                console.log('📍 Running in local environment');
                return;
            }
            (0, _test.expect)((0, _setup.isDockerEnvironment)()).toBe(true);
            // Check for Docker-specific environment variables
            (0, _test.expect)(process.env.DATABASE_URL).toContain('marketsage-db');
            console.log('🐳 Docker environment detected');
        });
        (0, _test.test)('should have correct Docker database connection', async ()=>{
            if (!(0, _setup.isDockerEnvironment)()) return;
            performanceTracker.start();
            // Test direct database connection
            const result = await _setup.testPrisma.$queryRaw`SELECT version()`;
            const duration = performanceTracker.measure('docker_db_connection');
            (0, _test.expect)(result).toBeDefined();
            (0, _test.expect)(Array.isArray(result)).toBe(true);
            (0, _test.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxQueryTime);
            console.log(`🔌 Docker DB connection: ${duration}ms`);
        });
    });
    (0, _test.describe)('Docker Database Operations', ()=>{
        (0, _test.test)('should perform database operations efficiently in Docker', async ()=>{
            if (!(0, _setup.isDockerEnvironment)()) return;
            performanceTracker.start();
            // Test complex query in Docker environment
            const campaignMetrics = await _setup.testPrisma.mCPCampaignMetrics.findMany({
                include: {
                    organization: true
                },
                where: {
                    campaignType: 'EMAIL'
                },
                orderBy: {
                    calculatedAt: 'desc'
                },
                take: 20
            });
            const duration = performanceTracker.measure('docker_complex_query');
            (0, _test.expect)(campaignMetrics.length).toBeGreaterThan(0);
            (0, _test.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxQueryTime * 2); // Allow more time in Docker
            console.log(`🐳 Docker complex query: ${duration}ms`);
        });
        (0, _test.test)('should handle concurrent database operations in Docker', async ()=>{
            if (!(0, _setup.isDockerEnvironment)()) return;
            const concurrentOperations = Array.from({
                length: 5
            }, async (_, index)=>{
                performanceTracker.start();
                const result = await _setup.testPrisma.mCPCustomerPredictions.findMany({
                    where: {
                        segment: index % 2 === 0 ? 'VIP Customers' : 'Growth Potential'
                    },
                    take: 10
                });
                const duration = performanceTracker.measure(`docker_concurrent_${index}`);
                return {
                    result,
                    duration
                };
            });
            const results = await Promise.all(concurrentOperations);
            results.forEach(({ result, duration }, index)=>{
                (0, _test.expect)(Array.isArray(result)).toBe(true);
                (0, _test.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxResponseTime);
                console.log(`🔄 Docker concurrent operation ${index}: ${duration}ms`);
            });
        });
        (0, _test.test)('should maintain data consistency in Docker environment', async ()=>{
            if (!(0, _setup.isDockerEnvironment)()) return;
            // Test transaction in Docker
            const result = await _setup.testPrisma.$transaction(async (tx)=>{
                const orgCount = await tx.organization.count();
                const contactCount = await tx.contact.count();
                const campaignCount = await tx.mCPCampaignMetrics.count();
                return {
                    orgCount,
                    contactCount,
                    campaignCount
                };
            });
            (0, _test.expect)(result.orgCount).toBeGreaterThan(0);
            (0, _test.expect)(result.contactCount).toBeGreaterThan(0);
            (0, _test.expect)(result.campaignCount).toBeGreaterThan(0);
            console.log('🔒 Docker transaction test passed');
        });
    });
    (0, _test.describe)('Docker Container Health', ()=>{
        (0, _test.test)('should verify Docker container resources', async ()=>{
            if (!(0, _setup.isDockerEnvironment)()) return;
            try {
                // Check container memory usage
                const memInfo = (0, _child_process.execSync)('cat /proc/meminfo | grep MemAvailable', {
                    encoding: 'utf8'
                });
                const availableMemory = parseInt(memInfo.split(':')[1].trim().split(' ')[0]);
                (0, _test.expect)(availableMemory).toBeGreaterThan(100000); // At least 100MB available
                console.log(`🧠 Available memory: ${Math.round(availableMemory / 1024)}MB`);
            } catch (error) {
                console.log('⚠️  Could not check container memory');
            }
        });
        (0, _test.test)('should verify Docker network connectivity', async ()=>{
            if (!(0, _setup.isDockerEnvironment)()) return;
            performanceTracker.start();
            // Test network connectivity to database
            const networkTest = await _setup.testPrisma.$queryRaw`SELECT 1 as connectivity_test`;
            const duration = performanceTracker.measure('docker_network_test');
            (0, _test.expect)(networkTest).toBeDefined();
            (0, _test.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxQueryTime);
            console.log(`🌐 Docker network test: ${duration}ms`);
        });
    });
    (0, _test.describe)('Docker Environment Variables', ()=>{
        (0, _test.test)('should have proper Docker environment configuration', ()=>{
            if (!(0, _setup.isDockerEnvironment)()) return;
            // Verify essential environment variables
            (0, _test.expect)(process.env.DATABASE_URL).toBeDefined();
            (0, _test.expect)(process.env.DATABASE_URL).toContain('marketsage-db');
            // Check if running in container
            (0, _test.expect)(process.env.DOCKER_ENV || process.env.NODE_ENV).toBeDefined();
            console.log('✅ Docker environment variables verified');
        });
        (0, _test.test)('should handle Docker-specific database URL format', async ()=>{
            if (!(0, _setup.isDockerEnvironment)()) return;
            const dbUrl = process.env.DATABASE_URL;
            // Verify Docker internal hostname
            (0, _test.expect)(dbUrl).toContain('marketsage-db:5432');
            // Test connection with Docker URL
            await (0, _test.expect)(_setup.testPrisma.$connect()).resolves.not.toThrow();
            console.log('🔗 Docker database URL format verified');
        });
    });
    (0, _test.describe)('Docker Volume Persistence', ()=>{
        (0, _test.test)('should persist data across container operations', async ()=>{
            if (!(0, _setup.isDockerEnvironment)()) return;
            // Create test data
            const testMetric = await _setup.testPrisma.mCPMonitoringMetrics.create({
                data: {
                    organizationId: 'test-org-1',
                    metricType: 'docker_persistence_test',
                    value: 42.0,
                    timestamp: new Date(),
                    tags: JSON.stringify({
                        test: 'docker_persistence'
                    })
                }
            });
            (0, _test.expect)(testMetric.id).toBeDefined();
            // Verify data exists
            const retrievedMetric = await _setup.testPrisma.mCPMonitoringMetrics.findUnique({
                where: {
                    id: testMetric.id
                }
            });
            (0, _test.expect)(retrievedMetric).toBeDefined();
            (0, _test.expect)(retrievedMetric.metricType).toBe('docker_persistence_test');
            (0, _test.expect)(retrievedMetric.value).toBe(42.0);
            // Clean up
            await _setup.testPrisma.mCPMonitoringMetrics.delete({
                where: {
                    id: testMetric.id
                }
            });
            console.log('💾 Docker volume persistence verified');
        });
    });
    (0, _test.describe)('Docker MCP Integration', ()=>{
        (0, _test.test)('should run MCP seed scripts in Docker environment', async ()=>{
            if (!(0, _setup.isDockerEnvironment)()) return;
            performanceTracker.start();
            // Verify MCP data exists (should be seeded during setup)
            const counts = await dbManager.getDataCounts();
            const duration = performanceTracker.measure('docker_mcp_data_verification');
            (0, _test.expect)(counts.mcpCampaignMetrics).toBeGreaterThan(0);
            (0, _test.expect)(counts.mcpCustomerPredictions).toBeGreaterThan(0);
            (0, _test.expect)(counts.mcpVisitorSessions).toBeGreaterThan(0);
            (0, _test.expect)(counts.mcpMonitoringMetrics).toBeGreaterThan(0);
            (0, _test.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxResponseTime);
            console.log(`🔄 Docker MCP data verification: ${duration}ms`);
            console.log('📊 MCP data counts in Docker:', counts);
        });
        (0, _test.test)('should handle Docker-specific file paths', async ()=>{
            if (!(0, _setup.isDockerEnvironment)()) return;
            // Test that we can access files in Docker container
            try {
                const packageJsonPath = _path.default.resolve(process.cwd(), 'package.json');
                const fs = require('fs');
                (0, _test.expect)(fs.existsSync(packageJsonPath)).toBe(true);
                console.log('📁 Docker file system access verified');
            } catch (error) {
                console.log('⚠️  Docker file system access test failed:', error.message);
            }
        });
    });
    (0, _test.describe)('Docker Performance Benchmarks', ()=>{
        (0, _test.test)('should meet performance standards in Docker environment', async ()=>{
            if (!(0, _setup.isDockerEnvironment)()) return;
            const benchmarkTests = [
                {
                    name: 'Simple Query',
                    test: ()=>_setup.testPrisma.organization.findMany({
                            take: 10
                        })
                },
                {
                    name: 'Complex Join',
                    test: ()=>_setup.testPrisma.mCPCustomerPredictions.findMany({
                            include: {
                                contact: true,
                                organization: true
                            },
                            take: 20
                        })
                },
                {
                    name: 'Aggregation',
                    test: ()=>_setup.testPrisma.mCPCampaignMetrics.aggregate({
                            _avg: {
                                openRate: true,
                                clickRate: true
                            },
                            _count: {
                                id: true
                            }
                        })
                },
                {
                    name: 'Time Series',
                    test: ()=>_setup.testPrisma.mCPMonitoringMetrics.findMany({
                            where: {
                                timestamp: {
                                    gte: new Date(Date.now() - 24 * 60 * 60 * 1000)
                                }
                            },
                            orderBy: {
                                timestamp: 'desc'
                            },
                            take: 100
                        })
                }
            ];
            for (const benchmark of benchmarkTests){
                performanceTracker.start();
                const result = await benchmark.test();
                const duration = performanceTracker.measure(`docker_${benchmark.name.toLowerCase().replace(' ', '_')}`);
                (0, _test.expect)(result).toBeDefined();
                (0, _test.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxResponseTime * 1.5); // Allow 50% more time in Docker
                console.log(`🐳 Docker ${benchmark.name}: ${duration}ms`);
            }
        });
        (0, _test.test)('should handle Docker container resource limits', async ()=>{
            if (!(0, _setup.isDockerEnvironment)()) return;
            // Test memory-intensive operation
            performanceTracker.start();
            const largeDataset = await _setup.testPrisma.mCPVisitorSessions.findMany({
                include: {
                    organization: true
                },
                take: 500 // Larger dataset
            });
            const duration = performanceTracker.measure('docker_memory_intensive');
            (0, _test.expect)(largeDataset.length).toBeGreaterThan(0);
            (0, _test.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxResponseTime * 3); // Allow more time for large dataset
            console.log(`🧠 Docker memory-intensive operation: ${duration}ms`);
        });
    });
    (0, _test.describe)('Docker Error Handling', ()=>{
        (0, _test.test)('should handle Docker-specific connection errors gracefully', async ()=>{
            if (!(0, _setup.isDockerEnvironment)()) return;
            // Test with temporary invalid database URL
            const originalUrl = process.env.DATABASE_URL;
            try {
                // This test verifies error handling rather than actually breaking the connection
                const invalidPrisma = new (require('@prisma/client')).PrismaClient({
                    datasources: {
                        db: {
                            url: 'postgresql://invalid:invalid@invalid-host:5432/invalid'
                        }
                    }
                });
                await (0, _test.expect)(invalidPrisma.$connect()).rejects.toThrow();
                console.log('🚫 Docker connection error handling verified');
            } catch (error) {
                // Expected behavior
                (0, _test.expect)(error).toBeDefined();
            }
        });
    });
    (0, _test.describe)('Docker Performance Summary', ()=>{
        (0, _test.test)('should generate Docker-specific performance report', async ()=>{
            if (!(0, _setup.isDockerEnvironment)()) return;
            const allStats = performanceTracker.getAllStats();
            console.log('\n🐳 Docker Environment Performance Report:');
            console.log('=========================================');
            Object.entries(allStats).forEach(([operation, stats])=>{
                if (operation.startsWith('docker_')) {
                    console.log(`${operation}:`);
                    console.log(`  Average: ${stats.avg.toFixed(2)}ms`);
                    console.log(`  Min: ${stats.min}ms`);
                    console.log(`  Max: ${stats.max}ms`);
                    console.log(`  Count: ${stats.count}`);
                    console.log('');
                }
            });
            // Calculate Docker-specific metrics
            const dockerOperations = Object.entries(allStats).filter(([key])=>key.startsWith('docker_'));
            const dockerAvg = dockerOperations.reduce((sum, [_, stats])=>sum + stats.avg, 0) / dockerOperations.length;
            console.log(`🐳 Docker Average Response Time: ${dockerAvg.toFixed(2)}ms`);
            console.log(`🎯 Docker Performance Target: ${_setup.testConfig.performance.maxResponseTime * 1.5}ms`);
            console.log(`✅ Docker Performance Status: ${dockerAvg < _setup.testConfig.performance.maxResponseTime * 1.5 ? 'PASSED' : 'FAILED'}`);
            (0, _test.expect)(dockerAvg).toBeLessThan(_setup.testConfig.performance.maxResponseTime * 1.5);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,