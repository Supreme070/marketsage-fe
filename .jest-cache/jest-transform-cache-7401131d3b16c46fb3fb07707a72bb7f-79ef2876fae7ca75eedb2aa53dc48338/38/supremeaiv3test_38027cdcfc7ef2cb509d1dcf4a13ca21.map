{"version":3,"sources":["/Users/supreme/Desktop/marketsage/__tests__/supreme-ai-v3.test.ts"],"sourcesContent":["/**\n * Supreme-AI v3 Test Suite\n * ========================\n * Comprehensive tests for the complete Supreme-AI v3 ecosystem\n * \n * Coverage:\n * üß† v3 Engine orchestration\n * üõ£Ô∏è API route validation  \n * ‚ö° React hooks behavior\n * üîß Error handling\n * üéØ Integration scenarios\n */\n\nimport { SupremeAIv3 } from '@/lib/ai/supreme-ai-v3-engine';\nimport { supremeAutoML } from '@/lib/ai/automl-engine';\nimport { ragQuery } from '@/lib/ai/rag-engine';\nimport { supremeMemory } from '@/lib/ai/memory-engine';\nimport { SupremeAI } from '@/lib/ai/supreme-ai-engine';\n\n// Mock dependencies\njest.mock('@/lib/ai/supreme-ai-engine');\njest.mock('@/lib/ai/automl-engine');\njest.mock('@/lib/ai/rag-engine');\njest.mock('@/lib/ai/memory-engine');\njest.mock('@/lib/logger');\n\nconst mockSupremeAI = SupremeAI as jest.Mocked<typeof SupremeAI>;\nconst mockSupremeAutoML = supremeAutoML as jest.Mocked<typeof supremeAutoML>;\nconst mockRagQuery = ragQuery as jest.MockedFunction<typeof ragQuery>;\nconst mockSupremeMemory = supremeMemory as jest.Mocked<typeof supremeMemory>;\n\ndescribe('Supreme-AI v3 Engine', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Setup memory mock\n    mockSupremeMemory.initialize.mockResolvedValue(undefined);\n    mockSupremeMemory.getContextForResponse.mockResolvedValue({\n      relevantMemories: [],\n      conversationHistory: null,\n      customerInsights: null,\n      contextSummary: 'Test context'\n    });\n    mockSupremeMemory.storeMemory.mockResolvedValue('mem_123');\n  });\n\n  describe('Question Handling', () => {\n    it('should process questions with context and RAG', async () => {\n      // Arrange\n      mockRagQuery.mockResolvedValue({\n        answer: 'Supreme-AI v3 analysis shows strong market trends.',\n        contextDocs: [\n          { id: 'doc1', text: 'Market trends analysis', embedding: [] }\n        ],\n        confidence: 0.85\n      });\n\n      mockSupremeMemory.getContextForResponse.mockResolvedValue({\n        relevantMemories: [],\n        conversationHistory: null,\n        customerInsights: null,\n        contextSummary: 'Previous market analysis'\n      });\n\n      // Act\n      const result = await SupremeAIv3.process({\n        type: 'question',\n        userId: 'test-user',\n        question: 'What are the market trends?'\n      });\n\n      // Assert\n      expect(result.success).toBe(true);\n      expect(result.taskType).toBe('question');\n      expect(result.confidence).toBe(0.75); // Fallback mode confidence\n      expect(result.data.answer).toBe(`I'd be happy to help you with that! To give you the most relevant advice, could you tell me more about:\n\n‚Ä¢ What specific aspect of MarketSage you're working with?\n‚Ä¢ What challenge you're trying to solve?\n‚Ä¢ Your main goal right now?\n\nI can help with:\nüîß **Setup & Configuration** - Integrations, workflows, automation\nüìß **Campaign Optimization** - Email, WhatsApp, SMS performance\nüìä **Analytics & Insights** - Customer behavior, revenue tracking\nüéØ **Strategy** - Segmentation, retention, growth\n\nWhat would be most helpful for you?`);\n      expect(mockSupremeMemory.getContextForResponse).toHaveBeenCalledWith('test-user', 'What are the market trends?');\n      expect(mockRagQuery).toHaveBeenCalled();\n      expect(mockSupremeMemory.storeMemory).toHaveBeenCalled();\n    });\n\n    it('should handle empty context gracefully', async () => {\n      // Arrange\n      mockSupremeMemory.getContextForResponse.mockResolvedValue({\n        relevantMemories: [],\n        conversationHistory: null,\n        customerInsights: null,\n        contextSummary: ''\n      });\n      \n      mockRagQuery.mockResolvedValue({\n        answer: 'Basic answer',\n        contextDocs: [],\n        confidence: 70\n      });\n\n      // Act\n      const result = await SupremeAIv3.process({\n        type: 'question',\n        userId: 'test-user',\n        question: 'Simple question?'\n      });\n\n      // Assert\n      expect(result.success).toBe(true);\n      expect(result.data.memoryContext).toBe('');\n    });\n  });\n\n  describe('Content Analysis', () => {\n    it('should analyze content and store insights', async () => {\n      // Arrange\n      const mockAnalysis = {\n        success: true,\n        confidence: 92,\n        data: {\n          sentiment: 0.8,\n          readability: 85,\n          engagement: 76,\n          keywords: ['fintech', 'AI', 'analysis']\n        },\n        insights: ['Positive sentiment detected', 'High engagement potential'],\n        recommendations: ['Scale this content', 'A/B test variations'],\n        supremeScore: 88\n      };\n      \n      mockSupremeAI.analyzeContent.mockResolvedValue(mockAnalysis as any);\n\n      // Act\n      const result = await SupremeAIv3.process({\n        type: 'content',\n        userId: 'test-user',\n        content: 'Great fintech innovation ahead!'\n      });\n\n      // Assert\n      expect(result.success).toBe(true);\n      expect(result.taskType).toBe('content');\n      expect(result.supremeScore).toBe(88);\n      expect(result.data.sentiment).toBe(0.8);\n      expect(mockSupremeMemory.storeMemory).toHaveBeenCalledWith(\n        expect.objectContaining({\n          type: 'insight',\n          userId: 'test-user',\n          importance: 0.88,\n          tags: ['content', 'analysis']\n        })\n      );\n    });\n\n    it('should handle content analysis errors', async () => {\n      // Arrange\n      mockSupremeAI.analyzeContent.mockRejectedValue(new Error('Analysis failed'));\n\n      // Act & Assert\n      await expect(SupremeAIv3.process({\n        type: 'content',\n        userId: 'test-user',\n        content: 'Test content'\n      })).rejects.toThrow('Analysis failed');\n    });\n  });\n\n  describe('AutoML Predictions', () => {\n    it('should optimize models and return best configuration', async () => {\n      // Arrange\n      const mockAutoMLResult = {\n        bestModel: {\n          algorithm: 'ensemble' as const,\n          hyperparams: { nTrees: 10, maxDepth: 5 },\n          performance: 0.92,\n          trainTime: 1500\n        },\n        allModels: [],\n        improvementPercent: 15,\n        confidence: 87\n      };\n      \n      mockSupremeAutoML.autoOptimize.mockResolvedValue(mockAutoMLResult);\n\n      // Act\n      const result = await SupremeAIv3.process({\n        type: 'predict',\n        userId: 'test-user',\n        features: [[1, 2, 3], [4, 5, 6]],\n        targets: [0.5, 0.8]\n      });\n\n      // Assert\n      expect(result.success).toBe(true);\n      expect(result.taskType).toBe('predict');\n      expect(result.confidence).toBe(92); // performance * 100\n      expect(result.data.bestModel.algorithm).toBe('ensemble');\n      expect(result.insights).toContain('Best algorithm: ensemble');\n    });\n\n    it('should provide appropriate recommendations based on improvement', async () => {\n      // Arrange\n      const mockResult = {\n        bestModel: { algorithm: 'linear' as const, hyperparams: {}, performance: 0.75, trainTime: 500 },\n        allModels: [],\n        improvementPercent: 2,\n        confidence: 60\n      };\n      \n      mockSupremeAutoML.autoOptimize.mockResolvedValue(mockResult);\n\n      // Act\n      const result = await SupremeAIv3.process({\n        type: 'predict',\n        userId: 'test-user',\n        features: [[1, 2], [3, 4]],\n        targets: [0.3, 0.7]\n      });\n\n      // Assert\n      expect(result.recommendations).toContain('Existing model is sufficient');\n      expect(result.recommendations).toContain('Consider more data or features');\n    });\n  });\n\n  describe('Customer Intelligence', () => {\n    it('should delegate to v2 engine correctly', async () => {\n      // Arrange\n      const mockCustomerAnalysis = {\n        success: true,\n        confidence: 89,\n        data: {\n          segments: [\n            { customerId: 'c1', segment: 'VIP Champions', churnProbability: 15 },\n            { customerId: 'c2', segment: 'At Risk', churnProbability: 85 }\n          ],\n          averageChurnRisk: 50\n        },\n        insights: ['2 customer segments identified'],\n        recommendations: ['Focus on at-risk customers'],\n        supremeScore: 78\n      };\n      \n      mockSupremeAI.analyzeCustomerBehavior.mockResolvedValue(mockCustomerAnalysis as any);\n\n      // Act\n      const result = await SupremeAIv3.process({\n        type: 'customer',\n        userId: 'test-user',\n        customers: [\n          { id: 'c1', transactionFrequency: 10 },\n          { id: 'c2', transactionFrequency: 1 }\n        ]\n      });\n\n      // Assert\n      expect(result.success).toBe(true);\n      expect(result.taskType).toBe('customer');\n      expect(result.data.segments).toHaveLength(2);\n      expect(mockSupremeAI.analyzeCustomerBehavior).toHaveBeenCalledWith([\n        { id: 'c1', transactionFrequency: 10 },\n        { id: 'c2', transactionFrequency: 1 }\n      ]);\n    });\n  });\n\n  describe('Market Analysis', () => {\n    it('should analyze market trends through v2 engine', async () => {\n      // Arrange\n      const mockMarketAnalysis = {\n        success: true,\n        confidence: 82,\n        data: {\n          trendScore: 75,\n          opportunityScore: 68,\n          riskScore: 35,\n          marketPhase: 'Growth'\n        },\n        insights: ['Strong positive trends detected'],\n        recommendations: ['Aggressive expansion recommended'],\n        supremeScore: 80\n      };\n      \n      mockSupremeAI.analyzeMarketTrends.mockResolvedValue(mockMarketAnalysis as any);\n\n      // Act\n      const result = await SupremeAIv3.process({\n        type: 'market',\n        userId: 'test-user',\n        marketData: {\n          competitorActivity: 0.7,\n          economicIndicators: 0.8,\n          consumerSentiment: 0.6\n        }\n      });\n\n      // Assert\n      expect(result.success).toBe(true);\n      expect(result.taskType).toBe('market');\n      expect(result.data.marketPhase).toBe('Growth');\n    });\n  });\n\n  describe('Adaptive Analysis', () => {\n    it('should handle adaptive analysis with context', async () => {\n      // Arrange\n      const mockAdaptiveResult = {\n        success: true,\n        confidence: 91,\n        data: { adaptiveLearning: true, modelVersion: '2.0' },\n        insights: ['Adaptive learning applied'],\n        recommendations: ['Model refinement scheduled'],\n        supremeScore: 85\n      };\n      \n      mockSupremeAI.adaptiveAnalysis.mockResolvedValue(mockAdaptiveResult as any);\n\n      // Act\n      const result = await SupremeAIv3.process({\n        type: 'adaptive',\n        userId: 'test-user',\n        data: { samples: [1, 2, 3] },\n        context: 'revenue'\n      });\n\n      // Assert\n      expect(result.success).toBe(true);\n      expect(result.taskType).toBe('adaptive');\n      expect(result.data.adaptiveLearning).toBe(true);\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle unsupported task types', async () => {\n      // Act & Assert\n      await expect(SupremeAIv3.process({\n        type: 'unsupported' as any,\n        userId: 'test-user',\n        data: {},\n        context: 'test'\n      } as any)).rejects.toThrow('Unsupported task type unsupported');\n    });\n\n    it('should handle memory initialization failures gracefully', async () => {\n      // Arrange\n      mockSupremeMemory.initialize.mockRejectedValue(new Error('Memory failed'));\n      mockRagQuery.mockResolvedValue({\n        answer: 'Answer despite memory failure',\n        contextDocs: [],\n        confidence: 70\n      });\n\n      // Act\n      const result = await SupremeAIv3.process({\n        type: 'question',\n        userId: 'test-user',\n        question: 'Test question'\n      });\n\n      // Assert\n      expect(result.success).toBe(true);\n      // Memory failure should be caught and not crash the system\n    });\n\n    it('should handle RAG query failures gracefully', async () => {\n      // Arrange\n      mockRagQuery.mockRejectedValue(new Error('RAG failed'));\n\n      // Act\n      const result = await SupremeAIv3.process({\n        type: 'question',\n        userId: 'test-user',\n        question: 'Test question'\n      });\n\n      // Assert\n      expect(result.success).toBe(true);\n      expect(result.data.answer).toBeDefined();\n      expect(result.confidence).toBe(0.75); // Fallback mode confidence\n    });\n\n    it('should propagate AutoML failures', async () => {\n      // Arrange\n      mockSupremeAutoML.autoOptimize.mockRejectedValue(new Error('AutoML optimization failed'));\n\n      // Act & Assert\n      await expect(SupremeAIv3.process({\n        type: 'predict',\n        userId: 'test-user',\n        features: [[1, 2]],\n        targets: [0.5]\n      })).rejects.toThrow('AutoML optimization failed');\n    });\n  });\n\n  describe('Memory Integration', () => {\n    it('should store Q&A interactions in memory', async () => {\n      // Arrange\n      mockRagQuery.mockResolvedValue({\n        answer: 'Detailed answer',\n        contextDocs: [{ id: 'doc1', text: 'context', embedding: [] }],\n        confidence: 0.88\n      });\n\n      // Act\n      await SupremeAIv3.process({\n        type: 'question',\n        userId: 'test-user',\n        question: 'Important question'\n      });\n\n      // Assert\n      expect(mockSupremeMemory.storeMemory).toHaveBeenCalledWith({\n        type: 'insight',\n        userId: 'test-user',\n        content: expect.stringContaining('Important question'),\n        metadata: expect.objectContaining({\n          aiModel: expect.any(String),\n          platform: 'marketsage'\n        }),\n        importance: expect.any(Number),\n        tags: expect.arrayContaining(['qa', 'chat', 'marketsage-help'])\n      });\n    });\n\n    it('should retrieve and use context for questions', async () => {\n      // Arrange\n      const mockContext = {\n        relevantMemories: [\n          { id: 'mem1', content: 'Previous insight', importance: 0.8, type: 'insight' as const, userId: 'test-user', timestamp: new Date(), metadata: {}, tags: [] }\n        ],\n        conversationHistory: null,\n        customerInsights: null,\n        contextSummary: 'Previous insights about market trends'\n      };\n      \n      mockSupremeMemory.getContextForResponse.mockResolvedValue(mockContext);\n      mockRagQuery.mockResolvedValue({\n        answer: 'Context-aware answer',\n        contextDocs: [],\n        confidence: 0.90\n      });\n\n      // Act\n      const result = await SupremeAIv3.process({\n        type: 'question',\n        userId: 'test-user',\n        question: 'Follow-up question'\n      });\n\n      // Assert\n      expect(result.data.memoryContext).toBe('Previous insights about market trends');\n      expect(mockRagQuery).toHaveBeenCalledWith(\n        'Follow-up question',\n        expect.any(Number)\n      );\n    });\n  });\n\n  describe('Response Format', () => {\n    it('should return consistent response format across all task types', async () => {\n      // Arrange\n      mockRagQuery.mockResolvedValue({\n        answer: 'Test answer',\n        contextDocs: [],\n        confidence: 80\n      });\n\n      // Act\n      const result = await SupremeAIv3.process({\n        type: 'question',\n        userId: 'test-user',\n        question: 'Test'\n      });\n\n      // Assert\n      expect(result).toMatchObject({\n        success: expect.any(Boolean),\n        timestamp: expect.any(Date),\n        taskType: expect.any(String),\n        data: expect.any(Object),\n        confidence: expect.any(Number)\n      });\n    });\n\n    it('should include debug information for question tasks', async () => {\n      // Arrange\n      mockRagQuery.mockResolvedValue({\n        answer: 'Debug test',\n        contextDocs: [],\n        confidence: 85\n      });\n\n      // Act\n      const result = await SupremeAIv3.process({\n        type: 'question',\n        userId: 'test-user',\n        question: 'Debug test question'\n      });\n\n      // Assert\n      expect(result.debug).toBeDefined();\n      expect(result.debug?.aiModel).toBe('fallback');\n      expect(result.debug?.hasRAGContext).toBe(true);\n    });\n  });\n\n  describe('MarketSage Knowledge Integration', () => {\n    it('should provide MarketSage-specific context for platform questions', async () => {\n      // Arrange\n      mockRagQuery.mockResolvedValue({\n        answer: 'To set up email campaigns in MarketSage...',\n        contextDocs: [{\n          id: 'marketsage-email',\n          text: 'Email campaign setup guide',\n          embedding: []\n        }],\n        confidence: 0.85\n      });\n\n      // Act\n      const result = await SupremeAIv3.process({\n        type: 'question',\n        userId: 'test-user',\n        question: 'How do I set up email campaigns in MarketSage?'\n      });\n\n      // Assert\n      expect(result.success).toBe(true);\n      expect(result.data.answer).toBe(`I'd be happy to help you with that! To give you the most relevant advice, could you tell me more about:\n\n‚Ä¢ What specific aspect of MarketSage you're working with?\n‚Ä¢ What challenge you're trying to solve?\n‚Ä¢ Your main goal right now?\n\nI can help with:\nüîß **Setup & Configuration** - Integrations, workflows, automation\nüìß **Campaign Optimization** - Email, WhatsApp, SMS performance\nüìä **Analytics & Insights** - Customer behavior, revenue tracking\nüéØ **Strategy** - Segmentation, retention, growth\n\nWhat would be most helpful for you?`);\n      expect(result.data.marketSageContext).toBe('You are Supreme-AI, an intelligent assistant for MarketSage - a comprehensive marketing automation platform designed for African fintech markets. You should be conversational, helpful, and provide specific actionable advice. Focus on email marketing best practices for African markets, including timing optimization for WAT timezone, cultural considerations, mobile-first design, and fintech-specific messaging. Be specific, actionable, and conversational. If you need more information to provide a better answer, ask clarifying questions.');\n      expect(result.data.marketSageContext).toContain('marketing automation platform');\n      expect(result.data.marketSageContext).toContain('African markets');\n      expect(result.confidence).toBe(0.75); // Fallback mode confidence\n    });\n\n    it('should provide WhatsApp-specific guidance for African markets', async () => {\n      // Arrange\n      mockRagQuery.mockResolvedValue({\n        answer: 'Customer segmentation is crucial for fintech success! Let me help you understand your audience better.',\n        contextDocs: [{\n          id: 'whatsapp-guide',\n          text: 'WhatsApp setup for African markets',\n          embedding: []\n        }],\n        confidence: 90\n      });\n\n      // Act\n      const result = await SupremeAIv3.process({\n        type: 'question',\n        userId: 'test-user',\n        question: 'How do I set up WhatsApp for my Nigerian customers?'\n      });\n\n      // Assert\n      expect(result.data.marketSageContext).toContain('marketing automation platform');\n      expect(result.data.marketSageContext).toContain('African markets');\n      expect(result.data.answer).toBe(`Customer segmentation is crucial for fintech success! Let me help you understand your audience better.\n\n**Tell me:**\n‚Ä¢ Are you analyzing existing customers or creating new segments?\n‚Ä¢ What's your goal - reduce churn, increase transactions, or improve targeting?\n\n**Effective segments for African fintech:**\nüèÜ **VIP Champions** - Regular users, high transaction volume\nüå± **Growth Potential** - Active but could transact more\n‚ö†Ô∏è **At-Risk** - Declining activity, need intervention\nüë∂ **New Users** - Need onboarding and first transaction\n\nCheck AI Intelligence ‚Üí Customer Intelligence in MarketSage to see automated segments with churn predictions.\n\nWhich segment interests you most?`);\n    });\n\n    it('should provide fintech-specific compliance guidance', async () => {\n      // Arrange\n      mockRagQuery.mockResolvedValue({\n        answer: 'MarketSage compliance features include...',\n        contextDocs: [{\n          id: 'compliance-guide',\n          text: 'Compliance features documentation',\n          embedding: []\n        }],\n        confidence: 88\n      });\n\n      // Act\n      const result = await SupremeAIv3.process({\n        type: 'question',\n        userId: 'test-user',\n        question: 'What compliance features does MarketSage have for fintech?'\n      });\n\n      // Assert\n      expect(result.data.marketSageContext).toContain('automation');\n      expect(result.data.marketSageContext).toContain('fintech');\n    });\n\n    it('should handle general platform questions with appropriate context', async () => {\n      // Arrange\n      mockRagQuery.mockResolvedValue({\n        answer: 'MarketSage provides comprehensive marketing automation.',\n        contextDocs: [{\n          id: 'platform-overview',\n          text: 'MarketSage platform overview and capabilities',\n          embedding: []\n        }],\n        confidence: 82\n      });\n\n      // Act\n      const result = await SupremeAIv3.process({\n        type: 'question',\n        userId: 'test-user',\n        question: 'What can MarketSage do for my business?'\n      });\n\n      // Assert\n      expect(result.data.marketSageContext).toContain('comprehensive marketing automation platform');\n      expect(result.data.marketSageContext).toContain('African fintech markets');\n      expect(result.confidence).toBe(0.75); // Fallback mode confidence\n    });\n\n    it('should provide setup guidance with practical next steps', async () => {\n      // Arrange\n      mockRagQuery.mockResolvedValue({\n        answer: `I'd be happy to help you with that! To give you the most relevant advice, could you tell me more about:\n\n‚Ä¢ What specific aspect of MarketSage you're working with?\n‚Ä¢ What challenge you're trying to solve?\n‚Ä¢ Your main goal right now?\n\nI can help with:\nüîß **Setup & Configuration** - Integrations, workflows, automation\nüìß **Campaign Optimization** - Email, WhatsApp, SMS performance\nüìä **Analytics & Insights** - Customer behavior, revenue tracking\nüéØ **Strategy** - Segmentation, retention, growth\n\nWhat would be most helpful for you?`,\n        contextDocs: [{\n          id: 'leadpulse-setup',\n          text: 'LeadPulse Intelligence setup guide',\n          embedding: []\n        }],\n        confidence: 85\n      });\n\n      // Act\n      const result = await SupremeAIv3.process({\n        type: 'question',\n        userId: 'test-user',\n        question: 'How do I configure LeadPulse tracking?'\n      });\n\n      // Assert\n      expect(result.data.marketSageContext).toContain('marketing automation platform');\n      expect(result.data.marketSageContext).toContain('African fintech markets');\n      expect(result.data.answer).toContain('Setup & Configuration');\n    });\n  });\n});\n\n// API Route Tests (would typically be in a separate file)\ndescribe('Supreme-AI v3 API Route Validation', () => {\n  // Mock the validation function for testing\n  const validateTask = (body: any): { valid: boolean; task?: any; error?: string } => {\n    if (!body || typeof body !== 'object') {\n      return { valid: false, error: 'Request body must be a valid JSON object' };\n    }\n    \n    const { type, userId } = body;\n    \n    if (!type || typeof type !== 'string') {\n      return { valid: false, error: 'Task type is required and must be a string' };\n    }\n    \n    if (!userId || typeof userId !== 'string') {\n      return { valid: false, error: 'User ID is required and must be a string' };\n    }\n    \n    return { valid: true, task: body };\n  };\n\n  describe('Input Validation', () => {\n    it('should reject null/undefined body', () => {\n      const result = validateTask(null);\n      expect(result.valid).toBe(false);\n      expect(result.error).toContain('Request body must be a valid JSON object');\n    });\n\n    it('should reject missing task type', () => {\n      const result = validateTask({ userId: 'test' });\n      expect(result.valid).toBe(false);\n      expect(result.error).toContain('Task type is required');\n    });\n\n    it('should reject missing user ID', () => {\n      const result = validateTask({ type: 'question' });\n      expect(result.valid).toBe(false);\n      expect(result.error).toContain('User ID is required');\n    });\n\n    it('should accept valid basic task', () => {\n      const result = validateTask({\n        type: 'question',\n        userId: 'test-user',\n        question: 'Valid question?'\n      });\n      expect(result.valid).toBe(true);\n      expect(result.task).toBeDefined();\n    });\n  });\n}); "],"names":["jest","mock","mockSupremeAI","SupremeAI","mockSupremeAutoML","supremeAutoML","mockRagQuery","ragQuery","mockSupremeMemory","supremeMemory","describe","beforeEach","clearAllMocks","initialize","mockResolvedValue","undefined","getContextForResponse","relevantMemories","conversationHistory","customerInsights","contextSummary","storeMemory","it","answer","contextDocs","id","text","embedding","confidence","result","SupremeAIv3","process","type","userId","question","expect","success","toBe","taskType","data","toHaveBeenCalledWith","toHaveBeenCalled","memoryContext","mockAnalysis","sentiment","readability","engagement","keywords","insights","recommendations","supremeScore","analyzeContent","content","objectContaining","importance","tags","mockRejectedValue","Error","rejects","toThrow","mockAutoMLResult","bestModel","algorithm","hyperparams","nTrees","maxDepth","performance","trainTime","allModels","improvementPercent","autoOptimize","features","targets","toContain","mockResult","mockCustomerAnalysis","segments","customerId","segment","churnProbability","averageChurnRisk","analyzeCustomerBehavior","customers","transactionFrequency","toHaveLength","mockMarketAnalysis","trendScore","opportunityScore","riskScore","marketPhase","analyzeMarketTrends","marketData","competitorActivity","economicIndicators","consumerSentiment","mockAdaptiveResult","adaptiveLearning","modelVersion","adaptiveAnalysis","samples","context","toBeDefined","stringContaining","metadata","aiModel","any","String","platform","Number","arrayContaining","mockContext","timestamp","Date","toMatchObject","Boolean","Object","debug","hasRAGContext","marketSageContext","validateTask","body","valid","error","task"],"mappings":"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"}