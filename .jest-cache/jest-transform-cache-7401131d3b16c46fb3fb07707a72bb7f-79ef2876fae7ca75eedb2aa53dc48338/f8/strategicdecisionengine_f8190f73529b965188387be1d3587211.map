{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/lib/ai/strategic-decision-engine.ts"],"sourcesContent":["/**\n * Strategic AI Decision-Making Engine\n * ==================================\n * High-level business strategy automation and executive decision support\n * Builds upon existing tactical AI to provide strategic planning and optimization\n */\n\nimport { logger } from '@/lib/logger';\nimport { trace } from '@opentelemetry/api';\nimport prisma from '@/lib/db/prisma';\nimport { predictiveAnalyticsEngine } from './predictive-analytics-engine';\nimport { realtimeDecisionEngine } from './realtime-decision-engine';\n// Removed circular import - will use dynamic import when needed\n\nexport interface StrategicGoal {\n  id: string;\n  title: string;\n  description: string;\n  category: 'revenue' | 'growth' | 'efficiency' | 'market_expansion' | 'customer_retention' | 'product_development';\n  priority: 'critical' | 'high' | 'medium' | 'low';\n  status: 'planning' | 'active' | 'on_track' | 'at_risk' | 'completed' | 'paused';\n  metrics: {\n    target: number;\n    current: number;\n    unit: string;\n    deadline: Date;\n  };\n  milestones: StrategicMilestone[];\n  dependencies: string[];\n  assignedTo: string[];\n  createdBy: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface StrategicMilestone {\n  id: string;\n  goalId: string;\n  title: string;\n  description: string;\n  dueDate: Date;\n  status: 'pending' | 'in_progress' | 'completed' | 'blocked';\n  progress: number; // 0-100\n  dependencies: string[];\n  resources: {\n    budget?: number;\n    team?: string[];\n    tools?: string[];\n  };\n}\n\nexport interface StrategicDecision {\n  id: string;\n  title: string;\n  description: string;\n  type: 'budget_allocation' | 'market_expansion' | 'product_strategy' | 'campaign_strategy' | 'resource_allocation' | 'risk_mitigation';\n  urgency: 'immediate' | 'high' | 'medium' | 'low';\n  impact: 'critical' | 'high' | 'medium' | 'low';\n  status: 'analysis' | 'recommendation' | 'pending_approval' | 'approved' | 'implemented' | 'rejected';\n  analysis: {\n    scenarios: StrategicScenario[];\n    recommendations: StrategicRecommendation[];\n    riskAssessment: RiskAssessment;\n    resourceRequirements: ResourceRequirements;\n  };\n  decisionMaker: string;\n  deadline: Date;\n  createdAt: Date;\n  implementedAt?: Date;\n}\n\nexport interface StrategicScenario {\n  id: string;\n  name: string;\n  description: string;\n  probability: number; // 0-1\n  impact: {\n    revenue: number;\n    costs: number;\n    timeline: number; // months\n    riskLevel: 'low' | 'medium' | 'high';\n  };\n  assumptions: string[];\n  outcomes: {\n    best_case: any;\n    expected: any;\n    worst_case: any;\n  };\n}\n\nexport interface StrategicRecommendation {\n  id: string;\n  title: string;\n  description: string;\n  confidence: number; // 0-1\n  expectedImpact: {\n    revenue: number;\n    efficiency: number;\n    timeline: number;\n  };\n  implementation: {\n    steps: string[];\n    resources: ResourceRequirements;\n    timeline: number; // months\n    dependencies: string[];\n  };\n  risks: string[];\n  alternatives: string[];\n}\n\nexport interface RiskAssessment {\n  overall: 'low' | 'medium' | 'high' | 'critical';\n  factors: Array<{\n    category: 'market' | 'financial' | 'operational' | 'competitive' | 'regulatory';\n    risk: string;\n    probability: number;\n    impact: number;\n    mitigation: string;\n  }>;\n  contingencyPlans: string[];\n}\n\nexport interface ResourceRequirements {\n  budget: {\n    total: number;\n    breakdown: Record<string, number>;\n    currency: string;\n  };\n  team: {\n    existing: string[];\n    additional: Array<{\n      role: string;\n      skills: string[];\n      level: 'junior' | 'mid' | 'senior';\n      months: number;\n    }>;\n  };\n  technology: {\n    existing: string[];\n    additional: string[];\n  };\n  timeline: number; // months\n}\n\nexport interface StrategicInsight {\n  id: string;\n  type: 'opportunity' | 'threat' | 'trend' | 'optimization' | 'alert';\n  category: 'market' | 'customer' | 'product' | 'operational' | 'financial';\n  title: string;\n  description: string;\n  confidence: number;\n  urgency: 'immediate' | 'high' | 'medium' | 'low';\n  impact: 'critical' | 'high' | 'medium' | 'low';\n  source: string;\n  data: any;\n  recommendations: string[];\n  createdAt: Date;\n  expiresAt?: Date;\n}\n\nclass StrategicDecisionEngine {\n  private strategicGoals = new Map<string, StrategicGoal>();\n  private pendingDecisions = new Map<string, StrategicDecision>();\n  private strategicInsights: StrategicInsight[] = [];\n  private businessRules = new Map<string, any>();\n\n  constructor() {\n    this.initializeBusinessRules();\n    this.startStrategicMonitoring();\n    this.scheduleStrategicAnalysis();\n  }\n\n  /**\n   * Initialize strategic business rules\n   */\n  private initializeBusinessRules(): void {\n    const rules = [\n      {\n        id: 'revenue_growth_target',\n        category: 'financial',\n        rule: 'Monthly revenue growth should be >= 15% for African fintech market',\n        threshold: 0.15,\n        action: 'alert_executive_team'\n      },\n      {\n        id: 'customer_acquisition_cost',\n        category: 'marketing',\n        rule: 'CAC should be <= 30% of customer LTV',\n        threshold: 0.30,\n        action: 'optimize_marketing_spend'\n      },\n      {\n        id: 'churn_rate_threshold',\n        category: 'customer',\n        rule: 'Monthly churn rate should be <= 5% for sustainable growth',\n        threshold: 0.05,\n        action: 'activate_retention_strategy'\n      },\n      {\n        id: 'market_expansion_criteria',\n        category: 'growth',\n        rule: 'Enter new market when current market penetration >= 10%',\n        threshold: 0.10,\n        action: 'initiate_expansion_analysis'\n      },\n      {\n        id: 'operational_efficiency',\n        category: 'operations',\n        rule: 'Automation rate should be >= 80% for scalable operations',\n        threshold: 0.80,\n        action: 'enhance_automation'\n      }\n    ];\n\n    rules.forEach(rule => {\n      this.businessRules.set(rule.id, rule);\n    });\n\n    logger.info('Strategic business rules initialized', {\n      rulesCount: rules.length,\n      categories: [...new Set(rules.map(r => r.category))]\n    });\n  }\n\n  /**\n   * Generate strategic plan based on current business context\n   */\n  async generateStrategicPlan(params: {\n    timeframe: '3_months' | '6_months' | '12_months';\n    focus: 'growth' | 'efficiency' | 'expansion' | 'retention' | 'balanced';\n    organizationId: string;\n    userId: string;\n  }): Promise<{\n    goals: StrategicGoal[];\n    priorities: string[];\n    timeline: any;\n    resourceAllocation: any;\n    riskAssessment: RiskAssessment;\n  }> {\n    const tracer = trace.getTracer('strategic-planning');\n    \n    return tracer.startActiveSpan('generate-strategic-plan', async (span) => {\n      try {\n        span.setAttributes({\n          'strategic.plan.timeframe': params.timeframe,\n          'strategic.plan.focus': params.focus,\n          'organization.id': params.organizationId,\n          'user.id': params.userId\n        });\n\n        logger.info('Generating strategic plan', {\n          timeframe: params.timeframe,\n          focus: params.focus,\n          organizationId: params.organizationId\n        });\n\n        // Analyze current business context\n        const context = await this.analyzeBusinessContext(params.organizationId);\n        \n        // Generate strategic insights\n        const insights = await this.generateStrategicInsights(context, params.focus);\n        \n        // Create strategic goals based on insights and focus\n        const goals = await this.createStrategicGoals(insights, params);\n        \n        // Prioritize goals and create timeline\n        const priorities = this.prioritizeStrategicGoals(goals);\n        const timeline = this.createStrategicTimeline(goals, params.timeframe);\n        \n        // Calculate resource allocation\n        const resourceAllocation = await this.calculateResourceAllocation(goals, context);\n        \n        // Assess strategic risks\n        const riskAssessment = await this.assessStrategicRisks(goals, context);\n\n        span.setAttributes({\n          'strategic.plan.goals_count': goals.length,\n          'strategic.plan.priorities_count': priorities.length,\n          'strategic.plan.risk_level': riskAssessment.overall\n        });\n\n        logger.info('Strategic plan generated successfully', {\n          goalsCount: goals.length,\n          timeframe: params.timeframe,\n          riskLevel: riskAssessment.overall\n        });\n\n        return {\n          goals,\n          priorities,\n          timeline,\n          resourceAllocation,\n          riskAssessment\n        };\n\n      } catch (error) {\n        span.setStatus({ code: 2, message: String(error) });\n        logger.error('Strategic plan generation failed', {\n          error: error instanceof Error ? error.message : String(error)\n        });\n        throw error;\n      } finally {\n        span.end();\n      }\n    });\n  }\n\n  /**\n   * Analyze current business context for strategic planning\n   */\n  private async analyzeBusinessContext(organizationId: string): Promise<any> {\n    // Get comprehensive business metrics\n    const [contacts, campaigns, workflows, predictiveData] = await Promise.all([\n      // Customer metrics\n      prisma.contact.aggregate({\n        where: { organizationId },\n        _count: true\n      }),\n      \n      // Campaign performance\n      prisma.emailCampaign.findMany({\n        where: { organizationId },\n        include: { _count: { select: { recipients: true } } },\n        orderBy: { createdAt: 'desc' },\n        take: 10\n      }),\n      \n      // Automation metrics\n      prisma.workflow.aggregate({\n        where: { organizationId },\n        _count: true\n      }),\n      \n      // Get predictive analytics data\n      predictiveAnalyticsEngine.generateMarketForecast({\n        timeframe: '6_months',\n        market: 'african_fintech',\n        includeConfidenceIntervals: true\n      })\n    ]);\n\n    return {\n      customerBase: {\n        total: contacts._count || 0,\n        growth: await this.calculateGrowthRate(organizationId, 'contacts'),\n        segments: await this.getCustomerSegmentDistribution(organizationId)\n      },\n      campaignPerformance: {\n        total: campaigns.length,\n        averageOpenRate: await this.calculateAverageMetric(campaigns, 'openRate'),\n        averageConversionRate: await this.calculateAverageMetric(campaigns, 'conversionRate'),\n        roi: await this.calculateCampaignROI(organizationId)\n      },\n      automation: {\n        workflowCount: workflows._count || 0,\n        automationRate: await this.calculateAutomationRate(organizationId)\n      },\n      marketIntelligence: predictiveData,\n      financial: await this.getFinancialMetrics(organizationId),\n      competitive: await this.getCompetitiveIntelligence()\n    };\n  }\n\n  /**\n   * Generate strategic insights based on business context\n   */\n  private async generateStrategicInsights(context: any, focus: string): Promise<StrategicInsight[]> {\n    const insights: StrategicInsight[] = [];\n\n    // Revenue growth opportunities\n    if (context.financial.monthlyGrowthRate < 0.15) {\n      insights.push({\n        id: `insight_revenue_${Date.now()}`,\n        type: 'opportunity',\n        category: 'financial',\n        title: 'Revenue Growth Acceleration Opportunity',\n        description: `Current growth rate (${(context.financial.monthlyGrowthRate * 100).toFixed(1)}%) is below African fintech benchmark (15%). Implementing advanced segmentation and personalization could increase revenue by 25-40%.`,\n        confidence: 0.85,\n        urgency: 'high',\n        impact: 'critical',\n        source: 'financial_analysis',\n        data: context.financial,\n        recommendations: [\n          'Implement behavioral segmentation for premium customers',\n          'Launch targeted upselling campaigns',\n          'Optimize pricing strategy for African markets'\n        ],\n        createdAt: new Date()\n      });\n    }\n\n    // Customer retention insights\n    if (context.customerBase.churnRate > 0.05) {\n      insights.push({\n        id: `insight_retention_${Date.now()}`,\n        type: 'threat',\n        category: 'customer',\n        title: 'Customer Retention Risk',\n        description: `Churn rate (${(context.customerBase.churnRate * 100).toFixed(1)}%) exceeds sustainable threshold. Predictive models suggest 23% revenue impact if not addressed.`,\n        confidence: 0.90,\n        urgency: 'immediate',\n        impact: 'high',\n        source: 'churn_analysis',\n        data: context.customerBase,\n        recommendations: [\n          'Deploy AI-powered churn prediction system',\n          'Implement proactive retention workflows',\n          'Enhance customer success programs'\n        ],\n        createdAt: new Date()\n      });\n    }\n\n    // Market expansion opportunities\n    if (context.marketIntelligence.marketPenetration > 0.10) {\n      insights.push({\n        id: `insight_expansion_${Date.now()}`,\n        type: 'opportunity',\n        category: 'market',\n        title: 'Market Expansion Readiness',\n        description: `Current market penetration (${(context.marketIntelligence.marketPenetration * 100).toFixed(1)}%) indicates readiness for geographic expansion. Nigerian and Kenyan markets show 45% growth potential.`,\n        confidence: 0.78,\n        urgency: 'medium',\n        impact: 'high',\n        source: 'market_analysis',\n        data: context.marketIntelligence,\n        recommendations: [\n          'Conduct detailed market research for Nigeria/Kenya',\n          'Develop market-specific product variations',\n          'Establish local partnerships and compliance'\n        ],\n        createdAt: new Date()\n      });\n    }\n\n    // Automation efficiency insights\n    if (context.automation.automationRate < 0.80) {\n      insights.push({\n        id: `insight_automation_${Date.now()}`,\n        type: 'optimization',\n        category: 'operational',\n        title: 'Automation Efficiency Gap',\n        description: `Current automation rate (${(context.automation.automationRate * 100).toFixed(1)}%) below scalability threshold. Increasing automation could reduce operational costs by 30%.`,\n        confidence: 0.82,\n        urgency: 'medium',\n        impact: 'medium',\n        source: 'automation_analysis',\n        data: context.automation,\n        recommendations: [\n          'Implement advanced workflow automation',\n          'Deploy AI-powered customer service',\n          'Automate reporting and analytics'\n        ],\n        createdAt: new Date()\n      });\n    }\n\n    return insights;\n  }\n\n  /**\n   * Create strategic goals based on insights\n   */\n  private async createStrategicGoals(insights: StrategicInsight[], params: any): Promise<StrategicGoal[]> {\n    const goals: StrategicGoal[] = [];\n    const timeframeMonths = params.timeframe === '3_months' ? 3 : params.timeframe === '6_months' ? 6 : 12;\n\n    // Revenue growth goal\n    if (insights.some(i => i.category === 'financial')) {\n      goals.push({\n        id: `goal_revenue_${Date.now()}`,\n        title: 'Accelerate Revenue Growth',\n        description: 'Achieve sustainable 15%+ monthly revenue growth through strategic optimization',\n        category: 'revenue',\n        priority: 'critical',\n        status: 'planning',\n        metrics: {\n          target: 15, // 15% monthly growth\n          current: 8, // Simulated current\n          unit: 'percentage',\n          deadline: new Date(Date.now() + timeframeMonths * 30 * 24 * 60 * 60 * 1000)\n        },\n        milestones: [\n          {\n            id: `milestone_revenue_1_${Date.now()}`,\n            goalId: `goal_revenue_${Date.now()}`,\n            title: 'Implement Advanced Segmentation',\n            description: 'Deploy behavioral segmentation for premium customers',\n            dueDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),\n            status: 'pending',\n            progress: 0,\n            dependencies: [],\n            resources: { budget: 15000, team: ['data_scientist', 'marketing_manager'] }\n          }\n        ],\n        dependencies: [],\n        assignedTo: ['revenue_team'],\n        createdBy: params.userId,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      });\n    }\n\n    // Customer retention goal\n    if (insights.some(i => i.category === 'customer')) {\n      goals.push({\n        id: `goal_retention_${Date.now()}`,\n        title: 'Enhance Customer Retention',\n        description: 'Reduce churn rate to below 5% through predictive interventions',\n        category: 'customer_retention',\n        priority: 'high',\n        status: 'planning',\n        metrics: {\n          target: 5, // 5% churn rate\n          current: 8, // Simulated current\n          unit: 'percentage',\n          deadline: new Date(Date.now() + timeframeMonths * 30 * 24 * 60 * 60 * 1000)\n        },\n        milestones: [\n          {\n            id: `milestone_retention_1_${Date.now()}`,\n            goalId: `goal_retention_${Date.now()}`,\n            title: 'Deploy Churn Prediction System',\n            description: 'Implement AI-powered churn prediction and intervention',\n            dueDate: new Date(Date.now() + 45 * 24 * 60 * 60 * 1000),\n            status: 'pending',\n            progress: 0,\n            dependencies: [],\n            resources: { budget: 25000, team: ['ml_engineer', 'customer_success'] }\n          }\n        ],\n        dependencies: [],\n        assignedTo: ['customer_success_team'],\n        createdBy: params.userId,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      });\n    }\n\n    // Market expansion goal\n    if (insights.some(i => i.category === 'market' && i.type === 'opportunity')) {\n      goals.push({\n        id: `goal_expansion_${Date.now()}`,\n        title: 'Strategic Market Expansion',\n        description: 'Expand to Nigerian and Kenyan markets with localized offerings',\n        category: 'market_expansion',\n        priority: 'high',\n        status: 'planning',\n        metrics: {\n          target: 2, // 2 new markets\n          current: 0,\n          unit: 'markets',\n          deadline: new Date(Date.now() + timeframeMonths * 30 * 24 * 60 * 60 * 1000)\n        },\n        milestones: [\n          {\n            id: `milestone_expansion_1_${Date.now()}`,\n            goalId: `goal_expansion_${Date.now()}`,\n            title: 'Market Research & Analysis',\n            description: 'Comprehensive analysis of Nigerian and Kenyan markets',\n            dueDate: new Date(Date.now() + 60 * 24 * 60 * 60 * 1000),\n            status: 'pending',\n            progress: 0,\n            dependencies: [],\n            resources: { budget: 40000, team: ['market_analyst', 'business_development'] }\n          }\n        ],\n        dependencies: [],\n        assignedTo: ['expansion_team'],\n        createdBy: params.userId,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      });\n    }\n\n    return goals;\n  }\n\n  /**\n   * Prioritize strategic goals using AI-driven analysis\n   */\n  private prioritizeStrategicGoals(goals: StrategicGoal[]): string[] {\n    // AI-driven prioritization based on impact, urgency, and resources\n    const scoredGoals = goals.map(goal => ({\n      id: goal.id,\n      title: goal.title,\n      score: this.calculateStrategicScore(goal)\n    })).sort((a, b) => b.score - a.score);\n\n    return scoredGoals.map(g => g.title);\n  }\n\n  /**\n   * Calculate strategic score for goal prioritization\n   */\n  private calculateStrategicScore(goal: StrategicGoal): number {\n    const priorityWeights = { critical: 1.0, high: 0.8, medium: 0.6, low: 0.4 };\n    const categoryWeights = {\n      revenue: 1.0,\n      customer_retention: 0.9,\n      market_expansion: 0.8,\n      efficiency: 0.7,\n      growth: 0.8,\n      product_development: 0.6\n    };\n\n    const priorityScore = priorityWeights[goal.priority] || 0.5;\n    const categoryScore = categoryWeights[goal.category] || 0.5;\n    const urgencyScore = this.calculateUrgencyScore(goal.metrics.deadline);\n\n    return (priorityScore * 0.4) + (categoryScore * 0.4) + (urgencyScore * 0.2);\n  }\n\n  /**\n   * Calculate urgency score based on deadline\n   */\n  private calculateUrgencyScore(deadline: Date): number {\n    const daysToDeadline = (deadline.getTime() - Date.now()) / (24 * 60 * 60 * 1000);\n    \n    if (daysToDeadline <= 30) return 1.0; // Very urgent\n    if (daysToDeadline <= 90) return 0.8; // High urgency\n    if (daysToDeadline <= 180) return 0.6; // Medium urgency\n    return 0.4; // Lower urgency\n  }\n\n  /**\n   * Create strategic timeline\n   */\n  private createStrategicTimeline(goals: StrategicGoal[], timeframe: string): any {\n    const timeframeMonths = timeframe === '3_months' ? 3 : timeframe === '6_months' ? 6 : 12;\n    \n    return {\n      duration: `${timeframeMonths} months`,\n      phases: this.createTimelinePhases(goals, timeframeMonths),\n      milestones: goals.flatMap(g => g.milestones),\n      criticalPath: this.identifyCriticalPath(goals)\n    };\n  }\n\n  /**\n   * Create timeline phases\n   */\n  private createTimelinePhases(goals: StrategicGoal[], months: number): any[] {\n    const phaseLength = Math.ceil(months / 3);\n    \n    return [\n      {\n        name: 'Foundation Phase',\n        duration: `${phaseLength} months`,\n        focus: 'Setup and initial implementation',\n        goals: goals.filter(g => g.priority === 'critical').map(g => g.title)\n      },\n      {\n        name: 'Execution Phase',\n        duration: `${phaseLength} months`,\n        focus: 'Core implementation and optimization',\n        goals: goals.filter(g => g.priority === 'high').map(g => g.title)\n      },\n      {\n        name: 'Optimization Phase',\n        duration: `${months - 2 * phaseLength} months`,\n        focus: 'Refinement and scaling',\n        goals: goals.filter(g => ['medium', 'low'].includes(g.priority)).map(g => g.title)\n      }\n    ];\n  }\n\n  /**\n   * Calculate resource allocation\n   */\n  private async calculateResourceAllocation(goals: StrategicGoal[], context: any): Promise<any> {\n    const totalBudget = goals.reduce((sum, goal) => \n      sum + goal.milestones.reduce((mSum, milestone) => \n        mSum + (milestone.resources.budget || 0), 0), 0);\n\n    return {\n      budget: {\n        total: totalBudget,\n        byCategory: this.calculateBudgetByCategory(goals),\n        currency: 'USD'\n      },\n      team: {\n        required: this.calculateTeamRequirements(goals),\n        utilization: this.calculateTeamUtilization(goals)\n      },\n      timeline: this.calculateResourceTimeline(goals)\n    };\n  }\n\n  /**\n   * Assess strategic risks\n   */\n  private async assessStrategicRisks(goals: StrategicGoal[], context: any): Promise<RiskAssessment> {\n    const risks = [\n      {\n        category: 'market' as const,\n        risk: 'Economic volatility in African markets',\n        probability: 0.3,\n        impact: 0.7,\n        mitigation: 'Diversify across multiple stable markets'\n      },\n      {\n        category: 'financial' as const,\n        risk: 'Insufficient funding for expansion',\n        probability: 0.4,\n        impact: 0.8,\n        mitigation: 'Secure strategic partnerships and funding rounds'\n      },\n      {\n        category: 'operational' as const,\n        risk: 'Talent acquisition challenges',\n        probability: 0.5,\n        impact: 0.6,\n        mitigation: 'Develop remote talent pipeline and training programs'\n      }\n    ];\n\n    const overallRisk = this.calculateOverallRisk(risks);\n\n    return {\n      overall: overallRisk,\n      factors: risks,\n      contingencyPlans: [\n        'Implement agile planning with quarterly reviews',\n        'Maintain 20% budget buffer for unexpected challenges',\n        'Develop alternative market entry strategies'\n      ]\n    };\n  }\n\n  /**\n   * Start strategic monitoring\n   */\n  private startStrategicMonitoring(): void {\n    // Monitor strategic KPIs every hour\n    setInterval(async () => {\n      try {\n        await this.monitorStrategicKPIs();\n      } catch (error) {\n        logger.error('Strategic monitoring failed', {\n          error: error instanceof Error ? error.message : String(error)\n        });\n      }\n    }, 60 * 60 * 1000); // 1 hour\n\n    logger.info('Strategic monitoring started');\n  }\n\n  /**\n   * Schedule strategic analysis\n   */\n  private scheduleStrategicAnalysis(): void {\n    // Run comprehensive strategic analysis daily at 6 AM\n    setInterval(async () => {\n      try {\n        await this.performDailyStrategicAnalysis();\n      } catch (error) {\n        logger.error('Daily strategic analysis failed', {\n          error: error instanceof Error ? error.message : String(error)\n        });\n      }\n    }, 24 * 60 * 60 * 1000); // 24 hours\n\n    logger.info('Strategic analysis scheduler started');\n  }\n\n  /**\n   * Monitor strategic KPIs\n   */\n  private async monitorStrategicKPIs(): Promise<void> {\n    // This would monitor real KPIs and trigger alerts\n    // Implementation would check against business rules\n    logger.info('Strategic KPI monitoring completed');\n  }\n\n  /**\n   * Perform daily strategic analysis\n   */\n  private async performDailyStrategicAnalysis(): Promise<void> {\n    // This would generate daily strategic insights\n    // Implementation would analyze trends and opportunities\n    logger.info('Daily strategic analysis completed');\n  }\n\n  /**\n   * Utility methods for calculations\n   */\n  private async calculateGrowthRate(organizationId: string, metric: string): Promise<number> {\n    // Simulate growth rate calculation\n    return 0.08; // 8% growth\n  }\n\n  private async getCustomerSegmentDistribution(organizationId: string): Promise<any> {\n    return { premium: 0.2, standard: 0.6, basic: 0.2 };\n  }\n\n  private async calculateAverageMetric(campaigns: any[], metric: string): Promise<number> {\n    // Simulate metric calculation\n    return 0.25; // 25% average\n  }\n\n  private async calculateCampaignROI(organizationId: string): Promise<number> {\n    return 3.5; // 3.5x ROI\n  }\n\n  private async calculateAutomationRate(organizationId: string): Promise<number> {\n    return 0.75; // 75% automation\n  }\n\n  private async getFinancialMetrics(organizationId: string): Promise<any> {\n    return {\n      monthlyGrowthRate: 0.08,\n      churnRate: 0.06,\n      ltv: 450,\n      cac: 120\n    };\n  }\n\n  private async getCompetitiveIntelligence(): Promise<any> {\n    return {\n      marketPosition: 'emerging_leader',\n      competitiveAdvantages: ['AI_automation', 'African_focus', 'Cultural_intelligence']\n    };\n  }\n\n  private calculateBudgetByCategory(goals: StrategicGoal[]): Record<string, number> {\n    const result: Record<string, number> = {};\n    goals.forEach(goal => {\n      const categoryBudget = goal.milestones.reduce((sum, m) => sum + (m.resources.budget || 0), 0);\n      result[goal.category] = (result[goal.category] || 0) + categoryBudget;\n    });\n    return result;\n  }\n\n  private calculateTeamRequirements(goals: StrategicGoal[]): string[] {\n    const teams = new Set<string>();\n    goals.forEach(goal => {\n      goal.assignedTo.forEach(team => teams.add(team));\n      goal.milestones.forEach(milestone => {\n        milestone.resources.team?.forEach(member => teams.add(member));\n      });\n    });\n    return Array.from(teams);\n  }\n\n  private calculateTeamUtilization(goals: StrategicGoal[]): Record<string, number> {\n    // Simulate team utilization calculation\n    return { development: 0.8, marketing: 0.9, operations: 0.7 };\n  }\n\n  private calculateResourceTimeline(goals: StrategicGoal[]): any {\n    return {\n      peakResourcePeriod: 'months_2_4',\n      resourceDistribution: 'front_loaded'\n    };\n  }\n\n  private identifyCriticalPath(goals: StrategicGoal[]): string[] {\n    // Identify critical path through dependencies\n    return goals.filter(g => g.priority === 'critical').map(g => g.title);\n  }\n\n  private calculateOverallRisk(risks: any[]): 'low' | 'medium' | 'high' | 'critical' {\n    const averageRisk = risks.reduce((sum, r) => sum + (r.probability * r.impact), 0) / risks.length;\n    \n    if (averageRisk >= 0.7) return 'critical';\n    if (averageRisk >= 0.5) return 'high';\n    if (averageRisk >= 0.3) return 'medium';\n    return 'low';\n  }\n\n  /**\n   * Public API methods\n   */\n  async getStrategicDashboard(organizationId: string): Promise<any> {\n    const activeGoals = Array.from(this.strategicGoals.values())\n      .filter(g => g.status === 'active');\n    \n    const pendingDecisions = Array.from(this.pendingDecisions.values())\n      .filter(d => d.status === 'pending_approval');\n\n    const recentInsights = this.strategicInsights\n      .filter(i => i.createdAt > new Date(Date.now() - 7 * 24 * 60 * 60 * 1000))\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n\n    return {\n      goals: {\n        active: activeGoals.length,\n        onTrack: activeGoals.filter(g => g.status === 'on_track').length,\n        atRisk: activeGoals.filter(g => g.status === 'at_risk').length\n      },\n      decisions: {\n        pending: pendingDecisions.length,\n        urgent: pendingDecisions.filter(d => d.urgency === 'immediate').length\n      },\n      insights: {\n        recent: recentInsights.slice(0, 5),\n        opportunities: recentInsights.filter(i => i.type === 'opportunity').length,\n        threats: recentInsights.filter(i => i.type === 'threat').length\n      }\n    };\n  }\n\n  async createStrategicDecision(params: Partial<StrategicDecision>): Promise<StrategicDecision> {\n    const decision: StrategicDecision = {\n      id: `decision_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      title: params.title || 'Strategic Decision',\n      description: params.description || '',\n      type: params.type || 'budget_allocation',\n      urgency: params.urgency || 'medium',\n      impact: params.impact || 'medium',\n      status: 'analysis',\n      analysis: params.analysis || {\n        scenarios: [],\n        recommendations: [],\n        riskAssessment: { overall: 'medium', factors: [], contingencyPlans: [] },\n        resourceRequirements: {\n          budget: { total: 0, breakdown: {}, currency: 'USD' },\n          team: { existing: [], additional: [] },\n          technology: { existing: [], additional: [] },\n          timeline: 0\n        }\n      },\n      decisionMaker: params.decisionMaker || '',\n      deadline: params.deadline || new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),\n      createdAt: new Date()\n    };\n\n    this.pendingDecisions.set(decision.id, decision);\n    \n    return decision;\n  }\n}\n\n// Export singleton instance\nexport const strategicDecisionEngine = new StrategicDecisionEngine();\n\n// Convenience functions\nexport async function generateExecutiveStrategicPlan(params: {\n  timeframe: '3_months' | '6_months' | '12_months';\n  focus: 'growth' | 'efficiency' | 'expansion' | 'retention' | 'balanced';\n  organizationId: string;\n  userId: string;\n}): Promise<any> {\n  return strategicDecisionEngine.generateStrategicPlan(params);\n}\n\nexport async function getExecutiveDashboard(organizationId: string): Promise<any> {\n  return strategicDecisionEngine.getStrategicDashboard(organizationId);\n}"],"names":["generateExecutiveStrategicPlan","getExecutiveDashboard","strategicDecisionEngine","StrategicDecisionEngine","constructor","strategicGoals","Map","pendingDecisions","strategicInsights","businessRules","initializeBusinessRules","startStrategicMonitoring","scheduleStrategicAnalysis","rules","id","category","rule","threshold","action","forEach","set","logger","info","rulesCount","length","categories","Set","map","r","generateStrategicPlan","params","tracer","trace","getTracer","startActiveSpan","span","setAttributes","timeframe","focus","organizationId","userId","context","analyzeBusinessContext","insights","generateStrategicInsights","goals","createStrategicGoals","priorities","prioritizeStrategicGoals","timeline","createStrategicTimeline","resourceAllocation","calculateResourceAllocation","riskAssessment","assessStrategicRisks","overall","goalsCount","riskLevel","error","setStatus","code","message","String","Error","end","contacts","campaigns","workflows","predictiveData","Promise","all","prisma","contact","aggregate","where","_count","emailCampaign","findMany","include","select","recipients","orderBy","createdAt","take","workflow","predictiveAnalyticsEngine","generateMarketForecast","market","includeConfidenceIntervals","customerBase","total","growth","calculateGrowthRate","segments","getCustomerSegmentDistribution","campaignPerformance","averageOpenRate","calculateAverageMetric","averageConversionRate","roi","calculateCampaignROI","automation","workflowCount","automationRate","calculateAutomationRate","marketIntelligence","financial","getFinancialMetrics","competitive","getCompetitiveIntelligence","monthlyGrowthRate","push","Date","now","type","title","description","toFixed","confidence","urgency","impact","source","data","recommendations","churnRate","marketPenetration","timeframeMonths","some","i","priority","status","metrics","target","current","unit","deadline","milestones","goalId","dueDate","progress","dependencies","resources","budget","team","assignedTo","createdBy","updatedAt","scoredGoals","goal","score","calculateStrategicScore","sort","a","b","g","priorityWeights","critical","high","medium","low","categoryWeights","revenue","customer_retention","market_expansion","efficiency","product_development","priorityScore","categoryScore","urgencyScore","calculateUrgencyScore","daysToDeadline","getTime","duration","phases","createTimelinePhases","flatMap","criticalPath","identifyCriticalPath","months","phaseLength","Math","ceil","name","filter","includes","totalBudget","reduce","sum","mSum","milestone","byCategory","calculateBudgetByCategory","currency","required","calculateTeamRequirements","utilization","calculateTeamUtilization","calculateResourceTimeline","risks","risk","probability","mitigation","overallRisk","calculateOverallRisk","factors","contingencyPlans","setInterval","monitorStrategicKPIs","performDailyStrategicAnalysis","metric","premium","standard","basic","ltv","cac","marketPosition","competitiveAdvantages","result","categoryBudget","m","teams","add","member","Array","from","development","marketing","operations","peakResourcePeriod","resourceDistribution","averageRisk","getStrategicDashboard","activeGoals","values","d","recentInsights","active","onTrack","atRisk","decisions","pending","urgent","recent","slice","opportunities","threats","createStrategicDecision","decision","random","toString","substr","analysis","scenarios","resourceRequirements","breakdown","existing","additional","technology","decisionMaker"],"mappings":"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"}