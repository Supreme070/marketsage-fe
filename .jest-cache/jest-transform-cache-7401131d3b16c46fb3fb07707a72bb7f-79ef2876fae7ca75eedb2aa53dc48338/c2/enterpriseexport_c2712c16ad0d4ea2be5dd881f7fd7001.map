{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/lib/export/enterprise-export.ts"],"sourcesContent":["/**\n * Enterprise Export System\n * ========================\n * Comprehensive data export capabilities for enterprise reporting,\n * compliance, and business intelligence with multiple formats and filtering\n */\n\nimport { logger } from '@/lib/logger';\n\nexport interface ExportFormat {\n  type: 'CSV' | 'Excel' | 'PDF' | 'JSON' | 'XML' | 'PowerBI' | 'Tableau';\n  mimeType: string;\n  extension: string;\n  supportsSheets: boolean;\n  supportsFormatting: boolean;\n}\n\nexport interface ExportColumn {\n  key: string;\n  label: string;\n  type: 'string' | 'number' | 'date' | 'boolean' | 'currency' | 'percentage';\n  format?: string;\n  width?: number;\n  sortable?: boolean;\n  filterable?: boolean;\n}\n\nexport interface ExportOptions {\n  format: ExportFormat['type'];\n  filename?: string;\n  includeHeaders: boolean;\n  includeMetadata: boolean;\n  includeTimestamp: boolean;\n  compression?: 'none' | 'zip' | 'gzip';\n  password?: string;\n  watermark?: string;\n  scheduleExport?: {\n    frequency: 'daily' | 'weekly' | 'monthly' | 'quarterly';\n    recipients: string[];\n    enabled: boolean;\n  };\n  compliance: {\n    includeAuditTrail: boolean;\n    redactSensitiveData: boolean;\n    encryptionLevel: 'standard' | 'enhanced' | 'enterprise';\n    retentionPeriod?: string;\n  };\n}\n\nexport interface ExportRequest {\n  dataSource: string;\n  columns: ExportColumn[];\n  filters: Record<string, any>;\n  options: ExportOptions;\n  requestedBy: {\n    userId: string;\n    userName: string;\n    role: string;\n    tenantId: string;\n  };\n  purpose: string;\n  estimatedRows?: number;\n}\n\nexport interface ExportJob {\n  id: string;\n  request: ExportRequest;\n  status: 'pending' | 'processing' | 'completed' | 'failed' | 'cancelled';\n  progress: number;\n  startTime: Date;\n  endTime?: Date;\n  downloadUrl?: string;\n  error?: string;\n  fileSize?: number;\n  rowCount?: number;\n  checksumHash?: string;\n}\n\nclass EnterpriseExportManager {\n  private static instance: EnterpriseExportManager;\n  \n  // Supported export formats\n  private readonly formats: Record<ExportFormat['type'], ExportFormat> = {\n    CSV: {\n      type: 'CSV',\n      mimeType: 'text/csv',\n      extension: 'csv',\n      supportsSheets: false,\n      supportsFormatting: false\n    },\n    Excel: {\n      type: 'Excel',\n      mimeType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n      extension: 'xlsx',\n      supportsSheets: true,\n      supportsFormatting: true\n    },\n    PDF: {\n      type: 'PDF',\n      mimeType: 'application/pdf',\n      extension: 'pdf',\n      supportsSheets: false,\n      supportsFormatting: true\n    },\n    JSON: {\n      type: 'JSON',\n      mimeType: 'application/json',\n      extension: 'json',\n      supportsSheets: false,\n      supportsFormatting: false\n    },\n    XML: {\n      type: 'XML',\n      mimeType: 'application/xml',\n      extension: 'xml',\n      supportsSheets: false,\n      supportsFormatting: false\n    },\n    PowerBI: {\n      type: 'PowerBI',\n      mimeType: 'application/json',\n      extension: 'pbix',\n      supportsSheets: true,\n      supportsFormatting: true\n    },\n    Tableau: {\n      type: 'Tableau',\n      mimeType: 'application/json',\n      extension: 'tde',\n      supportsSheets: true,\n      supportsFormatting: true\n    }\n  };\n\n  // Data source configurations for African fintech context\n  private readonly dataSources = {\n    customers: {\n      table: 'customers',\n      sensitiveFields: ['phone', 'email', 'address', 'nationalId', 'bvn'],\n      requiredRole: 'data_analyst',\n      maxRows: 100000\n    },\n    transactions: {\n      table: 'transactions',\n      sensitiveFields: ['amount', 'accountNumber', 'reference'],\n      requiredRole: 'financial_analyst',\n      maxRows: 500000\n    },\n    campaigns: {\n      table: 'campaigns',\n      sensitiveFields: [],\n      requiredRole: 'marketing_manager',\n      maxRows: 50000\n    },\n    compliance: {\n      table: 'compliance_records',\n      sensitiveFields: ['kycData', 'riskAssessment', 'sanctions'],\n      requiredRole: 'compliance_officer',\n      maxRows: 10000\n    },\n    analytics: {\n      table: 'analytics_summary',\n      sensitiveFields: ['pii_metrics'],\n      requiredRole: 'business_analyst',\n      maxRows: 1000000\n    }\n  };\n\n  static getInstance(): EnterpriseExportManager {\n    if (!this.instance) {\n      this.instance = new EnterpriseExportManager();\n    }\n    return this.instance;\n  }\n\n  async createExportJob(request: ExportRequest): Promise<ExportJob> {\n    try {\n      // Validate request\n      await this.validateExportRequest(request);\n\n      // Create export job\n      const job: ExportJob = {\n        id: this.generateJobId(),\n        request,\n        status: 'pending',\n        progress: 0,\n        startTime: new Date()\n      };\n\n      // Log export request for audit trail\n      logger.info('Export job created', {\n        jobId: job.id,\n        dataSource: request.dataSource,\n        format: request.options.format,\n        requestedBy: request.requestedBy.userId,\n        tenantId: request.requestedBy.tenantId,\n        purpose: request.purpose,\n        estimatedRows: request.estimatedRows\n      });\n\n      // Start processing in background\n      this.processExportJob(job);\n\n      return job;\n    } catch (error) {\n      logger.error('Failed to create export job', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n        request\n      });\n      throw error;\n    }\n  }\n\n  private async validateExportRequest(request: ExportRequest): Promise<void> {\n    // Check data source permissions\n    const dataSource = this.dataSources[request.dataSource as keyof typeof this.dataSources];\n    if (!dataSource) {\n      throw new Error(`Invalid data source: ${request.dataSource}`);\n    }\n\n    // Check user role permissions\n    if (!this.hasRequiredRole(request.requestedBy.role, dataSource.requiredRole)) {\n      throw new Error(`Insufficient permissions for data source: ${request.dataSource}`);\n    }\n\n    // Check row limits\n    if (request.estimatedRows && request.estimatedRows > dataSource.maxRows) {\n      throw new Error(`Row limit exceeded. Maximum ${dataSource.maxRows} rows allowed for ${request.dataSource}`);\n    }\n\n    // Validate export format\n    if (!this.formats[request.options.format]) {\n      throw new Error(`Unsupported export format: ${request.options.format}`);\n    }\n\n    // Check compliance requirements\n    if (request.options.compliance.redactSensitiveData && dataSource.sensitiveFields.length > 0) {\n      const requestedSensitiveFields = request.columns.filter(col => \n        dataSource.sensitiveFields.includes(col.key)\n      );\n      \n      if (requestedSensitiveFields.length > 0 && !this.hasDataAccessRole(request.requestedBy.role)) {\n        throw new Error('Insufficient permissions to export sensitive data');\n      }\n    }\n  }\n\n  private async processExportJob(job: ExportJob): Promise<void> {\n    try {\n      job.status = 'processing';\n      \n      // Fetch data based on filters\n      const data = await this.fetchExportData(job.request);\n      job.progress = 30;\n\n      // Apply compliance filters\n      const processedData = await this.applyComplianceFilters(data, job.request);\n      job.progress = 60;\n\n      // Generate export file\n      const exportFile = await this.generateExportFile(processedData, job.request);\n      job.progress = 90;\n\n      // Upload to secure storage and generate download URL\n      const { downloadUrl, fileSize, checksumHash } = await this.uploadExportFile(exportFile, job);\n      \n      job.status = 'completed';\n      job.progress = 100;\n      job.endTime = new Date();\n      job.downloadUrl = downloadUrl;\n      job.fileSize = fileSize;\n      job.rowCount = processedData.length;\n      job.checksumHash = checksumHash;\n\n      // Send notification if scheduled export\n      if (job.request.options.scheduleExport?.enabled) {\n        await this.sendExportNotification(job);\n      }\n\n      logger.info('Export job completed', {\n        jobId: job.id,\n        rowCount: job.rowCount,\n        fileSize: job.fileSize,\n        duration: job.endTime.getTime() - job.startTime.getTime()\n      });\n\n    } catch (error) {\n      job.status = 'failed';\n      job.error = error instanceof Error ? error.message : 'Unknown error';\n      job.endTime = new Date();\n\n      logger.error('Export job failed', {\n        jobId: job.id,\n        error: job.error\n      });\n    }\n  }\n\n  private async fetchExportData(request: ExportRequest): Promise<any[]> {\n    try {\n      // Import Prisma client\n      const { default: prisma } = await import('@/lib/db/prisma');\n      \n      // Build query based on data source\n      switch (request.dataSource) {\n        case 'contacts':\n          return await this.fetchContactsData(prisma, request);\n        case 'campaigns':\n          return await this.fetchCampaignData(prisma, request);\n        case 'analytics':\n          return await this.fetchAnalyticsData(prisma, request);\n        case 'workflows':\n          return await this.fetchWorkflowData(prisma, request);\n        case 'transactions':\n          return await this.fetchTransactionData(prisma, request);\n        default:\n          // Fallback to mock data for unknown data sources\n          return this.generateMockData(request.dataSource, request.columns, request.filters);\n      }\n    } catch (error) {\n      logger.error('Failed to fetch export data, using mock data', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n        dataSource: request.dataSource\n      });\n      \n      // Fallback to mock data if database query fails\n      return this.generateMockData(request.dataSource, request.columns, request.filters);\n    }\n  }\n\n  private async fetchContactsData(prisma: any, request: ExportRequest): Promise<any[]> {\n    const { filters } = request;\n    const limit = Math.min(filters.limit || 10000, 50000); // Max 50k contacts\n    \n    const whereClause: any = {};\n    \n    // Apply filters\n    if (filters.organizationId) {\n      whereClause.organizationId = filters.organizationId;\n    }\n    if (filters.isActive !== undefined) {\n      whereClause.isActive = filters.isActive;\n    }\n    if (filters.tags && filters.tags.length > 0) {\n      whereClause.tags = { hasSome: filters.tags };\n    }\n    if (filters.createdAfter) {\n      whereClause.createdAt = { ...whereClause.createdAt, gte: new Date(filters.createdAfter) };\n    }\n    if (filters.createdBefore) {\n      whereClause.createdAt = { ...whereClause.createdAt, lte: new Date(filters.createdBefore) };\n    }\n\n    const contacts = await prisma.contact.findMany({\n      where: whereClause,\n      take: limit,\n      orderBy: { createdAt: 'desc' },\n      include: {\n        lists: { select: { name: true } },\n        segments: { select: { name: true } }\n      }\n    });\n\n    return contacts.map((contact: any) => ({\n      id: contact.id,\n      firstName: contact.firstName,\n      lastName: contact.lastName,\n      email: contact.email,\n      phone: contact.phone,\n      company: contact.company,\n      jobTitle: contact.jobTitle,\n      tags: contact.tags,\n      isActive: contact.isActive,\n      lists: contact.lists.map((l: any) => l.name).join(', '),\n      segments: contact.segments.map((s: any) => s.name).join(', '),\n      createdAt: contact.createdAt\n    }));\n  }\n\n  private async fetchCampaignData(prisma: any, request: ExportRequest): Promise<any[]> {\n    const { filters } = request;\n    const limit = Math.min(filters.limit || 5000, 25000);\n    \n    const whereClause: any = {};\n    if (filters.organizationId) {\n      whereClause.organizationId = filters.organizationId;\n    }\n    if (filters.status) {\n      whereClause.status = filters.status;\n    }\n    if (filters.campaignType) {\n      // Handle different campaign types\n      if (filters.campaignType === 'email') {\n        const emailCampaigns = await prisma.emailCampaign.findMany({\n          where: whereClause,\n          take: limit,\n          orderBy: { createdAt: 'desc' }\n        });\n        return emailCampaigns.map((campaign: any) => ({\n          id: campaign.id,\n          name: campaign.name,\n          type: 'Email',\n          status: campaign.status,\n          subject: campaign.subject,\n          fromEmail: campaign.fromEmail,\n          sentCount: campaign.sentCount || 0,\n          openRate: campaign.openRate || 0,\n          clickRate: campaign.clickRate || 0,\n          createdAt: campaign.createdAt\n        }));\n      }\n    }\n\n    // Default to email campaigns\n    const campaigns = await prisma.emailCampaign.findMany({\n      where: whereClause,\n      take: limit,\n      orderBy: { createdAt: 'desc' }\n    });\n\n    return campaigns.map((campaign: any) => ({\n      id: campaign.id,\n      name: campaign.name,\n      type: 'Email',\n      status: campaign.status,\n      subject: campaign.subject,\n      sentCount: campaign.sentCount || 0,\n      openRate: campaign.openRate || 0,\n      clickRate: campaign.clickRate || 0,\n      createdAt: campaign.createdAt\n    }));\n  }\n\n  private async fetchAnalyticsData(prisma: any, request: ExportRequest): Promise<any[]> {\n    const { filters } = request;\n    const limit = Math.min(filters.limit || 10000, 100000);\n    \n    const whereClause: any = {};\n    if (filters.organizationId) {\n      whereClause.organizationId = filters.organizationId;\n    }\n    if (filters.startDate && filters.endDate) {\n      whereClause.createdAt = {\n        gte: new Date(filters.startDate),\n        lte: new Date(filters.endDate)\n      };\n    }\n\n    const analytics = await prisma.analytics.findMany({\n      where: whereClause,\n      take: limit,\n      orderBy: { createdAt: 'desc' }\n    });\n\n    return analytics.map((record: any) => ({\n      id: record.id,\n      entity: record.entity,\n      event: record.event,\n      value: record.value,\n      metadata: typeof record.metadata === 'object' ? JSON.stringify(record.metadata) : record.metadata,\n      timestamp: record.createdAt\n    }));\n  }\n\n  private async fetchWorkflowData(prisma: any, request: ExportRequest): Promise<any[]> {\n    const { filters } = request;\n    const limit = Math.min(filters.limit || 5000, 25000);\n    \n    const whereClause: any = {};\n    if (filters.organizationId) {\n      whereClause.organizationId = filters.organizationId;\n    }\n    if (filters.status) {\n      whereClause.status = filters.status;\n    }\n\n    const workflows = await prisma.workflow.findMany({\n      where: whereClause,\n      take: limit,\n      orderBy: { createdAt: 'desc' },\n      include: {\n        nodes: { select: { type: true } },\n        executions: { select: { status: true } }\n      }\n    });\n\n    return workflows.map((workflow: any) => ({\n      id: workflow.id,\n      name: workflow.name,\n      description: workflow.description,\n      status: workflow.status,\n      nodeCount: workflow.nodes.length,\n      executionCount: workflow.executions.length,\n      successfulExecutions: workflow.executions.filter((e: any) => e.status === 'COMPLETED').length,\n      createdAt: workflow.createdAt\n    }));\n  }\n\n  private async fetchTransactionData(prisma: any, request: ExportRequest): Promise<any[]> {\n    // Placeholder for transaction data - would need actual transaction model\n    logger.info('Transaction data export requested - using mock data', {\n      dataSource: request.dataSource,\n      filters: request.filters\n    });\n    \n    return this.generateMockData(request.dataSource, request.columns, request.filters);\n  }\n\n  private generateMockData(dataSource: string, columns: ExportColumn[], filters: any): any[] {\n    const rowCount = Math.min(1000, filters.limit || 1000);\n    const data: any[] = [];\n\n    for (let i = 0; i < rowCount; i++) {\n      const row: any = {};\n      \n      columns.forEach(column => {\n        switch (column.type) {\n          case 'string':\n            row[column.key] = this.generateMockString(column.key, dataSource);\n            break;\n          case 'number':\n            row[column.key] = Math.floor(Math.random() * 10000);\n            break;\n          case 'currency':\n            row[column.key] = (Math.random() * 100000).toFixed(2);\n            break;\n          case 'percentage':\n            row[column.key] = (Math.random() * 100).toFixed(1);\n            break;\n          case 'date':\n            row[column.key] = new Date(Date.now() - Math.random() * 365 * 24 * 60 * 60 * 1000);\n            break;\n          case 'boolean':\n            row[column.key] = Math.random() > 0.5;\n            break;\n          default:\n            row[column.key] = `Sample ${column.key} ${i}`;\n        }\n      });\n      \n      data.push(row);\n    }\n\n    return data;\n  }\n\n  private generateMockString(fieldKey: string, dataSource: string): string {\n    const mockData = {\n      name: ['Adaora Okafor', 'Kwame Asante', 'Amina Hassan', 'Thabo Mthembu', 'Fatima Al-Rashid'],\n      email: ['user@example.com', 'customer@bank.ng', 'client@fintech.ke'],\n      country: ['Nigeria', 'Kenya', 'Ghana', 'South Africa', 'Egypt'],\n      city: ['Lagos', 'Nairobi', 'Accra', 'Cape Town', 'Cairo'],\n      status: ['Active', 'Pending', 'Completed', 'Cancelled'],\n      segment: ['High-Value Corporate', 'SME Growth', 'Retail Premium', 'Youth Banking'],\n      channel: ['Mobile App', 'USSD', 'Agent Network', 'Bank Branch']\n    };\n\n    const keys = Object.keys(mockData);\n    const matchingKey = keys.find(key => fieldKey.toLowerCase().includes(key));\n    \n    if (matchingKey) {\n      const options = mockData[matchingKey as keyof typeof mockData];\n      return options[Math.floor(Math.random() * options.length)];\n    }\n    \n    return `Sample ${fieldKey}`;\n  }\n\n  private async applyComplianceFilters(data: any[], request: ExportRequest): Promise<any[]> {\n    if (!request.options.compliance.redactSensitiveData) {\n      return data;\n    }\n\n    const dataSource = this.dataSources[request.dataSource as keyof typeof this.dataSources];\n    const sensitiveFields = dataSource?.sensitiveFields || [];\n\n    return data.map(row => {\n      const filteredRow = { ...row };\n      \n      sensitiveFields.forEach(field => {\n        if (filteredRow[field]) {\n          // Apply redaction based on field type\n          if (field.includes('phone')) {\n            filteredRow[field] = this.maskPhone(filteredRow[field]);\n          } else if (field.includes('email')) {\n            filteredRow[field] = this.maskEmail(filteredRow[field]);\n          } else if (field.includes('account') || field.includes('bvn')) {\n            filteredRow[field] = this.maskAccountNumber(filteredRow[field]);\n          } else {\n            filteredRow[field] = '[REDACTED]';\n          }\n        }\n      });\n      \n      return filteredRow;\n    });\n  }\n\n  private maskPhone(phone: string): string {\n    if (phone.length < 4) return '[REDACTED]';\n    return phone.slice(0, 3) + '****' + phone.slice(-2);\n  }\n\n  private maskEmail(email: string): string {\n    const [username, domain] = email.split('@');\n    if (!username || !domain) return '[REDACTED]';\n    \n    const maskedUsername = username.length > 2 ? \n      username.slice(0, 2) + '***' + username.slice(-1) : \n      '***';\n    \n    return `${maskedUsername}@${domain}`;\n  }\n\n  private maskAccountNumber(account: string): string {\n    if (account.length < 8) return '[REDACTED]';\n    return '****' + account.slice(-4);\n  }\n\n  private async generateExportFile(data: any[], request: ExportRequest): Promise<Buffer> {\n    const format = this.formats[request.options.format];\n    \n    switch (format.type) {\n      case 'CSV':\n        return this.generateCSV(data, request);\n      case 'Excel':\n        return this.generateExcel(data, request);\n      case 'JSON':\n        return this.generateJSON(data, request);\n      case 'PDF':\n        return this.generatePDF(data, request);\n      default:\n        throw new Error(`Export format ${format.type} not yet implemented`);\n    }\n  }\n\n  private generateCSV(data: any[], request: ExportRequest): Buffer {\n    const headers = request.columns.map(col => col.label).join(',');\n    const rows = data.map(row => \n      request.columns.map(col => {\n        const value = row[col.key];\n        // Escape CSV values\n        if (typeof value === 'string' && (value.includes(',') || value.includes('\"'))) {\n          return `\"${value.replace(/\"/g, '\"\"')}\"`;\n        }\n        return value;\n      }).join(',')\n    );\n    \n    const csv = [headers, ...rows].join('\\n');\n    return Buffer.from(csv, 'utf-8');\n  }\n\n  private generateJSON(data: any[], request: ExportRequest): Buffer {\n    const exportData = {\n      metadata: {\n        exportDate: new Date().toISOString(),\n        dataSource: request.dataSource,\n        rowCount: data.length,\n        filters: request.filters,\n        requestedBy: request.requestedBy.userName,\n        purpose: request.purpose\n      },\n      data: data\n    };\n    \n    return Buffer.from(JSON.stringify(exportData, null, 2), 'utf-8');\n  }\n\n  private async generateExcel(data: any[], request: ExportRequest): Promise<Buffer> {\n    const ExcelJS = await import('exceljs');\n    const workbook = new ExcelJS.Workbook();\n    const worksheet = workbook.addWorksheet(request.dataSource);\n\n    // Set up headers\n    const headers = request.columns.map(col => ({\n      header: col.label,\n      key: col.key,\n      width: col.width || 20\n    }));\n    worksheet.columns = headers;\n\n    // Add data rows\n    data.forEach(row => {\n      worksheet.addRow(row);\n    });\n\n    // Apply formatting\n    const headerRow = worksheet.getRow(1);\n    headerRow.font = { bold: true };\n    headerRow.fill = {\n      type: 'pattern',\n      pattern: 'solid',\n      fgColor: { argb: 'FFE6F3FF' }\n    };\n\n    // Add metadata sheet if requested\n    if (request.options.includeMetadata) {\n      const metadataSheet = workbook.addWorksheet('Metadata');\n      metadataSheet.addRow(['Export Date', new Date().toISOString()]);\n      metadataSheet.addRow(['Data Source', request.dataSource]);\n      metadataSheet.addRow(['Requested By', request.requestedBy.userName]);\n      metadataSheet.addRow(['Purpose', request.purpose]);\n      metadataSheet.addRow(['Row Count', data.length]);\n      metadataSheet.addRow(['Compliance Level', request.options.compliance.encryptionLevel]);\n    }\n\n    // Add watermark if specified\n    if (request.options.watermark) {\n      worksheet.addRow([]);\n      worksheet.addRow([`Watermark: ${request.options.watermark}`]);\n    }\n\n    return await workbook.xlsx.writeBuffer() as Buffer;\n  }\n\n  private async generatePDF(data: any[], request: ExportRequest): Promise<Buffer> {\n    const jsPDF = (await import('jspdf')).default;\n    const autoTable = (await import('jspdf-autotable')).default;\n    \n    const doc = new jsPDF({\n      orientation: 'landscape',\n      unit: 'mm',\n      format: 'a4'\n    });\n\n    // Add title\n    doc.setFontSize(16);\n    doc.text(`${request.dataSource} Export Report`, 14, 20);\n    \n    // Add metadata\n    doc.setFontSize(10);\n    doc.text(`Generated: ${new Date().toLocaleDateString()}`, 14, 30);\n    doc.text(`Requested by: ${request.requestedBy.userName}`, 14, 35);\n    doc.text(`Purpose: ${request.purpose}`, 14, 40);\n    doc.text(`Records: ${data.length}`, 14, 45);\n\n    // Add watermark if specified\n    if (request.options.watermark) {\n      doc.setTextColor(200, 200, 200);\n      doc.setFontSize(50);\n      doc.text(request.options.watermark, 100, 150, {\n        angle: 45,\n        align: 'center'\n      });\n      doc.setTextColor(0, 0, 0);\n    }\n\n    // Create table\n    const tableHeaders = request.columns.map(col => col.label);\n    const tableData = data.slice(0, 1000).map(row => // Limit to 1000 rows for PDF\n      request.columns.map(col => {\n        const value = row[col.key];\n        if (value instanceof Date) {\n          return value.toLocaleDateString();\n        }\n        if (typeof value === 'object') {\n          return JSON.stringify(value);\n        }\n        return String(value || '');\n      })\n    );\n\n    autoTable(doc, {\n      head: [tableHeaders],\n      body: tableData,\n      startY: 55,\n      styles: { fontSize: 8 },\n      columnStyles: request.columns.reduce((styles, col, index) => {\n        if (col.type === 'currency') {\n          styles[index] = { halign: 'right' };\n        } else if (col.type === 'number' || col.type === 'percentage') {\n          styles[index] = { halign: 'right' };\n        }\n        return styles;\n      }, {} as any)\n    });\n\n    // Add footer\n    const pageCount = doc.getNumberOfPages();\n    for (let i = 1; i <= pageCount; i++) {\n      doc.setPage(i);\n      doc.setFontSize(8);\n      doc.text(`Page ${i} of ${pageCount}`, 200, 290, { align: 'right' });\n      doc.text(`MarketSage Enterprise Export - Confidential`, 14, 290);\n    }\n\n    return Buffer.from(doc.output('arraybuffer'));\n  }\n\n  private async uploadExportFile(\n    fileBuffer: Buffer, \n    job: ExportJob\n  ): Promise<{ downloadUrl: string; fileSize: number; checksumHash: string }> {\n    // In production, upload to secure storage (AWS S3, Azure Blob, etc.)\n    const fileSize = fileBuffer.length;\n    const checksumHash = require('crypto')\n      .createHash('sha256')\n      .update(fileBuffer)\n      .digest('hex');\n    \n    // Generate secure download URL (would be actual cloud storage URL in production)\n    const downloadUrl = `/api/exports/download/${job.id}`;\n    \n    return { downloadUrl, fileSize, checksumHash };\n  }\n\n  private async sendExportNotification(job: ExportJob): Promise<void> {\n    // Send notification to scheduled export recipients\n    logger.info('Sending export notification', {\n      jobId: job.id,\n      recipients: job.request.options.scheduleExport?.recipients\n    });\n  }\n\n  private hasRequiredRole(userRole: string, requiredRole: string): boolean {\n    const roleHierarchy = {\n      'super_admin': 100,\n      'admin': 90,\n      'compliance_officer': 80,\n      'financial_analyst': 70,\n      'data_analyst': 60,\n      'business_analyst': 50,\n      'marketing_manager': 40,\n      'user': 10\n    };\n\n    const userRoleLevel = roleHierarchy[userRole as keyof typeof roleHierarchy] || 0;\n    const requiredRoleLevel = roleHierarchy[requiredRole as keyof typeof roleHierarchy] || 100;\n\n    return userRoleLevel >= requiredRoleLevel;\n  }\n\n  private hasDataAccessRole(userRole: string): boolean {\n    const dataAccessRoles = ['super_admin', 'admin', 'compliance_officer', 'data_analyst'];\n    return dataAccessRoles.includes(userRole);\n  }\n\n  private generateJobId(): string {\n    return `export_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  // Public methods for export management\n  async getExportJob(jobId: string): Promise<ExportJob | null> {\n    // In production, fetch from database\n    // For now, return mock job\n    return null;\n  }\n\n  async cancelExportJob(jobId: string): Promise<boolean> {\n    // Cancel running export job\n    logger.info('Export job cancelled', { jobId });\n    return true;\n  }\n\n  getAvailableFormats(): ExportFormat[] {\n    return Object.values(this.formats);\n  }\n\n  getDataSourceInfo(dataSource: string) {\n    return this.dataSources[dataSource as keyof typeof this.dataSources];\n  }\n}\n\n// Convenience functions\nexport function createExportJob(request: ExportRequest): Promise<ExportJob> {\n  return EnterpriseExportManager.getInstance().createExportJob(request);\n}\n\nexport function getExportFormats(): ExportFormat[] {\n  return EnterpriseExportManager.getInstance().getAvailableFormats();\n}\n\nexport function getDataSourceInfo(dataSource: string) {\n  return EnterpriseExportManager.getInstance().getDataSourceInfo(dataSource);\n}\n\nexport { EnterpriseExportManager }; "],"names":["EnterpriseExportManager","createExportJob","getDataSourceInfo","getExportFormats","getInstance","instance","request","validateExportRequest","job","id","generateJobId","status","progress","startTime","Date","logger","info","jobId","dataSource","format","options","requestedBy","userId","tenantId","purpose","estimatedRows","processExportJob","error","Error","message","dataSources","hasRequiredRole","role","requiredRole","maxRows","formats","compliance","redactSensitiveData","sensitiveFields","length","requestedSensitiveFields","columns","filter","col","includes","key","hasDataAccessRole","data","fetchExportData","processedData","applyComplianceFilters","exportFile","generateExportFile","downloadUrl","fileSize","checksumHash","uploadExportFile","endTime","rowCount","scheduleExport","enabled","sendExportNotification","duration","getTime","default","prisma","fetchContactsData","fetchCampaignData","fetchAnalyticsData","fetchWorkflowData","fetchTransactionData","generateMockData","filters","limit","Math","min","whereClause","organizationId","isActive","undefined","tags","hasSome","createdAfter","createdAt","gte","createdBefore","lte","contacts","contact","findMany","where","take","orderBy","include","lists","select","name","segments","map","firstName","lastName","email","phone","company","jobTitle","l","join","s","campaignType","emailCampaigns","emailCampaign","campaign","type","subject","fromEmail","sentCount","openRate","clickRate","campaigns","startDate","endDate","analytics","record","entity","event","value","metadata","JSON","stringify","timestamp","workflows","workflow","nodes","executions","description","nodeCount","executionCount","successfulExecutions","e","i","row","forEach","column","generateMockString","floor","random","toFixed","now","push","fieldKey","mockData","country","city","segment","channel","keys","Object","matchingKey","find","toLowerCase","filteredRow","field","maskPhone","maskEmail","maskAccountNumber","slice","username","domain","split","maskedUsername","account","generateCSV","generateExcel","generateJSON","generatePDF","headers","label","rows","replace","csv","Buffer","from","exportData","exportDate","toISOString","userName","ExcelJS","workbook","Workbook","worksheet","addWorksheet","header","width","addRow","headerRow","getRow","font","bold","fill","pattern","fgColor","argb","includeMetadata","metadataSheet","encryptionLevel","watermark","xlsx","writeBuffer","jsPDF","autoTable","doc","orientation","unit","setFontSize","text","toLocaleDateString","setTextColor","angle","align","tableHeaders","tableData","String","head","body","startY","styles","fontSize","columnStyles","reduce","index","halign","pageCount","getNumberOfPages","setPage","output","fileBuffer","require","createHash","update","digest","recipients","userRole","roleHierarchy","userRoleLevel","requiredRoleLevel","dataAccessRoles","toString","substr","getExportJob","cancelExportJob","getAvailableFormats","values","CSV","mimeType","extension","supportsSheets","supportsFormatting","Excel","PDF","XML","PowerBI","Tableau","customers","table","transactions"],"mappings":"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"}