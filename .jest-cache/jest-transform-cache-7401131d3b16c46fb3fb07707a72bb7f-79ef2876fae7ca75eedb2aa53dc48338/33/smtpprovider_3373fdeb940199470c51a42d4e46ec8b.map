{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/lib/email-providers/smtp-provider.ts"],"sourcesContent":["import { BaseEmailProvider, type EmailResult, type EmailOptions, type EmailStats } from './base-provider';\nimport { logger } from '@/lib/logger';\nimport nodemailer from 'nodemailer';\n\ninterface SMTPConfig {\n  host: string;\n  port: number;\n  secure: boolean;\n  username: string;\n  password: string;\n  fromEmail?: string;\n  fromName?: string;\n}\n\nexport class SMTPEmailProvider extends BaseEmailProvider {\n  name = 'SMTP';\n  \n  private config: SMTPConfig;\n  private transporter: any;\n\n  constructor(config: SMTPConfig) {\n    super();\n    this.config = config;\n    this.initializeTransporter();\n  }\n\n  private initializeTransporter() {\n    this.transporter = nodemailer.createTransporter({\n      host: this.config.host,\n      port: this.config.port,\n      secure: this.config.secure,\n      auth: {\n        user: this.config.username,\n        pass: this.config.password,\n      },\n      tls: {\n        rejectUnauthorized: process.env.NODE_ENV === 'production'\n      },\n      pool: true, // Use connection pooling\n      maxConnections: 5,\n      maxMessages: 100,\n      rateLimit: 14 // Max 14 messages per second\n    });\n  }\n\n  async sendEmail(options: EmailOptions): Promise<EmailResult> {\n    try {\n      // Validate emails\n      if (!this.validateEmails(options.to)) {\n        return {\n          success: false,\n          error: {\n            message: 'Invalid email address(es)',\n            code: 'INVALID_EMAIL'\n          }\n        };\n      }\n\n      if (!this.validateConfig()) {\n        return {\n          success: false,\n          error: {\n            message: 'SMTP configuration is incomplete',\n            code: 'INVALID_CONFIG'\n          }\n        };\n      }\n\n      // Verify SMTP connection\n      await this.transporter.verify();\n\n      // Prepare recipients\n      const recipients = Array.isArray(options.to) ? options.to.join(', ') : options.to;\n\n      // Sanitize content\n      const sanitizedHtml = this.sanitizeContent(options.html);\n      const htmlWithUnsubscribe = this.addUnsubscribeLink(sanitizedHtml, recipients);\n      const plainText = options.text || this.generatePlainText(htmlWithUnsubscribe);\n\n      // Prepare mail options\n      const mailOptions = {\n        from: options.fromName \n          ? `\"${options.fromName}\" <${options.from || this.config.fromEmail}>` \n          : options.from || this.config.fromEmail,\n        to: recipients,\n        subject: options.subject,\n        html: htmlWithUnsubscribe,\n        text: plainText,\n        replyTo: options.replyTo,\n        headers: {\n          'X-Mailer': 'MarketSage Email Platform',\n          'X-Priority': '3',\n          'X-MSMail-Priority': 'Normal',\n          'Importance': 'Normal',\n          'List-Unsubscribe': `<mailto:unsubscribe@marketsage.africa>, <https://marketsage.africa/unsubscribe?email=${encodeURIComponent(recipients)}>`,\n          'List-Unsubscribe-Post': 'List-Unsubscribe=One-Click',\n          'Return-Path': this.config.username,\n          'Message-ID': `<${Date.now()}.${Math.random().toString(36).substr(2, 9)}@marketsage.africa>`,\n          'X-Auto-Response-Suppress': 'OOF, DR, RN, NRN, AutoReply',\n          'Precedence': 'bulk',\n          'X-Spam-Status': 'No',\n          'X-Entity-ID': 'MarketSage-Platform',\n          'Organization': 'MarketSage - Smart Marketing Solutions',\n        },\n        attachments: options.attachments?.map(att => ({\n          filename: att.filename,\n          content: att.content,\n          contentType: att.contentType,\n        })),\n      };\n\n      // Send email\n      const info = await this.transporter.sendMail(mailOptions);\n\n      logger.info('Email sent successfully via SMTP', {\n        messageId: info.messageId,\n        to: recipients,\n        subject: options.subject,\n        smtpHost: this.config.host,\n        response: info.response\n      });\n\n      return {\n        success: true,\n        messageId: info.messageId\n      };\n\n    } catch (error) {\n      logger.error('SMTP sending error:', { \n        error: error instanceof Error ? error.message : error,\n        smtpHost: this.config.host,\n        smtpPort: this.config.port\n      });\n      \n      return {\n        success: false,\n        error: {\n          message: error instanceof Error ? error.message : 'SMTP sending failed',\n          code: 'SMTP_ERROR'\n        }\n      };\n    }\n  }\n\n  validateConfig(): boolean {\n    return !!(\n      this.config.host &&\n      this.config.port &&\n      this.config.username &&\n      this.config.password\n    );\n  }\n\n  async testConnection(): Promise<boolean> {\n    try {\n      if (!this.validateConfig()) {\n        return false;\n      }\n\n      await this.transporter.verify();\n      return true;\n    } catch (error) {\n      logger.error('SMTP connection test failed:', error);\n      return false;\n    }\n  }\n\n  async getStats(period?: { start: Date; end: Date }): Promise<EmailStats> {\n    // SMTP doesn't provide built-in analytics\n    // This would need to be implemented by tracking sent emails in the database\n    return super.getStats(period);\n  }\n\n  // Close the SMTP connection pool\n  close(): void {\n    if (this.transporter) {\n      this.transporter.close();\n    }\n  }\n\n  // Get SMTP server capabilities\n  async getCapabilities(): Promise<string[]> {\n    try {\n      // This is a simplified version - you might want to extend this\n      // to actually check SMTP server capabilities\n      return [\n        'STARTTLS',\n        'AUTH LOGIN',\n        'AUTH PLAIN',\n        '8BITMIME',\n        'SIZE'\n      ];\n    } catch (error) {\n      logger.error('Error getting SMTP capabilities:', error);\n      return [];\n    }\n  }\n}"],"names":["SMTPEmailProvider","BaseEmailProvider","constructor","config","name","initializeTransporter","transporter","nodemailer","createTransporter","host","port","secure","auth","user","username","pass","password","tls","rejectUnauthorized","process","env","NODE_ENV","pool","maxConnections","maxMessages","rateLimit","sendEmail","options","validateEmails","to","success","error","message","code","validateConfig","verify","recipients","Array","isArray","join","sanitizedHtml","sanitizeContent","html","htmlWithUnsubscribe","addUnsubscribeLink","plainText","text","generatePlainText","mailOptions","from","fromName","fromEmail","subject","replyTo","headers","encodeURIComponent","Date","now","Math","random","toString","substr","attachments","map","att","filename","content","contentType","info","sendMail","logger","messageId","smtpHost","response","Error","smtpPort","testConnection","getStats","period","close","getCapabilities"],"mappings":"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"}