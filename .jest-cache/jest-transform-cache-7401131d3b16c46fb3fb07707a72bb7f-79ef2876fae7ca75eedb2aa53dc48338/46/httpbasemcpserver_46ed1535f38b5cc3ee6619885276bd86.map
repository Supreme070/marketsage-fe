{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/mcp/servers/http-base-mcp-server.ts"],"sourcesContent":["/**\n * HTTP Base MCP Server for MarketSage\n * \n * This class provides HTTP-based MCP server functionality using SSE transport\n * for web-compatible communication instead of stdio transport.\n */\n\nimport { Server } from '@modelcontextprotocol/sdk/server/index';\nimport { \n  CallToolRequestSchema,\n  ErrorCode,\n  ListResourcesRequestSchema,\n  ListToolsRequestSchema,\n  McpError,\n  ReadResourceRequestSchema,\n} from '@modelcontextprotocol/sdk/types';\n\nimport { \n  type MCPAuthContext, \n  type MCPAuthResult, \n  MCPError, \n  type MCPServerResponse,\n  MCPAuthenticationError,\n  MCPAuthorizationError,\n  MCPRateLimitError,\n  MCPValidationError\n} from '../types/mcp-types';\n\nimport { type MCPServerConfig } from '../config/mcp-config';\nimport { SSEServerTransport } from '../transport/sse-server-transport';\nimport { createServer, IncomingMessage, ServerResponse } from 'http';\nimport { URL } from 'url';\nimport { BaseMCPServer } from './base-mcp-server';\n\nexport abstract class HTTPBaseMCPServer extends BaseMCPServer {\n  private httpServer?: ReturnType<typeof createServer>;\n  private transport?: SSEServerTransport;\n  private isStarted = false;\n\n  constructor(config: MCPServerConfig) {\n    super(config);\n  }\n\n  /**\n   * Start the HTTP MCP server with SSE transport\n   */\n  async start(): Promise<void> {\n    if (!this.config.enabled) {\n      console.log(`MCP Server ${this.config.name} is disabled`);\n      return;\n    }\n\n    if (this.isStarted) {\n      console.log(`MCP Server ${this.config.name} is already running`);\n      return;\n    }\n\n    try {\n      // Create SSE transport\n      this.transport = new SSEServerTransport(this.config.port, '/mcp');\n      \n      // Create HTTP server\n      this.httpServer = createServer((req, res) => {\n        this.handleHttpRequest(req, res);\n      });\n\n      // Start listening\n      await new Promise<void>((resolve, reject) => {\n        this.httpServer!.listen(this.config.port, (error?: Error) => {\n          if (error) {\n            reject(error);\n          } else {\n            resolve();\n          }\n        });\n      });\n\n      // Connect MCP server to transport first\n      await this.server.connect(this.transport);\n\n      // Then start transport\n      await this.transport.start();\n\n      this.isStarted = true;\n      console.log(`HTTP MCP Server ${this.config.name} started on port ${this.config.port}`);\n\n    } catch (error) {\n      console.error(`Failed to start HTTP MCP Server ${this.config.name}:`, error);\n      await this.cleanup();\n      throw error;\n    }\n  }\n\n  /**\n   * Stop the HTTP MCP server\n   */\n  async stop(): Promise<void> {\n    if (!this.isStarted) {\n      return;\n    }\n\n    console.log(`Stopping HTTP MCP Server ${this.config.name}...`);\n    this.isStarted = false;\n\n    await this.cleanup();\n    console.log(`HTTP MCP Server ${this.config.name} stopped`);\n  }\n\n  /**\n   * Handle incoming HTTP requests\n   */\n  private handleHttpRequest(req: IncomingMessage, res: ServerResponse): void {\n    // Add CORS headers\n    res.setHeader('Access-Control-Allow-Origin', '*');\n    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');\n    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization, X-Connection-ID');\n\n    // Handle preflight requests\n    if (req.method === 'OPTIONS') {\n      res.writeHead(200);\n      res.end();\n      return;\n    }\n\n    if (!req.url) {\n      res.writeHead(400);\n      res.end('Bad Request: Missing URL');\n      return;\n    }\n\n    try {\n      const url = new URL(req.url, `http://localhost:${this.config.port}`);\n      const path = url.pathname;\n\n      switch (path) {\n        case '/health':\n          this.handleHealthCheck(req, res);\n          break;\n        \n        case '/mcp':\n          if (req.method === 'GET') {\n            // SSE connection\n            this.transport?.handleConnection(req, res);\n          } else {\n            res.writeHead(405);\n            res.end('Method Not Allowed');\n          }\n          break;\n        \n        case '/mcp/message':\n          if (req.method === 'POST') {\n            // Message from client\n            this.transport?.handleMessage(req, res);\n          } else {\n            res.writeHead(405);\n            res.end('Method Not Allowed');\n          }\n          break;\n\n        case '/stats':\n          this.handleStatsRequest(req, res);\n          break;\n\n        default:\n          res.writeHead(404);\n          res.end('Not Found');\n      }\n    } catch (error) {\n      console.error('Error handling HTTP request:', error);\n      res.writeHead(500);\n      res.end('Internal Server Error');\n    }\n  }\n\n  /**\n   * Handle health check requests\n   */\n  private handleHealthCheck(req: IncomingMessage, res: ServerResponse): void {\n    const health = {\n      status: this.isStarted ? 'healthy' : 'unhealthy',\n      server: this.config.name,\n      version: this.config.version,\n      port: this.config.port,\n      timestamp: new Date().toISOString(),\n      transport: 'SSE',\n      connections: this.transport?.getStats().activeConnections || 0\n    };\n\n    res.writeHead(200, { 'Content-Type': 'application/json' });\n    res.end(JSON.stringify(health, null, 2));\n  }\n\n  /**\n   * Handle stats requests\n   */\n  private handleStatsRequest(req: IncomingMessage, res: ServerResponse): void {\n    if (!this.transport) {\n      res.writeHead(503);\n      res.end('Transport not available');\n      return;\n    }\n\n    const stats = {\n      server: {\n        name: this.config.name,\n        version: this.config.version,\n        port: this.config.port,\n        started: this.isStarted,\n        uptime: this.isStarted ? Date.now() : 0\n      },\n      transport: this.transport.getStats(),\n      config: {\n        enabled: this.config.enabled,\n        authRequired: this.config.authentication.required,\n        rateLimit: this.config.rateLimit,\n        fallbackEnabled: this.config.fallback.enabled\n      }\n    };\n\n    res.writeHead(200, { 'Content-Type': 'application/json' });\n    res.end(JSON.stringify(stats, null, 2));\n  }\n\n  /**\n   * Get server status\n   */\n  getStatus(): {\n    started: boolean;\n    port: number;\n    connections: number;\n    uptime: number;\n  } {\n    return {\n      started: this.isStarted,\n      port: this.config.port,\n      connections: this.transport?.getStats().activeConnections || 0,\n      uptime: this.isStarted ? Date.now() : 0\n    };\n  }\n\n  /**\n   * Check if server is healthy\n   */\n  async healthCheck(): Promise<{\n    status: 'healthy' | 'unhealthy';\n    details: {\n      server: boolean;\n      transport: boolean;\n      port: number;\n      connections: number;\n    };\n  }> {\n    const serverHealthy = this.isStarted;\n    const transportHealthy = !!this.transport && this.transport.getStats().activeConnections >= 0;\n    \n    return {\n      status: serverHealthy && transportHealthy ? 'healthy' : 'unhealthy',\n      details: {\n        server: serverHealthy,\n        transport: transportHealthy,\n        port: this.config.port,\n        connections: this.transport?.getStats().activeConnections || 0\n      }\n    };\n  }\n\n  /**\n   * Clean up server resources\n   */\n  private async cleanup(): Promise<void> {\n    const cleanupPromises: Promise<void>[] = [];\n\n    // Close MCP server\n    if (this.server) {\n      cleanupPromises.push(\n        this.server.close().catch(error => {\n          console.error('Error closing MCP server:', error);\n        })\n      );\n    }\n\n    // Close transport\n    if (this.transport) {\n      cleanupPromises.push(\n        this.transport.close().catch(error => {\n          console.error('Error closing transport:', error);\n        })\n      );\n    }\n\n    // Close HTTP server\n    if (this.httpServer) {\n      cleanupPromises.push(\n        new Promise<void>((resolve) => {\n          this.httpServer!.close((error) => {\n            if (error) {\n              console.error('Error closing HTTP server:', error);\n            }\n            resolve();\n          });\n        })\n      );\n    }\n\n    // Wait for all cleanup operations\n    await Promise.allSettled(cleanupPromises);\n\n    // Reset state\n    this.httpServer = undefined;\n    this.transport = undefined;\n  }\n\n  /**\n   * Send a message to all connected clients\n   */\n  protected async broadcastMessage(message: any): Promise<void> {\n    if (!this.transport) {\n      throw new Error('Transport not available');\n    }\n\n    await this.transport.send({\n      jsonrpc: '2.0',\n      method: 'notification',\n      params: message\n    });\n  }\n\n  /**\n   * Get connection count for monitoring\n   */\n  protected getConnectionCount(): number {\n    return this.transport?.getStats().activeConnections || 0;\n  }\n}"],"names":["HTTPBaseMCPServer","BaseMCPServer","constructor","config","isStarted","start","enabled","console","log","name","transport","SSEServerTransport","port","httpServer","createServer","req","res","handleHttpRequest","Promise","resolve","reject","listen","error","server","connect","cleanup","stop","setHeader","method","writeHead","end","url","URL","path","pathname","handleHealthCheck","handleConnection","handleMessage","handleStatsRequest","health","status","version","timestamp","Date","toISOString","connections","getStats","activeConnections","JSON","stringify","stats","started","uptime","now","authRequired","authentication","required","rateLimit","fallbackEnabled","fallback","getStatus","healthCheck","serverHealthy","transportHealthy","details","cleanupPromises","push","close","catch","allSettled","undefined","broadcastMessage","message","Error","send","jsonrpc","params","getConnectionCount"],"mappings":"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"}