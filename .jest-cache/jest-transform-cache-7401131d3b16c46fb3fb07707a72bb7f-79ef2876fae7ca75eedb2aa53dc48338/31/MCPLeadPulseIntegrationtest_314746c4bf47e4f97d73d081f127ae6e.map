{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/__tests__/components/leadpulse/MCPLeadPulseIntegration.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, screen, fireEvent, waitFor, act } from '../../utils/test-utils';\nimport { useSession } from 'next-auth/react';\nimport { useMCPLeadPulse } from '../../../hooks/useMCPLeadPulse';\nimport { LiveVisitorMap } from '../../../components/leadpulse/LiveVisitorMap';\nimport { CoreAnalyticsDashboard } from '../../../components/leadpulse/CoreAnalyticsDashboard';\nimport { VisitorInsights } from '../../../components/leadpulse/VisitorInsights';\nimport { \n  createMockMCPData,\n  measureComponentPerformance, \n  checkAccessibility,\n  PERFORMANCE_THRESHOLDS,\n  TEST_CONSTANTS\n} from '../../utils/test-utils';\n\n// Mock the MCP hook\njest.mock('../../../hooks/useMCPLeadPulse');\njest.mock('next-auth/react');\n\nconst mockUseMCPLeadPulse = useMCPLeadPulse as jest.MockedFunction<typeof useMCPLeadPulse>;\nconst mockUseSession = useSession as jest.MockedFunction<typeof useSession>;\n\ndescribe('MCP LeadPulse Integration Tests', () => {\n  // Mock session data\n  const mockSession = {\n    user: {\n      id: 'user_123',\n      email: 'test@example.com',\n      role: 'admin',\n      organizationId: 'org_123'\n    },\n    expires: '2024-12-31'\n  };\n\n  beforeEach(() => {\n    mockUseSession.mockReturnValue({\n      data: mockSession,\n      status: 'authenticated'\n    });\n\n    // Reset fetch mock\n    global.fetch = jest.fn();\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('Real MCP Data Integration', () => {\n    it('should load and display real visitor data from MCP server', async () => {\n      const mockMCPData = createMockMCPData();\n      mockUseMCPLeadPulse.mockReturnValue(mockMCPData);\n\n      render(<LiveVisitorMap />);\n\n      await waitFor(() => {\n        // Check that MCP data is loaded\n        expect(screen.getByTestId('visitor-map')).toBeInTheDocument();\n        expect(screen.getByText('45')).toBeInTheDocument(); // Lagos visitors\n        expect(screen.getByText('Lagos')).toBeInTheDocument();\n      });\n\n      // Verify MCP connection status\n      expect(screen.getByText(/mcp connected/i)).toBeInTheDocument();\n    });\n\n    it('should handle MCP server unavailable gracefully', async () => {\n      const mockMCPDataWithError = {\n        ...createMockMCPData(),\n        mcpConnected: false,\n        error: 'MCP server unavailable',\n        dataSource: 'fallback' as const\n      };\n      mockUseMCPLeadPulse.mockReturnValue(mockMCPDataWithError);\n\n      render(<CoreAnalyticsDashboard />);\n\n      await waitFor(() => {\n        // Should show fallback message\n        expect(screen.getByText(/fallback mode/i)).toBeInTheDocument();\n        expect(screen.getByText(/mcp server unavailable/i)).toBeInTheDocument();\n      });\n    });\n\n    it('should perform real database queries when MCP is enabled', async () => {\n      const mockMCPData = {\n        ...createMockMCPData(),\n        mcpEnabled: true,\n        mcpConnected: true,\n        dataSource: 'mcp' as const\n      };\n      mockUseMCPLeadPulse.mockReturnValue(mockMCPData);\n\n      render(<VisitorInsights />);\n\n      await waitFor(() => {\n        // Verify real data is displayed\n        expect(screen.getByText(/high engagement detected/i)).toBeInTheDocument();\n        expect(screen.getByText(/conversion rate improved/i)).toBeInTheDocument();\n      });\n\n      // Verify MCP data source indicator\n      expect(screen.getByTestId('data-source-indicator')).toHaveTextContent('MCP');\n    });\n\n    it('should handle empty database results properly', async () => {\n      const mockEmptyData = {\n        visitorLocations: [],\n        visitorJourneys: [],\n        insights: [],\n        segments: [],\n        analyticsOverview: {\n          activeVisitors: 0,\n          totalVisitors: 0,\n          conversionRate: 0,\n          engagementScore: 0,\n          bounceRate: 0,\n          averageSessionTime: 0\n        },\n        isLoading: false,\n        error: null,\n        dataSource: 'mcp' as const,\n        lastUpdated: new Date(),\n        mcpEnabled: true,\n        mcpConnected: true,\n        refresh: jest.fn(),\n        refreshVisitors: jest.fn(),\n        refreshInsights: jest.fn(),\n        refreshLocations: jest.fn()\n      };\n      mockUseMCPLeadPulse.mockReturnValue(mockEmptyData);\n\n      render(<LiveVisitorMap />);\n\n      await waitFor(() => {\n        expect(screen.getByText(/no visitors/i)).toBeInTheDocument();\n        expect(screen.getByText(/0 visitors from 0 countries/i)).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Component Rendering with Real Data', () => {\n    it('should render LiveVisitorMap with MCP data correctly', async () => {\n      const mockMCPData = createMockMCPData();\n      mockUseMCPLeadPulse.mockReturnValue(mockMCPData);\n\n      const renderTime = await measureComponentPerformance(\n        () => render(<LiveVisitorMap />),\n        'LiveVisitorMap with MCP data'\n      );\n\n      await waitFor(() => {\n        // Check map renders with real locations\n        expect(screen.getByTestId('visitor-map')).toBeInTheDocument();\n        expect(screen.getByText('Live Visitor Tracking')).toBeInTheDocument();\n        \n        // Verify African cities are displayed\n        expect(screen.getByText('Lagos')).toBeInTheDocument();\n        expect(screen.getByText('Abuja')).toBeInTheDocument();\n        expect(screen.getByText('Kano')).toBeInTheDocument();\n      });\n\n      expect(renderTime).toBeLessThan(PERFORMANCE_THRESHOLDS.COMPONENT_RENDER);\n    });\n\n    it('should render CoreAnalyticsDashboard with real analytics', async () => {\n      const mockMCPData = createMockMCPData();\n      mockUseMCPLeadPulse.mockReturnValue(mockMCPData);\n\n      render(<CoreAnalyticsDashboard />);\n\n      await waitFor(() => {\n        // Check analytics cards\n        expect(screen.getByTestId('active-visitors-card')).toBeInTheDocument();\n        expect(screen.getByTestId('total-visitors-card')).toBeInTheDocument();\n        expect(screen.getByTestId('conversion-rate-card')).toBeInTheDocument();\n        \n        // Verify real numbers are displayed\n        expect(screen.getByText('23')).toBeInTheDocument(); // activeVisitors\n        expect(screen.getByText('1,547')).toBeInTheDocument(); // totalVisitors\n      });\n    });\n\n    it('should render VisitorInsights with MCP insights', async () => {\n      const mockMCPData = createMockMCPData();\n      mockUseMCPLeadPulse.mockReturnValue(mockMCPData);\n\n      render(<VisitorInsights />);\n\n      await waitFor(() => {\n        // Check insights are rendered\n        expect(screen.getByText('High engagement detected')).toBeInTheDocument();\n        expect(screen.getByText('Conversion rate improved')).toBeInTheDocument();\n        \n        // Check segments\n        expect(screen.getByText('High Value Visitors')).toBeInTheDocument();\n        expect(screen.getByText('234')).toBeInTheDocument(); // segment count\n      });\n    });\n  });\n\n  describe('Loading States', () => {\n    it('should show loading state while fetching MCP data', async () => {\n      const mockLoadingData = {\n        ...createMockMCPData(),\n        isLoading: true\n      };\n      mockUseMCPLeadPulse.mockReturnValue(mockLoadingData);\n\n      render(<LiveVisitorMap />);\n\n      expect(screen.getByTestId('loading-spinner')).toBeInTheDocument();\n      expect(screen.getByText(/loading visitor data/i)).toBeInTheDocument();\n    });\n\n    it('should show skeleton loaders for dashboard components', async () => {\n      const mockLoadingData = {\n        ...createMockMCPData(),\n        isLoading: true\n      };\n      mockUseMCPLeadPulse.mockReturnValue(mockLoadingData);\n\n      render(<CoreAnalyticsDashboard />);\n\n      expect(screen.getAllByTestId('skeleton-card')).toHaveLength(4); // 4 metric cards\n    });\n  });\n\n  describe('Error Boundaries and Fallback', () => {\n    it('should display error message when MCP fails', async () => {\n      const mockErrorData = {\n        ...createMockMCPData(),\n        error: 'Database connection failed',\n        mcpConnected: false,\n        dataSource: 'fallback' as const\n      };\n      mockUseMCPLeadPulse.mockReturnValue(mockErrorData);\n\n      render(<VisitorInsights />);\n\n      await waitFor(() => {\n        expect(screen.getByRole('alert')).toBeInTheDocument();\n        expect(screen.getByText('Database connection failed')).toBeInTheDocument();\n        expect(screen.getByText(/retry/i)).toBeInTheDocument();\n      });\n    });\n\n    it('should allow retry when MCP connection fails', async () => {\n      const mockRefresh = jest.fn();\n      const mockErrorData = {\n        ...createMockMCPData(),\n        error: 'Connection timeout',\n        refresh: mockRefresh\n      };\n      mockUseMCPLeadPulse.mockReturnValue(mockErrorData);\n\n      render(<LiveVisitorMap />);\n\n      await waitFor(() => {\n        const retryButton = screen.getByText(/retry/i);\n        fireEvent.click(retryButton);\n      });\n\n      expect(mockRefresh).toHaveBeenCalledTimes(1);\n    });\n\n    it('should handle network errors gracefully', async () => {\n      // Mock network error\n      global.fetch = jest.fn().mockRejectedValue(new Error('Network error'));\n      \n      const mockErrorData = {\n        ...createMockMCPData(),\n        error: 'Network error',\n        mcpConnected: false\n      };\n      mockUseMCPLeadPulse.mockReturnValue(mockErrorData);\n\n      render(<CoreAnalyticsDashboard />);\n\n      await waitFor(() => {\n        expect(screen.getByText(/network error/i)).toBeInTheDocument();\n        expect(screen.getByTestId('error-boundary')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Mobile Compatibility (African Market)', () => {\n    beforeEach(() => {\n      // Mock mobile viewport\n      Object.defineProperty(window, 'innerWidth', {\n        writable: true,\n        configurable: true,\n        value: 375\n      });\n      Object.defineProperty(window, 'innerHeight', {\n        writable: true,\n        configurable: true,\n        value: 667\n      });\n    });\n\n    it('should render mobile-optimized layout for visitor map', async () => {\n      const mockMCPData = createMockMCPData();\n      mockUseMCPLeadPulse.mockReturnValue(mockMCPData);\n\n      render(<LiveVisitorMap />);\n\n      await waitFor(() => {\n        const mapContainer = screen.getByTestId('visitor-map');\n        expect(mapContainer).toHaveClass('mobile-responsive');\n        \n        // Check mobile-specific elements\n        expect(screen.getByTestId('mobile-stats')).toBeInTheDocument();\n      });\n    });\n\n    it('should use touch-friendly interactions on mobile', async () => {\n      const mockMCPData = createMockMCPData();\n      mockUseMCPLeadPulse.mockReturnValue(mockMCPData);\n\n      render(<CoreAnalyticsDashboard />);\n\n      await waitFor(() => {\n        const cards = screen.getAllByTestId(/metric-card/);\n        cards.forEach(card => {\n          expect(card).toHaveClass('touch-friendly');\n        });\n      });\n    });\n\n    it('should optimize data loading for low-bandwidth connections', async () => {\n      const mockMCPData = {\n        ...createMockMCPData(),\n        visitorLocations: createMockMCPData().visitorLocations.slice(0, 3) // Reduced data\n      };\n      mockUseMCPLeadPulse.mockReturnValue(mockMCPData);\n\n      render(<LiveVisitorMap />);\n\n      await waitFor(() => {\n        // Should show limited data for performance\n        const locationItems = screen.getAllByTestId('location-item');\n        expect(locationItems.length).toBeLessThanOrEqual(5);\n      });\n    });\n\n    it('should display currency in NGN for African users', async () => {\n      const mockMCPData = createMockMCPData();\n      mockUseMCPLeadPulse.mockReturnValue(mockMCPData);\n\n      // Mock user location as Nigeria\n      Object.defineProperty(navigator, 'language', {\n        value: 'en-NG',\n        configurable: true\n      });\n\n      render(<VisitorInsights />);\n\n      await waitFor(() => {\n        // Should show NGN currency format\n        expect(screen.getByText(/₦/)).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Real-time Updates', () => {\n    it('should update data when MCP provides new information', async () => {\n      const mockRefresh = jest.fn();\n      const initialData = createMockMCPData();\n      initialData.refresh = mockRefresh;\n      \n      mockUseMCPLeadPulse.mockReturnValue(initialData);\n\n      render(<LiveVisitorMap />);\n\n      // Simulate real-time update\n      await act(async () => {\n        // Update data\n        const updatedData = {\n          ...initialData,\n          analyticsOverview: {\n            ...initialData.analyticsOverview,\n            activeVisitors: 25 // Changed from 23\n          }\n        };\n        mockUseMCPLeadPulse.mockReturnValue(updatedData);\n      });\n\n      await waitFor(() => {\n        expect(screen.getByText('25')).toBeInTheDocument();\n      });\n    });\n\n    it('should handle refresh intervals correctly', async () => {\n      const mockRefresh = jest.fn();\n      const mockMCPData = {\n        ...createMockMCPData(),\n        refresh: mockRefresh\n      };\n      mockUseMCPLeadPulse.mockReturnValue(mockMCPData);\n\n      render(<CoreAnalyticsDashboard enableRealtime={true} refreshInterval={1000} />);\n\n      // Wait for auto-refresh\n      await waitFor(() => {\n        expect(mockRefresh).toHaveBeenCalled();\n      }, { timeout: 2000 });\n    });\n  });\n\n  describe('Performance and Accessibility', () => {\n    it('should meet performance thresholds with MCP data', async () => {\n      const mockMCPData = createMockMCPData();\n      mockUseMCPLeadPulse.mockReturnValue(mockMCPData);\n\n      const renderTime = await measureComponentPerformance(\n        () => render(<VisitorInsights />),\n        'VisitorInsights with MCP data'\n      );\n\n      expect(renderTime).toBeLessThan(PERFORMANCE_THRESHOLDS.COMPONENT_RENDER);\n    });\n\n    it('should maintain accessibility standards', async () => {\n      const mockMCPData = createMockMCPData();\n      mockUseMCPLeadPulse.mockReturnValue(mockMCPData);\n\n      const { container } = render(<LiveVisitorMap />);\n\n      await waitFor(() => {\n        checkAccessibility(container);\n      });\n\n      // Check for proper ARIA labels\n      expect(screen.getByLabelText(/visitor map/i)).toBeInTheDocument();\n      expect(screen.getByRole('main')).toBeInTheDocument();\n    });\n\n    it('should handle large datasets efficiently', async () => {\n      const largeMCPData = {\n        ...createMockMCPData(),\n        visitorJourneys: Array.from({ length: 500 }, (_, i) => ({\n          id: `journey_${i}`,\n          visitorId: `visitor_${i}`,\n          sessionId: `session_${i}`,\n          startTime: new Date().toISOString(),\n          endTime: new Date().toISOString(),\n          totalPages: 3,\n          engagementScore: Math.floor(Math.random() * 100),\n          conversionEvents: [],\n          pulseData: [],\n          device: 'mobile',\n          location: 'Lagos, Nigeria',\n          lastActive: '2 min ago'\n        }))\n      };\n      mockUseMCPLeadPulse.mockReturnValue(largeMCPData);\n\n      const renderTime = await measureComponentPerformance(\n        () => render(<CoreAnalyticsDashboard />),\n        'CoreAnalyticsDashboard with large dataset'\n      );\n\n      expect(renderTime).toBeLessThan(PERFORMANCE_THRESHOLDS.COMPONENT_RENDER * 2);\n    });\n  });\n\n  describe('Data Validation and Security', () => {\n    it('should validate MCP data structure', async () => {\n      const invalidMCPData = {\n        // Missing required fields\n        visitorLocations: null,\n        visitorJourneys: undefined,\n        insights: 'invalid',\n        segments: []\n      };\n      \n      // Should handle invalid data gracefully\n      expect(() => {\n        mockUseMCPLeadPulse.mockReturnValue(invalidMCPData as any);\n        render(<VisitorInsights />);\n      }).not.toThrow();\n    });\n\n    it('should sanitize data from MCP server', async () => {\n      const maliciousData = {\n        ...createMockMCPData(),\n        insights: [\n          {\n            id: '1',\n            type: 'xss',\n            message: '<script>alert(\"xss\")</script>High engagement detected'\n          }\n        ]\n      };\n      mockUseMCPLeadPulse.mockReturnValue(maliciousData);\n\n      render(<VisitorInsights />);\n\n      await waitFor(() => {\n        // Should not render script tags\n        expect(screen.queryByText('<script>')).not.toBeInTheDocument();\n        expect(screen.getByText(/high engagement detected/i)).toBeInTheDocument();\n      });\n    });\n\n    it('should respect user permissions for MCP data access', async () => {\n      // Mock user without LeadPulse permissions\n      mockUseSession.mockReturnValue({\n        data: {\n          ...mockSession,\n          user: {\n            ...mockSession.user,\n            role: 'viewer' // Limited role\n          }\n        },\n        status: 'authenticated'\n      });\n\n      const restrictedData = {\n        ...createMockMCPData(),\n        mcpEnabled: false,\n        error: 'Insufficient permissions'\n      };\n      mockUseMCPLeadPulse.mockReturnValue(restrictedData);\n\n      render(<LiveVisitorMap />);\n\n      await waitFor(() => {\n        expect(screen.getByText(/insufficient permissions/i)).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('African Market Specific Features', () => {\n    it('should display timezone-aware timestamps for African regions', async () => {\n      const mockMCPData = createMockMCPData();\n      mockUseMCPLeadPulse.mockReturnValue(mockMCPData);\n\n      // Mock African timezone\n      const mockDate = new Date('2024-07-19T15:30:00Z');\n      jest.spyOn(global, 'Date').mockImplementation(() => mockDate);\n\n      render(<VisitorInsights />);\n\n      await waitFor(() => {\n        // Should show WAT (West Africa Time) format\n        expect(screen.getByText(/wat|west africa time/i)).toBeInTheDocument();\n      });\n    });\n\n    it('should prioritize Nigerian cities in location data', async () => {\n      const mockMCPData = createMockMCPData();\n      mockUseMCPLeadPulse.mockReturnValue(mockMCPData);\n\n      render(<LiveVisitorMap />);\n\n      await waitFor(() => {\n        const locationItems = screen.getAllByTestId('location-item');\n        // Lagos should be first (highest visitor count)\n        expect(locationItems[0]).toHaveTextContent('Lagos');\n      });\n    });\n\n    it('should support multiple African languages', async () => {\n      const mockMCPData = createMockMCPData();\n      mockUseMCPLeadPulse.mockReturnValue(mockMCPData);\n\n      // Mock Hausa language preference\n      Object.defineProperty(navigator, 'languages', {\n        value: ['ha', 'en'],\n        configurable: true\n      });\n\n      render(<CoreAnalyticsDashboard />);\n\n      await waitFor(() => {\n        // Should support internationalization\n        expect(screen.getByTestId('i18n-ready')).toBeInTheDocument();\n      });\n    });\n  });\n});"],"names":["jest","mock","mockUseMCPLeadPulse","useMCPLeadPulse","mockUseSession","useSession","describe","mockSession","user","id","email","role","organizationId","expires","beforeEach","mockReturnValue","data","status","global","fetch","fn","afterEach","clearAllMocks","it","mockMCPData","createMockMCPData","render","LiveVisitorMap","waitFor","expect","screen","getByTestId","toBeInTheDocument","getByText","mockMCPDataWithError","mcpConnected","error","dataSource","CoreAnalyticsDashboard","mcpEnabled","VisitorInsights","toHaveTextContent","mockEmptyData","visitorLocations","visitorJourneys","insights","segments","analyticsOverview","activeVisitors","totalVisitors","conversionRate","engagementScore","bounceRate","averageSessionTime","isLoading","lastUpdated","Date","refresh","refreshVisitors","refreshInsights","refreshLocations","renderTime","measureComponentPerformance","toBeLessThan","PERFORMANCE_THRESHOLDS","COMPONENT_RENDER","mockLoadingData","getAllByTestId","toHaveLength","mockErrorData","getByRole","mockRefresh","retryButton","fireEvent","click","toHaveBeenCalledTimes","mockRejectedValue","Error","Object","defineProperty","window","writable","configurable","value","mapContainer","toHaveClass","cards","forEach","card","slice","locationItems","length","toBeLessThanOrEqual","navigator","initialData","act","updatedData","enableRealtime","refreshInterval","toHaveBeenCalled","timeout","container","checkAccessibility","getByLabelText","largeMCPData","Array","from","_","i","visitorId","sessionId","startTime","toISOString","endTime","totalPages","Math","floor","random","conversionEvents","pulseData","device","location","lastActive","invalidMCPData","undefined","not","toThrow","maliciousData","type","message","queryByText","restrictedData","mockDate","spyOn","mockImplementation"],"mappings":"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"}