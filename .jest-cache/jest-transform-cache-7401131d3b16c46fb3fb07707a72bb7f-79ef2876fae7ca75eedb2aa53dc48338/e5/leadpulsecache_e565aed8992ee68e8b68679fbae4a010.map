{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/lib/cache/leadpulse-cache.ts"],"sourcesContent":["/**\n * LeadPulse Caching Layer\n * \n * High-performance caching for LeadPulse analytics and visitor data\n */\n\nimport { redisService } from './redis';\nimport { logger } from '@/lib/logger';\nimport prisma from '@/lib/db/prisma';\n\nexport class LeadPulseCacheService {\n  // Get Redis client from service\n  private get redis() {\n    return redisService.getClient();\n  }\n\n  private readonly TTL = {\n    ANALYTICS_OVERVIEW: 60, // 1 minute\n    VISITOR_DATA: 300, // 5 minutes\n    GEOGRAPHIC_DATA: 600, // 10 minutes\n    REAL_TIME_METRICS: 30, // 30 seconds\n    VISITOR_JOURNEY: 1800, // 30 minutes\n    DAILY_AGGREGATES: 3600, // 1 hour\n  };\n\n  private readonly KEYS = {\n    ANALYTICS_OVERVIEW: 'leadpulse:analytics:overview',\n    ACTIVE_VISITORS: 'leadpulse:visitors:active',\n    RECENT_VISITORS: 'leadpulse:visitors:recent',\n    VISITOR_COUNT: 'leadpulse:count:visitors',\n    CONVERSION_RATE: 'leadpulse:metrics:conversion',\n    GEOGRAPHIC_DATA: 'leadpulse:geo:countries',\n    RECENT_ACTIVITY: 'leadpulse:activity:recent',\n    VISITOR_JOURNEY: (id: string) => `leadpulse:journey:${id}`,\n    VISITOR_PROFILE: (id: string) => `leadpulse:visitor:${id}`,\n    DAILY_STATS: (date: string) => `leadpulse:stats:${date}`,\n  };\n\n  // Analytics Overview Caching\n  async getAnalyticsOverview() {\n    try {\n      const redisClient = this.redis;\n      if (!redisClient) {\n        return this.fetchAnalyticsOverview(); // Fallback to direct DB\n      }\n\n      const cached = await redisClient.get(this.KEYS.ANALYTICS_OVERVIEW);\n      if (cached) {\n        return JSON.parse(cached);\n      }\n\n      // Fetch from database\n      const overview = await this.fetchAnalyticsOverview();\n      await redisClient.set(this.KEYS.ANALYTICS_OVERVIEW, JSON.stringify(overview), 'EX', this.TTL.ANALYTICS_OVERVIEW);\n      \n      return overview;\n    } catch (error) {\n      logger.error('Error getting analytics overview from cache:', error);\n      return this.fetchAnalyticsOverview(); // Fallback to direct DB\n    }\n  }\n\n  async invalidateAnalyticsOverview() {\n    await this.redis.del(this.KEYS.ANALYTICS_OVERVIEW);\n  }\n\n  private async fetchAnalyticsOverview() {\n    const [totalVisitors, activeVisitors, conversionRate, topCountries, recentActivity] = await Promise.all([\n      this.getCachedVisitorCount(),\n      this.getCachedActiveVisitors(),\n      this.getCachedConversionRate(),\n      this.getCachedGeographicData(),\n      this.getCachedRecentActivity()\n    ]);\n\n    return {\n      totalVisitors,\n      activeVisitors: activeVisitors.length,\n      conversionRate,\n      topCountries,\n      recentActivity\n    };\n  }\n\n  // Visitor Count Caching\n  async getCachedVisitorCount(): Promise<number> {\n    try {\n      const cached = await this.redis.get(this.KEYS.VISITOR_COUNT);\n      if (cached) {\n        return Number.parseInt(cached);\n      }\n\n      const count = await prisma.leadPulseVisitor.count();\n      await this.redis.set(this.KEYS.VISITOR_COUNT, count, 'EX', this.TTL.REAL_TIME_METRICS);\n      \n      return count;\n    } catch (error) {\n      logger.error('Error getting visitor count from cache:', error);\n      return await prisma.leadPulseVisitor.count();\n    }\n  }\n\n  async updateVisitorCount(increment = 1) {\n    try {\n      await this.redis.incr(this.KEYS.VISITOR_COUNT);\n    } catch (error) {\n      logger.error('Error updating visitor count in cache:', error);\n    }\n  }\n\n  // Active Visitors Caching\n  async getCachedActiveVisitors() {\n    try {\n      const cached = await this.redis.get(this.KEYS.ACTIVE_VISITORS);\n      if (cached) {\n        return JSON.parse(cached);\n      }\n\n      const activeVisitors = await prisma.leadPulseVisitor.findMany({\n        where: { isActive: true },\n        include: {\n          touchpoints: {\n            orderBy: { timestamp: 'desc' },\n            take: 3\n          }\n        },\n        orderBy: { lastVisit: 'desc' }\n      });\n\n      await this.redis.set(this.KEYS.ACTIVE_VISITORS, JSON.stringify(activeVisitors), 'EX', this.TTL.REAL_TIME_METRICS);\n      return activeVisitors;\n    } catch (error) {\n      logger.error('Error getting active visitors from cache:', error);\n      return [];\n    }\n  }\n\n  async updateActiveVisitors(visitor: any) {\n    try {\n      // Add to active visitors list\n      await this.redis.lpush(this.KEYS.ACTIVE_VISITORS, JSON.stringify(visitor));\n      await this.redis.ltrim(this.KEYS.ACTIVE_VISITORS, 0, 49); // Keep last 50\n      \n      // Set TTL for active visitors list if it's new\n      await this.redis.expire(this.KEYS.ACTIVE_VISITORS, this.TTL.REAL_TIME_METRICS);\n      \n      // Add to active visitors set for quick lookup\n      await this.redis.sadd('leadpulse:active:set', visitor.id);\n      \n      // Set TTL for active visitors set\n      await this.redis.expire('leadpulse:active:set', this.TTL.REAL_TIME_METRICS);\n    } catch (error) {\n      logger.error('Error updating active visitors in cache:', error);\n    }\n  }\n\n  async removeActiveVisitor(visitorId: string) {\n    try {\n      // Remove from active visitors set\n      await this.redis.srem('leadpulse:active:set', visitorId);\n      \n      // Invalidate active visitors list\n      await this.redis.del(this.KEYS.ACTIVE_VISITORS);\n    } catch (error) {\n      logger.error('Error removing active visitor from cache:', error);\n    }\n  }\n\n  // Recent Visitors Caching\n  async getCachedRecentVisitors() {\n    try {\n      const cached = await this.redis.get(this.KEYS.RECENT_VISITORS);\n      if (cached) {\n        return JSON.parse(cached);\n      }\n\n      const recentVisitors = await prisma.leadPulseVisitor.findMany({\n        orderBy: { lastVisit: 'desc' },\n        take: 20,\n        include: {\n          touchpoints: {\n            orderBy: { timestamp: 'desc' },\n            take: 3\n          }\n        }\n      });\n\n      await this.redis.set(this.KEYS.RECENT_VISITORS, JSON.stringify(recentVisitors), 'EX', this.TTL.VISITOR_DATA);\n      return recentVisitors;\n    } catch (error) {\n      logger.error('Error getting recent visitors from cache:', error);\n      return [];\n    }\n  }\n\n  async addRecentVisitor(visitor: any) {\n    try {\n      await this.redis.lpush(this.KEYS.RECENT_VISITORS, JSON.stringify(visitor));\n      await this.redis.ltrim(this.KEYS.RECENT_VISITORS, 0, 19); // Keep last 20\n      \n      // Set TTL for recent visitors list\n      await this.redis.expire(this.KEYS.RECENT_VISITORS, this.TTL.VISITOR_DATA);\n    } catch (error) {\n      logger.error('Error adding recent visitor to cache:', error);\n    }\n  }\n\n  // Conversion Rate Caching\n  async getCachedConversionRate(): Promise<number> {\n    try {\n      const cached = await this.redis.get(this.KEYS.CONVERSION_RATE);\n      if (cached) {\n        return Number.parseFloat(cached);\n      }\n\n      const [totalVisitors, conversions] = await Promise.all([\n        prisma.leadPulseVisitor.count(),\n        prisma.leadPulseTouchpoint.count({\n          where: {\n            type: 'CONVERSION',\n            timestamp: {\n              gte: new Date(Date.now() - 24 * 60 * 60 * 1000) // Last 24 hours\n            }\n          }\n        })\n      ]);\n\n      const rate = totalVisitors > 0 ? (conversions / totalVisitors) * 100 : 0;\n      const rounded = Math.round(rate * 100) / 100;\n\n      await this.redis.set(this.KEYS.CONVERSION_RATE, rounded, 'EX', this.TTL.ANALYTICS_OVERVIEW);\n      return rounded;\n    } catch (error) {\n      logger.error('Error getting conversion rate from cache:', error);\n      return 0;\n    }\n  }\n\n  // Geographic Data Caching\n  async getCachedGeographicData() {\n    try {\n      const cached = await this.redis.get(this.KEYS.GEOGRAPHIC_DATA);\n      if (cached) {\n        return JSON.parse(cached);\n      }\n\n      const countryData = await prisma.leadPulseVisitor.groupBy({\n        by: ['country'],\n        _count: { country: true },\n        orderBy: { _count: { country: 'desc' } },\n        take: 10\n      });\n\n      const topCountries = countryData.map(item => ({\n        country: item.country || 'Unknown',\n        count: item._count.country\n      }));\n\n      await this.redis.set(this.KEYS.GEOGRAPHIC_DATA, JSON.stringify(topCountries), 'EX', this.TTL.GEOGRAPHIC_DATA);\n      return topCountries;\n    } catch (error) {\n      logger.error('Error getting geographic data from cache:', error);\n      return [];\n    }\n  }\n\n  // Recent Activity Caching\n  async getCachedRecentActivity() {\n    try {\n      const cached = await this.redis.lrange(this.KEYS.RECENT_ACTIVITY, 0, 9); // Last 10\n      if (cached.length > 0) {\n        return cached.map(item => JSON.parse(item));\n      }\n\n      const recentTouchpoints = await prisma.leadPulseTouchpoint.findMany({\n        where: {\n          timestamp: {\n            gte: new Date(Date.now() - 24 * 60 * 60 * 1000) // Last 24 hours\n          }\n        },\n        include: { visitor: true },\n        orderBy: { timestamp: 'desc' },\n        take: 10\n      });\n\n      // Store in Redis list\n      for (const touchpoint of recentTouchpoints.reverse()) {\n        await this.redis.lpush(this.KEYS.RECENT_ACTIVITY, JSON.stringify(touchpoint));\n        await this.redis.ltrim(this.KEYS.RECENT_ACTIVITY, 0, 49);\n      }\n      \n      // Set TTL for recent activity list\n      await this.redis.expire(this.KEYS.RECENT_ACTIVITY, this.TTL.REAL_TIME_METRICS);\n\n      return recentTouchpoints;\n    } catch (error) {\n      logger.error('Error getting recent activity from cache:', error);\n      return [];\n    }\n  }\n\n  async addRecentActivity(touchpoint: any) {\n    try {\n      await this.redis.lpush(this.KEYS.RECENT_ACTIVITY, JSON.stringify(touchpoint));\n      await this.redis.ltrim(this.KEYS.RECENT_ACTIVITY, 0, 49); // Keep last 50\n      \n      // Set TTL for recent activity list\n      await this.redis.expire(this.KEYS.RECENT_ACTIVITY, this.TTL.REAL_TIME_METRICS);\n    } catch (error) {\n      logger.error('Error adding recent activity to cache:', error);\n    }\n  }\n\n  // Visitor Journey Caching\n  async getCachedVisitorJourney(visitorId: string) {\n    try {\n      const cached = await this.redis.get(this.KEYS.VISITOR_JOURNEY(visitorId));\n      if (cached) {\n        return JSON.parse(cached);\n      }\n\n      const journey = await prisma.leadPulseTouchpoint.findMany({\n        where: { visitorId },\n        orderBy: { timestamp: 'asc' },\n        include: { visitor: true }\n      });\n\n      await this.redis.set(this.KEYS.VISITOR_JOURNEY(visitorId), JSON.stringify(journey), 'EX', this.TTL.VISITOR_JOURNEY);\n      return journey;\n    } catch (error) {\n      logger.error(`Error getting visitor journey from cache for ${visitorId}:`, error);\n      return [];\n    }\n  }\n\n  async updateVisitorJourney(visitorId: string, touchpoint: any) {\n    try {\n      // Invalidate cached journey to force refresh\n      await this.redis.del(this.KEYS.VISITOR_JOURNEY(visitorId));\n      \n      // Add to recent activity\n      await this.addRecentActivity(touchpoint);\n    } catch (error) {\n      logger.error(`Error updating visitor journey cache for ${visitorId}:`, error);\n    }\n  }\n\n  // Visitor Profile Caching\n  async getCachedVisitorProfile(visitorId: string) {\n    try {\n      const cached = await this.redis.get(this.KEYS.VISITOR_PROFILE(visitorId));\n      if (cached) {\n        return JSON.parse(cached);\n      }\n\n      const visitor = await prisma.leadPulseVisitor.findUnique({\n        where: { id: visitorId },\n        include: {\n          touchpoints: {\n            orderBy: { timestamp: 'desc' }\n          }\n        }\n      });\n\n      if (visitor) {\n        await this.redis.set(this.KEYS.VISITOR_PROFILE(visitorId), JSON.stringify(visitor), 'EX', this.TTL.VISITOR_DATA);\n      }\n\n      return visitor;\n    } catch (error) {\n      logger.error(`Error getting visitor profile from cache for ${visitorId}:`, error);\n      return null;\n    }\n  }\n\n  // Daily Stats Caching\n  async getCachedDailyStats(date: string) {\n    try {\n      const cached = await this.redis.get(this.KEYS.DAILY_STATS(date));\n      if (cached) {\n        return JSON.parse(cached);\n      }\n\n      const startOfDay = new Date(date);\n      startOfDay.setHours(0, 0, 0, 0);\n      const endOfDay = new Date(date);\n      endOfDay.setHours(23, 59, 59, 999);\n\n      const [visitors, touchpoints, conversions] = await Promise.all([\n        prisma.leadPulseVisitor.count({\n          where: {\n            firstVisit: {\n              gte: startOfDay,\n              lte: endOfDay\n            }\n          }\n        }),\n        prisma.leadPulseTouchpoint.count({\n          where: {\n            timestamp: {\n              gte: startOfDay,\n              lte: endOfDay\n            }\n          }\n        }),\n        prisma.leadPulseTouchpoint.count({\n          where: {\n            type: 'CONVERSION',\n            timestamp: {\n              gte: startOfDay,\n              lte: endOfDay\n            }\n          }\n        })\n      ]);\n\n      const stats = {\n        date,\n        visitors,\n        touchpoints,\n        conversions,\n        conversionRate: visitors > 0 ? (conversions / visitors) * 100 : 0\n      };\n\n      await this.redis.set(this.KEYS.DAILY_STATS(date), JSON.stringify(stats), 'EX', this.TTL.DAILY_AGGREGATES);\n      return stats;\n    } catch (error) {\n      logger.error(`Error getting daily stats from cache for ${date}:`, error);\n      return null;\n    }\n  }\n\n  // Cache invalidation\n  async invalidateAll() {\n    try {\n      // Use key pattern deletion for LeadPulse keys\n      const keys = await this.redis.keys('leadpulse:*');\n      if (keys.length > 0) {\n        await this.redis.del(...keys);\n      }\n      logger.info('Invalidated all LeadPulse cache');\n    } catch (error) {\n      logger.error('Error invalidating LeadPulse cache:', error);\n    }\n  }\n\n  async invalidateVisitorData() {\n    try {\n      await Promise.all([\n        this.redis.del(this.KEYS.ACTIVE_VISITORS),\n        this.redis.del(this.KEYS.RECENT_VISITORS),\n        this.redis.del(this.KEYS.VISITOR_COUNT),\n        this.redis.keys('leadpulse:visitor:*').then(keys => keys.length > 0 ? this.redis.del(...keys) : Promise.resolve())\n      ]);\n    } catch (error) {\n      logger.error('Error invalidating visitor data cache:', error);\n    }\n  }\n\n  // Health check\n  async isHealthy(): Promise<boolean> {\n    try {\n      await this.redis.ping();\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n}\n\n// Export singleton instance\nexport const leadPulseCache = new LeadPulseCacheService();"],"names":["LeadPulseCacheService","leadPulseCache","redis","redisService","getClient","getAnalyticsOverview","redisClient","fetchAnalyticsOverview","cached","get","KEYS","ANALYTICS_OVERVIEW","JSON","parse","overview","set","stringify","TTL","error","logger","invalidateAnalyticsOverview","del","totalVisitors","activeVisitors","conversionRate","topCountries","recentActivity","Promise","all","getCachedVisitorCount","getCachedActiveVisitors","getCachedConversionRate","getCachedGeographicData","getCachedRecentActivity","length","VISITOR_COUNT","Number","parseInt","count","prisma","leadPulseVisitor","REAL_TIME_METRICS","updateVisitorCount","increment","incr","ACTIVE_VISITORS","findMany","where","isActive","include","touchpoints","orderBy","timestamp","take","lastVisit","updateActiveVisitors","visitor","lpush","ltrim","expire","sadd","id","removeActiveVisitor","visitorId","srem","getCachedRecentVisitors","RECENT_VISITORS","recentVisitors","VISITOR_DATA","addRecentVisitor","CONVERSION_RATE","parseFloat","conversions","leadPulseTouchpoint","type","gte","Date","now","rate","rounded","Math","round","GEOGRAPHIC_DATA","countryData","groupBy","by","_count","country","map","item","lrange","RECENT_ACTIVITY","recentTouchpoints","touchpoint","reverse","addRecentActivity","getCachedVisitorJourney","VISITOR_JOURNEY","journey","updateVisitorJourney","getCachedVisitorProfile","VISITOR_PROFILE","findUnique","getCachedDailyStats","date","DAILY_STATS","startOfDay","setHours","endOfDay","visitors","firstVisit","lte","stats","DAILY_AGGREGATES","invalidateAll","keys","info","invalidateVisitorData","then","resolve","isHealthy","ping"],"mappings":"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"}