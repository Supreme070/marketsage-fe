480351c3ef9806fad1b99b6a9a63aa59
/**
 * Supreme-AI v3 React Hooks - Enhanced Local Processing
 * ====================================================
 * Supreme-AI integration with task execution capabilities
 */ 'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useSupremeAI", {
    enumerable: true,
    get: function() {
        return useSupremeAI;
    }
});
const _react = require("react");
const _reacthottoast = require("react-hot-toast");
const _react1 = require("next-auth/react");
const useSupremeAI = ()=>{
    const [messages, setMessages] = (0, _react.useState)([]);
    const [isLoading, setIsLoading] = (0, _react.useState)(false);
    const [error, setError] = (0, _react.useState)(null);
    const [currentSessionId, setCurrentSessionId] = (0, _react.useState)(null);
    const [isLoadingHistory, setIsLoadingHistory] = (0, _react.useState)(false);
    // Direct Supreme-AI processing
    const [chatSession, setChatSession] = (0, _react.useState)(null);
    const { data: session } = (0, _react1.useSession)();
    // Generate session ID and load chat history on mount
    (0, _react.useEffect)(()=>{
        if (!session?.user?.id) return;
        // Get or create session ID
        let sessionId = localStorage.getItem('chatSessionId');
        if (!sessionId) {
            sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
            localStorage.setItem('chatSessionId', sessionId);
        }
        setCurrentSessionId(sessionId);
        // Initialize Supreme-AI chat session
        const supremeSession = {
            sessionId,
            userId: session.user.id,
            messages: [],
            context: {},
            startTime: new Date(),
            lastActivity: new Date(),
            market: session.user?.market || 'NGN',
            userProfile: {
                role: session.user.role || 'USER',
                expertise: [],
                preferences: {},
                interaction_history: []
            }
        };
        setChatSession(supremeSession);
        // Load chat history
        loadChatHistory(sessionId);
    }, [
        session?.user?.id
    ]);
    // Load chat history from database
    const loadChatHistory = (0, _react.useCallback)(async (sessionId)=>{
        if (!session?.user?.id) return;
        setIsLoadingHistory(true);
        try {
            const response = await fetch(`/api/ai/chat-history?sessionId=${sessionId}&limit=50`);
            if (response.ok) {
                const data = await response.json();
                if (data.success && data.messages) {
                    const formattedMessages = data.messages.map((msg)=>({
                            id: msg.id,
                            content: msg.content,
                            role: msg.role,
                            timestamp: new Date(msg.timestamp)
                        }));
                    setMessages(formattedMessages);
                }
            }
        } catch (error) {
            console.error('Failed to load chat history:', error);
        } finally{
            setIsLoadingHistory(false);
        }
    }, [
        session?.user?.id
    ]);
    // Save message to database
    const saveMessageToDatabase = (0, _react.useCallback)(async (message, isResponse = false, context)=>{
        if (!session?.user?.id || !currentSessionId) return;
        try {
            await fetch('/api/ai/chat-history', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    sessionId: currentSessionId,
                    question: message.role === 'user' ? message.content : '',
                    answer: message.role === 'assistant' ? message.content : '',
                    context: context ? JSON.stringify(context) : null,
                    confidence: 0.95
                })
            });
        } catch (error) {
            console.error('Failed to save message to database:', error);
        }
    }, [
        session?.user?.id,
        currentSessionId
    ]);
    // Intelligent task type detection
    const detectTaskType = (0, _react.useCallback)((content)=>{
        const lowerContent = content.toLowerCase();
        // Task assignment patterns
        const taskPatterns = {
            'assign_task': [
                'assign task',
                'create task',
                'task assignment',
                'give task',
                'assign to team',
                'delegate task',
                'assign urgent',
                'create urgent task'
            ],
            'create_workflow': [
                'create workflow',
                'build workflow',
                'make workflow',
                'set up workflow',
                'workflow creation',
                'automate process'
            ],
            'create_campaign': [
                'create campaign',
                'build campaign',
                'campaign creation',
                'email campaign',
                'marketing campaign',
                'launch campaign'
            ],
            'create_segment': [
                'create segment',
                'customer segment',
                'segment customers',
                'build segment',
                'customer group'
            ],
            'generate_content': [
                'generate content',
                'create content',
                'write content',
                'content creation',
                'marketing content'
            ],
            'setup_automation': [
                'setup automation',
                'create automation',
                'build automation',
                'automate',
                'automated flow'
            ]
        };
        // Check for task patterns
        for (const [taskType, patterns] of Object.entries(taskPatterns)){
            for (const pattern of patterns){
                if (lowerContent.includes(pattern)) {
                    return {
                        type: 'task',
                        taskType
                    };
                }
            }
        }
        // Business Intelligence queries - these should trigger analysis
        const biPatterns = [
            'who is the best performing',
            'best performing',
            'top performing',
            'highest performing',
            'team performance',
            'staff performance',
            'employee performance',
            'conversion rate',
            'conversion by channel',
            'channel performance',
            'revenue breakdown',
            'revenue analysis',
            'financial performance',
            'customer acquisition cost',
            'cac',
            'acquisition metrics',
            'workflow completion',
            'workflow success',
            'automation performance',
            'how many sales',
            'how many marketing',
            'count of',
            'personnel count',
            'sales data',
            'marketing data',
            'performance metrics'
        ];
        for (const pattern of biPatterns){
            if (lowerContent.includes(pattern)) {
                return {
                    type: 'analyze'
                };
            }
        }
        // Check for other action types
        if (lowerContent.includes('analyze') || lowerContent.includes('analysis')) {
            return {
                type: 'analyze'
            };
        }
        if (lowerContent.includes('predict') || lowerContent.includes('forecast')) {
            return {
                type: 'predict'
            };
        }
        // Default to question for conversational queries
        return {
            type: 'question'
        };
    }, []);
    const sendMessage = (0, _react.useCallback)(async (content, useStreaming = true)=>{
        if (!content.trim() || !chatSession) return;
        const userMessage = {
            id: `user-${Date.now()}`,
            content: content.trim(),
            role: 'user',
            timestamp: new Date()
        };
        setMessages((prev)=>[
                ...prev,
                userMessage
            ]);
        setIsLoading(true);
        setError(null);
        try {
            // Check if user has admin privileges for task execution
            const hasAdminPrivileges = session?.user?.role === 'SUPER_ADMIN' || session?.user?.role === 'ADMIN' || session?.user?.role === 'IT_ADMIN';
            if (!session?.user) {
                throw new Error('Please log in to use AI task execution');
            }
            // Detect the appropriate task type
            const { type, taskType } = detectTaskType(content.trim());
            // Enhanced intent recognition via Supreme-AI v3 built-in intelligence
            console.log('üß† Supreme-AI v3 processing intent for:', content.trim());
            const requestBody = {
                type,
                question: content.trim(),
                userId: session.user.id,
                enableTaskExecution: hasAdminPrivileges,
                forceLocal: false
            };
            // Add taskType if it's a task request
            if (taskType) {
                requestBody.taskType = taskType;
            }
            console.log('üîç Detected task type:', {
                type,
                taskType,
                content: content.trim(),
                hasAdminPrivileges,
                userRole: session?.user?.role
            });
            // Show user feedback about task execution capabilities
            if (type === 'task' && !hasAdminPrivileges) {
                _reacthottoast.toast.error('Task execution requires ADMIN, IT_ADMIN, or SUPER_ADMIN privileges');
            }
            // Use streaming for better UX
            if (useStreaming) {
                await handleStreamingResponse(requestBody, userMessage);
            } else {
                await handleRegularResponse(requestBody, userMessage);
            }
        } catch (error) {
            console.error('Supreme-AI request failed:', error);
            const errorMessage = error instanceof Error ? error.message : 'Failed to get Supreme-AI response';
            setError(errorMessage);
            _reacthottoast.toast.error('Failed to process request - Supreme-AI error');
        } finally{
            setIsLoading(false);
        }
    }, [
        detectTaskType,
        chatSession,
        session?.user
    ]);
    const handleStreamingResponse = (0, _react.useCallback)(async (requestBody, userMessage)=>{
        const assistantMessageId = `assistant-${Date.now()}`;
        let streamingContent = '';
        // Add initial empty assistant message
        const initialAssistantMessage = {
            id: assistantMessageId,
            content: '',
            role: 'assistant',
            timestamp: new Date()
        };
        setMessages((prev)=>[
                ...prev,
                initialAssistantMessage
            ]);
        try {
            const response = await fetch('/api/ai/chat-stream', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(requestBody)
            });
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            const reader = response.body?.getReader();
            const decoder = new TextDecoder();
            if (!reader) {
                throw new Error('No response stream available');
            }
            while(true){
                const { done, value } = await reader.read();
                if (done) break;
                const chunk = decoder.decode(value);
                const lines = chunk.split('\n');
                for (const line of lines){
                    if (line.startsWith('data: ')) {
                        try {
                            const data = JSON.parse(line.slice(6));
                            switch(data.type){
                                case 'chunk':
                                    streamingContent += data.content;
                                    // Update the assistant message with streaming content
                                    setMessages((prev)=>prev.map((msg)=>msg.id === assistantMessageId ? {
                                                ...msg,
                                                content: streamingContent
                                            } : msg));
                                    break;
                                case 'complete':
                                    // Final processing
                                    const finalAssistantMessage = {
                                        id: assistantMessageId,
                                        content: streamingContent,
                                        role: 'assistant',
                                        timestamp: new Date()
                                    };
                                    // Save messages to database
                                    await saveMessageToDatabase(userMessage);
                                    await saveMessageToDatabase(finalAssistantMessage, true, {
                                        confidence: data.metadata?.confidence,
                                        processingTime: data.metadata?.processingTime,
                                        source: data.metadata?.source,
                                        taskExecution: data.metadata?.taskExecution
                                    });
                                    // Show feedback
                                    if (data.metadata?.confidence && data.metadata.confidence > 0.8) {
                                        _reacthottoast.toast.success(`üß† Supreme-AI v3 high confidence response (${(data.metadata.confidence * 100).toFixed(1)}%)`);
                                    }
                                    if (data.metadata?.taskExecution?.success) {
                                        _reacthottoast.toast.success('Task executed successfully!');
                                    }
                                    break;
                                case 'error':
                                    throw new Error(data.content);
                            }
                        } catch (parseError) {
                            console.warn('Failed to parse streaming data:', parseError);
                        }
                    }
                }
            }
        } catch (error) {
            console.error('Streaming error:', error);
            // Fall back to regular response
            await handleRegularResponse(requestBody, userMessage);
        }
    }, [
        saveMessageToDatabase
    ]);
    const handleRegularResponse = (0, _react.useCallback)(async (requestBody, userMessage)=>{
        const response = await fetch('/api/ai/supreme-v3', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(requestBody)
        });
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        const data = await response.json();
        if (!data.success) {
            throw new Error('Supreme-AI request failed');
        }
        // Update chat session with new message
        const updatedChatSession = {
            ...chatSession,
            messages: [
                ...chatSession.messages,
                userMessage
            ],
            lastActivity: new Date()
        };
        console.log('‚úÖ Supreme-AI v3 response received:', data.data.answer);
        const assistantMessage = {
            id: `assistant-${Date.now()}`,
            content: data.data.answer,
            role: 'assistant',
            timestamp: new Date()
        };
        setMessages((prev)=>[
                ...prev,
                assistantMessage
            ]);
        // Update chat session
        setChatSession({
            ...updatedChatSession,
            messages: [
                ...updatedChatSession.messages,
                assistantMessage
            ]
        });
        // Save user and assistant messages to database
        await saveMessageToDatabase(userMessage);
        await saveMessageToDatabase(assistantMessage, true, {
            confidence: data.confidence,
            processingTime: data.processingTime,
            source: data.data.source,
            taskExecution: data.data.taskExecution
        });
        // Show Supreme-AI feedback
        if (data.confidence && data.confidence > 0.8) {
            _reacthottoast.toast.success(`üß† Supreme-AI v3 high confidence response (${(data.confidence * 100).toFixed(1)}%)`);
        }
        // Show task execution feedback if available
        if (data.data.taskExecution) {
            console.log('‚úÖ Task execution result:', data.data.taskExecution);
            if (data.data.taskExecution.success) {
                _reacthottoast.toast.success('Task executed successfully!');
            }
        }
        // Show recommendations if available from Supreme-AI
        if (data.data.recommendations && data.data.recommendations.length > 0) {
            setTimeout(()=>{
                _reacthottoast.toast.success(`üéØ ${data.data.recommendations.length} AI recommendations available`);
            }, 2000);
        }
    }, [
        chatSession,
        saveMessageToDatabase
    ]);
    const clearMessages = (0, _react.useCallback)(async ()=>{
        if (!currentSessionId) return;
        try {
            // Clear from database
            const response = await fetch(`/api/ai/chat-history?sessionId=${currentSessionId}`, {
                method: 'DELETE'
            });
            if (response.ok) {
                // Clear local state
                setMessages([]);
                setError(null);
                _reacthottoast.toast.success('Chat history cleared');
            }
        } catch (error) {
            console.error('Failed to clear chat history:', error);
            _reacthottoast.toast.error('Failed to clear chat history');
        }
    }, [
        currentSessionId
    ]);
    const startNewSession = (0, _react.useCallback)(()=>{
        // Generate new session ID
        const sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        localStorage.setItem('chatSessionId', sessionId);
        setCurrentSessionId(sessionId);
        // Initialize new Supreme-AI chat session
        if (session?.user) {
            const supremeSession = {
                sessionId,
                userId: session.user.id,
                messages: [],
                context: {},
                startTime: new Date(),
                lastActivity: new Date(),
                market: session.user?.market || 'NGN',
                userProfile: {
                    role: session.user.role || 'USER',
                    expertise: [],
                    preferences: {},
                    interaction_history: []
                }
            };
            setChatSession(supremeSession);
        }
        // Clear current messages
        setMessages([]);
        setError(null);
        _reacthottoast.toast.success('üß† New Supreme-AI chat session started');
    }, [
        session?.user
    ]);
    return {
        messages,
        isLoading,
        isLoadingHistory,
        error,
        sendMessage,
        clearMessages,
        startNewSession,
        currentSessionId,
        chatSession
    };
};

//# sourceMappingURL=data:application/json;base64,