{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/hooks/useSupremeAI.ts"],"sourcesContent":["/**\n * Supreme-AI v3 React Hooks - Enhanced Local Processing\n * ====================================================\n * Supreme-AI integration with task execution capabilities\n */\n\n'use client';\n\nimport { useState, useCallback, useEffect } from 'react';\nimport { toast } from 'react-hot-toast';\nimport { useSession } from 'next-auth/react';\n// Using Supreme-AI v3 directly\n\ninterface ChatMessage {\n  id: string;\n  content: string;\n  role: 'user' | 'assistant';\n  timestamp: Date;\n  // Using Supreme-AI v3 direct processing\n}\n\ninterface SupremeAIResponse {\n  success: boolean;\n  data: {\n    answer: string;\n    source?: string;\n    model?: string;\n    taskExecution?: any;\n  };\n  confidence?: number;\n  mode?: string;\n  processingTime?: number;\n  meta?: {\n    processingTime: number;\n    version: string;\n    timestamp: string;\n    requestId: string;\n  };\n}\n\nexport const useSupremeAI = () => {\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [currentSessionId, setCurrentSessionId] = useState<string | null>(null);\n  const [isLoadingHistory, setIsLoadingHistory] = useState(false);\n  // Direct Supreme-AI processing\n  const [chatSession, setChatSession] = useState<any>(null);\n  const { data: session } = useSession();\n\n  // Generate session ID and load chat history on mount\n  useEffect(() => {\n    if (!session?.user?.id) return;\n\n    // Get or create session ID\n    let sessionId = localStorage.getItem('chatSessionId');\n    if (!sessionId) {\n      sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      localStorage.setItem('chatSessionId', sessionId);\n    }\n    setCurrentSessionId(sessionId);\n\n    // Initialize Supreme-AI chat session\n    const supremeSession = {\n      sessionId,\n      userId: session.user.id,\n      messages: [],\n      context: {},\n      startTime: new Date(),\n      lastActivity: new Date(),\n      market: (session.user as any)?.market || 'NGN',\n      userProfile: {\n        role: session.user.role || 'USER',\n        expertise: [],\n        preferences: {},\n        interaction_history: []\n      }\n    };\n    setChatSession(supremeSession);\n\n    // Load chat history\n    loadChatHistory(sessionId);\n  }, [session?.user?.id]);\n\n  // Load chat history from database\n  const loadChatHistory = useCallback(async (sessionId: string) => {\n    if (!session?.user?.id) return;\n\n    setIsLoadingHistory(true);\n    try {\n      const response = await fetch(`/api/ai/chat-history?sessionId=${sessionId}&limit=50`);\n      if (response.ok) {\n        const data = await response.json();\n        if (data.success && data.messages) {\n          const formattedMessages = data.messages.map((msg: any) => ({\n            id: msg.id,\n            content: msg.content,\n            role: msg.role,\n            timestamp: new Date(msg.timestamp)\n          }));\n          setMessages(formattedMessages);\n        }\n      }\n    } catch (error) {\n      console.error('Failed to load chat history:', error);\n    } finally {\n      setIsLoadingHistory(false);\n    }\n  }, [session?.user?.id]);\n\n  // Save message to database\n  const saveMessageToDatabase = useCallback(async (message: ChatMessage, isResponse = false, context?: any) => {\n    if (!session?.user?.id || !currentSessionId) return;\n\n    try {\n      await fetch('/api/ai/chat-history', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          sessionId: currentSessionId,\n          question: message.role === 'user' ? message.content : '',\n          answer: message.role === 'assistant' ? message.content : '',\n          context: context ? JSON.stringify(context) : null,\n          confidence: 0.95\n        })\n      });\n    } catch (error) {\n      console.error('Failed to save message to database:', error);\n    }\n  }, [session?.user?.id, currentSessionId]);\n\n  // Intelligent task type detection\n  const detectTaskType = useCallback((content: string): { type: string; taskType?: string } => {\n    const lowerContent = content.toLowerCase();\n    \n    // Task assignment patterns\n    const taskPatterns = {\n      'assign_task': ['assign task', 'create task', 'task assignment', 'give task', 'assign to team', 'delegate task', 'assign urgent', 'create urgent task'],\n      'create_workflow': ['create workflow', 'build workflow', 'make workflow', 'set up workflow', 'workflow creation', 'automate process'],\n      'create_campaign': ['create campaign', 'build campaign', 'campaign creation', 'email campaign', 'marketing campaign', 'launch campaign'],\n      'create_segment': ['create segment', 'customer segment', 'segment customers', 'build segment', 'customer group'],\n      'generate_content': ['generate content', 'create content', 'write content', 'content creation', 'marketing content'],\n      'setup_automation': ['setup automation', 'create automation', 'build automation', 'automate', 'automated flow']\n    };\n    \n    // Check for task patterns\n    for (const [taskType, patterns] of Object.entries(taskPatterns)) {\n      for (const pattern of patterns) {\n        if (lowerContent.includes(pattern)) {\n          return { type: 'task', taskType };\n        }\n      }\n    }\n    \n    // Business Intelligence queries - these should trigger analysis\n    const biPatterns = [\n      'who is the best performing', 'best performing', 'top performing', 'highest performing',\n      'team performance', 'staff performance', 'employee performance',\n      'conversion rate', 'conversion by channel', 'channel performance',\n      'revenue breakdown', 'revenue analysis', 'financial performance',\n      'customer acquisition cost', 'cac', 'acquisition metrics',\n      'workflow completion', 'workflow success', 'automation performance',\n      'how many sales', 'how many marketing', 'count of', 'personnel count',\n      'sales data', 'marketing data', 'performance metrics'\n    ];\n    \n    for (const pattern of biPatterns) {\n      if (lowerContent.includes(pattern)) {\n        return { type: 'analyze' };\n      }\n    }\n    \n    // Check for other action types\n    if (lowerContent.includes('analyze') || lowerContent.includes('analysis')) {\n      return { type: 'analyze' };\n    }\n    \n    if (lowerContent.includes('predict') || lowerContent.includes('forecast')) {\n      return { type: 'predict' };\n    }\n    \n    // Default to question for conversational queries\n    return { type: 'question' };\n  }, []);\n\n  const sendMessage = useCallback(async (content: string, useStreaming = true) => {\n    if (!content.trim() || !chatSession) return;\n\n    const userMessage: ChatMessage = {\n      id: `user-${Date.now()}`,\n      content: content.trim(),\n      role: 'user',\n      timestamp: new Date(),\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      // Check if user has admin privileges for task execution\n      const hasAdminPrivileges = session?.user?.role === 'SUPER_ADMIN' || session?.user?.role === 'ADMIN' || session?.user?.role === 'IT_ADMIN';\n      \n      if (!session?.user) {\n        throw new Error('Please log in to use AI task execution');\n      }\n      \n      // Detect the appropriate task type\n      const { type, taskType } = detectTaskType(content.trim());\n      \n      // Enhanced intent recognition via Supreme-AI v3 built-in intelligence\n      console.log('🧠 Supreme-AI v3 processing intent for:', content.trim());\n      \n      const requestBody: any = {\n        type,\n        question: content.trim(),\n        userId: session.user.id,\n        enableTaskExecution: hasAdminPrivileges,\n        forceLocal: false\n      };\n      \n      // Add taskType if it's a task request\n      if (taskType) {\n        requestBody.taskType = taskType;\n      }\n      \n      console.log('🔍 Detected task type:', { type, taskType, content: content.trim(), hasAdminPrivileges, userRole: session?.user?.role });\n      \n      // Show user feedback about task execution capabilities\n      if (type === 'task' && !hasAdminPrivileges) {\n        toast.error('Task execution requires ADMIN, IT_ADMIN, or SUPER_ADMIN privileges');\n      }\n\n      // Use streaming for better UX\n      if (useStreaming) {\n        await handleStreamingResponse(requestBody, userMessage);\n      } else {\n        await handleRegularResponse(requestBody, userMessage);\n      }\n\n    } catch (error) {\n      console.error('Supreme-AI request failed:', error);\n      const errorMessage = error instanceof Error ? error.message : 'Failed to get Supreme-AI response';\n      setError(errorMessage);\n      toast.error('Failed to process request - Supreme-AI error');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [detectTaskType, chatSession, session?.user]);\n\n  const handleStreamingResponse = useCallback(async (requestBody: any, userMessage: ChatMessage) => {\n    const assistantMessageId = `assistant-${Date.now()}`;\n    let streamingContent = '';\n\n    // Add initial empty assistant message\n    const initialAssistantMessage: ChatMessage = {\n      id: assistantMessageId,\n      content: '',\n      role: 'assistant',\n      timestamp: new Date()\n    };\n\n    setMessages(prev => [...prev, initialAssistantMessage]);\n\n    try {\n      const response = await fetch('/api/ai/chat-stream', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(requestBody),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const reader = response.body?.getReader();\n      const decoder = new TextDecoder();\n\n      if (!reader) {\n        throw new Error('No response stream available');\n      }\n\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) break;\n\n        const chunk = decoder.decode(value);\n        const lines = chunk.split('\\n');\n\n        for (const line of lines) {\n          if (line.startsWith('data: ')) {\n            try {\n              const data = JSON.parse(line.slice(6));\n              \n              switch (data.type) {\n                case 'chunk':\n                  streamingContent += data.content;\n                  // Update the assistant message with streaming content\n                  setMessages(prev => prev.map(msg => \n                    msg.id === assistantMessageId \n                      ? { ...msg, content: streamingContent }\n                      : msg\n                  ));\n                  break;\n                \n                case 'complete':\n                  // Final processing\n                  const finalAssistantMessage: ChatMessage = {\n                    id: assistantMessageId,\n                    content: streamingContent,\n                    role: 'assistant',\n                    timestamp: new Date()\n                  };\n\n                  // Save messages to database\n                  await saveMessageToDatabase(userMessage);\n                  await saveMessageToDatabase(finalAssistantMessage, true, {\n                    confidence: data.metadata?.confidence,\n                    processingTime: data.metadata?.processingTime,\n                    source: data.metadata?.source,\n                    taskExecution: data.metadata?.taskExecution\n                  });\n\n                  // Show feedback\n                  if (data.metadata?.confidence && data.metadata.confidence > 0.8) {\n                    toast.success(`🧠 Supreme-AI v3 high confidence response (${(data.metadata.confidence * 100).toFixed(1)}%)`);\n                  }\n\n                  if (data.metadata?.taskExecution?.success) {\n                    toast.success('Task executed successfully!');\n                  }\n                  break;\n\n                case 'error':\n                  throw new Error(data.content);\n              }\n            } catch (parseError) {\n              console.warn('Failed to parse streaming data:', parseError);\n            }\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Streaming error:', error);\n      // Fall back to regular response\n      await handleRegularResponse(requestBody, userMessage);\n    }\n  }, [saveMessageToDatabase]);\n\n  const handleRegularResponse = useCallback(async (requestBody: any, userMessage: ChatMessage) => {\n    const response = await fetch('/api/ai/supreme-v3', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(requestBody),\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n\n    const data: SupremeAIResponse = await response.json();\n\n    if (!data.success) {\n      throw new Error('Supreme-AI request failed');\n    }\n\n    // Update chat session with new message\n    const updatedChatSession = {\n      ...chatSession,\n      messages: [...chatSession.messages, userMessage],\n      lastActivity: new Date()\n    };\n    \n    console.log('✅ Supreme-AI v3 response received:', data.data.answer);\n    \n    const assistantMessage: ChatMessage = {\n      id: `assistant-${Date.now()}`,\n      content: data.data.answer,\n      role: 'assistant',\n      timestamp: new Date()\n    };\n\n    setMessages(prev => [...prev, assistantMessage]);\n    \n    // Update chat session\n    setChatSession({\n      ...updatedChatSession,\n      messages: [...updatedChatSession.messages, assistantMessage]\n    });\n\n    // Save user and assistant messages to database\n    await saveMessageToDatabase(userMessage);\n    await saveMessageToDatabase(assistantMessage, true, {\n      confidence: data.confidence,\n      processingTime: data.processingTime,\n      source: data.data.source,\n      taskExecution: data.data.taskExecution\n    });\n    \n    // Show Supreme-AI feedback\n    if (data.confidence && data.confidence > 0.8) {\n      toast.success(`🧠 Supreme-AI v3 high confidence response (${(data.confidence * 100).toFixed(1)}%)`);\n    }\n    \n    // Show task execution feedback if available\n    if (data.data.taskExecution) {\n      console.log('✅ Task execution result:', data.data.taskExecution);\n      if (data.data.taskExecution.success) {\n        toast.success('Task executed successfully!');\n      }\n    }\n    \n    // Show recommendations if available from Supreme-AI\n    if (data.data.recommendations && data.data.recommendations.length > 0) {\n      setTimeout(() => {\n        toast.success(`🎯 ${data.data.recommendations.length} AI recommendations available`);\n      }, 2000);\n    }\n  }, [chatSession, saveMessageToDatabase]);\n\n  const clearMessages = useCallback(async () => {\n    if (!currentSessionId) return;\n\n    try {\n      // Clear from database\n      const response = await fetch(`/api/ai/chat-history?sessionId=${currentSessionId}`, {\n        method: 'DELETE'\n      });\n      \n      if (response.ok) {\n        // Clear local state\n        setMessages([]);\n        setError(null);\n        toast.success('Chat history cleared');\n      }\n    } catch (error) {\n      console.error('Failed to clear chat history:', error);\n      toast.error('Failed to clear chat history');\n    }\n  }, [currentSessionId]);\n\n  const startNewSession = useCallback(() => {\n    // Generate new session ID\n    const sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    localStorage.setItem('chatSessionId', sessionId);\n    setCurrentSessionId(sessionId);\n    \n    // Initialize new Supreme-AI chat session\n    if (session?.user) {\n      const supremeSession = {\n        sessionId,\n        userId: session.user.id,\n        messages: [],\n        context: {},\n        startTime: new Date(),\n        lastActivity: new Date(),\n        market: (session.user as any)?.market || 'NGN',\n        userProfile: {\n          role: session.user.role || 'USER',\n          expertise: [],\n          preferences: {},\n          interaction_history: []\n        }\n      };\n      setChatSession(supremeSession);\n    }\n    \n    // Clear current messages\n    setMessages([]);\n    setError(null);\n    \n    toast.success('🧠 New Supreme-AI chat session started');\n  }, [session?.user]);\n\n  return {\n    messages,\n    isLoading,\n    isLoadingHistory,\n    error,\n    sendMessage,\n    clearMessages,\n    startNewSession,\n    currentSessionId,\n    chatSession\n  };\n}; "],"names":["useSupremeAI","messages","setMessages","useState","isLoading","setIsLoading","error","setError","currentSessionId","setCurrentSessionId","isLoadingHistory","setIsLoadingHistory","chatSession","setChatSession","data","session","useSession","useEffect","user","id","sessionId","localStorage","getItem","Date","now","Math","random","toString","substr","setItem","supremeSession","userId","context","startTime","lastActivity","market","userProfile","role","expertise","preferences","interaction_history","loadChatHistory","useCallback","response","fetch","ok","json","success","formattedMessages","map","msg","content","timestamp","console","saveMessageToDatabase","message","isResponse","method","headers","body","JSON","stringify","question","answer","confidence","detectTaskType","lowerContent","toLowerCase","taskPatterns","taskType","patterns","Object","entries","pattern","includes","type","biPatterns","sendMessage","useStreaming","trim","userMessage","prev","hasAdminPrivileges","Error","log","requestBody","enableTaskExecution","forceLocal","userRole","toast","handleStreamingResponse","handleRegularResponse","errorMessage","assistantMessageId","streamingContent","initialAssistantMessage","status","statusText","reader","getReader","decoder","TextDecoder","done","value","read","chunk","decode","lines","split","line","startsWith","parse","slice","finalAssistantMessage","metadata","processingTime","source","taskExecution","toFixed","parseError","warn","updatedChatSession","assistantMessage","recommendations","length","setTimeout","clearMessages","startNewSession"],"mappings":"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"}