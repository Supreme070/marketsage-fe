{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/lib/monitoring/advanced-monitoring-orchestrator.ts"],"sourcesContent":["/**\n * Advanced Monitoring and Alerting Orchestrator\n * =============================================\n * AI-powered orchestration layer that connects all existing monitoring systems\n * Provides intelligent alerting, predictive monitoring, and autonomous remediation\n */\n\nimport { logger } from '@/lib/logger';\nimport { trace } from '@opentelemetry/api';\nimport { EventEmitter } from 'events';\nimport { securityMonitor } from '@/lib/security/security-monitor';\nimport { performanceAnalytics } from '@/lib/monitoring/performance-analytics';\nimport { alertingSystem } from '@/lib/leadpulse/integrations/alerting-system';\nimport { taskExecutionMonitor } from '@/lib/ai/task-execution-monitor';\nimport { predictiveInfrastructureManager } from '@/lib/infrastructure/predictive-infrastructure-manager';\nimport { autonomousAttributionEngine } from '@/lib/attribution/autonomous-attribution-engine';\nimport { multiAgentCoordinator } from '@/lib/ai/multi-agent-coordinator';\nimport { strategicDecisionEngine } from '@/lib/ai/strategic-decision-engine';\n\nexport interface MonitoringRule {\n  id: string;\n  name: string;\n  description: string;\n  type: 'threshold' | 'anomaly' | 'pattern' | 'correlation' | 'predictive';\n  enabled: boolean;\n  severity: 'critical' | 'high' | 'medium' | 'low' | 'info';\n  conditions: MonitoringCondition[];\n  actions: MonitoringAction[];\n  cooldownPeriod: number; // minutes\n  lastTriggered?: Date;\n  triggerCount: number;\n  created: Date;\n  updatedAt: Date;\n}\n\nexport interface MonitoringCondition {\n  metric: string;\n  operator: 'gt' | 'lt' | 'eq' | 'neq' | 'contains' | 'regex' | 'anomaly' | 'trend';\n  value: number | string;\n  window: number; // minutes\n  threshold?: number; // for anomaly detection\n}\n\nexport interface MonitoringAction {\n  type: 'alert' | 'auto_scale' | 'restart_service' | 'run_healing' | 'notify_agent' | 'escalate';\n  config: {\n    channels?: string[]; // alert channels\n    message?: string;\n    severity?: string;\n    autoRemediation?: boolean;\n    agentCapabilities?: string[];\n    escalationPath?: string[];\n  };\n}\n\nexport interface SystemHealthMetrics {\n  timestamp: Date;\n  overall: {\n    status: 'healthy' | 'warning' | 'critical' | 'down';\n    score: number; // 0-100\n    uptime: number; // seconds\n  };\n  components: {\n    infrastructure: ComponentHealth;\n    application: ComponentHealth;\n    database: ComponentHealth;\n    cache: ComponentHealth;\n    ai: ComponentHealth;\n    security: ComponentHealth;\n    attribution: ComponentHealth;\n    monitoring: ComponentHealth;\n  };\n  predictions: {\n    nextHour: HealthPrediction;\n    next6Hours: HealthPrediction;\n    next24Hours: HealthPrediction;\n  };\n  recommendations: string[];\n  activeAlerts: ActiveAlert[];\n}\n\nexport interface ComponentHealth {\n  status: 'healthy' | 'warning' | 'critical' | 'down';\n  score: number; // 0-100\n  metrics: Record<string, number>;\n  lastCheck: Date;\n  issues: string[];\n  recommendations: string[];\n}\n\nexport interface HealthPrediction {\n  status: 'healthy' | 'warning' | 'critical';\n  confidence: number; // 0-1\n  factors: string[];\n  mitigations: string[];\n}\n\nexport interface ActiveAlert {\n  id: string;\n  rule: string;\n  severity: string;\n  message: string;\n  component: string;\n  triggeredAt: Date;\n  acknowledgedAt?: Date;\n  acknowledgedBy?: string;\n  resolvedAt?: Date;\n  escalated: boolean;\n  actions: string[];\n}\n\nexport interface MonitoringInsight {\n  id: string;\n  type: 'performance_trend' | 'capacity_warning' | 'security_pattern' | 'cost_optimization' | 'reliability_issue';\n  confidence: number; // 0-1\n  impact: 'low' | 'medium' | 'high' | 'critical';\n  message: string;\n  details: Record<string, any>;\n  recommendations: string[];\n  autoFixAvailable: boolean;\n  estimatedResolution: string;\n  createdAt: Date;\n}\n\nclass AdvancedMonitoringOrchestrator extends EventEmitter {\n  private rules: Map<string, MonitoringRule> = new Map();\n  private activeAlerts: Map<string, ActiveAlert> = new Map();\n  private insights: MonitoringInsight[] = [];\n  private healthHistory: SystemHealthMetrics[] = [];\n  private monitoringInterval: NodeJS.Timeout | null = null;\n  private ruleEvaluationInterval: NodeJS.Timeout | null = null;\n\n  constructor() {\n    super();\n    this.initializeOrchestrator();\n  }\n\n  /**\n   * Initialize the monitoring orchestrator\n   */\n  private async initializeOrchestrator() {\n    try {\n      logger.info('Initializing advanced monitoring orchestrator...');\n\n      // Load default monitoring rules\n      this.loadDefaultRules();\n\n      // Connect to existing monitoring systems\n      this.connectToMonitoringSystems();\n\n      // Start monitoring loops\n      this.startMonitoringLoop();\n      this.startRuleEvaluation();\n      this.startInsightGeneration();\n\n      logger.info('Advanced monitoring orchestrator initialized successfully');\n\n    } catch (error) {\n      logger.error('Failed to initialize monitoring orchestrator', {\n        error: error instanceof Error ? error.message : String(error)\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Load default monitoring rules\n   */\n  private loadDefaultRules() {\n    const defaultRules: Partial<MonitoringRule>[] = [\n      {\n        name: 'High Error Rate',\n        description: 'Alert when application error rate exceeds 5%',\n        type: 'threshold',\n        severity: 'high',\n        conditions: [{\n          metric: 'application.errorRate',\n          operator: 'gt',\n          value: 5,\n          window: 5\n        }],\n        actions: [{\n          type: 'alert',\n          config: {\n            channels: ['slack', 'email'],\n            message: 'Application error rate is above 5%',\n            severity: 'high'\n          }\n        }, {\n          type: 'notify_agent',\n          config: {\n            agentCapabilities: ['integration', 'execution'],\n            message: 'Investigate high error rate'\n          }\n        }],\n        cooldownPeriod: 15\n      },\n      {\n        name: 'Database Performance Degradation',\n        description: 'Alert when database response time exceeds 2 seconds',\n        type: 'threshold',\n        severity: 'critical',\n        conditions: [{\n          metric: 'database.responseTime',\n          operator: 'gt',\n          value: 2000,\n          window: 3\n        }],\n        actions: [{\n          type: 'alert',\n          config: {\n            channels: ['slack', 'email', 'sms'],\n            message: 'Database response time critical',\n            severity: 'critical'\n          }\n        }, {\n          type: 'auto_scale',\n          config: {\n            autoRemediation: true\n          }\n        }],\n        cooldownPeriod: 10\n      },\n      {\n        name: 'Security Anomaly Detection',\n        description: 'Alert on unusual security patterns',\n        type: 'anomaly',\n        severity: 'high',\n        conditions: [{\n          metric: 'security.anomalyScore',\n          operator: 'anomaly',\n          value: 0.8,\n          window: 10,\n          threshold: 0.7\n        }],\n        actions: [{\n          type: 'alert',\n          config: {\n            channels: ['slack', 'email'],\n            message: 'Security anomaly detected',\n            severity: 'high'\n          }\n        }, {\n          type: 'escalate',\n          config: {\n            escalationPath: ['security_team', 'admin']\n          }\n        }],\n        cooldownPeriod: 30\n      },\n      {\n        name: 'AI Task Execution Failures',\n        description: 'Alert when AI task failure rate exceeds 10%',\n        type: 'threshold',\n        severity: 'medium',\n        conditions: [{\n          metric: 'ai.taskFailureRate',\n          operator: 'gt',\n          value: 10,\n          window: 15\n        }],\n        actions: [{\n          type: 'alert',\n          config: {\n            channels: ['slack'],\n            message: 'AI task failure rate elevated',\n            severity: 'medium'\n          }\n        }, {\n          type: 'run_healing',\n          config: {\n            autoRemediation: true\n          }\n        }],\n        cooldownPeriod: 20\n      },\n      {\n        name: 'Attribution Analysis Stale',\n        description: 'Alert when attribution analysis is outdated',\n        type: 'pattern',\n        severity: 'low',\n        conditions: [{\n          metric: 'attribution.lastAnalysis',\n          operator: 'gt',\n          value: 60,\n          window: 5\n        }],\n        actions: [{\n          type: 'notify_agent',\n          config: {\n            agentCapabilities: ['analytics'],\n            message: 'Trigger attribution analysis'\n          }\n        }],\n        cooldownPeriod: 60\n      }\n    ];\n\n    defaultRules.forEach(ruleData => {\n      const rule: MonitoringRule = {\n        id: `rule_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        enabled: true,\n        triggerCount: 0,\n        created: new Date(),\n        updatedAt: new Date(),\n        ...ruleData\n      } as MonitoringRule;\n\n      this.rules.set(rule.id, rule);\n    });\n\n    logger.info('Loaded default monitoring rules', {\n      rulesCount: this.rules.size\n    });\n  }\n\n  /**\n   * Connect to existing monitoring systems\n   */\n  private connectToMonitoringSystems() {\n    // Listen to security monitor events\n    securityMonitor.on('securityEvent', (event) => {\n      this.handleSecurityEvent(event);\n    });\n\n    securityMonitor.on('anomalyDetected', (anomaly) => {\n      this.handleSecurityAnomaly(anomaly);\n    });\n\n    // Listen to infrastructure events\n    predictiveInfrastructureManager.on('monitoring_cycle_complete', (data) => {\n      this.handleInfrastructureUpdate(data);\n    });\n\n    predictiveInfrastructureManager.on('scaling_completed', (data) => {\n      this.handleScalingEvent(data);\n    });\n\n    predictiveInfrastructureManager.on('resource_status_changed', (data) => {\n      this.handleResourceStatusChange(data);\n    });\n\n    // Listen to attribution engine events\n    autonomousAttributionEngine.on('analysis_complete', (data) => {\n      this.handleAttributionAnalysis(data);\n    });\n\n    autonomousAttributionEngine.on('action_executed', (data) => {\n      this.handleAutonomousAction(data);\n    });\n\n    // Listen to multi-agent events\n    multiAgentCoordinator.on('collaboration_completed', (data) => {\n      this.handleAgentCollaboration(data);\n    });\n\n    multiAgentCoordinator.on('agentOffline', (agent) => {\n      this.handleAgentStatusChange(agent, 'offline');\n    });\n\n    logger.info('Connected to existing monitoring systems');\n  }\n\n  /**\n   * Start main monitoring loop\n   */\n  private startMonitoringLoop() {\n    this.monitoringInterval = setInterval(async () => {\n      await this.collectSystemHealth();\n    }, 30000); // Every 30 seconds\n\n    logger.info('Monitoring loop started');\n  }\n\n  /**\n   * Start rule evaluation loop\n   */\n  private startRuleEvaluation() {\n    this.ruleEvaluationInterval = setInterval(async () => {\n      await this.evaluateMonitoringRules();\n    }, 60000); // Every minute\n\n    logger.info('Rule evaluation loop started');\n  }\n\n  /**\n   * Start insight generation\n   */\n  private startInsightGeneration() {\n    setInterval(async () => {\n      await this.generateMonitoringInsights();\n    }, 300000); // Every 5 minutes\n\n    logger.info('Insight generation started');\n  }\n\n  /**\n   * Collect comprehensive system health metrics\n   */\n  private async collectSystemHealth(): Promise<SystemHealthMetrics> {\n    const tracer = trace.getTracer('monitoring-orchestrator');\n    \n    return tracer.startActiveSpan('collect-system-health', async (span) => {\n      try {\n        const timestamp = new Date();\n\n        // Collect metrics from all systems\n        const [\n          infrastructureHealth,\n          securityHealth,\n          aiHealth,\n          attributionHealth\n        ] = await Promise.all([\n          this.getInfrastructureHealth(),\n          this.getSecurityHealth(),\n          this.getAIHealth(),\n          this.getAttributionHealth()\n        ]);\n\n        // Calculate overall health\n        const componentScores = [\n          infrastructureHealth.score,\n          securityHealth.score,\n          aiHealth.score,\n          attributionHealth.score\n        ];\n        \n        const overallScore = componentScores.reduce((sum, score) => sum + score, 0) / componentScores.length;\n        const overallStatus = this.calculateHealthStatus(overallScore);\n\n        const healthMetrics: SystemHealthMetrics = {\n          timestamp,\n          overall: {\n            status: overallStatus,\n            score: overallScore,\n            uptime: process.uptime()\n          },\n          components: {\n            infrastructure: infrastructureHealth,\n            application: this.getApplicationHealth(),\n            database: this.getDatabaseHealth(),\n            cache: this.getCacheHealth(),\n            ai: aiHealth,\n            security: securityHealth,\n            attribution: attributionHealth,\n            monitoring: this.getMonitoringHealth()\n          },\n          predictions: {\n            nextHour: await this.predictHealth(1),\n            next6Hours: await this.predictHealth(6),\n            next24Hours: await this.predictHealth(24)\n          },\n          recommendations: this.generateHealthRecommendations(overallScore),\n          activeAlerts: Array.from(this.activeAlerts.values())\n        };\n\n        // Store health history\n        this.healthHistory.push(healthMetrics);\n        \n        // Keep only last 24 hours of history\n        const cutoff = new Date(Date.now() - 24 * 60 * 60 * 1000);\n        this.healthHistory = this.healthHistory.filter(h => h.timestamp > cutoff);\n\n        // Emit health update event\n        this.emit('health_update', healthMetrics);\n\n        return healthMetrics;\n\n      } catch (error) {\n        span.setStatus({ code: 2, message: String(error) });\n        logger.error('Failed to collect system health', {\n          error: error instanceof Error ? error.message : String(error)\n        });\n        throw error;\n      } finally {\n        span.end();\n      }\n    });\n  }\n\n  /**\n   * Evaluate monitoring rules and trigger actions\n   */\n  private async evaluateMonitoringRules() {\n    const currentMetrics = await this.getCurrentMetrics();\n    \n    for (const rule of this.rules.values()) {\n      if (!rule.enabled) continue;\n\n      // Check cooldown period\n      if (rule.lastTriggered) {\n        const timeSinceTrigger = Date.now() - rule.lastTriggered.getTime();\n        if (timeSinceTrigger < rule.cooldownPeriod * 60 * 1000) {\n          continue;\n        }\n      }\n\n      try {\n        const shouldTrigger = await this.evaluateRule(rule, currentMetrics);\n        \n        if (shouldTrigger) {\n          await this.triggerRule(rule);\n        }\n      } catch (error) {\n        logger.error('Rule evaluation failed', {\n          ruleId: rule.id,\n          error: error instanceof Error ? error.message : String(error)\n        });\n      }\n    }\n  }\n\n  /**\n   * Generate intelligent monitoring insights\n   */\n  private async generateMonitoringInsights() {\n    try {\n      const insights: MonitoringInsight[] = [];\n\n      // Analyze performance trends\n      const performanceTrends = this.analyzePerformanceTrends();\n      insights.push(...performanceTrends);\n\n      // Capacity planning insights\n      const capacityInsights = await this.generateCapacityInsights();\n      insights.push(...capacityInsights);\n\n      // Security pattern analysis\n      const securityInsights = this.analyzeSecurityPatterns();\n      insights.push(...securityInsights);\n\n      // Cost optimization opportunities\n      const costInsights = await this.identifyCostOptimizations();\n      insights.push(...costInsights);\n\n      // Reliability improvements\n      const reliabilityInsights = this.analyzeReliabilityPatterns();\n      insights.push(...reliabilityInsights);\n\n      // Store insights\n      this.insights.push(...insights);\n      \n      // Keep only last 7 days of insights\n      const cutoff = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);\n      this.insights = this.insights.filter(i => i.createdAt > cutoff);\n\n      // Emit insights\n      if (insights.length > 0) {\n        this.emit('insights_generated', insights);\n      }\n\n      logger.info('Generated monitoring insights', {\n        newInsights: insights.length,\n        totalInsights: this.insights.length\n      });\n\n    } catch (error) {\n      logger.error('Insight generation failed', {\n        error: error instanceof Error ? error.message : String(error)\n      });\n    }\n  }\n\n  /**\n   * Handle security events from security monitor\n   */\n  private handleSecurityEvent(event: any) {\n    logger.info('Processing security event', {\n      type: event.type,\n      severity: event.severity\n    });\n\n    // Check if this triggers any rules\n    this.checkRulesForMetric('security.event', event);\n  }\n\n  /**\n   * Handle security anomalies\n   */\n  private handleSecurityAnomaly(anomaly: any) {\n    logger.warn('Security anomaly detected', {\n      score: anomaly.score,\n      patterns: anomaly.patterns\n    });\n\n    // Update security metrics for rule evaluation\n    this.updateMetric('security.anomalyScore', anomaly.score);\n  }\n\n  /**\n   * Handle infrastructure updates\n   */\n  private handleInfrastructureUpdate(data: any) {\n    this.updateMetric('infrastructure.healthyResources', data.healthyResources);\n    this.updateMetric('infrastructure.resourceCount', data.resourceCount);\n  }\n\n  /**\n   * Handle scaling events\n   */\n  private handleScalingEvent(data: any) {\n    logger.info('Infrastructure scaling completed', {\n      resourceId: data.resourceId,\n      action: data.scalingEvent.action\n    });\n\n    // Update infrastructure metrics\n    this.updateMetric('infrastructure.scalingEvents', 1);\n  }\n\n  /**\n   * Handle resource status changes\n   */\n  private handleResourceStatusChange(data: any) {\n    if (data.newStatus === 'critical') {\n      this.updateMetric('infrastructure.criticalResources', 1);\n    }\n  }\n\n  /**\n   * Handle attribution analysis completion\n   */\n  private handleAttributionAnalysis(data: any) {\n    this.updateMetric('attribution.lastAnalysis', 0); // Reset age\n    this.updateMetric('attribution.insightCount', data.insightCount);\n  }\n\n  /**\n   * Handle autonomous actions\n   */\n  private handleAutonomousAction(data: any) {\n    logger.info('Autonomous action executed', {\n      actionId: data.actionId,\n      success: data.success\n    });\n\n    if (!data.success) {\n      this.updateMetric('ai.autonomousActionFailures', 1);\n    }\n  }\n\n  /**\n   * Handle agent collaboration events\n   */\n  private handleAgentCollaboration(data: any) {\n    this.updateMetric('ai.collaborations', 1);\n  }\n\n  /**\n   * Handle agent status changes\n   */\n  private handleAgentStatusChange(agent: any, status: string) {\n    if (status === 'offline') {\n      this.updateMetric('ai.offlineAgents', 1);\n    }\n  }\n\n  // Health collection methods\n  private async getInfrastructureHealth(): Promise<ComponentHealth> {\n    try {\n      const status = await predictiveInfrastructureManager.getInfrastructureStatus();\n      const healthyCount = status.overview.healthyResources;\n      const totalCount = status.overview.totalResources;\n      const score = totalCount > 0 ? (healthyCount / totalCount) * 100 : 100;\n\n      return {\n        status: this.calculateHealthStatus(score),\n        score,\n        metrics: {\n          healthyResources: healthyCount,\n          totalResources: totalCount,\n          criticalResources: status.overview.criticalResources,\n          monthlyCost: status.totalCost.monthly\n        },\n        lastCheck: new Date(),\n        issues: status.overview.criticalResources > 0 ? \n          [`${status.overview.criticalResources} resources in critical state`] : [],\n        recommendations: score < 90 ? ['Review critical resources', 'Consider scaling'] : []\n      };\n    } catch (error) {\n      return this.createErrorHealth('infrastructure', error);\n    }\n  }\n\n  private async getSecurityHealth(): Promise<ComponentHealth> {\n    try {\n      const recentEvents = await securityMonitor.getRecentEvents(60); // Last hour\n      const criticalEvents = recentEvents.filter(e => e.severity === 'critical').length;\n      const score = Math.max(0, 100 - (criticalEvents * 20));\n\n      return {\n        status: this.calculateHealthStatus(score),\n        score,\n        metrics: {\n          recentEvents: recentEvents.length,\n          criticalEvents,\n          anomalies: recentEvents.filter(e => e.type === 'anomaly').length\n        },\n        lastCheck: new Date(),\n        issues: criticalEvents > 0 ? [`${criticalEvents} critical security events`] : [],\n        recommendations: criticalEvents > 0 ? ['Review security events', 'Check for breaches'] : []\n      };\n    } catch (error) {\n      return this.createErrorHealth('security', error);\n    }\n  }\n\n  private async getAIHealth(): Promise<ComponentHealth> {\n    try {\n      const stats = await taskExecutionMonitor.getExecutionStats();\n      const successRate = stats.totalTasks > 0 ? \n        (stats.successfulTasks / stats.totalTasks) * 100 : 100;\n\n      return {\n        status: this.calculateHealthStatus(successRate),\n        score: successRate,\n        metrics: {\n          totalTasks: stats.totalTasks,\n          successfulTasks: stats.successfulTasks,\n          failedTasks: stats.failedTasks,\n          successRate\n        },\n        lastCheck: new Date(),\n        issues: successRate < 90 ? ['AI task failure rate elevated'] : [],\n        recommendations: successRate < 90 ? ['Review failed tasks', 'Check AI models'] : []\n      };\n    } catch (error) {\n      return this.createErrorHealth('ai', error);\n    }\n  }\n\n  private async getAttributionHealth(): Promise<ComponentHealth> {\n    try {\n      const metrics = await autonomousAttributionEngine.getAttributionMetrics();\n      const healthMap = { excellent: 100, good: 80, warning: 60, critical: 20 };\n      const score = healthMap[metrics.attributionHealth] || 50;\n\n      return {\n        status: this.calculateHealthStatus(score),\n        score,\n        metrics: {\n          totalConversions: metrics.totalConversions,\n          totalRevenue: metrics.totalRevenue,\n          avgTimeToConversion: metrics.avgTimeToConversion\n        },\n        lastCheck: new Date(),\n        issues: score < 80 ? ['Attribution system needs attention'] : [],\n        recommendations: score < 80 ? ['Review attribution data', 'Check tracking'] : []\n      };\n    } catch (error) {\n      return this.createErrorHealth('attribution', error);\n    }\n  }\n\n  private getApplicationHealth(): ComponentHealth {\n    // Basic application health based on uptime and memory\n    const uptime = process.uptime();\n    const memUsage = process.memoryUsage();\n    const score = Math.min(100, uptime / 3600 * 10); // Score based on uptime\n\n    return {\n      status: this.calculateHealthStatus(score),\n      score,\n      metrics: {\n        uptime,\n        memoryUsage: memUsage.rss,\n        heapUsed: memUsage.heapUsed\n      },\n      lastCheck: new Date(),\n      issues: score < 80 ? ['Application recently restarted'] : [],\n      recommendations: []\n    };\n  }\n\n  private getDatabaseHealth(): ComponentHealth {\n    // Placeholder for database health\n    return {\n      status: 'healthy',\n      score: 95,\n      metrics: {\n        connections: 10,\n        responseTime: 50\n      },\n      lastCheck: new Date(),\n      issues: [],\n      recommendations: []\n    };\n  }\n\n  private getCacheHealth(): ComponentHealth {\n    // Placeholder for cache health\n    return {\n      status: 'healthy',\n      score: 98,\n      metrics: {\n        hitRate: 85,\n        memoryUsage: 60\n      },\n      lastCheck: new Date(),\n      issues: [],\n      recommendations: []\n    };\n  }\n\n  private getMonitoringHealth(): ComponentHealth {\n    const score = this.activeAlerts.size < 5 ? 100 : Math.max(0, 100 - this.activeAlerts.size * 10);\n    \n    return {\n      status: this.calculateHealthStatus(score),\n      score,\n      metrics: {\n        activeAlerts: this.activeAlerts.size,\n        rulesCount: this.rules.size,\n        insightsCount: this.insights.length\n      },\n      lastCheck: new Date(),\n      issues: this.activeAlerts.size > 5 ? ['High number of active alerts'] : [],\n      recommendations: this.activeAlerts.size > 5 ? ['Review alert configuration'] : []\n    };\n  }\n\n  // Helper methods\n  private calculateHealthStatus(score: number): 'healthy' | 'warning' | 'critical' | 'down' {\n    if (score >= 90) return 'healthy';\n    if (score >= 70) return 'warning';\n    if (score >= 40) return 'critical';\n    return 'down';\n  }\n\n  private createErrorHealth(component: string, error: any): ComponentHealth {\n    return {\n      status: 'critical',\n      score: 0,\n      metrics: {},\n      lastCheck: new Date(),\n      issues: [`${component} health check failed: ${error instanceof Error ? error.message : 'Unknown error'}`],\n      recommendations: [`Check ${component} connectivity`, 'Review logs']\n    };\n  }\n\n  private async getCurrentMetrics(): Promise<Record<string, number>> {\n    try {\n      const metrics: Record<string, number> = {};\n      \n      // Get infrastructure metrics\n      const infraStatus = await predictiveInfrastructureManager.getInfrastructureStatus();\n      metrics['infrastructure.healthyResources'] = infraStatus.overview.healthyResources;\n      metrics['infrastructure.criticalResources'] = infraStatus.overview.criticalResources;\n      metrics['infrastructure.totalResources'] = infraStatus.overview.totalResources;\n      \n      // Get security metrics\n      const securityEvents = await securityMonitor.getRecentEvents(60);\n      metrics['security.recentEvents'] = securityEvents.length;\n      metrics['security.criticalEvents'] = securityEvents.filter(e => e.severity === 'critical').length;\n      \n      // Get AI metrics\n      const aiStats = await taskExecutionMonitor.getExecutionStats();\n      metrics['ai.totalTasks'] = aiStats.totalTasks;\n      metrics['ai.successfulTasks'] = aiStats.successfulTasks;\n      metrics['ai.failedTasks'] = aiStats.failedTasks;\n      metrics['ai.taskFailureRate'] = aiStats.totalTasks > 0 ? (aiStats.failedTasks / aiStats.totalTasks) * 100 : 0;\n      \n      // Get attribution metrics\n      const attributionMetrics = await autonomousAttributionEngine.getAttributionMetrics();\n      const lastAnalysisTime = attributionMetrics.lastAnalysisTime;\n      metrics['attribution.lastAnalysis'] = lastAnalysisTime ? \n        (Date.now() - new Date(lastAnalysisTime).getTime()) / (1000 * 60) : 0; // minutes ago\n      \n      // Application metrics\n      metrics['application.uptime'] = process.uptime();\n      metrics['application.memoryUsage'] = process.memoryUsage().rss / 1024 / 1024; // MB\n      \n      // Database metrics (placeholder - would need actual implementation)\n      metrics['database.responseTime'] = 50; // ms\n      metrics['database.connections'] = 10;\n      \n      // Error rate (placeholder)\n      metrics['application.errorRate'] = 2; // percent\n      \n      return metrics;\n    } catch (error) {\n      logger.error('Failed to collect current metrics', {\n        error: error instanceof Error ? error.message : String(error)\n      });\n      return {};\n    }\n  }\n\n  private async evaluateRule(rule: MonitoringRule, metrics: Record<string, number>): Promise<boolean> {\n    try {\n      // All conditions must be met for rule to trigger\n      for (const condition of rule.conditions) {\n        const metricValue = metrics[condition.metric];\n        if (metricValue === undefined) {\n          logger.debug('Metric not found for rule evaluation', {\n            ruleId: rule.id,\n            metric: condition.metric\n          });\n          return false;\n        }\n        \n        const conditionMet = this.evaluateCondition(condition, metricValue);\n        if (!conditionMet) {\n          return false;\n        }\n      }\n      \n      return true;\n    } catch (error) {\n      logger.error('Rule evaluation failed', {\n        ruleId: rule.id,\n        error: error instanceof Error ? error.message : String(error)\n      });\n      return false;\n    }\n  }\n\n  private async triggerRule(rule: MonitoringRule) {\n    logger.info('Triggering monitoring rule', {\n      ruleId: rule.id,\n      ruleName: rule.name\n    });\n\n    rule.lastTriggered = new Date();\n    rule.triggerCount++;\n\n    // Execute rule actions\n    for (const action of rule.actions) {\n      try {\n        await this.executeAction(action, rule);\n      } catch (error) {\n        logger.error('Action execution failed', {\n          ruleId: rule.id,\n          actionType: action.type,\n          error: error instanceof Error ? error.message : String(error)\n        });\n      }\n    }\n  }\n\n  private async executeAction(action: MonitoringAction, rule: MonitoringRule) {\n    switch (action.type) {\n      case 'alert':\n        await this.sendAlert(action, rule);\n        break;\n      case 'auto_scale':\n        await this.triggerAutoScale(action);\n        break;\n      case 'restart_service':\n        await this.restartService(action);\n        break;\n      case 'run_healing':\n        await this.runHealing(action);\n        break;\n      case 'notify_agent':\n        await this.notifyAgent(action, rule);\n        break;\n      case 'escalate':\n        await this.escalateAlert(action, rule);\n        break;\n    }\n  }\n\n  private async sendAlert(action: MonitoringAction, rule: MonitoringRule) {\n    const channels = action.config.channels || ['slack'];\n    const message = action.config.message || rule.description;\n    const severity = action.config.severity || rule.severity;\n\n    for (const channel of channels) {\n      try {\n        await alertingSystem.sendAlert({\n          type: 'monitoring_rule',\n          severity,\n          message,\n          details: { ruleId: rule.id, ruleName: rule.name }\n        }, [channel]);\n      } catch (error) {\n        logger.error('Alert sending failed', {\n          channel,\n          error: error instanceof Error ? error.message : String(error)\n        });\n      }\n    }\n  }\n\n  private async triggerAutoScale(action: MonitoringAction) {\n    // Trigger infrastructure auto-scaling\n    logger.info('Triggering auto-scaling based on monitoring rule');\n  }\n\n  private async restartService(action: MonitoringAction) {\n    // Restart service logic\n    logger.info('Service restart triggered by monitoring rule');\n  }\n\n  private async runHealing(action: MonitoringAction) {\n    // Trigger self-healing capabilities\n    logger.info('Self-healing triggered by monitoring rule');\n  }\n\n  private async notifyAgent(action: MonitoringAction, rule: MonitoringRule) {\n    const capabilities = action.config.agentCapabilities || ['integration'];\n    const message = action.config.message || rule.description;\n\n    try {\n      await multiAgentCoordinator.requestAgentCollaboration({\n        requiredCapabilities: capabilities,\n        objective: message,\n        priority: rule.severity === 'critical' ? 'critical' : 'medium',\n        requesterId: 'monitoring_orchestrator'\n      });\n    } catch (error) {\n      logger.error('Agent notification failed', {\n        error: error instanceof Error ? error.message : String(error)\n      });\n    }\n  }\n\n  private async escalateAlert(action: MonitoringAction, rule: MonitoringRule) {\n    const escalationPath = action.config.escalationPath || ['admin'];\n    \n    logger.info('Escalating alert', {\n      ruleId: rule.id,\n      escalationPath\n    });\n\n    // Create escalated alert\n    const alert: ActiveAlert = {\n      id: `alert_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      rule: rule.id,\n      severity: rule.severity,\n      message: rule.description,\n      component: 'system',\n      triggeredAt: new Date(),\n      escalated: true,\n      actions: ['escalated']\n    };\n\n    this.activeAlerts.set(alert.id, alert);\n  }\n\n  private checkRulesForMetric(metric: string, value: any) {\n    // Check if any rules should be triggered by this metric\n    for (const rule of this.rules.values()) {\n      if (!rule.enabled) continue;\n      \n      // Check if this rule monitors the given metric\n      const hasMetric = rule.conditions.some(c => c.metric === metric);\n      if (!hasMetric) continue;\n      \n      // Check cooldown\n      if (rule.lastTriggered) {\n        const timeSinceTrigger = Date.now() - rule.lastTriggered.getTime();\n        if (timeSinceTrigger < rule.cooldownPeriod * 60 * 1000) {\n          continue;\n        }\n      }\n      \n      // Create metrics object for evaluation\n      const currentMetrics = { [metric]: value };\n      \n      // Evaluate rule (async but don't wait)\n      this.evaluateRule(rule, currentMetrics).then(shouldTrigger => {\n        if (shouldTrigger) {\n          this.triggerRule(rule).catch(error => {\n            logger.error('Failed to trigger rule', {\n              ruleId: rule.id,\n              error: error instanceof Error ? error.message : String(error)\n            });\n          });\n        }\n      }).catch(error => {\n        logger.error('Rule evaluation failed', {\n          ruleId: rule.id,\n          error: error instanceof Error ? error.message : String(error)\n        });\n      });\n    }\n  }\n\n  private updateMetric(metric: string, value: number) {\n    // Update metric for rule evaluation and trigger checks\n    this.checkRulesForMetric(metric, value);\n    \n    // Emit metric update event\n    this.emit('metric_updated', { metric, value, timestamp: new Date() });\n  }\n\n  private async predictHealth(hours: number): Promise<HealthPrediction> {\n    // Simple prediction based on trends\n    return {\n      status: 'healthy',\n      confidence: 0.8,\n      factors: ['Current trends stable'],\n      mitigations: []\n    };\n  }\n\n  private generateHealthRecommendations(score: number): string[] {\n    const recommendations: string[] = [];\n    \n    if (score < 90) {\n      recommendations.push('Review system components with low health scores');\n    }\n    if (score < 70) {\n      recommendations.push('Consider scaling resources');\n      recommendations.push('Check for system bottlenecks');\n    }\n    if (score < 50) {\n      recommendations.push('Immediate attention required for critical components');\n    }\n    \n    return recommendations;\n  }\n\n  // Insight generation methods\n  private analyzePerformanceTrends(): MonitoringInsight[] {\n    const insights: MonitoringInsight[] = [];\n    \n    try {\n      // Analyze system health trends from history\n      if (this.healthHistory.length >= 5) {\n        const recent = this.healthHistory.slice(-5);\n        const scores = recent.map(h => h.overall.score);\n        const avgScore = scores.reduce((sum, score) => sum + score, 0) / scores.length;\n        \n        // Check for declining performance\n        const isDecclining = scores.every((score, i) => i === 0 || score <= scores[i - 1]);\n        \n        if (isDecclining && avgScore < 85) {\n          insights.push({\n            id: `perf_trend_${Date.now()}`,\n            type: 'performance_trend',\n            confidence: 0.8,\n            impact: 'medium',\n            message: 'System performance showing declining trend',\n            details: { avgScore, trend: 'declining', dataPoints: scores.length },\n            recommendations: [\n              'Review recent changes and deployments',\n              'Check for resource bottlenecks',\n              'Consider scaling resources'\n            ],\n            autoFixAvailable: false,\n            estimatedResolution: '30-60 minutes',\n            createdAt: new Date()\n          });\n        }\n      }\n      \n      return insights;\n    } catch (error) {\n      logger.error('Performance trend analysis failed', {\n        error: error instanceof Error ? error.message : String(error)\n      });\n      return [];\n    }\n  }\n\n  private async generateCapacityInsights(): Promise<MonitoringInsight[]> {\n    const insights: MonitoringInsight[] = [];\n    \n    try {\n      // Get current infrastructure status\n      const infraStatus = await predictiveInfrastructureManager.getInfrastructureStatus();\n      \n      // Check for capacity warnings\n      const utilizationRate = infraStatus.overview.totalResources > 0 ? \n        (infraStatus.overview.healthyResources / infraStatus.overview.totalResources) : 1;\n      \n      if (utilizationRate > 0.85) {\n        insights.push({\n          id: `capacity_warning_${Date.now()}`,\n          type: 'capacity_warning',\n          confidence: 0.9,\n          impact: 'high',\n          message: 'High resource utilization detected',\n          details: { \n            utilizationRate: (utilizationRate * 100).toFixed(1),\n            totalResources: infraStatus.overview.totalResources,\n            healthyResources: infraStatus.overview.healthyResources\n          },\n          recommendations: [\n            'Consider scaling up resources',\n            'Review resource allocation',\n            'Enable auto-scaling if not already active'\n          ],\n          autoFixAvailable: true,\n          estimatedResolution: '5-10 minutes',\n          createdAt: new Date()\n        });\n      }\n      \n      return insights;\n    } catch (error) {\n      logger.error('Capacity insights generation failed', {\n        error: error instanceof Error ? error.message : String(error)\n      });\n      return [];\n    }\n  }\n\n  private analyzeSecurityPatterns(): MonitoringInsight[] {\n    const insights: MonitoringInsight[] = [];\n    \n    try {\n      // Analyze recent security events for patterns\n      securityMonitor.getRecentEvents(60).then(events => {\n        const eventsByType = events.reduce((acc, event) => {\n          acc[event.type] = (acc[event.type] || 0) + 1;\n          return acc;\n        }, {} as Record<string, number>);\n        \n        // Check for unusual patterns\n        const totalEvents = events.length;\n        if (totalEvents > 10) {\n          const mostCommonType = Object.entries(eventsByType)\n            .sort(([,a], [,b]) => b - a)[0];\n          \n          if (mostCommonType && mostCommonType[1] > totalEvents * 0.6) {\n            insights.push({\n              id: `security_pattern_${Date.now()}`,\n              type: 'security_pattern',\n              confidence: 0.7,\n              impact: 'medium',\n              message: `Unusual concentration of ${mostCommonType[0]} security events`,\n              details: {\n                eventType: mostCommonType[0],\n                count: mostCommonType[1],\n                percentage: ((mostCommonType[1] / totalEvents) * 100).toFixed(1)\n              },\n              recommendations: [\n                'Review security logs for this event type',\n                'Check for potential attack patterns',\n                'Consider strengthening relevant security controls'\n              ],\n              autoFixAvailable: false,\n              estimatedResolution: '15-30 minutes',\n              createdAt: new Date()\n            });\n          }\n        }\n      }).catch(error => {\n        logger.error('Security pattern analysis failed', {\n          error: error instanceof Error ? error.message : String(error)\n        });\n      });\n      \n      return insights;\n    } catch (error) {\n      logger.error('Security pattern analysis failed', {\n        error: error instanceof Error ? error.message : String(error)\n      });\n      return [];\n    }\n  }\n\n  private async identifyCostOptimizations(): Promise<MonitoringInsight[]> {\n    const insights: MonitoringInsight[] = [];\n    \n    try {\n      // Get cost data from infrastructure manager\n      const infraStatus = await predictiveInfrastructureManager.getInfrastructureStatus();\n      \n      // Check for cost optimization opportunities\n      if (infraStatus.totalCost.monthly > 1000) {\n        // Check for underutilized resources\n        const utilizationRate = infraStatus.overview.totalResources > 0 ? \n          (infraStatus.overview.healthyResources / infraStatus.overview.totalResources) : 1;\n        \n        if (utilizationRate < 0.6) {\n          insights.push({\n            id: `cost_optimization_${Date.now()}`,\n            type: 'cost_optimization',\n            confidence: 0.8,\n            impact: 'medium',\n            message: 'Cost optimization opportunity identified',\n            details: {\n              monthlyCost: infraStatus.totalCost.monthly,\n              utilizationRate: (utilizationRate * 100).toFixed(1),\n              potentialSavings: (infraStatus.totalCost.monthly * 0.3).toFixed(2)\n            },\n            recommendations: [\n              'Review and rightsized underutilized resources',\n              'Consider implementing auto-scaling',\n              'Evaluate resource allocation efficiency'\n            ],\n            autoFixAvailable: true,\n            estimatedResolution: '1-2 hours',\n            createdAt: new Date()\n          });\n        }\n      }\n      \n      return insights;\n    } catch (error) {\n      logger.error('Cost optimization analysis failed', {\n        error: error instanceof Error ? error.message : String(error)\n      });\n      return [];\n    }\n  }\n\n  private analyzeReliabilityPatterns(): MonitoringInsight[] {\n    const insights: MonitoringInsight[] = [];\n    \n    try {\n      // Analyze task execution patterns\n      const aiHealth = taskExecutionMonitor.getHealthStatus();\n      \n      if (aiHealth.status === 'warning' || aiHealth.status === 'critical') {\n        insights.push({\n          id: `reliability_issue_${Date.now()}`,\n          type: 'reliability_issue',\n          confidence: 0.9,\n          impact: aiHealth.status === 'critical' ? 'critical' : 'high',\n          message: 'AI system reliability concerns detected',\n          details: {\n            healthStatus: aiHealth.status,\n            issueCount: aiHealth.issues.length,\n            issues: aiHealth.issues.slice(0, 3) // Top 3 issues\n          },\n          recommendations: aiHealth.recommendations,\n          autoFixAvailable: false,\n          estimatedResolution: '30-60 minutes',\n          createdAt: new Date()\n        });\n      }\n      \n      // Check active alerts for reliability patterns\n      const alertCount = this.activeAlerts.size;\n      if (alertCount > 5) {\n        insights.push({\n          id: `reliability_alerts_${Date.now()}`,\n          type: 'reliability_issue',\n          confidence: 0.7,\n          impact: 'medium',\n          message: 'High number of active alerts may indicate reliability issues',\n          details: {\n            activeAlerts: alertCount,\n            alertTypes: Array.from(this.activeAlerts.values()).map(a => a.component)\n          },\n          recommendations: [\n            'Review and resolve active alerts',\n            'Check for underlying system issues',\n            'Consider alert threshold adjustments'\n          ],\n          autoFixAvailable: false,\n          estimatedResolution: '15-30 minutes',\n          createdAt: new Date()\n        });\n      }\n      \n      return insights;\n    } catch (error) {\n      logger.error('Reliability pattern analysis failed', {\n        error: error instanceof Error ? error.message : String(error)\n      });\n      return [];\n    }\n  }\n\n  /**\n   * Public API methods\n   */\n  async getSystemHealth(): Promise<SystemHealthMetrics> {\n    return this.collectSystemHealth();\n  }\n\n  async getMonitoringInsights(): Promise<MonitoringInsight[]> {\n    return this.insights.slice(0, 50); // Return latest 50 insights\n  }\n\n  async getActiveAlerts(): Promise<ActiveAlert[]> {\n    return Array.from(this.activeAlerts.values());\n  }\n\n  async acknowledgeAlert(alertId: string, userId: string): Promise<boolean> {\n    const alert = this.activeAlerts.get(alertId);\n    if (alert) {\n      alert.acknowledgedAt = new Date();\n      alert.acknowledgedBy = userId;\n      this.emit('alert_acknowledged', { alertId, userId });\n      return true;\n    }\n    return false;\n  }\n\n  async resolveAlert(alertId: string): Promise<boolean> {\n    const alert = this.activeAlerts.get(alertId);\n    if (alert) {\n      alert.resolvedAt = new Date();\n      this.activeAlerts.delete(alertId);\n      this.emit('alert_resolved', { alertId });\n      return true;\n    }\n    return false;\n  }\n\n  async addMonitoringRule(rule: Partial<MonitoringRule>): Promise<string> {\n    const newRule: MonitoringRule = {\n      id: `rule_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      enabled: true,\n      triggerCount: 0,\n      created: new Date(),\n      updatedAt: new Date(),\n      ...rule\n    } as MonitoringRule;\n\n    this.rules.set(newRule.id, newRule);\n    this.emit('rule_added', newRule);\n    \n    return newRule.id;\n  }\n\n  async updateMonitoringRule(ruleId: string, updates: Partial<MonitoringRule>): Promise<boolean> {\n    const rule = this.rules.get(ruleId);\n    if (rule) {\n      Object.assign(rule, updates, { updatedAt: new Date() });\n      this.emit('rule_updated', rule);\n      return true;\n    }\n    return false;\n  }\n\n  async deleteMonitoringRule(ruleId: string): Promise<boolean> {\n    const deleted = this.rules.delete(ruleId);\n    if (deleted) {\n      this.emit('rule_deleted', { ruleId });\n    }\n    return deleted;\n  }\n\n  async getMonitoringRules(): Promise<MonitoringRule[]> {\n    return Array.from(this.rules.values());\n  }\n\n  /**\n   * Evaluate a single condition against a metric value\n   */\n  private evaluateCondition(condition: MonitoringCondition, metricValue: number): boolean {\n    switch (condition.operator) {\n      case 'gt':\n        return metricValue > Number(condition.value);\n      case 'lt':\n        return metricValue < Number(condition.value);\n      case 'eq':\n        return metricValue === Number(condition.value);\n      case 'neq':\n        return metricValue !== Number(condition.value);\n      case 'anomaly':\n        // Simple anomaly detection based on threshold\n        return metricValue > (condition.threshold || 0.8);\n      default:\n        logger.warn('Unknown condition operator', { operator: condition.operator });\n        return false;\n    }\n  }\n  \n  /**\n   * Get execution stats for external monitoring\n   */\n  async getExecutionStats(): Promise<{\n    totalTasks: number;\n    successfulTasks: number;\n    failedTasks: number;\n  }> {\n    try {\n      const stats = taskExecutionMonitor.getOverallMetrics();\n      let totalTasks = 0;\n      let successfulTasks = 0;\n      let failedTasks = 0;\n      \n      for (const metrics of Object.values(stats)) {\n        totalTasks += metrics.totalAttempts;\n        successfulTasks += metrics.successfulExecutions;\n        failedTasks += metrics.failedExecutions;\n      }\n      \n      return { totalTasks, successfulTasks, failedTasks };\n    } catch (error) {\n      logger.error('Failed to get execution stats', {\n        error: error instanceof Error ? error.message : String(error)\n      });\n      return { totalTasks: 0, successfulTasks: 0, failedTasks: 0 };\n    }\n  }\n  \n  /**\n   * Cleanup and stop monitoring\n   */\n  destroy() {\n    if (this.monitoringInterval) {\n      clearInterval(this.monitoringInterval);\n      this.monitoringInterval = null;\n    }\n    \n    if (this.ruleEvaluationInterval) {\n      clearInterval(this.ruleEvaluationInterval);\n      this.ruleEvaluationInterval = null;\n    }\n    \n    this.removeAllListeners();\n    logger.info('Advanced monitoring orchestrator destroyed');\n  }\n}\n\n// Export singleton instance\nexport const advancedMonitoringOrchestrator = new AdvancedMonitoringOrchestrator();\n\n// Export types and class\nexport { AdvancedMonitoringOrchestrator };"],"names":["AdvancedMonitoringOrchestrator","advancedMonitoringOrchestrator","EventEmitter","constructor","rules","Map","activeAlerts","insights","healthHistory","monitoringInterval","ruleEvaluationInterval","initializeOrchestrator","logger","info","loadDefaultRules","connectToMonitoringSystems","startMonitoringLoop","startRuleEvaluation","startInsightGeneration","error","Error","message","String","defaultRules","name","description","type","severity","conditions","metric","operator","value","window","actions","config","channels","agentCapabilities","cooldownPeriod","autoRemediation","threshold","escalationPath","forEach","ruleData","rule","id","Date","now","Math","random","toString","substr","enabled","triggerCount","created","updatedAt","set","rulesCount","size","securityMonitor","on","event","handleSecurityEvent","anomaly","handleSecurityAnomaly","predictiveInfrastructureManager","data","handleInfrastructureUpdate","handleScalingEvent","handleResourceStatusChange","autonomousAttributionEngine","handleAttributionAnalysis","handleAutonomousAction","multiAgentCoordinator","handleAgentCollaboration","agent","handleAgentStatusChange","setInterval","collectSystemHealth","evaluateMonitoringRules","generateMonitoringInsights","tracer","trace","getTracer","startActiveSpan","span","timestamp","infrastructureHealth","securityHealth","aiHealth","attributionHealth","Promise","all","getInfrastructureHealth","getSecurityHealth","getAIHealth","getAttributionHealth","componentScores","score","overallScore","reduce","sum","length","overallStatus","calculateHealthStatus","healthMetrics","overall","status","uptime","process","components","infrastructure","application","getApplicationHealth","database","getDatabaseHealth","cache","getCacheHealth","ai","security","attribution","monitoring","getMonitoringHealth","predictions","nextHour","predictHealth","next6Hours","next24Hours","recommendations","generateHealthRecommendations","Array","from","values","push","cutoff","filter","h","emit","setStatus","code","end","currentMetrics","getCurrentMetrics","lastTriggered","timeSinceTrigger","getTime","shouldTrigger","evaluateRule","triggerRule","ruleId","performanceTrends","analyzePerformanceTrends","capacityInsights","generateCapacityInsights","securityInsights","analyzeSecurityPatterns","costInsights","identifyCostOptimizations","reliabilityInsights","analyzeReliabilityPatterns","i","createdAt","newInsights","totalInsights","checkRulesForMetric","warn","patterns","updateMetric","healthyResources","resourceCount","resourceId","action","scalingEvent","newStatus","insightCount","actionId","success","getInfrastructureStatus","healthyCount","overview","totalCount","totalResources","metrics","criticalResources","monthlyCost","totalCost","monthly","lastCheck","issues","createErrorHealth","recentEvents","getRecentEvents","criticalEvents","e","max","anomalies","stats","taskExecutionMonitor","getExecutionStats","successRate","totalTasks","successfulTasks","failedTasks","getAttributionMetrics","healthMap","excellent","good","warning","critical","totalConversions","totalRevenue","avgTimeToConversion","memUsage","memoryUsage","min","rss","heapUsed","connections","responseTime","hitRate","insightsCount","component","infraStatus","securityEvents","aiStats","attributionMetrics","lastAnalysisTime","condition","metricValue","undefined","debug","conditionMet","evaluateCondition","ruleName","executeAction","actionType","sendAlert","triggerAutoScale","restartService","runHealing","notifyAgent","escalateAlert","channel","alertingSystem","details","capabilities","requestAgentCollaboration","requiredCapabilities","objective","priority","requesterId","alert","triggeredAt","escalated","hasMetric","some","c","then","catch","hours","confidence","factors","mitigations","recent","slice","scores","map","avgScore","isDecclining","every","impact","trend","dataPoints","autoFixAvailable","estimatedResolution","utilizationRate","toFixed","events","eventsByType","acc","totalEvents","mostCommonType","Object","entries","sort","a","b","eventType","count","percentage","potentialSavings","getHealthStatus","healthStatus","issueCount","alertCount","alertTypes","getSystemHealth","getMonitoringInsights","getActiveAlerts","acknowledgeAlert","alertId","userId","get","acknowledgedAt","acknowledgedBy","resolveAlert","resolvedAt","delete","addMonitoringRule","newRule","updateMonitoringRule","updates","assign","deleteMonitoringRule","deleted","getMonitoringRules","Number","getOverallMetrics","totalAttempts","successfulExecutions","failedExecutions","destroy","clearInterval","removeAllListeners"],"mappings":"AAAA;;;;;CAKC;;;;;;;;;;;IAi+CQA,8BAA8B;eAA9BA;;IAHIC,8BAA8B;eAA9BA;;;wBA59CU;qBACD;wBACO;iCACG;gCAED;sCACM;iDACW;6CACJ;uCACN;AA4GtC,MAAMD,uCAAuCE,oBAAY;IAQvDC,aAAc;QACZ,KAAK,SARCC,QAAqC,IAAIC,YACzCC,eAAyC,IAAID,YAC7CE,WAAgC,EAAE,OAClCC,gBAAuC,EAAE,OACzCC,qBAA4C,WAC5CC,yBAAgD;QAItD,IAAI,CAACC,sBAAsB;IAC7B;IAEA;;GAEC,GACD,MAAcA,yBAAyB;QACrC,IAAI;YACFC,cAAM,CAACC,IAAI,CAAC;YAEZ,gCAAgC;YAChC,IAAI,CAACC,gBAAgB;YAErB,yCAAyC;YACzC,IAAI,CAACC,0BAA0B;YAE/B,yBAAyB;YACzB,IAAI,CAACC,mBAAmB;YACxB,IAAI,CAACC,mBAAmB;YACxB,IAAI,CAACC,sBAAsB;YAE3BN,cAAM,CAACC,IAAI,CAAC;QAEd,EAAE,OAAOM,OAAO;YACdP,cAAM,CAACO,KAAK,CAAC,gDAAgD;gBAC3DA,OAAOA,iBAAiBC,QAAQD,MAAME,OAAO,GAAGC,OAAOH;YACzD;YACA,MAAMA;QACR;IACF;IAEA;;GAEC,GACD,AAAQL,mBAAmB;QACzB,MAAMS,eAA0C;YAC9C;gBACEC,MAAM;gBACNC,aAAa;gBACbC,MAAM;gBACNC,UAAU;gBACVC,YAAY;oBAAC;wBACXC,QAAQ;wBACRC,UAAU;wBACVC,OAAO;wBACPC,QAAQ;oBACV;iBAAE;gBACFC,SAAS;oBAAC;wBACRP,MAAM;wBACNQ,QAAQ;4BACNC,UAAU;gCAAC;gCAAS;6BAAQ;4BAC5Bd,SAAS;4BACTM,UAAU;wBACZ;oBACF;oBAAG;wBACDD,MAAM;wBACNQ,QAAQ;4BACNE,mBAAmB;gCAAC;gCAAe;6BAAY;4BAC/Cf,SAAS;wBACX;oBACF;iBAAE;gBACFgB,gBAAgB;YAClB;YACA;gBACEb,MAAM;gBACNC,aAAa;gBACbC,MAAM;gBACNC,UAAU;gBACVC,YAAY;oBAAC;wBACXC,QAAQ;wBACRC,UAAU;wBACVC,OAAO;wBACPC,QAAQ;oBACV;iBAAE;gBACFC,SAAS;oBAAC;wBACRP,MAAM;wBACNQ,QAAQ;4BACNC,UAAU;gCAAC;gCAAS;gCAAS;6BAAM;4BACnCd,SAAS;4BACTM,UAAU;wBACZ;oBACF;oBAAG;wBACDD,MAAM;wBACNQ,QAAQ;4BACNI,iBAAiB;wBACnB;oBACF;iBAAE;gBACFD,gBAAgB;YAClB;YACA;gBACEb,MAAM;gBACNC,aAAa;gBACbC,MAAM;gBACNC,UAAU;gBACVC,YAAY;oBAAC;wBACXC,QAAQ;wBACRC,UAAU;wBACVC,OAAO;wBACPC,QAAQ;wBACRO,WAAW;oBACb;iBAAE;gBACFN,SAAS;oBAAC;wBACRP,MAAM;wBACNQ,QAAQ;4BACNC,UAAU;gCAAC;gCAAS;6BAAQ;4BAC5Bd,SAAS;4BACTM,UAAU;wBACZ;oBACF;oBAAG;wBACDD,MAAM;wBACNQ,QAAQ;4BACNM,gBAAgB;gCAAC;gCAAiB;6BAAQ;wBAC5C;oBACF;iBAAE;gBACFH,gBAAgB;YAClB;YACA;gBACEb,MAAM;gBACNC,aAAa;gBACbC,MAAM;gBACNC,UAAU;gBACVC,YAAY;oBAAC;wBACXC,QAAQ;wBACRC,UAAU;wBACVC,OAAO;wBACPC,QAAQ;oBACV;iBAAE;gBACFC,SAAS;oBAAC;wBACRP,MAAM;wBACNQ,QAAQ;4BACNC,UAAU;gCAAC;6BAAQ;4BACnBd,SAAS;4BACTM,UAAU;wBACZ;oBACF;oBAAG;wBACDD,MAAM;wBACNQ,QAAQ;4BACNI,iBAAiB;wBACnB;oBACF;iBAAE;gBACFD,gBAAgB;YAClB;YACA;gBACEb,MAAM;gBACNC,aAAa;gBACbC,MAAM;gBACNC,UAAU;gBACVC,YAAY;oBAAC;wBACXC,QAAQ;wBACRC,UAAU;wBACVC,OAAO;wBACPC,QAAQ;oBACV;iBAAE;gBACFC,SAAS;oBAAC;wBACRP,MAAM;wBACNQ,QAAQ;4BACNE,mBAAmB;gCAAC;6BAAY;4BAChCf,SAAS;wBACX;oBACF;iBAAE;gBACFgB,gBAAgB;YAClB;SACD;QAEDd,aAAakB,OAAO,CAACC,CAAAA;YACnB,MAAMC,OAAuB;gBAC3BC,IAAI,CAAC,KAAK,EAAEC,KAAKC,GAAG,GAAG,CAAC,EAAEC,KAAKC,MAAM,GAAGC,QAAQ,CAAC,IAAIC,MAAM,CAAC,GAAG,IAAI;gBACnEC,SAAS;gBACTC,cAAc;gBACdC,SAAS,IAAIR;gBACbS,WAAW,IAAIT;gBACf,GAAGH,QAAQ;YACb;YAEA,IAAI,CAACtC,KAAK,CAACmD,GAAG,CAACZ,KAAKC,EAAE,EAAED;QAC1B;QAEA/B,cAAM,CAACC,IAAI,CAAC,mCAAmC;YAC7C2C,YAAY,IAAI,CAACpD,KAAK,CAACqD,IAAI;QAC7B;IACF;IAEA;;GAEC,GACD,AAAQ1C,6BAA6B;QACnC,oCAAoC;QACpC2C,gCAAe,CAACC,EAAE,CAAC,iBAAiB,CAACC;YACnC,IAAI,CAACC,mBAAmB,CAACD;QAC3B;QAEAF,gCAAe,CAACC,EAAE,CAAC,mBAAmB,CAACG;YACrC,IAAI,CAACC,qBAAqB,CAACD;QAC7B;QAEA,kCAAkC;QAClCE,gEAA+B,CAACL,EAAE,CAAC,6BAA6B,CAACM;YAC/D,IAAI,CAACC,0BAA0B,CAACD;QAClC;QAEAD,gEAA+B,CAACL,EAAE,CAAC,qBAAqB,CAACM;YACvD,IAAI,CAACE,kBAAkB,CAACF;QAC1B;QAEAD,gEAA+B,CAACL,EAAE,CAAC,2BAA2B,CAACM;YAC7D,IAAI,CAACG,0BAA0B,CAACH;QAClC;QAEA,sCAAsC;QACtCI,wDAA2B,CAACV,EAAE,CAAC,qBAAqB,CAACM;YACnD,IAAI,CAACK,yBAAyB,CAACL;QACjC;QAEAI,wDAA2B,CAACV,EAAE,CAAC,mBAAmB,CAACM;YACjD,IAAI,CAACM,sBAAsB,CAACN;QAC9B;QAEA,+BAA+B;QAC/BO,4CAAqB,CAACb,EAAE,CAAC,2BAA2B,CAACM;YACnD,IAAI,CAACQ,wBAAwB,CAACR;QAChC;QAEAO,4CAAqB,CAACb,EAAE,CAAC,gBAAgB,CAACe;YACxC,IAAI,CAACC,uBAAuB,CAACD,OAAO;QACtC;QAEA9D,cAAM,CAACC,IAAI,CAAC;IACd;IAEA;;GAEC,GACD,AAAQG,sBAAsB;QAC5B,IAAI,CAACP,kBAAkB,GAAGmE,YAAY;YACpC,MAAM,IAAI,CAACC,mBAAmB;QAChC,GAAG,QAAQ,mBAAmB;QAE9BjE,cAAM,CAACC,IAAI,CAAC;IACd;IAEA;;GAEC,GACD,AAAQI,sBAAsB;QAC5B,IAAI,CAACP,sBAAsB,GAAGkE,YAAY;YACxC,MAAM,IAAI,CAACE,uBAAuB;QACpC,GAAG,QAAQ,eAAe;QAE1BlE,cAAM,CAACC,IAAI,CAAC;IACd;IAEA;;GAEC,GACD,AAAQK,yBAAyB;QAC/B0D,YAAY;YACV,MAAM,IAAI,CAACG,0BAA0B;QACvC,GAAG,SAAS,kBAAkB;QAE9BnE,cAAM,CAACC,IAAI,CAAC;IACd;IAEA;;GAEC,GACD,MAAcgE,sBAAoD;QAChE,MAAMG,SAASC,UAAK,CAACC,SAAS,CAAC;QAE/B,OAAOF,OAAOG,eAAe,CAAC,yBAAyB,OAAOC;YAC5D,IAAI;gBACF,MAAMC,YAAY,IAAIxC;gBAEtB,mCAAmC;gBACnC,MAAM,CACJyC,sBACAC,gBACAC,UACAC,kBACD,GAAG,MAAMC,QAAQC,GAAG,CAAC;oBACpB,IAAI,CAACC,uBAAuB;oBAC5B,IAAI,CAACC,iBAAiB;oBACtB,IAAI,CAACC,WAAW;oBAChB,IAAI,CAACC,oBAAoB;iBAC1B;gBAED,2BAA2B;gBAC3B,MAAMC,kBAAkB;oBACtBV,qBAAqBW,KAAK;oBAC1BV,eAAeU,KAAK;oBACpBT,SAASS,KAAK;oBACdR,kBAAkBQ,KAAK;iBACxB;gBAED,MAAMC,eAAeF,gBAAgBG,MAAM,CAAC,CAACC,KAAKH,QAAUG,MAAMH,OAAO,KAAKD,gBAAgBK,MAAM;gBACpG,MAAMC,gBAAgB,IAAI,CAACC,qBAAqB,CAACL;gBAEjD,MAAMM,gBAAqC;oBACzCnB;oBACAoB,SAAS;wBACPC,QAAQJ;wBACRL,OAAOC;wBACPS,QAAQC,QAAQD,MAAM;oBACxB;oBACAE,YAAY;wBACVC,gBAAgBxB;wBAChByB,aAAa,IAAI,CAACC,oBAAoB;wBACtCC,UAAU,IAAI,CAACC,iBAAiB;wBAChCC,OAAO,IAAI,CAACC,cAAc;wBAC1BC,IAAI7B;wBACJ8B,UAAU/B;wBACVgC,aAAa9B;wBACb+B,YAAY,IAAI,CAACC,mBAAmB;oBACtC;oBACAC,aAAa;wBACXC,UAAU,MAAM,IAAI,CAACC,aAAa,CAAC;wBACnCC,YAAY,MAAM,IAAI,CAACD,aAAa,CAAC;wBACrCE,aAAa,MAAM,IAAI,CAACF,aAAa,CAAC;oBACxC;oBACAG,iBAAiB,IAAI,CAACC,6BAA6B,CAAC9B;oBACpD5F,cAAc2H,MAAMC,IAAI,CAAC,IAAI,CAAC5H,YAAY,CAAC6H,MAAM;gBACnD;gBAEA,uBAAuB;gBACvB,IAAI,CAAC3H,aAAa,CAAC4H,IAAI,CAAC5B;gBAExB,qCAAqC;gBACrC,MAAM6B,SAAS,IAAIxF,KAAKA,KAAKC,GAAG,KAAK,KAAK,KAAK,KAAK;gBACpD,IAAI,CAACtC,aAAa,GAAG,IAAI,CAACA,aAAa,CAAC8H,MAAM,CAACC,CAAAA,IAAKA,EAAElD,SAAS,GAAGgD;gBAElE,2BAA2B;gBAC3B,IAAI,CAACG,IAAI,CAAC,iBAAiBhC;gBAE3B,OAAOA;YAET,EAAE,OAAOrF,OAAO;gBACdiE,KAAKqD,SAAS,CAAC;oBAAEC,MAAM;oBAAGrH,SAASC,OAAOH;gBAAO;gBACjDP,cAAM,CAACO,KAAK,CAAC,mCAAmC;oBAC9CA,OAAOA,iBAAiBC,QAAQD,MAAME,OAAO,GAAGC,OAAOH;gBACzD;gBACA,MAAMA;YACR,SAAU;gBACRiE,KAAKuD,GAAG;YACV;QACF;IACF;IAEA;;GAEC,GACD,MAAc7D,0BAA0B;QACtC,MAAM8D,iBAAiB,MAAM,IAAI,CAACC,iBAAiB;QAEnD,KAAK,MAAMlG,QAAQ,IAAI,CAACvC,KAAK,CAAC+H,MAAM,GAAI;YACtC,IAAI,CAACxF,KAAKQ,OAAO,EAAE;YAEnB,wBAAwB;YACxB,IAAIR,KAAKmG,aAAa,EAAE;gBACtB,MAAMC,mBAAmBlG,KAAKC,GAAG,KAAKH,KAAKmG,aAAa,CAACE,OAAO;gBAChE,IAAID,mBAAmBpG,KAAKN,cAAc,GAAG,KAAK,MAAM;oBACtD;gBACF;YACF;YAEA,IAAI;gBACF,MAAM4G,gBAAgB,MAAM,IAAI,CAACC,YAAY,CAACvG,MAAMiG;gBAEpD,IAAIK,eAAe;oBACjB,MAAM,IAAI,CAACE,WAAW,CAACxG;gBACzB;YACF,EAAE,OAAOxB,OAAO;gBACdP,cAAM,CAACO,KAAK,CAAC,0BAA0B;oBACrCiI,QAAQzG,KAAKC,EAAE;oBACfzB,OAAOA,iBAAiBC,QAAQD,MAAME,OAAO,GAAGC,OAAOH;gBACzD;YACF;QACF;IACF;IAEA;;GAEC,GACD,MAAc4D,6BAA6B;QACzC,IAAI;YACF,MAAMxE,WAAgC,EAAE;YAExC,6BAA6B;YAC7B,MAAM8I,oBAAoB,IAAI,CAACC,wBAAwB;YACvD/I,SAAS6H,IAAI,IAAIiB;YAEjB,6BAA6B;YAC7B,MAAME,mBAAmB,MAAM,IAAI,CAACC,wBAAwB;YAC5DjJ,SAAS6H,IAAI,IAAImB;YAEjB,4BAA4B;YAC5B,MAAME,mBAAmB,IAAI,CAACC,uBAAuB;YACrDnJ,SAAS6H,IAAI,IAAIqB;YAEjB,kCAAkC;YAClC,MAAME,eAAe,MAAM,IAAI,CAACC,yBAAyB;YACzDrJ,SAAS6H,IAAI,IAAIuB;YAEjB,2BAA2B;YAC3B,MAAME,sBAAsB,IAAI,CAACC,0BAA0B;YAC3DvJ,SAAS6H,IAAI,IAAIyB;YAEjB,iBAAiB;YACjB,IAAI,CAACtJ,QAAQ,CAAC6H,IAAI,IAAI7H;YAEtB,oCAAoC;YACpC,MAAM8H,SAAS,IAAIxF,KAAKA,KAAKC,GAAG,KAAK,IAAI,KAAK,KAAK,KAAK;YACxD,IAAI,CAACvC,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAAC+H,MAAM,CAACyB,CAAAA,IAAKA,EAAEC,SAAS,GAAG3B;YAExD,gBAAgB;YAChB,IAAI9H,SAAS8F,MAAM,GAAG,GAAG;gBACvB,IAAI,CAACmC,IAAI,CAAC,sBAAsBjI;YAClC;YAEAK,cAAM,CAACC,IAAI,CAAC,iCAAiC;gBAC3CoJ,aAAa1J,SAAS8F,MAAM;gBAC5B6D,eAAe,IAAI,CAAC3J,QAAQ,CAAC8F,MAAM;YACrC;QAEF,EAAE,OAAOlF,OAAO;YACdP,cAAM,CAACO,KAAK,CAAC,6BAA6B;gBACxCA,OAAOA,iBAAiBC,QAAQD,MAAME,OAAO,GAAGC,OAAOH;YACzD;QACF;IACF;IAEA;;GAEC,GACD,AAAQ0C,oBAAoBD,KAAU,EAAE;QACtChD,cAAM,CAACC,IAAI,CAAC,6BAA6B;YACvCa,MAAMkC,MAAMlC,IAAI;YAChBC,UAAUiC,MAAMjC,QAAQ;QAC1B;QAEA,mCAAmC;QACnC,IAAI,CAACwI,mBAAmB,CAAC,kBAAkBvG;IAC7C;IAEA;;GAEC,GACD,AAAQG,sBAAsBD,OAAY,EAAE;QAC1ClD,cAAM,CAACwJ,IAAI,CAAC,6BAA6B;YACvCnE,OAAOnC,QAAQmC,KAAK;YACpBoE,UAAUvG,QAAQuG,QAAQ;QAC5B;QAEA,8CAA8C;QAC9C,IAAI,CAACC,YAAY,CAAC,yBAAyBxG,QAAQmC,KAAK;IAC1D;IAEA;;GAEC,GACD,AAAQ/B,2BAA2BD,IAAS,EAAE;QAC5C,IAAI,CAACqG,YAAY,CAAC,mCAAmCrG,KAAKsG,gBAAgB;QAC1E,IAAI,CAACD,YAAY,CAAC,gCAAgCrG,KAAKuG,aAAa;IACtE;IAEA;;GAEC,GACD,AAAQrG,mBAAmBF,IAAS,EAAE;QACpCrD,cAAM,CAACC,IAAI,CAAC,oCAAoC;YAC9C4J,YAAYxG,KAAKwG,UAAU;YAC3BC,QAAQzG,KAAK0G,YAAY,CAACD,MAAM;QAClC;QAEA,gCAAgC;QAChC,IAAI,CAACJ,YAAY,CAAC,gCAAgC;IACpD;IAEA;;GAEC,GACD,AAAQlG,2BAA2BH,IAAS,EAAE;QAC5C,IAAIA,KAAK2G,SAAS,KAAK,YAAY;YACjC,IAAI,CAACN,YAAY,CAAC,oCAAoC;QACxD;IACF;IAEA;;GAEC,GACD,AAAQhG,0BAA0BL,IAAS,EAAE;QAC3C,IAAI,CAACqG,YAAY,CAAC,4BAA4B,IAAI,YAAY;QAC9D,IAAI,CAACA,YAAY,CAAC,4BAA4BrG,KAAK4G,YAAY;IACjE;IAEA;;GAEC,GACD,AAAQtG,uBAAuBN,IAAS,EAAE;QACxCrD,cAAM,CAACC,IAAI,CAAC,8BAA8B;YACxCiK,UAAU7G,KAAK6G,QAAQ;YACvBC,SAAS9G,KAAK8G,OAAO;QACvB;QAEA,IAAI,CAAC9G,KAAK8G,OAAO,EAAE;YACjB,IAAI,CAACT,YAAY,CAAC,+BAA+B;QACnD;IACF;IAEA;;GAEC,GACD,AAAQ7F,yBAAyBR,IAAS,EAAE;QAC1C,IAAI,CAACqG,YAAY,CAAC,qBAAqB;IACzC;IAEA;;GAEC,GACD,AAAQ3F,wBAAwBD,KAAU,EAAEgC,MAAc,EAAE;QAC1D,IAAIA,WAAW,WAAW;YACxB,IAAI,CAAC4D,YAAY,CAAC,oBAAoB;QACxC;IACF;IAEA,4BAA4B;IAC5B,MAAc1E,0BAAoD;QAChE,IAAI;YACF,MAAMc,SAAS,MAAM1C,gEAA+B,CAACgH,uBAAuB;YAC5E,MAAMC,eAAevE,OAAOwE,QAAQ,CAACX,gBAAgB;YACrD,MAAMY,aAAazE,OAAOwE,QAAQ,CAACE,cAAc;YACjD,MAAMnF,QAAQkF,aAAa,IAAI,AAACF,eAAeE,aAAc,MAAM;YAEnE,OAAO;gBACLzE,QAAQ,IAAI,CAACH,qBAAqB,CAACN;gBACnCA;gBACAoF,SAAS;oBACPd,kBAAkBU;oBAClBG,gBAAgBD;oBAChBG,mBAAmB5E,OAAOwE,QAAQ,CAACI,iBAAiB;oBACpDC,aAAa7E,OAAO8E,SAAS,CAACC,OAAO;gBACvC;gBACAC,WAAW,IAAI7I;gBACf8I,QAAQjF,OAAOwE,QAAQ,CAACI,iBAAiB,GAAG,IAC1C;oBAAC,GAAG5E,OAAOwE,QAAQ,CAACI,iBAAiB,CAAC,4BAA4B,CAAC;iBAAC,GAAG,EAAE;gBAC3EvD,iBAAiB9B,QAAQ,KAAK;oBAAC;oBAA6B;iBAAmB,GAAG,EAAE;YACtF;QACF,EAAE,OAAO9E,OAAO;YACd,OAAO,IAAI,CAACyK,iBAAiB,CAAC,kBAAkBzK;QAClD;IACF;IAEA,MAAc0E,oBAA8C;QAC1D,IAAI;YACF,MAAMgG,eAAe,MAAMnI,gCAAe,CAACoI,eAAe,CAAC,KAAK,YAAY;YAC5E,MAAMC,iBAAiBF,aAAavD,MAAM,CAAC0D,CAAAA,IAAKA,EAAErK,QAAQ,KAAK,YAAY0E,MAAM;YACjF,MAAMJ,QAAQlD,KAAKkJ,GAAG,CAAC,GAAG,MAAOF,iBAAiB;YAElD,OAAO;gBACLrF,QAAQ,IAAI,CAACH,qBAAqB,CAACN;gBACnCA;gBACAoF,SAAS;oBACPQ,cAAcA,aAAaxF,MAAM;oBACjC0F;oBACAG,WAAWL,aAAavD,MAAM,CAAC0D,CAAAA,IAAKA,EAAEtK,IAAI,KAAK,WAAW2E,MAAM;gBAClE;gBACAqF,WAAW,IAAI7I;gBACf8I,QAAQI,iBAAiB,IAAI;oBAAC,GAAGA,eAAe,yBAAyB,CAAC;iBAAC,GAAG,EAAE;gBAChFhE,iBAAiBgE,iBAAiB,IAAI;oBAAC;oBAA0B;iBAAqB,GAAG,EAAE;YAC7F;QACF,EAAE,OAAO5K,OAAO;YACd,OAAO,IAAI,CAACyK,iBAAiB,CAAC,YAAYzK;QAC5C;IACF;IAEA,MAAc2E,cAAwC;QACpD,IAAI;YACF,MAAMqG,QAAQ,MAAMC,0CAAoB,CAACC,iBAAiB;YAC1D,MAAMC,cAAcH,MAAMI,UAAU,GAAG,IACrC,AAACJ,MAAMK,eAAe,GAAGL,MAAMI,UAAU,GAAI,MAAM;YAErD,OAAO;gBACL7F,QAAQ,IAAI,CAACH,qBAAqB,CAAC+F;gBACnCrG,OAAOqG;gBACPjB,SAAS;oBACPkB,YAAYJ,MAAMI,UAAU;oBAC5BC,iBAAiBL,MAAMK,eAAe;oBACtCC,aAAaN,MAAMM,WAAW;oBAC9BH;gBACF;gBACAZ,WAAW,IAAI7I;gBACf8I,QAAQW,cAAc,KAAK;oBAAC;iBAAgC,GAAG,EAAE;gBACjEvE,iBAAiBuE,cAAc,KAAK;oBAAC;oBAAuB;iBAAkB,GAAG,EAAE;YACrF;QACF,EAAE,OAAOnL,OAAO;YACd,OAAO,IAAI,CAACyK,iBAAiB,CAAC,MAAMzK;QACtC;IACF;IAEA,MAAc4E,uBAAiD;QAC7D,IAAI;YACF,MAAMsF,UAAU,MAAMhH,wDAA2B,CAACqI,qBAAqB;YACvE,MAAMC,YAAY;gBAAEC,WAAW;gBAAKC,MAAM;gBAAIC,SAAS;gBAAIC,UAAU;YAAG;YACxE,MAAM9G,QAAQ0G,SAAS,CAACtB,QAAQ5F,iBAAiB,CAAC,IAAI;YAEtD,OAAO;gBACLiB,QAAQ,IAAI,CAACH,qBAAqB,CAACN;gBACnCA;gBACAoF,SAAS;oBACP2B,kBAAkB3B,QAAQ2B,gBAAgB;oBAC1CC,cAAc5B,QAAQ4B,YAAY;oBAClCC,qBAAqB7B,QAAQ6B,mBAAmB;gBAClD;gBACAxB,WAAW,IAAI7I;gBACf8I,QAAQ1F,QAAQ,KAAK;oBAAC;iBAAqC,GAAG,EAAE;gBAChE8B,iBAAiB9B,QAAQ,KAAK;oBAAC;oBAA2B;iBAAiB,GAAG,EAAE;YAClF;QACF,EAAE,OAAO9E,OAAO;YACd,OAAO,IAAI,CAACyK,iBAAiB,CAAC,eAAezK;QAC/C;IACF;IAEQ6F,uBAAwC;QAC9C,sDAAsD;QACtD,MAAML,SAASC,QAAQD,MAAM;QAC7B,MAAMwG,WAAWvG,QAAQwG,WAAW;QACpC,MAAMnH,QAAQlD,KAAKsK,GAAG,CAAC,KAAK1G,SAAS,OAAO,KAAK,wBAAwB;QAEzE,OAAO;YACLD,QAAQ,IAAI,CAACH,qBAAqB,CAACN;YACnCA;YACAoF,SAAS;gBACP1E;gBACAyG,aAAaD,SAASG,GAAG;gBACzBC,UAAUJ,SAASI,QAAQ;YAC7B;YACA7B,WAAW,IAAI7I;YACf8I,QAAQ1F,QAAQ,KAAK;gBAAC;aAAiC,GAAG,EAAE;YAC5D8B,iBAAiB,EAAE;QACrB;IACF;IAEQb,oBAAqC;QAC3C,kCAAkC;QAClC,OAAO;YACLR,QAAQ;YACRT,OAAO;YACPoF,SAAS;gBACPmC,aAAa;gBACbC,cAAc;YAChB;YACA/B,WAAW,IAAI7I;YACf8I,QAAQ,EAAE;YACV5D,iBAAiB,EAAE;QACrB;IACF;IAEQX,iBAAkC;QACxC,+BAA+B;QAC/B,OAAO;YACLV,QAAQ;YACRT,OAAO;YACPoF,SAAS;gBACPqC,SAAS;gBACTN,aAAa;YACf;YACA1B,WAAW,IAAI7I;YACf8I,QAAQ,EAAE;YACV5D,iBAAiB,EAAE;QACrB;IACF;IAEQN,sBAAuC;QAC7C,MAAMxB,QAAQ,IAAI,CAAC3F,YAAY,CAACmD,IAAI,GAAG,IAAI,MAAMV,KAAKkJ,GAAG,CAAC,GAAG,MAAM,IAAI,CAAC3L,YAAY,CAACmD,IAAI,GAAG;QAE5F,OAAO;YACLiD,QAAQ,IAAI,CAACH,qBAAqB,CAACN;YACnCA;YACAoF,SAAS;gBACP/K,cAAc,IAAI,CAACA,YAAY,CAACmD,IAAI;gBACpCD,YAAY,IAAI,CAACpD,KAAK,CAACqD,IAAI;gBAC3BkK,eAAe,IAAI,CAACpN,QAAQ,CAAC8F,MAAM;YACrC;YACAqF,WAAW,IAAI7I;YACf8I,QAAQ,IAAI,CAACrL,YAAY,CAACmD,IAAI,GAAG,IAAI;gBAAC;aAA+B,GAAG,EAAE;YAC1EsE,iBAAiB,IAAI,CAACzH,YAAY,CAACmD,IAAI,GAAG,IAAI;gBAAC;aAA6B,GAAG,EAAE;QACnF;IACF;IAEA,iBAAiB;IACT8C,sBAAsBN,KAAa,EAA+C;QACxF,IAAIA,SAAS,IAAI,OAAO;QACxB,IAAIA,SAAS,IAAI,OAAO;QACxB,IAAIA,SAAS,IAAI,OAAO;QACxB,OAAO;IACT;IAEQ2F,kBAAkBgC,SAAiB,EAAEzM,KAAU,EAAmB;QACxE,OAAO;YACLuF,QAAQ;YACRT,OAAO;YACPoF,SAAS,CAAC;YACVK,WAAW,IAAI7I;YACf8I,QAAQ;gBAAC,GAAGiC,UAAU,sBAAsB,EAAEzM,iBAAiBC,QAAQD,MAAME,OAAO,GAAG,iBAAiB;aAAC;YACzG0G,iBAAiB;gBAAC,CAAC,MAAM,EAAE6F,UAAU,aAAa,CAAC;gBAAE;aAAc;QACrE;IACF;IAEA,MAAc/E,oBAAqD;QACjE,IAAI;YACF,MAAMwC,UAAkC,CAAC;YAEzC,6BAA6B;YAC7B,MAAMwC,cAAc,MAAM7J,gEAA+B,CAACgH,uBAAuB;YACjFK,OAAO,CAAC,kCAAkC,GAAGwC,YAAY3C,QAAQ,CAACX,gBAAgB;YAClFc,OAAO,CAAC,mCAAmC,GAAGwC,YAAY3C,QAAQ,CAACI,iBAAiB;YACpFD,OAAO,CAAC,gCAAgC,GAAGwC,YAAY3C,QAAQ,CAACE,cAAc;YAE9E,uBAAuB;YACvB,MAAM0C,iBAAiB,MAAMpK,gCAAe,CAACoI,eAAe,CAAC;YAC7DT,OAAO,CAAC,wBAAwB,GAAGyC,eAAezH,MAAM;YACxDgF,OAAO,CAAC,0BAA0B,GAAGyC,eAAexF,MAAM,CAAC0D,CAAAA,IAAKA,EAAErK,QAAQ,KAAK,YAAY0E,MAAM;YAEjG,iBAAiB;YACjB,MAAM0H,UAAU,MAAM3B,0CAAoB,CAACC,iBAAiB;YAC5DhB,OAAO,CAAC,gBAAgB,GAAG0C,QAAQxB,UAAU;YAC7ClB,OAAO,CAAC,qBAAqB,GAAG0C,QAAQvB,eAAe;YACvDnB,OAAO,CAAC,iBAAiB,GAAG0C,QAAQtB,WAAW;YAC/CpB,OAAO,CAAC,qBAAqB,GAAG0C,QAAQxB,UAAU,GAAG,IAAI,AAACwB,QAAQtB,WAAW,GAAGsB,QAAQxB,UAAU,GAAI,MAAM;YAE5G,0BAA0B;YAC1B,MAAMyB,qBAAqB,MAAM3J,wDAA2B,CAACqI,qBAAqB;YAClF,MAAMuB,mBAAmBD,mBAAmBC,gBAAgB;YAC5D5C,OAAO,CAAC,2BAA2B,GAAG4C,mBACpC,AAACpL,CAAAA,KAAKC,GAAG,KAAK,IAAID,KAAKoL,kBAAkBjF,OAAO,EAAC,IAAM,CAAA,OAAO,EAAC,IAAK,GAAG,cAAc;YAEvF,sBAAsB;YACtBqC,OAAO,CAAC,qBAAqB,GAAGzE,QAAQD,MAAM;YAC9C0E,OAAO,CAAC,0BAA0B,GAAGzE,QAAQwG,WAAW,GAAGE,GAAG,GAAG,OAAO,MAAM,KAAK;YAEnF,oEAAoE;YACpEjC,OAAO,CAAC,wBAAwB,GAAG,IAAI,KAAK;YAC5CA,OAAO,CAAC,uBAAuB,GAAG;YAElC,2BAA2B;YAC3BA,OAAO,CAAC,wBAAwB,GAAG,GAAG,UAAU;YAEhD,OAAOA;QACT,EAAE,OAAOlK,OAAO;YACdP,cAAM,CAACO,KAAK,CAAC,qCAAqC;gBAChDA,OAAOA,iBAAiBC,QAAQD,MAAME,OAAO,GAAGC,OAAOH;YACzD;YACA,OAAO,CAAC;QACV;IACF;IAEA,MAAc+H,aAAavG,IAAoB,EAAE0I,OAA+B,EAAoB;QAClG,IAAI;YACF,iDAAiD;YACjD,KAAK,MAAM6C,aAAavL,KAAKf,UAAU,CAAE;gBACvC,MAAMuM,cAAc9C,OAAO,CAAC6C,UAAUrM,MAAM,CAAC;gBAC7C,IAAIsM,gBAAgBC,WAAW;oBAC7BxN,cAAM,CAACyN,KAAK,CAAC,wCAAwC;wBACnDjF,QAAQzG,KAAKC,EAAE;wBACff,QAAQqM,UAAUrM,MAAM;oBAC1B;oBACA,OAAO;gBACT;gBAEA,MAAMyM,eAAe,IAAI,CAACC,iBAAiB,CAACL,WAAWC;gBACvD,IAAI,CAACG,cAAc;oBACjB,OAAO;gBACT;YACF;YAEA,OAAO;QACT,EAAE,OAAOnN,OAAO;YACdP,cAAM,CAACO,KAAK,CAAC,0BAA0B;gBACrCiI,QAAQzG,KAAKC,EAAE;gBACfzB,OAAOA,iBAAiBC,QAAQD,MAAME,OAAO,GAAGC,OAAOH;YACzD;YACA,OAAO;QACT;IACF;IAEA,MAAcgI,YAAYxG,IAAoB,EAAE;QAC9C/B,cAAM,CAACC,IAAI,CAAC,8BAA8B;YACxCuI,QAAQzG,KAAKC,EAAE;YACf4L,UAAU7L,KAAKnB,IAAI;QACrB;QAEAmB,KAAKmG,aAAa,GAAG,IAAIjG;QACzBF,KAAKS,YAAY;QAEjB,uBAAuB;QACvB,KAAK,MAAMsH,UAAU/H,KAAKV,OAAO,CAAE;YACjC,IAAI;gBACF,MAAM,IAAI,CAACwM,aAAa,CAAC/D,QAAQ/H;YACnC,EAAE,OAAOxB,OAAO;gBACdP,cAAM,CAACO,KAAK,CAAC,2BAA2B;oBACtCiI,QAAQzG,KAAKC,EAAE;oBACf8L,YAAYhE,OAAOhJ,IAAI;oBACvBP,OAAOA,iBAAiBC,QAAQD,MAAME,OAAO,GAAGC,OAAOH;gBACzD;YACF;QACF;IACF;IAEA,MAAcsN,cAAc/D,MAAwB,EAAE/H,IAAoB,EAAE;QAC1E,OAAQ+H,OAAOhJ,IAAI;YACjB,KAAK;gBACH,MAAM,IAAI,CAACiN,SAAS,CAACjE,QAAQ/H;gBAC7B;YACF,KAAK;gBACH,MAAM,IAAI,CAACiM,gBAAgB,CAAClE;gBAC5B;YACF,KAAK;gBACH,MAAM,IAAI,CAACmE,cAAc,CAACnE;gBAC1B;YACF,KAAK;gBACH,MAAM,IAAI,CAACoE,UAAU,CAACpE;gBACtB;YACF,KAAK;gBACH,MAAM,IAAI,CAACqE,WAAW,CAACrE,QAAQ/H;gBAC/B;YACF,KAAK;gBACH,MAAM,IAAI,CAACqM,aAAa,CAACtE,QAAQ/H;gBACjC;QACJ;IACF;IAEA,MAAcgM,UAAUjE,MAAwB,EAAE/H,IAAoB,EAAE;QACtE,MAAMR,WAAWuI,OAAOxI,MAAM,CAACC,QAAQ,IAAI;YAAC;SAAQ;QACpD,MAAMd,UAAUqJ,OAAOxI,MAAM,CAACb,OAAO,IAAIsB,KAAKlB,WAAW;QACzD,MAAME,WAAW+I,OAAOxI,MAAM,CAACP,QAAQ,IAAIgB,KAAKhB,QAAQ;QAExD,KAAK,MAAMsN,WAAW9M,SAAU;YAC9B,IAAI;gBACF,MAAM+M,8BAAc,CAACP,SAAS,CAAC;oBAC7BjN,MAAM;oBACNC;oBACAN;oBACA8N,SAAS;wBAAE/F,QAAQzG,KAAKC,EAAE;wBAAE4L,UAAU7L,KAAKnB,IAAI;oBAAC;gBAClD,GAAG;oBAACyN;iBAAQ;YACd,EAAE,OAAO9N,OAAO;gBACdP,cAAM,CAACO,KAAK,CAAC,wBAAwB;oBACnC8N;oBACA9N,OAAOA,iBAAiBC,QAAQD,MAAME,OAAO,GAAGC,OAAOH;gBACzD;YACF;QACF;IACF;IAEA,MAAcyN,iBAAiBlE,MAAwB,EAAE;QACvD,sCAAsC;QACtC9J,cAAM,CAACC,IAAI,CAAC;IACd;IAEA,MAAcgO,eAAenE,MAAwB,EAAE;QACrD,wBAAwB;QACxB9J,cAAM,CAACC,IAAI,CAAC;IACd;IAEA,MAAciO,WAAWpE,MAAwB,EAAE;QACjD,oCAAoC;QACpC9J,cAAM,CAACC,IAAI,CAAC;IACd;IAEA,MAAckO,YAAYrE,MAAwB,EAAE/H,IAAoB,EAAE;QACxE,MAAMyM,eAAe1E,OAAOxI,MAAM,CAACE,iBAAiB,IAAI;YAAC;SAAc;QACvE,MAAMf,UAAUqJ,OAAOxI,MAAM,CAACb,OAAO,IAAIsB,KAAKlB,WAAW;QAEzD,IAAI;YACF,MAAM+C,4CAAqB,CAAC6K,yBAAyB,CAAC;gBACpDC,sBAAsBF;gBACtBG,WAAWlO;gBACXmO,UAAU7M,KAAKhB,QAAQ,KAAK,aAAa,aAAa;gBACtD8N,aAAa;YACf;QACF,EAAE,OAAOtO,OAAO;YACdP,cAAM,CAACO,KAAK,CAAC,6BAA6B;gBACxCA,OAAOA,iBAAiBC,QAAQD,MAAME,OAAO,GAAGC,OAAOH;YACzD;QACF;IACF;IAEA,MAAc6N,cAActE,MAAwB,EAAE/H,IAAoB,EAAE;QAC1E,MAAMH,iBAAiBkI,OAAOxI,MAAM,CAACM,cAAc,IAAI;YAAC;SAAQ;QAEhE5B,cAAM,CAACC,IAAI,CAAC,oBAAoB;YAC9BuI,QAAQzG,KAAKC,EAAE;YACfJ;QACF;QAEA,yBAAyB;QACzB,MAAMkN,QAAqB;YACzB9M,IAAI,CAAC,MAAM,EAAEC,KAAKC,GAAG,GAAG,CAAC,EAAEC,KAAKC,MAAM,GAAGC,QAAQ,CAAC,IAAIC,MAAM,CAAC,GAAG,IAAI;YACpEP,MAAMA,KAAKC,EAAE;YACbjB,UAAUgB,KAAKhB,QAAQ;YACvBN,SAASsB,KAAKlB,WAAW;YACzBmM,WAAW;YACX+B,aAAa,IAAI9M;YACjB+M,WAAW;YACX3N,SAAS;gBAAC;aAAY;QACxB;QAEA,IAAI,CAAC3B,YAAY,CAACiD,GAAG,CAACmM,MAAM9M,EAAE,EAAE8M;IAClC;IAEQvF,oBAAoBtI,MAAc,EAAEE,KAAU,EAAE;QACtD,wDAAwD;QACxD,KAAK,MAAMY,QAAQ,IAAI,CAACvC,KAAK,CAAC+H,MAAM,GAAI;YACtC,IAAI,CAACxF,KAAKQ,OAAO,EAAE;YAEnB,+CAA+C;YAC/C,MAAM0M,YAAYlN,KAAKf,UAAU,CAACkO,IAAI,CAACC,CAAAA,IAAKA,EAAElO,MAAM,KAAKA;YACzD,IAAI,CAACgO,WAAW;YAEhB,iBAAiB;YACjB,IAAIlN,KAAKmG,aAAa,EAAE;gBACtB,MAAMC,mBAAmBlG,KAAKC,GAAG,KAAKH,KAAKmG,aAAa,CAACE,OAAO;gBAChE,IAAID,mBAAmBpG,KAAKN,cAAc,GAAG,KAAK,MAAM;oBACtD;gBACF;YACF;YAEA,uCAAuC;YACvC,MAAMuG,iBAAiB;gBAAE,CAAC/G,OAAO,EAAEE;YAAM;YAEzC,uCAAuC;YACvC,IAAI,CAACmH,YAAY,CAACvG,MAAMiG,gBAAgBoH,IAAI,CAAC/G,CAAAA;gBAC3C,IAAIA,eAAe;oBACjB,IAAI,CAACE,WAAW,CAACxG,MAAMsN,KAAK,CAAC9O,CAAAA;wBAC3BP,cAAM,CAACO,KAAK,CAAC,0BAA0B;4BACrCiI,QAAQzG,KAAKC,EAAE;4BACfzB,OAAOA,iBAAiBC,QAAQD,MAAME,OAAO,GAAGC,OAAOH;wBACzD;oBACF;gBACF;YACF,GAAG8O,KAAK,CAAC9O,CAAAA;gBACPP,cAAM,CAACO,KAAK,CAAC,0BAA0B;oBACrCiI,QAAQzG,KAAKC,EAAE;oBACfzB,OAAOA,iBAAiBC,QAAQD,MAAME,OAAO,GAAGC,OAAOH;gBACzD;YACF;QACF;IACF;IAEQmJ,aAAazI,MAAc,EAAEE,KAAa,EAAE;QAClD,uDAAuD;QACvD,IAAI,CAACoI,mBAAmB,CAACtI,QAAQE;QAEjC,2BAA2B;QAC3B,IAAI,CAACyG,IAAI,CAAC,kBAAkB;YAAE3G;YAAQE;YAAOsD,WAAW,IAAIxC;QAAO;IACrE;IAEA,MAAc+E,cAAcsI,KAAa,EAA6B;QACpE,oCAAoC;QACpC,OAAO;YACLxJ,QAAQ;YACRyJ,YAAY;YACZC,SAAS;gBAAC;aAAwB;YAClCC,aAAa,EAAE;QACjB;IACF;IAEQrI,8BAA8B/B,KAAa,EAAY;QAC7D,MAAM8B,kBAA4B,EAAE;QAEpC,IAAI9B,QAAQ,IAAI;YACd8B,gBAAgBK,IAAI,CAAC;QACvB;QACA,IAAInC,QAAQ,IAAI;YACd8B,gBAAgBK,IAAI,CAAC;YACrBL,gBAAgBK,IAAI,CAAC;QACvB;QACA,IAAInC,QAAQ,IAAI;YACd8B,gBAAgBK,IAAI,CAAC;QACvB;QAEA,OAAOL;IACT;IAEA,6BAA6B;IACrBuB,2BAAgD;QACtD,MAAM/I,WAAgC,EAAE;QAExC,IAAI;YACF,4CAA4C;YAC5C,IAAI,IAAI,CAACC,aAAa,CAAC6F,MAAM,IAAI,GAAG;gBAClC,MAAMiK,SAAS,IAAI,CAAC9P,aAAa,CAAC+P,KAAK,CAAC,CAAC;gBACzC,MAAMC,SAASF,OAAOG,GAAG,CAAClI,CAAAA,IAAKA,EAAE9B,OAAO,CAACR,KAAK;gBAC9C,MAAMyK,WAAWF,OAAOrK,MAAM,CAAC,CAACC,KAAKH,QAAUG,MAAMH,OAAO,KAAKuK,OAAOnK,MAAM;gBAE9E,kCAAkC;gBAClC,MAAMsK,eAAeH,OAAOI,KAAK,CAAC,CAAC3K,OAAO8D,IAAMA,MAAM,KAAK9D,SAASuK,MAAM,CAACzG,IAAI,EAAE;gBAEjF,IAAI4G,gBAAgBD,WAAW,IAAI;oBACjCnQ,SAAS6H,IAAI,CAAC;wBACZxF,IAAI,CAAC,WAAW,EAAEC,KAAKC,GAAG,IAAI;wBAC9BpB,MAAM;wBACNyO,YAAY;wBACZU,QAAQ;wBACRxP,SAAS;wBACT8N,SAAS;4BAAEuB;4BAAUI,OAAO;4BAAaC,YAAYP,OAAOnK,MAAM;wBAAC;wBACnE0B,iBAAiB;4BACf;4BACA;4BACA;yBACD;wBACDiJ,kBAAkB;wBAClBC,qBAAqB;wBACrBjH,WAAW,IAAInH;oBACjB;gBACF;YACF;YAEA,OAAOtC;QACT,EAAE,OAAOY,OAAO;YACdP,cAAM,CAACO,KAAK,CAAC,qCAAqC;gBAChDA,OAAOA,iBAAiBC,QAAQD,MAAME,OAAO,GAAGC,OAAOH;YACzD;YACA,OAAO,EAAE;QACX;IACF;IAEA,MAAcqI,2BAAyD;QACrE,MAAMjJ,WAAgC,EAAE;QAExC,IAAI;YACF,oCAAoC;YACpC,MAAMsN,cAAc,MAAM7J,gEAA+B,CAACgH,uBAAuB;YAEjF,8BAA8B;YAC9B,MAAMkG,kBAAkBrD,YAAY3C,QAAQ,CAACE,cAAc,GAAG,IAC3DyC,YAAY3C,QAAQ,CAACX,gBAAgB,GAAGsD,YAAY3C,QAAQ,CAACE,cAAc,GAAI;YAElF,IAAI8F,kBAAkB,MAAM;gBAC1B3Q,SAAS6H,IAAI,CAAC;oBACZxF,IAAI,CAAC,iBAAiB,EAAEC,KAAKC,GAAG,IAAI;oBACpCpB,MAAM;oBACNyO,YAAY;oBACZU,QAAQ;oBACRxP,SAAS;oBACT8N,SAAS;wBACP+B,iBAAiB,AAACA,CAAAA,kBAAkB,GAAE,EAAGC,OAAO,CAAC;wBACjD/F,gBAAgByC,YAAY3C,QAAQ,CAACE,cAAc;wBACnDb,kBAAkBsD,YAAY3C,QAAQ,CAACX,gBAAgB;oBACzD;oBACAxC,iBAAiB;wBACf;wBACA;wBACA;qBACD;oBACDiJ,kBAAkB;oBAClBC,qBAAqB;oBACrBjH,WAAW,IAAInH;gBACjB;YACF;YAEA,OAAOtC;QACT,EAAE,OAAOY,OAAO;YACdP,cAAM,CAACO,KAAK,CAAC,uCAAuC;gBAClDA,OAAOA,iBAAiBC,QAAQD,MAAME,OAAO,GAAGC,OAAOH;YACzD;YACA,OAAO,EAAE;QACX;IACF;IAEQuI,0BAA+C;QACrD,MAAMnJ,WAAgC,EAAE;QAExC,IAAI;YACF,8CAA8C;YAC9CmD,gCAAe,CAACoI,eAAe,CAAC,IAAIkE,IAAI,CAACoB,CAAAA;gBACvC,MAAMC,eAAeD,OAAOjL,MAAM,CAAC,CAACmL,KAAK1N;oBACvC0N,GAAG,CAAC1N,MAAMlC,IAAI,CAAC,GAAG,AAAC4P,CAAAA,GAAG,CAAC1N,MAAMlC,IAAI,CAAC,IAAI,CAAA,IAAK;oBAC3C,OAAO4P;gBACT,GAAG,CAAC;gBAEJ,6BAA6B;gBAC7B,MAAMC,cAAcH,OAAO/K,MAAM;gBACjC,IAAIkL,cAAc,IAAI;oBACpB,MAAMC,iBAAiBC,OAAOC,OAAO,CAACL,cACnCM,IAAI,CAAC,CAAC,GAAEC,EAAE,EAAE,GAAEC,EAAE,GAAKA,IAAID,EAAE,CAAC,EAAE;oBAEjC,IAAIJ,kBAAkBA,cAAc,CAAC,EAAE,GAAGD,cAAc,KAAK;wBAC3DhR,SAAS6H,IAAI,CAAC;4BACZxF,IAAI,CAAC,iBAAiB,EAAEC,KAAKC,GAAG,IAAI;4BACpCpB,MAAM;4BACNyO,YAAY;4BACZU,QAAQ;4BACRxP,SAAS,CAAC,yBAAyB,EAAEmQ,cAAc,CAAC,EAAE,CAAC,gBAAgB,CAAC;4BACxErC,SAAS;gCACP2C,WAAWN,cAAc,CAAC,EAAE;gCAC5BO,OAAOP,cAAc,CAAC,EAAE;gCACxBQ,YAAY,AAAC,CAAA,AAACR,cAAc,CAAC,EAAE,GAAGD,cAAe,GAAE,EAAGJ,OAAO,CAAC;4BAChE;4BACApJ,iBAAiB;gCACf;gCACA;gCACA;6BACD;4BACDiJ,kBAAkB;4BAClBC,qBAAqB;4BACrBjH,WAAW,IAAInH;wBACjB;oBACF;gBACF;YACF,GAAGoN,KAAK,CAAC9O,CAAAA;gBACPP,cAAM,CAACO,KAAK,CAAC,oCAAoC;oBAC/CA,OAAOA,iBAAiBC,QAAQD,MAAME,OAAO,GAAGC,OAAOH;gBACzD;YACF;YAEA,OAAOZ;QACT,EAAE,OAAOY,OAAO;YACdP,cAAM,CAACO,KAAK,CAAC,oCAAoC;gBAC/CA,OAAOA,iBAAiBC,QAAQD,MAAME,OAAO,GAAGC,OAAOH;YACzD;YACA,OAAO,EAAE;QACX;IACF;IAEA,MAAcyI,4BAA0D;QACtE,MAAMrJ,WAAgC,EAAE;QAExC,IAAI;YACF,4CAA4C;YAC5C,MAAMsN,cAAc,MAAM7J,gEAA+B,CAACgH,uBAAuB;YAEjF,4CAA4C;YAC5C,IAAI6C,YAAYrC,SAAS,CAACC,OAAO,GAAG,MAAM;gBACxC,oCAAoC;gBACpC,MAAMyF,kBAAkBrD,YAAY3C,QAAQ,CAACE,cAAc,GAAG,IAC3DyC,YAAY3C,QAAQ,CAACX,gBAAgB,GAAGsD,YAAY3C,QAAQ,CAACE,cAAc,GAAI;gBAElF,IAAI8F,kBAAkB,KAAK;oBACzB3Q,SAAS6H,IAAI,CAAC;wBACZxF,IAAI,CAAC,kBAAkB,EAAEC,KAAKC,GAAG,IAAI;wBACrCpB,MAAM;wBACNyO,YAAY;wBACZU,QAAQ;wBACRxP,SAAS;wBACT8N,SAAS;4BACP5D,aAAasC,YAAYrC,SAAS,CAACC,OAAO;4BAC1CyF,iBAAiB,AAACA,CAAAA,kBAAkB,GAAE,EAAGC,OAAO,CAAC;4BACjDc,kBAAkB,AAACpE,CAAAA,YAAYrC,SAAS,CAACC,OAAO,GAAG,GAAE,EAAG0F,OAAO,CAAC;wBAClE;wBACApJ,iBAAiB;4BACf;4BACA;4BACA;yBACD;wBACDiJ,kBAAkB;wBAClBC,qBAAqB;wBACrBjH,WAAW,IAAInH;oBACjB;gBACF;YACF;YAEA,OAAOtC;QACT,EAAE,OAAOY,OAAO;YACdP,cAAM,CAACO,KAAK,CAAC,qCAAqC;gBAChDA,OAAOA,iBAAiBC,QAAQD,MAAME,OAAO,GAAGC,OAAOH;YACzD;YACA,OAAO,EAAE;QACX;IACF;IAEQ2I,6BAAkD;QACxD,MAAMvJ,WAAgC,EAAE;QAExC,IAAI;YACF,kCAAkC;YAClC,MAAMiF,WAAW4G,0CAAoB,CAAC8F,eAAe;YAErD,IAAI1M,SAASkB,MAAM,KAAK,aAAalB,SAASkB,MAAM,KAAK,YAAY;gBACnEnG,SAAS6H,IAAI,CAAC;oBACZxF,IAAI,CAAC,kBAAkB,EAAEC,KAAKC,GAAG,IAAI;oBACrCpB,MAAM;oBACNyO,YAAY;oBACZU,QAAQrL,SAASkB,MAAM,KAAK,aAAa,aAAa;oBACtDrF,SAAS;oBACT8N,SAAS;wBACPgD,cAAc3M,SAASkB,MAAM;wBAC7B0L,YAAY5M,SAASmG,MAAM,CAACtF,MAAM;wBAClCsF,QAAQnG,SAASmG,MAAM,CAAC4E,KAAK,CAAC,GAAG,GAAG,eAAe;oBACrD;oBACAxI,iBAAiBvC,SAASuC,eAAe;oBACzCiJ,kBAAkB;oBAClBC,qBAAqB;oBACrBjH,WAAW,IAAInH;gBACjB;YACF;YAEA,+CAA+C;YAC/C,MAAMwP,aAAa,IAAI,CAAC/R,YAAY,CAACmD,IAAI;YACzC,IAAI4O,aAAa,GAAG;gBAClB9R,SAAS6H,IAAI,CAAC;oBACZxF,IAAI,CAAC,mBAAmB,EAAEC,KAAKC,GAAG,IAAI;oBACtCpB,MAAM;oBACNyO,YAAY;oBACZU,QAAQ;oBACRxP,SAAS;oBACT8N,SAAS;wBACP7O,cAAc+R;wBACdC,YAAYrK,MAAMC,IAAI,CAAC,IAAI,CAAC5H,YAAY,CAAC6H,MAAM,IAAIsI,GAAG,CAACmB,CAAAA,IAAKA,EAAEhE,SAAS;oBACzE;oBACA7F,iBAAiB;wBACf;wBACA;wBACA;qBACD;oBACDiJ,kBAAkB;oBAClBC,qBAAqB;oBACrBjH,WAAW,IAAInH;gBACjB;YACF;YAEA,OAAOtC;QACT,EAAE,OAAOY,OAAO;YACdP,cAAM,CAACO,KAAK,CAAC,uCAAuC;gBAClDA,OAAOA,iBAAiBC,QAAQD,MAAME,OAAO,GAAGC,OAAOH;YACzD;YACA,OAAO,EAAE;QACX;IACF;IAEA;;GAEC,GACD,MAAMoR,kBAAgD;QACpD,OAAO,IAAI,CAAC1N,mBAAmB;IACjC;IAEA,MAAM2N,wBAAsD;QAC1D,OAAO,IAAI,CAACjS,QAAQ,CAACgQ,KAAK,CAAC,GAAG,KAAK,4BAA4B;IACjE;IAEA,MAAMkC,kBAA0C;QAC9C,OAAOxK,MAAMC,IAAI,CAAC,IAAI,CAAC5H,YAAY,CAAC6H,MAAM;IAC5C;IAEA,MAAMuK,iBAAiBC,OAAe,EAAEC,MAAc,EAAoB;QACxE,MAAMlD,QAAQ,IAAI,CAACpP,YAAY,CAACuS,GAAG,CAACF;QACpC,IAAIjD,OAAO;YACTA,MAAMoD,cAAc,GAAG,IAAIjQ;YAC3B6M,MAAMqD,cAAc,GAAGH;YACvB,IAAI,CAACpK,IAAI,CAAC,sBAAsB;gBAAEmK;gBAASC;YAAO;YAClD,OAAO;QACT;QACA,OAAO;IACT;IAEA,MAAMI,aAAaL,OAAe,EAAoB;QACpD,MAAMjD,QAAQ,IAAI,CAACpP,YAAY,CAACuS,GAAG,CAACF;QACpC,IAAIjD,OAAO;YACTA,MAAMuD,UAAU,GAAG,IAAIpQ;YACvB,IAAI,CAACvC,YAAY,CAAC4S,MAAM,CAACP;YACzB,IAAI,CAACnK,IAAI,CAAC,kBAAkB;gBAAEmK;YAAQ;YACtC,OAAO;QACT;QACA,OAAO;IACT;IAEA,MAAMQ,kBAAkBxQ,IAA6B,EAAmB;QACtE,MAAMyQ,UAA0B;YAC9BxQ,IAAI,CAAC,KAAK,EAAEC,KAAKC,GAAG,GAAG,CAAC,EAAEC,KAAKC,MAAM,GAAGC,QAAQ,CAAC,IAAIC,MAAM,CAAC,GAAG,IAAI;YACnEC,SAAS;YACTC,cAAc;YACdC,SAAS,IAAIR;YACbS,WAAW,IAAIT;YACf,GAAGF,IAAI;QACT;QAEA,IAAI,CAACvC,KAAK,CAACmD,GAAG,CAAC6P,QAAQxQ,EAAE,EAAEwQ;QAC3B,IAAI,CAAC5K,IAAI,CAAC,cAAc4K;QAExB,OAAOA,QAAQxQ,EAAE;IACnB;IAEA,MAAMyQ,qBAAqBjK,MAAc,EAAEkK,OAAgC,EAAoB;QAC7F,MAAM3Q,OAAO,IAAI,CAACvC,KAAK,CAACyS,GAAG,CAACzJ;QAC5B,IAAIzG,MAAM;YACR8O,OAAO8B,MAAM,CAAC5Q,MAAM2Q,SAAS;gBAAEhQ,WAAW,IAAIT;YAAO;YACrD,IAAI,CAAC2F,IAAI,CAAC,gBAAgB7F;YAC1B,OAAO;QACT;QACA,OAAO;IACT;IAEA,MAAM6Q,qBAAqBpK,MAAc,EAAoB;QAC3D,MAAMqK,UAAU,IAAI,CAACrT,KAAK,CAAC8S,MAAM,CAAC9J;QAClC,IAAIqK,SAAS;YACX,IAAI,CAACjL,IAAI,CAAC,gBAAgB;gBAAEY;YAAO;QACrC;QACA,OAAOqK;IACT;IAEA,MAAMC,qBAAgD;QACpD,OAAOzL,MAAMC,IAAI,CAAC,IAAI,CAAC9H,KAAK,CAAC+H,MAAM;IACrC;IAEA;;GAEC,GACD,AAAQoG,kBAAkBL,SAA8B,EAAEC,WAAmB,EAAW;QACtF,OAAQD,UAAUpM,QAAQ;YACxB,KAAK;gBACH,OAAOqM,cAAcwF,OAAOzF,UAAUnM,KAAK;YAC7C,KAAK;gBACH,OAAOoM,cAAcwF,OAAOzF,UAAUnM,KAAK;YAC7C,KAAK;gBACH,OAAOoM,gBAAgBwF,OAAOzF,UAAUnM,KAAK;YAC/C,KAAK;gBACH,OAAOoM,gBAAgBwF,OAAOzF,UAAUnM,KAAK;YAC/C,KAAK;gBACH,8CAA8C;gBAC9C,OAAOoM,cAAeD,CAAAA,UAAU3L,SAAS,IAAI,GAAE;YACjD;gBACE3B,cAAM,CAACwJ,IAAI,CAAC,8BAA8B;oBAAEtI,UAAUoM,UAAUpM,QAAQ;gBAAC;gBACzE,OAAO;QACX;IACF;IAEA;;GAEC,GACD,MAAMuK,oBAIH;QACD,IAAI;YACF,MAAMF,QAAQC,0CAAoB,CAACwH,iBAAiB;YACpD,IAAIrH,aAAa;YACjB,IAAIC,kBAAkB;YACtB,IAAIC,cAAc;YAElB,KAAK,MAAMpB,WAAWoG,OAAOtJ,MAAM,CAACgE,OAAQ;gBAC1CI,cAAclB,QAAQwI,aAAa;gBACnCrH,mBAAmBnB,QAAQyI,oBAAoB;gBAC/CrH,eAAepB,QAAQ0I,gBAAgB;YACzC;YAEA,OAAO;gBAAExH;gBAAYC;gBAAiBC;YAAY;QACpD,EAAE,OAAOtL,OAAO;YACdP,cAAM,CAACO,KAAK,CAAC,iCAAiC;gBAC5CA,OAAOA,iBAAiBC,QAAQD,MAAME,OAAO,GAAGC,OAAOH;YACzD;YACA,OAAO;gBAAEoL,YAAY;gBAAGC,iBAAiB;gBAAGC,aAAa;YAAE;QAC7D;IACF;IAEA;;GAEC,GACDuH,UAAU;QACR,IAAI,IAAI,CAACvT,kBAAkB,EAAE;YAC3BwT,cAAc,IAAI,CAACxT,kBAAkB;YACrC,IAAI,CAACA,kBAAkB,GAAG;QAC5B;QAEA,IAAI,IAAI,CAACC,sBAAsB,EAAE;YAC/BuT,cAAc,IAAI,CAACvT,sBAAsB;YACzC,IAAI,CAACA,sBAAsB,GAAG;QAChC;QAEA,IAAI,CAACwT,kBAAkB;QACvBtT,cAAM,CAACC,IAAI,CAAC;IACd;AACF;AAGO,MAAMZ,iCAAiC,IAAID"}