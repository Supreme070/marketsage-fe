e348e3557a242d211deb4bd87574abc8
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _test = require("@playwright/test");
const _testutils = require("./test-utils");
/**
 * Workflow Automation E2E Tests
 * Tests visual workflow builder and automation execution with MCP data
 */ _test.test.describe('Workflow Automation', ()=>{
    let testUtils;
    _test.test.beforeEach(async ({ page })=>{
        testUtils = new _testutils.TestUtils(page);
        await testUtils.login();
    });
    _test.test.describe('Workflow Builder', ()=>{
        (0, _test.test)('can create workflow using visual builder', async ({ page })=>{
            await testUtils.navigateTo('workflows');
            // Create new workflow
            await testUtils.createTestWorkflow('Welcome Series Automation');
            // Verify workflow builder interface
            await (0, _test.expect)(page.locator('[data-testid="workflow-canvas"]')).toBeVisible();
            await (0, _test.expect)(page.locator('[data-testid="node-palette"]')).toBeVisible();
            // Add trigger node
            await page.dragAndDrop('[data-testid="trigger-contact-created"]', '[data-testid="workflow-canvas"]');
            // Configure trigger
            await page.click('[data-testid="trigger-node"]');
            await (0, _test.expect)(page.locator('[data-testid="trigger-settings"]')).toBeVisible();
            // Add delay node
            await page.dragAndDrop('[data-testid="delay-node"]', '[data-testid="workflow-canvas"]');
            // Configure delay
            await page.click('[data-testid="delay-node"]');
            await page.fill('[data-testid="delay-amount"]', '1');
            await page.selectOption('[data-testid="delay-unit"]', 'hours');
            // Add email action
            await page.dragAndDrop('[data-testid="send-email-node"]', '[data-testid="workflow-canvas"]');
            // Configure email
            await page.click('[data-testid="email-node"]');
            await page.selectOption('[data-testid="email-template"]', 'welcome-email');
            // Connect nodes
            await page.hover('[data-testid="trigger-node"] [data-testid="output-connector"]');
            await page.mouse.down();
            await page.hover('[data-testid="delay-node"] [data-testid="input-connector"]');
            await page.mouse.up();
            await page.hover('[data-testid="delay-node"] [data-testid="output-connector"]');
            await page.mouse.down();
            await page.hover('[data-testid="email-node"] [data-testid="input-connector"]');
            await page.mouse.up();
            // Save workflow
            await page.click('[data-testid="save-workflow"]');
            await testUtils.waitForLoadingComplete();
            // Verify workflow is saved
            await (0, _test.expect)(page.locator('[data-testid="save-success"]')).toBeVisible();
        });
        (0, _test.test)('workflow validation and error handling works', async ({ page })=>{
            await testUtils.navigateTo('workflows');
            await page.click('[data-testid="create-workflow"]');
            // Try to save incomplete workflow
            await page.click('[data-testid="save-workflow"]');
            // Verify validation errors
            await (0, _test.expect)(page.locator('[data-testid="validation-errors"]')).toBeVisible();
            await (0, _test.expect)(page.locator('text=Workflow must have at least one trigger')).toBeVisible();
            // Add trigger but no actions
            await page.dragAndDrop('[data-testid="trigger-form-submission"]', '[data-testid="workflow-canvas"]');
            await page.click('[data-testid="save-workflow"]');
            // Verify action requirement error
            await (0, _test.expect)(page.locator('text=Workflow must have at least one action')).toBeVisible();
            // Add action with invalid configuration
            await page.dragAndDrop('[data-testid="send-email-node"]', '[data-testid="workflow-canvas"]');
            await page.click('[data-testid="save-workflow"]');
            // Verify configuration errors
            await (0, _test.expect)(page.locator('text=Email template is required')).toBeVisible();
            // Fix configuration and save successfully
            await page.click('[data-testid="email-node"]');
            await page.selectOption('[data-testid="email-template"]', 'default-template');
            await page.click('[data-testid="save-workflow"]');
            // Verify successful save
            await (0, _test.expect)(page.locator('[data-testid="save-success"]')).toBeVisible();
        });
        (0, _test.test)('complex workflow with conditional logic works', async ({ page })=>{
            await testUtils.navigateTo('workflows');
            await page.click('[data-testid="create-workflow"]');
            await page.fill('[data-testid="workflow-name"]', 'Advanced Lead Nurturing');
            // Add form submission trigger
            await page.dragAndDrop('[data-testid="trigger-form-submission"]', '[data-testid="workflow-canvas"]');
            // Add condition node
            await page.dragAndDrop('[data-testid="condition-node"]', '[data-testid="workflow-canvas"]');
            // Configure condition
            await page.click('[data-testid="condition-node"]');
            await page.selectOption('[data-testid="condition-field"]', 'lead_score');
            await page.selectOption('[data-testid="condition-operator"]', 'greater_than');
            await page.fill('[data-testid="condition-value"]', '50');
            // Add actions for both branches
            // High score branch
            await page.dragAndDrop('[data-testid="send-email-node"]', '[data-testid="workflow-canvas"]');
            await page.click('[data-testid="email-node"]');
            await page.selectOption('[data-testid="email-template"]', 'high-value-lead');
            // Low score branch
            await page.dragAndDrop('[data-testid="send-email-node"]', '[data-testid="workflow-canvas"]');
            await page.click('[data-testid="email-node"]:nth-child(2)');
            await page.selectOption('[data-testid="email-template"]', 'nurture-sequence');
            // Connect nodes
            // Trigger to condition
            await page.hover('[data-testid="trigger-node"] [data-testid="output-connector"]');
            await page.mouse.down();
            await page.hover('[data-testid="condition-node"] [data-testid="input-connector"]');
            await page.mouse.up();
            // Condition to high score email (true branch)
            await page.hover('[data-testid="condition-node"] [data-testid="true-connector"]');
            await page.mouse.down();
            await page.hover('[data-testid="email-node"]:first-child [data-testid="input-connector"]');
            await page.mouse.up();
            // Condition to low score email (false branch)
            await page.hover('[data-testid="condition-node"] [data-testid="false-connector"]');
            await page.mouse.down();
            await page.hover('[data-testid="email-node"]:nth-child(2) [data-testid="input-connector"]');
            await page.mouse.up();
            // Test workflow
            await page.click('[data-testid="test-workflow"]');
            await (0, _test.expect)(page.locator('[data-testid="test-results"]')).toBeVisible();
            // Save workflow
            await page.click('[data-testid="save-workflow"]');
            await (0, _test.expect)(page.locator('[data-testid="save-success"]')).toBeVisible();
        });
        (0, _test.test)('workflow templates and marketplace work', async ({ page })=>{
            await testUtils.navigateTo('workflows');
            // Access template marketplace
            await page.click('[data-testid="workflow-templates"]');
            await (0, _test.expect)(page.locator('[data-testid="template-marketplace"]')).toBeVisible();
            // Browse template categories
            await page.click('[data-testid="category-welcome-series"]');
            await (0, _test.expect)(page.locator('[data-testid="welcome-templates"]')).toBeVisible();
            // Preview template
            await page.click('[data-testid="template-preview"]:first-child');
            await (0, _test.expect)(page.locator('[data-testid="template-details"]')).toBeVisible();
            // Check template rating and reviews
            await (0, _test.expect)(page.locator('[data-testid="template-rating"]')).toBeVisible();
            await (0, _test.expect)(page.locator('[data-testid="template-reviews"]')).toBeVisible();
            // Install template
            await page.click('[data-testid="install-template"]');
            await page.fill('[data-testid="workflow-name"]', 'Installed Welcome Series');
            await page.click('[data-testid="confirm-install"]');
            // Verify template is installed and customizable
            await (0, _test.expect)(page.locator('[data-testid="workflow-canvas"]')).toBeVisible();
            await (0, _test.expect)(page.locator('[data-testid="template-nodes"]')).toHaveCount({
                min: 3
            });
            // Customize template
            await page.click('[data-testid="email-node"]:first-child');
            await page.selectOption('[data-testid="email-template"]', 'custom-welcome');
            // Save customized workflow
            await page.click('[data-testid="save-workflow"]');
            await (0, _test.expect)(page.locator('text=Installed Welcome Series')).toBeVisible();
        });
    });
    _test.test.describe('Workflow Execution & Monitoring', ()=>{
        (0, _test.test)('workflow execution with real MCP data works', async ({ page })=>{
            await testUtils.navigateTo('workflows');
            // Open existing workflow
            await page.click('[data-testid="workflow-row"]:first-child');
            await page.click('[data-testid="view-workflow"]');
            // Activate workflow
            await page.click('[data-testid="activate-workflow"]');
            await (0, _test.expect)(page.locator('[data-testid="workflow-status"]')).toContainText('Active');
            // View execution logs
            await page.click('[data-testid="execution-logs"]');
            await testUtils.waitForLoadingComplete();
            // Verify real execution data (not demo)
            await testUtils.verifyMCPDataLoaded();
            await (0, _test.expect)(page.locator('[data-testid="execution-entry"]')).toHaveCount({
                min: 1
            });
            // Check execution details
            await page.click('[data-testid="execution-entry"]:first-child');
            await (0, _test.expect)(page.locator('[data-testid="execution-timeline"]')).toBeVisible();
            // Verify step-by-step execution
            const executionSteps = [
                'trigger-executed',
                'condition-evaluated',
                'action-completed'
            ];
            for (const step of executionSteps){
                try {
                    await (0, _test.expect)(page.locator(`[data-testid="${step}"]`)).toBeVisible({
                        timeout: 2000
                    });
                } catch  {
                    continue;
                }
            }
        });
        (0, _test.test)('workflow performance analytics show real metrics', async ({ page })=>{
            await testUtils.navigateTo('workflows');
            // View workflow analytics
            await page.click('[data-testid="workflow-analytics"]');
            await testUtils.waitForLoadingComplete();
            await testUtils.verifyMCPDataLoaded();
            // Verify performance metrics
            const performanceMetrics = [
                'total-executions',
                'success-rate',
                'average-completion-time',
                'conversion-rate',
                'revenue-generated'
            ];
            for (const metric of performanceMetrics){
                await (0, _test.expect)(page.locator(`[data-testid="${metric}"]`)).toBeVisible();
                // Verify values are not placeholder/demo
                const value = await page.textContent(`[data-testid="${metric}"]`);
                (0, _test.expect)(value).not.toContain('Demo');
                (0, _test.expect)(value).not.toContain('N/A');
            }
            // Check performance charts
            await (0, _test.expect)(page.locator('[data-testid="execution-trend-chart"]')).toBeVisible();
            await (0, _test.expect)(page.locator('[data-testid="conversion-funnel"]')).toBeVisible();
            // Verify real-time metrics
            await (0, _test.expect)(page.locator('[data-testid="realtime-executions"]')).toBeVisible();
        });
        (0, _test.test)('workflow error handling and retry mechanisms work', async ({ page })=>{
            await testUtils.navigateTo('workflows');
            // Create workflow with potential failure points
            await page.click('[data-testid="create-workflow"]');
            await page.fill('[data-testid="workflow-name"]', 'Error Handling Test');
            // Add trigger
            await page.dragAndDrop('[data-testid="trigger-contact-created"]', '[data-testid="workflow-canvas"]');
            // Add email action with retry configuration
            await page.dragAndDrop('[data-testid="send-email-node"]', '[data-testid="workflow-canvas"]');
            await page.click('[data-testid="email-node"]');
            // Configure retry settings
            await page.click('[data-testid="advanced-settings"]');
            await page.fill('[data-testid="max-retries"]', '3');
            await page.fill('[data-testid="retry-delay"]', '5');
            await page.selectOption('[data-testid="retry-strategy"]', 'exponential_backoff');
            // Configure error handling
            await page.selectOption('[data-testid="on-error"]', 'continue');
            await page.check('[data-testid="log-errors"]');
            // Save and activate
            await page.click('[data-testid="save-workflow"]');
            await page.click('[data-testid="activate-workflow"]');
            // Simulate error by using invalid email template
            await page.click('[data-testid="email-node"]');
            await page.selectOption('[data-testid="email-template"]', 'invalid-template');
            await page.click('[data-testid="update-node"]');
            // Trigger workflow execution
            await page.click('[data-testid="manual-trigger"]');
            // Check error logs
            await page.click('[data-testid="error-logs"]');
            await (0, _test.expect)(page.locator('[data-testid="error-entry"]')).toBeVisible();
            // Verify retry attempts
            await (0, _test.expect)(page.locator('[data-testid="retry-attempts"]')).toContainText('3');
            // Check error notification
            await (0, _test.expect)(page.locator('[data-testid="error-notification"]')).toBeVisible();
        });
        (0, _test.test)('workflow A/B testing and optimization work', async ({ page })=>{
            await testUtils.navigateTo('workflows');
            // Create A/B test workflow
            await page.click('[data-testid="create-ab-test-workflow"]');
            // Configure A/B test
            await page.fill('[data-testid="workflow-name"]', 'Email Timing A/B Test');
            await page.selectOption('[data-testid="test-variable"]', 'send_time');
            // Version A: Send immediately
            await page.fill('[data-testid="version-a-name"]', 'Immediate Send');
            await page.dragAndDrop('[data-testid="trigger-form-submission"]', '[data-testid="canvas-a"]');
            await page.dragAndDrop('[data-testid="send-email-node"]', '[data-testid="canvas-a"]');
            // Version B: Send with delay
            await page.fill('[data-testid="version-b-name"]', 'Delayed Send');
            await page.dragAndDrop('[data-testid="trigger-form-submission"]', '[data-testid="canvas-b"]');
            await page.dragAndDrop('[data-testid="delay-node"]', '[data-testid="canvas-b"]');
            await page.dragAndDrop('[data-testid="send-email-node"]', '[data-testid="canvas-b"]');
            // Configure test settings
            await page.fill('[data-testid="test-duration"]', '14'); // days
            await page.fill('[data-testid="traffic-split"]', '50'); // 50/50 split
            await page.selectOption('[data-testid="success-metric"]', 'email_open_rate');
            // Start A/B test
            await page.click('[data-testid="start-ab-test"]');
            await (0, _test.expect)(page.locator('[data-testid="test-status"]')).toContainText('Running');
            // Check test performance
            await page.click('[data-testid="test-performance"]');
            await (0, _test.expect)(page.locator('[data-testid="version-a-metrics"]')).toBeVisible();
            await (0, _test.expect)(page.locator('[data-testid="version-b-metrics"]')).toBeVisible();
            // Verify statistical significance tracking
            await (0, _test.expect)(page.locator('[data-testid="statistical-significance"]')).toBeVisible();
        });
    });
    _test.test.describe('Advanced Workflow Features', ()=>{
        (0, _test.test)('multi-channel workflow sequences work correctly', async ({ page })=>{
            await testUtils.navigateTo('workflows');
            await page.click('[data-testid="create-workflow"]');
            await page.fill('[data-testid="workflow-name"]', 'Multi-Channel Nurture');
            // Add trigger
            await page.dragAndDrop('[data-testid="trigger-lead-score"]', '[data-testid="workflow-canvas"]');
            // Add email sequence
            await page.dragAndDrop('[data-testid="send-email-node"]', '[data-testid="workflow-canvas"]');
            await page.click('[data-testid="email-node"]');
            await page.selectOption('[data-testid="email-template"]', 'nurture-email-1');
            // Add delay
            await page.dragAndDrop('[data-testid="delay-node"]', '[data-testid="workflow-canvas"]');
            await page.click('[data-testid="delay-node"]');
            await page.fill('[data-testid="delay-amount"]', '3');
            await page.selectOption('[data-testid="delay-unit"]', 'days');
            // Add SMS follow-up
            await page.dragAndDrop('[data-testid="send-sms-node"]', '[data-testid="workflow-canvas"]');
            await page.click('[data-testid="sms-node"]');
            await page.selectOption('[data-testid="sms-template"]', 'nurture-sms');
            // Add another delay
            await page.dragAndDrop('[data-testid="delay-node"]', '[data-testid="workflow-canvas"]');
            // Add WhatsApp message
            await page.dragAndDrop('[data-testid="send-whatsapp-node"]', '[data-testid="workflow-canvas"]');
            await page.click('[data-testid="whatsapp-node"]');
            await page.selectOption('[data-testid="whatsapp-template"]', 'nurture-whatsapp');
            // Connect all nodes
            // This would involve multiple drag operations to connect the sequence
            // Configure channel preferences
            await page.click('[data-testid="channel-preferences"]');
            await page.check('[data-testid="respect-unsubscribe"]');
            await page.check('[data-testid="respect-channel-preference"]');
            // Save and test
            await page.click('[data-testid="save-workflow"]');
            await page.click('[data-testid="test-workflow"]');
            // Verify multi-channel execution
            await (0, _test.expect)(page.locator('[data-testid="test-results"]')).toBeVisible();
            await (0, _test.expect)(page.locator('[data-testid="channel-execution-plan"]')).toBeVisible();
        });
        (0, _test.test)('workflow data enrichment and personalization work', async ({ page })=>{
            await testUtils.navigateTo('workflows');
            await page.click('[data-testid="create-workflow"]');
            await page.fill('[data-testid="workflow-name"]', 'Data Enrichment Workflow');
            // Add trigger
            await page.dragAndDrop('[data-testid="trigger-contact-created"]', '[data-testid="workflow-canvas"]');
            // Add data enrichment node
            await page.dragAndDrop('[data-testid="enrich-data-node"]', '[data-testid="workflow-canvas"]');
            await page.click('[data-testid="enrich-node"]');
            // Configure enrichment sources
            await page.check('[data-testid="enrich-company-data"]');
            await page.check('[data-testid="enrich-social-profiles"]');
            await page.check('[data-testid="enrich-location-data"]');
            // Add personalization node
            await page.dragAndDrop('[data-testid="personalization-node"]', '[data-testid="workflow-canvas"]');
            await page.click('[data-testid="personalization-node"]');
            // Configure personalization rules
            await page.click('[data-testid="add-personalization-rule"]');
            await page.selectOption('[data-testid="rule-field"]', 'industry');
            await page.selectOption('[data-testid="rule-operator"]', 'equals');
            await page.fill('[data-testid="rule-value"]', 'Technology');
            await page.selectOption('[data-testid="rule-template"]', 'tech-industry-email');
            // Add email with dynamic content
            await page.dragAndDrop('[data-testid="send-email-node"]', '[data-testid="workflow-canvas"]');
            await page.click('[data-testid="email-node"]');
            // Configure dynamic content
            await page.click('[data-testid="email-content"]');
            await page.fill('[data-testid="email-subject"]', 'Welcome {{first_name}} from {{company}}!');
            await page.fill('[data-testid="email-body"]', 'Hi {{first_name}}, we noticed you work at {{company}} in {{city}}. Here are some {{industry}}-specific resources...');
            // Test personalization
            await page.click('[data-testid="test-personalization"]');
            await (0, _test.expect)(page.locator('[data-testid="personalized-preview"]')).toBeVisible();
            // Save workflow
            await page.click('[data-testid="save-workflow"]');
            await (0, _test.expect)(page.locator('[data-testid="save-success"]')).toBeVisible();
        });
        (0, _test.test)('workflow webhooks and external integrations work', async ({ page })=>{
            await testUtils.navigateTo('workflows');
            await page.click('[data-testid="create-workflow"]');
            await page.fill('[data-testid="workflow-name"]', 'External Integration Workflow');
            // Add webhook trigger
            await page.dragAndDrop('[data-testid="trigger-webhook"]', '[data-testid="workflow-canvas"]');
            await page.click('[data-testid="webhook-trigger"]');
            // Configure webhook
            await page.click('[data-testid="generate-webhook-url"]');
            await (0, _test.expect)(page.locator('[data-testid="webhook-url"]')).toBeVisible();
            // Copy webhook URL
            await page.click('[data-testid="copy-webhook-url"]');
            await (0, _test.expect)(page.locator('[data-testid="copy-success"]')).toBeVisible();
            // Add external API call
            await page.dragAndDrop('[data-testid="api-call-node"]', '[data-testid="workflow-canvas"]');
            await page.click('[data-testid="api-node"]');
            // Configure API call
            await page.selectOption('[data-testid="http-method"]', 'POST');
            await page.fill('[data-testid="api-url"]', 'https://api.example.com/contacts');
            // Add headers
            await page.click('[data-testid="add-header"]');
            await page.fill('[data-testid="header-key"]', 'Authorization');
            await page.fill('[data-testid="header-value"]', 'Bearer {{api_token}}');
            // Configure request body
            await page.fill('[data-testid="request-body"]', JSON.stringify({
                email: '{{email}}',
                name: '{{first_name}} {{last_name}}',
                company: '{{company}}'
            }));
            // Add response handling
            await page.click('[data-testid="response-handling"]');
            await page.selectOption('[data-testid="success-action"]', 'continue');
            await page.selectOption('[data-testid="error-action"]', 'retry');
            // Test API call
            await page.click('[data-testid="test-api-call"]');
            await (0, _test.expect)(page.locator('[data-testid="api-test-result"]')).toBeVisible();
            // Save workflow
            await page.click('[data-testid="save-workflow"]');
            await (0, _test.expect)(page.locator('[data-testid="save-success"]')).toBeVisible();
        });
        (0, _test.test)('workflow performance optimization suggestions work', async ({ page })=>{
            await testUtils.navigateTo('workflows');
            // Open workflow with performance data
            await page.click('[data-testid="workflow-row"]:first-child');
            await page.click('[data-testid="performance-optimization"]');
            await testUtils.waitForLoadingComplete();
            await testUtils.verifyMCPDataLoaded();
            // Check AI optimization suggestions
            await (0, _test.expect)(page.locator('[data-testid="ai-suggestions"]')).toBeVisible();
            // Verify suggestion categories
            const suggestionTypes = [
                'timing-optimization',
                'content-improvement',
                'audience-refinement',
                'performance-enhancement'
            ];
            for (const suggestionType of suggestionTypes){
                try {
                    await (0, _test.expect)(page.locator(`[data-testid="${suggestionType}"]`)).toBeVisible({
                        timeout: 2000
                    });
                } catch  {
                    continue;
                }
            }
            // Apply optimization suggestion
            await page.click('[data-testid="apply-suggestion"]:first-child');
            await (0, _test.expect)(page.locator('[data-testid="optimization-applied"]')).toBeVisible();
            // Check performance impact prediction
            await (0, _test.expect)(page.locator('[data-testid="predicted-improvement"]')).toBeVisible();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zdXByZW1lL0Rlc2t0b3AvbWFya2V0c2FnZS9zcmMvX190ZXN0c19fL2UyZS93b3JrZmxvdy1hdXRvbWF0aW9uLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdGVzdCwgZXhwZWN0IH0gZnJvbSAnQHBsYXl3cmlnaHQvdGVzdCc7XG5pbXBvcnQgeyBUZXN0VXRpbHMgfSBmcm9tICcuL3Rlc3QtdXRpbHMnO1xuXG4vKipcbiAqIFdvcmtmbG93IEF1dG9tYXRpb24gRTJFIFRlc3RzXG4gKiBUZXN0cyB2aXN1YWwgd29ya2Zsb3cgYnVpbGRlciBhbmQgYXV0b21hdGlvbiBleGVjdXRpb24gd2l0aCBNQ1AgZGF0YVxuICovXG5cbnRlc3QuZGVzY3JpYmUoJ1dvcmtmbG93IEF1dG9tYXRpb24nLCAoKSA9PiB7XG4gIGxldCB0ZXN0VXRpbHM6IFRlc3RVdGlscztcblxuICB0ZXN0LmJlZm9yZUVhY2goYXN5bmMgKHsgcGFnZSB9KSA9PiB7XG4gICAgdGVzdFV0aWxzID0gbmV3IFRlc3RVdGlscyhwYWdlKTtcbiAgICBhd2FpdCB0ZXN0VXRpbHMubG9naW4oKTtcbiAgfSk7XG5cbiAgdGVzdC5kZXNjcmliZSgnV29ya2Zsb3cgQnVpbGRlcicsICgpID0+IHtcbiAgICB0ZXN0KCdjYW4gY3JlYXRlIHdvcmtmbG93IHVzaW5nIHZpc3VhbCBidWlsZGVyJywgYXN5bmMgKHsgcGFnZSB9KSA9PiB7XG4gICAgICBhd2FpdCB0ZXN0VXRpbHMubmF2aWdhdGVUbygnd29ya2Zsb3dzJyk7XG4gICAgICBcbiAgICAgIC8vIENyZWF0ZSBuZXcgd29ya2Zsb3dcbiAgICAgIGF3YWl0IHRlc3RVdGlscy5jcmVhdGVUZXN0V29ya2Zsb3coJ1dlbGNvbWUgU2VyaWVzIEF1dG9tYXRpb24nKTtcbiAgICAgIFxuICAgICAgLy8gVmVyaWZ5IHdvcmtmbG93IGJ1aWxkZXIgaW50ZXJmYWNlXG4gICAgICBhd2FpdCBleHBlY3QocGFnZS5sb2NhdG9yKCdbZGF0YS10ZXN0aWQ9XCJ3b3JrZmxvdy1jYW52YXNcIl0nKSkudG9CZVZpc2libGUoKTtcbiAgICAgIGF3YWl0IGV4cGVjdChwYWdlLmxvY2F0b3IoJ1tkYXRhLXRlc3RpZD1cIm5vZGUtcGFsZXR0ZVwiXScpKS50b0JlVmlzaWJsZSgpO1xuICAgICAgXG4gICAgICAvLyBBZGQgdHJpZ2dlciBub2RlXG4gICAgICBhd2FpdCBwYWdlLmRyYWdBbmREcm9wKCdbZGF0YS10ZXN0aWQ9XCJ0cmlnZ2VyLWNvbnRhY3QtY3JlYXRlZFwiXScsICdbZGF0YS10ZXN0aWQ9XCJ3b3JrZmxvdy1jYW52YXNcIl0nKTtcbiAgICAgIFxuICAgICAgLy8gQ29uZmlndXJlIHRyaWdnZXJcbiAgICAgIGF3YWl0IHBhZ2UuY2xpY2soJ1tkYXRhLXRlc3RpZD1cInRyaWdnZXItbm9kZVwiXScpO1xuICAgICAgYXdhaXQgZXhwZWN0KHBhZ2UubG9jYXRvcignW2RhdGEtdGVzdGlkPVwidHJpZ2dlci1zZXR0aW5nc1wiXScpKS50b0JlVmlzaWJsZSgpO1xuICAgICAgXG4gICAgICAvLyBBZGQgZGVsYXkgbm9kZVxuICAgICAgYXdhaXQgcGFnZS5kcmFnQW5kRHJvcCgnW2RhdGEtdGVzdGlkPVwiZGVsYXktbm9kZVwiXScsICdbZGF0YS10ZXN0aWQ9XCJ3b3JrZmxvdy1jYW52YXNcIl0nKTtcbiAgICAgIFxuICAgICAgLy8gQ29uZmlndXJlIGRlbGF5XG4gICAgICBhd2FpdCBwYWdlLmNsaWNrKCdbZGF0YS10ZXN0aWQ9XCJkZWxheS1ub2RlXCJdJyk7XG4gICAgICBhd2FpdCBwYWdlLmZpbGwoJ1tkYXRhLXRlc3RpZD1cImRlbGF5LWFtb3VudFwiXScsICcxJyk7XG4gICAgICBhd2FpdCBwYWdlLnNlbGVjdE9wdGlvbignW2RhdGEtdGVzdGlkPVwiZGVsYXktdW5pdFwiXScsICdob3VycycpO1xuICAgICAgXG4gICAgICAvLyBBZGQgZW1haWwgYWN0aW9uXG4gICAgICBhd2FpdCBwYWdlLmRyYWdBbmREcm9wKCdbZGF0YS10ZXN0aWQ9XCJzZW5kLWVtYWlsLW5vZGVcIl0nLCAnW2RhdGEtdGVzdGlkPVwid29ya2Zsb3ctY2FudmFzXCJdJyk7XG4gICAgICBcbiAgICAgIC8vIENvbmZpZ3VyZSBlbWFpbFxuICAgICAgYXdhaXQgcGFnZS5jbGljaygnW2RhdGEtdGVzdGlkPVwiZW1haWwtbm9kZVwiXScpO1xuICAgICAgYXdhaXQgcGFnZS5zZWxlY3RPcHRpb24oJ1tkYXRhLXRlc3RpZD1cImVtYWlsLXRlbXBsYXRlXCJdJywgJ3dlbGNvbWUtZW1haWwnKTtcbiAgICAgIFxuICAgICAgLy8gQ29ubmVjdCBub2Rlc1xuICAgICAgYXdhaXQgcGFnZS5ob3ZlcignW2RhdGEtdGVzdGlkPVwidHJpZ2dlci1ub2RlXCJdIFtkYXRhLXRlc3RpZD1cIm91dHB1dC1jb25uZWN0b3JcIl0nKTtcbiAgICAgIGF3YWl0IHBhZ2UubW91c2UuZG93bigpO1xuICAgICAgYXdhaXQgcGFnZS5ob3ZlcignW2RhdGEtdGVzdGlkPVwiZGVsYXktbm9kZVwiXSBbZGF0YS10ZXN0aWQ9XCJpbnB1dC1jb25uZWN0b3JcIl0nKTtcbiAgICAgIGF3YWl0IHBhZ2UubW91c2UudXAoKTtcbiAgICAgIFxuICAgICAgYXdhaXQgcGFnZS5ob3ZlcignW2RhdGEtdGVzdGlkPVwiZGVsYXktbm9kZVwiXSBbZGF0YS10ZXN0aWQ9XCJvdXRwdXQtY29ubmVjdG9yXCJdJyk7XG4gICAgICBhd2FpdCBwYWdlLm1vdXNlLmRvd24oKTtcbiAgICAgIGF3YWl0IHBhZ2UuaG92ZXIoJ1tkYXRhLXRlc3RpZD1cImVtYWlsLW5vZGVcIl0gW2RhdGEtdGVzdGlkPVwiaW5wdXQtY29ubmVjdG9yXCJdJyk7XG4gICAgICBhd2FpdCBwYWdlLm1vdXNlLnVwKCk7XG4gICAgICBcbiAgICAgIC8vIFNhdmUgd29ya2Zsb3dcbiAgICAgIGF3YWl0IHBhZ2UuY2xpY2soJ1tkYXRhLXRlc3RpZD1cInNhdmUtd29ya2Zsb3dcIl0nKTtcbiAgICAgIGF3YWl0IHRlc3RVdGlscy53YWl0Rm9yTG9hZGluZ0NvbXBsZXRlKCk7XG4gICAgICBcbiAgICAgIC8vIFZlcmlmeSB3b3JrZmxvdyBpcyBzYXZlZFxuICAgICAgYXdhaXQgZXhwZWN0KHBhZ2UubG9jYXRvcignW2RhdGEtdGVzdGlkPVwic2F2ZS1zdWNjZXNzXCJdJykpLnRvQmVWaXNpYmxlKCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCd3b3JrZmxvdyB2YWxpZGF0aW9uIGFuZCBlcnJvciBoYW5kbGluZyB3b3JrcycsIGFzeW5jICh7IHBhZ2UgfSkgPT4ge1xuICAgICAgYXdhaXQgdGVzdFV0aWxzLm5hdmlnYXRlVG8oJ3dvcmtmbG93cycpO1xuICAgICAgYXdhaXQgcGFnZS5jbGljaygnW2RhdGEtdGVzdGlkPVwiY3JlYXRlLXdvcmtmbG93XCJdJyk7XG4gICAgICBcbiAgICAgIC8vIFRyeSB0byBzYXZlIGluY29tcGxldGUgd29ya2Zsb3dcbiAgICAgIGF3YWl0IHBhZ2UuY2xpY2soJ1tkYXRhLXRlc3RpZD1cInNhdmUtd29ya2Zsb3dcIl0nKTtcbiAgICAgIFxuICAgICAgLy8gVmVyaWZ5IHZhbGlkYXRpb24gZXJyb3JzXG4gICAgICBhd2FpdCBleHBlY3QocGFnZS5sb2NhdG9yKCdbZGF0YS10ZXN0aWQ9XCJ2YWxpZGF0aW9uLWVycm9yc1wiXScpKS50b0JlVmlzaWJsZSgpO1xuICAgICAgYXdhaXQgZXhwZWN0KHBhZ2UubG9jYXRvcigndGV4dD1Xb3JrZmxvdyBtdXN0IGhhdmUgYXQgbGVhc3Qgb25lIHRyaWdnZXInKSkudG9CZVZpc2libGUoKTtcbiAgICAgIFxuICAgICAgLy8gQWRkIHRyaWdnZXIgYnV0IG5vIGFjdGlvbnNcbiAgICAgIGF3YWl0IHBhZ2UuZHJhZ0FuZERyb3AoJ1tkYXRhLXRlc3RpZD1cInRyaWdnZXItZm9ybS1zdWJtaXNzaW9uXCJdJywgJ1tkYXRhLXRlc3RpZD1cIndvcmtmbG93LWNhbnZhc1wiXScpO1xuICAgICAgYXdhaXQgcGFnZS5jbGljaygnW2RhdGEtdGVzdGlkPVwic2F2ZS13b3JrZmxvd1wiXScpO1xuICAgICAgXG4gICAgICAvLyBWZXJpZnkgYWN0aW9uIHJlcXVpcmVtZW50IGVycm9yXG4gICAgICBhd2FpdCBleHBlY3QocGFnZS5sb2NhdG9yKCd0ZXh0PVdvcmtmbG93IG11c3QgaGF2ZSBhdCBsZWFzdCBvbmUgYWN0aW9uJykpLnRvQmVWaXNpYmxlKCk7XG4gICAgICBcbiAgICAgIC8vIEFkZCBhY3Rpb24gd2l0aCBpbnZhbGlkIGNvbmZpZ3VyYXRpb25cbiAgICAgIGF3YWl0IHBhZ2UuZHJhZ0FuZERyb3AoJ1tkYXRhLXRlc3RpZD1cInNlbmQtZW1haWwtbm9kZVwiXScsICdbZGF0YS10ZXN0aWQ9XCJ3b3JrZmxvdy1jYW52YXNcIl0nKTtcbiAgICAgIGF3YWl0IHBhZ2UuY2xpY2soJ1tkYXRhLXRlc3RpZD1cInNhdmUtd29ya2Zsb3dcIl0nKTtcbiAgICAgIFxuICAgICAgLy8gVmVyaWZ5IGNvbmZpZ3VyYXRpb24gZXJyb3JzXG4gICAgICBhd2FpdCBleHBlY3QocGFnZS5sb2NhdG9yKCd0ZXh0PUVtYWlsIHRlbXBsYXRlIGlzIHJlcXVpcmVkJykpLnRvQmVWaXNpYmxlKCk7XG4gICAgICBcbiAgICAgIC8vIEZpeCBjb25maWd1cmF0aW9uIGFuZCBzYXZlIHN1Y2Nlc3NmdWxseVxuICAgICAgYXdhaXQgcGFnZS5jbGljaygnW2RhdGEtdGVzdGlkPVwiZW1haWwtbm9kZVwiXScpO1xuICAgICAgYXdhaXQgcGFnZS5zZWxlY3RPcHRpb24oJ1tkYXRhLXRlc3RpZD1cImVtYWlsLXRlbXBsYXRlXCJdJywgJ2RlZmF1bHQtdGVtcGxhdGUnKTtcbiAgICAgIGF3YWl0IHBhZ2UuY2xpY2soJ1tkYXRhLXRlc3RpZD1cInNhdmUtd29ya2Zsb3dcIl0nKTtcbiAgICAgIFxuICAgICAgLy8gVmVyaWZ5IHN1Y2Nlc3NmdWwgc2F2ZVxuICAgICAgYXdhaXQgZXhwZWN0KHBhZ2UubG9jYXRvcignW2RhdGEtdGVzdGlkPVwic2F2ZS1zdWNjZXNzXCJdJykpLnRvQmVWaXNpYmxlKCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdjb21wbGV4IHdvcmtmbG93IHdpdGggY29uZGl0aW9uYWwgbG9naWMgd29ya3MnLCBhc3luYyAoeyBwYWdlIH0pID0+IHtcbiAgICAgIGF3YWl0IHRlc3RVdGlscy5uYXZpZ2F0ZVRvKCd3b3JrZmxvd3MnKTtcbiAgICAgIGF3YWl0IHBhZ2UuY2xpY2soJ1tkYXRhLXRlc3RpZD1cImNyZWF0ZS13b3JrZmxvd1wiXScpO1xuICAgICAgXG4gICAgICBhd2FpdCBwYWdlLmZpbGwoJ1tkYXRhLXRlc3RpZD1cIndvcmtmbG93LW5hbWVcIl0nLCAnQWR2YW5jZWQgTGVhZCBOdXJ0dXJpbmcnKTtcbiAgICAgIFxuICAgICAgLy8gQWRkIGZvcm0gc3VibWlzc2lvbiB0cmlnZ2VyXG4gICAgICBhd2FpdCBwYWdlLmRyYWdBbmREcm9wKCdbZGF0YS10ZXN0aWQ9XCJ0cmlnZ2VyLWZvcm0tc3VibWlzc2lvblwiXScsICdbZGF0YS10ZXN0aWQ9XCJ3b3JrZmxvdy1jYW52YXNcIl0nKTtcbiAgICAgIFxuICAgICAgLy8gQWRkIGNvbmRpdGlvbiBub2RlXG4gICAgICBhd2FpdCBwYWdlLmRyYWdBbmREcm9wKCdbZGF0YS10ZXN0aWQ9XCJjb25kaXRpb24tbm9kZVwiXScsICdbZGF0YS10ZXN0aWQ9XCJ3b3JrZmxvdy1jYW52YXNcIl0nKTtcbiAgICAgIFxuICAgICAgLy8gQ29uZmlndXJlIGNvbmRpdGlvblxuICAgICAgYXdhaXQgcGFnZS5jbGljaygnW2RhdGEtdGVzdGlkPVwiY29uZGl0aW9uLW5vZGVcIl0nKTtcbiAgICAgIGF3YWl0IHBhZ2Uuc2VsZWN0T3B0aW9uKCdbZGF0YS10ZXN0aWQ9XCJjb25kaXRpb24tZmllbGRcIl0nLCAnbGVhZF9zY29yZScpO1xuICAgICAgYXdhaXQgcGFnZS5zZWxlY3RPcHRpb24oJ1tkYXRhLXRlc3RpZD1cImNvbmRpdGlvbi1vcGVyYXRvclwiXScsICdncmVhdGVyX3RoYW4nKTtcbiAgICAgIGF3YWl0IHBhZ2UuZmlsbCgnW2RhdGEtdGVzdGlkPVwiY29uZGl0aW9uLXZhbHVlXCJdJywgJzUwJyk7XG4gICAgICBcbiAgICAgIC8vIEFkZCBhY3Rpb25zIGZvciBib3RoIGJyYW5jaGVzXG4gICAgICAvLyBIaWdoIHNjb3JlIGJyYW5jaFxuICAgICAgYXdhaXQgcGFnZS5kcmFnQW5kRHJvcCgnW2RhdGEtdGVzdGlkPVwic2VuZC1lbWFpbC1ub2RlXCJdJywgJ1tkYXRhLXRlc3RpZD1cIndvcmtmbG93LWNhbnZhc1wiXScpO1xuICAgICAgYXdhaXQgcGFnZS5jbGljaygnW2RhdGEtdGVzdGlkPVwiZW1haWwtbm9kZVwiXScpO1xuICAgICAgYXdhaXQgcGFnZS5zZWxlY3RPcHRpb24oJ1tkYXRhLXRlc3RpZD1cImVtYWlsLXRlbXBsYXRlXCJdJywgJ2hpZ2gtdmFsdWUtbGVhZCcpO1xuICAgICAgXG4gICAgICAvLyBMb3cgc2NvcmUgYnJhbmNoXG4gICAgICBhd2FpdCBwYWdlLmRyYWdBbmREcm9wKCdbZGF0YS10ZXN0aWQ9XCJzZW5kLWVtYWlsLW5vZGVcIl0nLCAnW2RhdGEtdGVzdGlkPVwid29ya2Zsb3ctY2FudmFzXCJdJyk7XG4gICAgICBhd2FpdCBwYWdlLmNsaWNrKCdbZGF0YS10ZXN0aWQ9XCJlbWFpbC1ub2RlXCJdOm50aC1jaGlsZCgyKScpO1xuICAgICAgYXdhaXQgcGFnZS5zZWxlY3RPcHRpb24oJ1tkYXRhLXRlc3RpZD1cImVtYWlsLXRlbXBsYXRlXCJdJywgJ251cnR1cmUtc2VxdWVuY2UnKTtcbiAgICAgIFxuICAgICAgLy8gQ29ubmVjdCBub2Rlc1xuICAgICAgLy8gVHJpZ2dlciB0byBjb25kaXRpb25cbiAgICAgIGF3YWl0IHBhZ2UuaG92ZXIoJ1tkYXRhLXRlc3RpZD1cInRyaWdnZXItbm9kZVwiXSBbZGF0YS10ZXN0aWQ9XCJvdXRwdXQtY29ubmVjdG9yXCJdJyk7XG4gICAgICBhd2FpdCBwYWdlLm1vdXNlLmRvd24oKTtcbiAgICAgIGF3YWl0IHBhZ2UuaG92ZXIoJ1tkYXRhLXRlc3RpZD1cImNvbmRpdGlvbi1ub2RlXCJdIFtkYXRhLXRlc3RpZD1cImlucHV0LWNvbm5lY3RvclwiXScpO1xuICAgICAgYXdhaXQgcGFnZS5tb3VzZS51cCgpO1xuICAgICAgXG4gICAgICAvLyBDb25kaXRpb24gdG8gaGlnaCBzY29yZSBlbWFpbCAodHJ1ZSBicmFuY2gpXG4gICAgICBhd2FpdCBwYWdlLmhvdmVyKCdbZGF0YS10ZXN0aWQ9XCJjb25kaXRpb24tbm9kZVwiXSBbZGF0YS10ZXN0aWQ9XCJ0cnVlLWNvbm5lY3RvclwiXScpO1xuICAgICAgYXdhaXQgcGFnZS5tb3VzZS5kb3duKCk7XG4gICAgICBhd2FpdCBwYWdlLmhvdmVyKCdbZGF0YS10ZXN0aWQ9XCJlbWFpbC1ub2RlXCJdOmZpcnN0LWNoaWxkIFtkYXRhLXRlc3RpZD1cImlucHV0LWNvbm5lY3RvclwiXScpO1xuICAgICAgYXdhaXQgcGFnZS5tb3VzZS51cCgpO1xuICAgICAgXG4gICAgICAvLyBDb25kaXRpb24gdG8gbG93IHNjb3JlIGVtYWlsIChmYWxzZSBicmFuY2gpXG4gICAgICBhd2FpdCBwYWdlLmhvdmVyKCdbZGF0YS10ZXN0aWQ9XCJjb25kaXRpb24tbm9kZVwiXSBbZGF0YS10ZXN0aWQ9XCJmYWxzZS1jb25uZWN0b3JcIl0nKTtcbiAgICAgIGF3YWl0IHBhZ2UubW91c2UuZG93bigpO1xuICAgICAgYXdhaXQgcGFnZS5ob3ZlcignW2RhdGEtdGVzdGlkPVwiZW1haWwtbm9kZVwiXTpudGgtY2hpbGQoMikgW2RhdGEtdGVzdGlkPVwiaW5wdXQtY29ubmVjdG9yXCJdJyk7XG4gICAgICBhd2FpdCBwYWdlLm1vdXNlLnVwKCk7XG4gICAgICBcbiAgICAgIC8vIFRlc3Qgd29ya2Zsb3dcbiAgICAgIGF3YWl0IHBhZ2UuY2xpY2soJ1tkYXRhLXRlc3RpZD1cInRlc3Qtd29ya2Zsb3dcIl0nKTtcbiAgICAgIGF3YWl0IGV4cGVjdChwYWdlLmxvY2F0b3IoJ1tkYXRhLXRlc3RpZD1cInRlc3QtcmVzdWx0c1wiXScpKS50b0JlVmlzaWJsZSgpO1xuICAgICAgXG4gICAgICAvLyBTYXZlIHdvcmtmbG93XG4gICAgICBhd2FpdCBwYWdlLmNsaWNrKCdbZGF0YS10ZXN0aWQ9XCJzYXZlLXdvcmtmbG93XCJdJyk7XG4gICAgICBhd2FpdCBleHBlY3QocGFnZS5sb2NhdG9yKCdbZGF0YS10ZXN0aWQ9XCJzYXZlLXN1Y2Nlc3NcIl0nKSkudG9CZVZpc2libGUoKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3dvcmtmbG93IHRlbXBsYXRlcyBhbmQgbWFya2V0cGxhY2Ugd29yaycsIGFzeW5jICh7IHBhZ2UgfSkgPT4ge1xuICAgICAgYXdhaXQgdGVzdFV0aWxzLm5hdmlnYXRlVG8oJ3dvcmtmbG93cycpO1xuICAgICAgXG4gICAgICAvLyBBY2Nlc3MgdGVtcGxhdGUgbWFya2V0cGxhY2VcbiAgICAgIGF3YWl0IHBhZ2UuY2xpY2soJ1tkYXRhLXRlc3RpZD1cIndvcmtmbG93LXRlbXBsYXRlc1wiXScpO1xuICAgICAgYXdhaXQgZXhwZWN0KHBhZ2UubG9jYXRvcignW2RhdGEtdGVzdGlkPVwidGVtcGxhdGUtbWFya2V0cGxhY2VcIl0nKSkudG9CZVZpc2libGUoKTtcbiAgICAgIFxuICAgICAgLy8gQnJvd3NlIHRlbXBsYXRlIGNhdGVnb3JpZXNcbiAgICAgIGF3YWl0IHBhZ2UuY2xpY2soJ1tkYXRhLXRlc3RpZD1cImNhdGVnb3J5LXdlbGNvbWUtc2VyaWVzXCJdJyk7XG4gICAgICBhd2FpdCBleHBlY3QocGFnZS5sb2NhdG9yKCdbZGF0YS10ZXN0aWQ9XCJ3ZWxjb21lLXRlbXBsYXRlc1wiXScpKS50b0JlVmlzaWJsZSgpO1xuICAgICAgXG4gICAgICAvLyBQcmV2aWV3IHRlbXBsYXRlXG4gICAgICBhd2FpdCBwYWdlLmNsaWNrKCdbZGF0YS10ZXN0aWQ9XCJ0ZW1wbGF0ZS1wcmV2aWV3XCJdOmZpcnN0LWNoaWxkJyk7XG4gICAgICBhd2FpdCBleHBlY3QocGFnZS5sb2NhdG9yKCdbZGF0YS10ZXN0aWQ9XCJ0ZW1wbGF0ZS1kZXRhaWxzXCJdJykpLnRvQmVWaXNpYmxlKCk7XG4gICAgICBcbiAgICAgIC8vIENoZWNrIHRlbXBsYXRlIHJhdGluZyBhbmQgcmV2aWV3c1xuICAgICAgYXdhaXQgZXhwZWN0KHBhZ2UubG9jYXRvcignW2RhdGEtdGVzdGlkPVwidGVtcGxhdGUtcmF0aW5nXCJdJykpLnRvQmVWaXNpYmxlKCk7XG4gICAgICBhd2FpdCBleHBlY3QocGFnZS5sb2NhdG9yKCdbZGF0YS10ZXN0aWQ9XCJ0ZW1wbGF0ZS1yZXZpZXdzXCJdJykpLnRvQmVWaXNpYmxlKCk7XG4gICAgICBcbiAgICAgIC8vIEluc3RhbGwgdGVtcGxhdGVcbiAgICAgIGF3YWl0IHBhZ2UuY2xpY2soJ1tkYXRhLXRlc3RpZD1cImluc3RhbGwtdGVtcGxhdGVcIl0nKTtcbiAgICAgIGF3YWl0IHBhZ2UuZmlsbCgnW2RhdGEtdGVzdGlkPVwid29ya2Zsb3ctbmFtZVwiXScsICdJbnN0YWxsZWQgV2VsY29tZSBTZXJpZXMnKTtcbiAgICAgIGF3YWl0IHBhZ2UuY2xpY2soJ1tkYXRhLXRlc3RpZD1cImNvbmZpcm0taW5zdGFsbFwiXScpO1xuICAgICAgXG4gICAgICAvLyBWZXJpZnkgdGVtcGxhdGUgaXMgaW5zdGFsbGVkIGFuZCBjdXN0b21pemFibGVcbiAgICAgIGF3YWl0IGV4cGVjdChwYWdlLmxvY2F0b3IoJ1tkYXRhLXRlc3RpZD1cIndvcmtmbG93LWNhbnZhc1wiXScpKS50b0JlVmlzaWJsZSgpO1xuICAgICAgYXdhaXQgZXhwZWN0KHBhZ2UubG9jYXRvcignW2RhdGEtdGVzdGlkPVwidGVtcGxhdGUtbm9kZXNcIl0nKSkudG9IYXZlQ291bnQoeyBtaW46IDMgfSk7XG4gICAgICBcbiAgICAgIC8vIEN1c3RvbWl6ZSB0ZW1wbGF0ZVxuICAgICAgYXdhaXQgcGFnZS5jbGljaygnW2RhdGEtdGVzdGlkPVwiZW1haWwtbm9kZVwiXTpmaXJzdC1jaGlsZCcpO1xuICAgICAgYXdhaXQgcGFnZS5zZWxlY3RPcHRpb24oJ1tkYXRhLXRlc3RpZD1cImVtYWlsLXRlbXBsYXRlXCJdJywgJ2N1c3RvbS13ZWxjb21lJyk7XG4gICAgICBcbiAgICAgIC8vIFNhdmUgY3VzdG9taXplZCB3b3JrZmxvd1xuICAgICAgYXdhaXQgcGFnZS5jbGljaygnW2RhdGEtdGVzdGlkPVwic2F2ZS13b3JrZmxvd1wiXScpO1xuICAgICAgYXdhaXQgZXhwZWN0KHBhZ2UubG9jYXRvcigndGV4dD1JbnN0YWxsZWQgV2VsY29tZSBTZXJpZXMnKSkudG9CZVZpc2libGUoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdC5kZXNjcmliZSgnV29ya2Zsb3cgRXhlY3V0aW9uICYgTW9uaXRvcmluZycsICgpID0+IHtcbiAgICB0ZXN0KCd3b3JrZmxvdyBleGVjdXRpb24gd2l0aCByZWFsIE1DUCBkYXRhIHdvcmtzJywgYXN5bmMgKHsgcGFnZSB9KSA9PiB7XG4gICAgICBhd2FpdCB0ZXN0VXRpbHMubmF2aWdhdGVUbygnd29ya2Zsb3dzJyk7XG4gICAgICBcbiAgICAgIC8vIE9wZW4gZXhpc3Rpbmcgd29ya2Zsb3dcbiAgICAgIGF3YWl0IHBhZ2UuY2xpY2soJ1tkYXRhLXRlc3RpZD1cIndvcmtmbG93LXJvd1wiXTpmaXJzdC1jaGlsZCcpO1xuICAgICAgYXdhaXQgcGFnZS5jbGljaygnW2RhdGEtdGVzdGlkPVwidmlldy13b3JrZmxvd1wiXScpO1xuICAgICAgXG4gICAgICAvLyBBY3RpdmF0ZSB3b3JrZmxvd1xuICAgICAgYXdhaXQgcGFnZS5jbGljaygnW2RhdGEtdGVzdGlkPVwiYWN0aXZhdGUtd29ya2Zsb3dcIl0nKTtcbiAgICAgIGF3YWl0IGV4cGVjdChwYWdlLmxvY2F0b3IoJ1tkYXRhLXRlc3RpZD1cIndvcmtmbG93LXN0YXR1c1wiXScpKS50b0NvbnRhaW5UZXh0KCdBY3RpdmUnKTtcbiAgICAgIFxuICAgICAgLy8gVmlldyBleGVjdXRpb24gbG9nc1xuICAgICAgYXdhaXQgcGFnZS5jbGljaygnW2RhdGEtdGVzdGlkPVwiZXhlY3V0aW9uLWxvZ3NcIl0nKTtcbiAgICAgIGF3YWl0IHRlc3RVdGlscy53YWl0Rm9yTG9hZGluZ0NvbXBsZXRlKCk7XG4gICAgICBcbiAgICAgIC8vIFZlcmlmeSByZWFsIGV4ZWN1dGlvbiBkYXRhIChub3QgZGVtbylcbiAgICAgIGF3YWl0IHRlc3RVdGlscy52ZXJpZnlNQ1BEYXRhTG9hZGVkKCk7XG4gICAgICBhd2FpdCBleHBlY3QocGFnZS5sb2NhdG9yKCdbZGF0YS10ZXN0aWQ9XCJleGVjdXRpb24tZW50cnlcIl0nKSkudG9IYXZlQ291bnQoeyBtaW46IDEgfSk7XG4gICAgICBcbiAgICAgIC8vIENoZWNrIGV4ZWN1dGlvbiBkZXRhaWxzXG4gICAgICBhd2FpdCBwYWdlLmNsaWNrKCdbZGF0YS10ZXN0aWQ9XCJleGVjdXRpb24tZW50cnlcIl06Zmlyc3QtY2hpbGQnKTtcbiAgICAgIGF3YWl0IGV4cGVjdChwYWdlLmxvY2F0b3IoJ1tkYXRhLXRlc3RpZD1cImV4ZWN1dGlvbi10aW1lbGluZVwiXScpKS50b0JlVmlzaWJsZSgpO1xuICAgICAgXG4gICAgICAvLyBWZXJpZnkgc3RlcC1ieS1zdGVwIGV4ZWN1dGlvblxuICAgICAgY29uc3QgZXhlY3V0aW9uU3RlcHMgPSBbXG4gICAgICAgICd0cmlnZ2VyLWV4ZWN1dGVkJyxcbiAgICAgICAgJ2NvbmRpdGlvbi1ldmFsdWF0ZWQnLFxuICAgICAgICAnYWN0aW9uLWNvbXBsZXRlZCdcbiAgICAgIF07XG5cbiAgICAgIGZvciAoY29uc3Qgc3RlcCBvZiBleGVjdXRpb25TdGVwcykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGF3YWl0IGV4cGVjdChwYWdlLmxvY2F0b3IoYFtkYXRhLXRlc3RpZD1cIiR7c3RlcH1cIl1gKSkudG9CZVZpc2libGUoeyB0aW1lb3V0OiAyMDAwIH0pO1xuICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAvLyBOb3QgYWxsIHN0ZXBzIG1heSBiZSBwcmVzZW50IGluIGV2ZXJ5IGV4ZWN1dGlvblxuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0ZXN0KCd3b3JrZmxvdyBwZXJmb3JtYW5jZSBhbmFseXRpY3Mgc2hvdyByZWFsIG1ldHJpY3MnLCBhc3luYyAoeyBwYWdlIH0pID0+IHtcbiAgICAgIGF3YWl0IHRlc3RVdGlscy5uYXZpZ2F0ZVRvKCd3b3JrZmxvd3MnKTtcbiAgICAgIFxuICAgICAgLy8gVmlldyB3b3JrZmxvdyBhbmFseXRpY3NcbiAgICAgIGF3YWl0IHBhZ2UuY2xpY2soJ1tkYXRhLXRlc3RpZD1cIndvcmtmbG93LWFuYWx5dGljc1wiXScpO1xuICAgICAgYXdhaXQgdGVzdFV0aWxzLndhaXRGb3JMb2FkaW5nQ29tcGxldGUoKTtcbiAgICAgIGF3YWl0IHRlc3RVdGlscy52ZXJpZnlNQ1BEYXRhTG9hZGVkKCk7XG4gICAgICBcbiAgICAgIC8vIFZlcmlmeSBwZXJmb3JtYW5jZSBtZXRyaWNzXG4gICAgICBjb25zdCBwZXJmb3JtYW5jZU1ldHJpY3MgPSBbXG4gICAgICAgICd0b3RhbC1leGVjdXRpb25zJyxcbiAgICAgICAgJ3N1Y2Nlc3MtcmF0ZScsXG4gICAgICAgICdhdmVyYWdlLWNvbXBsZXRpb24tdGltZScsXG4gICAgICAgICdjb252ZXJzaW9uLXJhdGUnLFxuICAgICAgICAncmV2ZW51ZS1nZW5lcmF0ZWQnXG4gICAgICBdO1xuXG4gICAgICBmb3IgKGNvbnN0IG1ldHJpYyBvZiBwZXJmb3JtYW5jZU1ldHJpY3MpIHtcbiAgICAgICAgYXdhaXQgZXhwZWN0KHBhZ2UubG9jYXRvcihgW2RhdGEtdGVzdGlkPVwiJHttZXRyaWN9XCJdYCkpLnRvQmVWaXNpYmxlKCk7XG4gICAgICAgIFxuICAgICAgICAvLyBWZXJpZnkgdmFsdWVzIGFyZSBub3QgcGxhY2Vob2xkZXIvZGVtb1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGF3YWl0IHBhZ2UudGV4dENvbnRlbnQoYFtkYXRhLXRlc3RpZD1cIiR7bWV0cmljfVwiXWApO1xuICAgICAgICBleHBlY3QodmFsdWUpLm5vdC50b0NvbnRhaW4oJ0RlbW8nKTtcbiAgICAgICAgZXhwZWN0KHZhbHVlKS5ub3QudG9Db250YWluKCdOL0EnKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gQ2hlY2sgcGVyZm9ybWFuY2UgY2hhcnRzXG4gICAgICBhd2FpdCBleHBlY3QocGFnZS5sb2NhdG9yKCdbZGF0YS10ZXN0aWQ9XCJleGVjdXRpb24tdHJlbmQtY2hhcnRcIl0nKSkudG9CZVZpc2libGUoKTtcbiAgICAgIGF3YWl0IGV4cGVjdChwYWdlLmxvY2F0b3IoJ1tkYXRhLXRlc3RpZD1cImNvbnZlcnNpb24tZnVubmVsXCJdJykpLnRvQmVWaXNpYmxlKCk7XG4gICAgICBcbiAgICAgIC8vIFZlcmlmeSByZWFsLXRpbWUgbWV0cmljc1xuICAgICAgYXdhaXQgZXhwZWN0KHBhZ2UubG9jYXRvcignW2RhdGEtdGVzdGlkPVwicmVhbHRpbWUtZXhlY3V0aW9uc1wiXScpKS50b0JlVmlzaWJsZSgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnd29ya2Zsb3cgZXJyb3IgaGFuZGxpbmcgYW5kIHJldHJ5IG1lY2hhbmlzbXMgd29yaycsIGFzeW5jICh7IHBhZ2UgfSkgPT4ge1xuICAgICAgYXdhaXQgdGVzdFV0aWxzLm5hdmlnYXRlVG8oJ3dvcmtmbG93cycpO1xuICAgICAgXG4gICAgICAvLyBDcmVhdGUgd29ya2Zsb3cgd2l0aCBwb3RlbnRpYWwgZmFpbHVyZSBwb2ludHNcbiAgICAgIGF3YWl0IHBhZ2UuY2xpY2soJ1tkYXRhLXRlc3RpZD1cImNyZWF0ZS13b3JrZmxvd1wiXScpO1xuICAgICAgYXdhaXQgcGFnZS5maWxsKCdbZGF0YS10ZXN0aWQ9XCJ3b3JrZmxvdy1uYW1lXCJdJywgJ0Vycm9yIEhhbmRsaW5nIFRlc3QnKTtcbiAgICAgIFxuICAgICAgLy8gQWRkIHRyaWdnZXJcbiAgICAgIGF3YWl0IHBhZ2UuZHJhZ0FuZERyb3AoJ1tkYXRhLXRlc3RpZD1cInRyaWdnZXItY29udGFjdC1jcmVhdGVkXCJdJywgJ1tkYXRhLXRlc3RpZD1cIndvcmtmbG93LWNhbnZhc1wiXScpO1xuICAgICAgXG4gICAgICAvLyBBZGQgZW1haWwgYWN0aW9uIHdpdGggcmV0cnkgY29uZmlndXJhdGlvblxuICAgICAgYXdhaXQgcGFnZS5kcmFnQW5kRHJvcCgnW2RhdGEtdGVzdGlkPVwic2VuZC1lbWFpbC1ub2RlXCJdJywgJ1tkYXRhLXRlc3RpZD1cIndvcmtmbG93LWNhbnZhc1wiXScpO1xuICAgICAgYXdhaXQgcGFnZS5jbGljaygnW2RhdGEtdGVzdGlkPVwiZW1haWwtbm9kZVwiXScpO1xuICAgICAgXG4gICAgICAvLyBDb25maWd1cmUgcmV0cnkgc2V0dGluZ3NcbiAgICAgIGF3YWl0IHBhZ2UuY2xpY2soJ1tkYXRhLXRlc3RpZD1cImFkdmFuY2VkLXNldHRpbmdzXCJdJyk7XG4gICAgICBhd2FpdCBwYWdlLmZpbGwoJ1tkYXRhLXRlc3RpZD1cIm1heC1yZXRyaWVzXCJdJywgJzMnKTtcbiAgICAgIGF3YWl0IHBhZ2UuZmlsbCgnW2RhdGEtdGVzdGlkPVwicmV0cnktZGVsYXlcIl0nLCAnNScpO1xuICAgICAgYXdhaXQgcGFnZS5zZWxlY3RPcHRpb24oJ1tkYXRhLXRlc3RpZD1cInJldHJ5LXN0cmF0ZWd5XCJdJywgJ2V4cG9uZW50aWFsX2JhY2tvZmYnKTtcbiAgICAgIFxuICAgICAgLy8gQ29uZmlndXJlIGVycm9yIGhhbmRsaW5nXG4gICAgICBhd2FpdCBwYWdlLnNlbGVjdE9wdGlvbignW2RhdGEtdGVzdGlkPVwib24tZXJyb3JcIl0nLCAnY29udGludWUnKTtcbiAgICAgIGF3YWl0IHBhZ2UuY2hlY2soJ1tkYXRhLXRlc3RpZD1cImxvZy1lcnJvcnNcIl0nKTtcbiAgICAgIFxuICAgICAgLy8gU2F2ZSBhbmQgYWN0aXZhdGVcbiAgICAgIGF3YWl0IHBhZ2UuY2xpY2soJ1tkYXRhLXRlc3RpZD1cInNhdmUtd29ya2Zsb3dcIl0nKTtcbiAgICAgIGF3YWl0IHBhZ2UuY2xpY2soJ1tkYXRhLXRlc3RpZD1cImFjdGl2YXRlLXdvcmtmbG93XCJdJyk7XG4gICAgICBcbiAgICAgIC8vIFNpbXVsYXRlIGVycm9yIGJ5IHVzaW5nIGludmFsaWQgZW1haWwgdGVtcGxhdGVcbiAgICAgIGF3YWl0IHBhZ2UuY2xpY2soJ1tkYXRhLXRlc3RpZD1cImVtYWlsLW5vZGVcIl0nKTtcbiAgICAgIGF3YWl0IHBhZ2Uuc2VsZWN0T3B0aW9uKCdbZGF0YS10ZXN0aWQ9XCJlbWFpbC10ZW1wbGF0ZVwiXScsICdpbnZhbGlkLXRlbXBsYXRlJyk7XG4gICAgICBhd2FpdCBwYWdlLmNsaWNrKCdbZGF0YS10ZXN0aWQ9XCJ1cGRhdGUtbm9kZVwiXScpO1xuICAgICAgXG4gICAgICAvLyBUcmlnZ2VyIHdvcmtmbG93IGV4ZWN1dGlvblxuICAgICAgYXdhaXQgcGFnZS5jbGljaygnW2RhdGEtdGVzdGlkPVwibWFudWFsLXRyaWdnZXJcIl0nKTtcbiAgICAgIFxuICAgICAgLy8gQ2hlY2sgZXJyb3IgbG9nc1xuICAgICAgYXdhaXQgcGFnZS5jbGljaygnW2RhdGEtdGVzdGlkPVwiZXJyb3ItbG9nc1wiXScpO1xuICAgICAgYXdhaXQgZXhwZWN0KHBhZ2UubG9jYXRvcignW2RhdGEtdGVzdGlkPVwiZXJyb3ItZW50cnlcIl0nKSkudG9CZVZpc2libGUoKTtcbiAgICAgIFxuICAgICAgLy8gVmVyaWZ5IHJldHJ5IGF0dGVtcHRzXG4gICAgICBhd2FpdCBleHBlY3QocGFnZS5sb2NhdG9yKCdbZGF0YS10ZXN0aWQ9XCJyZXRyeS1hdHRlbXB0c1wiXScpKS50b0NvbnRhaW5UZXh0KCczJyk7XG4gICAgICBcbiAgICAgIC8vIENoZWNrIGVycm9yIG5vdGlmaWNhdGlvblxuICAgICAgYXdhaXQgZXhwZWN0KHBhZ2UubG9jYXRvcignW2RhdGEtdGVzdGlkPVwiZXJyb3Itbm90aWZpY2F0aW9uXCJdJykpLnRvQmVWaXNpYmxlKCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCd3b3JrZmxvdyBBL0IgdGVzdGluZyBhbmQgb3B0aW1pemF0aW9uIHdvcmsnLCBhc3luYyAoeyBwYWdlIH0pID0+IHtcbiAgICAgIGF3YWl0IHRlc3RVdGlscy5uYXZpZ2F0ZVRvKCd3b3JrZmxvd3MnKTtcbiAgICAgIFxuICAgICAgLy8gQ3JlYXRlIEEvQiB0ZXN0IHdvcmtmbG93XG4gICAgICBhd2FpdCBwYWdlLmNsaWNrKCdbZGF0YS10ZXN0aWQ9XCJjcmVhdGUtYWItdGVzdC13b3JrZmxvd1wiXScpO1xuICAgICAgXG4gICAgICAvLyBDb25maWd1cmUgQS9CIHRlc3RcbiAgICAgIGF3YWl0IHBhZ2UuZmlsbCgnW2RhdGEtdGVzdGlkPVwid29ya2Zsb3ctbmFtZVwiXScsICdFbWFpbCBUaW1pbmcgQS9CIFRlc3QnKTtcbiAgICAgIGF3YWl0IHBhZ2Uuc2VsZWN0T3B0aW9uKCdbZGF0YS10ZXN0aWQ9XCJ0ZXN0LXZhcmlhYmxlXCJdJywgJ3NlbmRfdGltZScpO1xuICAgICAgXG4gICAgICAvLyBWZXJzaW9uIEE6IFNlbmQgaW1tZWRpYXRlbHlcbiAgICAgIGF3YWl0IHBhZ2UuZmlsbCgnW2RhdGEtdGVzdGlkPVwidmVyc2lvbi1hLW5hbWVcIl0nLCAnSW1tZWRpYXRlIFNlbmQnKTtcbiAgICAgIGF3YWl0IHBhZ2UuZHJhZ0FuZERyb3AoJ1tkYXRhLXRlc3RpZD1cInRyaWdnZXItZm9ybS1zdWJtaXNzaW9uXCJdJywgJ1tkYXRhLXRlc3RpZD1cImNhbnZhcy1hXCJdJyk7XG4gICAgICBhd2FpdCBwYWdlLmRyYWdBbmREcm9wKCdbZGF0YS10ZXN0aWQ9XCJzZW5kLWVtYWlsLW5vZGVcIl0nLCAnW2RhdGEtdGVzdGlkPVwiY2FudmFzLWFcIl0nKTtcbiAgICAgIFxuICAgICAgLy8gVmVyc2lvbiBCOiBTZW5kIHdpdGggZGVsYXlcbiAgICAgIGF3YWl0IHBhZ2UuZmlsbCgnW2RhdGEtdGVzdGlkPVwidmVyc2lvbi1iLW5hbWVcIl0nLCAnRGVsYXllZCBTZW5kJyk7XG4gICAgICBhd2FpdCBwYWdlLmRyYWdBbmREcm9wKCdbZGF0YS10ZXN0aWQ9XCJ0cmlnZ2VyLWZvcm0tc3VibWlzc2lvblwiXScsICdbZGF0YS10ZXN0aWQ9XCJjYW52YXMtYlwiXScpO1xuICAgICAgYXdhaXQgcGFnZS5kcmFnQW5kRHJvcCgnW2RhdGEtdGVzdGlkPVwiZGVsYXktbm9kZVwiXScsICdbZGF0YS10ZXN0aWQ9XCJjYW52YXMtYlwiXScpO1xuICAgICAgYXdhaXQgcGFnZS5kcmFnQW5kRHJvcCgnW2RhdGEtdGVzdGlkPVwic2VuZC1lbWFpbC1ub2RlXCJdJywgJ1tkYXRhLXRlc3RpZD1cImNhbnZhcy1iXCJdJyk7XG4gICAgICBcbiAgICAgIC8vIENvbmZpZ3VyZSB0ZXN0IHNldHRpbmdzXG4gICAgICBhd2FpdCBwYWdlLmZpbGwoJ1tkYXRhLXRlc3RpZD1cInRlc3QtZHVyYXRpb25cIl0nLCAnMTQnKTsgLy8gZGF5c1xuICAgICAgYXdhaXQgcGFnZS5maWxsKCdbZGF0YS10ZXN0aWQ9XCJ0cmFmZmljLXNwbGl0XCJdJywgJzUwJyk7IC8vIDUwLzUwIHNwbGl0XG4gICAgICBhd2FpdCBwYWdlLnNlbGVjdE9wdGlvbignW2RhdGEtdGVzdGlkPVwic3VjY2Vzcy1tZXRyaWNcIl0nLCAnZW1haWxfb3Blbl9yYXRlJyk7XG4gICAgICBcbiAgICAgIC8vIFN0YXJ0IEEvQiB0ZXN0XG4gICAgICBhd2FpdCBwYWdlLmNsaWNrKCdbZGF0YS10ZXN0aWQ9XCJzdGFydC1hYi10ZXN0XCJdJyk7XG4gICAgICBhd2FpdCBleHBlY3QocGFnZS5sb2NhdG9yKCdbZGF0YS10ZXN0aWQ9XCJ0ZXN0LXN0YXR1c1wiXScpKS50b0NvbnRhaW5UZXh0KCdSdW5uaW5nJyk7XG4gICAgICBcbiAgICAgIC8vIENoZWNrIHRlc3QgcGVyZm9ybWFuY2VcbiAgICAgIGF3YWl0IHBhZ2UuY2xpY2soJ1tkYXRhLXRlc3RpZD1cInRlc3QtcGVyZm9ybWFuY2VcIl0nKTtcbiAgICAgIGF3YWl0IGV4cGVjdChwYWdlLmxvY2F0b3IoJ1tkYXRhLXRlc3RpZD1cInZlcnNpb24tYS1tZXRyaWNzXCJdJykpLnRvQmVWaXNpYmxlKCk7XG4gICAgICBhd2FpdCBleHBlY3QocGFnZS5sb2NhdG9yKCdbZGF0YS10ZXN0aWQ9XCJ2ZXJzaW9uLWItbWV0cmljc1wiXScpKS50b0JlVmlzaWJsZSgpO1xuICAgICAgXG4gICAgICAvLyBWZXJpZnkgc3RhdGlzdGljYWwgc2lnbmlmaWNhbmNlIHRyYWNraW5nXG4gICAgICBhd2FpdCBleHBlY3QocGFnZS5sb2NhdG9yKCdbZGF0YS10ZXN0aWQ9XCJzdGF0aXN0aWNhbC1zaWduaWZpY2FuY2VcIl0nKSkudG9CZVZpc2libGUoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgdGVzdC5kZXNjcmliZSgnQWR2YW5jZWQgV29ya2Zsb3cgRmVhdHVyZXMnLCAoKSA9PiB7XG4gICAgdGVzdCgnbXVsdGktY2hhbm5lbCB3b3JrZmxvdyBzZXF1ZW5jZXMgd29yayBjb3JyZWN0bHknLCBhc3luYyAoeyBwYWdlIH0pID0+IHtcbiAgICAgIGF3YWl0IHRlc3RVdGlscy5uYXZpZ2F0ZVRvKCd3b3JrZmxvd3MnKTtcbiAgICAgIGF3YWl0IHBhZ2UuY2xpY2soJ1tkYXRhLXRlc3RpZD1cImNyZWF0ZS13b3JrZmxvd1wiXScpO1xuICAgICAgXG4gICAgICBhd2FpdCBwYWdlLmZpbGwoJ1tkYXRhLXRlc3RpZD1cIndvcmtmbG93LW5hbWVcIl0nLCAnTXVsdGktQ2hhbm5lbCBOdXJ0dXJlJyk7XG4gICAgICBcbiAgICAgIC8vIEFkZCB0cmlnZ2VyXG4gICAgICBhd2FpdCBwYWdlLmRyYWdBbmREcm9wKCdbZGF0YS10ZXN0aWQ9XCJ0cmlnZ2VyLWxlYWQtc2NvcmVcIl0nLCAnW2RhdGEtdGVzdGlkPVwid29ya2Zsb3ctY2FudmFzXCJdJyk7XG4gICAgICBcbiAgICAgIC8vIEFkZCBlbWFpbCBzZXF1ZW5jZVxuICAgICAgYXdhaXQgcGFnZS5kcmFnQW5kRHJvcCgnW2RhdGEtdGVzdGlkPVwic2VuZC1lbWFpbC1ub2RlXCJdJywgJ1tkYXRhLXRlc3RpZD1cIndvcmtmbG93LWNhbnZhc1wiXScpO1xuICAgICAgYXdhaXQgcGFnZS5jbGljaygnW2RhdGEtdGVzdGlkPVwiZW1haWwtbm9kZVwiXScpO1xuICAgICAgYXdhaXQgcGFnZS5zZWxlY3RPcHRpb24oJ1tkYXRhLXRlc3RpZD1cImVtYWlsLXRlbXBsYXRlXCJdJywgJ251cnR1cmUtZW1haWwtMScpO1xuICAgICAgXG4gICAgICAvLyBBZGQgZGVsYXlcbiAgICAgIGF3YWl0IHBhZ2UuZHJhZ0FuZERyb3AoJ1tkYXRhLXRlc3RpZD1cImRlbGF5LW5vZGVcIl0nLCAnW2RhdGEtdGVzdGlkPVwid29ya2Zsb3ctY2FudmFzXCJdJyk7XG4gICAgICBhd2FpdCBwYWdlLmNsaWNrKCdbZGF0YS10ZXN0aWQ9XCJkZWxheS1ub2RlXCJdJyk7XG4gICAgICBhd2FpdCBwYWdlLmZpbGwoJ1tkYXRhLXRlc3RpZD1cImRlbGF5LWFtb3VudFwiXScsICczJyk7XG4gICAgICBhd2FpdCBwYWdlLnNlbGVjdE9wdGlvbignW2RhdGEtdGVzdGlkPVwiZGVsYXktdW5pdFwiXScsICdkYXlzJyk7XG4gICAgICBcbiAgICAgIC8vIEFkZCBTTVMgZm9sbG93LXVwXG4gICAgICBhd2FpdCBwYWdlLmRyYWdBbmREcm9wKCdbZGF0YS10ZXN0aWQ9XCJzZW5kLXNtcy1ub2RlXCJdJywgJ1tkYXRhLXRlc3RpZD1cIndvcmtmbG93LWNhbnZhc1wiXScpO1xuICAgICAgYXdhaXQgcGFnZS5jbGljaygnW2RhdGEtdGVzdGlkPVwic21zLW5vZGVcIl0nKTtcbiAgICAgIGF3YWl0IHBhZ2Uuc2VsZWN0T3B0aW9uKCdbZGF0YS10ZXN0aWQ9XCJzbXMtdGVtcGxhdGVcIl0nLCAnbnVydHVyZS1zbXMnKTtcbiAgICAgIFxuICAgICAgLy8gQWRkIGFub3RoZXIgZGVsYXlcbiAgICAgIGF3YWl0IHBhZ2UuZHJhZ0FuZERyb3AoJ1tkYXRhLXRlc3RpZD1cImRlbGF5LW5vZGVcIl0nLCAnW2RhdGEtdGVzdGlkPVwid29ya2Zsb3ctY2FudmFzXCJdJyk7XG4gICAgICBcbiAgICAgIC8vIEFkZCBXaGF0c0FwcCBtZXNzYWdlXG4gICAgICBhd2FpdCBwYWdlLmRyYWdBbmREcm9wKCdbZGF0YS10ZXN0aWQ9XCJzZW5kLXdoYXRzYXBwLW5vZGVcIl0nLCAnW2RhdGEtdGVzdGlkPVwid29ya2Zsb3ctY2FudmFzXCJdJyk7XG4gICAgICBhd2FpdCBwYWdlLmNsaWNrKCdbZGF0YS10ZXN0aWQ9XCJ3aGF0c2FwcC1ub2RlXCJdJyk7XG4gICAgICBhd2FpdCBwYWdlLnNlbGVjdE9wdGlvbignW2RhdGEtdGVzdGlkPVwid2hhdHNhcHAtdGVtcGxhdGVcIl0nLCAnbnVydHVyZS13aGF0c2FwcCcpO1xuICAgICAgXG4gICAgICAvLyBDb25uZWN0IGFsbCBub2Rlc1xuICAgICAgLy8gVGhpcyB3b3VsZCBpbnZvbHZlIG11bHRpcGxlIGRyYWcgb3BlcmF0aW9ucyB0byBjb25uZWN0IHRoZSBzZXF1ZW5jZVxuICAgICAgXG4gICAgICAvLyBDb25maWd1cmUgY2hhbm5lbCBwcmVmZXJlbmNlc1xuICAgICAgYXdhaXQgcGFnZS5jbGljaygnW2RhdGEtdGVzdGlkPVwiY2hhbm5lbC1wcmVmZXJlbmNlc1wiXScpO1xuICAgICAgYXdhaXQgcGFnZS5jaGVjaygnW2RhdGEtdGVzdGlkPVwicmVzcGVjdC11bnN1YnNjcmliZVwiXScpO1xuICAgICAgYXdhaXQgcGFnZS5jaGVjaygnW2RhdGEtdGVzdGlkPVwicmVzcGVjdC1jaGFubmVsLXByZWZlcmVuY2VcIl0nKTtcbiAgICAgIFxuICAgICAgLy8gU2F2ZSBhbmQgdGVzdFxuICAgICAgYXdhaXQgcGFnZS5jbGljaygnW2RhdGEtdGVzdGlkPVwic2F2ZS13b3JrZmxvd1wiXScpO1xuICAgICAgYXdhaXQgcGFnZS5jbGljaygnW2RhdGEtdGVzdGlkPVwidGVzdC13b3JrZmxvd1wiXScpO1xuICAgICAgXG4gICAgICAvLyBWZXJpZnkgbXVsdGktY2hhbm5lbCBleGVjdXRpb25cbiAgICAgIGF3YWl0IGV4cGVjdChwYWdlLmxvY2F0b3IoJ1tkYXRhLXRlc3RpZD1cInRlc3QtcmVzdWx0c1wiXScpKS50b0JlVmlzaWJsZSgpO1xuICAgICAgYXdhaXQgZXhwZWN0KHBhZ2UubG9jYXRvcignW2RhdGEtdGVzdGlkPVwiY2hhbm5lbC1leGVjdXRpb24tcGxhblwiXScpKS50b0JlVmlzaWJsZSgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnd29ya2Zsb3cgZGF0YSBlbnJpY2htZW50IGFuZCBwZXJzb25hbGl6YXRpb24gd29yaycsIGFzeW5jICh7IHBhZ2UgfSkgPT4ge1xuICAgICAgYXdhaXQgdGVzdFV0aWxzLm5hdmlnYXRlVG8oJ3dvcmtmbG93cycpO1xuICAgICAgYXdhaXQgcGFnZS5jbGljaygnW2RhdGEtdGVzdGlkPVwiY3JlYXRlLXdvcmtmbG93XCJdJyk7XG4gICAgICBcbiAgICAgIGF3YWl0IHBhZ2UuZmlsbCgnW2RhdGEtdGVzdGlkPVwid29ya2Zsb3ctbmFtZVwiXScsICdEYXRhIEVucmljaG1lbnQgV29ya2Zsb3cnKTtcbiAgICAgIFxuICAgICAgLy8gQWRkIHRyaWdnZXJcbiAgICAgIGF3YWl0IHBhZ2UuZHJhZ0FuZERyb3AoJ1tkYXRhLXRlc3RpZD1cInRyaWdnZXItY29udGFjdC1jcmVhdGVkXCJdJywgJ1tkYXRhLXRlc3RpZD1cIndvcmtmbG93LWNhbnZhc1wiXScpO1xuICAgICAgXG4gICAgICAvLyBBZGQgZGF0YSBlbnJpY2htZW50IG5vZGVcbiAgICAgIGF3YWl0IHBhZ2UuZHJhZ0FuZERyb3AoJ1tkYXRhLXRlc3RpZD1cImVucmljaC1kYXRhLW5vZGVcIl0nLCAnW2RhdGEtdGVzdGlkPVwid29ya2Zsb3ctY2FudmFzXCJdJyk7XG4gICAgICBhd2FpdCBwYWdlLmNsaWNrKCdbZGF0YS10ZXN0aWQ9XCJlbnJpY2gtbm9kZVwiXScpO1xuICAgICAgXG4gICAgICAvLyBDb25maWd1cmUgZW5yaWNobWVudCBzb3VyY2VzXG4gICAgICBhd2FpdCBwYWdlLmNoZWNrKCdbZGF0YS10ZXN0aWQ9XCJlbnJpY2gtY29tcGFueS1kYXRhXCJdJyk7XG4gICAgICBhd2FpdCBwYWdlLmNoZWNrKCdbZGF0YS10ZXN0aWQ9XCJlbnJpY2gtc29jaWFsLXByb2ZpbGVzXCJdJyk7XG4gICAgICBhd2FpdCBwYWdlLmNoZWNrKCdbZGF0YS10ZXN0aWQ9XCJlbnJpY2gtbG9jYXRpb24tZGF0YVwiXScpO1xuICAgICAgXG4gICAgICAvLyBBZGQgcGVyc29uYWxpemF0aW9uIG5vZGVcbiAgICAgIGF3YWl0IHBhZ2UuZHJhZ0FuZERyb3AoJ1tkYXRhLXRlc3RpZD1cInBlcnNvbmFsaXphdGlvbi1ub2RlXCJdJywgJ1tkYXRhLXRlc3RpZD1cIndvcmtmbG93LWNhbnZhc1wiXScpO1xuICAgICAgYXdhaXQgcGFnZS5jbGljaygnW2RhdGEtdGVzdGlkPVwicGVyc29uYWxpemF0aW9uLW5vZGVcIl0nKTtcbiAgICAgIFxuICAgICAgLy8gQ29uZmlndXJlIHBlcnNvbmFsaXphdGlvbiBydWxlc1xuICAgICAgYXdhaXQgcGFnZS5jbGljaygnW2RhdGEtdGVzdGlkPVwiYWRkLXBlcnNvbmFsaXphdGlvbi1ydWxlXCJdJyk7XG4gICAgICBhd2FpdCBwYWdlLnNlbGVjdE9wdGlvbignW2RhdGEtdGVzdGlkPVwicnVsZS1maWVsZFwiXScsICdpbmR1c3RyeScpO1xuICAgICAgYXdhaXQgcGFnZS5zZWxlY3RPcHRpb24oJ1tkYXRhLXRlc3RpZD1cInJ1bGUtb3BlcmF0b3JcIl0nLCAnZXF1YWxzJyk7XG4gICAgICBhd2FpdCBwYWdlLmZpbGwoJ1tkYXRhLXRlc3RpZD1cInJ1bGUtdmFsdWVcIl0nLCAnVGVjaG5vbG9neScpO1xuICAgICAgYXdhaXQgcGFnZS5zZWxlY3RPcHRpb24oJ1tkYXRhLXRlc3RpZD1cInJ1bGUtdGVtcGxhdGVcIl0nLCAndGVjaC1pbmR1c3RyeS1lbWFpbCcpO1xuICAgICAgXG4gICAgICAvLyBBZGQgZW1haWwgd2l0aCBkeW5hbWljIGNvbnRlbnRcbiAgICAgIGF3YWl0IHBhZ2UuZHJhZ0FuZERyb3AoJ1tkYXRhLXRlc3RpZD1cInNlbmQtZW1haWwtbm9kZVwiXScsICdbZGF0YS10ZXN0aWQ9XCJ3b3JrZmxvdy1jYW52YXNcIl0nKTtcbiAgICAgIGF3YWl0IHBhZ2UuY2xpY2soJ1tkYXRhLXRlc3RpZD1cImVtYWlsLW5vZGVcIl0nKTtcbiAgICAgIFxuICAgICAgLy8gQ29uZmlndXJlIGR5bmFtaWMgY29udGVudFxuICAgICAgYXdhaXQgcGFnZS5jbGljaygnW2RhdGEtdGVzdGlkPVwiZW1haWwtY29udGVudFwiXScpO1xuICAgICAgYXdhaXQgcGFnZS5maWxsKCdbZGF0YS10ZXN0aWQ9XCJlbWFpbC1zdWJqZWN0XCJdJywgJ1dlbGNvbWUge3tmaXJzdF9uYW1lfX0gZnJvbSB7e2NvbXBhbnl9fSEnKTtcbiAgICAgIGF3YWl0IHBhZ2UuZmlsbCgnW2RhdGEtdGVzdGlkPVwiZW1haWwtYm9keVwiXScsICdIaSB7e2ZpcnN0X25hbWV9fSwgd2Ugbm90aWNlZCB5b3Ugd29yayBhdCB7e2NvbXBhbnl9fSBpbiB7e2NpdHl9fS4gSGVyZSBhcmUgc29tZSB7e2luZHVzdHJ5fX0tc3BlY2lmaWMgcmVzb3VyY2VzLi4uJyk7XG4gICAgICBcbiAgICAgIC8vIFRlc3QgcGVyc29uYWxpemF0aW9uXG4gICAgICBhd2FpdCBwYWdlLmNsaWNrKCdbZGF0YS10ZXN0aWQ9XCJ0ZXN0LXBlcnNvbmFsaXphdGlvblwiXScpO1xuICAgICAgYXdhaXQgZXhwZWN0KHBhZ2UubG9jYXRvcignW2RhdGEtdGVzdGlkPVwicGVyc29uYWxpemVkLXByZXZpZXdcIl0nKSkudG9CZVZpc2libGUoKTtcbiAgICAgIFxuICAgICAgLy8gU2F2ZSB3b3JrZmxvd1xuICAgICAgYXdhaXQgcGFnZS5jbGljaygnW2RhdGEtdGVzdGlkPVwic2F2ZS13b3JrZmxvd1wiXScpO1xuICAgICAgYXdhaXQgZXhwZWN0KHBhZ2UubG9jYXRvcignW2RhdGEtdGVzdGlkPVwic2F2ZS1zdWNjZXNzXCJdJykpLnRvQmVWaXNpYmxlKCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCd3b3JrZmxvdyB3ZWJob29rcyBhbmQgZXh0ZXJuYWwgaW50ZWdyYXRpb25zIHdvcmsnLCBhc3luYyAoeyBwYWdlIH0pID0+IHtcbiAgICAgIGF3YWl0IHRlc3RVdGlscy5uYXZpZ2F0ZVRvKCd3b3JrZmxvd3MnKTtcbiAgICAgIGF3YWl0IHBhZ2UuY2xpY2soJ1tkYXRhLXRlc3RpZD1cImNyZWF0ZS13b3JrZmxvd1wiXScpO1xuICAgICAgXG4gICAgICBhd2FpdCBwYWdlLmZpbGwoJ1tkYXRhLXRlc3RpZD1cIndvcmtmbG93LW5hbWVcIl0nLCAnRXh0ZXJuYWwgSW50ZWdyYXRpb24gV29ya2Zsb3cnKTtcbiAgICAgIFxuICAgICAgLy8gQWRkIHdlYmhvb2sgdHJpZ2dlclxuICAgICAgYXdhaXQgcGFnZS5kcmFnQW5kRHJvcCgnW2RhdGEtdGVzdGlkPVwidHJpZ2dlci13ZWJob29rXCJdJywgJ1tkYXRhLXRlc3RpZD1cIndvcmtmbG93LWNhbnZhc1wiXScpO1xuICAgICAgYXdhaXQgcGFnZS5jbGljaygnW2RhdGEtdGVzdGlkPVwid2ViaG9vay10cmlnZ2VyXCJdJyk7XG4gICAgICBcbiAgICAgIC8vIENvbmZpZ3VyZSB3ZWJob29rXG4gICAgICBhd2FpdCBwYWdlLmNsaWNrKCdbZGF0YS10ZXN0aWQ9XCJnZW5lcmF0ZS13ZWJob29rLXVybFwiXScpO1xuICAgICAgYXdhaXQgZXhwZWN0KHBhZ2UubG9jYXRvcignW2RhdGEtdGVzdGlkPVwid2ViaG9vay11cmxcIl0nKSkudG9CZVZpc2libGUoKTtcbiAgICAgIFxuICAgICAgLy8gQ29weSB3ZWJob29rIFVSTFxuICAgICAgYXdhaXQgcGFnZS5jbGljaygnW2RhdGEtdGVzdGlkPVwiY29weS13ZWJob29rLXVybFwiXScpO1xuICAgICAgYXdhaXQgZXhwZWN0KHBhZ2UubG9jYXRvcignW2RhdGEtdGVzdGlkPVwiY29weS1zdWNjZXNzXCJdJykpLnRvQmVWaXNpYmxlKCk7XG4gICAgICBcbiAgICAgIC8vIEFkZCBleHRlcm5hbCBBUEkgY2FsbFxuICAgICAgYXdhaXQgcGFnZS5kcmFnQW5kRHJvcCgnW2RhdGEtdGVzdGlkPVwiYXBpLWNhbGwtbm9kZVwiXScsICdbZGF0YS10ZXN0aWQ9XCJ3b3JrZmxvdy1jYW52YXNcIl0nKTtcbiAgICAgIGF3YWl0IHBhZ2UuY2xpY2soJ1tkYXRhLXRlc3RpZD1cImFwaS1ub2RlXCJdJyk7XG4gICAgICBcbiAgICAgIC8vIENvbmZpZ3VyZSBBUEkgY2FsbFxuICAgICAgYXdhaXQgcGFnZS5zZWxlY3RPcHRpb24oJ1tkYXRhLXRlc3RpZD1cImh0dHAtbWV0aG9kXCJdJywgJ1BPU1QnKTtcbiAgICAgIGF3YWl0IHBhZ2UuZmlsbCgnW2RhdGEtdGVzdGlkPVwiYXBpLXVybFwiXScsICdodHRwczovL2FwaS5leGFtcGxlLmNvbS9jb250YWN0cycpO1xuICAgICAgXG4gICAgICAvLyBBZGQgaGVhZGVyc1xuICAgICAgYXdhaXQgcGFnZS5jbGljaygnW2RhdGEtdGVzdGlkPVwiYWRkLWhlYWRlclwiXScpO1xuICAgICAgYXdhaXQgcGFnZS5maWxsKCdbZGF0YS10ZXN0aWQ9XCJoZWFkZXIta2V5XCJdJywgJ0F1dGhvcml6YXRpb24nKTtcbiAgICAgIGF3YWl0IHBhZ2UuZmlsbCgnW2RhdGEtdGVzdGlkPVwiaGVhZGVyLXZhbHVlXCJdJywgJ0JlYXJlciB7e2FwaV90b2tlbn19Jyk7XG4gICAgICBcbiAgICAgIC8vIENvbmZpZ3VyZSByZXF1ZXN0IGJvZHlcbiAgICAgIGF3YWl0IHBhZ2UuZmlsbCgnW2RhdGEtdGVzdGlkPVwicmVxdWVzdC1ib2R5XCJdJywgSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBlbWFpbDogJ3t7ZW1haWx9fScsXG4gICAgICAgIG5hbWU6ICd7e2ZpcnN0X25hbWV9fSB7e2xhc3RfbmFtZX19JyxcbiAgICAgICAgY29tcGFueTogJ3t7Y29tcGFueX19J1xuICAgICAgfSkpO1xuICAgICAgXG4gICAgICAvLyBBZGQgcmVzcG9uc2UgaGFuZGxpbmdcbiAgICAgIGF3YWl0IHBhZ2UuY2xpY2soJ1tkYXRhLXRlc3RpZD1cInJlc3BvbnNlLWhhbmRsaW5nXCJdJyk7XG4gICAgICBhd2FpdCBwYWdlLnNlbGVjdE9wdGlvbignW2RhdGEtdGVzdGlkPVwic3VjY2Vzcy1hY3Rpb25cIl0nLCAnY29udGludWUnKTtcbiAgICAgIGF3YWl0IHBhZ2Uuc2VsZWN0T3B0aW9uKCdbZGF0YS10ZXN0aWQ9XCJlcnJvci1hY3Rpb25cIl0nLCAncmV0cnknKTtcbiAgICAgIFxuICAgICAgLy8gVGVzdCBBUEkgY2FsbFxuICAgICAgYXdhaXQgcGFnZS5jbGljaygnW2RhdGEtdGVzdGlkPVwidGVzdC1hcGktY2FsbFwiXScpO1xuICAgICAgYXdhaXQgZXhwZWN0KHBhZ2UubG9jYXRvcignW2RhdGEtdGVzdGlkPVwiYXBpLXRlc3QtcmVzdWx0XCJdJykpLnRvQmVWaXNpYmxlKCk7XG4gICAgICBcbiAgICAgIC8vIFNhdmUgd29ya2Zsb3dcbiAgICAgIGF3YWl0IHBhZ2UuY2xpY2soJ1tkYXRhLXRlc3RpZD1cInNhdmUtd29ya2Zsb3dcIl0nKTtcbiAgICAgIGF3YWl0IGV4cGVjdChwYWdlLmxvY2F0b3IoJ1tkYXRhLXRlc3RpZD1cInNhdmUtc3VjY2Vzc1wiXScpKS50b0JlVmlzaWJsZSgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnd29ya2Zsb3cgcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uIHN1Z2dlc3Rpb25zIHdvcmsnLCBhc3luYyAoeyBwYWdlIH0pID0+IHtcbiAgICAgIGF3YWl0IHRlc3RVdGlscy5uYXZpZ2F0ZVRvKCd3b3JrZmxvd3MnKTtcbiAgICAgIFxuICAgICAgLy8gT3BlbiB3b3JrZmxvdyB3aXRoIHBlcmZvcm1hbmNlIGRhdGFcbiAgICAgIGF3YWl0IHBhZ2UuY2xpY2soJ1tkYXRhLXRlc3RpZD1cIndvcmtmbG93LXJvd1wiXTpmaXJzdC1jaGlsZCcpO1xuICAgICAgYXdhaXQgcGFnZS5jbGljaygnW2RhdGEtdGVzdGlkPVwicGVyZm9ybWFuY2Utb3B0aW1pemF0aW9uXCJdJyk7XG4gICAgICBcbiAgICAgIGF3YWl0IHRlc3RVdGlscy53YWl0Rm9yTG9hZGluZ0NvbXBsZXRlKCk7XG4gICAgICBhd2FpdCB0ZXN0VXRpbHMudmVyaWZ5TUNQRGF0YUxvYWRlZCgpO1xuICAgICAgXG4gICAgICAvLyBDaGVjayBBSSBvcHRpbWl6YXRpb24gc3VnZ2VzdGlvbnNcbiAgICAgIGF3YWl0IGV4cGVjdChwYWdlLmxvY2F0b3IoJ1tkYXRhLXRlc3RpZD1cImFpLXN1Z2dlc3Rpb25zXCJdJykpLnRvQmVWaXNpYmxlKCk7XG4gICAgICBcbiAgICAgIC8vIFZlcmlmeSBzdWdnZXN0aW9uIGNhdGVnb3JpZXNcbiAgICAgIGNvbnN0IHN1Z2dlc3Rpb25UeXBlcyA9IFtcbiAgICAgICAgJ3RpbWluZy1vcHRpbWl6YXRpb24nLFxuICAgICAgICAnY29udGVudC1pbXByb3ZlbWVudCcsXG4gICAgICAgICdhdWRpZW5jZS1yZWZpbmVtZW50JyxcbiAgICAgICAgJ3BlcmZvcm1hbmNlLWVuaGFuY2VtZW50J1xuICAgICAgXTtcblxuICAgICAgZm9yIChjb25zdCBzdWdnZXN0aW9uVHlwZSBvZiBzdWdnZXN0aW9uVHlwZXMpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBhd2FpdCBleHBlY3QocGFnZS5sb2NhdG9yKGBbZGF0YS10ZXN0aWQ9XCIke3N1Z2dlc3Rpb25UeXBlfVwiXWApKS50b0JlVmlzaWJsZSh7IHRpbWVvdXQ6IDIwMDAgfSk7XG4gICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgIC8vIE5vdCBhbGwgc3VnZ2VzdGlvbiB0eXBlcyBtYXkgYmUgYXZhaWxhYmxlXG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gQXBwbHkgb3B0aW1pemF0aW9uIHN1Z2dlc3Rpb25cbiAgICAgIGF3YWl0IHBhZ2UuY2xpY2soJ1tkYXRhLXRlc3RpZD1cImFwcGx5LXN1Z2dlc3Rpb25cIl06Zmlyc3QtY2hpbGQnKTtcbiAgICAgIGF3YWl0IGV4cGVjdChwYWdlLmxvY2F0b3IoJ1tkYXRhLXRlc3RpZD1cIm9wdGltaXphdGlvbi1hcHBsaWVkXCJdJykpLnRvQmVWaXNpYmxlKCk7XG4gICAgICBcbiAgICAgIC8vIENoZWNrIHBlcmZvcm1hbmNlIGltcGFjdCBwcmVkaWN0aW9uXG4gICAgICBhd2FpdCBleHBlY3QocGFnZS5sb2NhdG9yKCdbZGF0YS10ZXN0aWQ9XCJwcmVkaWN0ZWQtaW1wcm92ZW1lbnRcIl0nKSkudG9CZVZpc2libGUoKTtcbiAgICB9KTtcbiAgfSk7XG59KTsiXSwibmFtZXMiOlsidGVzdCIsImRlc2NyaWJlIiwidGVzdFV0aWxzIiwiYmVmb3JlRWFjaCIsInBhZ2UiLCJUZXN0VXRpbHMiLCJsb2dpbiIsIm5hdmlnYXRlVG8iLCJjcmVhdGVUZXN0V29ya2Zsb3ciLCJleHBlY3QiLCJsb2NhdG9yIiwidG9CZVZpc2libGUiLCJkcmFnQW5kRHJvcCIsImNsaWNrIiwiZmlsbCIsInNlbGVjdE9wdGlvbiIsImhvdmVyIiwibW91c2UiLCJkb3duIiwidXAiLCJ3YWl0Rm9yTG9hZGluZ0NvbXBsZXRlIiwidG9IYXZlQ291bnQiLCJtaW4iLCJ0b0NvbnRhaW5UZXh0IiwidmVyaWZ5TUNQRGF0YUxvYWRlZCIsImV4ZWN1dGlvblN0ZXBzIiwic3RlcCIsInRpbWVvdXQiLCJwZXJmb3JtYW5jZU1ldHJpY3MiLCJtZXRyaWMiLCJ2YWx1ZSIsInRleHRDb250ZW50Iiwibm90IiwidG9Db250YWluIiwiY2hlY2siLCJKU09OIiwic3RyaW5naWZ5IiwiZW1haWwiLCJuYW1lIiwiY29tcGFueSIsInN1Z2dlc3Rpb25UeXBlcyIsInN1Z2dlc3Rpb25UeXBlIl0sIm1hcHBpbmdzIjoiOzs7O3NCQUE2QjsyQkFDSDtBQUUxQjs7O0NBR0MsR0FFREEsVUFBSSxDQUFDQyxRQUFRLENBQUMsdUJBQXVCO0lBQ25DLElBQUlDO0lBRUpGLFVBQUksQ0FBQ0csVUFBVSxDQUFDLE9BQU8sRUFBRUMsSUFBSSxFQUFFO1FBQzdCRixZQUFZLElBQUlHLG9CQUFTLENBQUNEO1FBQzFCLE1BQU1GLFVBQVVJLEtBQUs7SUFDdkI7SUFFQU4sVUFBSSxDQUFDQyxRQUFRLENBQUMsb0JBQW9CO1FBQ2hDRCxJQUFBQSxVQUFJLEVBQUMsNENBQTRDLE9BQU8sRUFBRUksSUFBSSxFQUFFO1lBQzlELE1BQU1GLFVBQVVLLFVBQVUsQ0FBQztZQUUzQixzQkFBc0I7WUFDdEIsTUFBTUwsVUFB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