{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/__tests__/e2e/workflow-automation.test.ts"],"sourcesContent":["import { test, expect } from '@playwright/test';\nimport { TestUtils } from './test-utils';\n\n/**\n * Workflow Automation E2E Tests\n * Tests visual workflow builder and automation execution with MCP data\n */\n\ntest.describe('Workflow Automation', () => {\n  let testUtils: TestUtils;\n\n  test.beforeEach(async ({ page }) => {\n    testUtils = new TestUtils(page);\n    await testUtils.login();\n  });\n\n  test.describe('Workflow Builder', () => {\n    test('can create workflow using visual builder', async ({ page }) => {\n      await testUtils.navigateTo('workflows');\n      \n      // Create new workflow\n      await testUtils.createTestWorkflow('Welcome Series Automation');\n      \n      // Verify workflow builder interface\n      await expect(page.locator('[data-testid=\"workflow-canvas\"]')).toBeVisible();\n      await expect(page.locator('[data-testid=\"node-palette\"]')).toBeVisible();\n      \n      // Add trigger node\n      await page.dragAndDrop('[data-testid=\"trigger-contact-created\"]', '[data-testid=\"workflow-canvas\"]');\n      \n      // Configure trigger\n      await page.click('[data-testid=\"trigger-node\"]');\n      await expect(page.locator('[data-testid=\"trigger-settings\"]')).toBeVisible();\n      \n      // Add delay node\n      await page.dragAndDrop('[data-testid=\"delay-node\"]', '[data-testid=\"workflow-canvas\"]');\n      \n      // Configure delay\n      await page.click('[data-testid=\"delay-node\"]');\n      await page.fill('[data-testid=\"delay-amount\"]', '1');\n      await page.selectOption('[data-testid=\"delay-unit\"]', 'hours');\n      \n      // Add email action\n      await page.dragAndDrop('[data-testid=\"send-email-node\"]', '[data-testid=\"workflow-canvas\"]');\n      \n      // Configure email\n      await page.click('[data-testid=\"email-node\"]');\n      await page.selectOption('[data-testid=\"email-template\"]', 'welcome-email');\n      \n      // Connect nodes\n      await page.hover('[data-testid=\"trigger-node\"] [data-testid=\"output-connector\"]');\n      await page.mouse.down();\n      await page.hover('[data-testid=\"delay-node\"] [data-testid=\"input-connector\"]');\n      await page.mouse.up();\n      \n      await page.hover('[data-testid=\"delay-node\"] [data-testid=\"output-connector\"]');\n      await page.mouse.down();\n      await page.hover('[data-testid=\"email-node\"] [data-testid=\"input-connector\"]');\n      await page.mouse.up();\n      \n      // Save workflow\n      await page.click('[data-testid=\"save-workflow\"]');\n      await testUtils.waitForLoadingComplete();\n      \n      // Verify workflow is saved\n      await expect(page.locator('[data-testid=\"save-success\"]')).toBeVisible();\n    });\n\n    test('workflow validation and error handling works', async ({ page }) => {\n      await testUtils.navigateTo('workflows');\n      await page.click('[data-testid=\"create-workflow\"]');\n      \n      // Try to save incomplete workflow\n      await page.click('[data-testid=\"save-workflow\"]');\n      \n      // Verify validation errors\n      await expect(page.locator('[data-testid=\"validation-errors\"]')).toBeVisible();\n      await expect(page.locator('text=Workflow must have at least one trigger')).toBeVisible();\n      \n      // Add trigger but no actions\n      await page.dragAndDrop('[data-testid=\"trigger-form-submission\"]', '[data-testid=\"workflow-canvas\"]');\n      await page.click('[data-testid=\"save-workflow\"]');\n      \n      // Verify action requirement error\n      await expect(page.locator('text=Workflow must have at least one action')).toBeVisible();\n      \n      // Add action with invalid configuration\n      await page.dragAndDrop('[data-testid=\"send-email-node\"]', '[data-testid=\"workflow-canvas\"]');\n      await page.click('[data-testid=\"save-workflow\"]');\n      \n      // Verify configuration errors\n      await expect(page.locator('text=Email template is required')).toBeVisible();\n      \n      // Fix configuration and save successfully\n      await page.click('[data-testid=\"email-node\"]');\n      await page.selectOption('[data-testid=\"email-template\"]', 'default-template');\n      await page.click('[data-testid=\"save-workflow\"]');\n      \n      // Verify successful save\n      await expect(page.locator('[data-testid=\"save-success\"]')).toBeVisible();\n    });\n\n    test('complex workflow with conditional logic works', async ({ page }) => {\n      await testUtils.navigateTo('workflows');\n      await page.click('[data-testid=\"create-workflow\"]');\n      \n      await page.fill('[data-testid=\"workflow-name\"]', 'Advanced Lead Nurturing');\n      \n      // Add form submission trigger\n      await page.dragAndDrop('[data-testid=\"trigger-form-submission\"]', '[data-testid=\"workflow-canvas\"]');\n      \n      // Add condition node\n      await page.dragAndDrop('[data-testid=\"condition-node\"]', '[data-testid=\"workflow-canvas\"]');\n      \n      // Configure condition\n      await page.click('[data-testid=\"condition-node\"]');\n      await page.selectOption('[data-testid=\"condition-field\"]', 'lead_score');\n      await page.selectOption('[data-testid=\"condition-operator\"]', 'greater_than');\n      await page.fill('[data-testid=\"condition-value\"]', '50');\n      \n      // Add actions for both branches\n      // High score branch\n      await page.dragAndDrop('[data-testid=\"send-email-node\"]', '[data-testid=\"workflow-canvas\"]');\n      await page.click('[data-testid=\"email-node\"]');\n      await page.selectOption('[data-testid=\"email-template\"]', 'high-value-lead');\n      \n      // Low score branch\n      await page.dragAndDrop('[data-testid=\"send-email-node\"]', '[data-testid=\"workflow-canvas\"]');\n      await page.click('[data-testid=\"email-node\"]:nth-child(2)');\n      await page.selectOption('[data-testid=\"email-template\"]', 'nurture-sequence');\n      \n      // Connect nodes\n      // Trigger to condition\n      await page.hover('[data-testid=\"trigger-node\"] [data-testid=\"output-connector\"]');\n      await page.mouse.down();\n      await page.hover('[data-testid=\"condition-node\"] [data-testid=\"input-connector\"]');\n      await page.mouse.up();\n      \n      // Condition to high score email (true branch)\n      await page.hover('[data-testid=\"condition-node\"] [data-testid=\"true-connector\"]');\n      await page.mouse.down();\n      await page.hover('[data-testid=\"email-node\"]:first-child [data-testid=\"input-connector\"]');\n      await page.mouse.up();\n      \n      // Condition to low score email (false branch)\n      await page.hover('[data-testid=\"condition-node\"] [data-testid=\"false-connector\"]');\n      await page.mouse.down();\n      await page.hover('[data-testid=\"email-node\"]:nth-child(2) [data-testid=\"input-connector\"]');\n      await page.mouse.up();\n      \n      // Test workflow\n      await page.click('[data-testid=\"test-workflow\"]');\n      await expect(page.locator('[data-testid=\"test-results\"]')).toBeVisible();\n      \n      // Save workflow\n      await page.click('[data-testid=\"save-workflow\"]');\n      await expect(page.locator('[data-testid=\"save-success\"]')).toBeVisible();\n    });\n\n    test('workflow templates and marketplace work', async ({ page }) => {\n      await testUtils.navigateTo('workflows');\n      \n      // Access template marketplace\n      await page.click('[data-testid=\"workflow-templates\"]');\n      await expect(page.locator('[data-testid=\"template-marketplace\"]')).toBeVisible();\n      \n      // Browse template categories\n      await page.click('[data-testid=\"category-welcome-series\"]');\n      await expect(page.locator('[data-testid=\"welcome-templates\"]')).toBeVisible();\n      \n      // Preview template\n      await page.click('[data-testid=\"template-preview\"]:first-child');\n      await expect(page.locator('[data-testid=\"template-details\"]')).toBeVisible();\n      \n      // Check template rating and reviews\n      await expect(page.locator('[data-testid=\"template-rating\"]')).toBeVisible();\n      await expect(page.locator('[data-testid=\"template-reviews\"]')).toBeVisible();\n      \n      // Install template\n      await page.click('[data-testid=\"install-template\"]');\n      await page.fill('[data-testid=\"workflow-name\"]', 'Installed Welcome Series');\n      await page.click('[data-testid=\"confirm-install\"]');\n      \n      // Verify template is installed and customizable\n      await expect(page.locator('[data-testid=\"workflow-canvas\"]')).toBeVisible();\n      await expect(page.locator('[data-testid=\"template-nodes\"]')).toHaveCount({ min: 3 });\n      \n      // Customize template\n      await page.click('[data-testid=\"email-node\"]:first-child');\n      await page.selectOption('[data-testid=\"email-template\"]', 'custom-welcome');\n      \n      // Save customized workflow\n      await page.click('[data-testid=\"save-workflow\"]');\n      await expect(page.locator('text=Installed Welcome Series')).toBeVisible();\n    });\n  });\n\n  test.describe('Workflow Execution & Monitoring', () => {\n    test('workflow execution with real MCP data works', async ({ page }) => {\n      await testUtils.navigateTo('workflows');\n      \n      // Open existing workflow\n      await page.click('[data-testid=\"workflow-row\"]:first-child');\n      await page.click('[data-testid=\"view-workflow\"]');\n      \n      // Activate workflow\n      await page.click('[data-testid=\"activate-workflow\"]');\n      await expect(page.locator('[data-testid=\"workflow-status\"]')).toContainText('Active');\n      \n      // View execution logs\n      await page.click('[data-testid=\"execution-logs\"]');\n      await testUtils.waitForLoadingComplete();\n      \n      // Verify real execution data (not demo)\n      await testUtils.verifyMCPDataLoaded();\n      await expect(page.locator('[data-testid=\"execution-entry\"]')).toHaveCount({ min: 1 });\n      \n      // Check execution details\n      await page.click('[data-testid=\"execution-entry\"]:first-child');\n      await expect(page.locator('[data-testid=\"execution-timeline\"]')).toBeVisible();\n      \n      // Verify step-by-step execution\n      const executionSteps = [\n        'trigger-executed',\n        'condition-evaluated',\n        'action-completed'\n      ];\n\n      for (const step of executionSteps) {\n        try {\n          await expect(page.locator(`[data-testid=\"${step}\"]`)).toBeVisible({ timeout: 2000 });\n        } catch {\n          // Not all steps may be present in every execution\n          continue;\n        }\n      }\n    });\n\n    test('workflow performance analytics show real metrics', async ({ page }) => {\n      await testUtils.navigateTo('workflows');\n      \n      // View workflow analytics\n      await page.click('[data-testid=\"workflow-analytics\"]');\n      await testUtils.waitForLoadingComplete();\n      await testUtils.verifyMCPDataLoaded();\n      \n      // Verify performance metrics\n      const performanceMetrics = [\n        'total-executions',\n        'success-rate',\n        'average-completion-time',\n        'conversion-rate',\n        'revenue-generated'\n      ];\n\n      for (const metric of performanceMetrics) {\n        await expect(page.locator(`[data-testid=\"${metric}\"]`)).toBeVisible();\n        \n        // Verify values are not placeholder/demo\n        const value = await page.textContent(`[data-testid=\"${metric}\"]`);\n        expect(value).not.toContain('Demo');\n        expect(value).not.toContain('N/A');\n      }\n      \n      // Check performance charts\n      await expect(page.locator('[data-testid=\"execution-trend-chart\"]')).toBeVisible();\n      await expect(page.locator('[data-testid=\"conversion-funnel\"]')).toBeVisible();\n      \n      // Verify real-time metrics\n      await expect(page.locator('[data-testid=\"realtime-executions\"]')).toBeVisible();\n    });\n\n    test('workflow error handling and retry mechanisms work', async ({ page }) => {\n      await testUtils.navigateTo('workflows');\n      \n      // Create workflow with potential failure points\n      await page.click('[data-testid=\"create-workflow\"]');\n      await page.fill('[data-testid=\"workflow-name\"]', 'Error Handling Test');\n      \n      // Add trigger\n      await page.dragAndDrop('[data-testid=\"trigger-contact-created\"]', '[data-testid=\"workflow-canvas\"]');\n      \n      // Add email action with retry configuration\n      await page.dragAndDrop('[data-testid=\"send-email-node\"]', '[data-testid=\"workflow-canvas\"]');\n      await page.click('[data-testid=\"email-node\"]');\n      \n      // Configure retry settings\n      await page.click('[data-testid=\"advanced-settings\"]');\n      await page.fill('[data-testid=\"max-retries\"]', '3');\n      await page.fill('[data-testid=\"retry-delay\"]', '5');\n      await page.selectOption('[data-testid=\"retry-strategy\"]', 'exponential_backoff');\n      \n      // Configure error handling\n      await page.selectOption('[data-testid=\"on-error\"]', 'continue');\n      await page.check('[data-testid=\"log-errors\"]');\n      \n      // Save and activate\n      await page.click('[data-testid=\"save-workflow\"]');\n      await page.click('[data-testid=\"activate-workflow\"]');\n      \n      // Simulate error by using invalid email template\n      await page.click('[data-testid=\"email-node\"]');\n      await page.selectOption('[data-testid=\"email-template\"]', 'invalid-template');\n      await page.click('[data-testid=\"update-node\"]');\n      \n      // Trigger workflow execution\n      await page.click('[data-testid=\"manual-trigger\"]');\n      \n      // Check error logs\n      await page.click('[data-testid=\"error-logs\"]');\n      await expect(page.locator('[data-testid=\"error-entry\"]')).toBeVisible();\n      \n      // Verify retry attempts\n      await expect(page.locator('[data-testid=\"retry-attempts\"]')).toContainText('3');\n      \n      // Check error notification\n      await expect(page.locator('[data-testid=\"error-notification\"]')).toBeVisible();\n    });\n\n    test('workflow A/B testing and optimization work', async ({ page }) => {\n      await testUtils.navigateTo('workflows');\n      \n      // Create A/B test workflow\n      await page.click('[data-testid=\"create-ab-test-workflow\"]');\n      \n      // Configure A/B test\n      await page.fill('[data-testid=\"workflow-name\"]', 'Email Timing A/B Test');\n      await page.selectOption('[data-testid=\"test-variable\"]', 'send_time');\n      \n      // Version A: Send immediately\n      await page.fill('[data-testid=\"version-a-name\"]', 'Immediate Send');\n      await page.dragAndDrop('[data-testid=\"trigger-form-submission\"]', '[data-testid=\"canvas-a\"]');\n      await page.dragAndDrop('[data-testid=\"send-email-node\"]', '[data-testid=\"canvas-a\"]');\n      \n      // Version B: Send with delay\n      await page.fill('[data-testid=\"version-b-name\"]', 'Delayed Send');\n      await page.dragAndDrop('[data-testid=\"trigger-form-submission\"]', '[data-testid=\"canvas-b\"]');\n      await page.dragAndDrop('[data-testid=\"delay-node\"]', '[data-testid=\"canvas-b\"]');\n      await page.dragAndDrop('[data-testid=\"send-email-node\"]', '[data-testid=\"canvas-b\"]');\n      \n      // Configure test settings\n      await page.fill('[data-testid=\"test-duration\"]', '14'); // days\n      await page.fill('[data-testid=\"traffic-split\"]', '50'); // 50/50 split\n      await page.selectOption('[data-testid=\"success-metric\"]', 'email_open_rate');\n      \n      // Start A/B test\n      await page.click('[data-testid=\"start-ab-test\"]');\n      await expect(page.locator('[data-testid=\"test-status\"]')).toContainText('Running');\n      \n      // Check test performance\n      await page.click('[data-testid=\"test-performance\"]');\n      await expect(page.locator('[data-testid=\"version-a-metrics\"]')).toBeVisible();\n      await expect(page.locator('[data-testid=\"version-b-metrics\"]')).toBeVisible();\n      \n      // Verify statistical significance tracking\n      await expect(page.locator('[data-testid=\"statistical-significance\"]')).toBeVisible();\n    });\n  });\n\n  test.describe('Advanced Workflow Features', () => {\n    test('multi-channel workflow sequences work correctly', async ({ page }) => {\n      await testUtils.navigateTo('workflows');\n      await page.click('[data-testid=\"create-workflow\"]');\n      \n      await page.fill('[data-testid=\"workflow-name\"]', 'Multi-Channel Nurture');\n      \n      // Add trigger\n      await page.dragAndDrop('[data-testid=\"trigger-lead-score\"]', '[data-testid=\"workflow-canvas\"]');\n      \n      // Add email sequence\n      await page.dragAndDrop('[data-testid=\"send-email-node\"]', '[data-testid=\"workflow-canvas\"]');\n      await page.click('[data-testid=\"email-node\"]');\n      await page.selectOption('[data-testid=\"email-template\"]', 'nurture-email-1');\n      \n      // Add delay\n      await page.dragAndDrop('[data-testid=\"delay-node\"]', '[data-testid=\"workflow-canvas\"]');\n      await page.click('[data-testid=\"delay-node\"]');\n      await page.fill('[data-testid=\"delay-amount\"]', '3');\n      await page.selectOption('[data-testid=\"delay-unit\"]', 'days');\n      \n      // Add SMS follow-up\n      await page.dragAndDrop('[data-testid=\"send-sms-node\"]', '[data-testid=\"workflow-canvas\"]');\n      await page.click('[data-testid=\"sms-node\"]');\n      await page.selectOption('[data-testid=\"sms-template\"]', 'nurture-sms');\n      \n      // Add another delay\n      await page.dragAndDrop('[data-testid=\"delay-node\"]', '[data-testid=\"workflow-canvas\"]');\n      \n      // Add WhatsApp message\n      await page.dragAndDrop('[data-testid=\"send-whatsapp-node\"]', '[data-testid=\"workflow-canvas\"]');\n      await page.click('[data-testid=\"whatsapp-node\"]');\n      await page.selectOption('[data-testid=\"whatsapp-template\"]', 'nurture-whatsapp');\n      \n      // Connect all nodes\n      // This would involve multiple drag operations to connect the sequence\n      \n      // Configure channel preferences\n      await page.click('[data-testid=\"channel-preferences\"]');\n      await page.check('[data-testid=\"respect-unsubscribe\"]');\n      await page.check('[data-testid=\"respect-channel-preference\"]');\n      \n      // Save and test\n      await page.click('[data-testid=\"save-workflow\"]');\n      await page.click('[data-testid=\"test-workflow\"]');\n      \n      // Verify multi-channel execution\n      await expect(page.locator('[data-testid=\"test-results\"]')).toBeVisible();\n      await expect(page.locator('[data-testid=\"channel-execution-plan\"]')).toBeVisible();\n    });\n\n    test('workflow data enrichment and personalization work', async ({ page }) => {\n      await testUtils.navigateTo('workflows');\n      await page.click('[data-testid=\"create-workflow\"]');\n      \n      await page.fill('[data-testid=\"workflow-name\"]', 'Data Enrichment Workflow');\n      \n      // Add trigger\n      await page.dragAndDrop('[data-testid=\"trigger-contact-created\"]', '[data-testid=\"workflow-canvas\"]');\n      \n      // Add data enrichment node\n      await page.dragAndDrop('[data-testid=\"enrich-data-node\"]', '[data-testid=\"workflow-canvas\"]');\n      await page.click('[data-testid=\"enrich-node\"]');\n      \n      // Configure enrichment sources\n      await page.check('[data-testid=\"enrich-company-data\"]');\n      await page.check('[data-testid=\"enrich-social-profiles\"]');\n      await page.check('[data-testid=\"enrich-location-data\"]');\n      \n      // Add personalization node\n      await page.dragAndDrop('[data-testid=\"personalization-node\"]', '[data-testid=\"workflow-canvas\"]');\n      await page.click('[data-testid=\"personalization-node\"]');\n      \n      // Configure personalization rules\n      await page.click('[data-testid=\"add-personalization-rule\"]');\n      await page.selectOption('[data-testid=\"rule-field\"]', 'industry');\n      await page.selectOption('[data-testid=\"rule-operator\"]', 'equals');\n      await page.fill('[data-testid=\"rule-value\"]', 'Technology');\n      await page.selectOption('[data-testid=\"rule-template\"]', 'tech-industry-email');\n      \n      // Add email with dynamic content\n      await page.dragAndDrop('[data-testid=\"send-email-node\"]', '[data-testid=\"workflow-canvas\"]');\n      await page.click('[data-testid=\"email-node\"]');\n      \n      // Configure dynamic content\n      await page.click('[data-testid=\"email-content\"]');\n      await page.fill('[data-testid=\"email-subject\"]', 'Welcome {{first_name}} from {{company}}!');\n      await page.fill('[data-testid=\"email-body\"]', 'Hi {{first_name}}, we noticed you work at {{company}} in {{city}}. Here are some {{industry}}-specific resources...');\n      \n      // Test personalization\n      await page.click('[data-testid=\"test-personalization\"]');\n      await expect(page.locator('[data-testid=\"personalized-preview\"]')).toBeVisible();\n      \n      // Save workflow\n      await page.click('[data-testid=\"save-workflow\"]');\n      await expect(page.locator('[data-testid=\"save-success\"]')).toBeVisible();\n    });\n\n    test('workflow webhooks and external integrations work', async ({ page }) => {\n      await testUtils.navigateTo('workflows');\n      await page.click('[data-testid=\"create-workflow\"]');\n      \n      await page.fill('[data-testid=\"workflow-name\"]', 'External Integration Workflow');\n      \n      // Add webhook trigger\n      await page.dragAndDrop('[data-testid=\"trigger-webhook\"]', '[data-testid=\"workflow-canvas\"]');\n      await page.click('[data-testid=\"webhook-trigger\"]');\n      \n      // Configure webhook\n      await page.click('[data-testid=\"generate-webhook-url\"]');\n      await expect(page.locator('[data-testid=\"webhook-url\"]')).toBeVisible();\n      \n      // Copy webhook URL\n      await page.click('[data-testid=\"copy-webhook-url\"]');\n      await expect(page.locator('[data-testid=\"copy-success\"]')).toBeVisible();\n      \n      // Add external API call\n      await page.dragAndDrop('[data-testid=\"api-call-node\"]', '[data-testid=\"workflow-canvas\"]');\n      await page.click('[data-testid=\"api-node\"]');\n      \n      // Configure API call\n      await page.selectOption('[data-testid=\"http-method\"]', 'POST');\n      await page.fill('[data-testid=\"api-url\"]', 'https://api.example.com/contacts');\n      \n      // Add headers\n      await page.click('[data-testid=\"add-header\"]');\n      await page.fill('[data-testid=\"header-key\"]', 'Authorization');\n      await page.fill('[data-testid=\"header-value\"]', 'Bearer {{api_token}}');\n      \n      // Configure request body\n      await page.fill('[data-testid=\"request-body\"]', JSON.stringify({\n        email: '{{email}}',\n        name: '{{first_name}} {{last_name}}',\n        company: '{{company}}'\n      }));\n      \n      // Add response handling\n      await page.click('[data-testid=\"response-handling\"]');\n      await page.selectOption('[data-testid=\"success-action\"]', 'continue');\n      await page.selectOption('[data-testid=\"error-action\"]', 'retry');\n      \n      // Test API call\n      await page.click('[data-testid=\"test-api-call\"]');\n      await expect(page.locator('[data-testid=\"api-test-result\"]')).toBeVisible();\n      \n      // Save workflow\n      await page.click('[data-testid=\"save-workflow\"]');\n      await expect(page.locator('[data-testid=\"save-success\"]')).toBeVisible();\n    });\n\n    test('workflow performance optimization suggestions work', async ({ page }) => {\n      await testUtils.navigateTo('workflows');\n      \n      // Open workflow with performance data\n      await page.click('[data-testid=\"workflow-row\"]:first-child');\n      await page.click('[data-testid=\"performance-optimization\"]');\n      \n      await testUtils.waitForLoadingComplete();\n      await testUtils.verifyMCPDataLoaded();\n      \n      // Check AI optimization suggestions\n      await expect(page.locator('[data-testid=\"ai-suggestions\"]')).toBeVisible();\n      \n      // Verify suggestion categories\n      const suggestionTypes = [\n        'timing-optimization',\n        'content-improvement',\n        'audience-refinement',\n        'performance-enhancement'\n      ];\n\n      for (const suggestionType of suggestionTypes) {\n        try {\n          await expect(page.locator(`[data-testid=\"${suggestionType}\"]`)).toBeVisible({ timeout: 2000 });\n        } catch {\n          // Not all suggestion types may be available\n          continue;\n        }\n      }\n      \n      // Apply optimization suggestion\n      await page.click('[data-testid=\"apply-suggestion\"]:first-child');\n      await expect(page.locator('[data-testid=\"optimization-applied\"]')).toBeVisible();\n      \n      // Check performance impact prediction\n      await expect(page.locator('[data-testid=\"predicted-improvement\"]')).toBeVisible();\n    });\n  });\n});"],"names":["test","describe","testUtils","beforeEach","page","TestUtils","login","navigateTo","createTestWorkflow","expect","locator","toBeVisible","dragAndDrop","click","fill","selectOption","hover","mouse","down","up","waitForLoadingComplete","toHaveCount","min","toContainText","verifyMCPDataLoaded","executionSteps","step","timeout","performanceMetrics","metric","value","textContent","not","toContain","check","JSON","stringify","email","name","company","suggestionTypes","suggestionType"],"mappings":"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"}