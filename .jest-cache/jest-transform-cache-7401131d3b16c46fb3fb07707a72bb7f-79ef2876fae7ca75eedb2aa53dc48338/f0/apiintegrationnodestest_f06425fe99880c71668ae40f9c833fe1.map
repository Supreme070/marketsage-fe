{"version":3,"sources":["/Users/supreme/Desktop/marketsage/__tests__/api-integration-nodes.test.ts"],"sourcesContent":["import { \n  executeGenericApiCall,\n  executeCrmAction,\n  executePaymentWebhook,\n  validateApiConfiguration,\n  validateCrmConfiguration,\n  validatePaymentWebhookConfiguration,\n  type GenericApiConfiguration,\n  type CrmActionConfiguration,\n  type PaymentWebhookConfiguration\n} from '../src/lib/workflow/api-integration-nodes';\n\n// Mock fetch globally\nglobal.fetch = jest.fn();\n\n// Mock prisma\njest.mock('../src/lib/db/prisma', () => ({\n  contact: {\n    update: jest.fn(),\n  },\n  emailActivity: {\n    create: jest.fn(),\n  },\n}));\n\n// Mock rate limiter\njest.mock('../src/lib/rate-limiter', () => ({\n  workflowRateLimiter: {\n    check: jest.fn().mockResolvedValue({ allowed: true, remaining: 100 }),\n  },\n}));\n\ndescribe('API Integration Nodes', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('executeGenericApiCall', () => {\n    it('should execute a successful GET request', async () => {\n      const mockResponse = { success: true, data: { id: 1, name: 'Test' } };\n      (global.fetch as jest.Mock).mockResolvedValue({\n        ok: true,\n        status: 200,\n        statusText: 'OK',\n        json: () => Promise.resolve(mockResponse),\n      });\n\n      const config: GenericApiConfiguration = {\n        url: 'https://api.example.com/test',\n        method: 'GET',\n        timeout: 5000,\n      };\n\n      const context = {\n        contact: { id: 'contact-1', email: 'test@example.com' },\n        workflow: { id: 'workflow-1', name: 'Test Workflow' },\n        variables: {},\n      };\n\n      const result = await executeGenericApiCall(config, context);\n\n      expect(result.success).toBe(true);\n      expect(result.status).toBe(200);\n      expect(result.data).toEqual(mockResponse);\n    });\n\n    it('should handle API call failures with retry', async () => {\n      (global.fetch as jest.Mock)\n        .mockRejectedValueOnce(new Error('Network error'))\n        .mockRejectedValueOnce(new Error('Network error'))\n        .mockResolvedValue({\n          ok: true,\n          status: 200,\n          statusText: 'OK',\n          json: () => Promise.resolve({ success: true }),\n        });\n\n      const config: GenericApiConfiguration = {\n        url: 'https://api.example.com/test',\n        method: 'POST',\n        retryCount: 3,\n        retryDelay: 100,\n      };\n\n      const context = {\n        contact: { id: 'contact-1', email: 'test@example.com' },\n        workflow: { id: 'workflow-1', name: 'Test Workflow' },\n        variables: {},\n      };\n\n      const result = await executeGenericApiCall(config, context);\n\n      expect(result.success).toBe(true);\n      expect(fetch).toHaveBeenCalledTimes(3);\n    });\n\n    it('should reject non-HTTPS URLs', async () => {\n      const config: GenericApiConfiguration = {\n        url: 'http://api.example.com/test',\n        method: 'GET',\n      };\n\n      const context = {\n        contact: { id: 'contact-1' },\n        workflow: { id: 'workflow-1' },\n        variables: {},\n      };\n\n      await expect(executeGenericApiCall(config, context)).rejects.toThrow(\n        'Only HTTPS URLs are allowed'\n      );\n    });\n  });\n\n  describe('executeCrmAction', () => {\n    it('should execute a CRM create contact action', async () => {\n      const mockResponse = { id: 'crm-contact-123', properties: { email: 'test@example.com' } };\n      (global.fetch as jest.Mock).mockResolvedValue({\n        ok: true,\n        status: 201,\n        statusText: 'Created',\n        json: () => Promise.resolve(mockResponse),\n      });\n\n      const config: CrmActionConfiguration = {\n        url: 'https://api.hubapi.com/crm/v3/objects/contacts',\n        method: 'POST',\n        actionType: 'create_contact',\n        provider: 'hubspot',\n        fieldMapping: {\n          email: 'contact.email',\n          firstname: 'contact.firstName',\n        },\n        authentication: {\n          type: 'bearer',\n          credentials: { token: 'test-token' },\n        },\n      };\n\n      const context = {\n        contact: { \n          id: 'contact-1', \n          email: 'test@example.com', \n          firstName: 'John',\n          lastName: 'Doe'\n        },\n        workflow: { id: 'workflow-1', name: 'Test Workflow' },\n        variables: {},\n      };\n\n      const result = await executeCrmAction(config, context);\n\n      expect(result.success).toBe(true);\n      expect(result.actionType).toBe('create_contact');\n      expect(result.provider).toBe('hubspot');\n      expect(result.data).toEqual(mockResponse);\n    });\n  });\n\n  describe('executePaymentWebhook', () => {\n    it('should execute a payment webhook', async () => {\n      const mockResponse = { received: true, id: 'webhook-123' };\n      (global.fetch as jest.Mock).mockResolvedValue({\n        ok: true,\n        status: 200,\n        statusText: 'OK',\n        json: () => Promise.resolve(mockResponse),\n      });\n\n      const config: PaymentWebhookConfiguration = {\n        url: 'https://api.stripe.com/webhooks/payment',\n        method: 'POST',\n        provider: 'stripe',\n        webhookType: 'payment_success',\n        eventData: {\n          amount: 1000,\n          currency: 'USD',\n        },\n      };\n\n      const context = {\n        contact: { id: 'contact-1', email: 'test@example.com' },\n        workflow: { id: 'workflow-1', name: 'Test Workflow' },\n        variables: {},\n      };\n\n      const result = await executePaymentWebhook(config, context);\n\n      expect(result.success).toBe(true);\n      expect(result.provider).toBe('stripe');\n      expect(result.webhookType).toBe('payment_success');\n      expect(result.data).toEqual(mockResponse);\n    });\n  });\n\n  describe('Validation Functions', () => {\n    it('should validate API configuration correctly', () => {\n      const validConfig: GenericApiConfiguration = {\n        url: 'https://api.example.com/test',\n        method: 'POST',\n        timeout: 30000,\n        retryCount: 3,\n      };\n\n      const result = validateApiConfiguration(validConfig);\n      expect(result.isValid).toBe(true);\n      expect(result.errors).toHaveLength(0);\n    });\n\n    it('should reject invalid API configuration', () => {\n      const invalidConfig = {\n        url: 'not-a-url',\n        method: 'INVALID' as any,\n        timeout: 100000, // Too high\n        retryCount: 20, // Too high\n      };\n\n      const result = validateApiConfiguration(invalidConfig);\n      expect(result.isValid).toBe(false);\n      expect(result.errors.length).toBeGreaterThan(0);\n    });\n\n    it('should validate CRM configuration correctly', () => {\n      const validConfig: CrmActionConfiguration = {\n        url: 'https://api.hubapi.com/crm/v3/objects/contacts',\n        method: 'POST',\n        actionType: 'create_contact',\n        provider: 'hubspot',\n      };\n\n      const result = validateCrmConfiguration(validConfig);\n      expect(result.isValid).toBe(true);\n      expect(result.errors).toHaveLength(0);\n    });\n\n    it('should validate payment webhook configuration correctly', () => {\n      const validConfig: PaymentWebhookConfiguration = {\n        url: 'https://api.stripe.com/webhooks',\n        method: 'POST',\n        provider: 'stripe',\n        webhookType: 'payment_success',\n      };\n\n      const result = validatePaymentWebhookConfiguration(validConfig);\n      expect(result.isValid).toBe(true);\n      expect(result.errors).toHaveLength(0);\n    });\n  });\n\n  describe('Variable Replacement', () => {\n    it('should replace variables in templates correctly', async () => {\n      const mockResponse = { success: true };\n      (global.fetch as jest.Mock).mockResolvedValue({\n        ok: true,\n        status: 200,\n        statusText: 'OK',\n        json: () => Promise.resolve(mockResponse),\n      });\n\n      const config: GenericApiConfiguration = {\n        url: 'https://api.example.com/test',\n        method: 'POST',\n        bodyTemplate: '{\"email\": \"{{contact.email}}\", \"name\": \"{{contact.firstName}} {{contact.lastName}}\", \"workflow\": \"{{workflow.name}}\"}',\n      };\n\n      const context = {\n        contact: { \n          id: 'contact-1', \n          email: 'john@example.com', \n          firstName: 'John',\n          lastName: 'Doe'\n        },\n        workflow: { id: 'workflow-1', name: 'Welcome Flow' },\n        variables: {},\n      };\n\n      await executeGenericApiCall(config, context);\n\n      const expectedBody = '{\"email\": \"john@example.com\", \"name\": \"John Doe\", \"workflow\": \"Welcome Flow\"}';\n      \n      expect(fetch).toHaveBeenCalledWith(\n        'https://api.example.com/test',\n        expect.objectContaining({\n          body: expectedBody,\n        })\n      );\n    });\n  });\n});"],"names":["jest","mock","contact","update","fn","emailActivity","create","workflowRateLimiter","check","mockResolvedValue","allowed","remaining","global","fetch","describe","beforeEach","clearAllMocks","it","mockResponse","success","data","id","name","ok","status","statusText","json","Promise","resolve","config","url","method","timeout","context","email","workflow","variables","result","executeGenericApiCall","expect","toBe","toEqual","mockRejectedValueOnce","Error","retryCount","retryDelay","toHaveBeenCalledTimes","rejects","toThrow","properties","actionType","provider","fieldMapping","firstname","authentication","type","credentials","token","firstName","lastName","executeCrmAction","received","webhookType","eventData","amount","currency","executePaymentWebhook","validConfig","validateApiConfiguration","isValid","errors","toHaveLength","invalidConfig","length","toBeGreaterThan","validateCrmConfiguration","validatePaymentWebhookConfiguration","bodyTemplate","expectedBody","toHaveBeenCalledWith","objectContaining","body"],"mappings":"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"}