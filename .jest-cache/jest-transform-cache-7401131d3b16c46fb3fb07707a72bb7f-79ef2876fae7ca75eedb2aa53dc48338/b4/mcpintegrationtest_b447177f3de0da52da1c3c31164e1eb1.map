{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/__tests__/e2e/mcp-integration.test.ts"],"sourcesContent":["import { test, expect } from '@playwright/test';\nimport { TestUtils } from './test-utils';\n\n/**\n * MCP Integration and Fallback E2E Tests\n * Tests MCP server integration, data flow, and graceful fallback behavior\n */\n\ntest.describe('MCP Integration & Fallback', () => {\n  let testUtils: TestUtils;\n\n  test.beforeEach(async ({ page }) => {\n    testUtils = new TestUtils(page);\n    await testUtils.login();\n  });\n\n  test.describe('MCP Data Integration', () => {\n    test('MCP servers provide real data to dashboard', async ({ page }) => {\n      await testUtils.navigateTo('dashboard');\n      \n      // Wait for MCP data to load\n      await testUtils.waitForLoadingComplete();\n      await testUtils.verifyMCPDataLoaded();\n      \n      // Verify MCP data indicators are present\n      await expect(page.locator('[data-testid=\"mcp-data-indicator\"]')).toBeVisible();\n      \n      // Check that data is marked as real (not demo)\n      await expect(page.locator('[data-testid=\"real-data-badge\"]')).toBeVisible();\n      \n      // Verify specific MCP-provided metrics\n      const mcpMetrics = [\n        'real-visitor-count',\n        'actual-conversion-data',\n        'live-campaign-performance',\n        'real-customer-insights'\n      ];\n\n      for (const metric of mcpMetrics) {\n        await expect(page.locator(`[data-testid=\"${metric}\"]`)).toBeVisible();\n        \n        // Verify values are not placeholder\n        const value = await page.textContent(`[data-testid=\"${metric}\"]`);\n        expect(value).not.toContain('Demo');\n        expect(value).not.toContain('Placeholder');\n        expect(value).not.toContain('Sample');\n      }\n      \n      // Verify data freshness timestamp\n      await expect(page.locator('[data-testid=\"mcp-data-timestamp\"]')).toBeVisible();\n      const timestamp = await page.textContent('[data-testid=\"mcp-data-timestamp\"]');\n      expect(timestamp).not.toContain('Never updated');\n    });\n\n    test('MCP customer data integration enhances contact profiles', async ({ page }) => {\n      await testUtils.navigateTo('contacts');\n      \n      // Open contact profile\n      await page.click('[data-testid=\"contact-row\"]:first-child');\n      \n      await testUtils.waitForLoadingComplete();\n      await testUtils.verifyMCPDataLoaded();\n      \n      // Verify MCP-enhanced contact data\n      const mcpEnhancements = [\n        'mcp-enriched-company',\n        'mcp-behavioral-score',\n        'mcp-engagement-history',\n        'mcp-prediction-data'\n      ];\n\n      for (const enhancement of mcpEnhancements) {\n        try {\n          await expect(page.locator(`[data-testid=\"${enhancement}\"]`)).toBeVisible({ timeout: 3000 });\n        } catch {\n          // Some enhancements may not be available for all contacts\n          continue;\n        }\n      }\n      \n      // Verify MCP data source indicators\n      await expect(page.locator('[data-testid=\"mcp-data-source\"]')).toBeVisible();\n      \n      // Check data synchronization status\n      await expect(page.locator('[data-testid=\"mcp-sync-status\"]')).toBeVisible();\n      const syncStatus = await page.textContent('[data-testid=\"mcp-sync-status\"]');\n      expect(syncStatus).toContain('Synchronized');\n    });\n\n    test('MCP analytics data improves campaign insights', async ({ page }) => {\n      await testUtils.navigateTo('campaigns');\n      \n      // Open campaign analytics\n      await page.click('[data-testid=\"campaign-row\"]:first-child');\n      await page.click('[data-testid=\"view-analytics\"]');\n      \n      await testUtils.waitForLoadingComplete();\n      await testUtils.verifyMCPDataLoaded();\n      \n      // Verify MCP-enhanced analytics\n      await expect(page.locator('[data-testid=\"mcp-enhanced-analytics\"]')).toBeVisible();\n      \n      // Check for real-time MCP metrics\n      const mcpAnalytics = [\n        'mcp-delivery-tracking',\n        'mcp-engagement-scoring',\n        'mcp-attribution-data',\n        'mcp-predictive-metrics'\n      ];\n\n      for (const analytic of mcpAnalytics) {\n        try {\n          await expect(page.locator(`[data-testid=\"${analytic}\"]`)).toBeVisible({ timeout: 3000 });\n        } catch {\n          continue;\n        }\n      }\n      \n      // Verify data quality indicators\n      await expect(page.locator('[data-testid=\"data-quality-score\"]')).toBeVisible();\n      \n      // Check MCP vs non-MCP data comparison\n      await page.click('[data-testid=\"data-source-comparison\"]');\n      await expect(page.locator('[data-testid=\"mcp-vs-standard\"]')).toBeVisible();\n    });\n\n    test('MCP AI integration enhances decision making', async ({ page }) => {\n      await testUtils.navigateTo('ai-chat');\n      \n      // Send query that requires MCP data\n      await page.fill('[data-testid=\"ai-chat-input\"]', 'What are my best performing campaigns based on real customer data?');\n      await page.click('[data-testid=\"send-message\"]');\n      \n      // Wait for AI response with MCP data\n      await expect(page.locator('[data-testid=\"ai-response\"]')).toBeVisible({ timeout: 15000 });\n      \n      // Verify response includes real data insights\n      const response = await page.textContent('[data-testid=\"ai-response\"]');\n      expect(response).not.toContain('demo data');\n      expect(response).not.toContain('sample information');\n      \n      // Check for MCP data citations\n      await expect(page.locator('[data-testid=\"mcp-data-citation\"]')).toBeVisible();\n      \n      // Verify AI recommendations are data-driven\n      await page.fill('[data-testid=\"ai-chat-input\"]', 'Suggest optimizations for my email campaigns');\n      await page.click('[data-testid=\"send-message\"]');\n      \n      await expect(page.locator('[data-testid=\"ai-response\"]')).toBeVisible({ timeout: 15000 });\n      \n      // Check for specific recommendations based on real data\n      await expect(page.locator('[data-testid=\"data-driven-recommendation\"]')).toBeVisible();\n    });\n  });\n\n  test.describe('MCP Server Health and Monitoring', () => {\n    test('MCP server health status is visible and accurate', async ({ page }) => {\n      await testUtils.navigateTo('settings');\n      await page.click('[data-testid=\"mcp-settings\"]');\n      \n      // Verify MCP server status dashboard\n      await expect(page.locator('[data-testid=\"mcp-server-status\"]')).toBeVisible();\n      \n      // Check individual server statuses\n      const mcpServers = [\n        'customer-data-server',\n        'campaign-analytics-server',\n        'leadpulse-server',\n        'monitoring-server'\n      ];\n\n      for (const server of mcpServers) {\n        await expect(page.locator(`[data-testid=\"${server}-status\"]`)).toBeVisible();\n        \n        // Verify server shows as connected\n        const serverStatus = page.locator(`[data-testid=\"${server}-status\"] [data-testid=\"connection-indicator\"]`);\n        await expect(serverStatus).toHaveClass(/connected|online|healthy/);\n      }\n      \n      // Check server response times\n      await expect(page.locator('[data-testid=\"server-response-times\"]')).toBeVisible();\n      \n      // Verify acceptable response times (< 1000ms)\n      const responseTime = await page.textContent('[data-testid=\"avg-response-time\"]');\n      const responseTimeMs = parseInt(responseTime?.replace(/[^\\d]/g, '') || '0');\n      expect(responseTimeMs).toBeLessThan(1000);\n      \n      // Test server connectivity\n      await page.click('[data-testid=\"test-mcp-connection\"]');\n      await expect(page.locator('[data-testid=\"connection-test-success\"]')).toBeVisible();\n    });\n\n    test('MCP server failover and redundancy work correctly', async ({ page }) => {\n      await testUtils.navigateTo('settings');\n      await page.click('[data-testid=\"mcp-settings\"]');\n      \n      // Simulate server failure\n      await page.route('**/mcp/customer-data/**', route => route.abort());\n      \n      // Reload page to trigger failover\n      await page.reload();\n      await testUtils.waitForLoadingComplete();\n      \n      // Verify failover notification\n      await expect(page.locator('[data-testid=\"server-failover-notice\"]')).toBeVisible();\n      \n      // Check that backup server is used\n      await expect(page.locator('[data-testid=\"backup-server-active\"]')).toBeVisible();\n      \n      // Verify data still loads (from backup)\n      await testUtils.navigateTo('dashboard');\n      await testUtils.waitForLoadingComplete();\n      \n      // Should still show data, possibly with degraded service notice\n      await expect(page.locator('[data-testid=\"degraded-service-notice\"]')).toBeVisible();\n      \n      // Restore network and verify recovery\n      await page.unroute('**/mcp/customer-data/**');\n      await page.reload();\n      await testUtils.waitForLoadingComplete();\n      \n      // Verify full service restoration\n      await expect(page.locator('[data-testid=\"service-restored-notice\"]')).toBeVisible();\n    });\n\n    test('MCP data synchronization and consistency checks work', async ({ page }) => {\n      await testUtils.navigateTo('settings');\n      await page.click('[data-testid=\"mcp-settings\"]');\n      await page.click('[data-testid=\"data-synchronization\"]');\n      \n      // Check synchronization status\n      await expect(page.locator('[data-testid=\"sync-status\"]')).toBeVisible();\n      \n      // Verify last sync timestamps\n      await expect(page.locator('[data-testid=\"last-sync-timestamp\"]')).toBeVisible();\n      \n      // Test manual sync\n      await page.click('[data-testid=\"manual-sync\"]');\n      await expect(page.locator('[data-testid=\"sync-in-progress\"]')).toBeVisible();\n      \n      // Wait for sync completion\n      await expect(page.locator('[data-testid=\"sync-completed\"]')).toBeVisible({ timeout: 30000 });\n      \n      // Verify data consistency checks\n      await page.click('[data-testid=\"run-consistency-check\"]');\n      await expect(page.locator('[data-testid=\"consistency-check-results\"]')).toBeVisible();\n      \n      // Check for any data discrepancies\n      const consistencyStatus = await page.textContent('[data-testid=\"consistency-status\"]');\n      expect(consistencyStatus).toContain('Consistent');\n    });\n  });\n\n  test.describe('Graceful Fallback Behavior', () => {\n    test('system gracefully handles MCP server unavailability', async ({ page }) => {\n      // Block all MCP server requests\n      await page.route('**/mcp/**', route => route.abort());\n      \n      // Navigate to dashboard\n      await testUtils.navigateTo('dashboard');\n      await testUtils.waitForLoadingComplete();\n      \n      // Verify graceful fallback\n      await testUtils.testMCPFallback();\n      \n      // Check that fallback data or demo mode is clearly indicated\n      const fallbackIndicators = [\n        '[data-testid=\"demo-mode-notice\"]',\n        '[data-testid=\"offline-mode-notice\"]',\n        '[data-testid=\"limited-data-notice\"]'\n      ];\n\n      let fallbackFound = false;\n      for (const indicator of fallbackIndicators) {\n        try {\n          await expect(page.locator(indicator)).toBeVisible({ timeout: 3000 });\n          fallbackFound = true;\n          break;\n        } catch {\n          continue;\n        }\n      }\n      expect(fallbackFound).toBe(true);\n      \n      // Verify system remains functional\n      await expect(page.locator('[data-testid=\"dashboard-header\"]')).toBeVisible();\n      await expect(page.locator('[data-testid=\"navigation\"]')).toBeVisible();\n      \n      // Test navigation still works\n      await testUtils.navigateTo('campaigns');\n      await expect(page.locator('[data-testid=\"campaigns-page\"]')).toBeVisible();\n    });\n\n    test('fallback data is clearly distinguished from real data', async ({ page }) => {\n      // Block MCP servers\n      await page.route('**/mcp/**', route => route.abort());\n      \n      await testUtils.navigateTo('dashboard');\n      await testUtils.waitForLoadingComplete();\n      \n      // Verify fallback data indicators\n      await expect(page.locator('[data-testid=\"demo-data-indicator\"]')).toBeVisible();\n      \n      // Check that metrics show as demo/simulated\n      const demoMetrics = page.locator('[data-testid=\"demo-metric\"]');\n      await expect(demoMetrics).toHaveCount({ min: 1 });\n      \n      // Verify demo data disclaimers\n      await expect(page.locator('[data-testid=\"demo-data-disclaimer\"]')).toBeVisible();\n      \n      // Check that demo data is visually distinct\n      const demoElements = page.locator('[data-testid=\"demo-element\"]');\n      for (let i = 0; i < await demoElements.count(); i++) {\n        await expect(demoElements.nth(i)).toHaveClass(/demo|fallback|simulated/);\n      }\n      \n      // Verify user can still create content\n      await testUtils.navigateTo('campaigns');\n      await page.click('[data-testid=\"create-campaign\"]');\n      await expect(page.locator('[data-testid=\"campaign-form\"]')).toBeVisible();\n      \n      // Should show warning about demo mode\n      await expect(page.locator('[data-testid=\"demo-mode-warning\"]')).toBeVisible();\n    });\n\n    test('partial MCP server failure handled gracefully', async ({ page }) => {\n      // Block only some MCP servers\n      await page.route('**/mcp/campaign-analytics/**', route => route.abort());\n      \n      await testUtils.navigateTo('dashboard');\n      await testUtils.waitForLoadingComplete();\n      \n      // Verify partial functionality notice\n      await expect(page.locator('[data-testid=\"partial-service-notice\"]')).toBeVisible();\n      \n      // Check that some data loads (from working servers)\n      await testUtils.verifyMCPDataLoaded();\n      \n      // But campaign analytics should show fallback\n      await testUtils.navigateTo('campaigns');\n      await page.click('[data-testid=\"campaign-row\"]:first-child');\n      await page.click('[data-testid=\"view-analytics\"]');\n      \n      // Should show limited analytics notice\n      await expect(page.locator('[data-testid=\"limited-analytics-notice\"]')).toBeVisible();\n      \n      // Some metrics should work, others should show as unavailable\n      await expect(page.locator('[data-testid=\"unavailable-metric\"]')).toBeVisible();\n    });\n\n    test('MCP server recovery is detected and handled smoothly', async ({ page }) => {\n      // Start with blocked MCP servers\n      await page.route('**/mcp/**', route => route.abort());\n      \n      await testUtils.navigateTo('dashboard');\n      await testUtils.waitForLoadingComplete();\n      \n      // Verify fallback mode\n      await expect(page.locator('[data-testid=\"demo-mode-notice\"]')).toBeVisible();\n      \n      // Restore MCP servers\n      await page.unroute('**/mcp/**');\n      \n      // Trigger data refresh\n      await page.click('[data-testid=\"refresh-data\"]');\n      await testUtils.waitForLoadingComplete();\n      \n      // Verify recovery notice\n      await expect(page.locator('[data-testid=\"service-restored-notice\"]')).toBeVisible();\n      \n      // Check that real data is now loading\n      await testUtils.verifyMCPDataLoaded();\n      \n      // Verify fallback indicators are removed\n      await expect(page.locator('[data-testid=\"demo-mode-notice\"]')).not.toBeVisible();\n      \n      // Check that real data replaces demo data\n      await expect(page.locator('[data-testid=\"real-data-badge\"]')).toBeVisible();\n    });\n\n    test('error messages are user-friendly and actionable', async ({ page }) => {\n      // Block MCP servers\n      await page.route('**/mcp/**', route => route.abort());\n      \n      await testUtils.navigateTo('dashboard');\n      await testUtils.waitForLoadingComplete();\n      \n      // Check error message quality\n      const errorMessage = page.locator('[data-testid=\"mcp-error-message\"]');\n      await expect(errorMessage).toBeVisible();\n      \n      // Verify message is user-friendly (no technical jargon)\n      const messageText = await errorMessage.textContent();\n      expect(messageText).not.toContain('500');\n      expect(messageText).not.toContain('Internal Server Error');\n      expect(messageText).not.toContain('ECONNREFUSED');\n      expect(messageText).not.toContain('timeout');\n      \n      // Should contain helpful guidance\n      expect(messageText).toMatch(/temporarily unavailable|demo mode|limited functionality/i);\n      \n      // Check for actionable buttons\n      await expect(page.locator('[data-testid=\"retry-connection\"]')).toBeVisible();\n      await expect(page.locator('[data-testid=\"contact-support\"]')).toBeVisible();\n      \n      // Test retry functionality\n      await page.unroute('**/mcp/**');\n      await page.click('[data-testid=\"retry-connection\"]');\n      \n      // Should show loading state\n      await expect(page.locator('[data-testid=\"retry-loading\"]')).toBeVisible();\n      \n      // Should eventually recover\n      await expect(page.locator('[data-testid=\"connection-restored\"]')).toBeVisible({ timeout: 10000 });\n    });\n  });\n\n  test.describe('Data Migration and Backward Compatibility', () => {\n    test('existing features work without MCP enhancement', async ({ page }) => {\n      // Disable MCP integration temporarily\n      await page.route('**/mcp/**', route => route.abort());\n      \n      // Test core campaign creation still works\n      await testUtils.navigateTo('campaigns');\n      await testUtils.createTestCampaign('email', 'Non-MCP Test Campaign');\n      \n      // Verify campaign was created successfully\n      await expect(page.locator('text=Non-MCP Test Campaign')).toBeVisible();\n      \n      // Test contact management\n      await testUtils.navigateTo('contacts');\n      await testUtils.createTestContact('no-mcp@example.com', 'No MCP User');\n      \n      // Verify contact was created\n      await expect(page.locator('text=no-mcp@example.com')).toBeVisible();\n      \n      // Test workflow creation\n      await testUtils.navigateTo('workflows');\n      await testUtils.createTestWorkflow('Non-MCP Workflow');\n      \n      // Verify workflow was created\n      await expect(page.locator('text=Non-MCP Workflow')).toBeVisible();\n      \n      // Verify basic analytics still function\n      await testUtils.navigateTo('analytics');\n      await expect(page.locator('[data-testid=\"analytics-dashboard\"]')).toBeVisible();\n    });\n\n    test('database schema remains compatible', async ({ page }) => {\n      // Test that existing database operations work\n      await testUtils.navigateTo('contacts');\n      \n      // Import existing contact data\n      await page.click('[data-testid=\"import-contacts\"]');\n      \n      // Upload test CSV\n      const fileInput = page.locator('[data-testid=\"csv-file-input\"]');\n      await fileInput.setInputFiles('./src/__tests__/fixtures/legacy-contacts.csv');\n      \n      // Start import\n      await page.click('[data-testid=\"start-import\"]');\n      await testUtils.waitForLoadingComplete();\n      \n      // Verify import succeeds\n      await expect(page.locator('[data-testid=\"import-success\"]')).toBeVisible();\n      \n      // Check that legacy data is properly handled\n      await page.click('[data-testid=\"contact-row\"]:first-child');\n      \n      // Verify contact details load correctly\n      await expect(page.locator('[data-testid=\"contact-email\"]')).toBeVisible();\n      await expect(page.locator('[data-testid=\"contact-name\"]')).toBeVisible();\n    });\n\n    test('API endpoints maintain backward compatibility', async ({ page }) => {\n      // Test legacy API endpoints still work\n      const response = await page.request.get('/api/contacts');\n      expect(response.status()).toBe(200);\n      \n      const data = await response.json();\n      expect(data).toHaveProperty('success');\n      expect(data).toHaveProperty('data');\n      \n      // Test campaign API\n      const campaignResponse = await page.request.get('/api/campaigns');\n      expect(campaignResponse.status()).toBe(200);\n      \n      // Test workflow API\n      const workflowResponse = await page.request.get('/api/workflows');\n      expect(workflowResponse.status()).toBe(200);\n      \n      // Verify response format hasn't changed\n      const workflowData = await workflowResponse.json();\n      expect(workflowData).toHaveProperty('success');\n      expect(workflowData).toHaveProperty('data');\n    });\n  });\n});"],"names":["test","describe","testUtils","beforeEach","page","TestUtils","login","navigateTo","waitForLoadingComplete","verifyMCPDataLoaded","expect","locator","toBeVisible","mcpMetrics","metric","value","textContent","not","toContain","timestamp","click","mcpEnhancements","enhancement","timeout","syncStatus","mcpAnalytics","analytic","fill","response","mcpServers","server","serverStatus","toHaveClass","responseTime","responseTimeMs","parseInt","replace","toBeLessThan","route","abort","reload","unroute","consistencyStatus","testMCPFallback","fallbackIndicators","fallbackFound","indicator","toBe","demoMetrics","toHaveCount","min","demoElements","i","count","nth","errorMessage","messageText","toMatch","createTestCampaign","createTestContact","createTestWorkflow","fileInput","setInputFiles","request","get","status","data","json","toHaveProperty","campaignResponse","workflowResponse","workflowData"],"mappings":"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"}