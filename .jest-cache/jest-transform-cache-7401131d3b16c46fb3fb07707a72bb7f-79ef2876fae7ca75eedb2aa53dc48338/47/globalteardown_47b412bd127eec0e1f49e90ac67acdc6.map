{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/__tests__/integration/mcp/global-teardown.ts"],"sourcesContent":["/**\n * Global Teardown for MCP Integration Tests\n * \n * Runs once after all test suites to clean up the test environment.\n */\n\nimport { PrismaClient } from '@prisma/client';\n\nconst TEST_DATABASE_URL = process.env.TEST_DATABASE_URL || \n  process.env.DATABASE_URL?.replace('/marketsage', '/marketsage_test') ||\n  \"postgresql://marketsage:marketsage_password@marketsage-db:5432/marketsage_test?schema=public\";\n\nexport default async function globalTeardown(): Promise<void> {\n  console.log('\\n🧹 Global Teardown: Cleaning Up MCP Integration Test Environment');\n  console.log('================================================================');\n  \n  try {\n    // Step 1: Clean up test database\n    console.log('🗑️  Step 1: Cleaning up test database...');\n    const testPrisma = new PrismaClient({\n      datasources: {\n        db: {\n          url: TEST_DATABASE_URL\n        }\n      }\n    });\n\n    try {\n      await testPrisma.$connect();\n      \n      // Clean up all test data in reverse dependency order\n      console.log('   Cleaning MCP monitoring metrics...');\n      await testPrisma.mCPMonitoringMetrics.deleteMany();\n      \n      console.log('   Cleaning MCP visitor sessions...');\n      await testPrisma.mCPVisitorSessions.deleteMany();\n      \n      console.log('   Cleaning MCP customer predictions...');\n      await testPrisma.mCPCustomerPredictions.deleteMany();\n      \n      console.log('   Cleaning MCP campaign metrics...');\n      await testPrisma.mCPCampaignMetrics.deleteMany();\n      \n      console.log('   Cleaning test campaigns...');\n      await testPrisma.whatsAppCampaign.deleteMany();\n      await testPrisma.sMSCampaign.deleteMany();\n      await testPrisma.emailCampaign.deleteMany();\n      \n      console.log('   Cleaning test contacts...');\n      await testPrisma.contact.deleteMany();\n      \n      console.log('   Cleaning test users...');\n      await testPrisma.user.deleteMany();\n      \n      console.log('   Cleaning test organizations...');\n      await testPrisma.organization.deleteMany();\n      \n      console.log('✅ Test database cleaned up successfully');\n    } catch (error) {\n      console.warn('⚠️  Could not clean up test database (may already be clean):', error);\n    } finally {\n      await testPrisma.$disconnect();\n    }\n\n    // Step 2: Generate final test summary\n    console.log('📊 Step 2: Generating test summary...');\n    const endTime = new Date();\n    console.log(`   Test suite completed at: ${endTime.toISOString()}`);\n    console.log(`   Environment: ${process.env.NODE_ENV || 'test'}`);\n    console.log(`   Docker mode: ${process.env.IS_DOCKER_ENV || 'false'}`);\n    console.log('✅ Test summary generated');\n\n    // Step 3: Clean up temporary files and connections\n    console.log('🧹 Step 3: Final cleanup...');\n    \n    // Force garbage collection if available\n    if (global.gc) {\n      global.gc();\n      console.log('   Garbage collection triggered');\n    }\n    \n    // Clear any remaining timers\n    if (process.env.NODE_ENV === 'test') {\n      // Clear any intervals that might be running\n      const maxTimerId = setTimeout(() => {}, 0);\n      for (let i = 1; i < maxTimerId; i++) {\n        clearTimeout(i);\n        clearInterval(i);\n      }\n      console.log('   Cleared timers and intervals');\n    }\n    \n    console.log('✅ Final cleanup completed');\n\n    console.log('\\n🎯 Global Teardown Complete - Environment Cleaned');\n    console.log('=================================================');\n\n  } catch (error) {\n    console.error('\\n💥 Global Teardown Failed:', error);\n    console.error('===================================');\n    \n    // Log the error but don't throw - teardown failures shouldn't fail the test suite\n    console.warn('⚠️  Teardown errors are logged but won\\'t fail the test suite');\n    console.warn('💡 Manual cleanup may be required if database connections persist');\n  }\n};"],"names":["globalTeardown","TEST_DATABASE_URL","process","env","DATABASE_URL","replace","console","log","testPrisma","PrismaClient","datasources","db","url","$connect","mCPMonitoringMetrics","deleteMany","mCPVisitorSessions","mCPCustomerPredictions","mCPCampaignMetrics","whatsAppCampaign","sMSCampaign","emailCampaign","contact","user","organization","error","warn","$disconnect","endTime","Date","toISOString","NODE_ENV","IS_DOCKER_ENV","global","gc","maxTimerId","setTimeout","i","clearTimeout","clearInterval"],"mappings":"AAAA;;;;CAIC;;;;+BAQD;;;eAA8BA;;;wBAND;AAE7B,MAAMC,oBAAoBC,QAAQC,GAAG,CAACF,iBAAiB,IACrDC,QAAQC,GAAG,CAACC,YAAY,EAAEC,QAAQ,eAAe,uBACjD;AAEa,eAAeL;IAC5BM,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC;IAEZ,IAAI;QACF,iCAAiC;QACjCD,QAAQC,GAAG,CAAC;QACZ,MAAMC,aAAa,IAAIC,oBAAY,CAAC;YAClCC,aAAa;gBACXC,IAAI;oBACFC,KAAKX;gBACP;YACF;QACF;QAEA,IAAI;YACF,MAAMO,WAAWK,QAAQ;YAEzB,qDAAqD;YACrDP,QAAQC,GAAG,CAAC;YACZ,MAAMC,WAAWM,oBAAoB,CAACC,UAAU;YAEhDT,QAAQC,GAAG,CAAC;YACZ,MAAMC,WAAWQ,kBAAkB,CAACD,UAAU;YAE9CT,QAAQC,GAAG,CAAC;YACZ,MAAMC,WAAWS,sBAAsB,CAACF,UAAU;YAElDT,QAAQC,GAAG,CAAC;YACZ,MAAMC,WAAWU,kBAAkB,CAACH,UAAU;YAE9CT,QAAQC,GAAG,CAAC;YACZ,MAAMC,WAAWW,gBAAgB,CAACJ,UAAU;YAC5C,MAAMP,WAAWY,WAAW,CAACL,UAAU;YACvC,MAAMP,WAAWa,aAAa,CAACN,UAAU;YAEzCT,QAAQC,GAAG,CAAC;YACZ,MAAMC,WAAWc,OAAO,CAACP,UAAU;YAEnCT,QAAQC,GAAG,CAAC;YACZ,MAAMC,WAAWe,IAAI,CAACR,UAAU;YAEhCT,QAAQC,GAAG,CAAC;YACZ,MAAMC,WAAWgB,YAAY,CAACT,UAAU;YAExCT,QAAQC,GAAG,CAAC;QACd,EAAE,OAAOkB,OAAO;YACdnB,QAAQoB,IAAI,CAAC,gEAAgED;QAC/E,SAAU;YACR,MAAMjB,WAAWmB,WAAW;QAC9B;QAEA,sCAAsC;QACtCrB,QAAQC,GAAG,CAAC;QACZ,MAAMqB,UAAU,IAAIC;QACpBvB,QAAQC,GAAG,CAAC,CAAC,4BAA4B,EAAEqB,QAAQE,WAAW,IAAI;QAClExB,QAAQC,GAAG,CAAC,CAAC,gBAAgB,EAAEL,QAAQC,GAAG,CAAC4B,QAAQ,IAAI,QAAQ;QAC/DzB,QAAQC,GAAG,CAAC,CAAC,gBAAgB,EAAEL,QAAQC,GAAG,CAAC6B,aAAa,IAAI,SAAS;QACrE1B,QAAQC,GAAG,CAAC;QAEZ,mDAAmD;QACnDD,QAAQC,GAAG,CAAC;QAEZ,wCAAwC;QACxC,IAAI0B,OAAOC,EAAE,EAAE;YACbD,OAAOC,EAAE;YACT5B,QAAQC,GAAG,CAAC;QACd;QAEA,6BAA6B;QAC7B,IAAIL,QAAQC,GAAG,CAAC4B,QAAQ,KAAK,QAAQ;YACnC,4CAA4C;YAC5C,MAAMI,aAAaC,WAAW,KAAO,GAAG;YACxC,IAAK,IAAIC,IAAI,GAAGA,IAAIF,YAAYE,IAAK;gBACnCC,aAAaD;gBACbE,cAAcF;YAChB;YACA/B,QAAQC,GAAG,CAAC;QACd;QAEAD,QAAQC,GAAG,CAAC;QAEZD,QAAQC,GAAG,CAAC;QACZD,QAAQC,GAAG,CAAC;IAEd,EAAE,OAAOkB,OAAO;QACdnB,QAAQmB,KAAK,CAAC,gCAAgCA;QAC9CnB,QAAQmB,KAAK,CAAC;QAEd,kFAAkF;QAClFnB,QAAQoB,IAAI,CAAC;QACbpB,QAAQoB,IAAI,CAAC;IACf;AACF"}