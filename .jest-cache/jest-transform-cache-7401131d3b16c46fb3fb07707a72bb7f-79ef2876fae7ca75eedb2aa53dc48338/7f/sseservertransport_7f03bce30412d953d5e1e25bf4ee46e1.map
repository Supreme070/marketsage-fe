{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/mcp/transport/sse-server-transport.ts"],"sourcesContent":["/**\n * SSE (Server-Sent Events) Transport for MCP Servers\n * \n * Provides HTTP-based communication for MCP servers using Server-Sent Events\n * for real-time bidirectional communication between clients and servers.\n */\n\nimport { EventEmitter } from 'events';\nimport { IncomingMessage, ServerResponse } from 'http';\nimport { Transport } from '@modelcontextprotocol/sdk/types';\nimport { JSONRPCMessage, JSONRPCRequest, JSONRPCResponse } from '@modelcontextprotocol/sdk/types';\n\nexport interface SSEConnection {\n  id: string;\n  request: IncomingMessage;\n  response: ServerResponse;\n  lastActivity: Date;\n}\n\nexport class SSEServerTransport extends EventEmitter implements Transport {\n  private connections = new Map<string, SSEConnection>();\n  private isStarted = false;\n  private heartbeatInterval?: NodeJS.Timeout;\n\n  constructor(\n    private port: number,\n    private path: string = '/mcp',\n    private heartbeatMs: number = 30000\n  ) {\n    super();\n    this.setupCleanup();\n  }\n\n  async start(): Promise<void> {\n    if (this.isStarted) {\n      console.log(`SSE transport on port ${this.port} is already started`);\n      return;\n    }\n\n    this.isStarted = true;\n    this.startHeartbeat();\n    \n    console.log(`SSE MCP Server started on port ${this.port}${this.path}`);\n  }\n\n  async close(): Promise<void> {\n    if (!this.isStarted) {\n      return;\n    }\n\n    this.isStarted = false;\n    \n    // Stop heartbeat\n    if (this.heartbeatInterval) {\n      clearInterval(this.heartbeatInterval);\n    }\n\n    // Close all connections\n    for (const [id, connection] of this.connections) {\n      try {\n        connection.response.end();\n      } catch (error) {\n        console.error(`Error closing SSE connection ${id}:`, error);\n      }\n    }\n    \n    this.connections.clear();\n    console.log(`SSE MCP Server on port ${this.port} closed`);\n  }\n\n  send(message: JSONRPCMessage): Promise<void> {\n    return new Promise((resolve, reject) => {\n      try {\n        const data = JSON.stringify(message);\n        const sseMessage = `data: ${data}\\n\\n`;\n        \n        // Send to all active connections\n        const activeConnections = Array.from(this.connections.values());\n        if (activeConnections.length === 0) {\n          console.warn('No active SSE connections to send message to');\n          resolve();\n          return;\n        }\n\n        let sentCount = 0;\n        for (const connection of activeConnections) {\n          try {\n            if (!connection.response.destroyed) {\n              connection.response.write(sseMessage);\n              sentCount++;\n            }\n          } catch (error) {\n            console.error(`Error sending SSE message to connection ${connection.id}:`, error);\n            this.removeConnection(connection.id);\n          }\n        }\n\n        console.log(`Sent SSE message to ${sentCount} connections`);\n        resolve();\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /**\n   * Handle incoming SSE connection\n   */\n  handleConnection(request: IncomingMessage, response: ServerResponse): void {\n    if (!this.isStarted) {\n      response.writeHead(503);\n      response.end('Server not started');\n      return;\n    }\n\n    // Set SSE headers\n    response.writeHead(200, {\n      'Content-Type': 'text/event-stream',\n      'Cache-Control': 'no-cache',\n      'Connection': 'keep-alive',\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Headers': 'Cache-Control',\n    });\n\n    const connectionId = this.generateConnectionId();\n    const connection: SSEConnection = {\n      id: connectionId,\n      request,\n      response,\n      lastActivity: new Date(),\n    };\n\n    this.connections.set(connectionId, connection);\n    console.log(`New SSE connection established: ${connectionId}`);\n\n    // Send initial connection message\n    const welcomeMessage = {\n      jsonrpc: '2.0',\n      method: 'connection/established',\n      params: { connectionId, timestamp: new Date().toISOString() }\n    };\n    \n    response.write(`data: ${JSON.stringify(welcomeMessage)}\\n\\n`);\n\n    // Handle connection close\n    response.on('close', () => {\n      this.removeConnection(connectionId);\n    });\n\n    request.on('close', () => {\n      this.removeConnection(connectionId);\n    });\n\n    response.on('error', (error) => {\n      console.error(`SSE connection error for ${connectionId}:`, error);\n      this.removeConnection(connectionId);\n    });\n\n    this.emit('connection', connection);\n  }\n\n  /**\n   * Handle incoming message from client (via POST to message endpoint)\n   */\n  handleMessage(request: IncomingMessage, response: ServerResponse): void {\n    if (!this.isStarted) {\n      response.writeHead(503);\n      response.end('Server not started');\n      return;\n    }\n\n    let body = '';\n    request.on('data', (chunk) => {\n      body += chunk.toString();\n    });\n\n    request.on('end', () => {\n      try {\n        const message = JSON.parse(body) as JSONRPCMessage;\n        \n        // Update connection activity\n        const connectionId = request.headers['x-connection-id'] as string;\n        if (connectionId && this.connections.has(connectionId)) {\n          const connection = this.connections.get(connectionId)!;\n          connection.lastActivity = new Date();\n        }\n\n        this.emit('message', message);\n        \n        response.writeHead(200, { 'Content-Type': 'application/json' });\n        response.end(JSON.stringify({ status: 'received' }));\n      } catch (error) {\n        console.error('Error parsing SSE message:', error);\n        response.writeHead(400, { 'Content-Type': 'application/json' });\n        response.end(JSON.stringify({ error: 'Invalid JSON' }));\n      }\n    });\n\n    request.on('error', (error) => {\n      console.error('Error receiving SSE message:', error);\n      response.writeHead(500);\n      response.end('Internal server error');\n    });\n  }\n\n  /**\n   * Get connection statistics\n   */\n  getStats(): {\n    activeConnections: number;\n    totalConnections: number;\n    uptime: number;\n  } {\n    return {\n      activeConnections: this.connections.size,\n      totalConnections: this.connections.size, // Could track total over time\n      uptime: this.isStarted ? Date.now() : 0,\n    };\n  }\n\n  private generateConnectionId(): string {\n    return `sse_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;\n  }\n\n  private removeConnection(connectionId: string): void {\n    const connection = this.connections.get(connectionId);\n    if (connection) {\n      try {\n        if (!connection.response.destroyed) {\n          connection.response.end();\n        }\n      } catch (error) {\n        console.error(`Error ending connection ${connectionId}:`, error);\n      }\n      \n      this.connections.delete(connectionId);\n      console.log(`SSE connection removed: ${connectionId}`);\n      this.emit('disconnection', connectionId);\n    }\n  }\n\n  private startHeartbeat(): void {\n    this.heartbeatInterval = setInterval(() => {\n      const now = new Date();\n      const staleConnections: string[] = [];\n\n      for (const [id, connection] of this.connections) {\n        const timeSinceActivity = now.getTime() - connection.lastActivity.getTime();\n        \n        if (timeSinceActivity > this.heartbeatMs * 2) {\n          // Connection is stale\n          staleConnections.push(id);\n        } else {\n          // Send heartbeat\n          try {\n            if (!connection.response.destroyed) {\n              const heartbeat = {\n                jsonrpc: '2.0',\n                method: 'heartbeat',\n                params: { timestamp: now.toISOString() }\n              };\n              connection.response.write(`data: ${JSON.stringify(heartbeat)}\\n\\n`);\n            }\n          } catch (error) {\n            console.error(`Error sending heartbeat to ${id}:`, error);\n            staleConnections.push(id);\n          }\n        }\n      }\n\n      // Remove stale connections\n      for (const id of staleConnections) {\n        this.removeConnection(id);\n      }\n    }, this.heartbeatMs);\n  }\n\n  private setupCleanup(): void {\n    const cleanup = () => {\n      if (this.isStarted) {\n        this.close().catch(console.error);\n      }\n    };\n\n    process.on('SIGINT', cleanup);\n    process.on('SIGTERM', cleanup);\n    process.on('exit', cleanup);\n  }\n}"],"names":["SSEServerTransport","EventEmitter","constructor","port","path","heartbeatMs","connections","Map","isStarted","setupCleanup","start","console","log","startHeartbeat","close","heartbeatInterval","clearInterval","id","connection","response","end","error","clear","send","message","Promise","resolve","reject","data","JSON","stringify","sseMessage","activeConnections","Array","from","values","length","warn","sentCount","destroyed","write","removeConnection","handleConnection","request","writeHead","connectionId","generateConnectionId","lastActivity","Date","set","welcomeMessage","jsonrpc","method","params","timestamp","toISOString","on","emit","handleMessage","body","chunk","toString","parse","headers","has","get","status","getStats","size","totalConnections","uptime","now","Math","random","substring","delete","setInterval","staleConnections","timeSinceActivity","getTime","push","heartbeat","cleanup","catch","process"],"mappings":"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"}