29be7add61dfa4a5ea85990acc634f0d
/**
 * SSE (Server-Sent Events) Transport for MCP Servers
 * 
 * Provides HTTP-based communication for MCP servers using Server-Sent Events
 * for real-time bidirectional communication between clients and servers.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "SSEServerTransport", {
    enumerable: true,
    get: function() {
        return SSEServerTransport;
    }
});
const _events = require("events");
class SSEServerTransport extends _events.EventEmitter {
    constructor(port, path = '/mcp', heartbeatMs = 30000){
        super(), this.port = port, this.path = path, this.heartbeatMs = heartbeatMs, this.connections = new Map(), this.isStarted = false;
        this.setupCleanup();
    }
    async start() {
        if (this.isStarted) {
            console.log(`SSE transport on port ${this.port} is already started`);
            return;
        }
        this.isStarted = true;
        this.startHeartbeat();
        console.log(`SSE MCP Server started on port ${this.port}${this.path}`);
    }
    async close() {
        if (!this.isStarted) {
            return;
        }
        this.isStarted = false;
        // Stop heartbeat
        if (this.heartbeatInterval) {
            clearInterval(this.heartbeatInterval);
        }
        // Close all connections
        for (const [id, connection] of this.connections){
            try {
                connection.response.end();
            } catch (error) {
                console.error(`Error closing SSE connection ${id}:`, error);
            }
        }
        this.connections.clear();
        console.log(`SSE MCP Server on port ${this.port} closed`);
    }
    send(message) {
        return new Promise((resolve, reject)=>{
            try {
                const data = JSON.stringify(message);
                const sseMessage = `data: ${data}\n\n`;
                // Send to all active connections
                const activeConnections = Array.from(this.connections.values());
                if (activeConnections.length === 0) {
                    console.warn('No active SSE connections to send message to');
                    resolve();
                    return;
                }
                let sentCount = 0;
                for (const connection of activeConnections){
                    try {
                        if (!connection.response.destroyed) {
                            connection.response.write(sseMessage);
                            sentCount++;
                        }
                    } catch (error) {
                        console.error(`Error sending SSE message to connection ${connection.id}:`, error);
                        this.removeConnection(connection.id);
                    }
                }
                console.log(`Sent SSE message to ${sentCount} connections`);
                resolve();
            } catch (error) {
                reject(error);
            }
        });
    }
    /**
   * Handle incoming SSE connection
   */ handleConnection(request, response) {
        if (!this.isStarted) {
            response.writeHead(503);
            response.end('Server not started');
            return;
        }
        // Set SSE headers
        response.writeHead(200, {
            'Content-Type': 'text/event-stream',
            'Cache-Control': 'no-cache',
            'Connection': 'keep-alive',
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Headers': 'Cache-Control'
        });
        const connectionId = this.generateConnectionId();
        const connection = {
            id: connectionId,
            request,
            response,
            lastActivity: new Date()
        };
        this.connections.set(connectionId, connection);
        console.log(`New SSE connection established: ${connectionId}`);
        // Send initial connection message
        const welcomeMessage = {
            jsonrpc: '2.0',
            method: 'connection/established',
            params: {
                connectionId,
                timestamp: new Date().toISOString()
            }
        };
        response.write(`data: ${JSON.stringify(welcomeMessage)}\n\n`);
        // Handle connection close
        response.on('close', ()=>{
            this.removeConnection(connectionId);
        });
        request.on('close', ()=>{
            this.removeConnection(connectionId);
        });
        response.on('error', (error)=>{
            console.error(`SSE connection error for ${connectionId}:`, error);
            this.removeConnection(connectionId);
        });
        this.emit('connection', connection);
    }
    /**
   * Handle incoming message from client (via POST to message endpoint)
   */ handleMessage(request, response) {
        if (!this.isStarted) {
            response.writeHead(503);
            response.end('Server not started');
            return;
        }
        let body = '';
        request.on('data', (chunk)=>{
            body += chunk.toString();
        });
        request.on('end', ()=>{
            try {
                const message = JSON.parse(body);
                // Update connection activity
                const connectionId = request.headers['x-connection-id'];
                if (connectionId && this.connections.has(connectionId)) {
                    const connection = this.connections.get(connectionId);
                    connection.lastActivity = new Date();
                }
                this.emit('message', message);
                response.writeHead(200, {
                    'Content-Type': 'application/json'
                });
                response.end(JSON.stringify({
                    status: 'received'
                }));
            } catch (error) {
                console.error('Error parsing SSE message:', error);
                response.writeHead(400, {
                    'Content-Type': 'application/json'
                });
                response.end(JSON.stringify({
                    error: 'Invalid JSON'
                }));
            }
        });
        request.on('error', (error)=>{
            console.error('Error receiving SSE message:', error);
            response.writeHead(500);
            response.end('Internal server error');
        });
    }
    /**
   * Get connection statistics
   */ getStats() {
        return {
            activeConnections: this.connections.size,
            totalConnections: this.connections.size,
            uptime: this.isStarted ? Date.now() : 0
        };
    }
    generateConnectionId() {
        return `sse_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;
    }
    removeConnection(connectionId) {
        const connection = this.connections.get(connectionId);
        if (connection) {
            try {
                if (!connection.response.destroyed) {
                    connection.response.end();
                }
            } catch (error) {
                console.error(`Error ending connection ${connectionId}:`, error);
            }
            this.connections.delete(connectionId);
            console.log(`SSE connection removed: ${connectionId}`);
            this.emit('disconnection', connectionId);
        }
    }
    startHeartbeat() {
        this.heartbeatInterval = setInterval(()=>{
            const now = new Date();
            const staleConnections = [];
            for (const [id, connection] of this.connections){
                const timeSinceActivity = now.getTime() - connection.lastActivity.getTime();
                if (timeSinceActivity > this.heartbeatMs * 2) {
                    // Connection is stale
                    staleConnections.push(id);
                } else {
                    // Send heartbeat
                    try {
                        if (!connection.response.destroyed) {
                            const heartbeat = {
                                jsonrpc: '2.0',
                                method: 'heartbeat',
                                params: {
                                    timestamp: now.toISOString()
                                }
                            };
                            connection.response.write(`data: ${JSON.stringify(heartbeat)}\n\n`);
                        }
                    } catch (error) {
                        console.error(`Error sending heartbeat to ${id}:`, error);
                        staleConnections.push(id);
                    }
                }
            }
            // Remove stale connections
            for (const id of staleConnections){
                this.removeConnection(id);
            }
        }, this.heartbeatMs);
    }
    setupCleanup() {
        const cleanup = ()=>{
            if (this.isStarted) {
                this.close().catch(console.error);
            }
        };
        process.on('SIGINT', cleanup);
        process.on('SIGTERM', cleanup);
        process.on('exit', cleanup);
    }
}

//# sourceMappingURL=data:application/json;base64,