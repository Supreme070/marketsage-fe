{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/__tests__/mcp/customer-data-server.test.ts"],"sourcesContent":["/**\n * Customer Data MCP Server Unit Tests\n * \n * Comprehensive tests for the customer data MCP server including:\n * - Data validation and filtering with real database queries\n * - Customer profile retrieval and transformation\n * - Customer search functionality\n * - Segment analysis with statistics\n * - Predictive analytics integration\n * - Permission-based data access\n * - Performance testing for large datasets\n * - Error handling and fallback mechanisms\n * - Audit logging for data access\n */\n\nimport { CustomerDataMCPServer } from '../../mcp/servers/customer-data-server';\nimport { MCPServerConfig } from '../../mcp/config/mcp-config';\nimport { MCPAuthContext, MCPValidationError, CustomerQuery } from '../../mcp/types/mcp-types';\nimport { \n  mockPrismaClient, \n  mockRedisClient, \n  mockAuditLogger,\n  testDataFactory,\n  mockAuthScenarios,\n  mockDatabaseScenarios,\n  resetAllMocks,\n  setupDefaultMocks\n} from './__mocks__/mcp-mocks';\n\n// Mock the external dependencies\njest.mock('../../lib/db/prisma', () => ({\n  prisma: mockPrismaClient\n}));\n\njest.mock('../../lib/cache/redis-client', () => ({\n  redisCache: mockRedisClient,\n  CACHE_KEYS: {\n    API_RATE_LIMIT: (key: string) => `rate_limit:${key}`\n  }\n}));\n\njest.mock('../../lib/audit/enterprise-audit-logger', () => ({\n  enterpriseAuditLogger: mockAuditLogger\n}));\n\ndescribe('Customer Data MCP Server', () => {\n  let server: CustomerDataMCPServer;\n  let config: MCPServerConfig;\n\n  beforeEach(() => {\n    resetAllMocks();\n    setupDefaultMocks();\n\n    config = {\n      name: 'customer-data-server',\n      version: '1.0.0',\n      port: 3003,\n      enabled: true,\n      authentication: { required: true, methods: ['jwt'] },\n      rateLimit: { enabled: true, maxRequests: 20, windowMs: 60000 },\n      fallback: { enabled: true, timeout: 5000 },\n      validation: { strict: true, sanitizeOutput: true }\n    };\n\n    server = new CustomerDataMCPServer(config);\n  });\n\n  afterEach(() => {\n    resetAllMocks();\n  });\n\n  describe('Resource Listing', () => {\n    it('should list available customer resources for regular users', async () => {\n      // Arrange\n      const userContext = testUtils.createMockAuthContext({\n        role: 'USER',\n        permissions: ['read:own:contacts']\n      });\n\n      // Act\n      const resources = await server['listResources'](userContext);\n\n      // Assert\n      expect(resources).toHaveLength(1);\n      expect(resources[0].uri).toBe('customer://profiles');\n      expect(resources[0].name).toBe('Customer Profiles');\n      expect(resources[0].mimeType).toBe('application/json');\n    });\n\n    it('should list all customer resources for admin users', async () => {\n      // Arrange\n      const adminContext = testUtils.createMockAuthContext({\n        role: 'ADMIN',\n        permissions: ['*']\n      });\n\n      // Act\n      const resources = await server['listResources'](adminContext);\n\n      // Assert\n      expect(resources).toHaveLength(3);\n      expect(resources.map(r => r.uri)).toEqual([\n        'customer://profiles',\n        'customer://segments',\n        'customer://predictions'\n      ]);\n    });\n\n    it('should list all resources for users with org read permissions', async () => {\n      // Arrange\n      const orgUserContext = testUtils.createMockAuthContext({\n        role: 'IT_ADMIN',\n        permissions: ['read:org']\n      });\n\n      // Act\n      const resources = await server['listResources'](orgUserContext);\n\n      // Assert\n      expect(resources).toHaveLength(3);\n    });\n  });\n\n  describe('Tool Listing', () => {\n    it('should list available tools for regular users', async () => {\n      // Arrange\n      const userContext = testUtils.createMockAuthContext({\n        role: 'USER',\n        permissions: ['read:own:contacts']\n      });\n\n      // Act\n      const tools = await server['listTools'](userContext);\n\n      // Assert\n      expect(tools).toHaveLength(2);\n      expect(tools.map(t => t.name)).toEqual(['search_customers', 'get_customer_profile']);\n      \n      // Verify tool schemas\n      const searchTool = tools.find(t => t.name === 'search_customers');\n      expect(searchTool?.inputSchema.properties.query).toBeDefined();\n      expect(searchTool?.inputSchema.required).toContain('query');\n    });\n\n    it('should list all tools for admin users', async () => {\n      // Arrange\n      const adminContext = testUtils.createMockAuthContext({\n        role: 'ADMIN',\n        permissions: ['*']\n      });\n\n      // Act\n      const tools = await server['listTools'](adminContext);\n\n      // Assert\n      expect(tools).toHaveLength(3);\n      expect(tools.map(t => t.name)).toEqual([\n        'search_customers',\n        'get_customer_profile',\n        'get_customer_segments'\n      ]);\n    });\n  });\n\n  describe('Customer Profile Retrieval', () => {\n    it('should retrieve customer profiles with real database data', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const mockCustomers = [\n        testDataFactory.createContact({\n          id: 'customer-1',\n          email: 'john@example.com',\n          firstName: 'John',\n          lastName: 'Doe',\n          organizationId: authContext.organizationId\n        }),\n        testDataFactory.createContact({\n          id: 'customer-2',\n          email: 'jane@example.com',\n          firstName: 'Jane',\n          lastName: 'Smith',\n          organizationId: authContext.organizationId\n        })\n      ];\n\n      mockPrismaClient.contact.findMany.mockResolvedValue(mockCustomers);\n\n      const uri = 'customer://profiles?limit=10&offset=0';\n      \n      // Act\n      const result = await server['readResource'](uri, authContext);\n\n      // Assert\n      expect(result.uri).toBe('customer://profiles');\n      expect(result.mimeType).toBe('application/json');\n      \n      const data = JSON.parse(result.text);\n      expect(data.profiles).toHaveLength(2);\n      expect(data.profiles[0].id).toBe('customer-1');\n      expect(data.profiles[0].email).toBe('john@example.com');\n      expect(data.meta.total).toBe(2);\n      expect(data.meta.limit).toBe(10);\n      expect(data.meta.offset).toBe(0);\n\n      // Verify database query\n      expect(mockPrismaClient.contact.findMany).toHaveBeenCalledWith({\n        where: {\n          organizationId: authContext.organizationId\n        },\n        take: 10,\n        skip: 0,\n        include: {\n          segments: false,\n          predictions: false\n        }\n      });\n    });\n\n    it('should include segments and predictions when requested', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const mockCustomer = testDataFactory.createContact({\n        organizationId: authContext.organizationId,\n        segments: [{ name: 'VIP' }, { name: 'High Value' }],\n        predictions: {\n          churnRisk: 25,\n          lifetimeValue: 1500,\n          engagementScore: 85\n        }\n      });\n\n      mockPrismaClient.contact.findMany.mockResolvedValue([mockCustomer]);\n\n      const uri = 'customer://profiles?includeSegments=true&includePredictions=true';\n      \n      // Act\n      const result = await server['readResource'](uri, authContext);\n\n      // Assert\n      const data = JSON.parse(result.text);\n      expect(data.profiles[0].segments).toEqual(['VIP', 'High Value']);\n      expect(data.profiles[0].predictions).toEqual({\n        churnRisk: 25,\n        lifetimeValue: 1500,\n        engagementScore: 85\n      });\n\n      // Verify database query includes related data\n      expect(mockPrismaClient.contact.findMany).toHaveBeenCalledWith({\n        where: {\n          organizationId: authContext.organizationId\n        },\n        take: 10,\n        skip: 0,\n        include: {\n          segments: true,\n          predictions: true\n        }\n      });\n    });\n\n    it('should filter customers by email and phone', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const mockCustomers = [testDataFactory.createContact()];\n      mockPrismaClient.contact.findMany.mockResolvedValue(mockCustomers);\n\n      const uri = 'customer://profiles?email=john@example.com&phone=555-1234';\n      \n      // Act\n      const result = await server['readResource'](uri, authContext);\n\n      // Assert\n      expect(mockPrismaClient.contact.findMany).toHaveBeenCalledWith({\n        where: {\n          organizationId: authContext.organizationId,\n          email: { contains: 'john@example.com' },\n          phone: { contains: '555-1234' }\n        },\n        take: 10,\n        skip: 0,\n        include: {\n          segments: false,\n          predictions: false\n        }\n      });\n    });\n\n    it('should use fallback when primary query fails', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const fallbackCustomers = [testDataFactory.createContact()];\n      \n      // First call fails, second call (fallback) succeeds\n      mockPrismaClient.contact.findMany\n        .mockRejectedValueOnce(new Error('Database connection failed'))\n        .mockResolvedValueOnce(fallbackCustomers);\n\n      const uri = 'customer://profiles';\n      \n      // Act\n      const result = await server['readResource'](uri, authContext);\n\n      // Assert\n      expect(result.success).toBe(true);\n      expect(result.data.profiles).toHaveLength(1);\n      expect(result.meta.fallbackUsed).toBe(true);\n    });\n  });\n\n  describe('Customer Search Tool', () => {\n    it('should search customers by multiple criteria', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const mockCustomers = [\n        testDataFactory.createContact({\n          email: 'john.doe@example.com',\n          firstName: 'John',\n          lastName: 'Doe'\n        })\n      ];\n\n      mockPrismaClient.contact.findMany.mockResolvedValue(mockCustomers);\n\n      const args = {\n        query: 'john',\n        limit: 5,\n        includeSegments: false,\n        includePredictions: false\n      };\n\n      // Act\n      const result = await server['callTool']('search_customers', args, authContext);\n\n      // Assert\n      expect(result.content[0].type).toBe('text');\n      const data = JSON.parse(result.content[0].text);\n      expect(data.results).toHaveLength(1);\n      expect(data.results[0].email).toBe('john.doe@example.com');\n      expect(data.meta.query).toBe('john');\n      expect(data.meta.total).toBe(1);\n\n      // Verify database query uses OR conditions for search\n      expect(mockPrismaClient.contact.findMany).toHaveBeenCalledWith({\n        where: {\n          organizationId: authContext.organizationId,\n          OR: [\n            { email: { contains: 'john', mode: 'insensitive' } },\n            { phone: { contains: 'john' } },\n            { firstName: { contains: 'john', mode: 'insensitive' } },\n            { lastName: { contains: 'john', mode: 'insensitive' } }\n          ]\n        },\n        take: 5,\n        include: {\n          segments: false,\n          predictions: false\n        }\n      });\n\n      // Verify audit logging\n      expect(mockAuditLogger.logEvent).toHaveBeenCalledWith(\n        expect.objectContaining({\n          eventType: 'API_ACCESS',\n          action: 'CREATE',\n          outcome: 'success'\n        })\n      );\n    });\n\n    it('should include segments and predictions when requested', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const mockCustomer = testDataFactory.createContact({\n        segments: [{ name: 'Premium' }],\n        predictions: { churnRisk: 15, lifetimeValue: 2000, engagementScore: 90 }\n      });\n\n      mockPrismaClient.contact.findMany.mockResolvedValue([mockCustomer]);\n\n      const args = {\n        query: 'premium',\n        limit: 10,\n        includeSegments: true,\n        includePredictions: true\n      };\n\n      // Act\n      const result = await server['callTool']('search_customers', args, authContext);\n\n      // Assert\n      const data = JSON.parse(result.content[0].text);\n      expect(data.results[0].segments).toEqual(['Premium']);\n      expect(data.results[0].predictions).toEqual({\n        churnRisk: 15,\n        lifetimeValue: 2000,\n        engagementScore: 90\n      });\n\n      // Verify risk level increased due to sensitive data\n      expect(mockAuditLogger.logEvent).toHaveBeenCalledWith(\n        expect.objectContaining({\n          details: expect.objectContaining({\n            riskLevel: 'medium'\n          })\n        })\n      );\n    });\n\n    it('should handle search errors gracefully', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      mockPrismaClient.contact.findMany.mockRejectedValue(new Error('Search index unavailable'));\n\n      const args = { query: 'test', limit: 10 };\n\n      // Act\n      const result = await server['callTool']('search_customers', args, authContext);\n\n      // Assert\n      expect(result.isError).toBe(true);\n      const data = JSON.parse(result.content[0].text);\n      expect(data.error).toBe('Failed to search customers');\n      expect(data.details).toBe('Search index unavailable');\n\n      // Verify error audit logging\n      expect(mockAuditLogger.logEvent).toHaveBeenCalledWith(\n        expect.objectContaining({\n          outcome: 'failure',\n          details: expect.objectContaining({\n            errorMessage: 'Search index unavailable',\n            riskLevel: 'medium'\n          })\n        })\n      );\n    });\n\n    it('should limit search results to organization scope', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext({ organizationId: 'org-123' });\n      mockPrismaClient.contact.findMany.mockResolvedValue([]);\n\n      const args = { query: 'test' };\n\n      // Act\n      await server['callTool']('search_customers', args, authContext);\n\n      // Assert\n      expect(mockPrismaClient.contact.findMany).toHaveBeenCalledWith(\n        expect.objectContaining({\n          where: expect.objectContaining({\n            organizationId: 'org-123'\n          })\n        })\n      );\n    });\n  });\n\n  describe('Customer Profile Tool', () => {\n    it('should retrieve specific customer profile', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const mockCustomer = testDataFactory.createContact({\n        id: 'customer-123',\n        email: 'customer@example.com',\n        organizationId: authContext.organizationId\n      });\n\n      mockPrismaClient.contact.findFirst.mockResolvedValue(mockCustomer);\n\n      const args = { customerId: 'customer-123' };\n\n      // Act\n      const result = await server['callTool']('get_customer_profile', args, authContext);\n\n      // Assert\n      expect(result.content[0].type).toBe('text');\n      const profile = JSON.parse(result.content[0].text);\n      expect(profile.id).toBe('customer-123');\n      expect(profile.email).toBe('customer@example.com');\n      expect(profile.createdAt).toBeDefined();\n      expect(profile.updatedAt).toBeDefined();\n\n      // Verify database query includes organization filter\n      expect(mockPrismaClient.contact.findFirst).toHaveBeenCalledWith({\n        where: {\n          id: 'customer-123',\n          organizationId: authContext.organizationId\n        },\n        include: {\n          segments: true,\n          predictions: true\n        }\n      });\n    });\n\n    it('should return error for non-existent customer', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      mockPrismaClient.contact.findFirst.mockResolvedValue(null);\n\n      const args = { customerId: 'non-existent' };\n\n      // Act\n      const result = await server['callTool']('get_customer_profile', args, authContext);\n\n      // Assert\n      expect(result.isError).toBe(true);\n      const data = JSON.parse(result.content[0].text);\n      expect(data.error).toBe('Customer not found');\n      expect(data.customerId).toBe('non-existent');\n    });\n\n    it('should handle database errors in profile retrieval', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      mockPrismaClient.contact.findFirst.mockRejectedValue(new Error('Database timeout'));\n\n      const args = { customerId: 'customer-123' };\n\n      // Act\n      const result = await server['callTool']('get_customer_profile', args, authContext);\n\n      // Assert\n      expect(result.isError).toBe(true);\n      const data = JSON.parse(result.content[0].text);\n      expect(data.error).toBe('Failed to retrieve customer profile');\n      expect(data.details).toBe('Database timeout');\n    });\n  });\n\n  describe('Customer Segments', () => {\n    it('should retrieve customer segments with statistics', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const mockSegments = [\n        {\n          id: 'segment-1',\n          name: 'VIP Customers',\n          description: 'High value customers',\n          rules: '{\"engagementScore\": {\"$gt\": 80}}',\n          createdAt: new Date(),\n          updatedAt: new Date(),\n          members: [\n            {\n              contact: testDataFactory.createContact({\n                lastEngaged: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000) // 5 days ago\n              })\n            },\n            {\n              contact: testDataFactory.createContact({\n                lastEngaged: new Date(Date.now() - 45 * 24 * 60 * 60 * 1000) // 45 days ago\n              })\n            }\n          ],\n          _count: {\n            members: 2,\n            emailCampaigns: 3,\n            smsCampaigns: 1,\n            waCampaigns: 2\n          }\n        }\n      ];\n\n      mockPrismaClient.segment.findMany.mockResolvedValue(mockSegments);\n\n      const uri = 'customer://segments';\n\n      // Act\n      const result = await server['readResource'](uri, authContext);\n\n      // Assert\n      expect(result.uri).toBe('customer://segments');\n      const data = JSON.parse(result.text);\n      expect(data.segments).toHaveLength(1);\n      \n      const segment = data.segments[0];\n      expect(segment.name).toBe('VIP Customers');\n      expect(segment.statistics.totalMembers).toBe(2);\n      expect(segment.statistics.recentlyEngaged).toBe(1); // Only one engaged in last 30 days\n      expect(segment.statistics.engagementRate).toBe(50); // 1/2 * 100\n      expect(segment.statistics.campaignUsage.emailCampaigns).toBe(3);\n\n      // Verify comprehensive database query\n      expect(mockPrismaClient.segment.findMany).toHaveBeenCalledWith({\n        where: {\n          createdBy: {\n            organizationId: authContext.organizationId\n          }\n        },\n        include: {\n          members: {\n            include: {\n              contact: {\n                select: {\n                  id: true,\n                  email: true,\n                  firstName: true,\n                  lastName: true,\n                  lastEngaged: true,\n                  createdAt: true\n                }\n              }\n            }\n          },\n          _count: {\n            select: {\n              members: true,\n              emailCampaigns: true,\n              smsCampaigns: true,\n              waCampaigns: true\n            }\n          }\n        }\n      });\n\n      // Verify audit logging\n      expect(mockAuditLogger.logEvent).toHaveBeenCalledWith(\n        expect.objectContaining({\n          eventType: 'DATA_ACCESS',\n          action: 'read',\n          outcome: 'success'\n        })\n      );\n    });\n\n    it('should handle segment retrieval errors with fallback', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      mockPrismaClient.segment.findMany.mockRejectedValue(new Error('Segment service unavailable'));\n\n      const uri = 'customer://segments';\n\n      // Act\n      const result = await server['readResource'](uri, authContext);\n\n      // Assert\n      expect(result.uri).toBe('customer://segments');\n      const data = JSON.parse(result.text);\n      expect(data.error).toBe('Failed to retrieve customer segments');\n      expect(data.details).toBe('Segment service unavailable');\n\n      // Verify error logging\n      expect(mockAuditLogger.logEvent).toHaveBeenCalledWith(\n        expect.objectContaining({\n          outcome: 'failure',\n          details: expect.objectContaining({\n            errorMessage: 'Segment service unavailable'\n          })\n        })\n      );\n    });\n  });\n\n  describe('Customer Predictions', () => {\n    it('should retrieve customer predictions with comprehensive analytics', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const mockPredictions = [\n        {\n          id: 'pred-1',\n          contactId: 'customer-1',\n          churnRisk: 25,\n          lifetimeValue: 1500,\n          engagementScore: 85,\n          segment: 'VIP',\n          confidenceScore: 0.92,\n          lastActivityDate: new Date(),\n          nextBestAction: 'Send personalized offer',\n          preferredChannel: 'EMAIL',\n          behavioralScores: { frequency: 8, recency: 9, monetary: 7 },\n          insights: ['High engagement customer', 'Prefers email communication'],\n          calculatedAt: new Date(),\n          contact: testDataFactory.createContact({ id: 'customer-1' }),\n          organization: { id: authContext.organizationId, name: 'Test Org' }\n        },\n        {\n          id: 'pred-2',\n          contactId: 'customer-2',\n          churnRisk: 75,\n          lifetimeValue: 500,\n          engagementScore: 35,\n          segment: 'At Risk',\n          confidenceScore: 0.88,\n          lastActivityDate: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000),\n          nextBestAction: 'Re-engagement campaign',\n          preferredChannel: 'SMS',\n          behavioralScores: { frequency: 3, recency: 2, monetary: 4 },\n          insights: ['Declining engagement', 'May require intervention'],\n          calculatedAt: new Date(),\n          contact: testDataFactory.createContact({ id: 'customer-2' }),\n          organization: { id: authContext.organizationId, name: 'Test Org' }\n        }\n      ];\n\n      mockPrismaClient.mCPCustomerPredictions.findMany.mockResolvedValue(mockPredictions);\n\n      const uri = 'customer://predictions?limit=20&offset=0';\n\n      // Act\n      const result = await server['readResource'](uri, authContext);\n\n      // Assert\n      expect(result.uri).toBe('customer://predictions');\n      const data = JSON.parse(result.text);\n      expect(data.predictions).toHaveLength(2);\n      \n      // Verify prediction data structure\n      const firstPrediction = data.predictions[0];\n      expect(firstPrediction.contactId).toBe('customer-1');\n      expect(firstPrediction.predictions.churnRisk).toBe(25);\n      expect(firstPrediction.predictions.lifetimeValue).toBe(1500);\n      expect(firstPrediction.predictions.segment).toBe('VIP');\n      expect(firstPrediction.insights.nextBestAction).toBe('Send personalized offer');\n      expect(firstPrediction.insights.preferredChannel).toBe('EMAIL');\n\n      // Verify summary statistics\n      expect(data.summary.totalPredictions).toBe(2);\n      expect(data.summary.averages.churnRisk).toBe(50); // (25 + 75) / 2\n      expect(data.summary.averages.lifetimeValue).toBe(1000); // (1500 + 500) / 2\n      expect(data.summary.riskDistribution.highRisk.count).toBe(1);\n      expect(data.summary.riskDistribution.lowRisk.count).toBe(1);\n      expect(data.summary.segmentDistribution['VIP']).toBe(1);\n      expect(data.summary.segmentDistribution['At Risk']).toBe(1);\n      expect(data.summary.channelPreferences['EMAIL']).toBe(1);\n      expect(data.summary.channelPreferences['SMS']).toBe(1);\n\n      // Verify metadata\n      expect(data.meta.source).toBe('MCP_CUSTOMER_PREDICTIONS');\n      expect(data.meta.duration).toBeDefined();\n\n      // Verify database query\n      expect(mockPrismaClient.mCPCustomerPredictions.findMany).toHaveBeenCalledWith({\n        where: {\n          organizationId: authContext.organizationId\n        },\n        take: 20,\n        skip: 0,\n        include: {\n          contact: {\n            select: {\n              id: true,\n              email: true,\n              firstName: true,\n              lastName: true,\n              phone: true,\n              company: true,\n              lastEngaged: true,\n              createdAt: true\n            }\n          },\n          organization: {\n            select: {\n              id: true,\n              name: true\n            }\n          }\n        },\n        orderBy: {\n          calculatedAt: 'desc'\n        }\n      });\n\n      // Verify audit logging with appropriate risk level\n      expect(mockAuditLogger.logEvent).toHaveBeenCalledWith(\n        expect.objectContaining({\n          eventType: 'DATA_ACCESS',\n          action: 'read',\n          outcome: 'success',\n          details: expect.objectContaining({\n            riskLevel: 'low' // < 50 predictions\n          })\n        })\n      );\n    });\n\n    it('should filter predictions by customer ID when specified', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      mockPrismaClient.mCPCustomerPredictions.findMany.mockResolvedValue([]);\n\n      const uri = 'customer://predictions?id=customer-123';\n\n      // Act\n      await server['readResource'](uri, authContext);\n\n      // Assert\n      expect(mockPrismaClient.mCPCustomerPredictions.findMany).toHaveBeenCalledWith(\n        expect.objectContaining({\n          where: {\n            organizationId: authContext.organizationId,\n            contactId: 'customer-123'\n          }\n        })\n      );\n    });\n\n    it('should handle large datasets with higher risk level', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const largePredictionSet = Array.from({ length: 100 }, (_, i) => ({\n        id: `pred-${i}`,\n        contactId: `customer-${i}`,\n        churnRisk: Math.random() * 100,\n        lifetimeValue: Math.random() * 5000,\n        engagementScore: Math.random() * 100,\n        segment: 'Regular',\n        confidenceScore: 0.85,\n        lastActivityDate: new Date(),\n        nextBestAction: 'Monitor',\n        preferredChannel: 'EMAIL',\n        behavioralScores: {},\n        insights: [],\n        calculatedAt: new Date(),\n        contact: testDataFactory.createContact({ id: `customer-${i}` }),\n        organization: { id: authContext.organizationId, name: 'Test Org' }\n      }));\n\n      mockPrismaClient.mCPCustomerPredictions.findMany.mockResolvedValue(largePredictionSet);\n\n      const uri = 'customer://predictions?limit=100';\n\n      // Act\n      await server['readResource'](uri, authContext);\n\n      // Assert - Risk level should be medium for large datasets\n      expect(mockAuditLogger.logEvent).toHaveBeenCalledWith(\n        expect.objectContaining({\n          details: expect.objectContaining({\n            riskLevel: 'medium' // >= 50 predictions\n          })\n        })\n      );\n    });\n\n    it('should handle prediction retrieval errors with fallback response', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      mockPrismaClient.mCPCustomerPredictions.findMany.mockRejectedValue(new Error('ML service unavailable'));\n\n      const uri = 'customer://predictions';\n\n      // Act\n      const result = await server['readResource'](uri, authContext);\n\n      // Assert\n      expect(result.uri).toBe('customer://predictions');\n      const data = JSON.parse(result.text);\n      expect(data.error).toBe('Failed to retrieve customer predictions');\n      expect(data.details).toBe('ML service unavailable');\n      expect(data.fallback.message).toBe('Predictions temporarily unavailable');\n\n      // Verify high risk error logging\n      expect(mockAuditLogger.logEvent).toHaveBeenCalledWith(\n        expect.objectContaining({\n          outcome: 'failure',\n          details: expect.objectContaining({\n            riskLevel: 'high' // Data access failures are high risk\n          })\n        })\n      );\n    });\n  });\n\n  describe('Resource URI Validation', () => {\n    it('should throw error for unknown resource paths', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const invalidUri = 'customer://unknown-resource';\n\n      // Act & Assert\n      await expect(\n        server['readResource'](invalidUri, authContext)\n      ).rejects.toThrow(MCPValidationError);\n    });\n\n    it('should parse query parameters correctly', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      mockPrismaClient.contact.findMany.mockResolvedValue([]);\n\n      const uri = 'customer://profiles?limit=25&offset=50&email=test@example.com&includeSegments=true';\n\n      // Act\n      await server['readResource'](uri, authContext);\n\n      // Assert\n      expect(mockPrismaClient.contact.findMany).toHaveBeenCalledWith(\n        expect.objectContaining({\n          where: expect.objectContaining({\n            email: { contains: 'test@example.com' }\n          }),\n          take: 25,\n          skip: 50,\n          include: expect.objectContaining({\n            segments: true\n          })\n        })\n      );\n    });\n  });\n\n  describe('Tool Validation', () => {\n    it('should throw error for unknown tools', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n\n      // Act & Assert\n      await expect(\n        server['callTool']('unknown_tool', {}, authContext)\n      ).rejects.toThrow(MCPValidationError);\n    });\n  });\n\n  describe('Performance Testing', () => {\n    it('should handle customer search performance efficiently', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const largeCustomerSet = Array.from({ length: 50 }, (_, i) => \n        testDataFactory.createContact({ id: `customer-${i}`, email: `user${i}@example.com` })\n      );\n\n      mockPrismaClient.contact.findMany.mockImplementation(() => \n        mockDatabaseScenarios.fastQuery(largeCustomerSet)\n      );\n\n      const args = { query: 'test', limit: 50 };\n\n      // Act\n      const startTime = performance.now();\n      const result = await server['callTool']('search_customers', args, authContext);\n      const endTime = performance.now();\n      const duration = endTime - startTime;\n\n      // Assert\n      expect(duration).toBeLessThan(200); // Should complete quickly\n      const data = JSON.parse(result.content[0].text);\n      expect(data.results).toHaveLength(50);\n      expect(data.meta.duration).toBeDefined();\n    });\n\n    it('should handle slow database queries with timeout', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      mockPrismaClient.contact.findMany.mockImplementation(() => \n        mockDatabaseScenarios.slowQuery([])\n      );\n\n      const args = { query: 'test' };\n\n      // Act\n      const startTime = performance.now();\n      const result = await server['callTool']('search_customers', args, authContext);\n      const endTime = performance.now();\n\n      // Assert - Should handle slow queries gracefully\n      expect(endTime - startTime).toBeGreaterThan(900); // Actually waited for slow query\n      expect(result.content).toBeDefined();\n    });\n\n    it('should track duration in tool execution', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      mockPrismaClient.contact.findMany.mockResolvedValue([]);\n\n      const args = { query: 'test' };\n\n      // Act\n      const result = await server['callTool']('search_customers', args, authContext);\n\n      // Assert\n      const data = JSON.parse(result.content[0].text);\n      expect(data.meta.duration).toBeGreaterThan(0);\n      expect(typeof data.meta.duration).toBe('number');\n\n      // Verify duration is logged in audit\n      expect(mockAuditLogger.logEvent).toHaveBeenCalledWith(\n        expect.objectContaining({\n          details: expect.objectContaining({\n            duration: expect.any(Number)\n          })\n        })\n      );\n    });\n  });\n\n  describe('Data Security and Privacy', () => {\n    it('should enforce organization isolation', async () => {\n      // Arrange\n      const userContext = testUtils.createMockAuthContext({ organizationId: 'org-123' });\n      const otherOrgContext = testUtils.createMockAuthContext({ organizationId: 'org-456' });\n\n      // Mock customer from different organization\n      const otherOrgCustomer = testDataFactory.createContact({ \n        organizationId: 'org-456',\n        email: 'other@example.com'\n      });\n\n      mockPrismaClient.contact.findFirst.mockResolvedValue(null); // Should not find customer\n\n      const args = { customerId: 'customer-from-other-org' };\n\n      // Act\n      const result = await server['callTool']('get_customer_profile', args, userContext);\n\n      // Assert\n      expect(result.isError).toBe(true);\n      const data = JSON.parse(result.content[0].text);\n      expect(data.error).toBe('Customer not found');\n\n      // Verify database query includes organization filter\n      expect(mockPrismaClient.contact.findFirst).toHaveBeenCalledWith({\n        where: {\n          id: 'customer-from-other-org',\n          organizationId: 'org-123' // User's org, not customer's org\n        },\n        include: {\n          segments: true,\n          predictions: true\n        }\n      });\n    });\n\n    it('should sanitize sensitive data in search results', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext({ role: 'USER' });\n      const customerWithSensitiveData = {\n        ...testDataFactory.createContact(),\n        password: 'secret123',\n        apiKey: 'sensitive-api-key',\n        internalNotes: 'Internal staff notes'\n      };\n\n      mockPrismaClient.contact.findMany.mockResolvedValue([customerWithSensitiveData]);\n\n      const args = { query: 'test' };\n\n      // Act\n      const result = await server['callTool']('search_customers', args, authContext);\n\n      // Assert\n      const data = JSON.parse(result.content[0].text);\n      const customer = data.results[0];\n      \n      // Sensitive fields should not be present\n      expect(customer.password).toBeUndefined();\n      expect(customer.apiKey).toBeUndefined();\n      expect(customer.internalNotes).toBeUndefined();\n      \n      // Public fields should be present\n      expect(customer.id).toBeDefined();\n      expect(customer.email).toBeDefined();\n      expect(customer.firstName).toBeDefined();\n    });\n\n    it('should validate customer query parameters', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      \n      // Invalid limit (too large)\n      const invalidUri = 'customer://profiles?limit=1000&offset=-1';\n\n      // Act & Assert\n      await expect(\n        server['readResource'](invalidUri, authContext)\n      ).rejects.toThrow(); // Should fail validation\n    });\n\n    it('should restrict access to predictions based on permissions', async () => {\n      // This would be tested if predictions required special permissions\n      // Currently all authenticated users can access predictions in their org\n      const authContext = testUtils.createMockAuthContext({\n        permissions: ['read:own:contacts'] // No prediction permissions\n      });\n\n      // For now, predictions are accessible to all org members\n      // but this test structure shows how to add restrictions\n      expect(authContext.permissions).not.toContain('read:predictions');\n    });\n  });\n\n  describe('Integration Testing', () => {\n    it('should handle complete customer data retrieval workflow', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      \n      // Setup mock data for segments\n      const mockSegment = {\n        id: 'segment-1',\n        name: 'High Value',\n        description: 'High value customers',\n        rules: '{}',\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        members: [\n          { contact: testDataFactory.createContact({ id: 'customer-1' }) }\n        ],\n        _count: { members: 1, emailCampaigns: 2, smsCampaigns: 0, waCampaigns: 1 }\n      };\n\n      // Setup mock data for predictions\n      const mockPrediction = {\n        id: 'pred-1',\n        contactId: 'customer-1',\n        churnRisk: 20,\n        lifetimeValue: 2000,\n        engagementScore: 85,\n        segment: 'High Value',\n        confidenceScore: 0.9,\n        lastActivityDate: new Date(),\n        nextBestAction: 'Upsell premium features',\n        preferredChannel: 'EMAIL',\n        behavioralScores: { frequency: 8, recency: 9, monetary: 8 },\n        insights: ['Highly engaged', 'Premium candidate'],\n        calculatedAt: new Date(),\n        contact: testDataFactory.createContact({ id: 'customer-1' }),\n        organization: { id: authContext.organizationId, name: 'Test Org' }\n      };\n\n      // Setup mocks\n      mockPrismaClient.segment.findMany.mockResolvedValue([mockSegment]);\n      mockPrismaClient.mCPCustomerPredictions.findMany.mockResolvedValue([mockPrediction]);\n\n      // Act - Get segments\n      const segmentsResult = await server['readResource']('customer://segments', authContext);\n      \n      // Act - Get predictions\n      const predictionsResult = await server['readResource']('customer://predictions', authContext);\n\n      // Assert - Segments\n      const segmentsData = JSON.parse(segmentsResult.text);\n      expect(segmentsData.segments).toHaveLength(1);\n      expect(segmentsData.segments[0].name).toBe('High Value');\n      expect(segmentsData.segments[0].statistics.totalMembers).toBe(1);\n\n      // Assert - Predictions\n      const predictionsData = JSON.parse(predictionsResult.text);\n      expect(predictionsData.predictions).toHaveLength(1);\n      expect(predictionsData.predictions[0].predictions.segment).toBe('High Value');\n      expect(predictionsData.summary.totalPredictions).toBe(1);\n\n      // Verify both operations were logged\n      expect(mockAuditLogger.logEvent).toHaveBeenCalledTimes(2);\n    });\n  });\n});"],"names":["jest","mock","prisma","mockPrismaClient","redisCache","mockRedisClient","CACHE_KEYS","API_RATE_LIMIT","key","enterpriseAuditLogger","mockAuditLogger","describe","server","config","beforeEach","resetAllMocks","setupDefaultMocks","name","version","port","enabled","authentication","required","methods","rateLimit","maxRequests","windowMs","fallback","timeout","validation","strict","sanitizeOutput","CustomerDataMCPServer","afterEach","it","userContext","testUtils","createMockAuthContext","role","permissions","resources","expect","toHaveLength","uri","toBe","mimeType","adminContext","map","r","toEqual","orgUserContext","tools","t","searchTool","find","inputSchema","properties","query","toBeDefined","toContain","authContext","mockCustomers","testDataFactory","createContact","id","email","firstName","lastName","organizationId","contact","findMany","mockResolvedValue","result","data","JSON","parse","text","profiles","meta","total","limit","offset","toHaveBeenCalledWith","where","take","skip","include","segments","predictions","mockCustomer","churnRisk","lifetimeValue","engagementScore","contains","phone","fallbackCustomers","mockRejectedValueOnce","Error","mockResolvedValueOnce","success","fallbackUsed","args","includeSegments","includePredictions","content","type","results","OR","mode","logEvent","objectContaining","eventType","action","outcome","details","riskLevel","mockRejectedValue","isError","error","errorMessage","findFirst","customerId","profile","createdAt","updatedAt","mockSegments","description","rules","Date","members","lastEngaged","now","_count","emailCampaigns","smsCampaigns","waCampaigns","segment","statistics","totalMembers","recentlyEngaged","engagementRate","campaignUsage","createdBy","select","mockPredictions","contactId","confidenceScore","lastActivityDate","nextBestAction","preferredChannel","behavioralScores","frequency","recency","monetary","insights","calculatedAt","organization","mCPCustomerPredictions","firstPrediction","summary","totalPredictions","averages","riskDistribution","highRisk","count","lowRisk","segmentDistribution","channelPreferences","source","duration","company","orderBy","largePredictionSet","Array","from","length","_","i","Math","random","message","invalidUri","rejects","toThrow","MCPValidationError","largeCustomerSet","mockImplementation","mockDatabaseScenarios","fastQuery","startTime","performance","endTime","toBeLessThan","slowQuery","toBeGreaterThan","any","Number","otherOrgContext","otherOrgCustomer","customerWithSensitiveData","password","apiKey","internalNotes","customer","toBeUndefined","not","mockSegment","mockPrediction","segmentsResult","predictionsResult","segmentsData","predictionsData","toHaveBeenCalledTimes"],"mappings":"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"}