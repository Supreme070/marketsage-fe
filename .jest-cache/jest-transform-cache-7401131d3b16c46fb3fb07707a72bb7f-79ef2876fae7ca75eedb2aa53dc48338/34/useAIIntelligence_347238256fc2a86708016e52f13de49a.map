{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/hooks/useAIIntelligence.ts"],"sourcesContent":["/**\n * AI Intelligence CRUD Hooks\n * ==========================\n * Complete CRUD operations for all AI Intelligence sections\n */\n\n'use client';\n\nimport { useState, useCallback, useEffect } from 'react';\nimport { toast } from 'sonner';\n\n// Types for AI Intelligence records\nexport interface ContentAnalysis {\n  id?: string;\n  title: string;\n  content: string;\n  supremeScore: number;\n  sentiment?: number;\n  readability?: number;\n  engagement?: number;\n  analysis?: Record<string, any>;\n  tags?: string[];\n  createdAt?: Date;\n  updatedAt?: Date;\n  createdBy?: { id: string; name: string; email: string };\n}\n\nexport interface CustomerSegment {\n  id?: string;\n  name: string;\n  description?: string;\n  criteria?: Record<string, any>;\n  customerCount?: number;\n  churnRisk?: number;\n  lifetimeValue?: number;\n  tags?: string[];\n  createdAt?: Date;\n  updatedAt?: Date;\n  createdBy?: { id: string; name: string; email: string };\n}\n\nexport interface ChatHistory {\n  id?: string;\n  userId: string;\n  sessionId?: string;\n  question: string;\n  answer: string;\n  context?: Record<string, any>;\n  confidence?: number;\n  createdAt?: Date;\n}\n\nexport interface AITool {\n  id?: string;\n  name: string;\n  description?: string;\n  category: string;\n  config?: Record<string, any>;\n  usage?: Record<string, any>;\n  isPublic?: boolean;\n  createdAt?: Date;\n  updatedAt?: Date;\n  createdBy?: { id: string; name: string; email: string };\n}\n\n// Generic CRUD hook\nfunction useAICRUD<T>(\n  type: 'content' | 'customer' | 'chat' | 'tool',\n  userId = 'default'\n) {\n  const [data, setData] = useState<T[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // Fetch records\n  const fetchData = useCallback(async (limit = 10) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(\n        `/api/ai/intelligence?type=${type}&userId=${userId}&limit=${limit}`\n      );\n      \n      if (!response.ok) throw new Error('Failed to fetch data');\n      \n      const result = await response.json();\n      setData(result.data || []);\n    } catch (err) {\n      const errorMsg = err instanceof Error ? err.message : 'Unknown error';\n      setError(errorMsg);\n      toast.error(`Failed to load ${type} data`);\n    } finally {\n      setLoading(false);\n    }\n  }, [type, userId]);\n\n  // Create record\n  const create = useCallback(async (newRecord: Omit<T, 'id' | 'createdAt' | 'updatedAt'>) => {\n    setLoading(true);\n    try {\n      const response = await fetch('/api/ai/intelligence', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ type, data: newRecord, userId })\n      });\n\n      if (!response.ok) throw new Error('Failed to create record');\n\n      const result = await response.json();\n      setData(prev => [result.data, ...prev]);\n      toast.success(result.message);\n      return result.data;\n    } catch (err) {\n      const errorMsg = err instanceof Error ? err.message : 'Unknown error';\n      setError(errorMsg);\n      toast.error(`Failed to create ${type}`);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, [type, userId]);\n\n  // Update record\n  const update = useCallback(async (id: string, updates: Partial<T>) => {\n    setLoading(true);\n    try {\n      const response = await fetch('/api/ai/intelligence', {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ id, type, data: updates, userId })\n      });\n\n      if (!response.ok) throw new Error('Failed to update record');\n\n      const result = await response.json();\n      setData(prev => prev.map(item => \n        (item as any).id === id ? result.data : item\n      ));\n      toast.success(result.message);\n      return result.data;\n    } catch (err) {\n      const errorMsg = err instanceof Error ? err.message : 'Unknown error';\n      setError(errorMsg);\n      toast.error(`Failed to update ${type}`);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, [type, userId]);\n\n  // Delete record\n  const remove = useCallback(async (id: string) => {\n    setLoading(true);\n    try {\n      const response = await fetch(\n        `/api/ai/intelligence?id=${id}&type=${type}&userId=${userId}`,\n        { method: 'DELETE' }\n      );\n\n      if (!response.ok) throw new Error('Failed to delete record');\n\n      const result = await response.json();\n      setData(prev => prev.filter(item => (item as any).id !== id));\n      toast.success(result.message);\n    } catch (err) {\n      const errorMsg = err instanceof Error ? err.message : 'Unknown error';\n      setError(errorMsg);\n      toast.error(`Failed to delete ${type}`);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, [type, userId]);\n\n  return {\n    data,\n    loading,\n    error,\n    fetchData,\n    create,\n    update,\n    remove,\n    refresh: fetchData\n  };\n}\n\n// Specialized hooks for each AI Intelligence section\n\n// Content Intelligence CRUD\nexport function useContentAnalysis(userId?: string) {\n  const crud = useAICRUD<ContentAnalysis>('content', userId);\n  \n  // Auto-fetch on mount\n  useEffect(() => {\n    crud.fetchData();\n  }, [crud.fetchData]);\n\n  // Content-specific methods\n  const analyzeAndSave = useCallback(async (title: string, content: string) => {\n    // First analyze the content using Supreme-AI\n    const analysisResponse = await fetch('/api/ai/supreme-v3', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        type: 'content',\n        userId,\n        content\n      })\n    });\n\n    if (!analysisResponse.ok) throw new Error('Analysis failed');\n    \n    const analysis = await analysisResponse.json();\n    \n    // Then save the analysis\n    return crud.create({\n      title,\n      content,\n      supremeScore: analysis.supremeScore || 0,\n      sentiment: analysis.data?.sentiment || 0,\n      readability: analysis.data?.readability || 0,\n      engagement: analysis.data?.engagement || 0,\n      analysis: analysis.data || {},\n      tags: analysis.data?.categories || []\n    });\n  }, [crud.create, userId]);\n\n  return {\n    ...crud,\n    analyzeAndSave,\n    analyses: crud.data\n  };\n}\n\n// Customer Intelligence CRUD\nexport function useCustomerSegments(userId?: string) {\n  const crud = useAICRUD<CustomerSegment>('customer', userId);\n  \n  useEffect(() => {\n    crud.fetchData();\n  }, [crud.fetchData]);\n\n  // Customer-specific methods\n  const createSegmentFromAnalysis = useCallback(async (\n    name: string,\n    description: string,\n    customers: any[]\n  ) => {\n    // First analyze customers using Supreme-AI\n    const analysisResponse = await fetch('/api/ai/supreme-v3', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        type: 'customer',\n        userId,\n        customers\n      })\n    });\n\n    if (!analysisResponse.ok) throw new Error('Customer analysis failed');\n    \n    const analysis = await analysisResponse.json();\n    \n    // Create segment from analysis\n    return crud.create({\n      name,\n      description,\n      criteria: analysis.data?.segmentCriteria || {},\n      customerCount: customers.length,\n      churnRisk: analysis.data?.averageChurnRisk || 0,\n      lifetimeValue: analysis.data?.totalLifetimeValue || 0,\n      tags: analysis.data?.tags || []\n    });\n  }, [crud.create, userId]);\n\n  return {\n    ...crud,\n    createSegmentFromAnalysis,\n    segments: crud.data\n  };\n}\n\n// Chat History CRUD\nexport function useChatHistory(userId?: string) {\n  const crud = useAICRUD<ChatHistory>('chat', userId);\n  \n  useEffect(() => {\n    crud.fetchData(50); // Load more chat history\n  }, [crud.fetchData]);\n\n  // Chat-specific methods\n  const saveChat = useCallback(async (\n    question: string,\n    answer: string,\n    context?: Record<string, any>,\n    confidence?: number,\n    sessionId?: string\n  ) => {\n    return crud.create({\n      userId: userId || 'default',\n      question,\n      answer,\n      context,\n      confidence,\n      sessionId\n    });\n  }, [crud.create, userId]);\n\n  const clearHistory = useCallback(async () => {\n    const deletePromises = crud.data.map(chat => \n      chat.id ? crud.remove(chat.id) : Promise.resolve()\n    );\n    await Promise.all(deletePromises);\n  }, [crud.data, crud.remove]);\n\n  return {\n    ...crud,\n    saveChat,\n    clearHistory,\n    chats: crud.data\n  };\n}\n\n// AI Tools CRUD\nexport function useAITools(userId?: string) {\n  const crud = useAICRUD<AITool>('tool', userId);\n  \n  useEffect(() => {\n    crud.fetchData();\n  }, [crud.fetchData]);\n\n  // Tool-specific methods\n  const createTool = useCallback(async (\n    name: string,\n    description: string,\n    category: string,\n    config: Record<string, any> = {},\n    isPublic = false\n  ) => {\n    return crud.create({\n      name,\n      description,\n      category,\n      config,\n      isPublic,\n      usage: { count: 0, lastUsed: null }\n    });\n  }, [crud.create]);\n\n  const useTool = useCallback(async (toolId: string) => {\n    const tool = crud.data.find(t => t.id === toolId);\n    if (!tool) throw new Error('Tool not found');\n\n    const newUsage = {\n      ...tool.usage,\n      count: (tool.usage?.count || 0) + 1,\n      lastUsed: new Date().toISOString()\n    };\n\n    return crud.update(toolId, { usage: newUsage });\n  }, [crud.data, crud.update]);\n\n  return {\n    ...crud,\n    createTool,\n    useTool,\n    tools: crud.data\n  };\n}\n\n// Overview hook - combines all AI Intelligence data\nexport function useAIIntelligenceOverview(\n  userId?: string,\n  timeRange: '24h' | '7d' | '30d' | 'all' = 'all'\n) {\n  const [overview, setOverview] = useState<{\n    counts: { contentCount: number; customerCount: number; chatCount: number; toolCount: number };\n    trends: { contentGrowth: number; customerGrowth: number; chatGrowth: number; toolGrowth: number };\n    aiInsights: Array<{\n      type: string;\n      priority: string;\n      title: string;\n      description: string;\n      actionable: boolean;\n      confidence: number;\n    }>;\n    dataSource: string;\n    confidence: number;\n    lastUpdated: string;\n    recent: any[];\n  }>({\n    counts: { contentCount: 0, customerCount: 0, chatCount: 0, toolCount: 0 },\n    trends: { contentGrowth: 0, customerGrowth: 0, chatGrowth: 0, toolGrowth: 0 },\n    aiInsights: [],\n    dataSource: 'hybrid',\n    confidence: 0,\n    lastUpdated: '',\n    recent: [] as any[]\n  });\n  const [loading, setLoading] = useState(false);\n\n  const fetchOverview = useCallback(async () => {\n    setLoading(true);\n    try {\n      const params = new URLSearchParams();\n      if (userId) params.append('userId', userId);\n      params.append('timeRange', timeRange);\n\n      const response = await fetch(`/api/ai/intelligence?${params}`);\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch AI Intelligence overview');\n      }\n      \n      const result = await response.json();\n      \n      if (result.success) {\n        setOverview({\n          ...result.data,\n          recent: result.data.recent || []\n        });\n        toast.success('AI Intelligence data loaded successfully');\n      } else {\n        throw new Error(result.error || 'Failed to load data');\n      }\n    } catch (error) {\n      console.error('AI Intelligence fetch error:', error);\n      toast.error('Failed to load AI Intelligence overview');\n      \n      // Fallback to demo data\n      setOverview({\n        counts: { contentCount: 5, customerCount: 5, chatCount: 12, toolCount: 8 },\n        trends: { contentGrowth: 12.0, customerGrowth: 8.0, chatGrowth: 24.0, toolGrowth: 16.0 },\n        aiInsights: [\n          {\n            type: 'insight',\n            priority: 'medium',\n            title: 'Nigeria Market Dominance',\n            description: '60% of customers are from Nigeria. Consider expanding to other West African markets.',\n            actionable: true,\n            confidence: 0.85\n          }\n        ],\n        dataSource: 'demo',\n        confidence: 0.75,\n        lastUpdated: new Date().toISOString(),\n        recent: []\n      });\n    } finally {\n      setLoading(false);\n    }\n  }, [userId, timeRange]);\n\n  useEffect(() => {\n    fetchOverview();\n  }, [fetchOverview]);\n\n  return {\n    overview,\n    loading,\n    refresh: fetchOverview\n  };\n} "],"names":["useAIIntelligenceOverview","useAITools","useChatHistory","useContentAnalysis","useCustomerSegments","useAICRUD","type","userId","data","setData","useState","loading","setLoading","error","setError","fetchData","useCallback","limit","response","fetch","ok","Error","result","json","err","errorMsg","message","toast","create","newRecord","method","headers","body","JSON","stringify","prev","success","update","id","updates","map","item","remove","filter","refresh","crud","useEffect","analyzeAndSave","title","content","analysisResponse","analysis","supremeScore","sentiment","readability","engagement","tags","categories","analyses","createSegmentFromAnalysis","name","description","customers","criteria","segmentCriteria","customerCount","length","churnRisk","averageChurnRisk","lifetimeValue","totalLifetimeValue","segments","saveChat","question","answer","context","confidence","sessionId","clearHistory","deletePromises","chat","Promise","resolve","all","chats","createTool","category","config","isPublic","usage","count","lastUsed","useTool","toolId","tool","find","t","newUsage","Date","toISOString","tools","timeRange","overview","setOverview","counts","contentCount","chatCount","toolCount","trends","contentGrowth","customerGrowth","chatGrowth","toolGrowth","aiInsights","dataSource","lastUpdated","recent","fetchOverview","params","URLSearchParams","append","console","priority","actionable"],"mappings":"AAAA;;;;CAIC,GAED;;;;;;;;;;;;IA6WgBA,yBAAyB;eAAzBA;;IA/CAC,UAAU;eAAVA;;IAzCAC,cAAc;eAAdA;;IA9FAC,kBAAkB;eAAlBA;;IA8CAC,mBAAmB;eAAnBA;;;uBAnOiC;wBAC3B;AAwDtB,oBAAoB;AACpB,SAASC,UACPC,IAA8C,EAC9CC,SAAS,SAAS;IAElB,MAAM,CAACC,MAAMC,QAAQ,GAAGC,IAAAA,eAAQ,EAAM,EAAE;IACxC,MAAM,CAACC,SAASC,WAAW,GAAGF,IAAAA,eAAQ,EAAC;IACvC,MAAM,CAACG,OAAOC,SAAS,GAAGJ,IAAAA,eAAQ,EAAgB;IAElD,gBAAgB;IAChB,MAAMK,YAAYC,IAAAA,kBAAW,EAAC,OAAOC,QAAQ,EAAE;QAC7CL,WAAW;QACXE,SAAS;QACT,IAAI;YACF,MAAMI,WAAW,MAAMC,MACrB,CAAC,0BAA0B,EAAEb,KAAK,QAAQ,EAAEC,OAAO,OAAO,EAAEU,OAAO;YAGrE,IAAI,CAACC,SAASE,EAAE,EAAE,MAAM,IAAIC,MAAM;YAElC,MAAMC,SAAS,MAAMJ,SAASK,IAAI;YAClCd,QAAQa,OAAOd,IAAI,IAAI,EAAE;QAC3B,EAAE,OAAOgB,KAAK;YACZ,MAAMC,WAAWD,eAAeH,QAAQG,IAAIE,OAAO,GAAG;YACtDZ,SAASW;YACTE,aAAK,CAACd,KAAK,CAAC,CAAC,eAAe,EAAEP,KAAK,KAAK,CAAC;QAC3C,SAAU;YACRM,WAAW;QACb;IACF,GAAG;QAACN;QAAMC;KAAO;IAEjB,gBAAgB;IAChB,MAAMqB,SAASZ,IAAAA,kBAAW,EAAC,OAAOa;QAChCjB,WAAW;QACX,IAAI;YACF,MAAMM,WAAW,MAAMC,MAAM,wBAAwB;gBACnDW,QAAQ;gBACRC,SAAS;oBAAE,gBAAgB;gBAAmB;gBAC9CC,MAAMC,KAAKC,SAAS,CAAC;oBAAE5B;oBAAME,MAAMqB;oBAAWtB;gBAAO;YACvD;YAEA,IAAI,CAACW,SAASE,EAAE,EAAE,MAAM,IAAIC,MAAM;YAElC,MAAMC,SAAS,MAAMJ,SAASK,IAAI;YAClCd,QAAQ0B,CAAAA,OAAQ;oBAACb,OAAOd,IAAI;uBAAK2B;iBAAK;YACtCR,aAAK,CAACS,OAAO,CAACd,OAAOI,OAAO;YAC5B,OAAOJ,OAAOd,IAAI;QACpB,EAAE,OAAOgB,KAAK;YACZ,MAAMC,WAAWD,eAAeH,QAAQG,IAAIE,OAAO,GAAG;YACtDZ,SAASW;YACTE,aAAK,CAACd,KAAK,CAAC,CAAC,iBAAiB,EAAEP,MAAM;YACtC,MAAMkB;QACR,SAAU;YACRZ,WAAW;QACb;IACF,GAAG;QAACN;QAAMC;KAAO;IAEjB,gBAAgB;IAChB,MAAM8B,SAASrB,IAAAA,kBAAW,EAAC,OAAOsB,IAAYC;QAC5C3B,WAAW;QACX,IAAI;YACF,MAAMM,WAAW,MAAMC,MAAM,wBAAwB;gBACnDW,QAAQ;gBACRC,SAAS;oBAAE,gBAAgB;gBAAmB;gBAC9CC,MAAMC,KAAKC,SAAS,CAAC;oBAAEI;oBAAIhC;oBAAME,MAAM+B;oBAAShC;gBAAO;YACzD;YAEA,IAAI,CAACW,SAASE,EAAE,EAAE,MAAM,IAAIC,MAAM;YAElC,MAAMC,SAAS,MAAMJ,SAASK,IAAI;YAClCd,QAAQ0B,CAAAA,OAAQA,KAAKK,GAAG,CAACC,CAAAA,OACvB,AAACA,KAAaH,EAAE,KAAKA,KAAKhB,OAAOd,IAAI,GAAGiC;YAE1Cd,aAAK,CAACS,OAAO,CAACd,OAAOI,OAAO;YAC5B,OAAOJ,OAAOd,IAAI;QACpB,EAAE,OAAOgB,KAAK;YACZ,MAAMC,WAAWD,eAAeH,QAAQG,IAAIE,OAAO,GAAG;YACtDZ,SAASW;YACTE,aAAK,CAACd,KAAK,CAAC,CAAC,iBAAiB,EAAEP,MAAM;YACtC,MAAMkB;QACR,SAAU;YACRZ,WAAW;QACb;IACF,GAAG;QAACN;QAAMC;KAAO;IAEjB,gBAAgB;IAChB,MAAMmC,SAAS1B,IAAAA,kBAAW,EAAC,OAAOsB;QAChC1B,WAAW;QACX,IAAI;YACF,MAAMM,WAAW,MAAMC,MACrB,CAAC,wBAAwB,EAAEmB,GAAG,MAAM,EAAEhC,KAAK,QAAQ,EAAEC,QAAQ,EAC7D;gBAAEuB,QAAQ;YAAS;YAGrB,IAAI,CAACZ,SAASE,EAAE,EAAE,MAAM,IAAIC,MAAM;YAElC,MAAMC,SAAS,MAAMJ,SAASK,IAAI;YAClCd,QAAQ0B,CAAAA,OAAQA,KAAKQ,MAAM,CAACF,CAAAA,OAAQ,AAACA,KAAaH,EAAE,KAAKA;YACzDX,aAAK,CAACS,OAAO,CAACd,OAAOI,OAAO;QAC9B,EAAE,OAAOF,KAAK;YACZ,MAAMC,WAAWD,eAAeH,QAAQG,IAAIE,OAAO,GAAG;YACtDZ,SAASW;YACTE,aAAK,CAACd,KAAK,CAAC,CAAC,iBAAiB,EAAEP,MAAM;YACtC,MAAMkB;QACR,SAAU;YACRZ,WAAW;QACb;IACF,GAAG;QAACN;QAAMC;KAAO;IAEjB,OAAO;QACLC;QACAG;QACAE;QACAE;QACAa;QACAS;QACAK;QACAE,SAAS7B;IACX;AACF;AAKO,SAASZ,mBAAmBI,MAAe;IAChD,MAAMsC,OAAOxC,UAA2B,WAAWE;IAEnD,sBAAsB;IACtBuC,IAAAA,gBAAS,EAAC;QACRD,KAAK9B,SAAS;IAChB,GAAG;QAAC8B,KAAK9B,SAAS;KAAC;IAEnB,2BAA2B;IAC3B,MAAMgC,iBAAiB/B,IAAAA,kBAAW,EAAC,OAAOgC,OAAeC;QACvD,6CAA6C;QAC7C,MAAMC,mBAAmB,MAAM/B,MAAM,sBAAsB;YACzDW,QAAQ;YACRC,SAAS;gBAAE,gBAAgB;YAAmB;YAC9CC,MAAMC,KAAKC,SAAS,CAAC;gBACnB5B,MAAM;gBACNC;gBACA0C;YACF;QACF;QAEA,IAAI,CAACC,iBAAiB9B,EAAE,EAAE,MAAM,IAAIC,MAAM;QAE1C,MAAM8B,WAAW,MAAMD,iBAAiB3B,IAAI;QAE5C,yBAAyB;QACzB,OAAOsB,KAAKjB,MAAM,CAAC;YACjBoB;YACAC;YACAG,cAAcD,SAASC,YAAY,IAAI;YACvCC,WAAWF,SAAS3C,IAAI,EAAE6C,aAAa;YACvCC,aAAaH,SAAS3C,IAAI,EAAE8C,eAAe;YAC3CC,YAAYJ,SAAS3C,IAAI,EAAE+C,cAAc;YACzCJ,UAAUA,SAAS3C,IAAI,IAAI,CAAC;YAC5BgD,MAAML,SAAS3C,IAAI,EAAEiD,cAAc,EAAE;QACvC;IACF,GAAG;QAACZ,KAAKjB,MAAM;QAAErB;KAAO;IAExB,OAAO;QACL,GAAGsC,IAAI;QACPE;QACAW,UAAUb,KAAKrC,IAAI;IACrB;AACF;AAGO,SAASJ,oBAAoBG,MAAe;IACjD,MAAMsC,OAAOxC,UAA2B,YAAYE;IAEpDuC,IAAAA,gBAAS,EAAC;QACRD,KAAK9B,SAAS;IAChB,GAAG;QAAC8B,KAAK9B,SAAS;KAAC;IAEnB,4BAA4B;IAC5B,MAAM4C,4BAA4B3C,IAAAA,kBAAW,EAAC,OAC5C4C,MACAC,aACAC;QAEA,2CAA2C;QAC3C,MAAMZ,mBAAmB,MAAM/B,MAAM,sBAAsB;YACzDW,QAAQ;YACRC,SAAS;gBAAE,gBAAgB;YAAmB;YAC9CC,MAAMC,KAAKC,SAAS,CAAC;gBACnB5B,MAAM;gBACNC;gBACAuD;YACF;QACF;QAEA,IAAI,CAACZ,iBAAiB9B,EAAE,EAAE,MAAM,IAAIC,MAAM;QAE1C,MAAM8B,WAAW,MAAMD,iBAAiB3B,IAAI;QAE5C,+BAA+B;QAC/B,OAAOsB,KAAKjB,MAAM,CAAC;YACjBgC;YACAC;YACAE,UAAUZ,SAAS3C,IAAI,EAAEwD,mBAAmB,CAAC;YAC7CC,eAAeH,UAAUI,MAAM;YAC/BC,WAAWhB,SAAS3C,IAAI,EAAE4D,oBAAoB;YAC9CC,eAAelB,SAAS3C,IAAI,EAAE8D,sBAAsB;YACpDd,MAAML,SAAS3C,IAAI,EAAEgD,QAAQ,EAAE;QACjC;IACF,GAAG;QAACX,KAAKjB,MAAM;QAAErB;KAAO;IAExB,OAAO;QACL,GAAGsC,IAAI;QACPc;QACAY,UAAU1B,KAAKrC,IAAI;IACrB;AACF;AAGO,SAASN,eAAeK,MAAe;IAC5C,MAAMsC,OAAOxC,UAAuB,QAAQE;IAE5CuC,IAAAA,gBAAS,EAAC;QACRD,KAAK9B,SAAS,CAAC,KAAK,yBAAyB;IAC/C,GAAG;QAAC8B,KAAK9B,SAAS;KAAC;IAEnB,wBAAwB;IACxB,MAAMyD,WAAWxD,IAAAA,kBAAW,EAAC,OAC3ByD,UACAC,QACAC,SACAC,YACAC;QAEA,OAAOhC,KAAKjB,MAAM,CAAC;YACjBrB,QAAQA,UAAU;YAClBkE;YACAC;YACAC;YACAC;YACAC;QACF;IACF,GAAG;QAAChC,KAAKjB,MAAM;QAAErB;KAAO;IAExB,MAAMuE,eAAe9D,IAAAA,kBAAW,EAAC;QAC/B,MAAM+D,iBAAiBlC,KAAKrC,IAAI,CAACgC,GAAG,CAACwC,CAAAA,OACnCA,KAAK1C,EAAE,GAAGO,KAAKH,MAAM,CAACsC,KAAK1C,EAAE,IAAI2C,QAAQC,OAAO;QAElD,MAAMD,QAAQE,GAAG,CAACJ;IACpB,GAAG;QAAClC,KAAKrC,IAAI;QAAEqC,KAAKH,MAAM;KAAC;IAE3B,OAAO;QACL,GAAGG,IAAI;QACP2B;QACAM;QACAM,OAAOvC,KAAKrC,IAAI;IAClB;AACF;AAGO,SAASP,WAAWM,MAAe;IACxC,MAAMsC,OAAOxC,UAAkB,QAAQE;IAEvCuC,IAAAA,gBAAS,EAAC;QACRD,KAAK9B,SAAS;IAChB,GAAG;QAAC8B,KAAK9B,SAAS;KAAC;IAEnB,wBAAwB;IACxB,MAAMsE,aAAarE,IAAAA,kBAAW,EAAC,OAC7B4C,MACAC,aACAyB,UACAC,SAA8B,CAAC,CAAC,EAChCC,WAAW,KAAK;QAEhB,OAAO3C,KAAKjB,MAAM,CAAC;YACjBgC;YACAC;YACAyB;YACAC;YACAC;YACAC,OAAO;gBAAEC,OAAO;gBAAGC,UAAU;YAAK;QACpC;IACF,GAAG;QAAC9C,KAAKjB,MAAM;KAAC;IAEhB,MAAMgE,UAAU5E,IAAAA,kBAAW,EAAC,OAAO6E;QACjC,MAAMC,OAAOjD,KAAKrC,IAAI,CAACuF,IAAI,CAACC,CAAAA,IAAKA,EAAE1D,EAAE,KAAKuD;QAC1C,IAAI,CAACC,MAAM,MAAM,IAAIzE,MAAM;QAE3B,MAAM4E,WAAW;YACf,GAAGH,KAAKL,KAAK;YACbC,OAAO,AAACI,CAAAA,KAAKL,KAAK,EAAEC,SAAS,CAAA,IAAK;YAClCC,UAAU,IAAIO,OAAOC,WAAW;QAClC;QAEA,OAAOtD,KAAKR,MAAM,CAACwD,QAAQ;YAAEJ,OAAOQ;QAAS;IAC/C,GAAG;QAACpD,KAAKrC,IAAI;QAAEqC,KAAKR,MAAM;KAAC;IAE3B,OAAO;QACL,GAAGQ,IAAI;QACPwC;QACAO;QACAQ,OAAOvD,KAAKrC,IAAI;IAClB;AACF;AAGO,SAASR,0BACdO,MAAe,EACf8F,YAA0C,KAAK;IAE/C,MAAM,CAACC,UAAUC,YAAY,GAAG7F,IAAAA,eAAQ,EAerC;QACD8F,QAAQ;YAAEC,cAAc;YAAGxC,eAAe;YAAGyC,WAAW;YAAGC,WAAW;QAAE;QACxEC,QAAQ;YAAEC,eAAe;YAAGC,gBAAgB;YAAGC,YAAY;YAAGC,YAAY;QAAE;QAC5EC,YAAY,EAAE;QACdC,YAAY;QACZtC,YAAY;QACZuC,aAAa;QACbC,QAAQ,EAAE;IACZ;IACA,MAAM,CAACzG,SAASC,WAAW,GAAGF,IAAAA,eAAQ,EAAC;IAEvC,MAAM2G,gBAAgBrG,IAAAA,kBAAW,EAAC;QAChCJ,WAAW;QACX,IAAI;YACF,MAAM0G,SAAS,IAAIC;YACnB,IAAIhH,QAAQ+G,OAAOE,MAAM,CAAC,UAAUjH;YACpC+G,OAAOE,MAAM,CAAC,aAAanB;YAE3B,MAAMnF,WAAW,MAAMC,MAAM,CAAC,qBAAqB,EAAEmG,QAAQ;YAE7D,IAAI,CAACpG,SAASE,EAAE,EAAE;gBAChB,MAAM,IAAIC,MAAM;YAClB;YAEA,MAAMC,SAAS,MAAMJ,SAASK,IAAI;YAElC,IAAID,OAAOc,OAAO,EAAE;gBAClBmE,YAAY;oBACV,GAAGjF,OAAOd,IAAI;oBACd4G,QAAQ9F,OAAOd,IAAI,CAAC4G,MAAM,IAAI,EAAE;gBAClC;gBACAzF,aAAK,CAACS,OAAO,CAAC;YAChB,OAAO;gBACL,MAAM,IAAIf,MAAMC,OAAOT,KAAK,IAAI;YAClC;QACF,EAAE,OAAOA,OAAO;YACd4G,QAAQ5G,KAAK,CAAC,gCAAgCA;YAC9Cc,aAAK,CAACd,KAAK,CAAC;YAEZ,wBAAwB;YACxB0F,YAAY;gBACVC,QAAQ;oBAAEC,cAAc;oBAAGxC,eAAe;oBAAGyC,WAAW;oBAAIC,WAAW;gBAAE;gBACzEC,QAAQ;oBAAEC,eAAe;oBAAMC,gBAAgB;oBAAKC,YAAY;oBAAMC,YAAY;gBAAK;gBACvFC,YAAY;oBACV;wBACE3G,MAAM;wBACNoH,UAAU;wBACV1E,OAAO;wBACPa,aAAa;wBACb8D,YAAY;wBACZ/C,YAAY;oBACd;iBACD;gBACDsC,YAAY;gBACZtC,YAAY;gBACZuC,aAAa,IAAIjB,OAAOC,WAAW;gBACnCiB,QAAQ,EAAE;YACZ;QACF,SAAU;YACRxG,WAAW;QACb;IACF,GAAG;QAACL;QAAQ8F;KAAU;IAEtBvD,IAAAA,gBAAS,EAAC;QACRuE;IACF,GAAG;QAACA;KAAc;IAElB,OAAO;QACLf;QACA3F;QACAiC,SAASyE;IACX;AACF"}