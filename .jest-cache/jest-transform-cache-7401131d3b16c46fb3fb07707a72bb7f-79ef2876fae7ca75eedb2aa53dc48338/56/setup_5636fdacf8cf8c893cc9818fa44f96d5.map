{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/__tests__/integration/mcp/setup.ts"],"sourcesContent":["/**\n * Integration Test Setup for MCP Servers\n * \n * This module provides utilities for setting up real database environments\n * for testing MCP servers with actual seeded data.\n */\n\nimport { PrismaClient } from '@prisma/client';\nimport * as dotenv from 'dotenv';\nimport { execSync } from 'child_process';\nimport path from 'path';\n\n// Load environment variables\ndotenv.config();\n\n// Test database configuration\nconst TEST_DATABASE_URL = process.env.TEST_DATABASE_URL || \n  process.env.DATABASE_URL?.replace('/marketsage', '/marketsage_test') ||\n  \"postgresql://marketsage:marketsage_password@marketsage-db:5432/marketsage_test?schema=public\";\n\n// Create test Prisma client\nexport const testPrisma = new PrismaClient({\n  datasources: {\n    db: {\n      url: TEST_DATABASE_URL\n    }\n  }\n});\n\n/**\n * Database setup utilities\n */\nexport class TestDatabaseManager {\n  private static instance: TestDatabaseManager;\n  private isSetup = false;\n\n  static getInstance(): TestDatabaseManager {\n    if (!TestDatabaseManager.instance) {\n      TestDatabaseManager.instance = new TestDatabaseManager();\n    }\n    return TestDatabaseManager.instance;\n  }\n\n  /**\n   * Setup test database with fresh schema and seed data\n   */\n  async setup(): Promise<void> {\n    if (this.isSetup) return;\n\n    console.log('üèóÔ∏è  Setting up test database...');\n    console.log(`üìä Test Database URL: ${TEST_DATABASE_URL.replace(/\\/\\/.*@/, '//***:***@')}`);\n\n    try {\n      // Ensure test database exists\n      await this.ensureTestDatabase();\n\n      // Run migrations\n      await this.runMigrations();\n\n      // Seed base data\n      await this.seedBaseData();\n\n      // Seed MCP-specific data\n      await this.seedMCPData();\n\n      this.isSetup = true;\n      console.log('‚úÖ Test database setup complete');\n    } catch (error) {\n      console.error('‚ùå Test database setup failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Clean up test database\n   */\n  async teardown(): Promise<void> {\n    if (!this.isSetup) return;\n\n    console.log('üßπ Cleaning up test database...');\n    try {\n      await this.cleanupTestData();\n      await testPrisma.$disconnect();\n      this.isSetup = false;\n      console.log('‚úÖ Test database cleanup complete');\n    } catch (error) {\n      console.error('‚ùå Test database cleanup failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Reset database between tests\n   */\n  async reset(): Promise<void> {\n    console.log('üîÑ Resetting test database...');\n    try {\n      await this.cleanupTestData();\n      await this.seedBaseData();\n      await this.seedMCPData();\n      console.log('‚úÖ Test database reset complete');\n    } catch (error) {\n      console.error('‚ùå Test database reset failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Ensure test database exists\n   */\n  private async ensureTestDatabase(): Promise<void> {\n    try {\n      // Try to connect to test database\n      await testPrisma.$connect();\n      console.log('üìä Test database connection verified');\n    } catch (error) {\n      console.log('üèóÔ∏è  Test database does not exist, attempting to create...');\n      \n      // If using Docker, the database should already exist\n      // If using local setup, we might need to create it\n      try {\n        // Try connecting again after a brief delay\n        await new Promise(resolve => setTimeout(resolve, 2000));\n        await testPrisma.$connect();\n        console.log('üìä Test database connection established');\n      } catch (retryError) {\n        console.error('‚ùå Could not connect to test database:', retryError);\n        throw new Error('Test database is not available. Please ensure the test database is running.');\n      }\n    }\n  }\n\n  /**\n   * Run database migrations\n   */\n  private async runMigrations(): Promise<void> {\n    console.log('üìã Running database migrations...');\n    try {\n      // Set the test database URL for migration\n      const originalUrl = process.env.DATABASE_URL;\n      process.env.DATABASE_URL = TEST_DATABASE_URL;\n      \n      // Run Prisma migrations\n      execSync('npx prisma migrate deploy', { \n        stdio: 'inherit',\n        cwd: path.resolve(process.cwd())\n      });\n      \n      // Restore original database URL\n      if (originalUrl) {\n        process.env.DATABASE_URL = originalUrl;\n      }\n      \n      console.log('‚úÖ Database migrations completed');\n    } catch (error) {\n      console.error('‚ùå Migration failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Seed base data (organizations, users, contacts, campaigns)\n   */\n  private async seedBaseData(): Promise<void> {\n    console.log('üå± Seeding base test data...');\n    try {\n      // Seed basic organizations and users\n      const testOrg = await testPrisma.organization.create({\n        data: {\n          id: 'test-org-1',\n          name: 'Test Organization',\n          plan: 'ENTERPRISE',\n          websiteUrl: 'https://test-org.com',\n          address: 'Lagos, Nigeria'\n        }\n      });\n\n      const testUser = await testPrisma.user.create({\n        data: {\n          id: 'test-user-1',\n          name: 'Test User',\n          email: 'test@test-org.com',\n          role: 'ADMIN',\n          organizationId: testOrg.id\n        }\n      });\n\n      // Seed test contacts\n      await testPrisma.contact.createMany({\n        data: [\n          {\n            id: 'test-contact-1',\n            email: 'contact1@test.com',\n            firstName: 'John',\n            lastName: 'Doe',\n            phone: '+234123456789',\n            organizationId: testOrg.id,\n            status: 'ACTIVE'\n          },\n          {\n            id: 'test-contact-2',\n            email: 'contact2@test.com',\n            firstName: 'Jane',\n            lastName: 'Smith',\n            phone: '+234987654321',\n            organizationId: testOrg.id,\n            status: 'ACTIVE'\n          },\n          {\n            id: 'test-contact-3',\n            email: 'contact3@test.com',\n            firstName: 'Bob',\n            lastName: 'Johnson',\n            phone: '+234555666777',\n            organizationId: testOrg.id,\n            status: 'INACTIVE'\n          }\n        ]\n      });\n\n      // Seed test campaigns\n      await testPrisma.emailCampaign.createMany({\n        data: [\n          {\n            id: 'test-email-campaign-1',\n            name: 'Welcome Email Series',\n            subject: 'Welcome to Our Platform!',\n            organizationId: testOrg.id,\n            userId: testUser.id,\n            status: 'COMPLETED',\n            scheduledAt: new Date('2024-01-15')\n          },\n          {\n            id: 'test-email-campaign-2',\n            name: 'Product Announcement',\n            subject: 'Exciting New Features!',\n            organizationId: testOrg.id,\n            userId: testUser.id,\n            status: 'COMPLETED',\n            scheduledAt: new Date('2024-01-20')\n          }\n        ]\n      });\n\n      await testPrisma.sMSCampaign.createMany({\n        data: [\n          {\n            id: 'test-sms-campaign-1',\n            name: 'Flash Sale Alert',\n            message: 'Limited time offer - 50% off!',\n            organizationId: testOrg.id,\n            userId: testUser.id,\n            status: 'COMPLETED',\n            scheduledAt: new Date('2024-01-25')\n          }\n        ]\n      });\n\n      await testPrisma.whatsAppCampaign.createMany({\n        data: [\n          {\n            id: 'test-whatsapp-campaign-1',\n            name: 'Customer Support Follow-up',\n            message: 'How was your experience with our support?',\n            organizationId: testOrg.id,\n            userId: testUser.id,\n            status: 'COMPLETED',\n            scheduledAt: new Date('2024-01-30')\n          }\n        ]\n      });\n\n      console.log('‚úÖ Base test data seeded successfully');\n    } catch (error) {\n      console.error('‚ùå Base data seeding failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Seed MCP-specific test data by running the MCP seed scripts\n   */\n  private async seedMCPData(): Promise<void> {\n    console.log('üîÑ Seeding MCP test data...');\n    \n    try {\n      // Import and run MCP seed scripts with test database\n      const originalUrl = process.env.DATABASE_URL;\n      process.env.DATABASE_URL = TEST_DATABASE_URL;\n\n      // Dynamically import seed scripts\n      const seedCampaignAnalytics = (await import('../../../scripts/seed-mcp-campaign-analytics')).default;\n      const seedCustomerPredictions = (await import('../../../scripts/seed-mcp-customer-predictions')).default;\n      const seedVisitorSessions = (await import('../../../scripts/seed-mcp-visitor-sessions')).default;\n      const seedMonitoringMetrics = (await import('../../../scripts/seed-mcp-monitoring-metrics')).default;\n\n      // Run seed scripts in sequence\n      await seedCampaignAnalytics();\n      await seedCustomerPredictions();\n      await seedVisitorSessions();\n      await seedMonitoringMetrics();\n\n      // Restore original database URL\n      if (originalUrl) {\n        process.env.DATABASE_URL = originalUrl;\n      }\n\n      console.log('‚úÖ MCP test data seeded successfully');\n    } catch (error) {\n      console.error('‚ùå MCP data seeding failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Clean up all test data\n   */\n  private async cleanupTestData(): Promise<void> {\n    try {\n      // Clean up in reverse dependency order\n      await testPrisma.mCPMonitoringMetrics.deleteMany();\n      await testPrisma.mCPVisitorSessions.deleteMany();\n      await testPrisma.mCPCustomerPredictions.deleteMany();\n      await testPrisma.mCPCampaignMetrics.deleteMany();\n      \n      await testPrisma.whatsAppCampaign.deleteMany();\n      await testPrisma.sMSCampaign.deleteMany();\n      await testPrisma.emailCampaign.deleteMany();\n      await testPrisma.contact.deleteMany();\n      await testPrisma.user.deleteMany();\n      await testPrisma.organization.deleteMany();\n      \n      console.log('üßπ Test data cleanup completed');\n    } catch (error) {\n      console.error('‚ùå Test data cleanup failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get test data counts for verification\n   */\n  async getDataCounts(): Promise<any> {\n    try {\n      const counts = {\n        organizations: await testPrisma.organization.count(),\n        users: await testPrisma.user.count(),\n        contacts: await testPrisma.contact.count(),\n        emailCampaigns: await testPrisma.emailCampaign.count(),\n        smsCampaigns: await testPrisma.sMSCampaign.count(),\n        whatsappCampaigns: await testPrisma.whatsAppCampaign.count(),\n        mcpCampaignMetrics: await testPrisma.mCPCampaignMetrics.count(),\n        mcpCustomerPredictions: await testPrisma.mCPCustomerPredictions.count(),\n        mcpVisitorSessions: await testPrisma.mCPVisitorSessions.count(),\n        mcpMonitoringMetrics: await testPrisma.mCPMonitoringMetrics.count()\n      };\n      return counts;\n    } catch (error) {\n      console.error('‚ùå Error getting data counts:', error);\n      throw error;\n    }\n  }\n}\n\n/**\n * Global test setup function\n */\nexport async function setupIntegrationTests(): Promise<void> {\n  const dbManager = TestDatabaseManager.getInstance();\n  await dbManager.setup();\n}\n\n/**\n * Global test teardown function\n */\nexport async function teardownIntegrationTests(): Promise<void> {\n  const dbManager = TestDatabaseManager.getInstance();\n  await dbManager.teardown();\n}\n\n/**\n * Reset test data between tests\n */\nexport async function resetTestData(): Promise<void> {\n  const dbManager = TestDatabaseManager.getInstance();\n  await dbManager.reset();\n}\n\n/**\n * Performance measurement utilities\n */\nexport class PerformanceTracker {\n  private startTime: number = 0;\n  private measurements: Map<string, number[]> = new Map();\n\n  start(): void {\n    this.startTime = Date.now();\n  }\n\n  measure(operation: string): number {\n    const duration = Date.now() - this.startTime;\n    \n    if (!this.measurements.has(operation)) {\n      this.measurements.set(operation, []);\n    }\n    this.measurements.get(operation)!.push(duration);\n    \n    return duration;\n  }\n\n  getStats(operation: string): { avg: number; min: number; max: number; count: number } {\n    const measurements = this.measurements.get(operation) || [];\n    if (measurements.length === 0) {\n      return { avg: 0, min: 0, max: 0, count: 0 };\n    }\n\n    const avg = measurements.reduce((sum, val) => sum + val, 0) / measurements.length;\n    const min = Math.min(...measurements);\n    const max = Math.max(...measurements);\n    \n    return { avg, min, max, count: measurements.length };\n  }\n\n  getAllStats(): Record<string, any> {\n    const stats: Record<string, any> = {};\n    for (const [operation, _] of this.measurements) {\n      stats[operation] = this.getStats(operation);\n    }\n    return stats;\n  }\n\n  reset(): void {\n    this.measurements.clear();\n  }\n}\n\n/**\n * Docker environment detection\n */\nexport function isDockerEnvironment(): boolean {\n  return process.env.DOCKER_ENV === 'true' || \n         process.env.DATABASE_URL?.includes('marketsage-db') ||\n         false;\n}\n\n/**\n * Environment configuration for tests\n */\nexport const testConfig = {\n  database: {\n    url: TEST_DATABASE_URL,\n    isDocker: isDockerEnvironment()\n  },\n  timeouts: {\n    database: 30000, // 30 seconds\n    mcp: 10000,      // 10 seconds\n    integration: 60000 // 60 seconds\n  },\n  performance: {\n    maxResponseTime: 2000, // 2 seconds\n    maxQueryTime: 1000,    // 1 second\n    maxConcurrentOperations: 10\n  }\n};\n\nexport default {\n  TestDatabaseManager,\n  setupIntegrationTests,\n  teardownIntegrationTests,\n  resetTestData,\n  PerformanceTracker,\n  testPrisma,\n  testConfig\n};\n"],"names":["PerformanceTracker","TestDatabaseManager","isDockerEnvironment","resetTestData","setupIntegrationTests","teardownIntegrationTests","testConfig","testPrisma","dotenv","config","TEST_DATABASE_URL","process","env","DATABASE_URL","replace","PrismaClient","datasources","db","url","getInstance","instance","setup","isSetup","console","log","ensureTestDatabase","runMigrations","seedBaseData","seedMCPData","error","teardown","cleanupTestData","$disconnect","reset","$connect","Promise","resolve","setTimeout","retryError","Error","originalUrl","execSync","stdio","cwd","path","testOrg","organization","create","data","id","name","plan","websiteUrl","address","testUser","user","email","role","organizationId","contact","createMany","firstName","lastName","phone","status","emailCampaign","subject","userId","scheduledAt","Date","sMSCampaign","message","whatsAppCampaign","seedCampaignAnalytics","default","seedCustomerPredictions","seedVisitorSessions","seedMonitoringMetrics","mCPMonitoringMetrics","deleteMany","mCPVisitorSessions","mCPCustomerPredictions","mCPCampaignMetrics","getDataCounts","counts","organizations","count","users","contacts","emailCampaigns","smsCampaigns","whatsappCampaigns","mcpCampaignMetrics","mcpCustomerPredictions","mcpVisitorSessions","mcpMonitoringMetrics","dbManager","start","startTime","now","measure","operation","duration","measurements","has","set","get","push","getStats","length","avg","min","max","reduce","sum","val","Math","getAllStats","stats","_","clear","Map","DOCKER_ENV","includes","database","isDocker","timeouts","mcp","integration","performance","maxResponseTime","maxQueryTime","maxConcurrentOperations"],"mappings":"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"}