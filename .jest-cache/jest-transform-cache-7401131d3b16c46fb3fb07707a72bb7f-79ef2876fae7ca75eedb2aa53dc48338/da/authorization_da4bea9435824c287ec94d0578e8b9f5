1961a437aa44cbb92d8e2175f675d913
/**
 * Role-Based Access Control (RBAC) System
 * =======================================
 * Comprehensive authorization system with fine-grained permissions
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    AuthorizationService: function() {
        return AuthorizationService;
    },
    Permission: function() {
        return Permission;
    },
    requireAllPermissions: function() {
        return requireAllPermissions;
    },
    requireAnyPermission: function() {
        return requireAnyPermission;
    },
    requirePermission: function() {
        return requirePermission;
    }
});
const _client = require("@prisma/client");
const _logger = require("../logger");
const _prisma = /*#__PURE__*/ _interop_require_default(require("../db/prisma"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var Permission = /*#__PURE__*/ function(Permission) {
    // User management
    Permission["CREATE_USER"] = "CREATE_USER";
    Permission["UPDATE_USER"] = "UPDATE_USER";
    Permission["DELETE_USER"] = "DELETE_USER";
    Permission["VIEW_USER"] = "VIEW_USER";
    Permission["MANAGE_USER_ROLES"] = "MANAGE_USER_ROLES";
    // Organization management
    Permission["CREATE_ORGANIZATION"] = "CREATE_ORGANIZATION";
    Permission["UPDATE_ORGANIZATION"] = "UPDATE_ORGANIZATION";
    Permission["DELETE_ORGANIZATION"] = "DELETE_ORGANIZATION";
    Permission["VIEW_ORGANIZATION"] = "VIEW_ORGANIZATION";
    Permission["MANAGE_ORGANIZATION_SETTINGS"] = "MANAGE_ORGANIZATION_SETTINGS";
    // Contact management
    Permission["CREATE_CONTACT"] = "CREATE_CONTACT";
    Permission["UPDATE_CONTACT"] = "UPDATE_CONTACT";
    Permission["DELETE_CONTACT"] = "DELETE_CONTACT";
    Permission["VIEW_CONTACT"] = "VIEW_CONTACT";
    Permission["BULK_CONTACT_OPERATIONS"] = "BULK_CONTACT_OPERATIONS";
    Permission["EXPORT_CONTACTS"] = "EXPORT_CONTACTS";
    // Campaign management
    Permission["CREATE_CAMPAIGN"] = "CREATE_CAMPAIGN";
    Permission["UPDATE_CAMPAIGN"] = "UPDATE_CAMPAIGN";
    Permission["DELETE_CAMPAIGN"] = "DELETE_CAMPAIGN";
    Permission["VIEW_CAMPAIGN"] = "VIEW_CAMPAIGN";
    Permission["SEND_CAMPAIGN"] = "SEND_CAMPAIGN";
    Permission["SCHEDULE_CAMPAIGN"] = "SCHEDULE_CAMPAIGN";
    // Task management
    Permission["CREATE_TASK"] = "CREATE_TASK";
    Permission["UPDATE_TASK"] = "UPDATE_TASK";
    Permission["DELETE_TASK"] = "DELETE_TASK";
    Permission["VIEW_TASK"] = "VIEW_TASK";
    Permission["ASSIGN_TASK"] = "ASSIGN_TASK";
    // Workflow management
    Permission["CREATE_WORKFLOW"] = "CREATE_WORKFLOW";
    Permission["UPDATE_WORKFLOW"] = "UPDATE_WORKFLOW";
    Permission["DELETE_WORKFLOW"] = "DELETE_WORKFLOW";
    Permission["VIEW_WORKFLOW"] = "VIEW_WORKFLOW";
    Permission["EXECUTE_WORKFLOW"] = "EXECUTE_WORKFLOW";
    // AI operations
    Permission["USE_AI_FEATURES"] = "USE_AI_FEATURES";
    Permission["EXECUTE_AI_TASKS"] = "EXECUTE_AI_TASKS";
    Permission["APPROVE_AI_OPERATIONS"] = "APPROVE_AI_OPERATIONS";
    Permission["CONFIGURE_AI_SETTINGS"] = "CONFIGURE_AI_SETTINGS";
    // Data operations
    Permission["VIEW_ANALYTICS"] = "VIEW_ANALYTICS";
    Permission["EXPORT_DATA"] = "EXPORT_DATA";
    Permission["IMPORT_DATA"] = "IMPORT_DATA";
    Permission["DELETE_DATA"] = "DELETE_DATA";
    // System administration
    Permission["MANAGE_INTEGRATIONS"] = "MANAGE_INTEGRATIONS";
    Permission["MANAGE_BILLING"] = "MANAGE_BILLING";
    Permission["VIEW_SYSTEM_LOGS"] = "VIEW_SYSTEM_LOGS";
    Permission["MANAGE_SYSTEM_SETTINGS"] = "MANAGE_SYSTEM_SETTINGS";
    // Security operations
    Permission["MANAGE_SECURITY_SETTINGS"] = "MANAGE_SECURITY_SETTINGS";
    Permission["VIEW_SECURITY_LOGS"] = "VIEW_SECURITY_LOGS";
    Permission["MANAGE_API_KEYS"] = "MANAGE_API_KEYS";
    return Permission;
}({});
// Base permissions for each role
const userPermissions = [
    "VIEW_USER",
    "UPDATE_USER",
    "CREATE_CONTACT",
    "UPDATE_CONTACT",
    "VIEW_CONTACT",
    "CREATE_CAMPAIGN",
    "UPDATE_CAMPAIGN",
    "VIEW_CAMPAIGN",
    "SEND_CAMPAIGN",
    "SCHEDULE_CAMPAIGN",
    "CREATE_TASK",
    "UPDATE_TASK",
    "VIEW_TASK",
    "CREATE_WORKFLOW",
    "UPDATE_WORKFLOW",
    "VIEW_WORKFLOW",
    "EXECUTE_WORKFLOW",
    "USE_AI_FEATURES",
    "VIEW_ANALYTICS",
    "EXPORT_DATA",
    "IMPORT_DATA"
];
const adminPermissions = [
    ...userPermissions,
    "DELETE_CONTACT",
    "BULK_CONTACT_OPERATIONS",
    "EXPORT_CONTACTS",
    "DELETE_CAMPAIGN",
    "DELETE_TASK",
    "ASSIGN_TASK",
    "DELETE_WORKFLOW",
    "EXECUTE_AI_TASKS",
    "DELETE_DATA",
    "MANAGE_INTEGRATIONS",
    "MANAGE_BILLING",
    "UPDATE_ORGANIZATION",
    "VIEW_ORGANIZATION",
    "MANAGE_ORGANIZATION_SETTINGS"
];
const itAdminPermissions = [
    ...adminPermissions,
    "CREATE_USER",
    "UPDATE_USER",
    "DELETE_USER",
    "VIEW_SYSTEM_LOGS",
    "MANAGE_SYSTEM_SETTINGS",
    "MANAGE_SECURITY_SETTINGS",
    "VIEW_SECURITY_LOGS",
    "MANAGE_API_KEYS",
    "CONFIGURE_AI_SETTINGS",
    "APPROVE_AI_OPERATIONS"
];
const aiAgentPermissions = [
    "VIEW_USER",
    "CREATE_CONTACT",
    "UPDATE_CONTACT",
    "VIEW_CONTACT",
    "BULK_CONTACT_OPERATIONS",
    "CREATE_CAMPAIGN",
    "UPDATE_CAMPAIGN",
    "VIEW_CAMPAIGN",
    "SEND_CAMPAIGN",
    "SCHEDULE_CAMPAIGN",
    "CREATE_TASK",
    "UPDATE_TASK",
    "VIEW_TASK",
    "ASSIGN_TASK",
    "CREATE_WORKFLOW",
    "UPDATE_WORKFLOW",
    "VIEW_WORKFLOW",
    "EXECUTE_WORKFLOW",
    "USE_AI_FEATURES",
    "EXECUTE_AI_TASKS",
    "VIEW_ANALYTICS",
    "EXPORT_DATA",
    "IMPORT_DATA"
];
// Role-based permission matrix
const rolePermissions = {
    [_client.UserRole.USER]: userPermissions,
    [_client.UserRole.ADMIN]: adminPermissions,
    [_client.UserRole.IT_ADMIN]: itAdminPermissions,
    [_client.UserRole.SUPER_ADMIN]: Object.values(Permission),
    [_client.UserRole.AI_AGENT]: aiAgentPermissions
};
class AuthorizationService {
    /**
   * Check if user has specific permission
   */ static hasPermission(userRole, permission) {
        const permissions = rolePermissions[userRole] || [];
        return permissions.includes(permission);
    }
    /**
   * Check multiple permissions (user must have ALL)
   */ static hasAllPermissions(userRole, permissions) {
        return permissions.every((permission)=>this.hasPermission(userRole, permission));
    }
    /**
   * Check multiple permissions (user must have ANY)
   */ static hasAnyPermission(userRole, permissions) {
        return permissions.some((permission)=>this.hasPermission(userRole, permission));
    }
    /**
   * Validate resource access based on ownership
   */ static async validateResourceAccess(userId, userRole, organizationId, permission, resourceOwnership) {
        // Super admin can access everything
        if (userRole === _client.UserRole.SUPER_ADMIN) {
            return {
                allowed: true
            };
        }
        // Check base permission
        if (!this.hasPermission(userRole, permission)) {
            return {
                allowed: false,
                reason: 'Insufficient permissions'
            };
        }
        // Check organization access
        if (resourceOwnership.organizationId && resourceOwnership.organizationId !== organizationId) {
            return {
                allowed: false,
                reason: 'Resource belongs to different organization'
            };
        }
        // Check user-specific access rules
        switch(permission){
            case "UPDATE_USER":
            case "VIEW_USER":
                // Users can only view/update their own profile (unless admin+)
                if (userRole === _client.UserRole.USER && resourceOwnership.userId !== userId) {
                    return {
                        allowed: false,
                        reason: 'Can only access own profile'
                    };
                }
                break;
            case "DELETE_USER":
                // Prevent self-deletion
                if (resourceOwnership.userId === userId) {
                    return {
                        allowed: false,
                        reason: 'Cannot delete own account'
                    };
                }
                break;
            case "ASSIGN_TASK":
                // Check if user can assign tasks to the target user
                if (userRole === _client.UserRole.USER && resourceOwnership.assignedUserId !== userId) {
                    return {
                        allowed: false,
                        reason: 'Can only assign tasks to self'
                    };
                }
                break;
            case "APPROVE_AI_OPERATIONS":
                // Only IT_ADMIN and SUPER_ADMIN can approve AI operations
                if (userRole !== _client.UserRole.IT_ADMIN && userRole !== _client.UserRole.SUPER_ADMIN) {
                    return {
                        allowed: false,
                        reason: 'AI operation approval requires IT Admin privileges'
                    };
                }
                break;
        }
        return {
            allowed: true
        };
    }
    /**
   * Validate bulk operation permissions
   */ static async validateBulkOperation(userId, userRole, organizationId, permission, resourceCount) {
        // Check base permission
        if (!this.hasPermission(userRole, permission)) {
            return {
                allowed: false,
                reason: 'Insufficient permissions'
            };
        }
        // Define bulk operation limits by role
        const bulkLimits = {
            [_client.UserRole.USER]: 100,
            [_client.UserRole.ADMIN]: 1000,
            [_client.UserRole.IT_ADMIN]: 5000,
            [_client.UserRole.SUPER_ADMIN]: 10000
        };
        const maxAllowed = bulkLimits[userRole];
        if (resourceCount > maxAllowed) {
            return {
                allowed: false,
                reason: `Bulk operation exceeds limit for your role`,
                maxAllowed
            };
        }
        // Additional validation for sensitive operations
        if (permission === "DELETE_DATA" && resourceCount > 10) {
            // Require higher privileges for bulk delete
            if (userRole === _client.UserRole.USER) {
                return {
                    allowed: false,
                    reason: 'Bulk delete requires admin privileges',
                    maxAllowed: 10
                };
            }
        }
        return {
            allowed: true
        };
    }
    /**
   * Get user's effective permissions
   */ static getUserPermissions(userRole) {
        return rolePermissions[userRole] || [];
    }
    /**
   * Check if user can perform action on specific entity
   */ static async canPerformAction(userId, userRole, organizationId, action, entityType, entityId) {
        // Map action + entity to permission
        const permissionMap = {
            'CREATE_USER': "CREATE_USER",
            'UPDATE_USER': "UPDATE_USER",
            'DELETE_USER': "DELETE_USER",
            'VIEW_USER': "VIEW_USER",
            'CREATE_CONTACT': "CREATE_CONTACT",
            'UPDATE_CONTACT': "UPDATE_CONTACT",
            'DELETE_CONTACT': "DELETE_CONTACT",
            'VIEW_CONTACT': "VIEW_CONTACT",
            'CREATE_CAMPAIGN': "CREATE_CAMPAIGN",
            'UPDATE_CAMPAIGN': "UPDATE_CAMPAIGN",
            'DELETE_CAMPAIGN': "DELETE_CAMPAIGN",
            'VIEW_CAMPAIGN': "VIEW_CAMPAIGN",
            'CREATE_TASK': "CREATE_TASK",
            'UPDATE_TASK': "UPDATE_TASK",
            'DELETE_TASK': "DELETE_TASK",
            'VIEW_TASK': "VIEW_TASK",
            'EXECUTE_AI_TASKS': "EXECUTE_AI_TASKS",
            'APPROVE_AI_OPERATIONS': "APPROVE_AI_OPERATIONS"
        };
        const permissionKey = `${action}_${entityType}`;
        const permission = permissionMap[permissionKey];
        if (!permission) {
            return {
                allowed: false,
                reason: `Unknown action: ${action} on ${entityType}`
            };
        }
        // Check base permission
        if (!this.hasPermission(userRole, permission)) {
            return {
                allowed: false,
                reason: 'Insufficient permissions'
            };
        }
        // If entity ID provided, check resource-specific access
        if (entityId) {
            try {
                let resourceOwnership = {};
                // Fetch resource ownership info based on entity type
                switch(entityType){
                    case 'USER':
                        const user = await _prisma.default.user.findUnique({
                            where: {
                                id: entityId
                            },
                            select: {
                                id: true,
                                organizationId: true
                            }
                        });
                        resourceOwnership = {
                            userId: user?.id,
                            organizationId: user?.organizationId || undefined
                        };
                        break;
                    case 'CONTACT':
                        const contact = await _prisma.default.contact.findUnique({
                            where: {
                                id: entityId
                            },
                            select: {
                                organizationId: true,
                                createdById: true
                            }
                        });
                        resourceOwnership = {
                            organizationId: contact?.organizationId,
                            createdById: contact?.createdById
                        };
                        break;
                    case 'CAMPAIGN':
                        const campaign = await _prisma.default.emailCampaign.findUnique({
                            where: {
                                id: entityId
                            },
                            select: {
                                organizationId: true,
                                createdById: true
                            }
                        });
                        resourceOwnership = {
                            organizationId: campaign?.organizationId,
                            createdById: campaign?.createdById
                        };
                        break;
                    case 'TASK':
                        const task = await _prisma.default.task.findUnique({
                            where: {
                                id: entityId
                            },
                            select: {
                                organizationId: true,
                                createdById: true,
                                assigneeId: true
                            }
                        });
                        resourceOwnership = {
                            organizationId: task?.organizationId,
                            createdById: task?.createdById,
                            assignedUserId: task?.assigneeId || undefined
                        };
                        break;
                }
                return await this.validateResourceAccess(userId, userRole, organizationId, permission, resourceOwnership);
            } catch (error) {
                _logger.logger.error('Authorization resource check failed', {
                    userId,
                    entityType,
                    entityId,
                    error: error instanceof Error ? error.message : String(error)
                });
                return {
                    allowed: false,
                    reason: 'Failed to validate resource access'
                };
            }
        }
        return {
            allowed: true
        };
    }
    /**
   * Log authorization events
   */ static logAuthorizationEvent(userId, action, resource, allowed, reason) {
        _logger.logger.info('Authorization event', {
            userId,
            action,
            resource,
            allowed,
            reason,
            timestamp: new Date().toISOString()
        });
    }
}
function requirePermission(userRole, permission) {
    return AuthorizationService.hasPermission(userRole, permission);
}
function requireAnyPermission(userRole, permissions) {
    return AuthorizationService.hasAnyPermission(userRole, permissions);
}
function requireAllPermissions(userRole, permissions) {
    return AuthorizationService.hasAllPermissions(userRole, permissions);
}

//# sourceMappingURL=data:application/json;base64,