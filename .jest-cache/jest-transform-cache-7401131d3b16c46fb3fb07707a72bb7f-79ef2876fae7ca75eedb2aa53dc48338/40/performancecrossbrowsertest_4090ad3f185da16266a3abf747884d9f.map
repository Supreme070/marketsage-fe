{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/__tests__/e2e/performance-cross-browser.test.ts"],"sourcesContent":["import { test, expect, devices } from '@playwright/test';\nimport { TestUtils } from './test-utils';\n\n/**\n * Performance and Cross-Browser E2E Tests\n * Tests application performance, mobile compatibility, and cross-browser functionality\n */\n\ntest.describe('Performance & Cross-Browser Tests', () => {\n  let testUtils: TestUtils;\n\n  test.beforeEach(async ({ page }) => {\n    testUtils = new TestUtils(page);\n  });\n\n  test.describe('Performance Tests', () => {\n    test('dashboard loads within acceptable time limits', async ({ page }) => {\n      await testUtils.login();\n      \n      // Measure dashboard load time\n      const startTime = Date.now();\n      await testUtils.navigateTo('dashboard');\n      await testUtils.waitForLoadingComplete();\n      const loadTime = Date.now() - startTime;\n      \n      // Dashboard should load within 3 seconds\n      expect(loadTime).toBeLessThan(3000);\n      console.log(`Dashboard loaded in ${loadTime}ms`);\n      \n      // Check Core Web Vitals\n      const vitals = await page.evaluate(() => {\n        return new Promise((resolve) => {\n          const observer = new PerformanceObserver((list) => {\n            const entries = list.getEntries();\n            const vitals = {};\n            \n            entries.forEach((entry) => {\n              if (entry.name === 'largest-contentful-paint') {\n                vitals.lcp = entry.startTime;\n              }\n              if (entry.name === 'first-input-delay') {\n                vitals.fid = entry.duration;\n              }\n              if (entry.name === 'cumulative-layout-shift') {\n                vitals.cls = entry.value;\n              }\n            });\n            \n            resolve(vitals);\n          });\n          \n          observer.observe({ entryTypes: ['largest-contentful-paint', 'first-input', 'layout-shift'] });\n          \n          // Fallback if no entries after 5 seconds\n          setTimeout(() => resolve({}), 5000);\n        });\n      });\n      \n      // Verify acceptable Core Web Vitals\n      if (vitals.lcp) {\n        expect(vitals.lcp).toBeLessThan(2500); // LCP < 2.5s\n      }\n      if (vitals.fid) {\n        expect(vitals.fid).toBeLessThan(100); // FID < 100ms\n      }\n      if (vitals.cls) {\n        expect(vitals.cls).toBeLessThan(0.1); // CLS < 0.1\n      }\n    });\n\n    test('large dataset handling performance', async ({ page }) => {\n      await testUtils.login();\n      await testUtils.navigateTo('contacts');\n      \n      // Load large contact list\n      await page.selectOption('[data-testid=\"page-size\"]', '500');\n      \n      const startTime = Date.now();\n      await testUtils.waitForLoadingComplete();\n      const loadTime = Date.now() - startTime;\n      \n      // Large dataset should load within 5 seconds\n      expect(loadTime).toBeLessThan(5000);\n      \n      // Test scroll performance\n      const scrollStartTime = Date.now();\n      await page.evaluate(() => {\n        window.scrollTo(0, document.body.scrollHeight);\n      });\n      await page.waitForTimeout(500);\n      const scrollTime = Date.now() - scrollStartTime;\n      \n      // Scroll should be smooth (< 1 second)\n      expect(scrollTime).toBeLessThan(1000);\n      \n      // Test search performance\n      const searchStartTime = Date.now();\n      await page.fill('[data-testid=\"contact-search\"]', 'test');\n      await page.keyboard.press('Enter');\n      await testUtils.waitForLoadingComplete();\n      const searchTime = Date.now() - searchStartTime;\n      \n      // Search should be fast (< 2 seconds)\n      expect(searchTime).toBeLessThan(2000);\n    });\n\n    test('memory usage remains stable during long sessions', async ({ page }) => {\n      await testUtils.login();\n      \n      // Get initial memory usage\n      const initialMemory = await page.evaluate(() => {\n        return (performance as any).memory ? (performance as any).memory.usedJSHeapSize : 0;\n      });\n      \n      // Simulate long session with multiple page navigations\n      const sections = ['dashboard', 'campaigns', 'contacts', 'workflows', 'analytics'];\n      \n      for (let i = 0; i < 3; i++) {\n        for (const section of sections) {\n          await testUtils.navigateTo(section);\n          await testUtils.waitForLoadingComplete();\n          await page.waitForTimeout(1000);\n        }\n      }\n      \n      // Check memory usage after navigation\n      const finalMemory = await page.evaluate(() => {\n        return (performance as any).memory ? (performance as any).memory.usedJSHeapSize : 0;\n      });\n      \n      if (initialMemory > 0 && finalMemory > 0) {\n        const memoryIncrease = (finalMemory - initialMemory) / initialMemory;\n        \n        // Memory increase should be reasonable (< 200%)\n        expect(memoryIncrease).toBeLessThan(2.0);\n        console.log(`Memory usage increased by ${(memoryIncrease * 100).toFixed(1)}%`);\n      }\n    });\n\n    test('API response times are acceptable', async ({ page }) => {\n      await testUtils.login();\n      \n      // Test various API endpoints\n      const apiEndpoints = [\n        '/api/dashboard/stats',\n        '/api/contacts',\n        '/api/campaigns',\n        '/api/workflows',\n        '/api/analytics/overview'\n      ];\n      \n      for (const endpoint of apiEndpoints) {\n        const startTime = Date.now();\n        const response = await page.request.get(endpoint);\n        const responseTime = Date.now() - startTime;\n        \n        // API responses should be fast (< 1 second)\n        expect(responseTime).toBeLessThan(1000);\n        expect(response.status()).toBe(200);\n        \n        console.log(`${endpoint}: ${responseTime}ms`);\n      }\n    });\n\n    test('resource loading optimization', async ({ page }) => {\n      await testUtils.login();\n      \n      // Check for efficient resource loading\n      const resourceMetrics = await page.evaluate(() => {\n        const entries = performance.getEntriesByType('resource');\n        const metrics = {\n          totalResources: entries.length,\n          largeResources: entries.filter(entry => entry.transferSize > 1000000).length, // > 1MB\n          slowResources: entries.filter(entry => entry.duration > 2000).length, // > 2s\n          totalTransferSize: entries.reduce((sum, entry) => sum + (entry.transferSize || 0), 0)\n        };\n        return metrics;\n      });\n      \n      // Verify resource efficiency\n      expect(resourceMetrics.largeResources).toBeLessThan(5); // < 5 large resources\n      expect(resourceMetrics.slowResources).toBeLessThan(3); // < 3 slow resources\n      expect(resourceMetrics.totalTransferSize).toBeLessThan(10000000); // < 10MB total\n      \n      console.log('Resource metrics:', resourceMetrics);\n    });\n  });\n\n  test.describe('Mobile Responsiveness', () => {\n    test('mobile navigation works correctly', async ({ page }) => {\n      // Set mobile viewport\n      await page.setViewportSize({ width: 375, height: 667 });\n      await testUtils.login();\n      \n      // Test mobile navigation menu\n      await expect(page.locator('[data-testid=\"mobile-menu-toggle\"]')).toBeVisible();\n      await page.click('[data-testid=\"mobile-menu-toggle\"]');\n      \n      // Verify mobile menu opens\n      await expect(page.locator('[data-testid=\"mobile-nav-menu\"]')).toBeVisible();\n      \n      // Test navigation items\n      const navItems = ['dashboard', 'campaigns', 'contacts', 'workflows'];\n      for (const item of navItems) {\n        await page.click(`[data-testid=\"mobile-nav-${item}\"]`);\n        await testUtils.waitForLoadingComplete();\n        await expect(page.locator(`[data-testid=\"${item}-page\"]`)).toBeVisible();\n      }\n    });\n\n    test('mobile forms and inputs work correctly', async ({ page }) => {\n      await page.setViewportSize({ width: 375, height: 667 });\n      await testUtils.login();\n      \n      // Test contact creation form on mobile\n      await testUtils.navigateTo('contacts');\n      await page.click('[data-testid=\"add-contact\"]');\n      \n      // Verify form is mobile-friendly\n      await expect(page.locator('[data-testid=\"contact-form\"]')).toBeVisible();\n      \n      // Test input fields\n      await page.fill('[data-testid=\"contact-email\"]', 'mobile@test.com');\n      await page.fill('[data-testid=\"contact-name\"]', 'Mobile User');\n      \n      // Test mobile keyboard doesn't break layout\n      await page.click('[data-testid=\"contact-phone\"]');\n      await page.fill('[data-testid=\"contact-phone\"]', '+1234567890');\n      \n      // Save contact\n      await page.click('[data-testid=\"save-contact\"]');\n      await testUtils.waitForLoadingComplete();\n      \n      // Verify success on mobile\n      await expect(page.locator('text=mobile@test.com')).toBeVisible();\n    });\n\n    test('mobile dashboard widgets are responsive', async ({ page }) => {\n      await page.setViewportSize({ width: 375, height: 667 });\n      await testUtils.login();\n      \n      // Verify dashboard widgets adapt to mobile\n      await expect(page.locator('[data-testid=\"mobile-dashboard\"]')).toBeVisible();\n      \n      // Check widget stacking on mobile\n      const widgets = page.locator('[data-testid=\"dashboard-widget\"]');\n      const widgetCount = await widgets.count();\n      \n      for (let i = 0; i < widgetCount; i++) {\n        await expect(widgets.nth(i)).toBeVisible();\n        \n        // Verify widget is properly sized for mobile\n        const boundingBox = await widgets.nth(i).boundingBox();\n        expect(boundingBox.width).toBeLessThanOrEqual(375);\n      }\n    });\n\n    test('touch interactions work correctly', async ({ page }) => {\n      await page.setViewportSize({ width: 375, height: 667 });\n      await testUtils.login();\n      \n      // Test touch scrolling\n      await testUtils.navigateTo('contacts');\n      \n      // Simulate touch scroll\n      await page.touchscreen.tap(200, 300);\n      await page.evaluate(() => window.scrollTo(0, 500));\n      await page.waitForTimeout(500);\n      \n      // Test swipe gestures on mobile cards\n      const contactCard = page.locator('[data-testid=\"contact-card\"]:first-child');\n      if (await contactCard.isVisible()) {\n        const cardBox = await contactCard.boundingBox();\n        \n        // Simulate swipe left\n        await page.touchscreen.tap(cardBox.x + cardBox.width - 10, cardBox.y + cardBox.height / 2);\n        await page.touchscreen.tap(cardBox.x + 10, cardBox.y + cardBox.height / 2);\n        \n        // Verify swipe actions appear\n        await expect(page.locator('[data-testid=\"swipe-actions\"]')).toBeVisible();\n      }\n    });\n  });\n\n  test.describe('Cross-Browser Compatibility', () => {\n    ['chromium', 'firefox', 'webkit'].forEach(browserName => {\n      test(`core functionality works in ${browserName}`, async ({ page, browserName: currentBrowser }) => {\n        test.skip(currentBrowser !== browserName, `Skipping ${browserName} test`);\n        \n        await testUtils.login();\n        \n        // Test basic navigation\n        await testUtils.navigateTo('dashboard');\n        await expect(page.locator('[data-testid=\"dashboard-header\"]')).toBeVisible();\n        \n        // Test campaign creation\n        await testUtils.createTestCampaign('email', `${browserName} Test Campaign`);\n        await expect(page.locator(`text=${browserName} Test Campaign`)).toBeVisible();\n        \n        // Test contact management\n        await testUtils.createTestContact(`${browserName}@test.com`, `${browserName} User`);\n        await expect(page.locator(`text=${browserName}@test.com`)).toBeVisible();\n        \n        // Test analytics loading\n        await testUtils.navigateTo('analytics');\n        await testUtils.waitForLoadingComplete();\n        await expect(page.locator('[data-testid=\"analytics-dashboard\"]')).toBeVisible();\n      });\n    });\n\n    test('CSS and styling consistency across browsers', async ({ page }) => {\n      await testUtils.login();\n      \n      // Check key UI elements have consistent styling\n      const elements = [\n        '[data-testid=\"dashboard-header\"]',\n        '[data-testid=\"navigation\"]',\n        '[data-testid=\"main-content\"]',\n        '[data-testid=\"sidebar\"]'\n      ];\n      \n      for (const element of elements) {\n        const locator = page.locator(element);\n        await expect(locator).toBeVisible();\n        \n        // Check computed styles\n        const styles = await locator.evaluate((el) => {\n          const computed = window.getComputedStyle(el);\n          return {\n            display: computed.display,\n            position: computed.position,\n            visibility: computed.visibility,\n            opacity: computed.opacity\n          };\n        });\n        \n        // Verify element is properly rendered\n        expect(styles.display).not.toBe('none');\n        expect(styles.visibility).toBe('visible');\n        expect(parseFloat(styles.opacity)).toBeGreaterThan(0);\n      }\n    });\n\n    test('JavaScript features work across browsers', async ({ page }) => {\n      await testUtils.login();\n      \n      // Test modern JavaScript features\n      const jsFeatures = await page.evaluate(() => {\n        const features = {\n          async_await: typeof (async () => {}) === 'function',\n          arrow_functions: typeof (() => {}) === 'function',\n          promises: typeof Promise !== 'undefined',\n          fetch: typeof fetch !== 'undefined',\n          localStorage: typeof localStorage !== 'undefined',\n          sessionStorage: typeof sessionStorage !== 'undefined',\n          websockets: typeof WebSocket !== 'undefined'\n        };\n        return features;\n      });\n      \n      // Verify essential features are supported\n      expect(jsFeatures.promises).toBe(true);\n      expect(jsFeatures.fetch).toBe(true);\n      expect(jsFeatures.localStorage).toBe(true);\n      \n      // Test interactive features\n      await testUtils.navigateTo('campaigns');\n      await page.click('[data-testid=\"create-campaign\"]');\n      \n      // Verify dynamic content loading works\n      await expect(page.locator('[data-testid=\"campaign-form\"]')).toBeVisible();\n    });\n\n    test('accessibility features work across browsers', async ({ page }) => {\n      await testUtils.login();\n      \n      // Test keyboard navigation\n      await testUtils.testKeyboardNavigation();\n      \n      // Check ARIA attributes\n      const ariaElements = await page.$$('[aria-label], [aria-describedby], [role]');\n      expect(ariaElements.length).toBeGreaterThan(10);\n      \n      // Test focus management\n      await page.keyboard.press('Tab');\n      const focusedElement = await page.evaluate(() => document.activeElement?.tagName);\n      expect(focusedElement).toBeTruthy();\n      \n      // Verify screen reader compatibility\n      const landmarks = await page.$$('main, nav, aside, header, footer, [role=\"main\"], [role=\"navigation\"]');\n      expect(landmarks.length).toBeGreaterThan(0);\n    });\n  });\n\n  test.describe('Network Conditions', () => {\n    test('application works with slow network', async ({ page }) => {\n      // Simulate slow 3G connection\n      await page.route('**/*', async route => {\n        await new Promise(resolve => setTimeout(resolve, 500)); // Add 500ms delay\n        await route.continue();\n      });\n      \n      await testUtils.login();\n      \n      // Verify loading states are shown\n      await expect(page.locator('[data-testid=\"loading-spinner\"]')).toBeVisible();\n      \n      // Wait for content to load\n      await testUtils.waitForLoadingComplete();\n      \n      // Verify application still functions\n      await expect(page.locator('[data-testid=\"dashboard-header\"]')).toBeVisible();\n      \n      // Test navigation with slow network\n      await testUtils.navigateTo('campaigns');\n      await testUtils.waitForLoadingComplete();\n      await expect(page.locator('[data-testid=\"campaigns-page\"]')).toBeVisible();\n    });\n\n    test('offline functionality works', async ({ page }) => {\n      await testUtils.login();\n      \n      // Go offline\n      await page.context().setOffline(true);\n      \n      // Try to navigate\n      await page.click('[data-testid=\"nav-contacts\"]');\n      \n      // Should show offline notice\n      await expect(page.locator('[data-testid=\"offline-notice\"]')).toBeVisible();\n      \n      // Cached content should still be accessible\n      await expect(page.locator('[data-testid=\"cached-content\"]')).toBeVisible();\n      \n      // Go back online\n      await page.context().setOffline(false);\n      \n      // Should sync when back online\n      await page.reload();\n      await testUtils.waitForLoadingComplete();\n      await expect(page.locator('[data-testid=\"sync-complete\"]')).toBeVisible();\n    });\n\n    test('network error handling', async ({ page }) => {\n      await testUtils.login();\n      \n      // Simulate network errors\n      await page.route('**/api/**', route => route.abort());\n      \n      // Try to perform an action\n      await testUtils.navigateTo('campaigns');\n      await page.click('[data-testid=\"create-campaign\"]');\n      \n      // Should show error message\n      await expect(page.locator('[data-testid=\"network-error\"]')).toBeVisible();\n      \n      // Should provide retry option\n      await expect(page.locator('[data-testid=\"retry-button\"]')).toBeVisible();\n      \n      // Restore network and retry\n      await page.unroute('**/api/**');\n      await page.click('[data-testid=\"retry-button\"]');\n      \n      // Should recover gracefully\n      await testUtils.waitForLoadingComplete();\n      await expect(page.locator('[data-testid=\"campaign-form\"]')).toBeVisible();\n    });\n  });\n\n  test.describe('Security and Privacy', () => {\n    test('sensitive data is not exposed in client-side code', async ({ page }) => {\n      await testUtils.login();\n      \n      // Check for exposed secrets in localStorage/sessionStorage\n      const storageSecrets = await page.evaluate(() => {\n        const localStorage = window.localStorage;\n        const sessionStorage = window.sessionStorage;\n        \n        const sensitivePatterns = [\n          /api[_-]?key/i,\n          /secret/i,\n          /password/i,\n          /token/i,\n          /private[_-]?key/i\n        ];\n        \n        const exposedSecrets = [];\n        \n        // Check localStorage\n        for (let i = 0; i < localStorage.length; i++) {\n          const key = localStorage.key(i);\n          const value = localStorage.getItem(key);\n          \n          sensitivePatterns.forEach(pattern => {\n            if (pattern.test(key) || pattern.test(value)) {\n              exposedSecrets.push({ storage: 'localStorage', key, value });\n            }\n          });\n        }\n        \n        // Check sessionStorage\n        for (let i = 0; i < sessionStorage.length; i++) {\n          const key = sessionStorage.key(i);\n          const value = sessionStorage.getItem(key);\n          \n          sensitivePatterns.forEach(pattern => {\n            if (pattern.test(key) || pattern.test(value)) {\n              exposedSecrets.push({ storage: 'sessionStorage', key, value });\n            }\n          });\n        }\n        \n        return exposedSecrets;\n      });\n      \n      // Should not expose sensitive data\n      expect(storageSecrets).toHaveLength(0);\n    });\n\n    test('HTTPS and security headers are properly configured', async ({ page }) => {\n      await testUtils.login();\n      \n      const response = await page.request.get('/dashboard');\n      const headers = response.headers();\n      \n      // Check security headers\n      expect(headers['x-frame-options']).toBeTruthy();\n      expect(headers['x-content-type-options']).toBe('nosniff');\n      expect(headers['x-xss-protection']).toBeTruthy();\n      \n      // Check for HTTPS in production-like environment\n      const url = page.url();\n      if (url.includes('https://')) {\n        expect(headers['strict-transport-security']).toBeTruthy();\n      }\n    });\n\n    test('session management works correctly', async ({ page }) => {\n      await testUtils.login();\n      \n      // Verify session is established\n      await expect(page.locator('[data-testid=\"user-menu\"]')).toBeVisible();\n      \n      // Test session timeout (simulate)\n      await page.route('**/api/auth/session', route => \n        route.fulfill({ status: 401, body: JSON.stringify({ error: 'Unauthorized' }) })\n      );\n      \n      // Try to access protected resource\n      await page.reload();\n      \n      // Should redirect to login\n      await expect(page.locator('[data-testid=\"login-form\"]')).toBeVisible();\n    });\n  });\n});"],"names":["test","describe","testUtils","beforeEach","page","TestUtils","login","startTime","Date","now","navigateTo","waitForLoadingComplete","loadTime","expect","toBeLessThan","console","log","vitals","evaluate","Promise","resolve","observer","PerformanceObserver","list","entries","getEntries","forEach","entry","name","lcp","fid","duration","cls","value","observe","entryTypes","setTimeout","selectOption","scrollStartTime","window","scrollTo","document","body","scrollHeight","waitForTimeout","scrollTime","searchStartTime","fill","keyboard","press","searchTime","initialMemory","performance","memory","usedJSHeapSize","sections","i","section","finalMemory","memoryIncrease","toFixed","apiEndpoints","endpoint","response","request","get","responseTime","status","toBe","resourceMetrics","getEntriesByType","metrics","totalResources","length","largeResources","filter","transferSize","slowResources","totalTransferSize","reduce","sum","setViewportSize","width","height","locator","toBeVisible","click","navItems","item","widgets","widgetCount","count","nth","boundingBox","toBeLessThanOrEqual","touchscreen","tap","contactCard","isVisible","cardBox","x","y","browserName","currentBrowser","skip","createTestCampaign","createTestContact","elements","element","styles","el","computed","getComputedStyle","display","position","visibility","opacity","not","parseFloat","toBeGreaterThan","jsFeatures","features","async_await","arrow_functions","promises","fetch","localStorage","sessionStorage","websockets","WebSocket","testKeyboardNavigation","ariaElements","$$","focusedElement","activeElement","tagName","toBeTruthy","landmarks","route","continue","context","setOffline","reload","abort","unroute","storageSecrets","sensitivePatterns","exposedSecrets","key","getItem","pattern","push","storage","toHaveLength","headers","url","includes","fulfill","JSON","stringify","error"],"mappings":"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"}