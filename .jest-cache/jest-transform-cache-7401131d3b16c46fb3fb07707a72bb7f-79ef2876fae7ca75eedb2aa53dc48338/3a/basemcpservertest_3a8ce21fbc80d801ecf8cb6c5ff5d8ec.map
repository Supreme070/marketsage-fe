{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/__tests__/mcp/base-mcp-server.test.ts"],"sourcesContent":["/**\n * Base MCP Server Unit Tests\n * \n * Comprehensive tests for the base MCP server functionality including:\n * - Authentication and authorization with real NextAuth JWT validation\n * - Input validation using Zod schemas\n * - Redis rate limiting functionality\n * - Database queries and data transformations\n * - Error handling and edge cases\n * - Audit logging functionality\n * - Role-based permissions\n * - MCP protocol compliance\n * - Performance testing\n * - Security scenarios\n */\n\nimport { BaseMCPServer } from '../../mcp/servers/base-mcp-server';\nimport { MCPServerConfig } from '../../mcp/config/mcp-config';\nimport { MCPAuthContext, MCPAuthenticationError, MCPAuthorizationError, MCPRateLimitError, MCPValidationError } from '../../mcp/types/mcp-types';\nimport { \n  mockPrismaClient, \n  mockRedisClient, \n  mockAuditLogger,\n  testDataFactory,\n  mockRateLimitScenarios,\n  mockAuthScenarios,\n  mockDatabaseScenarios,\n  resetAllMocks,\n  setupDefaultMocks\n} from './__mocks__/mcp-mocks';\nimport jwt from 'jsonwebtoken';\n\n// Mock the external dependencies\njest.mock('../../lib/db/prisma', () => ({\n  prisma: mockPrismaClient\n}));\n\njest.mock('../../lib/cache/redis-client', () => ({\n  redisCache: mockRedisClient,\n  CACHE_KEYS: {\n    API_RATE_LIMIT: (key: string) => `rate_limit:${key}`\n  },\n  CACHE_TTL: {\n    RATE_LIMIT: 3600\n  }\n}));\n\njest.mock('../../lib/audit/enterprise-audit-logger', () => ({\n  enterpriseAuditLogger: mockAuditLogger\n}));\n\n// Test implementation of BaseMCPServer for testing abstract methods\nclass TestMCPServer extends BaseMCPServer {\n  public testMethods = {\n    authenticate: (request: any) => this['authenticate'](request),\n    checkRateLimit: (userId: string) => this['checkRateLimit'](userId),\n    hasPermission: (authContext: MCPAuthContext, permission: string, resourceOrgId?: string) => \n      this.hasPermission(authContext, permission, resourceOrgId),\n    validateOrganizationAccess: (authContext: MCPAuthContext, targetOrgId: string) =>\n      this.validateOrganizationAccess(authContext, targetOrgId),\n    filterDataByPermissions: <T extends { organizationId?: string; createdById?: string }>(\n      data: T[], authContext: MCPAuthContext, permission: string\n    ) => this.filterDataByPermissions(data, authContext, permission),\n    validateInput: <T>(schema: any, data: unknown, context?: string) => \n      this.validateInput(schema, data, context),\n    validateQuery: <T>(schema: any, params: any, authContext: MCPAuthContext) =>\n      this.validateQuery(schema, params, authContext),\n    validateResourceUri: (uri: string, authContext: MCPAuthContext) =>\n      this.validateResourceUri(uri, authContext),\n    validateToolCall: (name: string, args: any, authContext: MCPAuthContext) =>\n      this.validateToolCall(name, args, authContext),\n    sanitizeOutput: <T>(data: T, authContext: MCPAuthContext, sensitiveFields?: string[]) =>\n      this.sanitizeOutput(data, authContext, sensitiveFields),\n    validateDateRange: (dateFrom?: string, dateTo?: string) =>\n      this.validateDateRange(dateFrom, dateTo),\n    getRateLimitStatus: (userId: string) => this.getRateLimitStatus(userId),\n    logMCPAuthEvent: (outcome: 'success' | 'failure', userId?: string, sessionToken?: string, errorMessage?: string) =>\n      this.logMCPAuthEvent(outcome, userId, sessionToken, errorMessage),\n    logMCPResourceAccess: (authContext: MCPAuthContext, resourceUri: string, action: 'LIST' | 'READ' | 'WRITE', outcome: 'success' | 'failure' | 'partial', details?: any) =>\n      this.logMCPResourceAccess(authContext, resourceUri, action, outcome, details),\n    logMCPToolExecution: (authContext: MCPAuthContext, toolName: string, args: any, outcome: 'success' | 'failure' | 'partial', details?: any) =>\n      this.logMCPToolExecution(authContext, toolName, args, outcome, details),\n    createFallbackResponse: <T>(fallbackFunction: () => Promise<T>, errorMessage: string) =>\n      this.createFallbackResponse(fallbackFunction, errorMessage)\n  };\n\n  // Implement abstract methods for testing\n  protected async listResources(authContext: MCPAuthContext): Promise<any[]> {\n    return [\n      { uri: 'test://resource/1', name: 'Test Resource 1' },\n      { uri: 'test://resource/2', name: 'Test Resource 2' }\n    ];\n  }\n\n  protected async readResource(uri: string, authContext: MCPAuthContext): Promise<any> {\n    return { uri, content: 'Test resource content', organizationId: authContext.organizationId };\n  }\n\n  protected async listTools(authContext: MCPAuthContext): Promise<any[]> {\n    return [\n      { name: 'test_tool', description: 'A test tool' },\n      { name: 'admin_tool', description: 'An admin-only tool' }\n    ];\n  }\n\n  protected async callTool(name: string, args: any, authContext: MCPAuthContext): Promise<any> {\n    return { \n      result: `Tool ${name} executed successfully`, \n      args, \n      executedBy: authContext.userId \n    };\n  }\n}\n\ndescribe('Base MCP Server', () => {\n  let server: TestMCPServer;\n  let config: MCPServerConfig;\n\n  beforeAll(() => {\n    // Set up test environment\n    process.env.NEXTAUTH_SECRET = 'test-secret-for-jwt-validation';\n  });\n\n  beforeEach(() => {\n    // Reset all mocks before each test\n    resetAllMocks();\n    setupDefaultMocks();\n\n    // Create test server configuration\n    config = {\n      name: 'test-mcp-server',\n      version: '1.0.0',\n      port: 3001,\n      enabled: true,\n      authentication: {\n        required: true,\n        methods: ['jwt']\n      },\n      rateLimit: {\n        enabled: true,\n        maxRequests: 10,\n        windowMs: 60000 // 1 minute\n      },\n      fallback: {\n        enabled: true,\n        timeout: 5000\n      },\n      validation: {\n        strict: true,\n        sanitizeOutput: true\n      }\n    };\n\n    server = new TestMCPServer(config);\n  });\n\n  afterEach(() => {\n    resetAllMocks();\n  });\n\n  describe('Authentication', () => {\n    it('should successfully authenticate with valid JWT token', async () => {\n      // Arrange\n      const userId = 'test-user-123';\n      const organizationId = 'test-org-456';\n      const token = testUtils.generateTestToken(userId, organizationId);\n      const request = testUtils.createMockRequest(token);\n      \n      const user = testDataFactory.createUser({ \n        id: userId, \n        organizationId,\n        role: 'USER',\n        isActive: true \n      });\n      mockPrismaClient.user.findUnique.mockResolvedValue(user);\n      mockPrismaClient.user.update.mockResolvedValue(user);\n\n      // Act\n      const result = await server.testMethods.authenticate(request);\n\n      // Assert\n      expect(result.success).toBe(true);\n      expect(result.context).toBeDefined();\n      expect(result.context!.userId).toBe(userId);\n      expect(result.context!.organizationId).toBe(organizationId);\n      expect(result.context!.role).toBe('USER');\n      expect(result.context!.permissions).toContain('read:own:contacts');\n      \n      // Verify database calls\n      expect(mockPrismaClient.user.findUnique).toHaveBeenCalledWith({\n        where: { id: userId },\n        include: {\n          organization: {\n            select: { id: true, name: true }\n          }\n        }\n      });\n      \n      // Verify last login update\n      expect(mockPrismaClient.user.update).toHaveBeenCalledWith({\n        where: { id: userId },\n        data: { lastLogin: expect.any(Date) }\n      });\n\n      // Verify audit logging\n      expect(mockAuditLogger.logEvent).toHaveBeenCalledWith(\n        expect.objectContaining({\n          eventType: 'AUTHENTICATION',\n          action: 'LOGIN',\n          outcome: 'success'\n        })\n      );\n    });\n\n    it('should reject authentication with invalid JWT token', async () => {\n      // Arrange\n      const invalidToken = 'invalid.jwt.token';\n      const request = testUtils.createMockRequest(invalidToken);\n\n      // Act\n      const result = await server.testMethods.authenticate(request);\n\n      // Assert\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('Authentication failed');\n      \n      // Verify security audit logging\n      expect(mockAuditLogger.logSecurityEvent).toHaveBeenCalledWith(\n        'FAILED_LOGIN',\n        expect.any(String),\n        expect.objectContaining({\n          riskLevel: 'medium',\n          description: expect.stringContaining('MCP authentication failed')\n        })\n      );\n    });\n\n    it('should reject authentication for inactive user', async () => {\n      // Arrange\n      const userId = 'inactive-user';\n      const token = testUtils.generateTestToken(userId);\n      const request = testUtils.createMockRequest(token);\n      \n      const inactiveUser = testDataFactory.createUser({ \n        id: userId, \n        isActive: false \n      });\n      mockPrismaClient.user.findUnique.mockResolvedValue(inactiveUser);\n\n      // Act\n      const result = await server.testMethods.authenticate(request);\n\n      // Assert\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('Authentication failed');\n    });\n\n    it('should reject authentication when NEXTAUTH_SECRET is missing', async () => {\n      // Arrange\n      const originalSecret = process.env.NEXTAUTH_SECRET;\n      delete process.env.NEXTAUTH_SECRET;\n      \n      const token = 'some.jwt.token';\n      const request = testUtils.createMockRequest(token);\n\n      // Act\n      const result = await server.testMethods.authenticate(request);\n\n      // Assert\n      expect(result.success).toBe(false);\n      \n      // Restore environment\n      process.env.NEXTAUTH_SECRET = originalSecret;\n    });\n\n    it('should handle database errors during authentication gracefully', async () => {\n      // Arrange\n      const token = testUtils.generateTestToken();\n      const request = testUtils.createMockRequest(token);\n      \n      mockPrismaClient.user.findUnique.mockRejectedValue(new Error('Database connection failed'));\n\n      // Act\n      const result = await server.testMethods.authenticate(request);\n\n      // Assert\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('Authentication failed');\n    });\n\n    it('should skip authentication when not required', async () => {\n      // Arrange\n      const configNoAuth = { ...config, authentication: { required: false, methods: [] } };\n      const serverNoAuth = new TestMCPServer(configNoAuth);\n      const request = testUtils.createMockRequest();\n\n      // Act\n      const result = await serverNoAuth.testMethods.authenticate(request);\n\n      // Assert\n      expect(result.success).toBe(true);\n      expect(result.context).toBeUndefined();\n    });\n  });\n\n  describe('Authorization and Permissions', () => {\n    it('should grant permissions correctly for different roles', () => {\n      // Test USER role permissions\n      const userContext = testUtils.createMockAuthContext({ \n        role: 'USER',\n        permissions: ['read:own:contacts', 'write:own:contacts']\n      });\n      \n      expect(server.testMethods.hasPermission(userContext, 'read:own:contacts')).toBe(true);\n      expect(server.testMethods.hasPermission(userContext, 'write:own:contacts')).toBe(true);\n      expect(server.testMethods.hasPermission(userContext, 'admin:org:users')).toBe(false);\n\n      // Test ADMIN role permissions\n      const adminContext = testUtils.createMockAuthContext({ \n        role: 'ADMIN',\n        permissions: ['read:own:contacts', 'write:own:contacts', 'admin:org:users']\n      });\n      \n      expect(server.testMethods.hasPermission(adminContext, 'admin:org:users')).toBe(true);\n      expect(server.testMethods.hasPermission(adminContext, 'read:org:contacts')).toBe(true);\n\n      // Test SUPER_ADMIN role permissions\n      const superAdminContext = testUtils.createMockAuthContext({ \n        role: 'SUPER_ADMIN',\n        permissions: ['*']\n      });\n      \n      expect(server.testMethods.hasPermission(superAdminContext, 'admin:org:users')).toBe(true);\n      expect(server.testMethods.hasPermission(superAdminContext, 'any:permission')).toBe(true);\n    });\n\n    it('should validate organization access correctly', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext({\n        userId: 'user-123',\n        organizationId: 'org-456',\n        role: 'USER'\n      });\n\n      // Mock successful organization validation\n      mockPrismaClient.user.findFirst.mockResolvedValue({ id: 'user-123' });\n\n      // Act & Assert - Same organization access\n      const sameOrgAccess = await server.testMethods.validateOrganizationAccess(authContext, 'org-456');\n      expect(sameOrgAccess).toBe(true);\n\n      // Act & Assert - Different organization access (should fail for non-super-admin)\n      const diffOrgAccess = await server.testMethods.validateOrganizationAccess(authContext, 'org-789');\n      expect(diffOrgAccess).toBe(false);\n\n      // Act & Assert - SUPER_ADMIN can access any organization\n      const superAdminContext = { ...authContext, role: 'SUPER_ADMIN' };\n      const superAdminAccess = await server.testMethods.validateOrganizationAccess(superAdminContext, 'org-789');\n      expect(superAdminAccess).toBe(true);\n    });\n\n    it('should filter data based on permissions correctly', () => {\n      // Arrange\n      const testData = [\n        { id: '1', organizationId: 'org-456', createdById: 'user-123', name: 'Item 1' },\n        { id: '2', organizationId: 'org-456', createdById: 'user-456', name: 'Item 2' },\n        { id: '3', organizationId: 'org-789', createdById: 'user-123', name: 'Item 3' }\n      ];\n\n      const userContext = testUtils.createMockAuthContext({\n        userId: 'user-123',\n        organizationId: 'org-456',\n        role: 'USER'\n      });\n\n      // Act - Filter for own data only\n      const ownData = server.testMethods.filterDataByPermissions(testData, userContext, 'read:own:data');\n      \n      // Assert\n      expect(ownData).toHaveLength(1);\n      expect(ownData[0].id).toBe('1');\n\n      // Act - Super admin sees all data\n      const superAdminContext = { ...userContext, permissions: ['*'] };\n      const allData = server.testMethods.filterDataByPermissions(testData, superAdminContext, 'read:org:data');\n      \n      // Assert\n      expect(allData).toHaveLength(3);\n    });\n  });\n\n  describe('Input Validation', () => {\n    it('should validate input using Zod schemas', () => {\n      // Arrange\n      const schema = require('zod').z.object({\n        name: require('zod').z.string().min(1),\n        age: require('zod').z.number().min(0).max(120)\n      });\n\n      const validData = { name: 'John Doe', age: 30 };\n      const invalidData = { name: '', age: -5 };\n\n      // Act & Assert - Valid data\n      const result = server.testMethods.validateInput(schema, validData, 'user data');\n      expect(result).toEqual(validData);\n\n      // Act & Assert - Invalid data\n      expect(() => {\n        server.testMethods.validateInput(schema, invalidData, 'user data');\n      }).toThrow(MCPValidationError);\n    });\n\n    it('should validate and sanitize query parameters', () => {\n      // Arrange\n      const schema = require('zod').z.object({\n        organizationId: require('zod').z.string().uuid().optional(),\n        limit: require('zod').z.number().min(1).max(100).default(10)\n      });\n\n      const authContext = testUtils.createMockAuthContext({\n        organizationId: 'org-456',\n        role: 'USER'\n      });\n\n      const params = { limit: 25 };\n\n      // Act\n      const result = server.testMethods.validateQuery(schema, params, authContext);\n\n      // Assert\n      expect(result.limit).toBe(25);\n      expect(result.organizationId).toBe('org-456'); // Auto-applied from context\n    });\n\n    it('should validate resource URIs with security checks', () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext({\n        role: 'USER',\n        permissions: ['read:own:contacts']\n      });\n\n      // Act & Assert - Valid URI\n      const validUri = 'https://api.marketsage.com/contacts/123';\n      const result = server.testMethods.validateResourceUri(validUri, authContext);\n      expect(result).toBe(validUri);\n\n      // Act & Assert - Sensitive URI without admin permission\n      const sensitiveUri = 'https://api.marketsage.com/admin/users';\n      expect(() => {\n        server.testMethods.validateResourceUri(sensitiveUri, authContext);\n      }).toThrow(MCPAuthorizationError);\n    });\n\n    it('should validate tool calls with permission checks', () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext({\n        role: 'USER',\n        permissions: ['read:own:basic']\n      });\n\n      // Act & Assert - Tool without required permissions\n      expect(() => {\n        server.testMethods.validateToolCall('delete_contact', {}, authContext);\n      }).toThrow(MCPAuthorizationError);\n\n      // Act & Assert - Tool with proper permissions\n      const adminContext = { ...authContext, permissions: ['write:org:contacts'] };\n      const result = server.testMethods.validateToolCall('delete_contact', { id: '123' }, adminContext);\n      expect(result.name).toBe('delete_contact');\n      expect(result.args).toEqual({ id: '123' });\n    });\n\n    it('should validate date ranges with business rules', () => {\n      // Arrange & Act & Assert - Valid date range\n      const validRange = server.testMethods.validateDateRange(\n        '2024-01-01T00:00:00.000Z',\n        '2024-01-31T23:59:59.999Z'\n      );\n      expect(validRange.dateFrom).toBeInstanceOf(Date);\n      expect(validRange.dateTo).toBeInstanceOf(Date);\n\n      // Act & Assert - Invalid date format\n      expect(() => {\n        server.testMethods.validateDateRange('invalid-date', '2024-01-31T23:59:59.999Z');\n      }).toThrow(MCPValidationError);\n\n      // Act & Assert - Date range too large (> 1 year)\n      expect(() => {\n        server.testMethods.validateDateRange(\n          '2023-01-01T00:00:00.000Z',\n          '2025-01-01T00:00:00.000Z'\n        );\n      }).toThrow(MCPValidationError);\n\n      // Act & Assert - dateFrom after dateTo\n      expect(() => {\n        server.testMethods.validateDateRange(\n          '2024-02-01T00:00:00.000Z',\n          '2024-01-01T00:00:00.000Z'\n        );\n      }).toThrow(MCPValidationError);\n    });\n  });\n\n  describe('Rate Limiting', () => {\n    it('should allow requests within rate limit', async () => {\n      // Arrange\n      mockRateLimitScenarios.withinLimit();\n      const userId = 'test-user-123';\n\n      // Act - Should not throw\n      await server.testMethods.checkRateLimit(userId);\n\n      // Assert\n      expect(mockRedisClient.increment).toHaveBeenCalledWith(\n        'rate_limit:test-user-123:test-mcp-server',\n        1\n      );\n      expect(mockRedisClient.expire).toHaveBeenCalledWith(\n        'rate_limit:test-user-123:test-mcp-server',\n        60 // 60 seconds for 60000ms window\n      );\n    });\n\n    it('should block requests that exceed rate limit', async () => {\n      // Arrange\n      mockRateLimitScenarios.exceedsLimit();\n      const userId = 'test-user-123';\n      const authContext = testUtils.createMockAuthContext({ userId });\n      mockPrismaClient.user.findUnique.mockResolvedValue(testDataFactory.createUser({ id: userId }));\n\n      // Act & Assert\n      await expect(server.testMethods.checkRateLimit(userId)).rejects.toThrow(MCPRateLimitError);\n\n      // Verify audit logging\n      expect(mockAuditLogger.logSecurityEvent).toHaveBeenCalledWith(\n        'SUSPICIOUS_ACTIVITY',\n        userId,\n        expect.objectContaining({\n          riskLevel: 'medium',\n          description: expect.stringContaining('rate limit exceeded')\n        })\n      );\n    });\n\n    it('should warn when approaching rate limit', async () => {\n      // Arrange\n      mockRateLimitScenarios.approachingLimit();\n      const userId = 'test-user-123';\n      const authContext = testUtils.createMockAuthContext({ userId });\n      mockPrismaClient.user.findUnique.mockResolvedValue(testDataFactory.createUser({ id: userId }));\n\n      // Spy on console.warn\n      const consoleSpy = jest.spyOn(console, 'warn').mockImplementation();\n\n      // Act\n      await server.testMethods.checkRateLimit(userId);\n\n      // Assert\n      expect(consoleSpy).toHaveBeenCalledWith(\n        expect.stringContaining('Rate limit warning')\n      );\n\n      // Verify audit logging\n      expect(mockAuditLogger.logEvent).toHaveBeenCalledWith(\n        expect.objectContaining({\n          eventType: 'SYSTEM_ADMIN',\n          details: expect.objectContaining({\n            metadata: expect.objectContaining({\n              event: 'rate_limit_warning'\n            })\n          })\n        })\n      );\n\n      consoleSpy.mockRestore();\n    });\n\n    it('should handle Redis unavailability gracefully', async () => {\n      // Arrange\n      mockRateLimitScenarios.redisUnavailable();\n      const userId = 'test-user-123';\n\n      const consoleSpy = jest.spyOn(console, 'warn').mockImplementation();\n\n      // Act - Should not throw even when Redis is unavailable\n      await server.testMethods.checkRateLimit(userId);\n\n      // Assert\n      expect(consoleSpy).toHaveBeenCalledWith(\n        expect.stringContaining('Redis unavailable for rate limiting')\n      );\n\n      consoleSpy.mockRestore();\n    });\n\n    it('should get rate limit status for monitoring', async () => {\n      // Arrange\n      const userId = 'test-user-123';\n      mockRedisClient.get.mockResolvedValue('5');\n      mockRedisClient.client.exists.mockResolvedValue(true);\n      mockRedisClient.client.ttl.mockResolvedValue(1800);\n\n      // Act\n      const status = await server.testMethods.getRateLimitStatus(userId);\n\n      // Assert\n      expect(status).toEqual({\n        current: 5,\n        limit: 10,\n        windowSeconds: 60,\n        remainingTime: 1800,\n        percentageUsed: 50\n      });\n    });\n  });\n\n  describe('Data Sanitization', () => {\n    it('should sanitize sensitive fields from output', () => {\n      // Arrange\n      const sensitiveData = {\n        id: 'user-123',\n        name: 'John Doe',\n        email: 'john@example.com',\n        password: 'secret123',\n        apiKey: 'api-key-secret',\n        nested: {\n          token: 'secret-token',\n          publicInfo: 'visible'\n        }\n      };\n\n      const userContext = testUtils.createMockAuthContext({ role: 'USER' });\n\n      // Act\n      const sanitized = server.testMethods.sanitizeOutput(sensitiveData, userContext);\n\n      // Assert\n      expect(sanitized.password).toBeUndefined();\n      expect(sanitized.apiKey).toBeUndefined();\n      expect(sanitized.nested.token).toBeUndefined();\n      expect(sanitized.nested.publicInfo).toBe('visible');\n      expect(sanitized.name).toBe('John Doe');\n    });\n\n    it('should preserve sensitive fields for SUPER_ADMIN', () => {\n      // Arrange\n      const sensitiveData = {\n        id: 'user-123',\n        name: 'John Doe',\n        password: 'secret123',\n        apiKey: 'api-key-secret'\n      };\n\n      const superAdminContext = testUtils.createMockAuthContext({ role: 'SUPER_ADMIN' });\n\n      // Act\n      const result = server.testMethods.sanitizeOutput(sensitiveData, superAdminContext);\n\n      // Assert\n      expect(result.password).toBe('secret123');\n      expect(result.apiKey).toBe('api-key-secret');\n    });\n  });\n\n  describe('Audit Logging', () => {\n    it('should log successful authentication events', async () => {\n      // Arrange\n      const userId = 'test-user-123';\n      \n      // Act\n      await server.testMethods.logMCPAuthEvent('success', userId, 'session-token');\n\n      // Assert\n      expect(mockAuditLogger.logEvent).toHaveBeenCalledWith(\n        expect.objectContaining({\n          eventType: 'AUTHENTICATION',\n          action: 'LOGIN',\n          outcome: 'success',\n          actor: expect.objectContaining({\n            id: userId\n          })\n        })\n      );\n    });\n\n    it('should log failed authentication events as security events', async () => {\n      // Arrange\n      const sessionToken = 'invalid-token';\n      const errorMessage = 'Invalid JWT token';\n\n      // Act\n      await server.testMethods.logMCPAuthEvent('failure', undefined, sessionToken, errorMessage);\n\n      // Assert\n      expect(mockAuditLogger.logSecurityEvent).toHaveBeenCalledWith(\n        'FAILED_LOGIN',\n        expect.any(String),\n        expect.objectContaining({\n          riskLevel: 'medium',\n          description: expect.stringContaining(errorMessage)\n        })\n      );\n    });\n\n    it('should log resource access events', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const resourceUri = 'https://api.marketsage.com/contacts/123';\n\n      // Act\n      await server.testMethods.logMCPResourceAccess(\n        authContext,\n        resourceUri,\n        'READ',\n        'success',\n        { duration: 150, dataSize: 1024 }\n      );\n\n      // Assert\n      expect(mockAuditLogger.logEvent).toHaveBeenCalledWith(\n        expect.objectContaining({\n          eventType: 'DATA_ACCESS',\n          action: 'read',\n          outcome: 'success',\n          details: expect.objectContaining({\n            duration: 150,\n            metadata: expect.objectContaining({\n              dataSize: 1024,\n              resourceUri\n            })\n          })\n        })\n      );\n    });\n\n    it('should log tool execution events', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const toolName = 'create_campaign';\n      const args = { name: 'Test Campaign', type: 'EMAIL' };\n\n      // Act\n      await server.testMethods.logMCPToolExecution(\n        authContext,\n        toolName,\n        args,\n        'success',\n        { duration: 500, outputSize: 2048 }\n      );\n\n      // Assert\n      expect(mockAuditLogger.logEvent).toHaveBeenCalledWith(\n        expect.objectContaining({\n          eventType: 'API_ACCESS',\n          action: 'CREATE',\n          outcome: 'success',\n          details: expect.objectContaining({\n            duration: 500,\n            metadata: expect.objectContaining({\n              toolName,\n              outputSize: 2048\n            })\n          })\n        })\n      );\n    });\n  });\n\n  describe('Fallback Mechanisms', () => {\n    it('should create successful fallback response when enabled', async () => {\n      // Arrange\n      const fallbackFunction = async () => ({ data: 'fallback data' });\n      const errorMessage = 'Primary service failed';\n\n      // Act\n      const result = await server.testMethods.createFallbackResponse(fallbackFunction, errorMessage);\n\n      // Assert\n      expect(result.success).toBe(true);\n      expect(result.data).toEqual({ data: 'fallback data' });\n      expect(result.meta?.fallbackUsed).toBe(true);\n    });\n\n    it('should return error when fallback is disabled', async () => {\n      // Arrange\n      const configNoFallback = { ...config, fallback: { enabled: false, timeout: 5000 } };\n      const serverNoFallback = new TestMCPServer(configNoFallback);\n      const fallbackFunction = async () => ({ data: 'fallback data' });\n      const errorMessage = 'Primary service failed';\n\n      // Act\n      const result = await serverNoFallback.testMethods.createFallbackResponse(fallbackFunction, errorMessage);\n\n      // Assert\n      expect(result.success).toBe(false);\n      expect(result.error?.code).toBe('FALLBACK_DISABLED');\n      expect(result.error?.message).toBe(errorMessage);\n    });\n\n    it('should handle fallback function failures', async () => {\n      // Arrange\n      const fallbackFunction = async () => {\n        throw new Error('Fallback also failed');\n      };\n      const errorMessage = 'Primary service failed';\n\n      // Act\n      const result = await server.testMethods.createFallbackResponse(fallbackFunction, errorMessage);\n\n      // Assert\n      expect(result.success).toBe(false);\n      expect(result.error?.code).toBe('FALLBACK_FAILED');\n      expect(result.error?.message).toContain('Fallback failed');\n    });\n  });\n\n  describe('Performance Testing', () => {\n    it('should handle authentication performance within acceptable limits', async () => {\n      // Arrange\n      const token = testUtils.generateTestToken();\n      const request = testUtils.createMockRequest(token);\n      \n      const user = testDataFactory.createUser();\n      mockPrismaClient.user.findUnique.mockImplementation(() => \n        mockDatabaseScenarios.fastQuery(user)\n      );\n      mockPrismaClient.user.update.mockImplementation(() => \n        mockDatabaseScenarios.fastQuery(user)\n      );\n\n      // Act\n      const startTime = performance.now();\n      const result = await server.testMethods.authenticate(request);\n      const endTime = performance.now();\n      const duration = endTime - startTime;\n\n      // Assert\n      expect(result.success).toBe(true);\n      expect(duration).toBeLessThan(100); // Should complete in under 100ms\n    });\n\n    it('should timeout on slow database queries', async () => {\n      // Arrange\n      const token = testUtils.generateTestToken();\n      const request = testUtils.createMockRequest(token);\n      \n      mockPrismaClient.user.findUnique.mockImplementation(() => \n        mockDatabaseScenarios.timeoutQuery()\n      );\n\n      // Act & Assert\n      const startTime = performance.now();\n      const result = await server.testMethods.authenticate(request);\n      const endTime = performance.now();\n      \n      // Should fail quickly rather than hanging\n      expect(endTime - startTime).toBeLessThan(6000);\n      expect(result.success).toBe(false);\n    });\n\n    it('should handle large datasets efficiently in permission filtering', () => {\n      // Arrange\n      const largeDataset = mockDatabaseScenarios.largeDataset();\n      const authContext = testUtils.createMockAuthContext();\n\n      // Act\n      const startTime = performance.now();\n      const filtered = server.testMethods.filterDataByPermissions(\n        largeDataset, \n        authContext, \n        'read:own:contacts'\n      );\n      const endTime = performance.now();\n      const duration = endTime - startTime;\n\n      // Assert\n      expect(duration).toBeLessThan(50); // Should complete in under 50ms\n      expect(Array.isArray(filtered)).toBe(true);\n    });\n\n    it('should handle rate limiting checks efficiently', async () => {\n      // Arrange\n      mockRateLimitScenarios.withinLimit();\n      const userId = 'test-user-123';\n\n      // Act\n      const startTime = performance.now();\n      await server.testMethods.checkRateLimit(userId);\n      const endTime = performance.now();\n      const duration = endTime - startTime;\n\n      // Assert\n      expect(duration).toBeLessThan(50); // Should complete in under 50ms\n    });\n  });\n\n  describe('Security Scenarios', () => {\n    it('should prevent SQL injection in user lookups', async () => {\n      // Arrange\n      const maliciousUserId = \"'; DROP TABLE users; --\";\n      const token = testUtils.generateTestToken(maliciousUserId);\n      const request = testUtils.createMockRequest(token);\n\n      // The JWT validation should fail before reaching the database\n      // Act\n      const result = await server.testMethods.authenticate(request);\n\n      // Assert\n      expect(result.success).toBe(false);\n      // Verify no dangerous database calls were made\n      expect(mockPrismaClient.user.findUnique).not.toHaveBeenCalledWith(\n        expect.objectContaining({\n          where: { id: maliciousUserId }\n        })\n      );\n    });\n\n    it('should prevent privilege escalation through context manipulation', () => {\n      // Arrange\n      const userContext = testUtils.createMockAuthContext({ \n        role: 'USER',\n        permissions: ['read:own:contacts']\n      });\n\n      // Attempt to access admin resources\n      const hasAdminAccess = server.testMethods.hasPermission(userContext, 'admin:org:users');\n      const hasDeleteAccess = server.testMethods.hasPermission(userContext, 'write:org:contacts');\n\n      // Assert\n      expect(hasAdminAccess).toBe(false);\n      expect(hasDeleteAccess).toBe(false);\n    });\n\n    it('should prevent access to other organizations data', () => {\n      // Arrange\n      const userContext = testUtils.createMockAuthContext({\n        organizationId: 'org-456',\n        role: 'ADMIN' // Even admin shouldn't access other orgs\n      });\n\n      const otherOrgData = [\n        { id: '1', organizationId: 'org-789', createdById: 'user-123' },\n        { id: '2', organizationId: 'org-456', createdById: 'user-123' },\n        { id: '3', organizationId: 'org-789', createdById: 'user-456' }\n      ];\n\n      // Act\n      const filtered = server.testMethods.filterDataByPermissions(\n        otherOrgData, \n        userContext, \n        'read:org:contacts'\n      );\n\n      // Assert - Should only see own organization's data\n      expect(filtered).toHaveLength(1);\n      expect(filtered[0].organizationId).toBe('org-456');\n    });\n\n    it('should sanitize error messages to prevent information disclosure', () => {\n      // Arrange\n      const schema = require('zod').z.object({\n        secretField: require('zod').z.string().min(10)\n      });\n\n      const sensitiveData = { secretField: 'short' };\n\n      // Act & Assert\n      expect(() => {\n        server.testMethods.validateInput(schema, sensitiveData);\n      }).toThrow(MCPValidationError);\n\n      // The error should not expose the actual field values\n      try {\n        server.testMethods.validateInput(schema, sensitiveData);\n      } catch (error) {\n        expect(error.message).not.toContain('short');\n        expect(error.message).toContain('secretField');\n      }\n    });\n\n    it('should rate limit by user and server combination', async () => {\n      // Arrange\n      const userId = 'test-user-123';\n      const expectedKey = 'rate_limit:test-user-123:test-mcp-server';\n      \n      mockRateLimitScenarios.withinLimit();\n\n      // Act\n      await server.testMethods.checkRateLimit(userId);\n\n      // Assert\n      expect(mockRedisClient.increment).toHaveBeenCalledWith(expectedKey, 1);\n      \n      // Different server should have different rate limit\n      const anotherConfig = { ...config, name: 'another-mcp-server' };\n      const anotherServer = new TestMCPServer(anotherConfig);\n      \n      await anotherServer.testMethods.checkRateLimit(userId);\n      \n      expect(mockRedisClient.increment).toHaveBeenCalledWith(\n        'rate_limit:test-user-123:another-mcp-server', 1\n      );\n    });\n\n    it('should log security events for suspicious patterns', async () => {\n      // Multiple failed authentication attempts\n      for (let i = 0; i < 3; i++) {\n        await server.testMethods.logMCPAuthEvent('failure', undefined, 'invalid-token', 'Invalid token');\n      }\n\n      // Assert security events were logged\n      expect(mockAuditLogger.logSecurityEvent).toHaveBeenCalledTimes(3);\n      expect(mockAuditLogger.logSecurityEvent).toHaveBeenCalledWith(\n        'FAILED_LOGIN',\n        expect.any(String),\n        expect.objectContaining({\n          riskLevel: 'medium'\n        })\n      );\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle different MCP error types correctly', () => {\n      // Test each error type conversion\n      const authError = new MCPAuthenticationError('Auth failed');\n      const authzError = new MCPAuthorizationError('Access denied');\n      const rateLimitError = new MCPRateLimitError('Rate limit exceeded');\n      const validationError = new MCPValidationError('Invalid input');\n      const genericError = new Error('Unknown error');\n\n      // These would be tested through the private handleError method\n      // by triggering errors in the public methods\n    });\n\n    it('should provide helpful error messages for validation failures', () => {\n      // Arrange\n      const schema = require('zod').z.object({\n        email: require('zod').z.string().email(),\n        age: require('zod').z.number().min(0).max(120)\n      });\n\n      const invalidData = { email: 'not-an-email', age: -5 };\n\n      // Act & Assert\n      try {\n        server.testMethods.validateInput(schema, invalidData, 'user registration');\n      } catch (error) {\n        expect(error).toBeInstanceOf(MCPValidationError);\n        expect(error.message).toContain('user registration');\n        expect(error.message).toContain('email');\n        expect(error.message).toContain('age');\n      }\n    });\n  });\n});\n\n/**\n * Integration Tests for Base MCP Server\n * \n * These tests verify the server works correctly with real dependencies\n */\ndescribe('Base MCP Server - Integration Tests', () => {\n  let server: TestMCPServer;\n  let config: MCPServerConfig;\n\n  beforeEach(() => {\n    resetAllMocks();\n    setupDefaultMocks();\n\n    config = {\n      name: 'integration-test-server',\n      version: '1.0.0',\n      port: 3002,\n      enabled: true,\n      authentication: { required: true, methods: ['jwt'] },\n      rateLimit: { enabled: true, maxRequests: 5, windowMs: 60000 },\n      fallback: { enabled: true, timeout: 5000 },\n      validation: { strict: true, sanitizeOutput: true }\n    };\n\n    server = new TestMCPServer(config);\n  });\n\n  it('should handle complete request lifecycle with authentication and authorization', async () => {\n    // Arrange - Create valid user and token\n    const userId = 'integration-user-123';\n    const organizationId = 'integration-org-456';\n    const token = testUtils.generateTestToken(userId, organizationId);\n    \n    const user = testDataFactory.createUser({ \n      id: userId, \n      organizationId,\n      role: 'USER',\n      isActive: true \n    });\n    \n    mockPrismaClient.user.findUnique.mockResolvedValue(user);\n    mockPrismaClient.user.update.mockResolvedValue(user);\n    mockRateLimitScenarios.withinLimit();\n\n    // Act - Simulate MCP resource access\n    const request = testUtils.createMockRequest(token);\n    const authResult = await server.testMethods.authenticate(request);\n    \n    if (authResult.success) {\n      await server.testMethods.checkRateLimit(authResult.context!.userId);\n      \n      // Simulate resource access\n      await server.testMethods.logMCPResourceAccess(\n        authResult.context!,\n        'https://api.marketsage.com/contacts',\n        'LIST',\n        'success',\n        { duration: 120, dataSize: 1024 }\n      );\n    }\n\n    // Assert - All steps completed successfully\n    expect(authResult.success).toBe(true);\n    expect(mockPrismaClient.user.findUnique).toHaveBeenCalled();\n    expect(mockRedisClient.increment).toHaveBeenCalled();\n    expect(mockAuditLogger.logEvent).toHaveBeenCalledTimes(2); // Auth + resource access\n  });\n\n  it('should handle cascading failures gracefully', async () => {\n    // Arrange - Setup multiple failure scenarios\n    const token = testUtils.generateTestToken();\n    const request = testUtils.createMockRequest(token);\n    \n    // Database is down\n    mockPrismaClient.user.findUnique.mockRejectedValue(new Error('Database unavailable'));\n    \n    // Redis is also down\n    mockRedisClient.increment.mockResolvedValue(null);\n\n    // Act\n    const authResult = await server.testMethods.authenticate(request);\n\n    // Assert - Should fail authentication but not crash\n    expect(authResult.success).toBe(false);\n    expect(authResult.error).toContain('Authentication failed');\n    \n    // If we proceed with rate limiting anyway, it should handle Redis being down\n    if (!authResult.success) {\n      // This shouldn't throw even with Redis down\n      await expect(server.testMethods.checkRateLimit('test-user')).resolves.not.toThrow();\n    }\n  });\n});"],"names":["jest","mock","prisma","mockPrismaClient","redisCache","mockRedisClient","CACHE_KEYS","API_RATE_LIMIT","key","CACHE_TTL","RATE_LIMIT","enterpriseAuditLogger","mockAuditLogger","TestMCPServer","BaseMCPServer","listResources","authContext","uri","name","readResource","content","organizationId","listTools","description","callTool","args","result","executedBy","userId","testMethods","authenticate","request","checkRateLimit","hasPermission","permission","resourceOrgId","validateOrganizationAccess","targetOrgId","filterDataByPermissions","data","validateInput","schema","context","validateQuery","params","validateResourceUri","validateToolCall","sanitizeOutput","sensitiveFields","validateDateRange","dateFrom","dateTo","getRateLimitStatus","logMCPAuthEvent","outcome","sessionToken","errorMessage","logMCPResourceAccess","resourceUri","action","details","logMCPToolExecution","toolName","createFallbackResponse","fallbackFunction","describe","server","config","beforeAll","process","env","NEXTAUTH_SECRET","beforeEach","resetAllMocks","setupDefaultMocks","version","port","enabled","authentication","required","methods","rateLimit","maxRequests","windowMs","fallback","timeout","validation","strict","afterEach","it","token","testUtils","generateTestToken","createMockRequest","user","testDataFactory","createUser","id","role","isActive","findUnique","mockResolvedValue","update","expect","success","toBe","toBeDefined","permissions","toContain","toHaveBeenCalledWith","where","include","organization","select","lastLogin","any","Date","logEvent","objectContaining","eventType","invalidToken","error","logSecurityEvent","String","riskLevel","stringContaining","inactiveUser","originalSecret","mockRejectedValue","Error","configNoAuth","serverNoAuth","toBeUndefined","userContext","createMockAuthContext","adminContext","superAdminContext","findFirst","sameOrgAccess","diffOrgAccess","superAdminAccess","testData","createdById","ownData","toHaveLength","allData","require","z","object","string","min","age","number","max","validData","invalidData","toEqual","toThrow","MCPValidationError","uuid","optional","limit","default","validUri","sensitiveUri","MCPAuthorizationError","validRange","toBeInstanceOf","mockRateLimitScenarios","withinLimit","increment","expire","exceedsLimit","rejects","MCPRateLimitError","approachingLimit","consoleSpy","spyOn","console","mockImplementation","metadata","event","mockRestore","redisUnavailable","get","client","exists","ttl","status","current","windowSeconds","remainingTime","percentageUsed","sensitiveData","email","password","apiKey","nested","publicInfo","sanitized","actor","undefined","duration","dataSize","type","outputSize","meta","fallbackUsed","configNoFallback","serverNoFallback","code","message","mockDatabaseScenarios","fastQuery","startTime","performance","now","endTime","toBeLessThan","timeoutQuery","largeDataset","filtered","Array","isArray","maliciousUserId","not","hasAdminAccess","hasDeleteAccess","otherOrgData","secretField","expectedKey","anotherConfig","anotherServer","i","toHaveBeenCalledTimes","authError","MCPAuthenticationError","authzError","rateLimitError","validationError","genericError","authResult","toHaveBeenCalled","resolves"],"mappings":"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"}