{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/lib/messaging/provider-optimization-engine.ts"],"sourcesContent":["/**\n * Provider Optimization Engine\n * \n * Automatically selects the best messaging provider based on:\n * - Cost efficiency \n * - Deliverability rates\n * - Performance metrics\n * - Regional optimization\n * - Rate limiting\n * - Historical success rates\n */\n\nimport prisma from '@/lib/db/prisma';\nimport { MasterAccountManager, masterAccountsConfig, type MasterAccountConfig } from '@/lib/config/master-accounts';\nimport { logger } from '@/lib/logger';\n\nexport interface ProviderMetrics {\n  provider: string;\n  channel: 'sms' | 'email' | 'whatsapp';\n  deliveryRate: number;\n  averageDeliveryTime: number; // in seconds\n  errorRate: number;\n  costPerMessage: number;\n  rateLimit: {\n    perMinute: number;\n    perHour: number;\n    perDay: number;\n  };\n  region: string;\n  lastUpdated: Date;\n  totalMessagesSent: number;\n  totalSuccessful: number;\n  totalFailed: number;\n}\n\nexport interface OptimizationRequest {\n  channel: 'sms' | 'email' | 'whatsapp';\n  messageCount: number;\n  region: string;\n  priority: 'cost' | 'speed' | 'reliability' | 'balanced';\n  targetCountries?: string[];\n  scheduledTime?: Date;\n  organizationId: string;\n}\n\nexport interface OptimizationResult {\n  recommendedProvider: string;\n  fallbackProviders: string[];\n  estimatedCost: number;\n  estimatedDeliveryTime: number;\n  expectedDeliveryRate: number;\n  reasoning: string;\n  metrics: {\n    costScore: number;\n    deliveryScore: number;\n    reliabilityScore: number;\n    overallScore: number;\n  };\n  warnings?: string[];\n}\n\nexport class ProviderOptimizationEngine {\n  private static instance: ProviderOptimizationEngine;\n  private metricsCache: Map<string, ProviderMetrics> = new Map();\n  private cacheExpiry: number = 5 * 60 * 1000; // 5 minutes\n\n  static getInstance(): ProviderOptimizationEngine {\n    if (!ProviderOptimizationEngine.instance) {\n      ProviderOptimizationEngine.instance = new ProviderOptimizationEngine();\n    }\n    return ProviderOptimizationEngine.instance;\n  }\n\n  /**\n   * Get the optimal provider for a messaging request\n   */\n  async optimizeProvider(request: OptimizationRequest): Promise<OptimizationResult> {\n    try {\n      // Get current metrics for all providers\n      const providerMetrics = await this.getProviderMetrics(request.channel, request.region);\n      \n      if (providerMetrics.length === 0) {\n        throw new Error(`No active providers found for ${request.channel} in ${request.region}`);\n      }\n\n      // Filter providers based on capacity\n      const availableProviders = await this.filterByCapacity(providerMetrics, request);\n      \n      if (availableProviders.length === 0) {\n        throw new Error(`No providers have sufficient capacity for ${request.messageCount} messages`);\n      }\n\n      // Score providers based on optimization criteria\n      const scoredProviders = await this.scoreProviders(availableProviders, request);\n      \n      // Sort by overall score (descending)\n      scoredProviders.sort((a, b) => b.overallScore - a.overallScore);\n      \n      const best = scoredProviders[0];\n      const fallbacks = scoredProviders.slice(1, 3).map(p => p.provider);\n\n      return {\n        recommendedProvider: best.provider,\n        fallbackProviders: fallbacks,\n        estimatedCost: this.calculateCost(best, request.messageCount),\n        estimatedDeliveryTime: best.averageDeliveryTime,\n        expectedDeliveryRate: best.deliveryRate,\n        reasoning: this.generateReasoning(best, request),\n        metrics: {\n          costScore: this.calculateCostScore(best, scoredProviders),\n          deliveryScore: this.calculateDeliveryScore(best, scoredProviders),\n          reliabilityScore: this.calculateReliabilityScore(best, scoredProviders),\n          overallScore: best.overallScore\n        },\n        warnings: this.generateWarnings(best, request)\n      };\n\n    } catch (error) {\n      logger.error('Provider optimization failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get performance metrics for all providers\n   */\n  private async getProviderMetrics(channel: 'sms' | 'email' | 'whatsapp', region: string): Promise<ProviderMetrics[]> {\n    const cacheKey = `${channel}-${region}`;\n    \n    // Check cache first\n    if (this.metricsCache.has(cacheKey)) {\n      const cached = this.metricsCache.get(cacheKey)!;\n      if (Date.now() - cached.lastUpdated.getTime() < this.cacheExpiry) {\n        return [cached];\n      }\n    }\n\n    try {\n      // Get metrics from database\n      const dbMetrics = await prisma.providerMetrics.findMany({\n        where: {\n          channel,\n          region: {\n            in: [region, 'global']\n          }\n        },\n        orderBy: {\n          lastUpdated: 'desc'\n        }\n      });\n\n      // Convert to our format and merge with master account config\n      const metrics: ProviderMetrics[] = [];\n      \n      for (const metric of dbMetrics) {\n        const masterAccount = this.getMasterAccountConfig(channel, metric.provider);\n        if (masterAccount?.isActive) {\n          metrics.push({\n            provider: metric.provider,\n            channel: metric.channel as 'sms' | 'email' | 'whatsapp',\n            deliveryRate: metric.deliveryRate,\n            averageDeliveryTime: metric.averageDeliveryTime,\n            errorRate: metric.errorRate,\n            costPerMessage: masterAccount.costPerMessage?.[channel] || 0,\n            rateLimit: masterAccount.rateLimit || { perMinute: 60, perHour: 3600, perDay: 86400 },\n            region: metric.region,\n            lastUpdated: metric.lastUpdated,\n            totalMessagesSent: metric.totalMessagesSent,\n            totalSuccessful: metric.totalSuccessful,\n            totalFailed: metric.totalFailed\n          });\n        }\n      }\n\n      // If no DB metrics, create baseline from master accounts\n      if (metrics.length === 0) {\n        metrics.push(...this.getBaselineMetrics(channel, region));\n      }\n\n      // Cache results\n      metrics.forEach(metric => {\n        this.metricsCache.set(`${metric.channel}-${metric.region}`, metric);\n      });\n\n      return metrics;\n\n    } catch (error) {\n      logger.error('Failed to get provider metrics:', error);\n      // Return baseline metrics on error\n      return this.getBaselineMetrics(channel, region);\n    }\n  }\n\n  /**\n   * Filter providers by capacity\n   */\n  private async filterByCapacity(metrics: ProviderMetrics[], request: OptimizationRequest): Promise<ProviderMetrics[]> {\n    const available: ProviderMetrics[] = [];\n    \n    for (const metric of metrics) {\n      // Check daily capacity\n      if (metric.rateLimit.perDay >= request.messageCount) {\n        // Check current usage (simplified - in production would check Redis)\n        const currentUsage = await this.getCurrentUsage(metric.provider, metric.channel);\n        const remainingCapacity = metric.rateLimit.perDay - currentUsage;\n        \n        if (remainingCapacity >= request.messageCount) {\n          available.push(metric);\n        }\n      }\n    }\n    \n    return available;\n  }\n\n  /**\n   * Score providers based on optimization criteria\n   */\n  private async scoreProviders(\n    metrics: ProviderMetrics[], \n    request: OptimizationRequest\n  ): Promise<(ProviderMetrics & { overallScore: number })[]> {\n    const scored = [];\n    \n    for (const metric of metrics) {\n      const costScore = this.calculateCostScore(metric, metrics);\n      const deliveryScore = this.calculateDeliveryScore(metric, metrics);\n      const reliabilityScore = this.calculateReliabilityScore(metric, metrics);\n      const regionalScore = this.calculateRegionalScore(metric, request.region);\n      \n      // Weight scores based on priority\n      let overallScore = 0;\n      switch (request.priority) {\n        case 'cost':\n          overallScore = costScore * 0.5 + deliveryScore * 0.2 + reliabilityScore * 0.2 + regionalScore * 0.1;\n          break;\n        case 'speed':\n          overallScore = deliveryScore * 0.5 + reliabilityScore * 0.3 + regionalScore * 0.15 + costScore * 0.05;\n          break;\n        case 'reliability':\n          overallScore = reliabilityScore * 0.5 + deliveryScore * 0.3 + regionalScore * 0.15 + costScore * 0.05;\n          break;\n        case 'balanced':\n        default:\n          overallScore = costScore * 0.25 + deliveryScore * 0.25 + reliabilityScore * 0.25 + regionalScore * 0.25;\n      }\n      \n      scored.push({\n        ...metric,\n        overallScore\n      });\n    }\n    \n    return scored;\n  }\n\n  /**\n   * Calculate cost efficiency score (0-100)\n   */\n  private calculateCostScore(metric: ProviderMetrics, allMetrics: ProviderMetrics[]): number {\n    const costs = allMetrics.map(m => m.costPerMessage);\n    const minCost = Math.min(...costs);\n    const maxCost = Math.max(...costs);\n    \n    if (minCost === maxCost) return 100;\n    \n    // Invert score so lower cost = higher score\n    return 100 - ((metric.costPerMessage - minCost) / (maxCost - minCost)) * 100;\n  }\n\n  /**\n   * Calculate delivery speed score (0-100)\n   */\n  private calculateDeliveryScore(metric: ProviderMetrics, allMetrics: ProviderMetrics[]): number {\n    const deliveryTimes = allMetrics.map(m => m.averageDeliveryTime);\n    const minTime = Math.min(...deliveryTimes);\n    const maxTime = Math.max(...deliveryTimes);\n    \n    if (minTime === maxTime) return 100;\n    \n    // Invert score so faster delivery = higher score\n    return 100 - ((metric.averageDeliveryTime - minTime) / (maxTime - minTime)) * 100;\n  }\n\n  /**\n   * Calculate reliability score (0-100)\n   */\n  private calculateReliabilityScore(metric: ProviderMetrics, allMetrics: ProviderMetrics[]): number {\n    const deliveryRates = allMetrics.map(m => m.deliveryRate);\n    const minRate = Math.min(...deliveryRates);\n    const maxRate = Math.max(...deliveryRates);\n    \n    if (minRate === maxRate) return 100;\n    \n    return ((metric.deliveryRate - minRate) / (maxRate - minRate)) * 100;\n  }\n\n  /**\n   * Calculate regional optimization score (0-100)\n   */\n  private calculateRegionalScore(metric: ProviderMetrics, targetRegion: string): number {\n    // Perfect match\n    if (metric.region === targetRegion) return 100;\n    \n    // Regional compatibility\n    const regionCompatibility = {\n      'africa': ['nigeria', 'kenya', 'ghana', 'south-africa'],\n      'nigeria': ['africa'],\n      'kenya': ['africa'],\n      'ghana': ['africa'],\n      'south-africa': ['africa'],\n      'us': ['global'],\n      'europe': ['global'],\n      'global': ['us', 'europe', 'africa']\n    };\n    \n    const compatible = regionCompatibility[metric.region as keyof typeof regionCompatibility] || [];\n    if (compatible.includes(targetRegion)) return 75;\n    \n    // Global fallback\n    if (metric.region === 'global') return 50;\n    \n    return 25;\n  }\n\n  /**\n   * Generate reasoning for provider selection\n   */\n  private generateReasoning(metric: ProviderMetrics, request: OptimizationRequest): string {\n    const reasons = [];\n    \n    // Cost analysis\n    if (metric.costPerMessage < 0.05) {\n      reasons.push('highly cost-effective');\n    } else if (metric.costPerMessage < 0.1) {\n      reasons.push('cost-effective');\n    }\n    \n    // Delivery performance\n    if (metric.deliveryRate > 0.98) {\n      reasons.push('excellent delivery rate');\n    } else if (metric.deliveryRate > 0.95) {\n      reasons.push('good delivery rate');\n    }\n    \n    // Regional optimization\n    if (metric.region === request.region) {\n      reasons.push('optimized for your region');\n    }\n    \n    // Capacity\n    if (metric.rateLimit.perDay > request.messageCount * 10) {\n      reasons.push('excellent capacity');\n    }\n    \n    return `Selected for ${reasons.join(', ')}`;\n  }\n\n  /**\n   * Generate warnings for provider selection\n   */\n  private generateWarnings(metric: ProviderMetrics, request: OptimizationRequest): string[] {\n    const warnings = [];\n    \n    // Cost warnings\n    if (metric.costPerMessage > 0.15) {\n      warnings.push('Higher than average cost per message');\n    }\n    \n    // Delivery warnings\n    if (metric.deliveryRate < 0.95) {\n      warnings.push('Below average delivery rate');\n    }\n    \n    // Capacity warnings\n    if (metric.rateLimit.perDay < request.messageCount * 2) {\n      warnings.push('Limited capacity - consider splitting campaign');\n    }\n    \n    // Regional warnings\n    if (metric.region !== request.region && metric.region !== 'global') {\n      warnings.push('Provider not optimized for your region');\n    }\n    \n    return warnings;\n  }\n\n  /**\n   * Get baseline metrics for providers with no historical data\n   */\n  private getBaselineMetrics(channel: 'sms' | 'email' | 'whatsapp', region: string): ProviderMetrics[] {\n    const baselineMetrics: ProviderMetrics[] = [];\n    const channelAccounts = masterAccountsConfig[channel];\n    \n    for (const [providerName, config] of Object.entries(channelAccounts)) {\n      if (config.isActive) {\n        baselineMetrics.push({\n          provider: providerName,\n          channel,\n          deliveryRate: this.getBaselineDeliveryRate(providerName, channel),\n          averageDeliveryTime: this.getBaselineDeliveryTime(providerName, channel),\n          errorRate: 0.02, // 2% baseline error rate\n          costPerMessage: config.costPerMessage?.[channel] || 0,\n          rateLimit: config.rateLimit || { perMinute: 60, perHour: 3600, perDay: 86400 },\n          region: config.region || 'global',\n          lastUpdated: new Date(),\n          totalMessagesSent: 0,\n          totalSuccessful: 0,\n          totalFailed: 0\n        });\n      }\n    }\n    \n    return baselineMetrics;\n  }\n\n  /**\n   * Get baseline delivery rate for provider\n   */\n  private getBaselineDeliveryRate(provider: string, channel: 'sms' | 'email' | 'whatsapp'): number {\n    const rates = {\n      'twilio': { sms: 0.98, email: 0.95, whatsapp: 0.97 },\n      'africas-talking': { sms: 0.96, email: 0.93, whatsapp: 0.95 },\n      'termii': { sms: 0.95, email: 0.92, whatsapp: 0.94 },\n      'sendgrid': { sms: 0.90, email: 0.97, whatsapp: 0.90 },\n      'mailgun': { sms: 0.90, email: 0.96, whatsapp: 0.90 },\n      'postmark': { sms: 0.90, email: 0.98, whatsapp: 0.90 }\n    };\n    \n    return rates[provider as keyof typeof rates]?.[channel] || 0.95;\n  }\n\n  /**\n   * Get baseline delivery time for provider\n   */\n  private getBaselineDeliveryTime(provider: string, channel: 'sms' | 'email' | 'whatsapp'): number {\n    const times = {\n      'twilio': { sms: 5, email: 30, whatsapp: 10 },\n      'africas-talking': { sms: 8, email: 45, whatsapp: 15 },\n      'termii': { sms: 10, email: 60, whatsapp: 20 },\n      'sendgrid': { sms: 60, email: 15, whatsapp: 60 },\n      'mailgun': { sms: 60, email: 20, whatsapp: 60 },\n      'postmark': { sms: 60, email: 10, whatsapp: 60 }\n    };\n    \n    return times[provider as keyof typeof times]?.[channel] || 30;\n  }\n\n  /**\n   * Get master account configuration for provider\n   */\n  private getMasterAccountConfig(channel: 'sms' | 'email' | 'whatsapp', provider: string): MasterAccountConfig | null {\n    const channelAccounts = masterAccountsConfig[channel];\n    return channelAccounts[provider as keyof typeof channelAccounts] || null;\n  }\n\n  /**\n   * Calculate cost for message count\n   */\n  private calculateCost(metric: ProviderMetrics, messageCount: number): number {\n    return metric.costPerMessage * messageCount;\n  }\n\n  /**\n   * Get current usage for provider (simplified)\n   */\n  private async getCurrentUsage(provider: string, channel: string): Promise<number> {\n    try {\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      \n      const usage = await prisma.messagingUsage.aggregate({\n        where: {\n          provider,\n          channel,\n          timestamp: {\n            gte: today\n          }\n        },\n        _sum: {\n          messageCount: true\n        }\n      });\n      \n      return usage._sum.messageCount || 0;\n    } catch (error) {\n      logger.error('Failed to get current usage:', error);\n      return 0;\n    }\n  }\n\n  /**\n   * Update provider metrics after message sending\n   */\n  async updateProviderMetrics(\n    provider: string,\n    channel: 'sms' | 'email' | 'whatsapp',\n    region: string,\n    messageCount: number,\n    successCount: number,\n    failCount: number,\n    averageDeliveryTime: number\n  ): Promise<void> {\n    try {\n      const deliveryRate = successCount / messageCount;\n      const errorRate = failCount / messageCount;\n      \n      await prisma.providerMetrics.upsert({\n        where: {\n          provider_channel_region: {\n            provider,\n            channel,\n            region\n          }\n        },\n        create: {\n          provider,\n          channel,\n          region,\n          deliveryRate,\n          averageDeliveryTime,\n          errorRate,\n          totalMessagesSent: messageCount,\n          totalSuccessful: successCount,\n          totalFailed: failCount,\n          lastUpdated: new Date()\n        },\n        update: {\n          deliveryRate: (deliveryRate * 0.3) + (deliveryRate * 0.7), // Weighted average\n          averageDeliveryTime: (averageDeliveryTime * 0.3) + (averageDeliveryTime * 0.7),\n          errorRate: (errorRate * 0.3) + (errorRate * 0.7),\n          totalMessagesSent: {\n            increment: messageCount\n          },\n          totalSuccessful: {\n            increment: successCount\n          },\n          totalFailed: {\n            increment: failCount\n          },\n          lastUpdated: new Date()\n        }\n      });\n      \n      // Clear cache for this provider\n      this.metricsCache.delete(`${channel}-${region}`);\n      \n    } catch (error) {\n      logger.error('Failed to update provider metrics:', error);\n    }\n  }\n\n  /**\n   * Get optimization recommendations for an organization\n   */\n  async getOptimizationRecommendations(organizationId: string): Promise<{\n    recommendations: Array<{\n      channel: string;\n      currentProvider: string;\n      recommendedProvider: string;\n      potentialSavings: number;\n      improvementArea: string;\n    }>;\n    totalPotentialSavings: number;\n  }> {\n    try {\n      // Get organization's recent usage\n      const recentUsage = await prisma.messagingUsage.findMany({\n        where: {\n          organizationId,\n          timestamp: {\n            gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) // Last 30 days\n          }\n        },\n        orderBy: {\n          timestamp: 'desc'\n        }\n      });\n\n      const recommendations = [];\n      let totalPotentialSavings = 0;\n\n      // Group by channel\n      const channelUsage = recentUsage.reduce((acc, usage) => {\n        if (!acc[usage.channel]) {\n          acc[usage.channel] = [];\n        }\n        acc[usage.channel].push(usage);\n        return acc;\n      }, {} as Record<string, any[]>);\n\n      // Get org config for region\n      const orgConfig = await prisma.organization.findUnique({\n        where: { id: organizationId },\n        select: { region: true }\n      });\n\n      for (const [channel, usageData] of Object.entries(channelUsage)) {\n        const totalMessages = usageData.reduce((sum, u) => sum + u.messageCount, 0);\n        const totalCost = usageData.reduce((sum, u) => sum + u.credits, 0);\n        const currentProvider = usageData[0]?.provider;\n\n        if (totalMessages > 0) {\n          // Get optimization for this channel\n          const optimization = await this.optimizeProvider({\n            channel: channel as 'sms' | 'email' | 'whatsapp',\n            messageCount: totalMessages,\n            region: orgConfig?.region || 'global',\n            priority: 'cost',\n            organizationId\n          });\n\n          if (optimization.recommendedProvider !== currentProvider) {\n            const potentialSavings = totalCost - optimization.estimatedCost;\n            \n            if (potentialSavings > 0) {\n              recommendations.push({\n                channel,\n                currentProvider,\n                recommendedProvider: optimization.recommendedProvider,\n                potentialSavings,\n                improvementArea: potentialSavings > totalCost * 0.2 ? 'cost' : 'reliability'\n              });\n              \n              totalPotentialSavings += potentialSavings;\n            }\n          }\n        }\n      }\n\n      return {\n        recommendations,\n        totalPotentialSavings\n      };\n\n    } catch (error) {\n      logger.error('Failed to get optimization recommendations:', error);\n      return {\n        recommendations: [],\n        totalPotentialSavings: 0\n      };\n    }\n  }\n}\n\nexport const providerOptimizationEngine = ProviderOptimizationEngine.getInstance();"],"names":["ProviderOptimizationEngine","providerOptimizationEngine","getInstance","instance","optimizeProvider","request","providerMetrics","getProviderMetrics","channel","region","length","Error","availableProviders","filterByCapacity","messageCount","scoredProviders","scoreProviders","sort","a","b","overallScore","best","fallbacks","slice","map","p","provider","recommendedProvider","fallbackProviders","estimatedCost","calculateCost","estimatedDeliveryTime","averageDeliveryTime","expectedDeliveryRate","deliveryRate","reasoning","generateReasoning","metrics","costScore","calculateCostScore","deliveryScore","calculateDeliveryScore","reliabilityScore","calculateReliabilityScore","warnings","generateWarnings","error","logger","cacheKey","metricsCache","has","cached","get","Date","now","lastUpdated","getTime","cacheExpiry","dbMetrics","prisma","findMany","where","in","orderBy","metric","masterAccount","getMasterAccountConfig","isActive","push","errorRate","costPerMessage","rateLimit","perMinute","perHour","perDay","totalMessagesSent","totalSuccessful","totalFailed","getBaselineMetrics","forEach","set","available","currentUsage","getCurrentUsage","remainingCapacity","scored","regionalScore","calculateRegionalScore","priority","allMetrics","costs","m","minCost","Math","min","maxCost","max","deliveryTimes","minTime","maxTime","deliveryRates","minRate","maxRate","targetRegion","regionCompatibility","compatible","includes","reasons","join","baselineMetrics","channelAccounts","masterAccountsConfig","providerName","config","Object","entries","getBaselineDeliveryRate","getBaselineDeliveryTime","rates","sms","email","whatsapp","times","today","setHours","usage","messagingUsage","aggregate","timestamp","gte","_sum","updateProviderMetrics","successCount","failCount","upsert","provider_channel_region","create","update","increment","delete","getOptimizationRecommendations","organizationId","recentUsage","recommendations","totalPotentialSavings","channelUsage","reduce","acc","orgConfig","organization","findUnique","id","select","usageData","totalMessages","sum","u","totalCost","credits","currentProvider","optimization","potentialSavings","improvementArea","Map"],"mappings":"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"}