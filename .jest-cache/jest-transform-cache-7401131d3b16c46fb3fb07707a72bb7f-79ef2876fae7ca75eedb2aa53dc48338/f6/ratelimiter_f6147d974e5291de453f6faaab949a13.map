{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/lib/security/rate-limiter.ts"],"sourcesContent":["/**\n * Advanced Rate Limiting System\n * ============================\n * Prevents abuse and protects against DDoS attacks\n */\n\nimport { logger } from '@/lib/logger';\n\nexport interface RateLimitConfig {\n  windowMs: number;\n  maxRequests: number;\n  keyGenerator?: (identifier: string, endpoint: string) => string;\n  skipIf?: (identifier: string, endpoint: string) => boolean;\n  onLimitReached?: (identifier: string, endpoint: string) => void;\n}\n\nexport interface RateLimitResult {\n  allowed: boolean;\n  limit: number;\n  remaining: number;\n  resetTime: number;\n  retryAfter?: number;\n}\n\nexport interface RateLimitEntry {\n  count: number;\n  resetTime: number;\n  firstRequest: number;\n  lastRequest: number;\n  blocked: boolean;\n  violations: number;\n}\n\nexport class RateLimiter {\n  private storage = new Map<string, RateLimitEntry>();\n  private config: RateLimitConfig;\n  private cleanupInterval: NodeJS.Timeout;\n\n  constructor(config: RateLimitConfig) {\n    this.config = config;\n    \n    // Clean up expired entries every minute\n    this.cleanupInterval = setInterval(() => {\n      this.cleanup();\n    }, 60000);\n  }\n\n  /**\n   * Check if request is allowed\n   */\n  check(identifier: string, endpoint: string): RateLimitResult {\n    const now = Date.now();\n    const key = this.config.keyGenerator \n      ? this.config.keyGenerator(identifier, endpoint)\n      : `${identifier}:${endpoint}`;\n\n    // Check if this request should be skipped\n    if (this.config.skipIf && this.config.skipIf(identifier, endpoint)) {\n      return {\n        allowed: true,\n        limit: this.config.maxRequests,\n        remaining: this.config.maxRequests,\n        resetTime: now + this.config.windowMs\n      };\n    }\n\n    let entry = this.storage.get(key);\n    \n    // Create new entry if doesn't exist\n    if (!entry) {\n      entry = {\n        count: 0,\n        resetTime: now + this.config.windowMs,\n        firstRequest: now,\n        lastRequest: now,\n        blocked: false,\n        violations: 0\n      };\n      this.storage.set(key, entry);\n    }\n\n    // Reset if window has passed\n    if (now > entry.resetTime) {\n      entry.count = 0;\n      entry.resetTime = now + this.config.windowMs;\n      entry.blocked = false;\n      entry.firstRequest = now;\n    }\n\n    // Update last request time\n    entry.lastRequest = now;\n\n    // Check if limit exceeded\n    if (entry.count >= this.config.maxRequests) {\n      entry.blocked = true;\n      entry.violations++;\n\n      // Call limit reached callback\n      if (this.config.onLimitReached) {\n        this.config.onLimitReached(identifier, endpoint);\n      }\n\n      logger.warn('Rate limit exceeded', {\n        identifier,\n        endpoint,\n        count: entry.count,\n        limit: this.config.maxRequests,\n        violations: entry.violations,\n        windowMs: this.config.windowMs\n      });\n\n      return {\n        allowed: false,\n        limit: this.config.maxRequests,\n        remaining: 0,\n        resetTime: entry.resetTime,\n        retryAfter: Math.ceil((entry.resetTime - now) / 1000)\n      };\n    }\n\n    // Increment counter\n    entry.count++;\n\n    return {\n      allowed: true,\n      limit: this.config.maxRequests,\n      remaining: Math.max(0, this.config.maxRequests - entry.count),\n      resetTime: entry.resetTime\n    };\n  }\n\n  /**\n   * Record a failed attempt (for progressive penalties)\n   */\n  recordFailedAttempt(identifier: string, endpoint: string): void {\n    const key = this.config.keyGenerator \n      ? this.config.keyGenerator(identifier, endpoint)\n      : `${identifier}:${endpoint}`;\n\n    const entry = this.storage.get(key);\n    if (entry) {\n      entry.violations++;\n      \n      // Apply progressive penalty\n      if (entry.violations > 5) {\n        // Extend the reset time for repeated violations\n        entry.resetTime = Date.now() + (this.config.windowMs * Math.min(entry.violations, 10));\n      }\n    }\n  }\n\n  /**\n   * Record a successful attempt (clears violations)\n   */\n  recordSuccessfulAttempt(identifier: string, endpoint: string): void {\n    const key = this.config.keyGenerator \n      ? this.config.keyGenerator(identifier, endpoint)\n      : `${identifier}:${endpoint}`;\n\n    const entry = this.storage.get(key);\n    if (entry) {\n      entry.violations = Math.max(0, entry.violations - 1);\n      entry.blocked = false;\n    }\n  }\n\n  /**\n   * Get current status for identifier\n   */\n  getStatus(identifier: string, endpoint: string): RateLimitEntry | null {\n    const key = this.config.keyGenerator \n      ? this.config.keyGenerator(identifier, endpoint)\n      : `${identifier}:${endpoint}`;\n\n    return this.storage.get(key) || null;\n  }\n\n  /**\n   * Clear rate limit for identifier\n   */\n  clear(identifier: string, endpoint: string): void {\n    const key = this.config.keyGenerator \n      ? this.config.keyGenerator(identifier, endpoint)\n      : `${identifier}:${endpoint}`;\n\n    this.storage.delete(key);\n  }\n\n  /**\n   * Clean up expired entries\n   */\n  cleanup(): void {\n    const now = Date.now();\n    let cleanedCount = 0;\n\n    for (const [key, entry] of this.storage) {\n      // Remove entries that are expired and have no violations\n      if (now > entry.resetTime && entry.violations === 0) {\n        this.storage.delete(key);\n        cleanedCount++;\n      }\n    }\n\n    if (cleanedCount > 0) {\n      logger.info('Rate limiter cleanup completed', {\n        entriesRemoved: cleanedCount,\n        remainingEntries: this.storage.size\n      });\n    }\n  }\n\n  /**\n   * Get statistics\n   */\n  getStats(): {\n    totalEntries: number;\n    blockedEntries: number;\n    topViolators: Array<{ key: string; violations: number; count: number }>;\n  } {\n    const stats = {\n      totalEntries: this.storage.size,\n      blockedEntries: 0,\n      topViolators: [] as Array<{ key: string; violations: number; count: number }>\n    };\n\n    const violators: Array<{ key: string; violations: number; count: number }> = [];\n\n    for (const [key, entry] of this.storage) {\n      if (entry.blocked) {\n        stats.blockedEntries++;\n      }\n      \n      if (entry.violations > 0) {\n        violators.push({\n          key,\n          violations: entry.violations,\n          count: entry.count\n        });\n      }\n    }\n\n    stats.topViolators = violators\n      .sort((a, b) => b.violations - a.violations)\n      .slice(0, 10);\n\n    return stats;\n  }\n\n  /**\n   * Destroy rate limiter\n   */\n  destroy(): void {\n    if (this.cleanupInterval) {\n      clearInterval(this.cleanupInterval);\n    }\n    this.storage.clear();\n  }\n}\n\n// Predefined rate limiters for different use cases\nexport const rateLimiters = {\n  // Authentication attempts\n  auth: new RateLimiter({\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    maxRequests: 10, // 10 attempts per 15 minutes\n    onLimitReached: (identifier) => {\n      logger.warn('Authentication rate limit exceeded', { identifier });\n    }\n  }),\n\n  // API requests\n  api: new RateLimiter({\n    windowMs: 60 * 1000, // 1 minute\n    maxRequests: 100, // 100 requests per minute\n    onLimitReached: (identifier, endpoint) => {\n      logger.warn('API rate limit exceeded', { identifier, endpoint });\n    }\n  }),\n\n  // AI operations\n  ai: new RateLimiter({\n    windowMs: 5 * 60 * 1000, // 5 minutes\n    maxRequests: 50, // 50 AI operations per 5 minutes\n    onLimitReached: (identifier) => {\n      logger.warn('AI rate limit exceeded', { identifier });\n    }\n  }),\n\n  // Email sending\n  email: new RateLimiter({\n    windowMs: 60 * 60 * 1000, // 1 hour\n    maxRequests: 1000, // 1000 emails per hour\n    onLimitReached: (identifier) => {\n      logger.warn('Email rate limit exceeded', { identifier });\n    }\n  }),\n\n  // SMS sending\n  sms: new RateLimiter({\n    windowMs: 60 * 60 * 1000, // 1 hour\n    maxRequests: 100, // 100 SMS per hour\n    onLimitReached: (identifier) => {\n      logger.warn('SMS rate limit exceeded', { identifier });\n    }\n  }),\n\n  // File uploads\n  upload: new RateLimiter({\n    windowMs: 60 * 60 * 1000, // 1 hour\n    maxRequests: 50, // 50 uploads per hour\n    onLimitReached: (identifier) => {\n      logger.warn('Upload rate limit exceeded', { identifier });\n    }\n  }),\n\n  // Data exports\n  export: new RateLimiter({\n    windowMs: 24 * 60 * 60 * 1000, // 24 hours\n    maxRequests: 10, // 10 exports per day\n    onLimitReached: (identifier) => {\n      logger.warn('Export rate limit exceeded', { identifier });\n    }\n  }),\n\n  // Password reset\n  passwordReset: new RateLimiter({\n    windowMs: 60 * 60 * 1000, // 1 hour\n    maxRequests: 5, // 5 password resets per hour\n    onLimitReached: (identifier) => {\n      logger.warn('Password reset rate limit exceeded', { identifier });\n    }\n  }),\n\n  // Account creation\n  registration: new RateLimiter({\n    windowMs: 60 * 60 * 1000, // 1 hour\n    maxRequests: 3, // 3 registrations per hour per IP\n    onLimitReached: (identifier) => {\n      logger.warn('Registration rate limit exceeded', { identifier });\n    }\n  })\n};\n\n// Role-based rate limits\nexport const roleBasedRateLimits = {\n  USER: {\n    api: { windowMs: 60 * 1000, maxRequests: 60 },\n    ai: { windowMs: 5 * 60 * 1000, maxRequests: 20 },\n    email: { windowMs: 60 * 60 * 1000, maxRequests: 100 },\n    sms: { windowMs: 60 * 60 * 1000, maxRequests: 50 }\n  },\n  ADMIN: {\n    api: { windowMs: 60 * 1000, maxRequests: 200 },\n    ai: { windowMs: 5 * 60 * 1000, maxRequests: 100 },\n    email: { windowMs: 60 * 60 * 1000, maxRequests: 500 },\n    sms: { windowMs: 60 * 60 * 1000, maxRequests: 200 }\n  },\n  IT_ADMIN: {\n    api: { windowMs: 60 * 1000, maxRequests: 500 },\n    ai: { windowMs: 5 * 60 * 1000, maxRequests: 200 },\n    email: { windowMs: 60 * 60 * 1000, maxRequests: 1000 },\n    sms: { windowMs: 60 * 60 * 1000, maxRequests: 500 }\n  },\n  SUPER_ADMIN: {\n    api: { windowMs: 60 * 1000, maxRequests: 1000 },\n    ai: { windowMs: 5 * 60 * 1000, maxRequests: 500 },\n    email: { windowMs: 60 * 60 * 1000, maxRequests: 5000 },\n    sms: { windowMs: 60 * 60 * 1000, maxRequests: 1000 }\n  }\n};\n\n/**\n * Create role-based rate limiter\n */\nexport function createRoleBasedRateLimiter(\n  role: keyof typeof roleBasedRateLimits,\n  type: keyof typeof roleBasedRateLimits.USER\n): RateLimiter {\n  const config = roleBasedRateLimits[role][type];\n  \n  return new RateLimiter({\n    windowMs: config.windowMs,\n    maxRequests: config.maxRequests,\n    keyGenerator: (identifier, endpoint) => `${role}:${identifier}:${endpoint}`,\n    onLimitReached: (identifier, endpoint) => {\n      logger.warn(`${role} rate limit exceeded`, { \n        identifier, \n        endpoint, \n        type,\n        role \n      });\n    }\n  });\n}\n\n/**\n * Express middleware for rate limiting\n */\nexport function rateLimitMiddleware(rateLimiter: RateLimiter) {\n  return (req: any, res: any, next: any) => {\n    const identifier = req.ip || req.connection.remoteAddress || 'unknown';\n    const endpoint = req.path || req.url || 'unknown';\n    \n    const result = rateLimiter.check(identifier, endpoint);\n    \n    // Add rate limit headers\n    res.set({\n      'X-RateLimit-Limit': result.limit.toString(),\n      'X-RateLimit-Remaining': result.remaining.toString(),\n      'X-RateLimit-Reset': new Date(result.resetTime).toISOString()\n    });\n    \n    if (!result.allowed) {\n      if (result.retryAfter) {\n        res.set('Retry-After', result.retryAfter.toString());\n      }\n      \n      return res.status(429).json({\n        error: 'Too Many Requests',\n        message: 'Rate limit exceeded',\n        retryAfter: result.retryAfter\n      });\n    }\n    \n    next();\n  };\n}\n\n// Export the main rate limiter instance\nexport const authRateLimiter = rateLimiters.auth;"],"names":["RateLimiter","authRateLimiter","createRoleBasedRateLimiter","rateLimitMiddleware","rateLimiters","roleBasedRateLimits","constructor","config","storage","Map","cleanupInterval","setInterval","cleanup","check","identifier","endpoint","now","Date","key","keyGenerator","skipIf","allowed","limit","maxRequests","remaining","resetTime","windowMs","entry","get","count","firstRequest","lastRequest","blocked","violations","set","onLimitReached","logger","warn","retryAfter","Math","ceil","max","recordFailedAttempt","min","recordSuccessfulAttempt","getStatus","clear","delete","cleanedCount","info","entriesRemoved","remainingEntries","size","getStats","stats","totalEntries","blockedEntries","topViolators","violators","push","sort","a","b","slice","destroy","clearInterval","auth","api","ai","email","sms","upload","export","passwordReset","registration","USER","ADMIN","IT_ADMIN","SUPER_ADMIN","role","type","rateLimiter","req","res","next","ip","connection","remoteAddress","path","url","result","toString","toISOString","status","json","error","message"],"mappings":"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"}