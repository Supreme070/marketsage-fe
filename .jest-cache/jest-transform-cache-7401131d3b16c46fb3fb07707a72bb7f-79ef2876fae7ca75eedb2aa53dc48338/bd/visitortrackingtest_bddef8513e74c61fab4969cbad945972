287fdc11e680c8b309413e0546289302
/**
 * LeadPulse Visitor Tracking Tests
 * 
 * Tests for visitor tracking functionality including:
 * - Visitor identification and fingerprinting
 * - Event tracking and analytics
 * - Real-time updates and WebSocket communication
 * - Engagement scoring
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
const _server = require("next/server");
const _route = require("../../src/app/api/leadpulse/visitors/route");
const _prisma = /*#__PURE__*/ _interop_require_default(require("../../src/lib/db/prisma"));
const _leadpulsecache = require("../../src/lib/cache/leadpulse-cache");
const _leadpulserealtime = require("../../src/lib/websocket/leadpulse-realtime");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock dependencies
_globals.jest.mock('@/lib/db/prisma', ()=>({
        leadPulseVisitor: {
            create: _globals.jest.fn(),
            findUnique: _globals.jest.fn(),
            findMany: _globals.jest.fn(),
            update: _globals.jest.fn(),
            upsert: _globals.jest.fn()
        },
        leadPulseTouchpoint: {
            create: _globals.jest.fn()
        },
        user: {
            findUnique: _globals.jest.fn()
        }
    }));
_globals.jest.mock('@/lib/cache/leadpulse-cache', ()=>({
        leadPulseCache: {
            get: _globals.jest.fn(),
            set: _globals.jest.fn(),
            del: _globals.jest.fn(),
            addRecentActivity: _globals.jest.fn(),
            incrementCounter: _globals.jest.fn(),
            getAnalyticsOverview: _globals.jest.fn()
        }
    }));
_globals.jest.mock('@/lib/websocket/leadpulse-realtime', ()=>({
        leadPulseRealtime: {
            broadcastNewVisitor: _globals.jest.fn(),
            broadcastVisitorActivity: _globals.jest.fn(),
            broadcastAnalyticsUpdate: _globals.jest.fn()
        }
    }));
_globals.jest.mock('next-auth', ()=>({
        getServerSession: _globals.jest.fn(()=>Promise.resolve({
                user: {
                    id: 'user123',
                    email: 'test@example.com'
                }
            }))
    }));
// Helper function to create NextRequest
function createNextRequest(method, url, body) {
    const request = new _server.NextRequest(url, {
        method,
        headers: {
            'Content-Type': 'application/json',
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'X-Forwarded-For': '192.168.1.1'
        },
        body: body ? JSON.stringify(body) : undefined
    });
    return request;
}
(0, _globals.describe)('LeadPulse Visitor Tracking API', ()=>{
    (0, _globals.beforeEach)(()=>{
        _globals.jest.clearAllMocks();
    });
    (0, _globals.describe)('POST /api/leadpulse/visitors', ()=>{
        (0, _globals.test)('should create new visitor with valid data', async ()=>{
            const visitorData = {
                fingerprint: 'fp_test123456789',
                event: {
                    type: 'pageview',
                    sessionId: 'lp_session123',
                    timestamp: Date.now(),
                    data: {
                        url: 'https://example.com',
                        title: 'Test Page',
                        viewport: {
                            width: 1920,
                            height: 1080
                        },
                        referrer: 'https://google.com'
                    }
                },
                url: 'https://example.com',
                title: 'Test Page',
                location: 'Africa/Lagos',
                device: 'Desktop',
                browser: 'Chrome'
            };
            const mockVisitor = {
                id: 'visitor123',
                fingerprint: visitorData.fingerprint,
                score: 10,
                metadata: {},
                createdAt: new Date(),
                updatedAt: new Date()
            };
            // Mock Prisma responses
            _prisma.default.leadPulseVisitor.findUnique.mockResolvedValue(null);
            _prisma.default.leadPulseVisitor.create.mockResolvedValue(mockVisitor);
            _prisma.default.leadPulseTouchpoint.create.mockResolvedValue({
                id: 'touchpoint123',
                visitorId: 'visitor123',
                type: 'pageview',
                data: visitorData.event.data
            });
            // Mock cache responses
            _leadpulsecache.leadPulseCache.set.mockResolvedValue(true);
            _leadpulsecache.leadPulseCache.addRecentActivity.mockResolvedValue(true);
            const request = createNextRequest('POST', 'http://localhost:3000/api/leadpulse/visitors', visitorData);
            const response = await (0, _route.POST)(request);
            const responseData = await response.json();
            (0, _globals.expect)(response.status).toBe(200);
            (0, _globals.expect)(responseData.success).toBe(true);
            (0, _globals.expect)(responseData.visitorId).toBe('visitor123');
            (0, _globals.expect)(responseData.score).toBe(10);
            // Verify database calls
            (0, _globals.expect)(_prisma.default.leadPulseVisitor.findUnique).toHaveBeenCalledWith({
                where: {
                    fingerprint: visitorData.fingerprint
                }
            });
            (0, _globals.expect)(_prisma.default.leadPulseVisitor.create).toHaveBeenCalled();
            (0, _globals.expect)(_prisma.default.leadPulseTouchpoint.create).toHaveBeenCalled();
            // Verify real-time broadcast
            (0, _globals.expect)(_leadpulserealtime.leadPulseRealtime.broadcastNewVisitor).toHaveBeenCalledWith(_globals.expect.objectContaining({
                id: 'visitor123',
                fingerprint: visitorData.fingerprint
            }));
        });
        (0, _globals.test)('should update existing visitor with new event', async ()=>{
            const visitorData = {
                fingerprint: 'fp_existing123',
                event: {
                    type: 'click',
                    sessionId: 'lp_session123',
                    timestamp: Date.now(),
                    data: {
                        element: {
                            tagName: 'button',
                            text: 'Sign Up',
                            id: 'signup-btn'
                        },
                        x: 100,
                        y: 200
                    }
                },
                url: 'https://example.com/signup',
                title: 'Sign Up Page',
                device: 'Mobile',
                browser: 'Safari'
            };
            const existingVisitor = {
                id: 'visitor456',
                fingerprint: visitorData.fingerprint,
                score: 25,
                sessionCount: 2,
                metadata: {
                    device: 'Desktop'
                },
                createdAt: new Date(Date.now() - 86400000),
                updatedAt: new Date()
            };
            const updatedVisitor = {
                ...existingVisitor,
                score: 35,
                metadata: {
                    device: 'Mobile'
                },
                updatedAt: new Date()
            };
            // Mock Prisma responses
            _prisma.default.leadPulseVisitor.findUnique.mockResolvedValue(existingVisitor);
            _prisma.default.leadPulseVisitor.update.mockResolvedValue(updatedVisitor);
            _prisma.default.leadPulseTouchpoint.create.mockResolvedValue({
                id: 'touchpoint456',
                visitorId: 'visitor456',
                type: 'click',
                data: visitorData.event.data
            });
            const request = createNextRequest('POST', 'http://localhost:3000/api/leadpulse/visitors', visitorData);
            const response = await (0, _route.POST)(request);
            const responseData = await response.json();
            (0, _globals.expect)(response.status).toBe(200);
            (0, _globals.expect)(responseData.success).toBe(true);
            (0, _globals.expect)(responseData.visitorId).toBe('visitor456');
            (0, _globals.expect)(responseData.score).toBe(35);
            (0, _globals.expect)(responseData.isNew).toBe(false);
            // Verify visitor was updated, not created
            (0, _globals.expect)(_prisma.default.leadPulseVisitor.update).toHaveBeenCalledWith({
                where: {
                    id: 'visitor456'
                },
                data: _globals.expect.objectContaining({
                    score: 35,
                    metadata: _globals.expect.objectContaining({
                        device: 'Mobile'
                    })
                })
            });
            // Verify activity broadcast
            (0, _globals.expect)(_leadpulserealtime.leadPulseRealtime.broadcastVisitorActivity).toHaveBeenCalledWith(_globals.expect.objectContaining({
                visitorId: 'visitor456',
                activity: {
                    type: 'click',
                    data: visitorData.event.data
                }
            }));
        });
        (0, _globals.test)('should handle engagement scoring correctly', async ()=>{
            const testCases = [
                {
                    eventType: 'pageview',
                    expectedScoreIncrease: 5,
                    description: 'basic page view'
                },
                {
                    eventType: 'click',
                    expectedScoreIncrease: 10,
                    description: 'button click'
                },
                {
                    eventType: 'form_focus',
                    expectedScoreIncrease: 15,
                    description: 'form interaction'
                },
                {
                    eventType: 'form_submit',
                    expectedScoreIncrease: 30,
                    description: 'form submission'
                },
                {
                    eventType: 'scroll_milestone',
                    expectedScoreIncrease: 2,
                    description: 'scroll depth milestone'
                }
            ];
            for (const testCase of testCases){
                const visitorData = {
                    fingerprint: `fp_${testCase.eventType}_test`,
                    event: {
                        type: testCase.eventType,
                        sessionId: 'lp_session123',
                        timestamp: Date.now(),
                        data: {}
                    },
                    url: 'https://example.com',
                    title: 'Test Page'
                };
                const existingVisitor = {
                    id: 'visitor_test',
                    fingerprint: visitorData.fingerprint,
                    score: 20,
                    metadata: {}
                };
                _prisma.default.leadPulseVisitor.findUnique.mockResolvedValue(existingVisitor);
                _prisma.default.leadPulseVisitor.update.mockResolvedValue({
                    ...existingVisitor,
                    score: 20 + testCase.expectedScoreIncrease
                });
                _prisma.default.leadPulseTouchpoint.create.mockResolvedValue({});
                const request = createNextRequest('POST', 'http://localhost:3000/api/leadpulse/visitors', visitorData);
                const response = await (0, _route.POST)(request);
                const responseData = await response.json();
                (0, _globals.expect)(responseData.score).toBe(20 + testCase.expectedScoreIncrease);
            }
        });
        (0, _globals.test)('should validate required fields', async ()=>{
            const invalidRequests = [
                {
                    description: 'missing fingerprint',
                    data: {
                        event: {
                            type: 'pageview',
                            sessionId: 'test',
                            timestamp: Date.now()
                        },
                        url: 'https://example.com'
                    }
                },
                {
                    description: 'missing event',
                    data: {
                        fingerprint: 'fp_test123',
                        url: 'https://example.com'
                    }
                },
                {
                    description: 'invalid event type',
                    data: {
                        fingerprint: 'fp_test123',
                        event: {
                            type: 'invalid_event',
                            sessionId: 'test',
                            timestamp: Date.now()
                        },
                        url: 'https://example.com'
                    }
                },
                {
                    description: 'missing URL',
                    data: {
                        fingerprint: 'fp_test123',
                        event: {
                            type: 'pageview',
                            sessionId: 'test',
                            timestamp: Date.now()
                        }
                    }
                }
            ];
            for (const invalidRequest of invalidRequests){
                const request = createNextRequest('POST', 'http://localhost:3000/api/leadpulse/visitors', invalidRequest.data);
                const response = await (0, _route.POST)(request);
                const responseData = await response.json();
                (0, _globals.expect)(response.status).toBe(400);
                (0, _globals.expect)(responseData.success).toBe(false);
                (0, _globals.expect)(responseData.error).toBeDefined();
            }
        });
        (0, _globals.test)('should handle rate limiting', async ()=>{
            // Mock rate limit exceeded scenario
            const visitorData = {
                fingerprint: 'fp_rate_limit_test',
                event: {
                    type: 'pageview',
                    sessionId: 'lp_session123',
                    timestamp: Date.now()
                },
                url: 'https://example.com'
            };
            // Simulate multiple rapid requests
            const requests = Array(15).fill(null).map(()=>createNextRequest('POST', 'http://localhost:3000/api/leadpulse/visitors', visitorData));
            // The rate limiter should kick in after a certain number of requests
            // Note: This test depends on the actual rate limiting implementation
            const responses = await Promise.all(requests.map((req)=>(0, _route.POST)(req)));
            // Some requests should be rate limited (status 429)
            const rateLimitedResponses = responses.filter((res)=>res.status === 429);
            (0, _globals.expect)(rateLimitedResponses.length).toBeGreaterThan(0);
        });
    });
    (0, _globals.describe)('GET /api/leadpulse/visitors', ()=>{
        (0, _globals.test)('should return visitor analytics for authenticated user', async ()=>{
            const mockAnalytics = {
                totalVisitors: 150,
                uniqueVisitors: 120,
                avgEngagementScore: 45.5,
                conversionRate: 3.2,
                topPages: [
                    {
                        url: '/home',
                        views: 50,
                        conversionRate: 2.1
                    },
                    {
                        url: '/products',
                        views: 30,
                        conversionRate: 5.5
                    }
                ],
                deviceBreakdown: {
                    desktop: 65.4,
                    mobile: 28.7,
                    tablet: 5.9
                }
            };
            const mockVisitors = [
                {
                    id: 'visitor1',
                    fingerprint: 'fp_123',
                    score: 75,
                    firstSeen: new Date(),
                    lastSeen: new Date(),
                    location: {
                        country: 'Nigeria',
                        city: 'Lagos'
                    },
                    device: 'Desktop',
                    browser: 'Chrome',
                    isConverted: false
                },
                {
                    id: 'visitor2',
                    fingerprint: 'fp_456',
                    score: 25,
                    firstSeen: new Date(),
                    lastSeen: new Date(),
                    location: {
                        country: 'Kenya',
                        city: 'Nairobi'
                    },
                    device: 'Mobile',
                    browser: 'Safari',
                    isConverted: true
                }
            ];
            // Mock authenticated user
            _prisma.default.user.findUnique.mockResolvedValue({
                id: 'user123',
                email: 'test@example.com'
            });
            // Mock cache response
            _leadpulsecache.leadPulseCache.getAnalyticsOverview.mockResolvedValue(mockAnalytics);
            // Mock database response
            _prisma.default.leadPulseVisitor.findMany.mockResolvedValue(mockVisitors);
            const request = createNextRequest('GET', 'http://localhost:3000/api/leadpulse/visitors?timeframe=week&limit=50');
            const response = await (0, _route.GET)(request);
            const responseData = await response.json();
            (0, _globals.expect)(response.status).toBe(200);
            (0, _globals.expect)(responseData.success).toBe(true);
            (0, _globals.expect)(responseData.visitors).toHaveLength(2);
            (0, _globals.expect)(responseData.analytics).toEqual(mockAnalytics);
            (0, _globals.expect)(responseData.pagination).toBeDefined();
            // Verify database query with correct filters
            (0, _globals.expect)(_prisma.default.leadPulseVisitor.findMany).toHaveBeenCalledWith({
                where: _globals.expect.objectContaining({
                    createdAt: _globals.expect.objectContaining({
                        gte: _globals.expect.any(Date)
                    })
                }),
                orderBy: {
                    createdAt: 'desc'
                },
                take: 50,
                skip: 0,
                include: _globals.expect.any(Object)
            });
        });
        (0, _globals.test)('should handle pagination correctly', async ()=>{
            const request = createNextRequest('GET', 'http://localhost:3000/api/leadpulse/visitors?limit=10&offset=20');
            const response = await (0, _route.GET)(request);
            const responseData = await response.json();
            (0, _globals.expect)(response.status).toBe(200);
            (0, _globals.expect)(responseData.pagination).toEqual({
                limit: 10,
                offset: 20,
                hasNext: _globals.expect.any(Boolean),
                hasPrev: true
            });
            // Verify pagination parameters passed to database
            (0, _globals.expect)(_prisma.default.leadPulseVisitor.findMany).toHaveBeenCalledWith(_globals.expect.objectContaining({
                take: 10,
                skip: 20
            }));
        });
        (0, _globals.test)('should filter by timeframe correctly', async ()=>{
            const timeframes = [
                'hour',
                'day',
                'week',
                'month'
            ];
            for (const timeframe of timeframes){
                const request = createNextRequest('GET', `http://localhost:3000/api/leadpulse/visitors?timeframe=${timeframe}`);
                await (0, _route.GET)(request);
                // Verify the correct date filter was applied
                (0, _globals.expect)(_prisma.default.leadPulseVisitor.findMany).toHaveBeenCalledWith(_globals.expect.objectContaining({
                    where: _globals.expect.objectContaining({
                        createdAt: _globals.expect.objectContaining({
                            gte: _globals.expect.any(Date)
                        })
                    })
                }));
            }
        });
        (0, _globals.test)('should require authentication', async ()=>{
            // Mock unauthenticated request
            _globals.jest.doMock('next-auth', ()=>({
                    getServerSession: _globals.jest.fn(()=>Promise.resolve(null))
                }));
            const request = createNextRequest('GET', 'http://localhost:3000/api/leadpulse/visitors');
            const response = await (0, _route.GET)(request);
            const responseData = await response.json();
            (0, _globals.expect)(response.status).toBe(401);
            (0, _globals.expect)(responseData.success).toBe(false);
            (0, _globals.expect)(responseData.error).toBe('Unauthorized');
        });
    });
    (0, _globals.describe)('Real-time Features', ()=>{
        (0, _globals.test)('should broadcast new visitor events', async ()=>{
            const visitorData = {
                fingerprint: 'fp_realtime_test',
                event: {
                    type: 'pageview',
                    sessionId: 'lp_session123',
                    timestamp: Date.now()
                },
                url: 'https://example.com',
                title: 'Test Page'
            };
            const mockVisitor = {
                id: 'visitor_realtime',
                fingerprint: visitorData.fingerprint,
                score: 10
            };
            _prisma.default.leadPulseVisitor.findUnique.mockResolvedValue(null);
            _prisma.default.leadPulseVisitor.create.mockResolvedValue(mockVisitor);
            _prisma.default.leadPulseTouchpoint.create.mockResolvedValue({});
            const request = createNextRequest('POST', 'http://localhost:3000/api/leadpulse/visitors', visitorData);
            await (0, _route.POST)(request);
            // Verify real-time broadcast was called
            (0, _globals.expect)(_leadpulserealtime.leadPulseRealtime.broadcastNewVisitor).toHaveBeenCalledWith(_globals.expect.objectContaining({
                id: 'visitor_realtime',
                fingerprint: visitorData.fingerprint
            }));
            (0, _globals.expect)(_leadpulserealtime.leadPulseRealtime.broadcastAnalyticsUpdate).toHaveBeenCalled();
        });
        (0, _globals.test)('should broadcast visitor activity updates', async ()=>{
            const visitorData = {
                fingerprint: 'fp_activity_test',
                event: {
                    type: 'form_submit',
                    sessionId: 'lp_session123',
                    timestamp: Date.now(),
                    data: {
                        formId: 'contact-form',
                        fields: [
                            'name',
                            'email'
                        ]
                    }
                },
                url: 'https://example.com/contact'
            };
            const existingVisitor = {
                id: 'visitor_activity',
                fingerprint: visitorData.fingerprint,
                score: 30
            };
            _prisma.default.leadPulseVisitor.findUnique.mockResolvedValue(existingVisitor);
            _prisma.default.leadPulseVisitor.update.mockResolvedValue({
                ...existingVisitor,
                score: 60
            });
            _prisma.default.leadPulseTouchpoint.create.mockResolvedValue({});
            const request = createNextRequest('POST', 'http://localhost:3000/api/leadpulse/visitors', visitorData);
            await (0, _route.POST)(request);
            // Verify activity broadcast
            (0, _globals.expect)(_leadpulserealtime.leadPulseRealtime.broadcastVisitorActivity).toHaveBeenCalledWith(_globals.expect.objectContaining({
                visitorId: 'visitor_activity',
                activity: _globals.expect.objectContaining({
                    type: 'form_submit'
                })
            }));
        });
    });
    (0, _globals.describe)('Caching Behavior', ()=>{
        (0, _globals.test)('should cache visitor data correctly', async ()=>{
            const visitorData = {
                fingerprint: 'fp_cache_test',
                event: {
                    type: 'pageview',
                    sessionId: 'lp_session123',
                    timestamp: Date.now()
                },
                url: 'https://example.com'
            };
            const mockVisitor = {
                id: 'visitor_cache',
                fingerprint: visitorData.fingerprint,
                score: 15
            };
            _prisma.default.leadPulseVisitor.findUnique.mockResolvedValue(null);
            _prisma.default.leadPulseVisitor.create.mockResolvedValue(mockVisitor);
            _prisma.default.leadPulseTouchpoint.create.mockResolvedValue({});
            const request = createNextRequest('POST', 'http://localhost:3000/api/leadpulse/visitors', visitorData);
            await (0, _route.POST)(request);
            // Verify caching operations
            (0, _globals.expect)(_leadpulsecache.leadPulseCache.set).toHaveBeenCalledWith(`visitor:${visitorData.fingerprint}`, _globals.expect.objectContaining({
                id: 'visitor_cache',
                fingerprint: visitorData.fingerprint
            }), _globals.expect.any(Number) // TTL
            );
            (0, _globals.expect)(_leadpulsecache.leadPulseCache.addRecentActivity).toHaveBeenCalledWith(_globals.expect.objectContaining({
                type: 'visitor_activity',
                visitorId: 'visitor_cache'
            }));
        });
        (0, _globals.test)('should use cached data when available', async ()=>{
            const fingerprint = 'fp_cached_visitor';
            const cachedVisitor = {
                id: 'cached_visitor',
                fingerprint,
                score: 40
            };
            // Mock cache hit
            _leadpulsecache.leadPulseCache.get.mockResolvedValue(cachedVisitor);
            const visitorData = {
                fingerprint,
                event: {
                    type: 'click',
                    sessionId: 'lp_session123',
                    timestamp: Date.now()
                },
                url: 'https://example.com'
            };
            const request = createNextRequest('POST', 'http://localhost:3000/api/leadpulse/visitors', visitorData);
            await (0, _route.POST)(request);
            // Should use cached data and not query database for visitor lookup
            (0, _globals.expect)(_leadpulsecache.leadPulseCache.get).toHaveBeenCalledWith(`visitor:${fingerprint}`);
            (0, _globals.expect)(_prisma.default.leadPulseVisitor.findUnique).not.toHaveBeenCalled();
        });
    });
    (0, _globals.describe)('Error Handling', ()=>{
        (0, _globals.test)('should handle database errors gracefully', async ()=>{
            const visitorData = {
                fingerprint: 'fp_db_error_test',
                event: {
                    type: 'pageview',
                    sessionId: 'lp_session123',
                    timestamp: Date.now()
                },
                url: 'https://example.com'
            };
            // Mock database error
            _prisma.default.leadPulseVisitor.findUnique.mockRejectedValue(new Error('Database connection failed'));
            const request = createNextRequest('POST', 'http://localhost:3000/api/leadpulse/visitors', visitorData);
            const response = await (0, _route.POST)(request);
            const responseData = await response.json();
            (0, _globals.expect)(response.status).toBe(500);
            (0, _globals.expect)(responseData.success).toBe(false);
            (0, _globals.expect)(responseData.error).toBe('Failed to track visitor');
        });
        (0, _globals.test)('should handle cache errors gracefully', async ()=>{
            const visitorData = {
                fingerprint: 'fp_cache_error_test',
                event: {
                    type: 'pageview',
                    sessionId: 'lp_session123',
                    timestamp: Date.now()
                },
                url: 'https://example.com'
            };
            const mockVisitor = {
                id: 'visitor_cache_error',
                fingerprint: visitorData.fingerprint,
                score: 10
            };
            // Mock cache error
            _leadpulsecache.leadPulseCache.set.mockRejectedValue(new Error('Redis connection failed'));
            _prisma.default.leadPulseVisitor.findUnique.mockResolvedValue(null);
            _prisma.default.leadPulseVisitor.create.mockResolvedValue(mockVisitor);
            _prisma.default.leadPulseTouchpoint.create.mockResolvedValue({});
            const request = createNextRequest('POST', 'http://localhost:3000/api/leadpulse/visitors', visitorData);
            const response = await (0, _route.POST)(request);
            const responseData = await response.json();
            // Should still succeed even if cache fails
            (0, _globals.expect)(response.status).toBe(200);
            (0, _globals.expect)(responseData.success).toBe(true);
            (0, _globals.expect)(responseData.visitorId).toBe('visitor_cache_error');
        });
    });
    (0, _globals.afterEach)(()=>{
        _globals.jest.clearAllMocks();
    });
});

//# sourceMappingURL=data:application/json;base64,