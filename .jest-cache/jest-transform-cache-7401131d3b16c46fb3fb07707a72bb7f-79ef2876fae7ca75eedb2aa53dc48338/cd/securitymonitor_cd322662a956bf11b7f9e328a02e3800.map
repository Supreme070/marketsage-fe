{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/lib/security/security-monitor.ts"],"sourcesContent":["import { logger } from '@/lib/logger';\nimport { redisCache, CACHE_KEYS, CACHE_TTL } from '@/lib/cache/redis-client';\n\n/**\n * Security event types for monitoring\n */\nexport enum SecurityEventType {\n  LOGIN_SUCCESS = 'LOGIN_SUCCESS',\n  LOGIN_FAILURE = 'LOGIN_FAILURE',\n  LOGIN_BLOCKED = 'LOGIN_BLOCKED',\n  PASSWORD_CHANGE = 'PASSWORD_CHANGE',\n  SUSPICIOUS_ACTIVITY = 'SUSPICIOUS_ACTIVITY',\n  RATE_LIMIT_EXCEEDED = 'RATE_LIMIT_EXCEEDED',\n  UNAUTHORIZED_ACCESS = 'UNAUTHORIZED_ACCESS',\n  DATA_ACCESS = 'DATA_ACCESS',\n  BULK_OPERATION = 'BULK_OPERATION',\n  ADMIN_ACTION = 'ADMIN_ACTION',\n  API_ABUSE = 'API_ABUSE',\n  CORS_VIOLATION = 'CORS_VIOLATION'\n}\n\n/**\n * Security event severity levels\n */\nexport enum SecuritySeverity {\n  LOW = 'LOW',\n  MEDIUM = 'MEDIUM',\n  HIGH = 'HIGH',\n  CRITICAL = 'CRITICAL'\n}\n\n/**\n * Security event interface\n */\nexport interface SecurityEvent {\n  id: string;\n  type: SecurityEventType;\n  severity: SecuritySeverity;\n  timestamp: Date;\n  userId?: string;\n  email?: string;\n  ipAddress: string;\n  userAgent?: string;\n  organizationId?: string;\n  resource?: string;\n  action?: string;\n  metadata?: Record<string, any>;\n  description: string;\n}\n\n/**\n * Anomaly detection patterns\n */\ninterface AnomalyPattern {\n  type: string;\n  threshold: number;\n  timeWindow: number; // in seconds\n  severity: SecuritySeverity;\n}\n\nconst ANOMALY_PATTERNS: AnomalyPattern[] = [\n  {\n    type: 'multiple_failed_logins',\n    threshold: 5,\n    timeWindow: 300, // 5 minutes\n    severity: SecuritySeverity.HIGH\n  },\n  {\n    type: 'rapid_api_calls',\n    threshold: 100,\n    timeWindow: 60, // 1 minute\n    severity: SecuritySeverity.MEDIUM\n  },\n  {\n    type: 'unusual_access_hours',\n    threshold: 1,\n    timeWindow: 3600, // 1 hour (between 2-6 AM)\n    severity: SecuritySeverity.MEDIUM\n  },\n  {\n    type: 'bulk_data_access',\n    threshold: 1000,\n    timeWindow: 300, // 5 minutes\n    severity: SecuritySeverity.HIGH\n  },\n  {\n    type: 'privilege_escalation',\n    threshold: 3,\n    timeWindow: 1800, // 30 minutes\n    severity: SecuritySeverity.CRITICAL\n  }\n];\n\n/**\n * Security monitoring and anomaly detection system\n */\nclass SecurityMonitor {\n  private static instance: SecurityMonitor;\n  private eventBuffer: SecurityEvent[] = [];\n  private bufferSize = 1000;\n\n  private constructor() {\n    // Start periodic anomaly detection\n    setInterval(() => this.detectAnomalies(), 60000); // Every minute\n  }\n\n  static getInstance(): SecurityMonitor {\n    if (!SecurityMonitor.instance) {\n      SecurityMonitor.instance = new SecurityMonitor();\n    }\n    return SecurityMonitor.instance;\n  }\n\n  /**\n   * Log a security event\n   */\n  async logEvent(event: Omit<SecurityEvent, 'id' | 'timestamp'>): Promise<void> {\n    const securityEvent: SecurityEvent = {\n      ...event,\n      id: `sec_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      timestamp: new Date()\n    };\n\n    // Add to in-memory buffer\n    this.eventBuffer.push(securityEvent);\n    if (this.eventBuffer.length > this.bufferSize) {\n      this.eventBuffer.shift(); // Remove oldest event\n    }\n\n    // Cache in Redis for quick access\n    const cacheKey = `security_event:${securityEvent.id}`;\n    await redisCache.set(cacheKey, securityEvent, CACHE_TTL.DAY);\n\n    // Log to structured logger\n    logger.warn(`Security Event: ${event.type}`, {\n      eventId: securityEvent.id,\n      type: event.type,\n      severity: event.severity,\n      userId: event.userId,\n      email: event.email,\n      ipAddress: event.ipAddress,\n      organizationId: event.organizationId,\n      resource: event.resource,\n      action: event.action,\n      description: event.description,\n      metadata: event.metadata\n    });\n\n    // Check for immediate anomalies\n    await this.checkImmediateThreats(securityEvent);\n  }\n\n  /**\n   * Log authentication events\n   */\n  async logAuthEvent(\n    type: SecurityEventType.LOGIN_SUCCESS | SecurityEventType.LOGIN_FAILURE | SecurityEventType.LOGIN_BLOCKED,\n    request: {\n      email: string;\n      ipAddress: string;\n      userAgent?: string;\n      userId?: string;\n      organizationId?: string;\n    }\n  ): Promise<void> {\n    const severity = type === SecurityEventType.LOGIN_SUCCESS \n      ? SecuritySeverity.LOW \n      : type === SecurityEventType.LOGIN_BLOCKED \n        ? SecuritySeverity.HIGH \n        : SecuritySeverity.MEDIUM;\n\n    await this.logEvent({\n      type,\n      severity,\n      userId: request.userId,\n      email: request.email,\n      ipAddress: request.ipAddress,\n      userAgent: request.userAgent,\n      organizationId: request.organizationId,\n      description: `Authentication attempt: ${type.toLowerCase().replace('_', ' ')}`\n    });\n  }\n\n  /**\n   * Log data access events\n   */\n  async logDataAccess(\n    userId: string,\n    email: string,\n    ipAddress: string,\n    resource: string,\n    action: string,\n    recordCount?: number,\n    organizationId?: string\n  ): Promise<void> {\n    const severity = recordCount && recordCount > 100 \n      ? SecuritySeverity.MEDIUM \n      : SecuritySeverity.LOW;\n\n    await this.logEvent({\n      type: SecurityEventType.DATA_ACCESS,\n      severity,\n      userId,\n      email,\n      ipAddress,\n      organizationId,\n      resource,\n      action,\n      description: `Data access: ${action} on ${resource}`,\n      metadata: { recordCount }\n    });\n  }\n\n  /**\n   * Log suspicious activity\n   */\n  async logSuspiciousActivity(\n    ipAddress: string,\n    reason: string,\n    metadata?: Record<string, any>,\n    userId?: string,\n    email?: string\n  ): Promise<void> {\n    await this.logEvent({\n      type: SecurityEventType.SUSPICIOUS_ACTIVITY,\n      severity: SecuritySeverity.HIGH,\n      userId,\n      email,\n      ipAddress,\n      description: `Suspicious activity detected: ${reason}`,\n      metadata\n    });\n  }\n\n  /**\n   * Log admin actions\n   */\n  async logAdminAction(\n    userId: string,\n    email: string,\n    ipAddress: string,\n    action: string,\n    resource: string,\n    organizationId?: string\n  ): Promise<void> {\n    await this.logEvent({\n      type: SecurityEventType.ADMIN_ACTION,\n      severity: SecuritySeverity.MEDIUM,\n      userId,\n      email,\n      ipAddress,\n      organizationId,\n      resource,\n      action,\n      description: `Admin action: ${action} on ${resource}`\n    });\n  }\n\n  /**\n   * Check for immediate security threats\n   */\n  private async checkImmediateThreats(event: SecurityEvent): Promise<void> {\n    // Check for rapid failed login attempts\n    if (event.type === SecurityEventType.LOGIN_FAILURE) {\n      const recentFailures = await this.getRecentEvents(\n        SecurityEventType.LOGIN_FAILURE,\n        event.ipAddress,\n        300 // 5 minutes\n      );\n\n      if (recentFailures.length >= 5) {\n        await this.logEvent({\n          type: SecurityEventType.LOGIN_BLOCKED,\n          severity: SecuritySeverity.HIGH,\n          ipAddress: event.ipAddress,\n          email: event.email,\n          description: 'IP blocked due to multiple failed login attempts',\n          metadata: { failureCount: recentFailures.length }\n        });\n      }\n    }\n\n    // Check for unusual access patterns\n    if (event.type === SecurityEventType.DATA_ACCESS && event.metadata?.recordCount > 1000) {\n      await this.logSuspiciousActivity(\n        event.ipAddress,\n        'Bulk data access detected',\n        { recordCount: event.metadata.recordCount },\n        event.userId,\n        event.email\n      );\n    }\n  }\n\n  /**\n   * Detect anomalies based on patterns\n   */\n  private async detectAnomalies(): Promise<void> {\n    try {\n      for (const pattern of ANOMALY_PATTERNS) {\n        await this.checkPattern(pattern);\n      }\n    } catch (error) {\n      logger.error('Anomaly detection failed:', error);\n    }\n  }\n\n  /**\n   * Check specific anomaly pattern\n   */\n  private async checkPattern(pattern: AnomalyPattern): Promise<void> {\n    const now = Date.now();\n    const windowStart = now - (pattern.timeWindow * 1000);\n\n    // Get events in time window\n    const recentEvents = this.eventBuffer.filter(\n      event => event.timestamp.getTime() >= windowStart\n    );\n\n    let anomalyDetected = false;\n    let anomalyData: Record<string, any> = {};\n\n    switch (pattern.type) {\n      case 'multiple_failed_logins':\n        const failedLogins = recentEvents.filter(e => e.type === SecurityEventType.LOGIN_FAILURE);\n        const ipGroups = this.groupByIP(failedLogins);\n        \n        for (const [ip, events] of Object.entries(ipGroups)) {\n          if (events.length >= pattern.threshold) {\n            anomalyDetected = true;\n            anomalyData = { ip, failureCount: events.length };\n            break;\n          }\n        }\n        break;\n\n      case 'rapid_api_calls':\n        const apiCalls = recentEvents.filter(e => e.type === SecurityEventType.DATA_ACCESS);\n        const userGroups = this.groupByUser(apiCalls);\n        \n        for (const [userId, events] of Object.entries(userGroups)) {\n          if (events.length >= pattern.threshold) {\n            anomalyDetected = true;\n            anomalyData = { userId, callCount: events.length };\n            break;\n          }\n        }\n        break;\n\n      case 'unusual_access_hours':\n        const currentHour = new Date().getHours();\n        if (currentHour >= 2 && currentHour <= 6) {\n          const accessEvents = recentEvents.filter(e => \n            e.type === SecurityEventType.DATA_ACCESS || \n            e.type === SecurityEventType.LOGIN_SUCCESS\n          );\n          if (accessEvents.length > 0) {\n            anomalyDetected = true;\n            anomalyData = { hour: currentHour, eventCount: accessEvents.length };\n          }\n        }\n        break;\n    }\n\n    if (anomalyDetected) {\n      await this.logEvent({\n        type: SecurityEventType.SUSPICIOUS_ACTIVITY,\n        severity: pattern.severity,\n        ipAddress: anomalyData.ip || 'unknown',\n        description: `Anomaly detected: ${pattern.type}`,\n        metadata: { pattern: pattern.type, ...anomalyData }\n      });\n    }\n  }\n\n  /**\n   * Get recent events by type and IP\n   */\n  private async getRecentEvents(\n    type: SecurityEventType,\n    ipAddress: string,\n    timeWindowSeconds: number\n  ): Promise<SecurityEvent[]> {\n    const cutoff = new Date(Date.now() - (timeWindowSeconds * 1000));\n    \n    return this.eventBuffer.filter(event =>\n      event.type === type &&\n      event.ipAddress === ipAddress &&\n      event.timestamp >= cutoff\n    );\n  }\n\n  /**\n   * Group events by IP address\n   */\n  private groupByIP(events: SecurityEvent[]): Record<string, SecurityEvent[]> {\n    return events.reduce((groups, event) => {\n      const ip = event.ipAddress;\n      groups[ip] = groups[ip] || [];\n      groups[ip].push(event);\n      return groups;\n    }, {} as Record<string, SecurityEvent[]>);\n  }\n\n  /**\n   * Group events by user ID\n   */\n  private groupByUser(events: SecurityEvent[]): Record<string, SecurityEvent[]> {\n    return events.reduce((groups, event) => {\n      const userId = event.userId || 'anonymous';\n      groups[userId] = groups[userId] || [];\n      groups[userId].push(event);\n      return groups;\n    }, {} as Record<string, SecurityEvent[]>);\n  }\n\n  /**\n   * Get security dashboard data\n   */\n  async getSecurityDashboard(timeRange = 86400): Promise<{\n    totalEvents: number;\n    criticalEvents: number;\n    topThreats: Array<{ type: SecurityEventType; count: number }>;\n    recentEvents: SecurityEvent[];\n  }> {\n    const cutoff = new Date(Date.now() - (timeRange * 1000));\n    const recentEvents = this.eventBuffer.filter(event => event.timestamp >= cutoff);\n\n    const criticalEvents = recentEvents.filter(event => \n      event.severity === SecuritySeverity.CRITICAL || \n      event.severity === SecuritySeverity.HIGH\n    ).length;\n\n    const threatCounts = recentEvents.reduce((counts, event) => {\n      counts[event.type] = (counts[event.type] || 0) + 1;\n      return counts;\n    }, {} as Record<SecurityEventType, number>);\n\n    const topThreats = Object.entries(threatCounts)\n      .map(([type, count]) => ({ type: type as SecurityEventType, count }))\n      .sort((a, b) => b.count - a.count)\n      .slice(0, 5);\n\n    return {\n      totalEvents: recentEvents.length,\n      criticalEvents,\n      topThreats,\n      recentEvents: recentEvents.slice(-10) // Last 10 events\n    };\n  }\n}\n\n// Export singleton instance\nexport const securityMonitor = SecurityMonitor.getInstance();\n\n// Helper functions for easy use in API routes\nexport const logAuthSuccess = (request: { email: string; ipAddress: string; userAgent?: string; userId?: string; organizationId?: string }) =>\n  securityMonitor.logAuthEvent(SecurityEventType.LOGIN_SUCCESS, request);\n\nexport const logAuthFailure = (request: { email: string; ipAddress: string; userAgent?: string }) =>\n  securityMonitor.logAuthEvent(SecurityEventType.LOGIN_FAILURE, request);\n\nexport const logAuthBlocked = (request: { email: string; ipAddress: string; userAgent?: string }) =>\n  securityMonitor.logAuthEvent(SecurityEventType.LOGIN_BLOCKED, request);\n\nexport const logDataAccess = (userId: string, email: string, ipAddress: string, resource: string, action: string, recordCount?: number, organizationId?: string) =>\n  securityMonitor.logDataAccess(userId, email, ipAddress, resource, action, recordCount, organizationId);\n\nexport const logSuspiciousActivity = (ipAddress: string, reason: string, metadata?: Record<string, any>, userId?: string, email?: string) =>\n  securityMonitor.logSuspiciousActivity(ipAddress, reason, metadata, userId, email);\n\nexport const logAdminAction = (userId: string, email: string, ipAddress: string, action: string, resource: string, organizationId?: string) =>\n  securityMonitor.logAdminAction(userId, email, ipAddress, action, resource, organizationId);"],"names":["SecurityEventType","SecuritySeverity","logAdminAction","logAuthBlocked","logAuthFailure","logAuthSuccess","logDataAccess","logSuspiciousActivity","securityMonitor","ANOMALY_PATTERNS","type","threshold","timeWindow","severity","SecurityMonitor","eventBuffer","bufferSize","setInterval","detectAnomalies","getInstance","instance","logEvent","event","securityEvent","id","Date","now","Math","random","toString","substr","timestamp","push","length","shift","cacheKey","redisCache","set","CACHE_TTL","DAY","logger","warn","eventId","userId","email","ipAddress","organizationId","resource","action","description","metadata","checkImmediateThreats","logAuthEvent","request","userAgent","toLowerCase","replace","recordCount","reason","recentFailures","getRecentEvents","failureCount","pattern","checkPattern","error","windowStart","recentEvents","filter","getTime","anomalyDetected","anomalyData","failedLogins","e","ipGroups","groupByIP","ip","events","Object","entries","apiCalls","userGroups","groupByUser","callCount","currentHour","getHours","accessEvents","hour","eventCount","timeWindowSeconds","cutoff","reduce","groups","getSecurityDashboard","timeRange","criticalEvents","threatCounts","counts","topThreats","map","count","sort","a","b","slice","totalEvents"],"mappings":"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"}