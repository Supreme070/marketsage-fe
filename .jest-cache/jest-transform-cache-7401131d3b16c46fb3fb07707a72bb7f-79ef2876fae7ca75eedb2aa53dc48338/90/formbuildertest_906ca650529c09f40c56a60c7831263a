985b7fc5b0ea4dbca070e3225bd3185d
/**
 * LeadPulse Form Builder Tests
 * 
 * Tests for form creation, submission, and analytics including:
 * - Form CRUD operations
 * - Form field validation and conditional logic
 * - Form submission processing
 * - Analytics and conversion tracking
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
const _server = require("next/server");
const _route = require("../../src/app/api/leadpulse/forms/route");
const _route1 = require("../../src/app/api/leadpulse/forms/[formId]/submit/route");
const _prisma = /*#__PURE__*/ _interop_require_default(require("../../src/lib/db/prisma"));
const _formBuilder = require("../../src/lib/leadpulse/formBuilder");
const _leadpulsecache = require("../../src/lib/cache/leadpulse-cache");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock dependencies
_globals.jest.mock('@/lib/db/prisma', ()=>({
        leadPulseForm: {
            create: _globals.jest.fn(),
            findUnique: _globals.jest.fn(),
            findMany: _globals.jest.fn(),
            update: _globals.jest.fn(),
            delete: _globals.jest.fn()
        },
        leadPulseFormSubmission: {
            create: _globals.jest.fn(),
            findMany: _globals.jest.fn(),
            count: _globals.jest.fn()
        },
        leadPulseSubmissionData: {
            create: _globals.jest.fn(),
            createMany: _globals.jest.fn()
        },
        leadPulseVisitor: {
            findUnique: _globals.jest.fn(),
            update: _globals.jest.fn()
        },
        contact: {
            findUnique: _globals.jest.fn(),
            create: _globals.jest.fn(),
            upsert: _globals.jest.fn()
        }
    }));
_globals.jest.mock('@/lib/cache/leadpulse-cache', ()=>({
        leadPulseCache: {
            get: _globals.jest.fn(),
            set: _globals.jest.fn(),
            del: _globals.jest.fn(),
            incrementCounter: _globals.jest.fn()
        }
    }));
_globals.jest.mock('next-auth', ()=>({
        getServerSession: _globals.jest.fn(()=>Promise.resolve({
                user: {
                    id: 'user123',
                    email: 'test@example.com'
                }
            }))
    }));
// Helper function to create NextRequest
function createNextRequest(method, url, body) {
    return new _server.NextRequest(url, {
        method,
        headers: {
            'Content-Type': 'application/json'
        },
        body: body ? JSON.stringify(body) : undefined
    });
}
(0, _globals.describe)('LeadPulse Form Builder', ()=>{
    (0, _globals.beforeEach)(()=>{
        _globals.jest.clearAllMocks();
    });
    (0, _globals.describe)('Form Creation (POST /api/leadpulse/forms)', ()=>{
        (0, _globals.test)('should create a new form with valid data', async ()=>{
            const formData = {
                name: 'Contact Form',
                description: 'Primary contact form for lead capture',
                fields: [
                    {
                        id: 'name',
                        type: _formBuilder.FormFieldType.TEXT,
                        label: 'Full Name',
                        placeholder: 'Enter your full name',
                        required: true,
                        validation: {
                            minLength: 2,
                            maxLength: 100
                        }
                    },
                    {
                        id: 'email',
                        type: _formBuilder.FormFieldType.EMAIL,
                        label: 'Email Address',
                        placeholder: 'Enter your email',
                        required: true,
                        validation: {
                            pattern: '^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$'
                        }
                    },
                    {
                        id: 'company',
                        type: _formBuilder.FormFieldType.TEXT,
                        label: 'Company',
                        placeholder: 'Your company name',
                        required: false
                    },
                    {
                        id: 'message',
                        type: _formBuilder.FormFieldType.TEXTAREA,
                        label: 'Message',
                        placeholder: 'Tell us about your needs',
                        required: true,
                        validation: {
                            minLength: 10,
                            maxLength: 1000
                        }
                    }
                ],
                styling: {
                    theme: 'light',
                    primaryColor: '#007bff',
                    backgroundColor: '#ffffff',
                    borderRadius: 8
                },
                settings: {
                    successMessage: 'Thank you for your submission!',
                    redirectUrl: 'https://example.com/thank-you',
                    emailNotifications: true,
                    autoResponder: {
                        enabled: true,
                        subject: 'Thank you for contacting us',
                        message: 'We will get back to you soon.'
                    }
                }
            };
            const mockForm = {
                id: 'form_123',
                name: formData.name,
                description: formData.description,
                fields: formData.fields,
                styling: formData.styling,
                settings: formData.settings,
                status: 'active',
                createdAt: new Date(),
                updatedAt: new Date(),
                userId: 'user123'
            };
            _prisma.default.leadPulseForm.create.mockResolvedValue(mockForm);
            const request = createNextRequest('POST', 'http://localhost:3000/api/leadpulse/forms', formData);
            const response = await (0, _route.POST)(request);
            const responseData = await response.json();
            (0, _globals.expect)(response.status).toBe(201);
            (0, _globals.expect)(responseData.success).toBe(true);
            (0, _globals.expect)(responseData.formId).toBe('form_123');
            (0, _globals.expect)(responseData.embedCode).toContain('form_123');
            // Verify database call
            (0, _globals.expect)(_prisma.default.leadPulseForm.create).toHaveBeenCalledWith({
                data: _globals.expect.objectContaining({
                    name: formData.name,
                    description: formData.description,
                    fields: formData.fields,
                    styling: formData.styling,
                    settings: formData.settings,
                    userId: 'user123',
                    status: 'active'
                })
            });
        });
        (0, _globals.test)('should validate required fields', async ()=>{
            const invalidForms = [
                {
                    description: 'missing name',
                    data: {
                        description: 'Test form',
                        fields: []
                    }
                },
                {
                    description: 'empty fields array',
                    data: {
                        name: 'Test Form',
                        description: 'Test form',
                        fields: []
                    }
                },
                {
                    description: 'invalid field type',
                    data: {
                        name: 'Test Form',
                        fields: [
                            {
                                id: 'test',
                                type: 'INVALID_TYPE',
                                label: 'Test',
                                required: true
                            }
                        ]
                    }
                },
                {
                    description: 'missing field label',
                    data: {
                        name: 'Test Form',
                        fields: [
                            {
                                id: 'test',
                                type: _formBuilder.FormFieldType.TEXT,
                                required: true
                            }
                        ]
                    }
                }
            ];
            for (const invalidForm of invalidForms){
                const request = createNextRequest('POST', 'http://localhost:3000/api/leadpulse/forms', invalidForm.data);
                const response = await (0, _route.POST)(request);
                const responseData = await response.json();
                (0, _globals.expect)(response.status).toBe(400);
                (0, _globals.expect)(responseData.success).toBe(false);
                (0, _globals.expect)(responseData.error).toBeDefined();
            }
        });
        (0, _globals.test)('should generate proper embed code', async ()=>{
            const formData = {
                name: 'Simple Form',
                fields: [
                    {
                        id: 'email',
                        type: _formBuilder.FormFieldType.EMAIL,
                        label: 'Email',
                        required: true
                    }
                ]
            };
            const mockForm = {
                id: 'form_embed_test',
                ...formData,
                userId: 'user123',
                status: 'active',
                createdAt: new Date(),
                updatedAt: new Date()
            };
            _prisma.default.leadPulseForm.create.mockResolvedValue(mockForm);
            const request = createNextRequest('POST', 'http://localhost:3000/api/leadpulse/forms', formData);
            const response = await (0, _route.POST)(request);
            const responseData = await response.json();
            (0, _globals.expect)(responseData.embedCode).toContain('form_embed_test');
            (0, _globals.expect)(responseData.embedCode).toContain('<div id="leadpulse-form-container">');
            (0, _globals.expect)(responseData.embedCode).toContain('<script>');
            (0, _globals.expect)(responseData.embedCode).toContain('leadpulse-form.js');
        });
    });
    (0, _globals.describe)('Form Retrieval (GET /api/leadpulse/forms)', ()=>{
        (0, _globals.test)('should list user forms with filters', async ()=>{
            const mockForms = [
                {
                    id: 'form_1',
                    name: 'Contact Form',
                    description: 'Main contact form',
                    status: 'active',
                    fields: [],
                    createdAt: new Date(),
                    analytics: {
                        totalViews: 150,
                        totalSubmissions: 12,
                        conversionRate: 8.0
                    }
                },
                {
                    id: 'form_2',
                    name: 'Newsletter Signup',
                    description: 'Newsletter subscription',
                    status: 'active',
                    fields: [],
                    createdAt: new Date(),
                    analytics: {
                        totalViews: 300,
                        totalSubmissions: 45,
                        conversionRate: 15.0
                    }
                }
            ];
            _prisma.default.leadPulseForm.findMany.mockResolvedValue(mockForms);
            const request = createNextRequest('GET', 'http://localhost:3000/api/leadpulse/forms?status=active');
            const response = await (0, _route.GET)(request);
            const responseData = await response.json();
            (0, _globals.expect)(response.status).toBe(200);
            (0, _globals.expect)(responseData.success).toBe(true);
            (0, _globals.expect)(responseData.forms).toHaveLength(2);
            (0, _globals.expect)(responseData.total).toBe(2);
            // Verify database query with filters
            (0, _globals.expect)(_prisma.default.leadPulseForm.findMany).toHaveBeenCalledWith({
                where: {
                    userId: 'user123',
                    status: 'active'
                },
                orderBy: {
                    createdAt: 'desc'
                },
                include: _globals.expect.objectContaining({
                    _count: _globals.expect.any(Object)
                })
            });
        });
        (0, _globals.test)('should search forms by name', async ()=>{
            const request = createNextRequest('GET', 'http://localhost:3000/api/leadpulse/forms?search=contact');
            await (0, _route.GET)(request);
            (0, _globals.expect)(_prisma.default.leadPulseForm.findMany).toHaveBeenCalledWith({
                where: {
                    userId: 'user123',
                    OR: [
                        {
                            name: {
                                contains: 'contact',
                                mode: 'insensitive'
                            }
                        },
                        {
                            description: {
                                contains: 'contact',
                                mode: 'insensitive'
                            }
                        }
                    ]
                },
                orderBy: {
                    createdAt: 'desc'
                },
                include: _globals.expect.any(Object)
            });
        });
    });
    (0, _globals.describe)('Form Updates (PUT /api/leadpulse/forms/{id})', ()=>{
        (0, _globals.test)('should update form successfully', async ()=>{
            const formId = 'form_update_test';
            const updateData = {
                name: 'Updated Contact Form',
                description: 'Updated description',
                fields: [
                    {
                        id: 'name',
                        type: _formBuilder.FormFieldType.TEXT,
                        label: 'Full Name',
                        required: true
                    },
                    {
                        id: 'email',
                        type: _formBuilder.FormFieldType.EMAIL,
                        label: 'Email Address',
                        required: true
                    }
                ],
                styling: {
                    theme: 'dark',
                    primaryColor: '#28a745'
                }
            };
            const existingForm = {
                id: formId,
                name: 'Contact Form',
                userId: 'user123',
                status: 'active'
            };
            const updatedForm = {
                ...existingForm,
                ...updateData,
                updatedAt: new Date()
            };
            _prisma.default.leadPulseForm.findUnique.mockResolvedValue(existingForm);
            _prisma.default.leadPulseForm.update.mockResolvedValue(updatedForm);
            const request = createNextRequest('PUT', `http://localhost:3000/api/leadpulse/forms/${formId}`, updateData);
            const response = await (0, _route.PUT)(request);
            const responseData = await response.json();
            (0, _globals.expect)(response.status).toBe(200);
            (0, _globals.expect)(responseData.success).toBe(true);
            // Verify update call
            (0, _globals.expect)(_prisma.default.leadPulseForm.update).toHaveBeenCalledWith({
                where: {
                    id: formId,
                    userId: 'user123'
                },
                data: _globals.expect.objectContaining({
                    name: updateData.name,
                    description: updateData.description,
                    fields: updateData.fields,
                    styling: updateData.styling
                })
            });
            // Verify cache invalidation
            (0, _globals.expect)(_leadpulsecache.leadPulseCache.del).toHaveBeenCalledWith(`form:${formId}`);
        });
        (0, _globals.test)('should not allow updating non-owned forms', async ()=>{
            const formId = 'form_not_owned';
            _prisma.default.leadPulseForm.findUnique.mockResolvedValue(null);
            const request = createNextRequest('PUT', `http://localhost:3000/api/leadpulse/forms/${formId}`, {
                name: 'Hacked Form'
            });
            const response = await (0, _route.PUT)(request);
            const responseData = await response.json();
            (0, _globals.expect)(response.status).toBe(404);
            (0, _globals.expect)(responseData.success).toBe(false);
            (0, _globals.expect)(responseData.error).toBe('Form not found');
        });
    });
    (0, _globals.describe)('Form Deletion (DELETE /api/leadpulse/forms/{id})', ()=>{
        (0, _globals.test)('should delete form and related data', async ()=>{
            const formId = 'form_delete_test';
            const existingForm = {
                id: formId,
                name: 'Form to Delete',
                userId: 'user123',
                status: 'active'
            };
            _prisma.default.leadPulseForm.findUnique.mockResolvedValue(existingForm);
            _prisma.default.leadPulseForm.delete.mockResolvedValue(existingForm);
            const request = createNextRequest('DELETE', `http://localhost:3000/api/leadpulse/forms/${formId}`);
            const response = await (0, _route.DELETE)(request);
            const responseData = await response.json();
            (0, _globals.expect)(response.status).toBe(200);
            (0, _globals.expect)(responseData.success).toBe(true);
            // Verify deletion
            (0, _globals.expect)(_prisma.default.leadPulseForm.delete).toHaveBeenCalledWith({
                where: {
                    id: formId,
                    userId: 'user123'
                }
            });
            // Verify cache cleanup
            (0, _globals.expect)(_leadpulsecache.leadPulseCache.del).toHaveBeenCalledWith(`form:${formId}`);
        });
    });
    (0, _globals.describe)('Form Submission (POST /api/leadpulse/forms/{formId}/submit)', ()=>{
        (0, _globals.test)('should process valid form submission', async ()=>{
            const formId = 'form_submit_test';
            const submissionData = {
                data: {
                    name: 'John Doe',
                    email: 'john@example.com',
                    company: 'Example Corp',
                    message: 'I am interested in your services'
                },
                metadata: {
                    visitorId: 'visitor_123',
                    fingerprint: 'fp_123456',
                    url: 'https://example.com/contact',
                    userAgent: 'Mozilla/5.0...'
                }
            };
            const mockForm = {
                id: formId,
                name: 'Contact Form',
                fields: [
                    {
                        id: 'name',
                        type: _formBuilder.FormFieldType.TEXT,
                        label: 'Full Name',
                        required: true,
                        validation: {
                            minLength: 2,
                            maxLength: 100
                        }
                    },
                    {
                        id: 'email',
                        type: _formBuilder.FormFieldType.EMAIL,
                        label: 'Email',
                        required: true
                    },
                    {
                        id: 'company',
                        type: _formBuilder.FormFieldType.TEXT,
                        label: 'Company',
                        required: false
                    },
                    {
                        id: 'message',
                        type: _formBuilder.FormFieldType.TEXTAREA,
                        label: 'Message',
                        required: true,
                        validation: {
                            minLength: 10
                        }
                    }
                ],
                settings: {
                    emailNotifications: true,
                    autoResponder: {
                        enabled: true,
                        subject: 'Thank you',
                        message: 'We received your message'
                    }
                },
                status: 'active',
                userId: 'user123'
            };
            const mockSubmission = {
                id: 'submission_123',
                formId,
                data: submissionData.data,
                visitorId: submissionData.metadata.visitorId,
                submittedAt: new Date()
            };
            const mockVisitor = {
                id: 'visitor_123',
                score: 45,
                isConverted: false
            };
            _prisma.default.leadPulseForm.findUnique.mockResolvedValue(mockForm);
            _prisma.default.leadPulseFormSubmission.create.mockResolvedValue(mockSubmission);
            _prisma.default.leadPulseVisitor.findUnique.mockResolvedValue(mockVisitor);
            _prisma.default.leadPulseVisitor.update.mockResolvedValue({
                ...mockVisitor,
                score: 75,
                isConverted: true
            });
            _prisma.default.contact.upsert.mockResolvedValue({
                id: 'contact_123',
                email: submissionData.data.email,
                firstName: 'John',
                lastName: 'Doe'
            });
            const request = createNextRequest('POST', `http://localhost:3000/api/leadpulse/forms/${formId}/submit`, submissionData);
            // Mock the route handler context
            const context = {
                params: {
                    formId
                }
            };
            const response = await (0, _route1.POST)(request, context);
            const responseData = await response.json();
            (0, _globals.expect)(response.status).toBe(200);
            (0, _globals.expect)(responseData.success).toBe(true);
            (0, _globals.expect)(responseData.submissionId).toBe('submission_123');
            // Verify form submission was created
            (0, _globals.expect)(_prisma.default.leadPulseFormSubmission.create).toHaveBeenCalledWith({
                data: _globals.expect.objectContaining({
                    formId,
                    data: submissionData.data,
                    visitorId: submissionData.metadata.visitorId,
                    fingerprint: submissionData.metadata.fingerprint,
                    url: submissionData.metadata.url,
                    userAgent: submissionData.metadata.userAgent
                })
            });
            // Verify visitor score was updated
            (0, _globals.expect)(_prisma.default.leadPulseVisitor.update).toHaveBeenCalledWith({
                where: {
                    id: 'visitor_123'
                },
                data: _globals.expect.objectContaining({
                    score: _globals.expect.any(Number),
                    isConverted: true
                })
            });
            // Verify contact was created/updated
            (0, _globals.expect)(_prisma.default.contact.upsert).toHaveBeenCalledWith({
                where: {
                    email: submissionData.data.email
                },
                update: _globals.expect.any(Object),
                create: _globals.expect.any(Object)
            });
        });
        (0, _globals.test)('should validate form fields', async ()=>{
            const formId = 'form_validation_test';
            const invalidSubmissions = [
                {
                    description: 'missing required field',
                    data: {
                        data: {
                            name: 'John Doe'
                        },
                        metadata: {
                            visitorId: 'visitor_123'
                        }
                    }
                },
                {
                    description: 'invalid email format',
                    data: {
                        data: {
                            name: 'John Doe',
                            email: 'invalid-email'
                        },
                        metadata: {
                            visitorId: 'visitor_123'
                        }
                    }
                },
                {
                    description: 'text too short',
                    data: {
                        data: {
                            name: 'A',
                            email: 'john@example.com'
                        },
                        metadata: {
                            visitorId: 'visitor_123'
                        }
                    }
                },
                {
                    description: 'text too long',
                    data: {
                        data: {
                            name: 'A'.repeat(101),
                            email: 'john@example.com'
                        },
                        metadata: {
                            visitorId: 'visitor_123'
                        }
                    }
                }
            ];
            const mockForm = {
                id: formId,
                fields: [
                    {
                        id: 'name',
                        type: _formBuilder.FormFieldType.TEXT,
                        label: 'Name',
                        required: true,
                        validation: {
                            minLength: 2,
                            maxLength: 100
                        }
                    },
                    {
                        id: 'email',
                        type: _formBuilder.FormFieldType.EMAIL,
                        label: 'Email',
                        required: true
                    }
                ],
                status: 'active'
            };
            _prisma.default.leadPulseForm.findUnique.mockResolvedValue(mockForm);
            for (const invalidSubmission of invalidSubmissions){
                const request = createNextRequest('POST', `http://localhost:3000/api/leadpulse/forms/${formId}/submit`, invalidSubmission.data);
                const context = {
                    params: {
                        formId
                    }
                };
                const response = await (0, _route1.POST)(request, context);
                const responseData = await response.json();
                (0, _globals.expect)(response.status).toBe(400);
                (0, _globals.expect)(responseData.success).toBe(false);
                (0, _globals.expect)(responseData.error).toBeDefined();
                (0, _globals.expect)(responseData.validationErrors).toBeDefined();
            }
        });
        (0, _globals.test)('should handle inactive forms', async ()=>{
            const formId = 'form_inactive_test';
            const inactiveForm = {
                id: formId,
                name: 'Inactive Form',
                status: 'archived',
                fields: []
            };
            _prisma.default.leadPulseForm.findUnique.mockResolvedValue(inactiveForm);
            const request = createNextRequest('POST', `http://localhost:3000/api/leadpulse/forms/${formId}/submit`, {
                data: {
                    email: 'test@example.com'
                },
                metadata: {
                    visitorId: 'visitor_123'
                }
            });
            const context = {
                params: {
                    formId
                }
            };
            const response = await (0, _route1.POST)(request, context);
            const responseData = await response.json();
            (0, _globals.expect)(response.status).toBe(400);
            (0, _globals.expect)(responseData.success).toBe(false);
            (0, _globals.expect)(responseData.error).toBe('Form is not active');
        });
        (0, _globals.test)('should handle non-existent forms', async ()=>{
            const formId = 'non_existent_form';
            _prisma.default.leadPulseForm.findUnique.mockResolvedValue(null);
            const request = createNextRequest('POST', `http://localhost:3000/api/leadpulse/forms/${formId}/submit`, {
                data: {
                    email: 'test@example.com'
                },
                metadata: {
                    visitorId: 'visitor_123'
                }
            });
            const context = {
                params: {
                    formId
                }
            };
            const response = await (0, _route1.POST)(request, context);
            const responseData = await response.json();
            (0, _globals.expect)(response.status).toBe(404);
            (0, _globals.expect)(responseData.success).toBe(false);
            (0, _globals.expect)(responseData.error).toBe('Form not found');
        });
    });
    (0, _globals.describe)('Form Analytics', ()=>{
        (0, _globals.test)('should calculate form analytics correctly', async ()=>{
            const formId = 'form_analytics_test';
            // Mock form submission counts
            _prisma.default.leadPulseFormSubmission.count.mockResolvedValueOnce(25) // total submissions
            .mockResolvedValueOnce(250); // total views (would be tracked separately)
            const mockSubmissions = [
                {
                    id: 'sub_1',
                    submittedAt: new Date(),
                    data: {
                        email: 'user1@example.com'
                    }
                },
                {
                    id: 'sub_2',
                    submittedAt: new Date(),
                    data: {
                        email: 'user2@example.com'
                    }
                }
            ];
            _prisma.default.leadPulseFormSubmission.findMany.mockResolvedValue(mockSubmissions);
            // Test form analytics calculation
            const analytics = await _formBuilder.formBuilder.calculateFormAnalytics(formId);
            (0, _globals.expect)(analytics).toEqual({
                totalSubmissions: 25,
                totalViews: _globals.expect.any(Number),
                conversionRate: _globals.expect.any(Number),
                avgCompletionTime: _globals.expect.any(Number),
                recentSubmissions: mockSubmissions
            });
            (0, _globals.expect)(analytics.conversionRate).toBeGreaterThan(0);
            (0, _globals.expect)(analytics.conversionRate).toBeLessThanOrEqual(100);
        });
        (0, _globals.test)('should track form field dropoff rates', async ()=>{
            const formId = 'form_dropoff_test';
            // Mock submission data for dropoff analysis
            const mockSubmissions = [
                {
                    data: {
                        name: 'John',
                        email: 'john@example.com'
                    }
                },
                {
                    data: {
                        name: 'Jane'
                    }
                },
                {
                    data: {
                        name: 'Bob',
                        email: 'bob@example.com',
                        company: 'ABC'
                    }
                }
            ];
            _prisma.default.leadPulseFormSubmission.findMany.mockResolvedValue(mockSubmissions);
            const dropoffAnalysis = await _formBuilder.formBuilder.analyzeFieldDropoff(formId);
            (0, _globals.expect)(dropoffAnalysis).toEqual({
                totalAttempts: 3,
                fieldDropoffs: [
                    {
                        fieldId: 'name',
                        completionRate: 100,
                        dropoffRate: 0
                    },
                    {
                        fieldId: 'email',
                        completionRate: 66.67,
                        dropoffRate: 33.33
                    },
                    {
                        fieldId: 'company',
                        completionRate: 33.33,
                        dropoffRate: 66.67
                    }
                ]
            });
        });
    });
    (0, _globals.describe)('Conditional Logic', ()=>{
        (0, _globals.test)('should validate conditional field logic', async ()=>{
            const formWithConditionalFields = {
                id: 'conditional_form',
                fields: [
                    {
                        id: 'contact_reason',
                        type: _formBuilder.FormFieldType.SELECT,
                        label: 'Reason for Contact',
                        required: true,
                        options: [
                            {
                                value: 'sales',
                                label: 'Sales Inquiry'
                            },
                            {
                                value: 'support',
                                label: 'Support Request'
                            },
                            {
                                value: 'other',
                                label: 'Other'
                            }
                        ]
                    },
                    {
                        id: 'budget',
                        type: _formBuilder.FormFieldType.SELECT,
                        label: 'Budget Range',
                        required: true,
                        conditionalLogic: {
                            showIf: {
                                field: 'contact_reason',
                                operator: 'equals',
                                value: 'sales'
                            }
                        },
                        options: [
                            {
                                value: '1k-5k',
                                label: '$1,000 - $5,000'
                            },
                            {
                                value: '5k-10k',
                                label: '$5,000 - $10,000'
                            },
                            {
                                value: '10k+',
                                label: '$10,000+'
                            }
                        ]
                    },
                    {
                        id: 'issue_description',
                        type: _formBuilder.FormFieldType.TEXTAREA,
                        label: 'Describe Your Issue',
                        required: true,
                        conditionalLogic: {
                            showIf: {
                                field: 'contact_reason',
                                operator: 'equals',
                                value: 'support'
                            }
                        }
                    }
                ],
                status: 'active'
            };
            _prisma.default.leadPulseForm.findUnique.mockResolvedValue(formWithConditionalFields);
            // Test sales inquiry submission (should require budget)
            const salesSubmission = {
                data: {
                    contact_reason: 'sales',
                    budget: '5k-10k'
                },
                metadata: {
                    visitorId: 'visitor_123'
                }
            };
            const request1 = createNextRequest('POST', 'http://localhost:3000/api/leadpulse/forms/conditional_form/submit', salesSubmission);
            const context1 = {
                params: {
                    formId: 'conditional_form'
                }
            };
            const response1 = await (0, _route1.POST)(request1, context1);
            (0, _globals.expect)(response1.status).toBe(200); // Should succeed
            // Test sales inquiry without budget (should fail)
            const salesSubmissionNoBudget = {
                data: {
                    contact_reason: 'sales'
                },
                metadata: {
                    visitorId: 'visitor_123'
                }
            };
            const request2 = createNextRequest('POST', 'http://localhost:3000/api/leadpulse/forms/conditional_form/submit', salesSubmissionNoBudget);
            const context2 = {
                params: {
                    formId: 'conditional_form'
                }
            };
            const response2 = await (0, _route1.POST)(request2, context2);
            (0, _globals.expect)(response2.status).toBe(400); // Should fail validation
            // Test support submission (should require issue_description)
            const supportSubmission = {
                data: {
                    contact_reason: 'support',
                    issue_description: 'My account is not working properly'
                },
                metadata: {
                    visitorId: 'visitor_123'
                }
            };
            const request3 = createNextRequest('POST', 'http://localhost:3000/api/leadpulse/forms/conditional_form/submit', supportSubmission);
            const context3 = {
                params: {
                    formId: 'conditional_form'
                }
            };
            const response3 = await (0, _route1.POST)(request3, context3);
            (0, _globals.expect)(response3.status).toBe(200); // Should succeed
        });
    });
    (0, _globals.afterEach)(()=>{
        _globals.jest.clearAllMocks();
    });
});

//# sourceMappingURL=data:application/json;base64,