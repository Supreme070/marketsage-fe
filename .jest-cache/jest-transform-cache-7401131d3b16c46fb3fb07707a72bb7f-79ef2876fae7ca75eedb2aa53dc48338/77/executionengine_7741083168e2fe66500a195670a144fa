35f88dd7b3b139c67cad6ce9528cf0be
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    WorkflowExecutionEngine: function() {
        return WorkflowExecutionEngine;
    },
    workflowEngine: function() {
        return workflowEngine;
    }
});
const _prisma = /*#__PURE__*/ _interop_require_default(require("../db/prisma"));
const _logger = require("../logger");
const _queue = require("../queue");
const _emailservice = require("../email-service");
const _smsservice = require("../sms-service");
const _abtestingservice = require("./ab-testing-service");
const _retrymechanism = require("./retry-mechanism");
const _costtracking = require("./cost-tracking");
const _uuid = require("uuid");
const _ratelimiter = require("../rate-limiter");
const _apiintegrationnodes = require("./api-integration-nodes");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
class WorkflowExecutionEngine {
    /**
   * Start a new workflow execution for a contact
   */ async startWorkflowExecution(workflowId, contactId, triggerData) {
        try {
            // Check rate limits before starting workflow
            const rateLimitCheck = await (0, _ratelimiter.checkMultipleRateLimits)([
                {
                    limiter: _ratelimiter.workflowRateLimiter,
                    identifier: contactId,
                    name: 'user_workflow'
                },
                {
                    limiter: _ratelimiter.systemWorkflowRateLimiter,
                    identifier: 'global',
                    name: 'system_workflow'
                }
            ]);
            if (!rateLimitCheck.allowed) {
                const error = `Workflow rate limit exceeded: ${rateLimitCheck.failedCheck}`;
                _logger.logger.warn(error, {
                    workflowId,
                    contactId,
                    rateLimitCheck
                });
                throw new Error(error);
            }
            // Check if execution already exists
            const existingExecution = await _prisma.default.workflowExecution.findUnique({
                where: {
                    workflowId_contactId: {
                        workflowId,
                        contactId
                    }
                }
            });
            if (existingExecution && existingExecution.status === 'RUNNING') {
                _logger.logger.info(`Workflow execution already running`, {
                    workflowId,
                    contactId
                });
                return existingExecution.id;
            }
            // Get workflow and contact data
            const [workflow, contact] = await Promise.all([
                _prisma.default.workflow.findUnique({
                    where: {
                        id: workflowId
                    }
                }),
                _prisma.default.contact.findUnique({
                    where: {
                        id: contactId
                    }
                })
            ]);
            if (!workflow || !contact) {
                throw new Error(`Workflow or contact not found: ${workflowId}, ${contactId}`);
            }
            if (workflow.status !== 'ACTIVE') {
                throw new Error(`Workflow is not active: ${workflowId}`);
            }
            // Parse workflow definition
            let definition = JSON.parse(workflow.definition);
            // Check for A/B test variant (safe integration point)
            try {
                const abTestVariant = await _abtestingservice.workflowABTestingService.assignWorkflowVariant(workflowId, contactId);
                if (abTestVariant) {
                    definition = abTestVariant.workflowDefinition;
                    _logger.logger.info('Using A/B test variant for workflow execution', {
                        workflowId,
                        contactId,
                        variantId: abTestVariant.variantId
                    });
                }
            } catch (abTestError) {
                // A/B testing errors should not break workflow execution
                _logger.logger.warn('A/B test assignment failed, using original workflow', {
                    workflowId,
                    contactId,
                    error: abTestError.message
                });
            }
            // Find trigger nodes
            const triggerNodes = definition.nodes.filter((node1)=>node1.type === 'triggerNode');
            if (triggerNodes.length === 0) {
                throw new Error(`No trigger nodes found in workflow: ${workflowId}`);
            }
            // Create execution record
            const execution = await _prisma.default.workflowExecution.create({
                data: {
                    id: (0, _uuid.v4)(),
                    workflowId,
                    contactId,
                    status: 'RUNNING',
                    context: JSON.stringify({
                        triggerData: triggerData || {},
                        variables: {},
                        stepOutputs: {},
                        rateLimits: rateLimitCheck.results
                    }),
                    startedAt: new Date()
                }
            });
            // Start from the first trigger node
            const firstTrigger = triggerNodes[0];
            await this.executeStep(execution.id, firstTrigger.id);
            _logger.logger.info(`Started workflow execution`, {
                executionId: execution.id,
                workflowId,
                contactId,
                remainingWorkflowLimits: rateLimitCheck.results
            });
            return execution.id;
        } catch (error) {
            _logger.logger.error('Failed to start workflow execution', {
                error,
                workflowId,
                contactId
            });
            throw error;
        }
    }
    /**
   * Execute a workflow step retry (called from retry queue)
   */ async executeWorkflowStep(executionId, stepId) {
        _logger.logger.info('Executing workflow step retry', {
            executionId,
            stepId
        });
        try {
            // Get execution to ensure it's still valid
            const execution = await _prisma.default.workflowExecution.findUnique({
                where: {
                    id: executionId
                },
                select: {
                    status: true
                }
            });
            if (!execution) {
                throw new Error(`Execution not found: ${executionId}`);
            }
            if (execution.status !== 'RUNNING') {
                _logger.logger.warn('Skipping retry for non-running execution', {
                    executionId,
                    status: execution.status
                });
                return;
            }
            // Execute the step
            await this.executeStep(executionId, stepId);
        } catch (error) {
            _logger.logger.error('Failed to execute workflow step retry', {
                error,
                executionId,
                stepId
            });
            throw error;
        }
    }
    /**
   * Execute a specific workflow step
   */ async executeStep(executionId, stepId) {
        try {
            // Get execution data
            const execution = await _prisma.default.workflowExecution.findUnique({
                where: {
                    id: executionId
                },
                include: {
                    workflow: true,
                    contact: true
                }
            });
            if (!execution || execution.status !== 'RUNNING') {
                _logger.logger.warn(`Execution not found or not running: ${executionId}`);
                return;
            }
            // Parse workflow definition
            const definition = JSON.parse(execution.workflow.definition);
            const node1 = definition.nodes.find((n)=>n.id === stepId);
            if (!node1) {
                throw new Error(`Step not found: ${stepId}`);
            }
            // Create step execution record
            const stepExecution = await _prisma.default.workflowExecutionStep.create({
                data: {
                    id: (0, _uuid.v4)(),
                    executionId,
                    stepId,
                    stepType: node1.type,
                    status: 'RUNNING',
                    startedAt: new Date()
                }
            });
            // Parse execution context
            const context = JSON.parse(execution.context);
            context.contact = execution.contact;
            context.workflow = execution.workflow;
            // Execute the step based on its type
            let stepResult = null;
            switch(node1.type){
                case 'triggerNode':
                    stepResult = await this.executeTriggerNode(node1, context);
                    break;
                case 'actionNode':
                    stepResult = await this.executeActionNode(node1, context);
                    break;
                case 'conditionNode':
                    stepResult = await this.executeConditionNode(node1, context);
                    break;
                case 'webhookNode':
                    stepResult = await this.executeWebhookNode(node1, context);
                    break;
                case 'databaseNode':
                    stepResult = await this.executeDatabaseNode(node1, context);
                    break;
                case 'delayNode':
                    stepResult = await this.executeDelayNode(node1, context);
                    break;
                case 'splitNode':
                    stepResult = await this.executeSplitNode(node1, context);
                    break;
                case 'transformNode':
                    stepResult = await this.executeTransformNode(node1, context);
                    break;
                case 'apiCallNode':
                    stepResult = await this.executeApiCallNode(node1, context);
                    break;
                case 'crmActionNode':
                    stepResult = await this.executeCrmActionNode(node1, context);
                    break;
                case 'paymentWebhookNode':
                    stepResult = await this.executePaymentWebhookNode(node1, context);
                    break;
                default:
                    throw new Error(`Unknown node type: ${node1.type}`);
            }
            // Update step execution
            await _prisma.default.workflowExecutionStep.update({
                where: {
                    id: stepExecution.id
                },
                data: {
                    status: 'COMPLETED',
                    completedAt: new Date(),
                    output: JSON.stringify(stepResult)
                }
            });
            // Mark step as successful in retry manager
            await _retrymechanism.workflowRetryManager.markStepSuccess(executionId, stepId);
            // Store step output in context
            context.stepOutputs[stepId] = stepResult;
            // Update execution context
            await _prisma.default.workflowExecution.update({
                where: {
                    id: executionId
                },
                data: {
                    context: JSON.stringify(context),
                    currentStepId: stepId,
                    lastExecutedAt: new Date()
                }
            });
            // Find and execute next steps
            await this.executeNextSteps(executionId, stepId, stepResult, definition);
        } catch (error) {
            _logger.logger.error('Failed to execute step', {
                error,
                executionId,
                stepId
            });
            const stepError = error instanceof Error ? error : new Error(String(error));
            // Check if step should be retried
            const shouldRetry = await _retrymechanism.workflowRetryManager.shouldRetryStep(executionId, stepId, node.type, stepError);
            if (shouldRetry) {
                _logger.logger.info('Attempting to retry failed step', {
                    executionId,
                    stepId,
                    error: stepError.message
                });
                // Schedule retry
                const retryResult = await _retrymechanism.workflowRetryManager.scheduleRetry(executionId, stepId, node.type, stepError);
                if (retryResult.scheduled) {
                    // Mark step as retrying
                    await _prisma.default.workflowExecutionStep.updateMany({
                        where: {
                            executionId,
                            stepId,
                            status: 'RUNNING'
                        },
                        data: {
                            status: 'RETRYING',
                            errorMessage: stepError.message,
                            completedAt: new Date()
                        }
                    });
                    _logger.logger.info('Step retry scheduled', {
                        executionId,
                        stepId,
                        nextRetryAt: retryResult.nextRetryAt,
                        delayMs: retryResult.delayMs
                    });
                    // Don't throw error for retryable steps
                    return;
                }
            }
            // Mark step as permanently failed
            await _prisma.default.workflowExecutionStep.updateMany({
                where: {
                    executionId,
                    stepId,
                    status: 'RUNNING'
                },
                data: {
                    status: 'FAILED',
                    errorMessage: stepError.message,
                    completedAt: new Date()
                }
            });
            // Mark entire execution as failed if step cannot be retried
            await _prisma.default.workflowExecution.update({
                where: {
                    id: executionId
                },
                data: {
                    status: 'FAILED',
                    error: `Step ${stepId} failed: ${stepError.message}`,
                    completedAt: new Date()
                }
            });
            throw error;
        }
    }
    /**
   * Execute trigger node (usually just passes through)
   */ async executeTriggerNode(node1, context) {
        _logger.logger.info(`Executing trigger node: ${node1.id}`, {
            trigger: node1.data.label,
            contactId: context.contact.id
        });
        return {
            triggered: true,
            triggerType: node1.data.properties?.type || 'unknown',
            timestamp: new Date().toISOString()
        };
    }
    /**
   * Execute action node (email, SMS, WhatsApp, wait, etc.)
   */ async executeActionNode(node1, context) {
        const action = node1.data.label.toLowerCase();
        const properties = node1.data.properties || {};
        _logger.logger.info(`Executing action node: ${node1.id}`, {
            action: node1.data.label,
            contactId: context.contact.id
        });
        if (action.includes('email')) {
            return await this.executeEmailAction(properties, context);
        } else if (action.includes('sms')) {
            return await this.executeSMSAction(properties, context);
        } else if (action.includes('whatsapp')) {
            return await this.executeWhatsAppAction(properties, context);
        } else if (action.includes('wait')) {
            return await this.executeWaitAction(properties, context);
        } else if (action.includes('tag')) {
            return await this.executeTagAction(properties, context);
        }
        throw new Error(`Unknown action type: ${action}`);
    }
    /**
   * Execute condition node (branching logic)
   */ async executeConditionNode(node1, context) {
        const properties = node1.data.properties || {};
        _logger.logger.info(`Executing condition node: ${node1.id}`, {
            condition: node1.data.label,
            contactId: context.contact.id
        });
        // Evaluate condition based on type
        let conditionResult = false;
        if (properties.conditionType === 'email') {
            conditionResult = await this.evaluateEmailCondition(properties, context);
        } else if (properties.conditionType === 'custom') {
            conditionResult = await this.evaluateCustomCondition(properties, context);
        } else if (properties.conditionType === 'contact_property') {
            conditionResult = await this.evaluateContactPropertyCondition(properties, context);
        }
        return {
            conditionMet: conditionResult,
            conditionType: properties.conditionType,
            evaluatedAt: new Date().toISOString()
        };
    }
    /**
   * Execute email action with rate limiting and proper campaign tracking
   */ async executeEmailAction(properties, context) {
        // Check email rate limit
        const rateLimitResult = await _ratelimiter.emailRateLimiter.check(context.contact.id);
        if (!rateLimitResult.allowed) {
            const error = `Email rate limit exceeded for contact ${context.contact.id}. ${rateLimitResult.error}`;
            _logger.logger.warn(error, {
                contactId: context.contact.id,
                remaining: rateLimitResult.remaining,
                resetTime: new Date(rateLimitResult.resetTime)
            });
            throw new Error(error);
        }
        const subject = this.replaceVariables(properties.subject || 'MarketSage Message', context);
        const templateName = properties.templateName || 'Default Template';
        // Create or use campaign ID for proper tracking
        let campaignId = properties.campaignId;
        if (!campaignId) {
            // Create a workflow email campaign for tracking if none specified
            try {
                const workflowCampaign = await _prisma.default.emailCampaign.create({
                    data: {
                        id: `workflow-${context.workflow.id}-${Date.now()}`,
                        name: `Workflow: ${context.workflow.name} - ${templateName}`,
                        subject,
                        htmlContent: this.generateEmailContent(templateName, context),
                        textContent: this.generateEmailContent(templateName, context, true),
                        status: 'SENT',
                        fromEmail: 'noreply@marketsage.com',
                        fromName: 'MarketSage Workflow',
                        // Link to the workflow that created this campaign
                        metadata: JSON.stringify({
                            workflowId: context.workflow.id,
                            workflowName: context.workflow.name,
                            templateName,
                            createdBy: 'workflow-automation'
                        })
                    }
                });
                campaignId = workflowCampaign.id;
                _logger.logger.info('Created workflow email campaign for tracking', {
                    campaignId,
                    workflowId: context.workflow.id,
                    templateName
                });
            } catch (campaignError) {
                _logger.logger.warn('Failed to create workflow campaign, using mock ID', {
                    error: campaignError,
                    workflowId: context.workflow.id
                });
                campaignId = `workflow-${context.workflow.id}-${Date.now()}`;
            }
        }
        _logger.logger.info('Sending workflow email', {
            contactId: context.contact.id,
            campaignId,
            subject,
            templateName,
            emailsRemaining: rateLimitResult.remaining
        });
        const result = await (0, _emailservice.sendTrackedEmail)(context.contact, campaignId, {
            subject,
            from: properties.fromEmail || 'noreply@marketsage.com',
            html: this.generateEmailContent(templateName, context),
            text: this.generateEmailContent(templateName, context, true),
            metadata: {
                workflowId: context.workflow.id,
                workflowExecutionId: context.workflow.executionId,
                templateName
            }
        });
        // Track email cost if sent successfully
        if (result.success) {
            try {
                await _costtracking.workflowCostTracker.recordEmailCost(context.workflow.id, context.workflow.executionId, 1, properties.emailProvider || 'default');
            } catch (costError) {
                _logger.logger.warn('Failed to track email cost', {
                    error: costError
                });
            }
        }
        return {
            sent: result.success,
            messageId: result.messageId,
            campaignId,
            subject,
            templateName,
            rateLimitInfo: {
                remaining: rateLimitResult.remaining,
                resetTime: rateLimitResult.resetTime
            },
            error: result.error?.message
        };
    }
    /**
   * Execute SMS action with rate limiting and campaign tracking
   */ async executeSMSAction(properties, context) {
        if (!context.contact.phone) {
            throw new Error('Contact has no phone number');
        }
        // Check SMS rate limit
        const rateLimitResult = await _ratelimiter.smsRateLimiter.check(context.contact.id);
        if (!rateLimitResult.allowed) {
            const error = `SMS rate limit exceeded for contact ${context.contact.id}. ${rateLimitResult.error}`;
            _logger.logger.warn(error, {
                contactId: context.contact.id,
                remaining: rateLimitResult.remaining,
                resetTime: new Date(rateLimitResult.resetTime)
            });
            throw new Error(error);
        }
        const message = this.replaceVariables(properties.message || 'Hello from MarketSage!', context);
        const templateName = properties.templateName || 'Default SMS Template';
        // Create or use campaign ID for proper tracking
        let campaignId = properties.campaignId;
        if (!campaignId) {
            // Create a workflow SMS campaign for tracking if none specified
            try {
                const workflowCampaign = await _prisma.default.sMSCampaign.create({
                    data: {
                        id: `workflow-sms-${context.workflow.id}-${Date.now()}`,
                        name: `Workflow SMS: ${context.workflow.name} - ${templateName}`,
                        content: message,
                        status: 'SENT',
                        from: properties.fromPhone || 'MarketSage',
                        createdById: 'system',
                        // Link to the workflow that created this campaign
                        description: `SMS campaign created by workflow: ${context.workflow.name} (${context.workflow.id})`
                    }
                });
                campaignId = workflowCampaign.id;
                _logger.logger.info('Created workflow SMS campaign for tracking', {
                    campaignId,
                    workflowId: context.workflow.id,
                    templateName,
                    message: message.substring(0, 50) + '...'
                });
            } catch (campaignError) {
                _logger.logger.warn('Failed to create workflow SMS campaign, using mock ID', {
                    error: campaignError,
                    workflowId: context.workflow.id
                });
                campaignId = `workflow-sms-${context.workflow.id}-${Date.now()}`;
            }
        }
        _logger.logger.info('Sending workflow SMS', {
            contactId: context.contact.id,
            phone: context.contact.phone,
            campaignId,
            message: message.substring(0, 50) + '...',
            smsRemaining: rateLimitResult.remaining
        });
        // Send SMS using the proper SMS service
        let result;
        try {
            result = await (0, _smsservice.sendSMS)(context.contact.phone, message);
        } catch (smsError) {
            _logger.logger.error('SMS sending failed', {
                error: smsError,
                contactId: context.contact.id,
                phone: context.contact.phone,
                campaignId
            });
            result = {
                success: false,
                error: {
                    message: smsError instanceof Error ? smsError.message : 'SMS sending failed',
                    code: 'SMS_SEND_ERROR'
                }
            };
        }
        // Track SMS cost if sent successfully
        if (result.success) {
            try {
                await _costtracking.workflowCostTracker.recordSmsCost(context.workflow.id, context.workflow.executionId, 1, properties.smsProvider || 'default', properties.region || 'default');
            } catch (costError) {
                _logger.logger.warn('Failed to track SMS cost', {
                    error: costError
                });
            }
        }
        // Track SMS activity for analytics if campaign exists
        if (result.success && campaignId) {
            try {
                await _prisma.default.sMSActivity.create({
                    data: {
                        campaignId,
                        contactId: context.contact.id,
                        type: 'SENT',
                        metadata: JSON.stringify({
                            workflowId: context.workflow.id,
                            workflowExecutionId: context.workflow.executionId,
                            templateName,
                            provider: result.provider || 'unknown',
                            messageId: result.messageId
                        })
                    }
                });
                _logger.logger.info('SMS activity tracked', {
                    campaignId,
                    contactId: context.contact.id,
                    messageId: result.messageId
                });
            } catch (trackingError) {
                _logger.logger.warn('Failed to track SMS activity', {
                    error: trackingError,
                    campaignId,
                    contactId: context.contact.id
                });
            }
        }
        return {
            sent: result.success,
            messageId: result.messageId,
            campaignId,
            message,
            templateName,
            provider: result.provider,
            rateLimitInfo: {
                remaining: rateLimitResult.remaining,
                resetTime: rateLimitResult.resetTime
            },
            error: result.error?.message
        };
    }
    /**
   * Execute WhatsApp action with cost tracking
   */ async executeWhatsAppAction(properties, context) {
        if (!context.contact.phone) {
            throw new Error('Contact has no phone number');
        }
        const message = this.replaceVariables(properties.message || 'Hello from MarketSage!', context);
        const templateName = properties.templateName || 'Default WhatsApp Template';
        _logger.logger.info('Sending workflow WhatsApp message', {
            contactId: context.contact.id,
            phone: context.contact.phone,
            templateName,
            message: message.substring(0, 50) + '...'
        });
        // Mock WhatsApp sending for now - replace with actual WhatsApp service integration
        let result;
        try {
            // TODO: Replace with actual WhatsApp service call
            // result = await sendWhatsApp(context.contact.phone, message);
            result = {
                success: true,
                messageId: `whatsapp-${Date.now()}`,
                provider: 'whatsapp-business'
            };
        } catch (whatsappError) {
            _logger.logger.error('WhatsApp sending failed', {
                error: whatsappError,
                contactId: context.contact.id,
                phone: context.contact.phone
            });
            result = {
                success: false,
                error: {
                    message: whatsappError instanceof Error ? whatsappError.message : 'WhatsApp sending failed',
                    code: 'WHATSAPP_SEND_ERROR'
                }
            };
        }
        // Track WhatsApp cost if sent successfully
        if (result.success) {
            try {
                await _costtracking.workflowCostTracker.recordWhatsAppCost(context.workflow.id, context.workflow.executionId, 1, properties.whatsappProvider || 'whatsapp-business');
            } catch (costError) {
                _logger.logger.warn('Failed to track WhatsApp cost', {
                    error: costError
                });
            }
        }
        return {
            sent: result.success,
            messageId: result.messageId,
            message,
            templateName,
            provider: result.provider,
            error: result.error?.message
        };
    }
    /**
   * Execute wait action (schedule next step)
   */ async executeWaitAction(properties, context) {
        const waitAmount = properties.waitAmount || 1;
        const waitUnit = properties.waitUnit || 'days';
        let delayMs = 0;
        switch(waitUnit){
            case 'minutes':
                delayMs = waitAmount * 60 * 1000;
                break;
            case 'hours':
                delayMs = waitAmount * 60 * 60 * 1000;
                break;
            case 'days':
                delayMs = waitAmount * 24 * 60 * 60 * 1000;
                break;
            default:
                delayMs = waitAmount * 60 * 1000; // default to minutes
        }
        return {
            waitAmount,
            waitUnit,
            delayMs,
            scheduledFor: new Date(Date.now() + delayMs).toISOString()
        };
    }
    /**
   * Execute tag action
   */ async executeTagAction(properties, context) {
        const tagName = properties.tagName || properties.tag;
        if (!tagName) {
            throw new Error('No tag specified');
        }
        // For now, just log the tag action since customFields column has issues
        _logger.logger.info('Tag action executed', {
            contactId: context.contact.id,
            tagName: tagName
        });
        return {
            tagAdded: tagName,
            allTags: [
                tagName
            ]
        };
    }
    /**
   * Find and execute next steps in the workflow
   */ async executeNextSteps(executionId, currentStepId, stepResult, definition) {
        const outgoingEdges = definition.edges.filter((edge)=>edge.source === currentStepId);
        for (const edge of outgoingEdges){
            let shouldExecute = true;
            // For condition nodes, check which path to take
            if (stepResult.conditionMet !== undefined) {
                const isYesPath = edge.sourceHandle === 'yes' || edge.sourceHandle === 'true';
                const isNoPath = edge.sourceHandle === 'no' || edge.sourceHandle === 'false';
                if (isYesPath && !stepResult.conditionMet) {
                    shouldExecute = false;
                } else if (isNoPath && stepResult.conditionMet) {
                    shouldExecute = false;
                }
            }
            if (shouldExecute) {
                // For wait actions, schedule the next step
                if (stepResult.delayMs) {
                    await _queue.delayQueue.add('delayed-step', {
                        executionId,
                        stepId: edge.target,
                        delayMs: stepResult.delayMs
                    }, {
                        delay: stepResult.delayMs
                    });
                } else {
                    // Execute immediately
                    await _queue.workflowQueue.add('execute-step', {
                        executionId,
                        stepId: edge.target
                    });
                }
            }
        }
        // Check if workflow is complete (no more steps to execute)
        if (outgoingEdges.length === 0) {
            const execution = await _prisma.default.workflowExecution.update({
                where: {
                    id: executionId
                },
                data: {
                    status: 'COMPLETED',
                    completedAt: new Date()
                },
                include: {
                    workflow: true,
                    contact: true
                }
            });
            _logger.logger.info(`Workflow execution completed: ${executionId}`);
            // Record A/B test results (safe - won't break on error)
            try {
                if (execution.startedAt && execution.completedAt) {
                    const executionTime = execution.completedAt.getTime() - execution.startedAt.getTime();
                    // Record completion rate (1.0 for completed workflows)
                    await _abtestingservice.workflowABTestingService.recordWorkflowTestResult(execution.workflowId, execution.contactId, 'COMPLETION_RATE', 1.0);
                    // Record execution time
                    await _abtestingservice.workflowABTestingService.recordWorkflowTestResult(execution.workflowId, execution.contactId, 'EXECUTION_TIME', executionTime);
                }
            } catch (abTestError) {
                _logger.logger.warn('Failed to record A/B test results for completed workflow', {
                    executionId,
                    error: abTestError.message
                });
            }
        }
    }
    /**
   * Replace variables in text with actual values
   */ replaceVariables(text, context) {
        return text.replace(/\{\{contact\.firstName\}\}/g, context.contact.firstName || '').replace(/\{\{contact\.lastName\}\}/g, context.contact.lastName || '').replace(/\{\{contact\.email\}\}/g, context.contact.email || '').replace(/\{\{contact\.company\}\}/g, context.contact.company || '').replace(/\{\{workflow\.name\}\}/g, context.workflow.name || '');
    }
    /**
   * Generate email content (simplified)
   */ generateEmailContent(templateName, context, isText = false) {
        const greeting = `Hello ${context.contact.firstName || 'there'}!`;
        const signature = 'Best regards,\nThe MarketSage Team';
        if (isText) {
            return `${greeting}\n\nThis is a message from your ${templateName} workflow.\n\n${signature}`;
        }
        return `
      <html>
        <body>
          <p>${greeting}</p>
          <p>This is a message from your <strong>${templateName}</strong> workflow.</p>
          <p>${signature.replace('\n', '<br>')}</p>
        </body>
      </html>
    `;
    }
    /**
   * Evaluate email-based conditions
   */ async evaluateEmailCondition(properties, context) {
        // Check email engagement from recent activities
        const recentActivity = await _prisma.default.emailActivity.findFirst({
            where: {
                contactId: context.contact.id,
                timestamp: {
                    gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)
                }
            },
            orderBy: {
                timestamp: 'desc'
            }
        });
        if (properties.property === 'opened') {
            return recentActivity?.type === 'OPENED';
        } else if (properties.property === 'clicked') {
            return recentActivity?.type === 'CLICKED';
        }
        return false;
    }
    /**
   * Evaluate custom conditions
   */ async evaluateCustomCondition(properties, context) {
        const condition = properties.customCondition || '';
        // Simple condition evaluation (expand as needed)
        if (condition.includes('contact.events.includes')) {
            const eventType = condition.match(/'([^']+)'/)?.[1];
            if (eventType) {
                const hasEvent = await _prisma.default.workflowEvent.findFirst({
                    where: {
                        contactId: context.contact.id,
                        eventType,
                        createdAt: {
                            gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)
                        }
                    }
                });
                return !!hasEvent;
            }
        }
        return false;
    }
    /**
   * Evaluate contact property conditions
   */ async evaluateContactPropertyCondition(properties, context) {
        const property = properties.property;
        const operator = properties.operator || 'equals';
        const value = properties.value;
        const contactValue = context.contact[property];
        switch(operator){
            case 'equals':
                return contactValue === value;
            case 'not_equals':
                return contactValue !== value;
            case 'contains':
                return String(contactValue).includes(value);
            case 'exists':
                return contactValue != null && contactValue !== '';
            default:
                return false;
        }
    }
    /**
   * Execute webhook node - make HTTP requests to external APIs
   */ async executeWebhookNode(node1, context) {
        const properties = node1.data.properties || {};
        const { url, method = 'POST', headers = {}, timeout = 10000 } = properties;
        _logger.logger.info(`Executing webhook node: ${node1.id}`, {
            url: url?.substring(0, 100),
            method,
            contactId: context.contact.id
        });
        if (!url) {
            throw new Error('Webhook URL is required');
        }
        // Security validation - only allow HTTPS URLs
        if (!url.startsWith('https://')) {
            throw new Error('Only HTTPS URLs are allowed for webhook calls');
        }
        // Prepare payload with contact data and context
        const payload = {
            contact: {
                id: context.contact.id,
                email: context.contact.email,
                firstName: context.contact.firstName,
                lastName: context.contact.lastName
            },
            workflow: {
                id: context.workflow.id,
                name: context.workflow.name
            },
            variables: context.variables,
            timestamp: new Date().toISOString()
        };
        try {
            const controller = new AbortController();
            const timeoutId = setTimeout(()=>controller.abort(), timeout);
            const response = await fetch(url, {
                method,
                headers: {
                    'Content-Type': 'application/json',
                    'User-Agent': 'MarketSage-Workflow/1.0',
                    ...headers
                },
                body: method !== 'GET' ? JSON.stringify(payload) : undefined,
                signal: controller.signal
            });
            clearTimeout(timeoutId);
            const responseData = response.ok ? await response.json() : null;
            // Track webhook cost if successful
            if (response.ok) {
                try {
                    await _costtracking.workflowCostTracker.recordApiCost(context.workflow.id, context.workflow.executionId, 1, 'webhook', url);
                } catch (costError) {
                    _logger.logger.warn('Failed to track webhook cost', {
                        error: costError
                    });
                }
            }
            return {
                success: response.ok,
                status: response.status,
                statusText: response.statusText,
                data: responseData,
                executedAt: new Date().toISOString()
            };
        } catch (error) {
            _logger.logger.error('Webhook execution failed', {
                error,
                url: url.substring(0, 50)
            });
            return {
                success: false,
                error: error instanceof Error ? error.message : 'Unknown error',
                executedAt: new Date().toISOString()
            };
        }
    }
    /**
   * Execute database node - perform safe database operations
   */ async executeDatabaseNode(node1, context) {
        const properties = node1.data.properties || {};
        const { operation, table, data, conditions } = properties;
        _logger.logger.info(`Executing database node: ${node1.id}`, {
            operation,
            table,
            contactId: context.contact.id
        });
        // Security: only allow specific operations and tables
        const allowedOperations = [
            'read',
            'update_contact',
            'create_activity'
        ];
        const allowedTables = [
            'contact',
            'emailActivity',
            'workflowExecution'
        ];
        if (!allowedOperations.includes(operation)) {
            throw new Error(`Database operation '${operation}' is not allowed`);
        }
        if (!allowedTables.includes(table)) {
            throw new Error(`Database table '${table}' is not allowed`);
        }
        try {
            let result;
            switch(operation){
                case 'read':
                    if (table === 'contact') {
                        result = await _prisma.default.contact.findUnique({
                            where: {
                                id: context.contact.id
                            },
                            select: {
                                id: true,
                                email: true,
                                firstName: true,
                                lastName: true,
                                leadScore: true,
                                tags: true,
                                createdAt: true
                            }
                        });
                    }
                    break;
                case 'update_contact':
                    // Only allow safe field updates
                    const safeUpdateData = {};
                    if (data.tags) safeUpdateData.tags = data.tags;
                    if (data.leadScore) safeUpdateData.leadScore = Math.max(0, Math.min(100, data.leadScore));
                    if (data.customFields) safeUpdateData.customFields = data.customFields;
                    result = await _prisma.default.contact.update({
                        where: {
                            id: context.contact.id
                        },
                        data: safeUpdateData
                    });
                    break;
                case 'create_activity':
                    result = await _prisma.default.emailActivity.create({
                        data: {
                            id: `workflow-${context.workflow.id}-${Date.now()}`,
                            contactId: context.contact.id,
                            campaignId: data.campaignId || `workflow-${context.workflow.id}`,
                            type: data.type || 'WORKFLOW_ACTION',
                            metadata: JSON.stringify({
                                workflowId: context.workflow.id,
                                nodeId: node1.id,
                                ...data.metadata
                            })
                        }
                    });
                    break;
                default:
                    throw new Error(`Unsupported database operation: ${operation}`);
            }
            return {
                success: true,
                operation,
                result,
                executedAt: new Date().toISOString()
            };
        } catch (error) {
            _logger.logger.error('Database operation failed', {
                error,
                operation,
                table
            });
            return {
                success: false,
                error: error instanceof Error ? error.message : 'Database operation failed',
                executedAt: new Date().toISOString()
            };
        }
    }
    /**
   * Execute delay node - schedule future execution
   */ async executeDelayNode(node1, context) {
        const properties = node1.data.properties || {};
        const { delayType, delayValue, delayUnit = 'minutes' } = properties;
        _logger.logger.info(`Executing delay node: ${node1.id}`, {
            delayType,
            delayValue,
            delayUnit,
            contactId: context.contact.id
        });
        let delayMs = 0;
        if (delayType === 'fixed') {
            const multipliers = {
                seconds: 1000,
                minutes: 60 * 1000,
                hours: 60 * 60 * 1000,
                days: 24 * 60 * 60 * 1000
            };
            const multiplier = multipliers[delayUnit] || multipliers.minutes;
            delayMs = delayValue * multiplier;
            // Limit maximum delay to 30 days for safety
            const maxDelay = 30 * 24 * 60 * 60 * 1000;
            if (delayMs > maxDelay) {
                throw new Error('Delay cannot exceed 30 days');
            }
        } else if (delayType === 'optimal_time') {
            // Use engagement tracking to find optimal send time
            try {
                // TODO: Implement getBestSendTime function
                const optimalTime = new Date(Date.now() + 60 * 60 * 1000); // Default to 1 hour from now
                delayMs = Math.max(0, optimalTime.getTime() - Date.now());
            } catch (error) {
                _logger.logger.warn('Failed to get optimal time, using default delay', {
                    error
                });
                delayMs = 60 * 60 * 1000; // Default to 1 hour
            }
        }
        // Schedule the delay using the queue system
        if (delayMs > 0) {
            await _queue.delayQueue.add('delayed-workflow-step', {
                executionId: context.workflow.executionId,
                stepId: node1.id,
                nextStepId: properties.nextStepId
            }, {
                delay: delayMs,
                attempts: 3,
                backoff: {
                    type: 'exponential',
                    delay: 2000
                }
            });
        }
        return {
            delayed: true,
            delayMs,
            delayType,
            scheduledFor: new Date(Date.now() + delayMs).toISOString(),
            executedAt: new Date().toISOString()
        };
    }
    /**
   * Execute split node - for A/B testing or random distribution
   */ async executeSplitNode(node1, context) {
        const properties = node1.data.properties || {};
        const { splitType, branches = [] } = properties;
        _logger.logger.info(`Executing split node: ${node1.id}`, {
            splitType,
            branchCount: branches.length,
            contactId: context.contact.id
        });
        let selectedBranch;
        if (splitType === 'random') {
            // Random distribution based on percentages
            const random = Math.random() * 100;
            let cumulative = 0;
            for (const branch of branches){
                cumulative += branch.percentage || 0;
                if (random <= cumulative) {
                    selectedBranch = branch;
                    break;
                }
            }
        } else if (splitType === 'property') {
            // Split based on contact property
            const { property, conditions } = properties;
            const contactValue = context.contact[property];
            selectedBranch = branches.find((branch)=>{
                return branch.conditions?.some((condition)=>{
                    switch(condition.operator){
                        case 'equals':
                            return contactValue === condition.value;
                        case 'contains':
                            return String(contactValue).includes(condition.value);
                        case 'greater_than':
                            return Number(contactValue) > Number(condition.value);
                        default:
                            return false;
                    }
                });
            });
        }
        // Default to first branch if no match
        if (!selectedBranch && branches.length > 0) {
            selectedBranch = branches[0];
        }
        return {
            selectedBranch: selectedBranch?.id || null,
            splitType,
            executedAt: new Date().toISOString()
        };
    }
    /**
   * Execute transform node - data transformation and variable manipulation
   */ async executeTransformNode(node1, context) {
        const properties = node1.data.properties || {};
        const { transformations = [] } = properties;
        _logger.logger.info(`Executing transform node: ${node1.id}`, {
            transformationCount: transformations.length,
            contactId: context.contact.id
        });
        const results = {};
        for (const transformation of transformations){
            const { operation, sourceField, targetField, value, format } = transformation;
            try {
                switch(operation){
                    case 'copy':
                        results[targetField] = context.contact[sourceField];
                        break;
                    case 'set':
                        results[targetField] = this.replaceVariables(value, context);
                        break;
                    case 'concatenate':
                        const values = sourceField.split(',').map((field)=>context.contact[field.trim()] || '');
                        results[targetField] = values.join(' ').trim();
                        break;
                    case 'format_date':
                        const dateValue = new Date(context.contact[sourceField]);
                        if (isNaN(dateValue.getTime())) {
                            results[targetField] = '';
                        } else {
                            results[targetField] = dateValue.toLocaleDateString();
                        }
                        break;
                    case 'calculate_score':
                        // Simple lead scoring based on available data
                        let score = 0;
                        if (context.contact.email) score += 20;
                        if (context.contact.firstName) score += 10;
                        if (context.contact.company) score += 15;
                        if (context.contact.phone) score += 10;
                        results[targetField] = Math.min(100, score);
                        break;
                    default:
                        _logger.logger.warn(`Unknown transformation operation: ${operation}`);
                }
            } catch (error) {
                _logger.logger.error('Transformation failed', {
                    error,
                    transformation
                });
                results[targetField] = null;
            }
        }
        // Update context variables with transformation results
        context.variables = {
            ...context.variables,
            ...results
        };
        return {
            success: true,
            transformations: results,
            executedAt: new Date().toISOString()
        };
    }
    /**
   * Execute generic API call node
   */ async executeApiCallNode(node1, context) {
        const properties = node1.data.properties || {};
        _logger.logger.info(`Executing API call node: ${node1.id}`, {
            method: properties.method,
            url: properties.url?.substring(0, 100),
            contactId: context.contact.id
        });
        try {
            const config = {
                url: properties.url,
                method: properties.method || 'POST',
                headers: properties.headers || {},
                timeout: properties.timeout || 30000,
                retryCount: properties.retryCount || 3,
                retryDelay: properties.retryDelay || 1000,
                authentication: properties.authentication,
                bodyTemplate: properties.bodyTemplate,
                responseMapping: properties.responseMapping,
                successCondition: properties.successCondition
            };
            const result = await (0, _apiintegrationnodes.executeGenericApiCall)(config, context);
            // Store successful response data in context for subsequent steps
            if (result.success && result.data) {
                context.variables = {
                    ...context.variables,
                    [`${node1.id}_response`]: result.data
                };
            }
            return result;
        } catch (error) {
            _logger.logger.error('API call node execution failed', {
                error: error instanceof Error ? error.message : String(error),
                nodeId: node1.id,
                contactId: context.contact.id
            });
            return {
                success: false,
                error: error instanceof Error ? error.message : 'Unknown error',
                executedAt: new Date().toISOString()
            };
        }
    }
    /**
   * Execute CRM action node
   */ async executeCrmActionNode(node1, context) {
        const properties = node1.data.properties || {};
        _logger.logger.info(`Executing CRM action node: ${node1.id}`, {
            actionType: properties.actionType,
            provider: properties.provider,
            contactId: context.contact.id
        });
        try {
            const config = {
                url: properties.url,
                method: properties.method || 'POST',
                headers: properties.headers || {},
                timeout: properties.timeout || 30000,
                retryCount: properties.retryCount || 3,
                retryDelay: properties.retryDelay || 1000,
                authentication: properties.authentication,
                actionType: properties.actionType,
                provider: properties.provider,
                fieldMapping: properties.fieldMapping || {}
            };
            const result = await (0, _apiintegrationnodes.executeCrmAction)(config, context);
            // Store successful CRM response data in context
            if (result.success && result.data) {
                context.variables = {
                    ...context.variables,
                    [`${node1.id}_crm_response`]: result.data,
                    [`${node1.id}_crm_action`]: properties.actionType
                };
            }
            return result;
        } catch (error) {
            _logger.logger.error('CRM action node execution failed', {
                error: error instanceof Error ? error.message : String(error),
                nodeId: node1.id,
                actionType: properties.actionType,
                provider: properties.provider,
                contactId: context.contact.id
            });
            return {
                success: false,
                error: error instanceof Error ? error.message : 'Unknown error',
                actionType: properties.actionType,
                provider: properties.provider,
                executedAt: new Date().toISOString()
            };
        }
    }
    /**
   * Execute payment webhook node
   */ async executePaymentWebhookNode(node1, context) {
        const properties = node1.data.properties || {};
        _logger.logger.info(`Executing payment webhook node: ${node1.id}`, {
            provider: properties.provider,
            webhookType: properties.webhookType,
            contactId: context.contact.id
        });
        try {
            const config = {
                url: properties.url,
                method: properties.method || 'POST',
                headers: properties.headers || {},
                timeout: properties.timeout || 30000,
                retryCount: properties.retryCount || 3,
                retryDelay: properties.retryDelay || 1000,
                authentication: properties.authentication,
                provider: properties.provider,
                webhookType: properties.webhookType,
                eventData: properties.eventData || {},
                secretKey: properties.secretKey
            };
            const result = await (0, _apiintegrationnodes.executePaymentWebhook)(config, context);
            // Store successful webhook response data in context
            if (result.success && result.data) {
                context.variables = {
                    ...context.variables,
                    [`${node1.id}_payment_response`]: result.data,
                    [`${node1.id}_payment_provider`]: properties.provider,
                    [`${node1.id}_webhook_type`]: properties.webhookType
                };
            }
            return result;
        } catch (error) {
            _logger.logger.error('Payment webhook node execution failed', {
                error: error instanceof Error ? error.message : String(error),
                nodeId: node1.id,
                provider: properties.provider,
                webhookType: properties.webhookType,
                contactId: context.contact.id
            });
            return {
                success: false,
                error: error instanceof Error ? error.message : 'Unknown error',
                provider: properties.provider,
                webhookType: properties.webhookType,
                executedAt: new Date().toISOString()
            };
        }
    }
}
const workflowEngine = new WorkflowExecutionEngine();

//# sourceMappingURL=data:application/json;base64,