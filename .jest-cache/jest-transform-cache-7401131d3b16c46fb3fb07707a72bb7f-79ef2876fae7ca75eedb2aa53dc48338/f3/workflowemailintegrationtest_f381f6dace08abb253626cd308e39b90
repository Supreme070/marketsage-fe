7ec93487fec4f59472bceaa9b4556845
/**
 * Workflow Email Integration Test
 * 
 * Tests the integration between workflow automation and email campaign tracking
 * to ensure that emails sent through workflows are properly tracked.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
const _executionengine = require("../src/lib/workflow/execution-engine");
const _emailservice = require("../src/lib/email-service");
const _prisma = /*#__PURE__*/ _interop_require_default(require("../src/lib/db/prisma"));
const _client = require("@prisma/client");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
(0, _globals.describe)('Workflow Email Integration', ()=>{
    let workflowExecution;
    let testWorkflow;
    let testContact;
    let testCampaign;
    (0, _globals.beforeAll)(async ()=>{
        workflowExecution = new _executionengine.WorkflowExecutionEngine();
    });
    (0, _globals.beforeEach)(async ()=>{
        // Create test contact
        testContact = await _prisma.default.contact.create({
            data: {
                id: `test-contact-${Date.now()}`,
                email: 'test@example.com',
                firstName: 'Test',
                lastName: 'User',
                source: 'test'
            }
        });
        // Create test email campaign for tracking
        testCampaign = await _prisma.default.emailCampaign.create({
            data: {
                id: `test-campaign-${Date.now()}`,
                name: 'Test Workflow Campaign',
                subject: 'Test Subject',
                htmlContent: '<h1>Test Email</h1>',
                textContent: 'Test Email',
                status: _client.CampaignStatus.SENT,
                fromEmail: 'test@marketsage.com',
                fromName: 'Test Sender'
            }
        });
        // Create test workflow
        testWorkflow = await _prisma.default.workflow.create({
            data: {
                id: `test-workflow-${Date.now()}`,
                name: 'Test Email Workflow',
                description: 'Test workflow for email integration',
                status: 'ACTIVE',
                definition: JSON.stringify({
                    nodes: [
                        {
                            id: 'trigger-1',
                            type: 'triggerNode',
                            data: {
                                label: 'Contact Created',
                                properties: {
                                    trigger: 'contact_created'
                                }
                            },
                            position: {
                                x: 100,
                                y: 100
                            }
                        },
                        {
                            id: 'email-1',
                            type: 'actionNode',
                            data: {
                                label: 'Send Welcome Email',
                                properties: {
                                    action: 'send_email',
                                    subject: 'Welcome to MarketSage!',
                                    templateName: 'welcome_template',
                                    campaignId: testCampaign.id // Link to real campaign
                                }
                            },
                            position: {
                                x: 200,
                                y: 200
                            }
                        }
                    ],
                    edges: [
                        {
                            id: 'e1-2',
                            source: 'trigger-1',
                            target: 'email-1'
                        }
                    ]
                })
            }
        });
    });
    afterEach(async ()=>{
        // Cleanup test data
        try {
            await _prisma.default.emailActivity.deleteMany({
                where: {
                    campaignId: testCampaign.id
                }
            });
            await _prisma.default.workflowExecutionStep.deleteMany({
                where: {
                    executionId: {
                        contains: testWorkflow.id
                    }
                }
            });
            await _prisma.default.workflowExecution.deleteMany({
                where: {
                    workflowId: testWorkflow.id
                }
            });
            await _prisma.default.workflow.delete({
                where: {
                    id: testWorkflow.id
                }
            });
            await _prisma.default.emailCampaign.delete({
                where: {
                    id: testCampaign.id
                }
            });
            await _prisma.default.contact.delete({
                where: {
                    id: testContact.id
                }
            });
        } catch (error) {
            console.warn('Cleanup error:', error);
        }
    });
    (0, _globals.test)('should create email activity record for workflow emails with real campaign ID', async ()=>{
        // Start workflow execution
        const executionId = await workflowExecution.startWorkflowExecution(testWorkflow.id, testContact.id);
        (0, _globals.expect)(executionId).toBeDefined();
        // Get the execution to check it was created
        const execution = await _prisma.default.workflowExecution.findUnique({
            where: {
                id: executionId
            }
        });
        (0, _globals.expect)(execution).toBeTruthy();
        (0, _globals.expect)(execution?.status).toBe('RUNNING');
    });
    (0, _globals.test)('should track email opens and clicks from workflow emails', async ()=>{
        // Send tracked email directly to test tracking
        const result = await (0, _emailservice.sendTrackedEmail)(testContact, testCampaign.id, {
            subject: 'Test Workflow Email',
            html: '<h1>Hello {{firstName}}!</h1><p><a href="https://example.com">Click here</a></p>',
            text: 'Hello {{firstName}}! Visit: https://example.com',
            from: 'test@marketsage.com'
        });
        (0, _globals.expect)(result.success).toBe(true);
        // Check that email activity was recorded
        const activities = await _prisma.default.emailActivity.findMany({
            where: {
                campaignId: testCampaign.id,
                contactId: testContact.id,
                type: _client.ActivityType.SENT
            }
        });
        (0, _globals.expect)(activities).toHaveLength(1);
        (0, _globals.expect)(activities[0].type).toBe(_client.ActivityType.SENT);
    });
    (0, _globals.test)('should handle workflow emails with mock campaign IDs gracefully', async ()=>{
        const mockCampaignId = `workflow-${testWorkflow.id}-${Date.now()}`;
        // Send email with mock campaign ID (current workflow behavior)
        const result = await (0, _emailservice.sendTrackedEmail)(testContact, mockCampaignId, {
            subject: 'Test Mock Campaign Email',
            html: '<h1>Hello {{firstName}}!</h1>',
            text: 'Hello {{firstName}}!',
            from: 'test@marketsage.com'
        });
        (0, _globals.expect)(result.success).toBe(true);
        // Check that no email activity was recorded for mock campaign
        const activities = await _prisma.default.emailActivity.findMany({
            where: {
                campaignId: mockCampaignId,
                contactId: testContact.id
            }
        });
        (0, _globals.expect)(activities).toHaveLength(0);
    });
    (0, _globals.test)('should properly personalize email content in workflows', async ()=>{
        const htmlContent = '<h1>Hello {{firstName}} {{lastName}}!</h1><p>Welcome to MarketSage.</p>';
        const result = await (0, _emailservice.sendTrackedEmail)(testContact, testCampaign.id, {
            subject: 'Welcome {{firstName}}!',
            html: htmlContent,
            from: 'test@marketsage.com'
        });
        (0, _globals.expect)(result.success).toBe(true);
    // The actual personalization happens in the email service
    // This test verifies the integration works without errors
    });
    (0, _globals.test)('should handle email rate limiting in workflows', async ()=>{
        // This test would verify rate limiting functionality
        // For now, we just ensure the function doesn't throw errors
        const result = await (0, _emailservice.sendTrackedEmail)(testContact, testCampaign.id, {
            subject: 'Rate Limit Test',
            html: '<h1>Rate Limit Test</h1>',
            from: 'test@marketsage.com'
        });
        (0, _globals.expect)(result.success).toBe(true);
    });
});

//# sourceMappingURL=data:application/json;base64,