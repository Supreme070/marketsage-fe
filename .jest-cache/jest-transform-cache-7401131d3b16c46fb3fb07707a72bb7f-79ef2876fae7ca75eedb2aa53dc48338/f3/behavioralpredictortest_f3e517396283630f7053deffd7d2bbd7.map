{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/lib/ai/__tests__/behavioral-predictor.test.ts"],"sourcesContent":["// Mock Prisma before imports\njest.mock('@prisma/client', () => {\n  const mockPrisma = {\n    user: { findUnique: jest.fn() },\n    emailActivity: { findMany: jest.fn() },\n    sMSActivity: { findMany: jest.fn() },\n    whatsAppActivity: { findMany: jest.fn() }\n  };\n  return {\n    PrismaClient: jest.fn(() => mockPrisma),\n    UserRole: {\n      USER: 'USER',\n      ADMIN: 'ADMIN',\n      IT_ADMIN: 'IT_ADMIN',\n      SUPER_ADMIN: 'SUPER_ADMIN'\n    },\n    ActivityType: {\n      SENT: 'SENT',\n      DELIVERED: 'DELIVERED',\n      OPENED: 'OPENED',\n      CLICKED: 'CLICKED',\n      BOUNCED: 'BOUNCED',\n      UNSUBSCRIBED: 'UNSUBSCRIBED',\n      REPLIED: 'REPLIED',\n      FAILED: 'FAILED'\n    }\n  };\n});\n\nimport { BehavioralPredictor } from '../behavioral-predictor';\nimport { PrismaClient } from '@prisma/client';\nimport { mockDeep, mockReset } from 'jest-mock-extended';\n\ndescribe('BehavioralPredictor', () => {\n  let predictor: BehavioralPredictor;\n  let prisma: any;\n\n  beforeEach(() => {\n    prisma = (PrismaClient as jest.Mock)();\n    predictor = new BehavioralPredictor();\n  });\n\n  describe('predictBehavior', () => {\n    it('should predict user behavior correctly', async () => {\n      // Mock user data\n      const mockUser = {\n        id: 'test-user-id',\n        name: 'Test User',\n        email: 'test@example.com',\n        emailVerified: null,\n        password: null,\n        image: null,\n        createdAt: new Date('2023-01-01'),\n        updatedAt: new Date('2023-01-01'),\n        lastLogin: null,\n        isActive: true,\n        role: 'USER' as const,\n        organizationId: null,\n        company: null,\n        EmailCampaign: [\n          {\n            id: 'ec1',\n            status: 'SENT',\n            sentAt: new Date('2023-06-01'),\n            metadata: JSON.stringify({ revenue: 100 })\n          }\n        ],\n        SMSCampaign: [\n          {\n            id: 'sc1',\n            status: 'SENT',\n            sentAt: new Date('2023-07-01'),\n            metadata: JSON.stringify({ revenue: 50 })\n          }\n        ],\n        WhatsAppCampaign: [\n          {\n            id: 'wc1',\n            status: 'SENT',\n            sentAt: new Date('2023-08-01'),\n            metadata: JSON.stringify({ revenue: 75 })\n          }\n        ],\n        Contact: [],\n        List: [],\n        Segment: []\n      };\n\n      // Mock activities\n      const mockEmailActivities = [\n        {\n          id: 'ea1',\n          campaignId: 'ec1',\n          contactId: 'contact1',\n          type: 'OPENED' as const,\n          timestamp: new Date('2023-08-15'),\n          metadata: null\n        },\n        {\n          id: 'ea2',\n          campaignId: 'ec1',\n          contactId: 'contact1',\n          type: 'CLICKED' as const,\n          timestamp: new Date('2023-08-14'),\n          metadata: null\n        }\n      ];\n\n      const mockSMSActivities = [\n        {\n          id: 'sa1',\n          campaignId: 'sc1',\n          contactId: 'contact1',\n          type: 'DELIVERED' as const,\n          timestamp: new Date('2023-08-13'),\n          metadata: null\n        }\n      ];\n\n      const mockWAActivities = [\n        {\n          id: 'wa1',\n          campaignId: 'wc1',\n          contactId: 'contact1',\n          type: 'SENT' as const,\n          timestamp: new Date('2023-08-12'),\n          metadata: null\n        }\n      ];\n\n      // Setup mock responses\n      prisma.user.findUnique.mockResolvedValue(mockUser);\n      prisma.emailActivity.findMany.mockResolvedValue(mockEmailActivities);\n      prisma.sMSActivity.findMany.mockResolvedValue(mockSMSActivities);\n      prisma.whatsAppActivity.findMany.mockResolvedValue(mockWAActivities);\n\n      // Make prediction\n      const prediction = await predictor.predictBehavior('test-user-id');\n\n      // Verify predictions\n      expect(prediction).toHaveProperty('predictions');\n      expect(prediction.predictions).toHaveProperty('nextBestAction');\n      expect(prediction.predictions).toHaveProperty('churnRisk');\n      expect(prediction.predictions).toHaveProperty('lifetimeValue');\n      expect(prediction.predictions).toHaveProperty('engagementScore');\n\n      // Verify segments\n      expect(prediction.segments).toContain('MULTI_CHANNEL');\n      expect(prediction.segments).toContain('EMAIL_USER');\n      expect(prediction.segments).toContain('SMS_USER');\n      expect(prediction.segments).toContain('WHATSAPP_USER');\n\n      // Verify confidence scores\n      expect(prediction.confidenceScores).toHaveProperty('nextBestAction');\n      expect(prediction.confidenceScores).toHaveProperty('churnRisk');\n      expect(prediction.confidenceScores).toHaveProperty('lifetimeValue');\n      expect(prediction.confidenceScores).toHaveProperty('engagementScore');\n\n      // Verify insights\n      expect(prediction.insights).toBeInstanceOf(Array);\n      expect(prediction.insights.length).toBeGreaterThan(0);\n    });\n\n    it('should handle user not found', async () => {\n      // Setup mock\n      prisma.user.findUnique.mockResolvedValue(null);\n\n      // Act & Assert\n      await expect(predictor.predictBehavior('non-existent-user'))\n        .rejects\n        .toThrow('User not found');\n    });\n\n    it('should handle empty activities', async () => {\n      // Setup mock user with no activities\n      const mockUser = {\n        id: 'test-user-id',\n        name: 'Test User',\n        email: 'test@example.com',\n        emailVerified: null,\n        password: null,\n        image: null,\n        createdAt: new Date('2023-01-01'),\n        updatedAt: new Date('2023-01-01'),\n        lastLogin: null,\n        isActive: true,\n        role: 'USER' as const,\n        organizationId: null,\n        company: null,\n        EmailCampaign: [],\n        SMSCampaign: [],\n        WhatsAppCampaign: [],\n        Contact: [],\n        List: [],\n        Segment: []\n      };\n\n      // Setup mocks\n      prisma.user.findUnique.mockResolvedValue(mockUser);\n      prisma.emailActivity.findMany.mockResolvedValue([]);\n      prisma.sMSActivity.findMany.mockResolvedValue([]);\n      prisma.whatsAppActivity.findMany.mockResolvedValue([]);\n\n      // Act\n      const prediction = await predictor.predictBehavior('test-user-id');\n\n      // Assert\n      expect(prediction.predictions.engagementScore).toBe(0);\n      expect(prediction.segments).toContain('LOW_VALUE');\n      expect(prediction.insights).toContain('Low engagement - consider re-engagement campaign');\n    });\n\n    it('should handle database errors', async () => {\n      // Setup mock to throw error\n      const dbError = new Error('Database connection failed');\n      prisma.user.findUnique.mockRejectedValue(dbError);\n\n      // Act & Assert\n      await expect(predictor.predictBehavior('test-user-id'))\n        .rejects\n        .toThrow('Database connection failed');\n    });\n  });\n}); "],"names":["jest","mock","mockPrisma","user","findUnique","fn","emailActivity","findMany","sMSActivity","whatsAppActivity","PrismaClient","UserRole","USER","ADMIN","IT_ADMIN","SUPER_ADMIN","ActivityType","SENT","DELIVERED","OPENED","CLICKED","BOUNCED","UNSUBSCRIBED","REPLIED","FAILED","describe","predictor","prisma","beforeEach","BehavioralPredictor","it","mockUser","id","name","email","emailVerified","password","image","createdAt","Date","updatedAt","lastLogin","isActive","role","organizationId","company","EmailCampaign","status","sentAt","metadata","JSON","stringify","revenue","SMSCampaign","WhatsAppCampaign","Contact","List","Segment","mockEmailActivities","campaignId","contactId","type","timestamp","mockSMSActivities","mockWAActivities","mockResolvedValue","prediction","predictBehavior","expect","toHaveProperty","predictions","segments","toContain","confidenceScores","insights","toBeInstanceOf","Array","length","toBeGreaterThan","rejects","toThrow","engagementScore","toBe","dbError","Error","mockRejectedValue"],"mappings":"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"}