{"version":3,"sources":["/Users/supreme/Desktop/marketsage/__tests__/workflow-email-integration.test.ts"],"sourcesContent":["/**\n * Workflow Email Integration Test\n * \n * Tests the integration between workflow automation and email campaign tracking\n * to ensure that emails sent through workflows are properly tracked.\n */\n\nimport { describe, test, expect, beforeAll, afterAll, beforeEach } from '@jest/globals';\nimport { WorkflowExecutionEngine } from '@/lib/workflow/execution-engine';\nimport { sendTrackedEmail } from '@/lib/email-service';\nimport prisma from '@/lib/db/prisma';\nimport { ActivityType, CampaignStatus } from '@prisma/client';\n\ndescribe('Workflow Email Integration', () => {\n  let workflowExecution: WorkflowExecutionEngine;\n  let testWorkflow: any;\n  let testContact: any;\n  let testCampaign: any;\n\n  beforeAll(async () => {\n    workflowExecution = new WorkflowExecutionEngine();\n  });\n\n  beforeEach(async () => {\n    // Create test contact\n    testContact = await prisma.contact.create({\n      data: {\n        id: `test-contact-${Date.now()}`,\n        email: 'test@example.com',\n        firstName: 'Test',\n        lastName: 'User',\n        source: 'test'\n      }\n    });\n\n    // Create test email campaign for tracking\n    testCampaign = await prisma.emailCampaign.create({\n      data: {\n        id: `test-campaign-${Date.now()}`,\n        name: 'Test Workflow Campaign',\n        subject: 'Test Subject',\n        htmlContent: '<h1>Test Email</h1>',\n        textContent: 'Test Email',\n        status: CampaignStatus.SENT,\n        fromEmail: 'test@marketsage.com',\n        fromName: 'Test Sender'\n      }\n    });\n\n    // Create test workflow\n    testWorkflow = await prisma.workflow.create({\n      data: {\n        id: `test-workflow-${Date.now()}`,\n        name: 'Test Email Workflow',\n        description: 'Test workflow for email integration',\n        status: 'ACTIVE',\n        definition: JSON.stringify({\n          nodes: [\n            {\n              id: 'trigger-1',\n              type: 'triggerNode',\n              data: {\n                label: 'Contact Created',\n                properties: { trigger: 'contact_created' }\n              },\n              position: { x: 100, y: 100 }\n            },\n            {\n              id: 'email-1',\n              type: 'actionNode',\n              data: {\n                label: 'Send Welcome Email',\n                properties: {\n                  action: 'send_email',\n                  subject: 'Welcome to MarketSage!',\n                  templateName: 'welcome_template',\n                  campaignId: testCampaign.id // Link to real campaign\n                }\n              },\n              position: { x: 200, y: 200 }\n            }\n          ],\n          edges: [\n            {\n              id: 'e1-2',\n              source: 'trigger-1',\n              target: 'email-1'\n            }\n          ]\n        })\n      }\n    });\n  });\n\n  afterEach(async () => {\n    // Cleanup test data\n    try {\n      await prisma.emailActivity.deleteMany({\n        where: { campaignId: testCampaign.id }\n      });\n      await prisma.workflowExecutionStep.deleteMany({\n        where: { executionId: { contains: testWorkflow.id } }\n      });\n      await prisma.workflowExecution.deleteMany({\n        where: { workflowId: testWorkflow.id }\n      });\n      await prisma.workflow.delete({ where: { id: testWorkflow.id } });\n      await prisma.emailCampaign.delete({ where: { id: testCampaign.id } });\n      await prisma.contact.delete({ where: { id: testContact.id } });\n    } catch (error) {\n      console.warn('Cleanup error:', error);\n    }\n  });\n\n  test('should create email activity record for workflow emails with real campaign ID', async () => {\n    // Start workflow execution\n    const executionId = await workflowExecution.startWorkflowExecution(\n      testWorkflow.id,\n      testContact.id\n    );\n\n    expect(executionId).toBeDefined();\n\n    // Get the execution to check it was created\n    const execution = await prisma.workflowExecution.findUnique({\n      where: { id: executionId }\n    });\n\n    expect(execution).toBeTruthy();\n    expect(execution?.status).toBe('RUNNING');\n  });\n\n  test('should track email opens and clicks from workflow emails', async () => {\n    // Send tracked email directly to test tracking\n    const result = await sendTrackedEmail(\n      testContact,\n      testCampaign.id,\n      {\n        subject: 'Test Workflow Email',\n        html: '<h1>Hello {{firstName}}!</h1><p><a href=\"https://example.com\">Click here</a></p>',\n        text: 'Hello {{firstName}}! Visit: https://example.com',\n        from: 'test@marketsage.com'\n      }\n    );\n\n    expect(result.success).toBe(true);\n\n    // Check that email activity was recorded\n    const activities = await prisma.emailActivity.findMany({\n      where: {\n        campaignId: testCampaign.id,\n        contactId: testContact.id,\n        type: ActivityType.SENT\n      }\n    });\n\n    expect(activities).toHaveLength(1);\n    expect(activities[0].type).toBe(ActivityType.SENT);\n  });\n\n  test('should handle workflow emails with mock campaign IDs gracefully', async () => {\n    const mockCampaignId = `workflow-${testWorkflow.id}-${Date.now()}`;\n\n    // Send email with mock campaign ID (current workflow behavior)\n    const result = await sendTrackedEmail(\n      testContact,\n      mockCampaignId,\n      {\n        subject: 'Test Mock Campaign Email',\n        html: '<h1>Hello {{firstName}}!</h1>',\n        text: 'Hello {{firstName}}!',\n        from: 'test@marketsage.com'\n      }\n    );\n\n    expect(result.success).toBe(true);\n\n    // Check that no email activity was recorded for mock campaign\n    const activities = await prisma.emailActivity.findMany({\n      where: {\n        campaignId: mockCampaignId,\n        contactId: testContact.id\n      }\n    });\n\n    expect(activities).toHaveLength(0);\n  });\n\n  test('should properly personalize email content in workflows', async () => {\n    const htmlContent = '<h1>Hello {{firstName}} {{lastName}}!</h1><p>Welcome to MarketSage.</p>';\n    \n    const result = await sendTrackedEmail(\n      testContact,\n      testCampaign.id,\n      {\n        subject: 'Welcome {{firstName}}!',\n        html: htmlContent,\n        from: 'test@marketsage.com'\n      }\n    );\n\n    expect(result.success).toBe(true);\n    \n    // The actual personalization happens in the email service\n    // This test verifies the integration works without errors\n  });\n\n  test('should handle email rate limiting in workflows', async () => {\n    // This test would verify rate limiting functionality\n    // For now, we just ensure the function doesn't throw errors\n    \n    const result = await sendTrackedEmail(\n      testContact,\n      testCampaign.id,\n      {\n        subject: 'Rate Limit Test',\n        html: '<h1>Rate Limit Test</h1>',\n        from: 'test@marketsage.com'\n      }\n    );\n\n    expect(result.success).toBe(true);\n  });\n});"],"names":["describe","workflowExecution","testWorkflow","testContact","testCampaign","beforeAll","WorkflowExecutionEngine","beforeEach","prisma","contact","create","data","id","Date","now","email","firstName","lastName","source","emailCampaign","name","subject","htmlContent","textContent","status","CampaignStatus","SENT","fromEmail","fromName","workflow","description","definition","JSON","stringify","nodes","type","label","properties","trigger","position","x","y","action","templateName","campaignId","edges","target","afterEach","emailActivity","deleteMany","where","workflowExecutionStep","executionId","contains","workflowId","delete","error","console","warn","test","startWorkflowExecution","expect","toBeDefined","execution","findUnique","toBeTruthy","toBe","result","sendTrackedEmail","html","text","from","success","activities","findMany","contactId","ActivityType","toHaveLength","mockCampaignId"],"mappings":"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"}