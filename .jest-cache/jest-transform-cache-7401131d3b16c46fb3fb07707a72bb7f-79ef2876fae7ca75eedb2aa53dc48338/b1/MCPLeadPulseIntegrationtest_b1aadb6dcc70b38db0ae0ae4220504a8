8aa06b584f43ff45abc6a48aaf8b3b73
"use strict";
// Mock the MCP hook
jest.mock('../../../hooks/useMCPLeadPulse');
jest.mock('next-auth/react');
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _testutils = require("../../utils/test-utils");
const _react1 = require("next-auth/react");
const _useMCPLeadPulse = require("../../../hooks/useMCPLeadPulse");
const _LiveVisitorMap = require("../../../components/leadpulse/LiveVisitorMap");
const _CoreAnalyticsDashboard = require("../../../components/leadpulse/CoreAnalyticsDashboard");
const _VisitorInsights = require("../../../components/leadpulse/VisitorInsights");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const mockUseMCPLeadPulse = _useMCPLeadPulse.useMCPLeadPulse;
const mockUseSession = _react1.useSession;
describe('MCP LeadPulse Integration Tests', ()=>{
    // Mock session data
    const mockSession = {
        user: {
            id: 'user_123',
            email: 'test@example.com',
            role: 'admin',
            organizationId: 'org_123'
        },
        expires: '2024-12-31'
    };
    beforeEach(()=>{
        mockUseSession.mockReturnValue({
            data: mockSession,
            status: 'authenticated'
        });
        // Reset fetch mock
        global.fetch = jest.fn();
    });
    afterEach(()=>{
        jest.clearAllMocks();
    });
    describe('Real MCP Data Integration', ()=>{
        it('should load and display real visitor data from MCP server', async ()=>{
            const mockMCPData = (0, _testutils.createMockMCPData)();
            mockUseMCPLeadPulse.mockReturnValue(mockMCPData);
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LiveVisitorMap.LiveVisitorMap, {}));
            await (0, _testutils.waitFor)(()=>{
                // Check that MCP data is loaded
                expect(_testutils.screen.getByTestId('visitor-map')).toBeInTheDocument();
                expect(_testutils.screen.getByText('45')).toBeInTheDocument(); // Lagos visitors
                expect(_testutils.screen.getByText('Lagos')).toBeInTheDocument();
            });
            // Verify MCP connection status
            expect(_testutils.screen.getByText(/mcp connected/i)).toBeInTheDocument();
        });
        it('should handle MCP server unavailable gracefully', async ()=>{
            const mockMCPDataWithError = {
                ...(0, _testutils.createMockMCPData)(),
                mcpConnected: false,
                error: 'MCP server unavailable',
                dataSource: 'fallback'
            };
            mockUseMCPLeadPulse.mockReturnValue(mockMCPDataWithError);
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CoreAnalyticsDashboard.CoreAnalyticsDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                // Should show fallback message
                expect(_testutils.screen.getByText(/fallback mode/i)).toBeInTheDocument();
                expect(_testutils.screen.getByText(/mcp server unavailable/i)).toBeInTheDocument();
            });
        });
        it('should perform real database queries when MCP is enabled', async ()=>{
            const mockMCPData = {
                ...(0, _testutils.createMockMCPData)(),
                mcpEnabled: true,
                mcpConnected: true,
                dataSource: 'mcp'
            };
            mockUseMCPLeadPulse.mockReturnValue(mockMCPData);
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_VisitorInsights.VisitorInsights, {}));
            await (0, _testutils.waitFor)(()=>{
                // Verify real data is displayed
                expect(_testutils.screen.getByText(/high engagement detected/i)).toBeInTheDocument();
                expect(_testutils.screen.getByText(/conversion rate improved/i)).toBeInTheDocument();
            });
            // Verify MCP data source indicator
            expect(_testutils.screen.getByTestId('data-source-indicator')).toHaveTextContent('MCP');
        });
        it('should handle empty database results properly', async ()=>{
            const mockEmptyData = {
                visitorLocations: [],
                visitorJourneys: [],
                insights: [],
                segments: [],
                analyticsOverview: {
                    activeVisitors: 0,
                    totalVisitors: 0,
                    conversionRate: 0,
                    engagementScore: 0,
                    bounceRate: 0,
                    averageSessionTime: 0
                },
                isLoading: false,
                error: null,
                dataSource: 'mcp',
                lastUpdated: new Date(),
                mcpEnabled: true,
                mcpConnected: true,
                refresh: jest.fn(),
                refreshVisitors: jest.fn(),
                refreshInsights: jest.fn(),
                refreshLocations: jest.fn()
            };
            mockUseMCPLeadPulse.mockReturnValue(mockEmptyData);
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LiveVisitorMap.LiveVisitorMap, {}));
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByText(/no visitors/i)).toBeInTheDocument();
                expect(_testutils.screen.getByText(/0 visitors from 0 countries/i)).toBeInTheDocument();
            });
        });
    });
    describe('Component Rendering with Real Data', ()=>{
        it('should render LiveVisitorMap with MCP data correctly', async ()=>{
            const mockMCPData = (0, _testutils.createMockMCPData)();
            mockUseMCPLeadPulse.mockReturnValue(mockMCPData);
            const renderTime = await (0, _testutils.measureComponentPerformance)(()=>(0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LiveVisitorMap.LiveVisitorMap, {})), 'LiveVisitorMap with MCP data');
            await (0, _testutils.waitFor)(()=>{
                // Check map renders with real locations
                expect(_testutils.screen.getByTestId('visitor-map')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Live Visitor Tracking')).toBeInTheDocument();
                // Verify African cities are displayed
                expect(_testutils.screen.getByText('Lagos')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Abuja')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Kano')).toBeInTheDocument();
            });
            expect(renderTime).toBeLessThan(_testutils.PERFORMANCE_THRESHOLDS.COMPONENT_RENDER);
        });
        it('should render CoreAnalyticsDashboard with real analytics', async ()=>{
            const mockMCPData = (0, _testutils.createMockMCPData)();
            mockUseMCPLeadPulse.mockReturnValue(mockMCPData);
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CoreAnalyticsDashboard.CoreAnalyticsDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                // Check analytics cards
                expect(_testutils.screen.getByTestId('active-visitors-card')).toBeInTheDocument();
                expect(_testutils.screen.getByTestId('total-visitors-card')).toBeInTheDocument();
                expect(_testutils.screen.getByTestId('conversion-rate-card')).toBeInTheDocument();
                // Verify real numbers are displayed
                expect(_testutils.screen.getByText('23')).toBeInTheDocument(); // activeVisitors
                expect(_testutils.screen.getByText('1,547')).toBeInTheDocument(); // totalVisitors
            });
        });
        it('should render VisitorInsights with MCP insights', async ()=>{
            const mockMCPData = (0, _testutils.createMockMCPData)();
            mockUseMCPLeadPulse.mockReturnValue(mockMCPData);
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_VisitorInsights.VisitorInsights, {}));
            await (0, _testutils.waitFor)(()=>{
                // Check insights are rendered
                expect(_testutils.screen.getByText('High engagement detected')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Conversion rate improved')).toBeInTheDocument();
                // Check segments
                expect(_testutils.screen.getByText('High Value Visitors')).toBeInTheDocument();
                expect(_testutils.screen.getByText('234')).toBeInTheDocument(); // segment count
            });
        });
    });
    describe('Loading States', ()=>{
        it('should show loading state while fetching MCP data', async ()=>{
            const mockLoadingData = {
                ...(0, _testutils.createMockMCPData)(),
                isLoading: true
            };
            mockUseMCPLeadPulse.mockReturnValue(mockLoadingData);
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LiveVisitorMap.LiveVisitorMap, {}));
            expect(_testutils.screen.getByTestId('loading-spinner')).toBeInTheDocument();
            expect(_testutils.screen.getByText(/loading visitor data/i)).toBeInTheDocument();
        });
        it('should show skeleton loaders for dashboard components', async ()=>{
            const mockLoadingData = {
                ...(0, _testutils.createMockMCPData)(),
                isLoading: true
            };
            mockUseMCPLeadPulse.mockReturnValue(mockLoadingData);
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CoreAnalyticsDashboard.CoreAnalyticsDashboard, {}));
            expect(_testutils.screen.getAllByTestId('skeleton-card')).toHaveLength(4); // 4 metric cards
        });
    });
    describe('Error Boundaries and Fallback', ()=>{
        it('should display error message when MCP fails', async ()=>{
            const mockErrorData = {
                ...(0, _testutils.createMockMCPData)(),
                error: 'Database connection failed',
                mcpConnected: false,
                dataSource: 'fallback'
            };
            mockUseMCPLeadPulse.mockReturnValue(mockErrorData);
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_VisitorInsights.VisitorInsights, {}));
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByRole('alert')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Database connection failed')).toBeInTheDocument();
                expect(_testutils.screen.getByText(/retry/i)).toBeInTheDocument();
            });
        });
        it('should allow retry when MCP connection fails', async ()=>{
            const mockRefresh = jest.fn();
            const mockErrorData = {
                ...(0, _testutils.createMockMCPData)(),
                error: 'Connection timeout',
                refresh: mockRefresh
            };
            mockUseMCPLeadPulse.mockReturnValue(mockErrorData);
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LiveVisitorMap.LiveVisitorMap, {}));
            await (0, _testutils.waitFor)(()=>{
                const retryButton = _testutils.screen.getByText(/retry/i);
                _testutils.fireEvent.click(retryButton);
            });
            expect(mockRefresh).toHaveBeenCalledTimes(1);
        });
        it('should handle network errors gracefully', async ()=>{
            // Mock network error
            global.fetch = jest.fn().mockRejectedValue(new Error('Network error'));
            const mockErrorData = {
                ...(0, _testutils.createMockMCPData)(),
                error: 'Network error',
                mcpConnected: false
            };
            mockUseMCPLeadPulse.mockReturnValue(mockErrorData);
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CoreAnalyticsDashboard.CoreAnalyticsDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByText(/network error/i)).toBeInTheDocument();
                expect(_testutils.screen.getByTestId('error-boundary')).toBeInTheDocument();
            });
        });
    });
    describe('Mobile Compatibility (African Market)', ()=>{
        beforeEach(()=>{
            // Mock mobile viewport
            Object.defineProperty(window, 'innerWidth', {
                writable: true,
                configurable: true,
                value: 375
            });
            Object.defineProperty(window, 'innerHeight', {
                writable: true,
                configurable: true,
                value: 667
            });
        });
        it('should render mobile-optimized layout for visitor map', async ()=>{
            const mockMCPData = (0, _testutils.createMockMCPData)();
            mockUseMCPLeadPulse.mockReturnValue(mockMCPData);
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LiveVisitorMap.LiveVisitorMap, {}));
            await (0, _testutils.waitFor)(()=>{
                const mapContainer = _testutils.screen.getByTestId('visitor-map');
                expect(mapContainer).toHaveClass('mobile-responsive');
                // Check mobile-specific elements
                expect(_testutils.screen.getByTestId('mobile-stats')).toBeInTheDocument();
            });
        });
        it('should use touch-friendly interactions on mobile', async ()=>{
            const mockMCPData = (0, _testutils.createMockMCPData)();
            mockUseMCPLeadPulse.mockReturnValue(mockMCPData);
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CoreAnalyticsDashboard.CoreAnalyticsDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                const cards = _testutils.screen.getAllByTestId(/metric-card/);
                cards.forEach((card)=>{
                    expect(card).toHaveClass('touch-friendly');
                });
            });
        });
        it('should optimize data loading for low-bandwidth connections', async ()=>{
            const mockMCPData = {
                ...(0, _testutils.createMockMCPData)(),
                visitorLocations: (0, _testutils.createMockMCPData)().visitorLocations.slice(0, 3) // Reduced data
            };
            mockUseMCPLeadPulse.mockReturnValue(mockMCPData);
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LiveVisitorMap.LiveVisitorMap, {}));
            await (0, _testutils.waitFor)(()=>{
                // Should show limited data for performance
                const locationItems = _testutils.screen.getAllByTestId('location-item');
                expect(locationItems.length).toBeLessThanOrEqual(5);
            });
        });
        it('should display currency in NGN for African users', async ()=>{
            const mockMCPData = (0, _testutils.createMockMCPData)();
            mockUseMCPLeadPulse.mockReturnValue(mockMCPData);
            // Mock user location as Nigeria
            Object.defineProperty(navigator, 'language', {
                value: 'en-NG',
                configurable: true
            });
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_VisitorInsights.VisitorInsights, {}));
            await (0, _testutils.waitFor)(()=>{
                // Should show NGN currency format
                expect(_testutils.screen.getByText(/₦/)).toBeInTheDocument();
            });
        });
    });
    describe('Real-time Updates', ()=>{
        it('should update data when MCP provides new information', async ()=>{
            const mockRefresh = jest.fn();
            const initialData = (0, _testutils.createMockMCPData)();
            initialData.refresh = mockRefresh;
            mockUseMCPLeadPulse.mockReturnValue(initialData);
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LiveVisitorMap.LiveVisitorMap, {}));
            // Simulate real-time update
            await (0, _testutils.act)(async ()=>{
                // Update data
                const updatedData = {
                    ...initialData,
                    analyticsOverview: {
                        ...initialData.analyticsOverview,
                        activeVisitors: 25 // Changed from 23
                    }
                };
                mockUseMCPLeadPulse.mockReturnValue(updatedData);
            });
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByText('25')).toBeInTheDocument();
            });
        });
        it('should handle refresh intervals correctly', async ()=>{
            const mockRefresh = jest.fn();
            const mockMCPData = {
                ...(0, _testutils.createMockMCPData)(),
                refresh: mockRefresh
            };
            mockUseMCPLeadPulse.mockReturnValue(mockMCPData);
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CoreAnalyticsDashboard.CoreAnalyticsDashboard, {
                enableRealtime: true,
                refreshInterval: 1000
            }));
            // Wait for auto-refresh
            await (0, _testutils.waitFor)(()=>{
                expect(mockRefresh).toHaveBeenCalled();
            }, {
                timeout: 2000
            });
        });
    });
    describe('Performance and Accessibility', ()=>{
        it('should meet performance thresholds with MCP data', async ()=>{
            const mockMCPData = (0, _testutils.createMockMCPData)();
            mockUseMCPLeadPulse.mockReturnValue(mockMCPData);
            const renderTime = await (0, _testutils.measureComponentPerformance)(()=>(0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_VisitorInsights.VisitorInsights, {})), 'VisitorInsights with MCP data');
            expect(renderTime).toBeLessThan(_testutils.PERFORMANCE_THRESHOLDS.COMPONENT_RENDER);
        });
        it('should maintain accessibility standards', async ()=>{
            const mockMCPData = (0, _testutils.createMockMCPData)();
            mockUseMCPLeadPulse.mockReturnValue(mockMCPData);
            const { container } = (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LiveVisitorMap.LiveVisitorMap, {}));
            await (0, _testutils.waitFor)(()=>{
                (0, _testutils.checkAccessibility)(container);
            });
            // Check for proper ARIA labels
            expect(_testutils.screen.getByLabelText(/visitor map/i)).toBeInTheDocument();
            expect(_testutils.screen.getByRole('main')).toBeInTheDocument();
        });
        it('should handle large datasets efficiently', async ()=>{
            const largeMCPData = {
                ...(0, _testutils.createMockMCPData)(),
                visitorJourneys: Array.from({
                    length: 500
                }, (_, i)=>({
                        id: `journey_${i}`,
                        visitorId: `visitor_${i}`,
                        sessionId: `session_${i}`,
                        startTime: new Date().toISOString(),
                        endTime: new Date().toISOString(),
                        totalPages: 3,
                        engagementScore: Math.floor(Math.random() * 100),
                        conversionEvents: [],
                        pulseData: [],
                        device: 'mobile',
                        location: 'Lagos, Nigeria',
                        lastActive: '2 min ago'
                    }))
            };
            mockUseMCPLeadPulse.mockReturnValue(largeMCPData);
            const renderTime = await (0, _testutils.measureComponentPerformance)(()=>(0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CoreAnalyticsDashboard.CoreAnalyticsDashboard, {})), 'CoreAnalyticsDashboard with large dataset');
            expect(renderTime).toBeLessThan(_testutils.PERFORMANCE_THRESHOLDS.COMPONENT_RENDER * 2);
        });
    });
    describe('Data Validation and Security', ()=>{
        it('should validate MCP data structure', async ()=>{
            const invalidMCPData = {
                // Missing required fields
                visitorLocations: null,
                visitorJourneys: undefined,
                insights: 'invalid',
                segments: []
            };
            // Should handle invalid data gracefully
            expect(()=>{
                mockUseMCPLeadPulse.mockReturnValue(invalidMCPData);
                (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_VisitorInsights.VisitorInsights, {}));
            }).not.toThrow();
        });
        it('should sanitize data from MCP server', async ()=>{
            const maliciousData = {
                ...(0, _testutils.createMockMCPData)(),
                insights: [
                    {
                        id: '1',
                        type: 'xss',
                        message: '<script>alert("xss")</script>High engagement detected'
                    }
                ]
            };
            mockUseMCPLeadPulse.mockReturnValue(maliciousData);
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_VisitorInsights.VisitorInsights, {}));
            await (0, _testutils.waitFor)(()=>{
                // Should not render script tags
                expect(_testutils.screen.queryByText('<script>')).not.toBeInTheDocument();
                expect(_testutils.screen.getByText(/high engagement detected/i)).toBeInTheDocument();
            });
        });
        it('should respect user permissions for MCP data access', async ()=>{
            // Mock user without LeadPulse permissions
            mockUseSession.mockReturnValue({
                data: {
                    ...mockSession,
                    user: {
                        ...mockSession.user,
                        role: 'viewer' // Limited role
                    }
                },
                status: 'authenticated'
            });
            const restrictedData = {
                ...(0, _testutils.createMockMCPData)(),
                mcpEnabled: false,
                error: 'Insufficient permissions'
            };
            mockUseMCPLeadPulse.mockReturnValue(restrictedData);
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LiveVisitorMap.LiveVisitorMap, {}));
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByText(/insufficient permissions/i)).toBeInTheDocument();
            });
        });
    });
    describe('African Market Specific Features', ()=>{
        it('should display timezone-aware timestamps for African regions', async ()=>{
            const mockMCPData = (0, _testutils.createMockMCPData)();
            mockUseMCPLeadPulse.mockReturnValue(mockMCPData);
            // Mock African timezone
            const mockDate = new Date('2024-07-19T15:30:00Z');
            jest.spyOn(global, 'Date').mockImplementation(()=>mockDate);
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_VisitorInsights.VisitorInsights, {}));
            await (0, _testutils.waitFor)(()=>{
                // Should show WAT (West Africa Time) format
                expect(_testutils.screen.getByText(/wat|west africa time/i)).toBeInTheDocument();
            });
        });
        it('should prioritize Nigerian cities in location data', async ()=>{
            const mockMCPData = (0, _testutils.createMockMCPData)();
            mockUseMCPLeadPulse.mockReturnValue(mockMCPData);
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LiveVisitorMap.LiveVisitorMap, {}));
            await (0, _testutils.waitFor)(()=>{
                const locationItems = _testutils.screen.getAllByTestId('location-item');
                // Lagos should be first (highest visitor count)
                expect(locationItems[0]).toHaveTextContent('Lagos');
            });
        });
        it('should support multiple African languages', async ()=>{
            const mockMCPData = (0, _testutils.createMockMCPData)();
            mockUseMCPLeadPulse.mockReturnValue(mockMCPData);
            // Mock Hausa language preference
            Object.defineProperty(navigator, 'languages', {
                value: [
                    'ha',
                    'en'
                ],
                configurable: true
            });
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CoreAnalyticsDashboard.CoreAnalyticsDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                // Should support internationalization
                expect(_testutils.screen.getByTestId('i18n-ready')).toBeInTheDocument();
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,