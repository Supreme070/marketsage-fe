cb50fe3b6bed50caa59c9c5489aea582
/**
 * MCP Servers Integration Tests
 * 
 * Tests actual MCP server implementations against real seeded data
 * to verify end-to-end functionality and performance.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _test = require("@jest/test");
const _setup = require("./setup");
const _campaignanalyticsserver = require("../../../mcp/servers/campaign-analytics-server");
const _customerdataserver = require("../../../mcp/servers/customer-data-server");
const _leadpulseserver = require("../../../mcp/servers/leadpulse-server");
const _monitoringserver = require("../../../mcp/servers/monitoring-server");
(0, _test.describe)('MCP Servers Integration Tests', ()=>{
    let dbManager;
    let performanceTracker;
    // MCP Server instances
    let campaignServer;
    let customerServer;
    let leadpulseServer;
    let monitoringServer;
    (0, _test.beforeAll)(async ()=>{
        dbManager = _setup.TestDatabaseManager.getInstance();
        await dbManager.setup();
        performanceTracker = new _setup.PerformanceTracker();
        // Initialize MCP servers with test database
        campaignServer = new _campaignanalyticsserver.CampaignAnalyticsServer({
            database: _setup.testPrisma
        });
        customerServer = new _customerdataserver.CustomerDataServer({
            database: _setup.testPrisma
        });
        leadpulseServer = new _leadpulseserver.LeadPulseServer({
            database: _setup.testPrisma
        });
        monitoringServer = new _monitoringserver.MonitoringServer({
            database: _setup.testPrisma
        });
        // Start all servers
        await Promise.all([
            campaignServer.start(),
            customerServer.start(),
            leadpulseServer.start(),
            monitoringServer.start()
        ]);
    }, _setup.testConfig.timeouts.integration);
    (0, _test.afterAll)(async ()=>{
        // Stop all servers
        await Promise.all([
            campaignServer.stop(),
            customerServer.stop(),
            leadpulseServer.stop(),
            monitoringServer.stop()
        ]);
        await dbManager.teardown();
    }, _setup.testConfig.timeouts.database);
    (0, _test.beforeEach)(async ()=>{
        performanceTracker.reset();
    });
    (0, _test.describe)('Campaign Analytics Server', ()=>{
        (0, _test.test)('should retrieve campaign metrics with real data', async ()=>{
            performanceTracker.start();
            const result = await campaignServer.handleRequest({
                method: 'tools/call',
                params: {
                    name: 'get_campaign_metrics',
                    arguments: {
                        organizationId: 'test-org-1',
                        campaignType: 'EMAIL',
                        limit: 10
                    }
                }
            });
            const duration = performanceTracker.measure('campaign_metrics_mcp');
            (0, _test.expect)(result).toBeDefined();
            (0, _test.expect)(result.content).toBeDefined();
            (0, _test.expect)(Array.isArray(result.content)).toBe(true);
            (0, _test.expect)(result.content.length).toBeGreaterThan(0);
            (0, _test.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxResponseTime);
            // Verify data structure
            const metrics = result.content[0];
            (0, _test.expect)(metrics).toHaveProperty('campaignId');
            (0, _test.expect)(metrics).toHaveProperty('campaignName');
            (0, _test.expect)(metrics).toHaveProperty('sent');
            (0, _test.expect)(metrics).toHaveProperty('delivered');
            (0, _test.expect)(metrics).toHaveProperty('openRate');
            (0, _test.expect)(metrics).toHaveProperty('clickRate');
            (0, _test.expect)(metrics).toHaveProperty('conversionRate');
            console.log(`📧 Campaign metrics MCP: ${duration}ms`);
        });
        (0, _test.test)('should calculate campaign performance analytics', async ()=>{
            performanceTracker.start();
            const result = await campaignServer.handleRequest({
                method: 'tools/call',
                params: {
                    name: 'calculate_campaign_performance',
                    arguments: {
                        organizationId: 'test-org-1',
                        timeRange: '30d'
                    }
                }
            });
            const duration = performanceTracker.measure('campaign_performance_analytics');
            (0, _test.expect)(result).toBeDefined();
            (0, _test.expect)(result.content).toBeDefined();
            (0, _test.expect)(result.content).toHaveProperty('totalCampaigns');
            (0, _test.expect)(result.content).toHaveProperty('avgOpenRate');
            (0, _test.expect)(result.content).toHaveProperty('avgClickRate');
            (0, _test.expect)(result.content).toHaveProperty('avgConversionRate');
            (0, _test.expect)(result.content).toHaveProperty('totalRevenue');
            (0, _test.expect)(result.content).toHaveProperty('avgROI');
            (0, _test.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxResponseTime);
            console.log(`📊 Campaign performance analytics: ${duration}ms`);
        });
        (0, _test.test)('should retrieve A/B test results from real data', async ()=>{
            performanceTracker.start();
            const result = await campaignServer.handleRequest({
                method: 'tools/call',
                params: {
                    name: 'get_ab_test_results',
                    arguments: {
                        organizationId: 'test-org-1'
                    }
                }
            });
            const duration = performanceTracker.measure('ab_test_results');
            (0, _test.expect)(result).toBeDefined();
            (0, _test.expect)(result.content).toBeDefined();
            (0, _test.expect)(Array.isArray(result.content)).toBe(true);
            (0, _test.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxResponseTime);
            // If A/B tests exist, verify structure
            if (result.content.length > 0) {
                const abTest = result.content[0];
                (0, _test.expect)(abTest).toHaveProperty('testType');
                (0, _test.expect)(abTest).toHaveProperty('variants');
                (0, _test.expect)(abTest).toHaveProperty('winnerVariant');
                (0, _test.expect)(Array.isArray(abTest.variants)).toBe(true);
            }
            console.log(`🧪 A/B test results: ${duration}ms`);
        });
    });
    (0, _test.describe)('Customer Data Server', ()=>{
        (0, _test.test)('should retrieve customer predictions with real data', async ()=>{
            performanceTracker.start();
            const result = await customerServer.handleRequest({
                method: 'tools/call',
                params: {
                    name: 'get_customer_predictions',
                    arguments: {
                        organizationId: 'test-org-1',
                        limit: 10
                    }
                }
            });
            const duration = performanceTracker.measure('customer_predictions_mcp');
            (0, _test.expect)(result).toBeDefined();
            (0, _test.expect)(result.content).toBeDefined();
            (0, _test.expect)(Array.isArray(result.content)).toBe(true);
            (0, _test.expect)(result.content.length).toBeGreaterThan(0);
            (0, _test.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxResponseTime);
            // Verify data structure
            const prediction = result.content[0];
            (0, _test.expect)(prediction).toHaveProperty('contactId');
            (0, _test.expect)(prediction).toHaveProperty('churnRisk');
            (0, _test.expect)(prediction).toHaveProperty('lifetimeValue');
            (0, _test.expect)(prediction).toHaveProperty('engagementScore');
            (0, _test.expect)(prediction).toHaveProperty('segment');
            (0, _test.expect)(prediction).toHaveProperty('preferredChannel');
            console.log(`🎯 Customer predictions MCP: ${duration}ms`);
        });
        (0, _test.test)('should analyze customer segments', async ()=>{
            performanceTracker.start();
            const result = await customerServer.handleRequest({
                method: 'tools/call',
                params: {
                    name: 'analyze_customer_segments',
                    arguments: {
                        organizationId: 'test-org-1'
                    }
                }
            });
            const duration = performanceTracker.measure('customer_segments_analysis');
            (0, _test.expect)(result).toBeDefined();
            (0, _test.expect)(result.content).toBeDefined();
            (0, _test.expect)(result.content).toHaveProperty('segments');
            (0, _test.expect)(Array.isArray(result.content.segments)).toBe(true);
            (0, _test.expect)(result.content.segments.length).toBeGreaterThan(0);
            (0, _test.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxResponseTime);
            // Verify segment structure
            const segment = result.content.segments[0];
            (0, _test.expect)(segment).toHaveProperty('name');
            (0, _test.expect)(segment).toHaveProperty('count');
            (0, _test.expect)(segment).toHaveProperty('avgChurnRisk');
            (0, _test.expect)(segment).toHaveProperty('avgLifetimeValue');
            (0, _test.expect)(segment).toHaveProperty('avgEngagementScore');
            console.log(`📊 Customer segments analysis: ${duration}ms`);
        });
        (0, _test.test)('should identify high-risk customers', async ()=>{
            performanceTracker.start();
            const result = await customerServer.handleRequest({
                method: 'tools/call',
                params: {
                    name: 'get_high_risk_customers',
                    arguments: {
                        organizationId: 'test-org-1',
                        riskThreshold: 70,
                        limit: 20
                    }
                }
            });
            const duration = performanceTracker.measure('high_risk_customers');
            (0, _test.expect)(result).toBeDefined();
            (0, _test.expect)(result.content).toBeDefined();
            (0, _test.expect)(Array.isArray(result.content)).toBe(true);
            (0, _test.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxResponseTime);
            // Verify high-risk customers have churn risk > threshold
            result.content.forEach((customer)=>{
                (0, _test.expect)(customer.churnRisk).toBeGreaterThan(70);
                (0, _test.expect)(customer).toHaveProperty('contactId');
                (0, _test.expect)(customer).toHaveProperty('nextBestAction');
            });
            console.log(`⚠️ High-risk customers: ${duration}ms, found ${result.content.length} customers`);
        });
    });
    (0, _test.describe)('LeadPulse Server', ()=>{
        (0, _test.test)('should retrieve visitor sessions with real data', async ()=>{
            performanceTracker.start();
            const result = await leadpulseServer.handleRequest({
                method: 'tools/call',
                params: {
                    name: 'get_visitor_sessions',
                    arguments: {
                        organizationId: 'test-org-1',
                        timeRange: '7d',
                        limit: 50
                    }
                }
            });
            const duration = performanceTracker.measure('visitor_sessions_mcp');
            (0, _test.expect)(result).toBeDefined();
            (0, _test.expect)(result.content).toBeDefined();
            (0, _test.expect)(Array.isArray(result.content)).toBe(true);
            (0, _test.expect)(result.content.length).toBeGreaterThan(0);
            (0, _test.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxResponseTime);
            // Verify data structure
            const session = result.content[0];
            (0, _test.expect)(session).toHaveProperty('sessionId');
            (0, _test.expect)(session).toHaveProperty('visitorId');
            (0, _test.expect)(session).toHaveProperty('pageViews');
            (0, _test.expect)(session).toHaveProperty('sessionDuration');
            (0, _test.expect)(session).toHaveProperty('country');
            (0, _test.expect)(session).toHaveProperty('device');
            (0, _test.expect)(session).toHaveProperty('browser');
            console.log(`👤 Visitor sessions MCP: ${duration}ms`);
        });
        (0, _test.test)('should analyze visitor behavior patterns', async ()=>{
            performanceTracker.start();
            const result = await leadpulseServer.handleRequest({
                method: 'tools/call',
                params: {
                    name: 'analyze_visitor_behavior',
                    arguments: {
                        organizationId: 'test-org-1',
                        timeRange: '30d'
                    }
                }
            });
            const duration = performanceTracker.measure('visitor_behavior_analysis');
            (0, _test.expect)(result).toBeDefined();
            (0, _test.expect)(result.content).toBeDefined();
            (0, _test.expect)(result.content).toHaveProperty('totalSessions');
            (0, _test.expect)(result.content).toHaveProperty('uniqueVisitors');
            (0, _test.expect)(result.content).toHaveProperty('avgSessionDuration');
            (0, _test.expect)(result.content).toHaveProperty('avgPageViews');
            (0, _test.expect)(result.content).toHaveProperty('topCountries');
            (0, _test.expect)(result.content).toHaveProperty('deviceBreakdown');
            (0, _test.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxResponseTime);
            console.log(`📈 Visitor behavior analysis: ${duration}ms`);
        });
        (0, _test.test)('should track conversion funnels', async ()=>{
            performanceTracker.start();
            const result = await leadpulseServer.handleRequest({
                method: 'tools/call',
                params: {
                    name: 'get_conversion_funnel',
                    arguments: {
                        organizationId: 'test-org-1',
                        funnelType: 'signup'
                    }
                }
            });
            const duration = performanceTracker.measure('conversion_funnel');
            (0, _test.expect)(result).toBeDefined();
            (0, _test.expect)(result.content).toBeDefined();
            (0, _test.expect)(result.content).toHaveProperty('steps');
            (0, _test.expect)(Array.isArray(result.content.steps)).toBe(true);
            (0, _test.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxResponseTime);
            console.log(`🎯 Conversion funnel: ${duration}ms`);
        });
    });
    (0, _test.describe)('Monitoring Server', ()=>{
        (0, _test.test)('should retrieve monitoring metrics with real data', async ()=>{
            performanceTracker.start();
            const result = await monitoringServer.handleRequest({
                method: 'tools/call',
                params: {
                    name: 'get_monitoring_metrics',
                    arguments: {
                        organizationId: 'test-org-1',
                        metricType: 'api_response_time',
                        timeRange: '1h',
                        limit: 100
                    }
                }
            });
            const duration = performanceTracker.measure('monitoring_metrics_mcp');
            (0, _test.expect)(result).toBeDefined();
            (0, _test.expect)(result.content).toBeDefined();
            (0, _test.expect)(Array.isArray(result.content)).toBe(true);
            (0, _test.expect)(result.content.length).toBeGreaterThan(0);
            (0, _test.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxResponseTime);
            // Verify data structure
            const metric = result.content[0];
            (0, _test.expect)(metric).toHaveProperty('metricType');
            (0, _test.expect)(metric).toHaveProperty('value');
            (0, _test.expect)(metric).toHaveProperty('timestamp');
            console.log(`📊 Monitoring metrics MCP: ${duration}ms`);
        });
        (0, _test.test)('should calculate system health metrics', async ()=>{
            performanceTracker.start();
            const result = await monitoringServer.handleRequest({
                method: 'tools/call',
                params: {
                    name: 'calculate_system_health',
                    arguments: {
                        organizationId: 'test-org-1',
                        timeRange: '1h'
                    }
                }
            });
            const duration = performanceTracker.measure('system_health_calculation');
            (0, _test.expect)(result).toBeDefined();
            (0, _test.expect)(result.content).toBeDefined();
            (0, _test.expect)(result.content).toHaveProperty('overallHealth');
            (0, _test.expect)(result.content).toHaveProperty('metrics');
            (0, _test.expect)(typeof result.content.overallHealth).toBe('number');
            (0, _test.expect)(result.content.overallHealth).toBeGreaterThanOrEqual(0);
            (0, _test.expect)(result.content.overallHealth).toBeLessThanOrEqual(100);
            (0, _test.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxResponseTime);
            console.log(`🏥 System health calculation: ${duration}ms`);
        });
        (0, _test.test)('should detect performance anomalies', async ()=>{
            performanceTracker.start();
            const result = await monitoringServer.handleRequest({
                method: 'tools/call',
                params: {
                    name: 'detect_anomalies',
                    arguments: {
                        organizationId: 'test-org-1',
                        metricType: 'api_response_time',
                        timeRange: '24h'
                    }
                }
            });
            const duration = performanceTracker.measure('anomaly_detection');
            (0, _test.expect)(result).toBeDefined();
            (0, _test.expect)(result.content).toBeDefined();
            (0, _test.expect)(result.content).toHaveProperty('anomalies');
            (0, _test.expect)(Array.isArray(result.content.anomalies)).toBe(true);
            (0, _test.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxResponseTime);
            console.log(`🔍 Anomaly detection: ${duration}ms`);
        });
    });
    (0, _test.describe)('Multi-Server Integration Tests', ()=>{
        (0, _test.test)('should coordinate customer insights across servers', async ()=>{
            performanceTracker.start();
            // Get customer predictions from customer server
            const predictions = await customerServer.handleRequest({
                method: 'tools/call',
                params: {
                    name: 'get_customer_predictions',
                    arguments: {
                        organizationId: 'test-org-1',
                        limit: 5
                    }
                }
            });
            // Get campaign metrics for these customers
            const campaignMetrics = await campaignServer.handleRequest({
                method: 'tools/call',
                params: {
                    name: 'get_campaign_metrics',
                    arguments: {
                        organizationId: 'test-org-1',
                        limit: 10
                    }
                }
            });
            // Get visitor behavior for context
            const visitorBehavior = await leadpulseServer.handleRequest({
                method: 'tools/call',
                params: {
                    name: 'analyze_visitor_behavior',
                    arguments: {
                        organizationId: 'test-org-1',
                        timeRange: '7d'
                    }
                }
            });
            const duration = performanceTracker.measure('multi_server_coordination');
            (0, _test.expect)(predictions.content.length).toBeGreaterThan(0);
            (0, _test.expect)(campaignMetrics.content.length).toBeGreaterThan(0);
            (0, _test.expect)(visitorBehavior.content).toBeDefined();
            (0, _test.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxResponseTime * 2);
            console.log(`🔗 Multi-server coordination: ${duration}ms`);
        });
        (0, _test.test)('should validate data consistency across servers', async ()=>{
            // Get organization data from different servers
            const campaignOrgData = await campaignServer.handleRequest({
                method: 'tools/call',
                params: {
                    name: 'get_organization_summary',
                    arguments: {
                        organizationId: 'test-org-1'
                    }
                }
            });
            const customerOrgData = await customerServer.handleRequest({
                method: 'tools/call',
                params: {
                    name: 'get_organization_summary',
                    arguments: {
                        organizationId: 'test-org-1'
                    }
                }
            });
            // Verify consistency
            (0, _test.expect)(campaignOrgData.content.organizationId).toBe(customerOrgData.content.organizationId);
            (0, _test.expect)(campaignOrgData.content.organizationName).toBe(customerOrgData.content.organizationName);
            console.log('✅ Data consistency verified across servers');
        });
        (0, _test.test)('should handle concurrent requests across servers', async ()=>{
            const concurrentRequests = await Promise.all([
                campaignServer.handleRequest({
                    method: 'tools/call',
                    params: {
                        name: 'get_campaign_metrics',
                        arguments: {
                            organizationId: 'test-org-1',
                            limit: 5
                        }
                    }
                }),
                customerServer.handleRequest({
                    method: 'tools/call',
                    params: {
                        name: 'get_customer_predictions',
                        arguments: {
                            organizationId: 'test-org-1',
                            limit: 5
                        }
                    }
                }),
                leadpulseServer.handleRequest({
                    method: 'tools/call',
                    params: {
                        name: 'get_visitor_sessions',
                        arguments: {
                            organizationId: 'test-org-1',
                            limit: 5
                        }
                    }
                }),
                monitoringServer.handleRequest({
                    method: 'tools/call',
                    params: {
                        name: 'get_monitoring_metrics',
                        arguments: {
                            organizationId: 'test-org-1',
                            metricType: 'api_response_time',
                            limit: 5
                        }
                    }
                })
            ]);
            concurrentRequests.forEach((result, index)=>{
                (0, _test.expect)(result).toBeDefined();
                (0, _test.expect)(result.content).toBeDefined();
            });
            console.log('🚀 Concurrent requests across all servers successful');
        });
    });
    (0, _test.describe)('Error Handling and Edge Cases', ()=>{
        (0, _test.test)('should handle invalid organization IDs gracefully', async ()=>{
            const result = await campaignServer.handleRequest({
                method: 'tools/call',
                params: {
                    name: 'get_campaign_metrics',
                    arguments: {
                        organizationId: 'non-existent-org',
                        limit: 10
                    }
                }
            });
            (0, _test.expect)(result).toBeDefined();
            (0, _test.expect)(Array.isArray(result.content)).toBe(true);
            (0, _test.expect)(result.content.length).toBe(0);
        });
        (0, _test.test)('should handle large data requests efficiently', async ()=>{
            performanceTracker.start();
            const result = await leadpulseServer.handleRequest({
                method: 'tools/call',
                params: {
                    name: 'get_visitor_sessions',
                    arguments: {
                        organizationId: 'test-org-1',
                        timeRange: '30d',
                        limit: 1000
                    }
                }
            });
            const duration = performanceTracker.measure('large_data_request');
            (0, _test.expect)(result).toBeDefined();
            (0, _test.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxResponseTime * 3); // Allow more time for large requests
            console.log(`📊 Large data request: ${duration}ms`);
        });
        (0, _test.test)('should handle malformed requests gracefully', async ()=>{
            try {
                await campaignServer.handleRequest({
                    method: 'tools/call',
                    params: {
                        name: 'get_campaign_metrics',
                        arguments: {
                            // Missing required organizationId
                            limit: 10
                        }
                    }
                });
            } catch (error) {
                (0, _test.expect)(error).toBeDefined();
                (0, _test.expect)(error.message).toContain('organizationId');
            }
        });
    });
    (0, _test.describe)('Performance Benchmarks', ()=>{
        (0, _test.test)('should meet performance benchmarks for all servers', async ()=>{
            const benchmarks = [
                {
                    name: 'Campaign Analytics',
                    server: campaignServer,
                    request: {
                        method: 'tools/call',
                        params: {
                            name: 'get_campaign_metrics',
                            arguments: {
                                organizationId: 'test-org-1',
                                limit: 50
                            }
                        }
                    }
                },
                {
                    name: 'Customer Data',
                    server: customerServer,
                    request: {
                        method: 'tools/call',
                        params: {
                            name: 'get_customer_predictions',
                            arguments: {
                                organizationId: 'test-org-1',
                                limit: 50
                            }
                        }
                    }
                },
                {
                    name: 'LeadPulse',
                    server: leadpulseServer,
                    request: {
                        method: 'tools/call',
                        params: {
                            name: 'get_visitor_sessions',
                            arguments: {
                                organizationId: 'test-org-1',
                                timeRange: '7d',
                                limit: 50
                            }
                        }
                    }
                },
                {
                    name: 'Monitoring',
                    server: monitoringServer,
                    request: {
                        method: 'tools/call',
                        params: {
                            name: 'get_monitoring_metrics',
                            arguments: {
                                organizationId: 'test-org-1',
                                metricType: 'api_response_time',
                                limit: 50
                            }
                        }
                    }
                }
            ];
            for (const benchmark of benchmarks){
                performanceTracker.start();
                const result = await benchmark.server.handleRequest(benchmark.request);
                const duration = performanceTracker.measure(`${benchmark.name}_benchmark`);
                (0, _test.expect)(result).toBeDefined();
                (0, _test.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxResponseTime);
                console.log(`⚡ ${benchmark.name} benchmark: ${duration}ms`);
            }
        });
    });
    (0, _test.describe)('Final Performance Report', ()=>{
        (0, _test.test)('should generate comprehensive performance report', async ()=>{
            const allStats = performanceTracker.getAllStats();
            console.log('\n📊 MCP Servers Integration Test Performance Report:');
            console.log('==================================================');
            Object.entries(allStats).forEach(([operation, stats])=>{
                console.log(`${operation}:`);
                console.log(`  Average: ${stats.avg.toFixed(2)}ms`);
                console.log(`  Min: ${stats.min}ms`);
                console.log(`  Max: ${stats.max}ms`);
                console.log(`  Count: ${stats.count}`);
                console.log('');
            });
            // Calculate overall metrics
            const allDurations = Object.values(allStats).flatMap((stat)=>Array(stat.count).fill(stat.avg));
            const overallAvg = allDurations.reduce((sum, val)=>sum + val, 0) / allDurations.length;
            console.log(`📈 Overall Average Response Time: ${overallAvg.toFixed(2)}ms`);
            console.log(`🎯 Performance Target: ${_setup.testConfig.performance.maxResponseTime}ms`);
            console.log(`✅ Performance Status: ${overallAvg < _setup.testConfig.performance.maxResponseTime ? 'PASSED' : 'FAILED'}`);
            (0, _test.expect)(overallAvg).toBeLessThan(_setup.testConfig.performance.maxResponseTime);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,