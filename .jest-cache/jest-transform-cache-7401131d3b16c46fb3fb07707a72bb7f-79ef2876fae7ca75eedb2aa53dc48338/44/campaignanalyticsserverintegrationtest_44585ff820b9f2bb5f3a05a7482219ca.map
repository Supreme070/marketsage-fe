{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/__tests__/integration/mcp/campaign-analytics-server.integration.test.ts"],"sourcesContent":["/**\n * Campaign Analytics MCP Server Integration Tests\n * \n * These tests verify the Campaign Analytics MCP server works correctly with real database data.\n * Tests cover actual database queries, data relationships, and performance.\n */\n\nimport { describe, beforeAll, afterAll, beforeEach, test, expect } from '@jest/jest';\nimport { CampaignAnalyticsMCPServer } from '../../../mcp/servers/campaign-analytics-server';\nimport { \n  TestDatabaseManager, \n  testPrisma, \n  PerformanceTracker,\n  testConfig\n} from './setup';\nimport { MCPAuthContext } from '../../../mcp/types/mcp-types';\n\ndescribe('Campaign Analytics MCP Server Integration Tests', () => {\n  let server: CampaignAnalyticsMCPServer;\n  let dbManager: TestDatabaseManager;\n  let performanceTracker: PerformanceTracker;\n  let authContext: MCPAuthContext;\n\n  beforeAll(async () => {\n    // Setup test database with seeded data\n    dbManager = TestDatabaseManager.getInstance();\n    await dbManager.setup();\n    \n    // Initialize performance tracker\n    performanceTracker = new PerformanceTracker();\n    \n    // Create MCP server instance\n    server = new CampaignAnalyticsMCPServer({\n      rateLimiting: {\n        enabled: false // Disable for testing\n      }\n    });\n    \n    // Setup auth context for testing\n    authContext = {\n      organizationId: 'test-org-1',\n      userId: 'test-user-1',\n      role: 'ADMIN',\n      permissions: ['read:campaigns', 'read:analytics']\n    };\n  }, testConfig.timeouts.database);\n\n  afterAll(async () => {\n    await dbManager.teardown();\n  });\n\n  beforeEach(async () => {\n    performanceTracker.reset();\n  });\n\n  describe('Database Integration', () => {\n    test('should connect to test database and verify seeded data', async () => {\n      const counts = await dbManager.getDataCounts();\n      \n      expect(counts.organizations).toBeGreaterThan(0);\n      expect(counts.emailCampaigns).toBeGreaterThan(0);\n      expect(counts.smsCampaigns).toBeGreaterThan(0);\n      expect(counts.whatsappCampaigns).toBeGreaterThan(0);\n      expect(counts.mcpCampaignMetrics).toBeGreaterThan(0);\n      \n      console.log('✅ Verified seeded data counts:', counts);\n    });\n\n    test('should verify campaign metrics data integrity', async () => {\n      // Test data relationships and foreign key constraints\n      const campaignMetrics = await testPrisma.mCPCampaignMetrics.findMany({\n        include: {\n          organization: true\n        }\n      });\n\n      expect(campaignMetrics.length).toBeGreaterThan(0);\n      \n      for (const metric of campaignMetrics) {\n        // Verify organization relationship\n        expect(metric.organization).toBeDefined();\n        expect(metric.organizationId).toBe(metric.organization.id);\n        \n        // Verify data integrity\n        expect(metric.sent).toBeGreaterThanOrEqual(0);\n        expect(metric.delivered).toBeLessThanOrEqual(metric.sent);\n        expect(metric.opened).toBeLessThanOrEqual(metric.delivered);\n        expect(metric.clicked).toBeLessThanOrEqual(metric.opened);\n        expect(metric.converted).toBeLessThanOrEqual(metric.clicked);\n        \n        // Verify rate calculations\n        if (metric.delivered > 0) {\n          const expectedOpenRate = (metric.opened / metric.delivered) * 100;\n          expect(Math.abs(metric.openRate - expectedOpenRate)).toBeLessThan(0.1);\n        }\n        \n        // Verify A/B test data if present\n        if (metric.abTestData) {\n          const abTestData = JSON.parse(metric.abTestData as string);\n          expect(abTestData).toHaveProperty('testType');\n          expect(abTestData).toHaveProperty('variants');\n          expect(abTestData.variants).toBeInstanceOf(Array);\n        }\n      }\n      \n      console.log(`✅ Verified ${campaignMetrics.length} campaign metrics for data integrity`);\n    });\n  });\n\n  describe('MCP Server Operations', () => {\n    test('should list campaign analytics resources', async () => {\n      performanceTracker.start();\n      \n      const resources = await server.listResources(authContext);\n      const duration = performanceTracker.measure('listResources');\n      \n      expect(resources).toBeInstanceOf(Array);\n      expect(resources.length).toBeGreaterThan(0);\n      \n      // Verify resource structure\n      for (const resource of resources) {\n        expect(resource).toHaveProperty('uri');\n        expect(resource).toHaveProperty('name');\n        expect(resource).toHaveProperty('description');\n        expect(resource).toHaveProperty('mimeType');\n      }\n      \n      expect(duration).toBeLessThan(testConfig.performance.maxResponseTime);\n      console.log(`✅ Listed ${resources.length} resources in ${duration}ms`);\n    });\n\n    test('should read campaign analytics with real data', async () => {\n      performanceTracker.start();\n      \n      const result = await server.readResource(\n        'campaign://analytics',\n        {\n          organizationId: 'test-org-1',\n          dateRange: {\n            start: '2024-01-01',\n            end: '2024-12-31'\n          }\n        },\n        authContext\n      );\n      \n      const duration = performanceTracker.measure('readCampaignAnalytics');\n      \n      expect(result).toBeDefined();\n      expect(result.success).toBe(true);\n      expect(result.data).toBeDefined();\n      \n      const data = result.data;\n      expect(data).toHaveProperty('summary');\n      expect(data).toHaveProperty('campaigns');\n      expect(data).toHaveProperty('performance');\n      \n      // Verify summary metrics\n      expect(data.summary.totalCampaigns).toBeGreaterThan(0);\n      expect(data.summary.totalSent).toBeGreaterThan(0);\n      expect(data.summary.avgOpenRate).toBeGreaterThanOrEqual(0);\n      expect(data.summary.avgClickRate).toBeGreaterThanOrEqual(0);\n      \n      // Verify campaign data matches database\n      const dbCampaigns = await testPrisma.mCPCampaignMetrics.count({\n        where: { organizationId: 'test-org-1' }\n      });\n      expect(data.campaigns.length).toBe(dbCampaigns);\n      \n      expect(duration).toBeLessThan(testConfig.performance.maxResponseTime);\n      console.log(`✅ Read campaign analytics with ${data.campaigns.length} campaigns in ${duration}ms`);\n    });\n\n    test('should handle complex queries with joins and aggregations', async () => {\n      performanceTracker.start();\n      \n      const result = await server.readResource(\n        'campaign://performance',\n        {\n          organizationId: 'test-org-1',\n          groupBy: 'campaignType',\n          metrics: ['openRate', 'clickRate', 'conversionRate'],\n          aggregation: 'avg'\n        },\n        authContext\n      );\n      \n      const duration = performanceTracker.measure('complexQuery');\n      \n      expect(result).toBeDefined();\n      expect(result.success).toBe(true);\n      expect(result.data).toBeDefined();\n      \n      const data = result.data;\n      expect(data).toHaveProperty('groups');\n      \n      // Verify grouped data\n      for (const group of data.groups) {\n        expect(group).toHaveProperty('campaignType');\n        expect(group).toHaveProperty('metrics');\n        expect(['EMAIL', 'SMS', 'WHATSAPP']).toContain(group.campaignType);\n        \n        // Verify aggregated metrics\n        expect(group.metrics.avgOpenRate).toBeGreaterThanOrEqual(0);\n        expect(group.metrics.avgClickRate).toBeGreaterThanOrEqual(0);\n        expect(group.metrics.avgConversionRate).toBeGreaterThanOrEqual(0);\n      }\n      \n      expect(duration).toBeLessThan(testConfig.performance.maxQueryTime);\n      console.log(`✅ Executed complex query with aggregations in ${duration}ms`);\n    });\n\n    test('should validate A/B test data analysis', async () => {\n      performanceTracker.start();\n      \n      const result = await server.readResource(\n        'campaign://ab-tests',\n        {\n          organizationId: 'test-org-1'\n        },\n        authContext\n      );\n      \n      const duration = performanceTracker.measure('abTestAnalysis');\n      \n      expect(result).toBeDefined();\n      expect(result.success).toBe(true);\n      \n      const data = result.data;\n      expect(data).toHaveProperty('abTests');\n      \n      // Verify A/B test data structure\n      for (const test of data.abTests) {\n        expect(test).toHaveProperty('campaignId');\n        expect(test).toHaveProperty('testType');\n        expect(test).toHaveProperty('variants');\n        expect(test).toHaveProperty('winnerVariant');\n        expect(test).toHaveProperty('improvementPercent');\n        \n        // Verify statistical significance\n        expect(test.variants.length).toBeGreaterThan(1);\n        const winners = test.variants.filter(v => v.isWinner);\n        expect(winners.length).toBe(1);\n      }\n      \n      expect(duration).toBeLessThan(testConfig.performance.maxResponseTime);\n      console.log(`✅ Analyzed ${data.abTests.length} A/B tests in ${duration}ms`);\n    });\n  });\n\n  describe('Performance and Scalability', () => {\n    test('should handle concurrent requests efficiently', async () => {\n      const concurrentRequests = 5;\n      const promises = [];\n      \n      performanceTracker.start();\n      \n      for (let i = 0; i < concurrentRequests; i++) {\n        promises.push(\n          server.readResource(\n            'campaign://analytics',\n            { organizationId: 'test-org-1' },\n            authContext\n          )\n        );\n      }\n      \n      const results = await Promise.all(promises);\n      const duration = performanceTracker.measure('concurrentRequests');\n      \n      // Verify all requests succeeded\n      for (const result of results) {\n        expect(result.success).toBe(true);\n        expect(result.data).toBeDefined();\n      }\n      \n      expect(duration).toBeLessThan(testConfig.performance.maxResponseTime * 2);\n      console.log(`✅ Handled ${concurrentRequests} concurrent requests in ${duration}ms`);\n    });\n\n    test('should validate database query optimization', async () => {\n      // Test query performance with realistic data volumes\n      const startTime = Date.now();\n      \n      const result = await testPrisma.mCPCampaignMetrics.findMany({\n        where: {\n          organizationId: 'test-org-1'\n        },\n        include: {\n          organization: {\n            select: {\n              name: true,\n              plan: true\n            }\n          }\n        },\n        orderBy: {\n          calculatedAt: 'desc'\n        }\n      });\n      \n      const queryDuration = Date.now() - startTime;\n      \n      expect(result.length).toBeGreaterThan(0);\n      expect(queryDuration).toBeLessThan(testConfig.performance.maxQueryTime);\n      \n      console.log(`✅ Query performance: ${result.length} records in ${queryDuration}ms`);\n    });\n\n    test('should measure end-to-end response times', async () => {\n      const operations = [\n        'campaign://analytics',\n        'campaign://performance',\n        'campaign://ab-tests'\n      ];\n      \n      const measurements = [];\n      \n      for (const operation of operations) {\n        performanceTracker.start();\n        \n        const result = await server.readResource(\n          operation,\n          { organizationId: 'test-org-1' },\n          authContext\n        );\n        \n        const duration = performanceTracker.measure(operation);\n        measurements.push({ operation, duration, success: result.success });\n        \n        expect(result.success).toBe(true);\n        expect(duration).toBeLessThan(testConfig.performance.maxResponseTime);\n      }\n      \n      console.log('✅ End-to-end performance measurements:', measurements);\n    });\n  });\n\n  describe('Data Consistency and Validation', () => {\n    test('should ensure data consistency across operations', async () => {\n      // Get analytics summary\n      const analyticsResult = await server.readResource(\n        'campaign://analytics',\n        { organizationId: 'test-org-1' },\n        authContext\n      );\n      \n      // Get performance data\n      const performanceResult = await server.readResource(\n        'campaign://performance',\n        { organizationId: 'test-org-1' },\n        authContext\n      );\n      \n      expect(analyticsResult.success).toBe(true);\n      expect(performanceResult.success).toBe(true);\n      \n      const analytics = analyticsResult.data;\n      const performance = performanceResult.data;\n      \n      // Verify data consistency\n      expect(analytics.summary.totalCampaigns).toBe(analytics.campaigns.length);\n      \n      // Calculate expected totals from individual campaigns\n      const expectedTotalSent = analytics.campaigns.reduce(\n        (sum, campaign) => sum + campaign.sent, 0\n      );\n      expect(analytics.summary.totalSent).toBe(expectedTotalSent);\n      \n      console.log('✅ Data consistency verified across operations');\n    });\n\n    test('should validate metric calculations against database', async () => {\n      // Get MCP server calculations\n      const serverResult = await server.readResource(\n        'campaign://analytics',\n        { organizationId: 'test-org-1' },\n        authContext\n      );\n      \n      // Get raw database data\n      const dbMetrics = await testPrisma.mCPCampaignMetrics.findMany({\n        where: { organizationId: 'test-org-1' }\n      });\n      \n      expect(serverResult.success).toBe(true);\n      const serverData = serverResult.data;\n      \n      // Verify calculations match database\n      const dbTotalSent = dbMetrics.reduce((sum, metric) => sum + metric.sent, 0);\n      const dbTotalDelivered = dbMetrics.reduce((sum, metric) => sum + metric.delivered, 0);\n      const dbTotalOpened = dbMetrics.reduce((sum, metric) => sum + metric.opened, 0);\n      \n      expect(serverData.summary.totalSent).toBe(dbTotalSent);\n      expect(serverData.summary.totalDelivered).toBe(dbTotalDelivered);\n      expect(serverData.summary.totalOpened).toBe(dbTotalOpened);\n      \n      // Verify rate calculations\n      const expectedAvgOpenRate = dbTotalDelivered > 0 ? \n        (dbTotalOpened / dbTotalDelivered) * 100 : 0;\n      expect(Math.abs(serverData.summary.avgOpenRate - expectedAvgOpenRate)).toBeLessThan(0.1);\n      \n      console.log('✅ Metric calculations validated against database');\n    });\n  });\n\n  describe('Error Handling and Edge Cases', () => {\n    test('should handle invalid organization ID gracefully', async () => {\n      const result = await server.readResource(\n        'campaign://analytics',\n        { organizationId: 'invalid-org-id' },\n        authContext\n      );\n      \n      expect(result.success).toBe(true);\n      expect(result.data.campaigns).toHaveLength(0);\n      expect(result.data.summary.totalCampaigns).toBe(0);\n      \n      console.log('✅ Handled invalid organization ID gracefully');\n    });\n\n    test('should handle empty date ranges appropriately', async () => {\n      const futureDate = new Date(Date.now() + 365 * 24 * 60 * 60 * 1000);\n      \n      const result = await server.readResource(\n        'campaign://analytics',\n        {\n          organizationId: 'test-org-1',\n          dateRange: {\n            start: futureDate.toISOString(),\n            end: futureDate.toISOString()\n          }\n        },\n        authContext\n      );\n      \n      expect(result.success).toBe(true);\n      expect(result.data.campaigns).toHaveLength(0);\n      \n      console.log('✅ Handled empty date range appropriately');\n    });\n\n    test('should validate authentication and authorization', async () => {\n      const unauthorizedContext = {\n        ...authContext,\n        permissions: ['read:contacts'] // Wrong permissions\n      };\n      \n      try {\n        await server.readResource(\n          'campaign://analytics',\n          { organizationId: 'test-org-1' },\n          unauthorizedContext\n        );\n        \n        // Should not reach here\n        expect(true).toBe(false);\n      } catch (error) {\n        expect(error.name).toBe('MCPAuthorizationError');\n        console.log('✅ Correctly rejected unauthorized access');\n      }\n    });\n  });\n\n  afterAll(() => {\n    // Display performance summary\n    const stats = performanceTracker.getAllStats();\n    console.log('\\n📊 Performance Summary:');\n    for (const [operation, operationStats] of Object.entries(stats)) {\n      console.log(`  ${operation}: avg ${operationStats.avg}ms, min ${operationStats.min}ms, max ${operationStats.max}ms (${operationStats.count} calls)`);\n    }\n  });\n});\n"],"names":["describe","server","dbManager","performanceTracker","authContext","beforeAll","TestDatabaseManager","getInstance","setup","PerformanceTracker","CampaignAnalyticsMCPServer","rateLimiting","enabled","organizationId","userId","role","permissions","testConfig","timeouts","database","afterAll","teardown","beforeEach","reset","test","counts","getDataCounts","expect","organizations","toBeGreaterThan","emailCampaigns","smsCampaigns","whatsappCampaigns","mcpCampaignMetrics","console","log","campaignMetrics","testPrisma","mCPCampaignMetrics","findMany","include","organization","length","metric","toBeDefined","toBe","id","sent","toBeGreaterThanOrEqual","delivered","toBeLessThanOrEqual","opened","clicked","converted","expectedOpenRate","Math","abs","openRate","toBeLessThan","abTestData","JSON","parse","toHaveProperty","variants","toBeInstanceOf","Array","start","resources","listResources","duration","measure","resource","performance","maxResponseTime","result","readResource","dateRange","end","success","data","summary","totalCampaigns","totalSent","avgOpenRate","avgClickRate","dbCampaigns","count","where","campaigns","groupBy","metrics","aggregation","group","groups","toContain","campaignType","avgConversionRate","maxQueryTime","abTests","winners","filter","v","isWinner","concurrentRequests","promises","i","push","results","Promise","all","startTime","Date","now","select","name","plan","orderBy","calculatedAt","queryDuration","operations","measurements","operation","analyticsResult","performanceResult","analytics","expectedTotalSent","reduce","sum","campaign","serverResult","dbMetrics","serverData","dbTotalSent","dbTotalDelivered","dbTotalOpened","totalDelivered","totalOpened","expectedAvgOpenRate","toHaveLength","futureDate","toISOString","unauthorizedContext","error","stats","getAllStats","operationStats","Object","entries","avg","min","max"],"mappings":"AAAA;;;;;CAKC;;;;sBAEuE;yCAC7B;uBAMpC;AAGPA,IAAAA,cAAQ,EAAC,mDAAmD;IAC1D,IAAIC;IACJ,IAAIC;IACJ,IAAIC;IACJ,IAAIC;IAEJC,IAAAA,eAAS,EAAC;QACR,uCAAuC;QACvCH,YAAYI,0BAAmB,CAACC,WAAW;QAC3C,MAAML,UAAUM,KAAK;QAErB,iCAAiC;QACjCL,qBAAqB,IAAIM,yBAAkB;QAE3C,6BAA6B;QAC7BR,SAAS,IAAIS,mDAA0B,CAAC;YACtCC,cAAc;gBACZC,SAAS,MAAM,sBAAsB;YACvC;QACF;QAEA,iCAAiC;QACjCR,cAAc;YACZS,gBAAgB;YAChBC,QAAQ;YACRC,MAAM;YACNC,aAAa;gBAAC;gBAAkB;aAAiB;QACnD;IACF,GAAGC,iBAAU,CAACC,QAAQ,CAACC,QAAQ;IAE/BC,IAAAA,cAAQ,EAAC;QACP,MAAMlB,UAAUmB,QAAQ;IAC1B;IAEAC,IAAAA,gBAAU,EAAC;QACTnB,mBAAmBoB,KAAK;IAC1B;IAEAvB,IAAAA,cAAQ,EAAC,wBAAwB;QAC/BwB,IAAAA,UAAI,EAAC,0DAA0D;YAC7D,MAAMC,SAAS,MAAMvB,UAAUwB,aAAa;YAE5CC,IAAAA,YAAM,EAACF,OAAOG,aAAa,EAAEC,eAAe,CAAC;YAC7CF,IAAAA,YAAM,EAACF,OAAOK,cAAc,EAAED,eAAe,CAAC;YAC9CF,IAAAA,YAAM,EAACF,OAAOM,YAAY,EAAEF,eAAe,CAAC;YAC5CF,IAAAA,YAAM,EAACF,OAAOO,iBAAiB,EAAEH,eAAe,CAAC;YACjDF,IAAAA,YAAM,EAACF,OAAOQ,kBAAkB,EAAEJ,eAAe,CAAC;YAElDK,QAAQC,GAAG,CAAC,kCAAkCV;QAChD;QAEAD,IAAAA,UAAI,EAAC,iDAAiD;YACpD,sDAAsD;YACtD,MAAMY,kBAAkB,MAAMC,iBAAU,CAACC,kBAAkB,CAACC,QAAQ,CAAC;gBACnEC,SAAS;oBACPC,cAAc;gBAChB;YACF;YAEAd,IAAAA,YAAM,EAACS,gBAAgBM,MAAM,EAAEb,eAAe,CAAC;YAE/C,KAAK,MAAMc,UAAUP,gBAAiB;gBACpC,mCAAmC;gBACnCT,IAAAA,YAAM,EAACgB,OAAOF,YAAY,EAAEG,WAAW;gBACvCjB,IAAAA,YAAM,EAACgB,OAAO9B,cAAc,EAAEgC,IAAI,CAACF,OAAOF,YAAY,CAACK,EAAE;gBAEzD,wBAAwB;gBACxBnB,IAAAA,YAAM,EAACgB,OAAOI,IAAI,EAAEC,sBAAsB,CAAC;gBAC3CrB,IAAAA,YAAM,EAACgB,OAAOM,SAAS,EAAEC,mBAAmB,CAACP,OAAOI,IAAI;gBACxDpB,IAAAA,YAAM,EAACgB,OAAOQ,MAAM,EAAED,mBAAmB,CAACP,OAAOM,SAAS;gBAC1DtB,IAAAA,YAAM,EAACgB,OAAOS,OAAO,EAAEF,mBAAmB,CAACP,OAAOQ,MAAM;gBACxDxB,IAAAA,YAAM,EAACgB,OAAOU,SAAS,EAAEH,mBAAmB,CAACP,OAAOS,OAAO;gBAE3D,2BAA2B;gBAC3B,IAAIT,OAAOM,SAAS,GAAG,GAAG;oBACxB,MAAMK,mBAAmB,AAACX,OAAOQ,MAAM,GAAGR,OAAOM,SAAS,GAAI;oBAC9DtB,IAAAA,YAAM,EAAC4B,KAAKC,GAAG,CAACb,OAAOc,QAAQ,GAAGH,mBAAmBI,YAAY,CAAC;gBACpE;gBAEA,kCAAkC;gBAClC,IAAIf,OAAOgB,UAAU,EAAE;oBACrB,MAAMA,aAAaC,KAAKC,KAAK,CAAClB,OAAOgB,UAAU;oBAC/ChC,IAAAA,YAAM,EAACgC,YAAYG,cAAc,CAAC;oBAClCnC,IAAAA,YAAM,EAACgC,YAAYG,cAAc,CAAC;oBAClCnC,IAAAA,YAAM,EAACgC,WAAWI,QAAQ,EAAEC,cAAc,CAACC;gBAC7C;YACF;YAEA/B,QAAQC,GAAG,CAAC,CAAC,WAAW,EAAEC,gBAAgBM,MAAM,CAAC,oCAAoC,CAAC;QACxF;IACF;IAEA1C,IAAAA,cAAQ,EAAC,yBAAyB;QAChCwB,IAAAA,UAAI,EAAC,4CAA4C;YAC/CrB,mBAAmB+D,KAAK;YAExB,MAAMC,YAAY,MAAMlE,OAAOmE,aAAa,CAAChE;YAC7C,MAAMiE,WAAWlE,mBAAmBmE,OAAO,CAAC;YAE5C3C,IAAAA,YAAM,EAACwC,WAAWH,cAAc,CAACC;YACjCtC,IAAAA,YAAM,EAACwC,UAAUzB,MAAM,EAAEb,eAAe,CAAC;YAEzC,4BAA4B;YAC5B,KAAK,MAAM0C,YAAYJ,UAAW;gBAChCxC,IAAAA,YAAM,EAAC4C,UAAUT,cAAc,CAAC;gBAChCnC,IAAAA,YAAM,EAAC4C,UAAUT,cAAc,CAAC;gBAChCnC,IAAAA,YAAM,EAAC4C,UAAUT,cAAc,CAAC;gBAChCnC,IAAAA,YAAM,EAAC4C,UAAUT,cAAc,CAAC;YAClC;YAEAnC,IAAAA,YAAM,EAAC0C,UAAUX,YAAY,CAACzC,iBAAU,CAACuD,WAAW,CAACC,eAAe;YACpEvC,QAAQC,GAAG,CAAC,CAAC,SAAS,EAAEgC,UAAUzB,MAAM,CAAC,cAAc,EAAE2B,SAAS,EAAE,CAAC;QACvE;QAEA7C,IAAAA,UAAI,EAAC,iDAAiD;YACpDrB,mBAAmB+D,KAAK;YAExB,MAAMQ,SAAS,MAAMzE,OAAO0E,YAAY,CACtC,wBACA;gBACE9D,gBAAgB;gBAChB+D,WAAW;oBACTV,OAAO;oBACPW,KAAK;gBACP;YACF,GACAzE;YAGF,MAAMiE,WAAWlE,mBAAmBmE,OAAO,CAAC;YAE5C3C,IAAAA,YAAM,EAAC+C,QAAQ9B,WAAW;YAC1BjB,IAAAA,YAAM,EAAC+C,OAAOI,OAAO,EAAEjC,IAAI,CAAC;YAC5BlB,IAAAA,YAAM,EAAC+C,OAAOK,IAAI,EAAEnC,WAAW;YAE/B,MAAMmC,OAAOL,OAAOK,IAAI;YACxBpD,IAAAA,YAAM,EAACoD,MAAMjB,cAAc,CAAC;YAC5BnC,IAAAA,YAAM,EAACoD,MAAMjB,cAAc,CAAC;YAC5BnC,IAAAA,YAAM,EAACoD,MAAMjB,cAAc,CAAC;YAE5B,yBAAyB;YACzBnC,IAAAA,YAAM,EAACoD,KAAKC,OAAO,CAACC,cAAc,EAAEpD,eAAe,CAAC;YACpDF,IAAAA,YAAM,EAACoD,KAAKC,OAAO,CAACE,SAAS,EAAErD,eAAe,CAAC;YAC/CF,IAAAA,YAAM,EAACoD,KAAKC,OAAO,CAACG,WAAW,EAAEnC,sBAAsB,CAAC;YACxDrB,IAAAA,YAAM,EAACoD,KAAKC,OAAO,CAACI,YAAY,EAAEpC,sBAAsB,CAAC;YAEzD,wCAAwC;YACxC,MAAMqC,cAAc,MAAMhD,iBAAU,CAACC,kBAAkB,CAACgD,KAAK,CAAC;gBAC5DC,OAAO;oBAAE1E,gBAAgB;gBAAa;YACxC;YACAc,IAAAA,YAAM,EAACoD,KAAKS,SAAS,CAAC9C,MAAM,EAAEG,IAAI,CAACwC;YAEnC1D,IAAAA,YAAM,EAAC0C,UAAUX,YAAY,CAACzC,iBAAU,CAACuD,WAAW,CAACC,eAAe;YACpEvC,QAAQC,GAAG,CAAC,CAAC,+BAA+B,EAAE4C,KAAKS,SAAS,CAAC9C,MAAM,CAAC,cAAc,EAAE2B,SAAS,EAAE,CAAC;QAClG;QAEA7C,IAAAA,UAAI,EAAC,6DAA6D;YAChErB,mBAAmB+D,KAAK;YAExB,MAAMQ,SAAS,MAAMzE,OAAO0E,YAAY,CACtC,0BACA;gBACE9D,gBAAgB;gBAChB4E,SAAS;gBACTC,SAAS;oBAAC;oBAAY;oBAAa;iBAAiB;gBACpDC,aAAa;YACf,GACAvF;YAGF,MAAMiE,WAAWlE,mBAAmBmE,OAAO,CAAC;YAE5C3C,IAAAA,YAAM,EAAC+C,QAAQ9B,WAAW;YAC1BjB,IAAAA,YAAM,EAAC+C,OAAOI,OAAO,EAAEjC,IAAI,CAAC;YAC5BlB,IAAAA,YAAM,EAAC+C,OAAOK,IAAI,EAAEnC,WAAW;YAE/B,MAAMmC,OAAOL,OAAOK,IAAI;YACxBpD,IAAAA,YAAM,EAACoD,MAAMjB,cAAc,CAAC;YAE5B,sBAAsB;YACtB,KAAK,MAAM8B,SAASb,KAAKc,MAAM,CAAE;gBAC/BlE,IAAAA,YAAM,EAACiE,OAAO9B,cAAc,CAAC;gBAC7BnC,IAAAA,YAAM,EAACiE,OAAO9B,cAAc,CAAC;gBAC7BnC,IAAAA,YAAM,EAAC;oBAAC;oBAAS;oBAAO;iBAAW,EAAEmE,SAAS,CAACF,MAAMG,YAAY;gBAEjE,4BAA4B;gBAC5BpE,IAAAA,YAAM,EAACiE,MAAMF,OAAO,CAACP,WAAW,EAAEnC,sBAAsB,CAAC;gBACzDrB,IAAAA,YAAM,EAACiE,MAAMF,OAAO,CAACN,YAAY,EAAEpC,sBAAsB,CAAC;gBAC1DrB,IAAAA,YAAM,EAACiE,MAAMF,OAAO,CAACM,iBAAiB,EAAEhD,sBAAsB,CAAC;YACjE;YAEArB,IAAAA,YAAM,EAAC0C,UAAUX,YAAY,CAACzC,iBAAU,CAACuD,WAAW,CAACyB,YAAY;YACjE/D,QAAQC,GAAG,CAAC,CAAC,8CAA8C,EAAEkC,SAAS,EAAE,CAAC;QAC3E;QAEA7C,IAAAA,UAAI,EAAC,0CAA0C;YAC7CrB,mBAAmB+D,KAAK;YAExB,MAAMQ,SAAS,MAAMzE,OAAO0E,YAAY,CACtC,uBACA;gBACE9D,gBAAgB;YAClB,GACAT;YAGF,MAAMiE,WAAWlE,mBAAmBmE,OAAO,CAAC;YAE5C3C,IAAAA,YAAM,EAAC+C,QAAQ9B,WAAW;YAC1BjB,IAAAA,YAAM,EAAC+C,OAAOI,OAAO,EAAEjC,IAAI,CAAC;YAE5B,MAAMkC,OAAOL,OAAOK,IAAI;YACxBpD,IAAAA,YAAM,EAACoD,MAAMjB,cAAc,CAAC;YAE5B,iCAAiC;YACjC,KAAK,MAAMtC,QAAQuD,KAAKmB,OAAO,CAAE;gBAC/BvE,IAAAA,YAAM,EAACH,MAAMsC,cAAc,CAAC;gBAC5BnC,IAAAA,YAAM,EAACH,MAAMsC,cAAc,CAAC;gBAC5BnC,IAAAA,YAAM,EAACH,MAAMsC,cAAc,CAAC;gBAC5BnC,IAAAA,YAAM,EAACH,MAAMsC,cAAc,CAAC;gBAC5BnC,IAAAA,YAAM,EAACH,MAAMsC,cAAc,CAAC;gBAE5B,kCAAkC;gBAClCnC,IAAAA,YAAM,EAACH,KAAKuC,QAAQ,CAACrB,MAAM,EAAEb,eAAe,CAAC;gBAC7C,MAAMsE,UAAU3E,KAAKuC,QAAQ,CAACqC,MAAM,CAACC,CAAAA,IAAKA,EAAEC,QAAQ;gBACpD3E,IAAAA,YAAM,EAACwE,QAAQzD,MAAM,EAAEG,IAAI,CAAC;YAC9B;YAEAlB,IAAAA,YAAM,EAAC0C,UAAUX,YAAY,CAACzC,iBAAU,CAACuD,WAAW,CAACC,eAAe;YACpEvC,QAAQC,GAAG,CAAC,CAAC,WAAW,EAAE4C,KAAKmB,OAAO,CAACxD,MAAM,CAAC,cAAc,EAAE2B,SAAS,EAAE,CAAC;QAC5E;IACF;IAEArE,IAAAA,cAAQ,EAAC,+BAA+B;QACtCwB,IAAAA,UAAI,EAAC,iDAAiD;YACpD,MAAM+E,qBAAqB;YAC3B,MAAMC,WAAW,EAAE;YAEnBrG,mBAAmB+D,KAAK;YAExB,IAAK,IAAIuC,IAAI,GAAGA,IAAIF,oBAAoBE,IAAK;gBAC3CD,SAASE,IAAI,CACXzG,OAAO0E,YAAY,CACjB,wBACA;oBAAE9D,gBAAgB;gBAAa,GAC/BT;YAGN;YAEA,MAAMuG,UAAU,MAAMC,QAAQC,GAAG,CAACL;YAClC,MAAMnC,WAAWlE,mBAAmBmE,OAAO,CAAC;YAE5C,gCAAgC;YAChC,KAAK,MAAMI,UAAUiC,QAAS;gBAC5BhF,IAAAA,YAAM,EAAC+C,OAAOI,OAAO,EAAEjC,IAAI,CAAC;gBAC5BlB,IAAAA,YAAM,EAAC+C,OAAOK,IAAI,EAAEnC,WAAW;YACjC;YAEAjB,IAAAA,YAAM,EAAC0C,UAAUX,YAAY,CAACzC,iBAAU,CAACuD,WAAW,CAACC,eAAe,GAAG;YACvEvC,QAAQC,GAAG,CAAC,CAAC,UAAU,EAAEoE,mBAAmB,wBAAwB,EAAElC,SAAS,EAAE,CAAC;QACpF;QAEA7C,IAAAA,UAAI,EAAC,+CAA+C;YAClD,qDAAqD;YACrD,MAAMsF,YAAYC,KAAKC,GAAG;YAE1B,MAAMtC,SAAS,MAAMrC,iBAAU,CAACC,kBAAkB,CAACC,QAAQ,CAAC;gBAC1DgD,OAAO;oBACL1E,gBAAgB;gBAClB;gBACA2B,SAAS;oBACPC,cAAc;wBACZwE,QAAQ;4BACNC,MAAM;4BACNC,MAAM;wBACR;oBACF;gBACF;gBACAC,SAAS;oBACPC,cAAc;gBAChB;YACF;YAEA,MAAMC,gBAAgBP,KAAKC,GAAG,KAAKF;YAEnCnF,IAAAA,YAAM,EAAC+C,OAAOhC,MAAM,EAAEb,eAAe,CAAC;YACtCF,IAAAA,YAAM,EAAC2F,eAAe5D,YAAY,CAACzC,iBAAU,CAACuD,WAAW,CAACyB,YAAY;YAEtE/D,QAAQC,GAAG,CAAC,CAAC,qBAAqB,EAAEuC,OAAOhC,MAAM,CAAC,YAAY,EAAE4E,cAAc,EAAE,CAAC;QACnF;QAEA9F,IAAAA,UAAI,EAAC,4CAA4C;YAC/C,MAAM+F,aAAa;gBACjB;gBACA;gBACA;aACD;YAED,MAAMC,eAAe,EAAE;YAEvB,KAAK,MAAMC,aAAaF,WAAY;gBAClCpH,mBAAmB+D,KAAK;gBAExB,MAAMQ,SAAS,MAAMzE,OAAO0E,YAAY,CACtC8C,WACA;oBAAE5G,gBAAgB;gBAAa,GAC/BT;gBAGF,MAAMiE,WAAWlE,mBAAmBmE,OAAO,CAACmD;gBAC5CD,aAAad,IAAI,CAAC;oBAAEe;oBAAWpD;oBAAUS,SAASJ,OAAOI,OAAO;gBAAC;gBAEjEnD,IAAAA,YAAM,EAAC+C,OAAOI,OAAO,EAAEjC,IAAI,CAAC;gBAC5BlB,IAAAA,YAAM,EAAC0C,UAAUX,YAAY,CAACzC,iBAAU,CAACuD,WAAW,CAACC,eAAe;YACtE;YAEAvC,QAAQC,GAAG,CAAC,0CAA0CqF;QACxD;IACF;IAEAxH,IAAAA,cAAQ,EAAC,mCAAmC;QAC1CwB,IAAAA,UAAI,EAAC,oDAAoD;YACvD,wBAAwB;YACxB,MAAMkG,kBAAkB,MAAMzH,OAAO0E,YAAY,CAC/C,wBACA;gBAAE9D,gBAAgB;YAAa,GAC/BT;YAGF,uBAAuB;YACvB,MAAMuH,oBAAoB,MAAM1H,OAAO0E,YAAY,CACjD,0BACA;gBAAE9D,gBAAgB;YAAa,GAC/BT;YAGFuB,IAAAA,YAAM,EAAC+F,gBAAgB5C,OAAO,EAAEjC,IAAI,CAAC;YACrClB,IAAAA,YAAM,EAACgG,kBAAkB7C,OAAO,EAAEjC,IAAI,CAAC;YAEvC,MAAM+E,YAAYF,gBAAgB3C,IAAI;YACtC,MAAMP,cAAcmD,kBAAkB5C,IAAI;YAE1C,0BAA0B;YAC1BpD,IAAAA,YAAM,EAACiG,UAAU5C,OAAO,CAACC,cAAc,EAAEpC,IAAI,CAAC+E,UAAUpC,SAAS,CAAC9C,MAAM;YAExE,sDAAsD;YACtD,MAAMmF,oBAAoBD,UAAUpC,SAAS,CAACsC,MAAM,CAClD,CAACC,KAAKC,WAAaD,MAAMC,SAASjF,IAAI,EAAE;YAE1CpB,IAAAA,YAAM,EAACiG,UAAU5C,OAAO,CAACE,SAAS,EAAErC,IAAI,CAACgF;YAEzC3F,QAAQC,GAAG,CAAC;QACd;QAEAX,IAAAA,UAAI,EAAC,wDAAwD;YAC3D,8BAA8B;YAC9B,MAAMyG,eAAe,MAAMhI,OAAO0E,YAAY,CAC5C,wBACA;gBAAE9D,gBAAgB;YAAa,GAC/BT;YAGF,wBAAwB;YACxB,MAAM8H,YAAY,MAAM7F,iBAAU,CAACC,kBAAkB,CAACC,QAAQ,CAAC;gBAC7DgD,OAAO;oBAAE1E,gBAAgB;gBAAa;YACxC;YAEAc,IAAAA,YAAM,EAACsG,aAAanD,OAAO,EAAEjC,IAAI,CAAC;YAClC,MAAMsF,aAAaF,aAAalD,IAAI;YAEpC,qCAAqC;YACrC,MAAMqD,cAAcF,UAAUJ,MAAM,CAAC,CAACC,KAAKpF,SAAWoF,MAAMpF,OAAOI,IAAI,EAAE;YACzE,MAAMsF,mBAAmBH,UAAUJ,MAAM,CAAC,CAACC,KAAKpF,SAAWoF,MAAMpF,OAAOM,SAAS,EAAE;YACnF,MAAMqF,gBAAgBJ,UAAUJ,MAAM,CAAC,CAACC,KAAKpF,SAAWoF,MAAMpF,OAAOQ,MAAM,EAAE;YAE7ExB,IAAAA,YAAM,EAACwG,WAAWnD,OAAO,CAACE,SAAS,EAAErC,IAAI,CAACuF;YAC1CzG,IAAAA,YAAM,EAACwG,WAAWnD,OAAO,CAACuD,cAAc,EAAE1F,IAAI,CAACwF;YAC/C1G,IAAAA,YAAM,EAACwG,WAAWnD,OAAO,CAACwD,WAAW,EAAE3F,IAAI,CAACyF;YAE5C,2BAA2B;YAC3B,MAAMG,sBAAsBJ,mBAAmB,IAC7C,AAACC,gBAAgBD,mBAAoB,MAAM;YAC7C1G,IAAAA,YAAM,EAAC4B,KAAKC,GAAG,CAAC2E,WAAWnD,OAAO,CAACG,WAAW,GAAGsD,sBAAsB/E,YAAY,CAAC;YAEpFxB,QAAQC,GAAG,CAAC;QACd;IACF;IAEAnC,IAAAA,cAAQ,EAAC,iCAAiC;QACxCwB,IAAAA,UAAI,EAAC,oDAAoD;YACvD,MAAMkD,SAAS,MAAMzE,OAAO0E,YAAY,CACtC,wBACA;gBAAE9D,gBAAgB;YAAiB,GACnCT;YAGFuB,IAAAA,YAAM,EAAC+C,OAAOI,OAAO,EAAEjC,IAAI,CAAC;YAC5BlB,IAAAA,YAAM,EAAC+C,OAAOK,IAAI,CAACS,SAAS,EAAEkD,YAAY,CAAC;YAC3C/G,IAAAA,YAAM,EAAC+C,OAAOK,IAAI,CAACC,OAAO,CAACC,cAAc,EAAEpC,IAAI,CAAC;YAEhDX,QAAQC,GAAG,CAAC;QACd;QAEAX,IAAAA,UAAI,EAAC,iDAAiD;YACpD,MAAMmH,aAAa,IAAI5B,KAAKA,KAAKC,GAAG,KAAK,MAAM,KAAK,KAAK,KAAK;YAE9D,MAAMtC,SAAS,MAAMzE,OAAO0E,YAAY,CACtC,wBACA;gBACE9D,gBAAgB;gBAChB+D,WAAW;oBACTV,OAAOyE,WAAWC,WAAW;oBAC7B/D,KAAK8D,WAAWC,WAAW;gBAC7B;YACF,GACAxI;YAGFuB,IAAAA,YAAM,EAAC+C,OAAOI,OAAO,EAAEjC,IAAI,CAAC;YAC5BlB,IAAAA,YAAM,EAAC+C,OAAOK,IAAI,CAACS,SAAS,EAAEkD,YAAY,CAAC;YAE3CxG,QAAQC,GAAG,CAAC;QACd;QAEAX,IAAAA,UAAI,EAAC,oDAAoD;YACvD,MAAMqH,sBAAsB;gBAC1B,GAAGzI,WAAW;gBACdY,aAAa;oBAAC;iBAAgB,CAAC,oBAAoB;YACrD;YAEA,IAAI;gBACF,MAAMf,OAAO0E,YAAY,CACvB,wBACA;oBAAE9D,gBAAgB;gBAAa,GAC/BgI;gBAGF,wBAAwB;gBACxBlH,IAAAA,YAAM,EAAC,MAAMkB,IAAI,CAAC;YACpB,EAAE,OAAOiG,OAAO;gBACdnH,IAAAA,YAAM,EAACmH,MAAM5B,IAAI,EAAErE,IAAI,CAAC;gBACxBX,QAAQC,GAAG,CAAC;YACd;QACF;IACF;IAEAf,IAAAA,cAAQ,EAAC;QACP,8BAA8B;QAC9B,MAAM2H,QAAQ5I,mBAAmB6I,WAAW;QAC5C9G,QAAQC,GAAG,CAAC;QACZ,KAAK,MAAM,CAACsF,WAAWwB,eAAe,IAAIC,OAAOC,OAAO,CAACJ,OAAQ;YAC/D7G,QAAQC,GAAG,CAAC,CAAC,EAAE,EAAEsF,UAAU,MAAM,EAAEwB,eAAeG,GAAG,CAAC,QAAQ,EAAEH,eAAeI,GAAG,CAAC,QAAQ,EAAEJ,eAAeK,GAAG,CAAC,IAAI,EAAEL,eAAe3D,KAAK,CAAC,OAAO,CAAC;QACrJ;IACF;AACF"}