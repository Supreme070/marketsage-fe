b338b470b805072b776be1c40dacd55d
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "ConfigValidationTest", {
    enumerable: true,
    get: function() {
        return ConfigValidationTest;
    }
});
const _child_process = require("child_process");
const _path = /*#__PURE__*/ _interop_require_default(require("path"));
const _fs = /*#__PURE__*/ _interop_require_default(require("fs"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
class ConfigValidationTest {
    async runValidation() {
        console.log('üîç MarketSage Configuration Validation Test\n');
        try {
            // Step 1: Validate shared configuration system
            await this.validateSharedConfigSystem();
            // Step 2: Test configuration generation
            await this.testConfigurationGeneration();
            // Step 3: Validate service boundaries
            await this.validateServiceBoundaries();
            // Step 4: Test environment overrides
            await this.testEnvironmentOverrides();
            // Step 5: Validate security compliance
            await this.validateSecurityCompliance();
            // Step 6: Generate final report
            this.generateReport();
            console.log('\n‚úÖ Configuration validation completed successfully!');
        } catch (error) {
            console.error('\n‚ùå Configuration validation failed:', error);
            process.exit(1);
        }
    }
    async validateSharedConfigSystem() {
        console.log('üèó  Validating shared configuration system...\n');
        // Test 1: Check if shared-config directory exists
        const sharedConfigPath = _path.default.resolve('../shared-config');
        const exists = _fs.default.existsSync(sharedConfigPath);
        this.addResult('Shared Config Directory', exists, exists ? 'Shared configuration directory found' : 'Shared configuration directory missing');
        if (!exists) return;
        // Test 2: Check required configuration files
        const requiredFiles = [
            '.env.base',
            '.env.frontend',
            '.env.backend',
            '.env.monitoring',
            'scripts/load-config.sh',
            'environments/.env.development',
            'environments/.env.production'
        ];
        for (const file of requiredFiles){
            const filePath = _path.default.join(sharedConfigPath, file);
            const fileExists = _fs.default.existsSync(filePath);
            this.addResult(`Config File: ${file}`, fileExists, fileExists ? `File exists: ${file}` : `File missing: ${file}`);
        }
        // Test 3: Check script permissions
        const scriptPath = _path.default.join(sharedConfigPath, 'scripts/load-config.sh');
        if (_fs.default.existsSync(scriptPath)) {
            const stats = _fs.default.statSync(scriptPath);
            const isExecutable = !!(stats.mode & parseInt('111', 8));
            this.addResult('Script Executable', isExecutable, isExecutable ? 'load-config.sh is executable' : 'load-config.sh not executable');
        }
        console.log('‚úÖ Shared configuration system validation completed\n');
    }
    async testConfigurationGeneration() {
        console.log('‚öôÔ∏è  Testing configuration generation...\n');
        const sharedConfigPath = _path.default.resolve('../shared-config');
        const services = [
            'frontend',
            'backend',
            'monitoring'
        ];
        const environments = [
            'development',
            'production'
        ];
        for (const service of services){
            for (const environment of environments){
                try {
                    console.log(`   Generating ${service} ${environment} config...`);
                    const cmd = `cd ${sharedConfigPath} && ./scripts/load-config.sh --service ${service} --environment ${environment}`;
                    (0, _child_process.execSync)(cmd, {
                        stdio: 'pipe'
                    });
                    // Verify the generated file exists
                    const targetDir = service === 'frontend' ? '../marketsage' : service === 'backend' ? '../marketsage-backend' : '../marketsage-monitoring';
                    const configPath = _path.default.resolve(targetDir, '.env');
                    const generated = _fs.default.existsSync(configPath);
                    this.addResult(`Config Generation: ${service}-${environment}`, generated, generated ? `${service} ${environment} config generated successfully` : `Failed to generate ${service} ${environment} config`);
                    if (generated) {
                        // Verify config content
                        const content = _fs.default.readFileSync(configPath, 'utf8');
                        const hasGeneratedHeader = content.includes('Generated automatically by load-config.sh');
                        const hasEnvironment = content.includes(`Environment: ${environment}`);
                        const hasService = content.includes(`Service: ${service}`);
                        this.addResult(`Config Content: ${service}-${environment}`, hasGeneratedHeader && hasEnvironment && hasService, `Generated config has proper headers and metadata`);
                    }
                } catch (error) {
                    this.addResult(`Config Generation: ${service}-${environment}`, false, `Failed to generate config: ${error.message.substring(0, 100)}`);
                }
            }
        }
        console.log('‚úÖ Configuration generation testing completed\n');
    }
    async validateServiceBoundaries() {
        console.log('üîí Validating service boundaries...\n');
        // Test 1: Frontend should not have direct database access
        const frontendEnvPath = _path.default.resolve('.env');
        if (_fs.default.existsSync(frontendEnvPath)) {
            const frontendContent = _fs.default.readFileSync(frontendEnvPath, 'utf8');
            // Check for API-only mode
            const hasApiOnlyMode = /NEXT_PUBLIC_USE_API_ONLY=true/.test(frontendContent);
            this.addResult('Frontend API-Only Mode', hasApiOnlyMode, hasApiOnlyMode ? 'Frontend properly configured for API-only mode' : 'Frontend missing API-only mode configuration');
            // Check for backend URL
            const hasBackendUrl = /NEXT_PUBLIC_BACKEND_URL=/.test(frontendContent);
            this.addResult('Frontend Backend URL', hasBackendUrl, hasBackendUrl ? 'Frontend has backend URL configured' : 'Frontend missing backend URL');
            // Check for sensitive data (should not be in frontend)
            const hasSensitiveData = /SMTP_PASS=|TWILIO_AUTH_TOKEN=|DATABASE_URL=.*postgresql/.test(frontendContent);
            this.addResult('Frontend Security', !hasSensitiveData, !hasSensitiveData ? 'Frontend does not contain sensitive credentials' : 'Frontend contains sensitive credentials (security risk)');
        }
        // Test 2: Backend should have database access
        const backendEnvPath = _path.default.resolve('../marketsage-backend/.env');
        if (_fs.default.existsSync(backendEnvPath)) {
            const backendContent = _fs.default.readFileSync(backendEnvPath, 'utf8');
            // Check for database URL
            const hasDatabaseUrl = /DATABASE_URL=.*postgresql/.test(backendContent);
            this.addResult('Backend Database Access', hasDatabaseUrl, hasDatabaseUrl ? 'Backend has proper database access' : 'Backend missing database access');
            // Check for service-specific configuration
            const hasPortConfig = /PORT=3006/.test(backendContent);
            this.addResult('Backend Port Configuration', hasPortConfig, hasPortConfig ? 'Backend has correct port configuration' : 'Backend missing proper port configuration');
        }
        // Test 3: Monitoring should have monitoring-specific config
        const monitoringEnvPath = _path.default.resolve('../marketsage-monitoring/.env');
        if (_fs.default.existsSync(monitoringEnvPath)) {
            const monitoringContent = _fs.default.readFileSync(monitoringEnvPath, 'utf8');
            // Check for monitoring ports
            const hasGrafanaPort = /GRAFANA_PORT=/.test(monitoringContent);
            const hasPrometheusPort = /PROMETHEUS_PORT=/.test(monitoringContent);
            this.addResult('Monitoring Configuration', hasGrafanaPort && hasPrometheusPort, hasGrafanaPort && hasPrometheusPort ? 'Monitoring has proper port configuration' : 'Monitoring missing proper port configuration');
        }
        console.log('‚úÖ Service boundaries validation completed\n');
    }
    async testEnvironmentOverrides() {
        console.log('üåç Testing environment overrides...\n');
        const sharedConfigPath = _path.default.resolve('../shared-config');
        // Generate development config
        try {
            (0, _child_process.execSync)(`cd ${sharedConfigPath} && ./scripts/load-config.sh --service frontend --environment development`, {
                stdio: 'pipe'
            });
            const devContent = _fs.default.readFileSync('.env', 'utf8');
            const hasDevelopmentSettings = devContent.includes('NODE_ENV=development') && devContent.includes('DEBUG=marketsage:*');
            this.addResult('Development Environment', hasDevelopmentSettings, hasDevelopmentSettings ? 'Development environment properly configured' : 'Development environment configuration missing');
        } catch (error) {
            this.addResult('Development Environment', false, `Development config failed: ${error.message}`);
        }
        // Generate production config
        try {
            (0, _child_process.execSync)(`cd ${sharedConfigPath} && ./scripts/load-config.sh --service frontend --environment production`, {
                stdio: 'pipe'
            });
            const prodContent = _fs.default.readFileSync('.env', 'utf8');
            const hasProductionSettings = prodContent.includes('NODE_ENV=production') && prodContent.includes('https://app.marketsage.com');
            this.addResult('Production Environment', hasProductionSettings, hasProductionSettings ? 'Production environment properly configured' : 'Production environment configuration missing');
        } catch (error) {
            this.addResult('Production Environment', false, `Production config failed: ${error.message}`);
        }
        console.log('‚úÖ Environment overrides testing completed\n');
    }
    async validateSecurityCompliance() {
        console.log('üîê Validating security compliance...\n');
        // Check for common security issues
        const configFiles = [
            {
                path: '.env',
                name: 'Frontend'
            },
            {
                path: '../marketsage-backend/.env',
                name: 'Backend'
            },
            {
                path: '../marketsage-monitoring/.env',
                name: 'Monitoring'
            }
        ];
        for (const configFile of configFiles){
            if (_fs.default.existsSync(configFile.path)) {
                const content = _fs.default.readFileSync(configFile.path, 'utf8');
                // Check for placeholder values (security risk)
                const hasPlaceholders = /your-.*-key|your-.*-secret|your-.*-token/.test(content);
                this.addResult(`${configFile.name} Placeholder Check`, !hasPlaceholders, !hasPlaceholders ? `${configFile.name} has no placeholder values` : `${configFile.name} contains placeholder values (update for production)`);
                // Check for proper secret format
                const hasSecrets = /SECRET|TOKEN|KEY/.test(content);
                if (hasSecrets) {
                    // Secrets should not be empty
                    const hasEmptySecrets = /SECRET=\s*$|TOKEN=\s*$|KEY=\s*$/m.test(content);
                    this.addResult(`${configFile.name} Secret Validation`, !hasEmptySecrets, !hasEmptySecrets ? `${configFile.name} secrets are properly set` : `${configFile.name} has empty secret values`);
                }
                // Check for generation metadata
                const hasMetadata = content.includes('Generated automatically by load-config.sh');
                this.addResult(`${configFile.name} Generation Metadata`, hasMetadata, hasMetadata ? `${configFile.name} has proper generation metadata` : `${configFile.name} missing generation metadata`);
            }
        }
        console.log('‚úÖ Security compliance validation completed\n');
    }
    addResult(test, passed, message, details) {
        this.results.push({
            test,
            passed,
            message,
            details
        });
        const status = passed ? '‚úÖ' : '‚ùå';
        console.log(`   ${status} ${test}: ${message}`);
        if (details) {
            console.log(`      ${details}`);
        }
    }
    generateReport() {
        console.log('üìä CONFIGURATION VALIDATION REPORT');
        console.log('===================================\n');
        const totalTests = this.results.length;
        const passedTests = this.results.filter((r)=>r.passed).length;
        const failedTests = totalTests - passedTests;
        const successRate = passedTests / totalTests * 100;
        console.log('üìà SUMMARY:');
        console.log(`   Total Tests: ${totalTests}`);
        console.log(`   Passed: ${passedTests}`);
        console.log(`   Failed: ${failedTests}`);
        console.log(`   Success Rate: ${successRate.toFixed(1)}%\n`);
        if (failedTests > 0) {
            console.log('‚ùå FAILED TESTS:');
            this.results.filter((r)=>!r.passed).forEach((result)=>{
                console.log(`   ‚Ä¢ ${result.test}: ${result.message}`);
            });
            console.log('');
        }
        console.log('üéØ CONFIGURATION STATUS:');
        if (successRate >= 95) {
            console.log('   ‚úÖ EXCELLENT - Configuration system is production-ready');
            console.log('   ‚úÖ All critical validations passed');
            console.log('   ‚úÖ Service boundaries properly enforced');
            console.log('   ‚úÖ Security compliance verified');
        } else if (successRate >= 80) {
            console.log('   ‚ö†Ô∏è  GOOD - Configuration system mostly ready');
            console.log('   üîç Review failed tests and address issues');
            console.log('   üìù Some improvements needed before production');
        } else {
            console.log('   ‚ùå NEEDS WORK - Configuration system requires attention');
            console.log('   üö® Multiple critical issues found');
            console.log('   üî® Significant fixes needed before deployment');
        }
        console.log('\nüöÄ NEXT STEPS:');
        if (successRate >= 95) {
            console.log('   1. Configuration system ready for production deployment');
            console.log('   2. Proceed with traffic splitting in staging environment');
            console.log('   3. Monitor configuration consistency across environments');
        } else {
            console.log('   1. Address failed validation tests');
            console.log('   2. Re-run validation after fixes');
            console.log('   3. Ensure all security requirements are met');
        }
    }
    constructor(){
        this.results = [];
    }
}
// Command line interface
if (require.main === module) {
    const validator = new ConfigValidationTest();
    validator.runValidation().catch((error)=>{
        console.error('Fatal validation error:', error);
        process.exit(1);
    });
}

//# sourceMappingURL=data:application/json;base64,