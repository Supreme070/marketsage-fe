{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/__tests__/e2e/config-validation-test.ts"],"sourcesContent":["\n\nimport { execSync } from 'child_process';\nimport path from 'path';\nimport fs from 'fs';\n\n/**\n * Configuration Validation Test\n * Validates the new shared configuration system without requiring full service startup\n */\n\ninterface ValidationResult {\n  test: string;\n  passed: boolean;\n  message: string;\n  details?: string;\n}\n\nclass ConfigValidationTest {\n  private results: ValidationResult[] = [];\n\n  async runValidation() {\n    console.log('üîç MarketSage Configuration Validation Test\\n');\n\n    try {\n      // Step 1: Validate shared configuration system\n      await this.validateSharedConfigSystem();\n\n      // Step 2: Test configuration generation\n      await this.testConfigurationGeneration();\n\n      // Step 3: Validate service boundaries\n      await this.validateServiceBoundaries();\n\n      // Step 4: Test environment overrides\n      await this.testEnvironmentOverrides();\n\n      // Step 5: Validate security compliance\n      await this.validateSecurityCompliance();\n\n      // Step 6: Generate final report\n      this.generateReport();\n\n      console.log('\\n‚úÖ Configuration validation completed successfully!');\n\n    } catch (error) {\n      console.error('\\n‚ùå Configuration validation failed:', error);\n      process.exit(1);\n    }\n  }\n\n  private async validateSharedConfigSystem() {\n    console.log('üèó  Validating shared configuration system...\\n');\n\n    // Test 1: Check if shared-config directory exists\n    const sharedConfigPath = path.resolve('../shared-config');\n    const exists = fs.existsSync(sharedConfigPath);\n    \n    this.addResult('Shared Config Directory', exists, \n      exists ? 'Shared configuration directory found' : 'Shared configuration directory missing');\n\n    if (!exists) return;\n\n    // Test 2: Check required configuration files\n    const requiredFiles = [\n      '.env.base',\n      '.env.frontend', \n      '.env.backend',\n      '.env.monitoring',\n      'scripts/load-config.sh',\n      'environments/.env.development',\n      'environments/.env.production'\n    ];\n\n    for (const file of requiredFiles) {\n      const filePath = path.join(sharedConfigPath, file);\n      const fileExists = fs.existsSync(filePath);\n      \n      this.addResult(`Config File: ${file}`, fileExists,\n        fileExists ? `File exists: ${file}` : `File missing: ${file}`);\n    }\n\n    // Test 3: Check script permissions\n    const scriptPath = path.join(sharedConfigPath, 'scripts/load-config.sh');\n    if (fs.existsSync(scriptPath)) {\n      const stats = fs.statSync(scriptPath);\n      const isExecutable = !!(stats.mode & parseInt('111', 8));\n      \n      this.addResult('Script Executable', isExecutable,\n        isExecutable ? 'load-config.sh is executable' : 'load-config.sh not executable');\n    }\n\n    console.log('‚úÖ Shared configuration system validation completed\\n');\n  }\n\n  private async testConfigurationGeneration() {\n    console.log('‚öôÔ∏è  Testing configuration generation...\\n');\n\n    const sharedConfigPath = path.resolve('../shared-config');\n    const services = ['frontend', 'backend', 'monitoring'];\n    const environments = ['development', 'production'];\n\n    for (const service of services) {\n      for (const environment of environments) {\n        try {\n          console.log(`   Generating ${service} ${environment} config...`);\n          \n          const cmd = `cd ${sharedConfigPath} && ./scripts/load-config.sh --service ${service} --environment ${environment}`;\n          execSync(cmd, { stdio: 'pipe' });\n          \n          // Verify the generated file exists\n          const targetDir = service === 'frontend' ? '../marketsage' : \n                           service === 'backend' ? '../marketsage-backend' :\n                           '../marketsage-monitoring';\n          \n          const configPath = path.resolve(targetDir, '.env');\n          const generated = fs.existsSync(configPath);\n          \n          this.addResult(`Config Generation: ${service}-${environment}`, generated,\n            generated ? `${service} ${environment} config generated successfully` : \n                       `Failed to generate ${service} ${environment} config`);\n\n          if (generated) {\n            // Verify config content\n            const content = fs.readFileSync(configPath, 'utf8');\n            const hasGeneratedHeader = content.includes('Generated automatically by load-config.sh');\n            const hasEnvironment = content.includes(`Environment: ${environment}`);\n            const hasService = content.includes(`Service: ${service}`);\n            \n            this.addResult(`Config Content: ${service}-${environment}`, \n              hasGeneratedHeader && hasEnvironment && hasService,\n              `Generated config has proper headers and metadata`);\n          }\n\n        } catch (error) {\n          this.addResult(`Config Generation: ${service}-${environment}`, false,\n            `Failed to generate config: ${error.message.substring(0, 100)}`);\n        }\n      }\n    }\n\n    console.log('‚úÖ Configuration generation testing completed\\n');\n  }\n\n  private async validateServiceBoundaries() {\n    console.log('üîí Validating service boundaries...\\n');\n\n    // Test 1: Frontend should not have direct database access\n    const frontendEnvPath = path.resolve('.env');\n    if (fs.existsSync(frontendEnvPath)) {\n      const frontendContent = fs.readFileSync(frontendEnvPath, 'utf8');\n      \n      // Check for API-only mode\n      const hasApiOnlyMode = /NEXT_PUBLIC_USE_API_ONLY=true/.test(frontendContent);\n      this.addResult('Frontend API-Only Mode', hasApiOnlyMode,\n        hasApiOnlyMode ? 'Frontend properly configured for API-only mode' : \n                        'Frontend missing API-only mode configuration');\n\n      // Check for backend URL\n      const hasBackendUrl = /NEXT_PUBLIC_BACKEND_URL=/.test(frontendContent);\n      this.addResult('Frontend Backend URL', hasBackendUrl,\n        hasBackendUrl ? 'Frontend has backend URL configured' : \n                       'Frontend missing backend URL');\n\n      // Check for sensitive data (should not be in frontend)\n      const hasSensitiveData = /SMTP_PASS=|TWILIO_AUTH_TOKEN=|DATABASE_URL=.*postgresql/.test(frontendContent);\n      this.addResult('Frontend Security', !hasSensitiveData,\n        !hasSensitiveData ? 'Frontend does not contain sensitive credentials' : \n                           'Frontend contains sensitive credentials (security risk)');\n    }\n\n    // Test 2: Backend should have database access\n    const backendEnvPath = path.resolve('../marketsage-backend/.env');\n    if (fs.existsSync(backendEnvPath)) {\n      const backendContent = fs.readFileSync(backendEnvPath, 'utf8');\n      \n      // Check for database URL\n      const hasDatabaseUrl = /DATABASE_URL=.*postgresql/.test(backendContent);\n      this.addResult('Backend Database Access', hasDatabaseUrl,\n        hasDatabaseUrl ? 'Backend has proper database access' : \n                        'Backend missing database access');\n\n      // Check for service-specific configuration\n      const hasPortConfig = /PORT=3006/.test(backendContent);\n      this.addResult('Backend Port Configuration', hasPortConfig,\n        hasPortConfig ? 'Backend has correct port configuration' : \n                       'Backend missing proper port configuration');\n    }\n\n    // Test 3: Monitoring should have monitoring-specific config\n    const monitoringEnvPath = path.resolve('../marketsage-monitoring/.env');\n    if (fs.existsSync(monitoringEnvPath)) {\n      const monitoringContent = fs.readFileSync(monitoringEnvPath, 'utf8');\n      \n      // Check for monitoring ports\n      const hasGrafanaPort = /GRAFANA_PORT=/.test(monitoringContent);\n      const hasPrometheusPort = /PROMETHEUS_PORT=/.test(monitoringContent);\n      \n      this.addResult('Monitoring Configuration', hasGrafanaPort && hasPrometheusPort,\n        (hasGrafanaPort && hasPrometheusPort) ? 'Monitoring has proper port configuration' : \n                                               'Monitoring missing proper port configuration');\n    }\n\n    console.log('‚úÖ Service boundaries validation completed\\n');\n  }\n\n  private async testEnvironmentOverrides() {\n    console.log('üåç Testing environment overrides...\\n');\n\n    const sharedConfigPath = path.resolve('../shared-config');\n\n    // Generate development config\n    try {\n      execSync(`cd ${sharedConfigPath} && ./scripts/load-config.sh --service frontend --environment development`, \n               { stdio: 'pipe' });\n      \n      const devContent = fs.readFileSync('.env', 'utf8');\n      const hasDevelopmentSettings = devContent.includes('NODE_ENV=development') && \n                                    devContent.includes('DEBUG=marketsage:*');\n      \n      this.addResult('Development Environment', hasDevelopmentSettings,\n        hasDevelopmentSettings ? 'Development environment properly configured' : \n                                'Development environment configuration missing');\n\n    } catch (error) {\n      this.addResult('Development Environment', false, `Development config failed: ${error.message}`);\n    }\n\n    // Generate production config\n    try {\n      execSync(`cd ${sharedConfigPath} && ./scripts/load-config.sh --service frontend --environment production`, \n               { stdio: 'pipe' });\n      \n      const prodContent = fs.readFileSync('.env', 'utf8');\n      const hasProductionSettings = prodContent.includes('NODE_ENV=production') && \n                                   prodContent.includes('https://app.marketsage.com');\n      \n      this.addResult('Production Environment', hasProductionSettings,\n        hasProductionSettings ? 'Production environment properly configured' : \n                               'Production environment configuration missing');\n\n    } catch (error) {\n      this.addResult('Production Environment', false, `Production config failed: ${error.message}`);\n    }\n\n    console.log('‚úÖ Environment overrides testing completed\\n');\n  }\n\n  private async validateSecurityCompliance() {\n    console.log('üîê Validating security compliance...\\n');\n\n    // Check for common security issues\n    const configFiles = [\n      { path: '.env', name: 'Frontend' },\n      { path: '../marketsage-backend/.env', name: 'Backend' },\n      { path: '../marketsage-monitoring/.env', name: 'Monitoring' }\n    ];\n\n    for (const configFile of configFiles) {\n      if (fs.existsSync(configFile.path)) {\n        const content = fs.readFileSync(configFile.path, 'utf8');\n        \n        // Check for placeholder values (security risk)\n        const hasPlaceholders = /your-.*-key|your-.*-secret|your-.*-token/.test(content);\n        this.addResult(`${configFile.name} Placeholder Check`, !hasPlaceholders,\n          !hasPlaceholders ? `${configFile.name} has no placeholder values` : \n                            `${configFile.name} contains placeholder values (update for production)`);\n\n        // Check for proper secret format\n        const hasSecrets = /SECRET|TOKEN|KEY/.test(content);\n        if (hasSecrets) {\n          // Secrets should not be empty\n          const hasEmptySecrets = /SECRET=\\s*$|TOKEN=\\s*$|KEY=\\s*$/m.test(content);\n          this.addResult(`${configFile.name} Secret Validation`, !hasEmptySecrets,\n            !hasEmptySecrets ? `${configFile.name} secrets are properly set` : \n                              `${configFile.name} has empty secret values`);\n        }\n\n        // Check for generation metadata\n        const hasMetadata = content.includes('Generated automatically by load-config.sh');\n        this.addResult(`${configFile.name} Generation Metadata`, hasMetadata,\n          hasMetadata ? `${configFile.name} has proper generation metadata` : \n                       `${configFile.name} missing generation metadata`);\n      }\n    }\n\n    console.log('‚úÖ Security compliance validation completed\\n');\n  }\n\n  private addResult(test: string, passed: boolean, message: string, details?: string) {\n    this.results.push({ test, passed, message, details });\n    \n    const status = passed ? '‚úÖ' : '‚ùå';\n    console.log(`   ${status} ${test}: ${message}`);\n    \n    if (details) {\n      console.log(`      ${details}`);\n    }\n  }\n\n  private generateReport() {\n    console.log('üìä CONFIGURATION VALIDATION REPORT');\n    console.log('===================================\\n');\n\n    const totalTests = this.results.length;\n    const passedTests = this.results.filter(r => r.passed).length;\n    const failedTests = totalTests - passedTests;\n    const successRate = (passedTests / totalTests) * 100;\n\n    console.log('üìà SUMMARY:');\n    console.log(`   Total Tests: ${totalTests}`);\n    console.log(`   Passed: ${passedTests}`);\n    console.log(`   Failed: ${failedTests}`);\n    console.log(`   Success Rate: ${successRate.toFixed(1)}%\\n`);\n\n    if (failedTests > 0) {\n      console.log('‚ùå FAILED TESTS:');\n      this.results.filter(r => !r.passed).forEach(result => {\n        console.log(`   ‚Ä¢ ${result.test}: ${result.message}`);\n      });\n      console.log('');\n    }\n\n    console.log('üéØ CONFIGURATION STATUS:');\n    if (successRate >= 95) {\n      console.log('   ‚úÖ EXCELLENT - Configuration system is production-ready');\n      console.log('   ‚úÖ All critical validations passed');\n      console.log('   ‚úÖ Service boundaries properly enforced');\n      console.log('   ‚úÖ Security compliance verified');\n    } else if (successRate >= 80) {\n      console.log('   ‚ö†Ô∏è  GOOD - Configuration system mostly ready');\n      console.log('   üîç Review failed tests and address issues');\n      console.log('   üìù Some improvements needed before production');\n    } else {\n      console.log('   ‚ùå NEEDS WORK - Configuration system requires attention');\n      console.log('   üö® Multiple critical issues found');\n      console.log('   üî® Significant fixes needed before deployment');\n    }\n\n    console.log('\\nüöÄ NEXT STEPS:');\n    if (successRate >= 95) {\n      console.log('   1. Configuration system ready for production deployment');\n      console.log('   2. Proceed with traffic splitting in staging environment');\n      console.log('   3. Monitor configuration consistency across environments');\n    } else {\n      console.log('   1. Address failed validation tests');\n      console.log('   2. Re-run validation after fixes');\n      console.log('   3. Ensure all security requirements are met');\n    }\n  }\n}\n\n// Command line interface\nif (require.main === module) {\n  const validator = new ConfigValidationTest();\n  \n  validator.runValidation().catch((error) => {\n    console.error('Fatal validation error:', error);\n    process.exit(1);\n  });\n}\n\nexport { ConfigValidationTest };"],"names":["ConfigValidationTest","runValidation","console","log","validateSharedConfigSystem","testConfigurationGeneration","validateServiceBoundaries","testEnvironmentOverrides","validateSecurityCompliance","generateReport","error","process","exit","sharedConfigPath","path","resolve","exists","fs","existsSync","addResult","requiredFiles","file","filePath","join","fileExists","scriptPath","stats","statSync","isExecutable","mode","parseInt","services","environments","service","environment","cmd","execSync","stdio","targetDir","configPath","generated","content","readFileSync","hasGeneratedHeader","includes","hasEnvironment","hasService","message","substring","frontendEnvPath","frontendContent","hasApiOnlyMode","test","hasBackendUrl","hasSensitiveData","backendEnvPath","backendContent","hasDatabaseUrl","hasPortConfig","monitoringEnvPath","monitoringContent","hasGrafanaPort","hasPrometheusPort","devContent","hasDevelopmentSettings","prodContent","hasProductionSettings","configFiles","name","configFile","hasPlaceholders","hasSecrets","hasEmptySecrets","hasMetadata","passed","details","results","push","status","totalTests","length","passedTests","filter","r","failedTests","successRate","toFixed","forEach","result","require","main","module","validator","catch"],"mappings":"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"}