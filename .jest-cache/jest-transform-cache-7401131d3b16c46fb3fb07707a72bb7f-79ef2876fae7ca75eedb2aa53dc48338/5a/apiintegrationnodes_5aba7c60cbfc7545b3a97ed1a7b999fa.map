{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/lib/workflow/api-integration-nodes.ts"],"sourcesContent":["import { logger } from '@/lib/logger';\nimport { workflowRateLimiter } from '@/lib/rate-limiter';\nimport prisma from '@/lib/db/prisma';\nimport { v4 as uuidv4 } from 'uuid';\n\n/**\n * API Integration Node Types for Workflow System\n * Provides external API integration capabilities including CRM, payment webhooks, and generic API calls\n */\n\nexport interface ApiConfiguration {\n  url: string;\n  method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';\n  headers?: Record<string, string>;\n  timeout?: number;\n  retryCount?: number;\n  retryDelay?: number;\n  authentication?: {\n    type: 'none' | 'bearer' | 'api_key' | 'basic' | 'oauth2';\n    credentials?: Record<string, string>;\n  };\n}\n\nexport interface CrmActionConfiguration extends ApiConfiguration {\n  actionType: 'create_contact' | 'update_contact' | 'add_to_list' | 'remove_from_list' | 'add_tag' | 'remove_tag';\n  provider: 'hubspot' | 'salesforce' | 'pipedrive' | 'zoho' | 'custom';\n  fieldMapping?: Record<string, string>;\n}\n\nexport interface PaymentWebhookConfiguration extends ApiConfiguration {\n  provider: 'stripe' | 'paypal' | 'paystack' | 'flutterwave' | 'custom';\n  webhookType: 'payment_success' | 'payment_failed' | 'subscription_created' | 'subscription_cancelled' | 'refund_processed';\n  eventData?: Record<string, any>;\n  secretKey?: string;\n}\n\nexport interface GenericApiConfiguration extends ApiConfiguration {\n  bodyTemplate?: string;\n  responseMapping?: Record<string, string>;\n  successCondition?: {\n    field: string;\n    operator: 'equals' | 'not_equals' | 'contains' | 'not_contains' | 'greater_than' | 'less_than';\n    value: any;\n  };\n}\n\n// Rate limiter for external API calls\nconst apiRateLimiter = workflowRateLimiter; // Reuse workflow rate limiter\n\n/**\n * Execute generic API call node\n */\nexport async function executeGenericApiCall(\n  config: GenericApiConfiguration,\n  context: any\n): Promise<any> {\n  const { url, method, headers = {}, timeout = 30000, retryCount = 3, retryDelay = 1000 } = config;\n\n  // Validate URL\n  if (!url || !isValidUrl(url)) {\n    throw new Error('Invalid API URL provided');\n  }\n\n  // Security check - only allow HTTPS URLs\n  if (!url.startsWith('https://') && !url.startsWith('http://localhost')) {\n    throw new Error('Only HTTPS URLs are allowed for external API calls');\n  }\n\n  // Check rate limits\n  const rateLimitResult = await apiRateLimiter.check(`api_${context.contact?.id || 'system'}`);\n  if (!rateLimitResult.allowed) {\n    throw new Error(`API rate limit exceeded: ${rateLimitResult.error}`);\n  }\n\n  let attempt = 0;\n  let lastError: Error | null = null;\n\n  while (attempt < retryCount) {\n    try {\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), timeout);\n\n      // Prepare request body\n      let body: string | undefined;\n      if (method !== 'GET' && config.bodyTemplate) {\n        body = replaceVariables(config.bodyTemplate, context);\n      }\n\n      // Add authentication headers\n      const authHeaders = getAuthenticationHeaders(config.authentication);\n      const requestHeaders = {\n        'Content-Type': 'application/json',\n        'User-Agent': 'MarketSage-Workflow/1.0',\n        ...authHeaders,\n        ...headers,\n      };\n\n      logger.info(`Making API call`, {\n        method,\n        url: url.substring(0, 100),\n        attempt: attempt + 1,\n        contactId: context.contact?.id\n      });\n\n      const response = await fetch(url, {\n        method,\n        headers: requestHeaders,\n        body,\n        signal: controller.signal,\n      });\n\n      clearTimeout(timeoutId);\n\n      const responseData = await response.json().catch(() => ({}));\n\n      // Check if request was successful\n      const isSuccess = response.ok || evaluateSuccessCondition(responseData, config.successCondition);\n\n      if (!isSuccess) {\n        throw new Error(`API call failed: ${response.status} ${response.statusText}`);\n      }\n\n      // Map response data if mapping is provided\n      const mappedData = config.responseMapping \n        ? mapResponseData(responseData, config.responseMapping)\n        : responseData;\n\n      return {\n        success: true,\n        status: response.status,\n        statusText: response.statusText,\n        data: mappedData,\n        rawResponse: responseData,\n        executedAt: new Date().toISOString(),\n        attempt: attempt + 1,\n      };\n\n    } catch (error) {\n      lastError = error instanceof Error ? error : new Error(String(error));\n      attempt++;\n\n      if (attempt < retryCount) {\n        logger.warn(`API call failed, retrying in ${retryDelay}ms`, {\n          error: lastError.message,\n          attempt,\n          url: url.substring(0, 50)\n        });\n        await new Promise(resolve => setTimeout(resolve, retryDelay));\n      }\n    }\n  }\n\n  // All attempts failed\n  logger.error(`API call failed after ${retryCount} attempts`, {\n    error: lastError?.message,\n    url: url.substring(0, 50)\n  });\n\n  return {\n    success: false,\n    error: lastError?.message || 'Unknown error',\n    executedAt: new Date().toISOString(),\n    totalAttempts: retryCount,\n  };\n}\n\n/**\n * Execute CRM action node\n */\nexport async function executeCrmAction(\n  config: CrmActionConfiguration,\n  context: any\n): Promise<any> {\n  const { actionType, provider, fieldMapping = {} } = config;\n\n  logger.info(`Executing CRM action`, {\n    actionType,\n    provider,\n    contactId: context.contact?.id\n  });\n\n  // Prepare CRM-specific payload\n  const crmPayload = prepareCrmPayload(actionType, provider, context, fieldMapping);\n\n  // Get provider-specific configuration\n  const providerConfig = getCrmProviderConfig(provider, actionType);\n\n  // Execute the API call\n  const result = await executeGenericApiCall({\n    ...config,\n    ...providerConfig,\n    bodyTemplate: JSON.stringify(crmPayload),\n  }, context);\n\n  // Handle CRM-specific response processing\n  if (result.success) {\n    await handleCrmSuccess(actionType, provider, result.data, context);\n  }\n\n  return {\n    ...result,\n    actionType,\n    provider,\n    crmPayload,\n  };\n}\n\n/**\n * Execute payment webhook node\n */\nexport async function executePaymentWebhook(\n  config: PaymentWebhookConfiguration,\n  context: any\n): Promise<any> {\n  const { provider, webhookType, eventData = {} } = config;\n\n  logger.info(`Executing payment webhook`, {\n    provider,\n    webhookType,\n    contactId: context.contact?.id\n  });\n\n  // Prepare payment webhook payload\n  const webhookPayload = preparePaymentWebhookPayload(provider, webhookType, eventData, context);\n\n  // Get provider-specific webhook configuration\n  const providerConfig = getPaymentProviderConfig(provider, webhookType);\n\n  // Execute the webhook call\n  const result = await executeGenericApiCall({\n    ...config,\n    ...providerConfig,\n    bodyTemplate: JSON.stringify(webhookPayload),\n  }, context);\n\n  // Handle payment-specific response processing\n  if (result.success) {\n    await handlePaymentWebhookSuccess(provider, webhookType, result.data, context);\n  }\n\n  return {\n    ...result,\n    provider,\n    webhookType,\n    webhookPayload,\n  };\n}\n\n/**\n * Helper functions\n */\n\nfunction isValidUrl(url: string): boolean {\n  try {\n    new URL(url);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nfunction replaceVariables(template: string, context: any): string {\n  return template\n    .replace(/\\{\\{contact\\.([^}]+)\\}\\}/g, (match, field) => {\n      return context.contact?.[field] || '';\n    })\n    .replace(/\\{\\{workflow\\.([^}]+)\\}\\}/g, (match, field) => {\n      return context.workflow?.[field] || '';\n    })\n    .replace(/\\{\\{variables\\.([^}]+)\\}\\}/g, (match, field) => {\n      return context.variables?.[field] || '';\n    })\n    .replace(/\\{\\{timestamp\\}\\}/g, new Date().toISOString())\n    .replace(/\\{\\{uuid\\}\\}/g, uuidv4());\n}\n\nfunction getAuthenticationHeaders(auth?: ApiConfiguration['authentication']): Record<string, string> {\n  if (!auth || auth.type === 'none') {\n    return {};\n  }\n\n  const { type, credentials = {} } = auth;\n\n  switch (type) {\n    case 'bearer':\n      return { Authorization: `Bearer ${credentials.token}` };\n    case 'api_key':\n      return { [credentials.headerName || 'X-API-Key']: credentials.apiKey };\n    case 'basic':\n      const encoded = Buffer.from(`${credentials.username}:${credentials.password}`).toString('base64');\n      return { Authorization: `Basic ${encoded}` };\n    case 'oauth2':\n      return { Authorization: `Bearer ${credentials.accessToken}` };\n    default:\n      return {};\n  }\n}\n\nfunction evaluateSuccessCondition(data: any, condition?: GenericApiConfiguration['successCondition']): boolean {\n  if (!condition) return true;\n\n  const { field, operator, value } = condition;\n  const fieldValue = getNestedValue(data, field);\n\n  switch (operator) {\n    case 'equals':\n      return fieldValue === value;\n    case 'not_equals':\n      return fieldValue !== value;\n    case 'contains':\n      return String(fieldValue).includes(String(value));\n    case 'not_contains':\n      return !String(fieldValue).includes(String(value));\n    case 'greater_than':\n      return Number(fieldValue) > Number(value);\n    case 'less_than':\n      return Number(fieldValue) < Number(value);\n    default:\n      return true;\n  }\n}\n\nfunction getNestedValue(obj: any, path: string): any {\n  return path.split('.').reduce((current, key) => current?.[key], obj);\n}\n\nfunction mapResponseData(data: any, mapping: Record<string, string>): any {\n  const mapped: any = {};\n  \n  for (const [targetField, sourcePath] of Object.entries(mapping)) {\n    mapped[targetField] = getNestedValue(data, sourcePath);\n  }\n  \n  return mapped;\n}\n\nfunction prepareCrmPayload(actionType: string, provider: string, context: any, fieldMapping: Record<string, string>): any {\n  const contact = context.contact || {};\n  \n  const basePayload = {\n    email: contact.email,\n    firstName: contact.firstName,\n    lastName: contact.lastName,\n    company: contact.company,\n    phone: contact.phone,\n    timestamp: new Date().toISOString(),\n  };\n\n  // Apply field mapping\n  const mappedPayload: any = {};\n  for (const [crmField, contactField] of Object.entries(fieldMapping)) {\n    mappedPayload[crmField] = contact[contactField] || basePayload[contactField as keyof typeof basePayload];\n  }\n\n  // Provider-specific payload adjustments\n  switch (provider) {\n    case 'hubspot':\n      return {\n        properties: mappedPayload,\n        // HubSpot-specific fields\n      };\n    case 'salesforce':\n      return {\n        ...mappedPayload,\n        // Salesforce-specific fields\n      };\n    case 'pipedrive':\n      return {\n        ...mappedPayload,\n        // Pipedrive-specific fields\n      };\n    default:\n      return { ...basePayload, ...mappedPayload };\n  }\n}\n\nfunction getCrmProviderConfig(provider: string, actionType: string): Partial<ApiConfiguration> {\n  // This would typically come from environment variables or database configuration\n  const configs: Record<string, Record<string, Partial<ApiConfiguration>>> = {\n    hubspot: {\n      create_contact: {\n        method: 'POST',\n        url: 'https://api.hubapi.com/crm/v3/objects/contacts',\n        headers: { 'Content-Type': 'application/json' },\n      },\n      update_contact: {\n        method: 'PATCH',\n        url: 'https://api.hubapi.com/crm/v3/objects/contacts/{{contact.id}}',\n        headers: { 'Content-Type': 'application/json' },\n      },\n    },\n    salesforce: {\n      create_contact: {\n        method: 'POST',\n        url: 'https://{{instance}}.salesforce.com/services/data/v59.0/sobjects/Contact/',\n        headers: { 'Content-Type': 'application/json' },\n      },\n    },\n    // Add more providers as needed\n  };\n\n  return configs[provider]?.[actionType] || {};\n}\n\nfunction preparePaymentWebhookPayload(provider: string, webhookType: string, eventData: any, context: any): any {\n  const basePayload = {\n    event_type: webhookType,\n    timestamp: new Date().toISOString(),\n    contact: {\n      id: context.contact?.id,\n      email: context.contact?.email,\n    },\n    workflow: {\n      id: context.workflow?.id,\n      name: context.workflow?.name,\n    },\n    ...eventData,\n  };\n\n  // Provider-specific payload adjustments\n  switch (provider) {\n    case 'stripe':\n      return {\n        type: webhookType,\n        data: {\n          object: basePayload,\n        },\n        created: Math.floor(Date.now() / 1000),\n      };\n    case 'paypal':\n      return {\n        event_type: webhookType.toUpperCase(),\n        resource: basePayload,\n      };\n    case 'paystack':\n      return {\n        event: webhookType,\n        data: basePayload,\n      };\n    case 'flutterwave':\n      return {\n        event: webhookType,\n        data: basePayload,\n      };\n    default:\n      return basePayload;\n  }\n}\n\nfunction getPaymentProviderConfig(provider: string, webhookType: string): Partial<ApiConfiguration> {\n  // This would typically come from environment variables or database configuration\n  const configs: Record<string, Partial<ApiConfiguration>> = {\n    stripe: {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n    },\n    paypal: {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n    },\n    paystack: {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n    },\n    flutterwave: {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n    },\n  };\n\n  return configs[provider] || {};\n}\n\nasync function handleCrmSuccess(actionType: string, provider: string, data: any, context: any): Promise<void> {\n  // Log CRM action success\n  logger.info(`CRM action completed successfully`, {\n    actionType,\n    provider,\n    contactId: context.contact?.id,\n    responseData: data,\n  });\n\n  // Update contact record if necessary\n  if (actionType === 'create_contact' && data.id) {\n    try {\n      await prisma.contact.update({\n        where: { id: context.contact.id },\n        data: {\n          externalIds: {\n            ...(context.contact.externalIds || {}),\n            [provider]: data.id,\n          },\n        },\n      });\n    } catch (error) {\n      logger.warn(`Failed to update contact with external ID`, { error, provider, contactId: context.contact.id });\n    }\n  }\n}\n\nasync function handlePaymentWebhookSuccess(provider: string, webhookType: string, data: any, context: any): Promise<void> {\n  // Log payment webhook success\n  logger.info(`Payment webhook completed successfully`, {\n    provider,\n    webhookType,\n    contactId: context.contact?.id,\n    responseData: data,\n  });\n\n  // Create payment activity record\n  try {\n    await prisma.emailActivity.create({\n      data: {\n        id: `payment-${provider}-${Date.now()}`,\n        contactId: context.contact.id,\n        campaignId: `workflow-${context.workflow.id}`,\n        type: 'PAYMENT_WEBHOOK',\n        metadata: JSON.stringify({\n          provider,\n          webhookType,\n          workflowId: context.workflow.id,\n          responseData: data,\n        }),\n      },\n    });\n  } catch (error) {\n    logger.warn(`Failed to create payment activity record`, { error, provider, webhookType });\n  }\n}\n\n/**\n * Validation functions\n */\n\nexport function validateApiConfiguration(config: ApiConfiguration): { isValid: boolean; errors: string[] } {\n  const errors: string[] = [];\n\n  if (!config.url) {\n    errors.push('URL is required');\n  } else if (!isValidUrl(config.url)) {\n    errors.push('Invalid URL format');\n  } else if (!config.url.startsWith('https://') && !config.url.startsWith('http://localhost')) {\n    errors.push('Only HTTPS URLs are allowed');\n  }\n\n  if (!config.method) {\n    errors.push('HTTP method is required');\n  } else if (!['GET', 'POST', 'PUT', 'DELETE', 'PATCH'].includes(config.method)) {\n    errors.push('Invalid HTTP method');\n  }\n\n  if (config.timeout && (config.timeout < 1000 || config.timeout > 60000)) {\n    errors.push('Timeout must be between 1000ms and 60000ms');\n  }\n\n  if (config.retryCount && (config.retryCount < 0 || config.retryCount > 10)) {\n    errors.push('Retry count must be between 0 and 10');\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n  };\n}\n\nexport function validateCrmConfiguration(config: CrmActionConfiguration): { isValid: boolean; errors: string[] } {\n  const baseValidation = validateApiConfiguration(config);\n  const errors = [...baseValidation.errors];\n\n  if (!config.actionType) {\n    errors.push('CRM action type is required');\n  } else if (!['create_contact', 'update_contact', 'add_to_list', 'remove_from_list', 'add_tag', 'remove_tag'].includes(config.actionType)) {\n    errors.push('Invalid CRM action type');\n  }\n\n  if (!config.provider) {\n    errors.push('CRM provider is required');\n  } else if (!['hubspot', 'salesforce', 'pipedrive', 'zoho', 'custom'].includes(config.provider)) {\n    errors.push('Invalid CRM provider');\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n  };\n}\n\nexport function validatePaymentWebhookConfiguration(config: PaymentWebhookConfiguration): { isValid: boolean; errors: string[] } {\n  const baseValidation = validateApiConfiguration(config);\n  const errors = [...baseValidation.errors];\n\n  if (!config.provider) {\n    errors.push('Payment provider is required');\n  } else if (!['stripe', 'paypal', 'paystack', 'flutterwave', 'custom'].includes(config.provider)) {\n    errors.push('Invalid payment provider');\n  }\n\n  if (!config.webhookType) {\n    errors.push('Webhook type is required');\n  } else if (!['payment_success', 'payment_failed', 'subscription_created', 'subscription_cancelled', 'refund_processed'].includes(config.webhookType)) {\n    errors.push('Invalid webhook type');\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n  };\n}"],"names":["executeCrmAction","executeGenericApiCall","executePaymentWebhook","validateApiConfiguration","validateCrmConfiguration","validatePaymentWebhookConfiguration","apiRateLimiter","workflowRateLimiter","config","context","url","method","headers","timeout","retryCount","retryDelay","isValidUrl","Error","startsWith","rateLimitResult","check","contact","id","allowed","error","attempt","lastError","controller","AbortController","timeoutId","setTimeout","abort","body","bodyTemplate","replaceVariables","authHeaders","getAuthenticationHeaders","authentication","requestHeaders","logger","info","substring","contactId","response","fetch","signal","clearTimeout","responseData","json","catch","isSuccess","ok","evaluateSuccessCondition","successCondition","status","statusText","mappedData","responseMapping","mapResponseData","success","data","rawResponse","executedAt","Date","toISOString","String","warn","message","Promise","resolve","totalAttempts","actionType","provider","fieldMapping","crmPayload","prepareCrmPayload","providerConfig","getCrmProviderConfig","result","JSON","stringify","handleCrmSuccess","webhookType","eventData","webhookPayload","preparePaymentWebhookPayload","getPaymentProviderConfig","handlePaymentWebhookSuccess","URL","template","replace","match","field","workflow","variables","uuidv4","auth","type","credentials","Authorization","token","headerName","apiKey","encoded","Buffer","from","username","password","toString","accessToken","condition","operator","value","fieldValue","getNestedValue","includes","Number","obj","path","split","reduce","current","key","mapping","mapped","targetField","sourcePath","Object","entries","basePayload","email","firstName","lastName","company","phone","timestamp","mappedPayload","crmField","contactField","properties","configs","hubspot","create_contact","update_contact","salesforce","event_type","name","object","created","Math","floor","now","toUpperCase","resource","event","stripe","paypal","paystack","flutterwave","prisma","update","where","externalIds","emailActivity","create","campaignId","metadata","workflowId","errors","push","isValid","length","baseValidation"],"mappings":"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"}