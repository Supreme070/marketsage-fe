{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/lib/ai/behavioral-predictor.ts"],"sourcesContent":["/**\n * BehavioralPredictor\n * Advanced behavioral prediction and analysis system\n */\n\nimport { PrismaClient, ActivityType } from '@prisma/client';\nimport { logger } from '@/lib/logger';\n\nconst prisma = new PrismaClient();\n\ninterface BehaviorPrediction {\n  predictions: {\n    nextBestAction: string;\n    churnRisk: number;\n    lifetimeValue: number;\n    engagementScore: number;\n    nextPurchaseDate?: Date;\n  };\n  segments: string[];\n  confidenceScores: {\n    [key: string]: number;\n  };\n  insights: string[];\n}\n\nexport class BehavioralPredictor {\n  /**\n   * Predict user behavior based on historical data and current context\n   */\n  async predictBehavior(userId: string): Promise<BehaviorPrediction> {\n    try {\n      // Get user's historical data\n      const user = await prisma.user.findUnique({\n        where: { id: userId },\n        include: {\n          EmailCampaign: true,\n          SMSCampaign: true,\n          WhatsAppCampaign: true,\n          Contact: true,\n          List: true,\n          Segment: true\n        }\n      });\n\n      if (!user) {\n        throw new Error('User not found');\n      }\n\n      // Get all activities across channels\n      const emailActivities = await prisma.emailActivity.findMany({\n        where: {\n          campaignId: {\n            in: user.EmailCampaign.map(c => c.id)\n          }\n        },\n        orderBy: {\n          timestamp: 'desc'\n        },\n        take: 100\n      });\n\n      const smsActivities = await prisma.sMSActivity.findMany({\n        where: {\n          campaignId: {\n            in: user.SMSCampaign.map(c => c.id)\n          }\n        },\n        orderBy: {\n          timestamp: 'desc'\n        },\n        take: 100\n      });\n\n      const waActivities = await prisma.whatsAppActivity.findMany({\n        where: {\n          campaignId: {\n            in: user.WhatsAppCampaign.map(c => c.id)\n          }\n        },\n        orderBy: {\n          timestamp: 'desc'\n        },\n        take: 100\n      });\n\n      // Calculate engagement metrics\n      const engagementScore = this.calculateEngagementScore(emailActivities, smsActivities, waActivities);\n      \n      // Predict churn risk\n      const churnRisk = this.predictChurnRisk(emailActivities, smsActivities, waActivities);\n      \n      // Calculate customer lifetime value\n      const lifetimeValue = this.calculateLifetimeValue(user);\n      \n      // Determine next best action\n      const nextBestAction = this.determineNextBestAction(emailActivities, smsActivities, waActivities, churnRisk);\n      \n      // Predict next purchase\n      const nextPurchaseDate = this.predictNextPurchase(user);\n      \n      // Segment user\n      const segments = this.segmentUser(user, engagementScore, churnRisk);\n\n      return {\n        predictions: {\n          nextBestAction,\n          churnRisk,\n          lifetimeValue,\n          engagementScore,\n          nextPurchaseDate\n        },\n        segments,\n        confidenceScores: {\n          nextBestAction: 0.85,\n          churnRisk: 0.9,\n          lifetimeValue: 0.8,\n          engagementScore: 0.95\n        },\n        insights: this.generateInsights(user, churnRisk, engagementScore)\n      };\n    } catch (error) {\n      if (error instanceof Error) {\n        logger.error('Error in behavioral prediction:', { error: error.message });\n      } else {\n        logger.error('Unknown error in behavioral prediction');\n      }\n      throw error;\n    }\n  }\n\n  private calculateEngagementScore(\n    emailActivities: any[],\n    smsActivities: any[],\n    waActivities: any[]\n  ): number {\n    const allActivities = [...emailActivities, ...smsActivities, ...waActivities];\n    const recentActivities = allActivities\n      .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())\n      .slice(0, 30); // Last 30 activities\n    \n    const metrics = {\n      frequency: recentActivities.length / 30, // Activities per day\n      recency: this.calculateRecency(recentActivities),\n      duration: this.calculateAverageSessionDuration(recentActivities),\n      interaction: this.calculateInteractionDepth(recentActivities)\n    };\n    \n    return (\n      (metrics.frequency * 0.3) +\n      (metrics.recency * 0.3) +\n      (metrics.duration * 0.2) +\n      (metrics.interaction * 0.2)\n    );\n  }\n\n  private predictChurnRisk(\n    emailActivities: any[],\n    smsActivities: any[],\n    waActivities: any[]\n  ): number {\n    const allActivities = [...emailActivities, ...smsActivities, ...waActivities];\n    \n    const signals = {\n      activityDecline: this.calculateActivityDecline(allActivities),\n      engagementDrop: this.calculateEngagementDrop(allActivities),\n      negativeFeedback: this.calculateNegativeFeedback(allActivities)\n    };\n    \n    return (\n      (signals.activityDecline * 0.4) +\n      (signals.engagementDrop * 0.4) +\n      (signals.negativeFeedback * 0.2)\n    );\n  }\n\n  private calculateLifetimeValue(user: any): number {\n    // Calculate total value from all campaigns\n    const emailValue = user.EmailCampaign.reduce((sum: number, campaign: any) => {\n      try {\n        const metadata = campaign.metadata ? JSON.parse(campaign.metadata) : {};\n        return sum + (metadata.revenue || 0);\n      } catch {\n        return sum;\n      }\n    }, 0);\n    \n    const smsValue = user.SMSCampaign.reduce((sum: number, campaign: any) => {\n      try {\n        const metadata = campaign.metadata ? JSON.parse(campaign.metadata) : {};\n        return sum + (metadata.revenue || 0);\n      } catch {\n        return sum;\n      }\n    }, 0);\n    \n    const waValue = user.WhatsAppCampaign.reduce((sum: number, campaign: any) => {\n      try {\n        const metadata = campaign.metadata ? JSON.parse(campaign.metadata) : {};\n        return sum + (metadata.revenue || 0);\n      } catch {\n        return sum;\n      }\n    }, 0);\n    \n    const totalValue = emailValue + smsValue + waValue;\n    const monthsSinceJoining = this.calculateMonthsBetween(\n      new Date(user.createdAt),\n      new Date()\n    );\n    \n    return totalValue / (monthsSinceJoining || 1);\n  }\n\n  private determineNextBestAction(\n    emailActivities: any[],\n    smsActivities: any[],\n    waActivities: any[],\n    churnRisk: number\n  ): string {\n    const allActivities = [...emailActivities, ...smsActivities, ...waActivities];\n    \n    if (churnRisk > 0.7) {\n      return 'RETENTION_CAMPAIGN';\n    } else if (this.hasRecentActivity(allActivities)) {\n      return 'CROSS_CHANNEL_CAMPAIGN';\n    } else if (this.hasLowEngagement(allActivities)) {\n      return 'REENGAGEMENT_CAMPAIGN';\n    }\n    return 'NURTURE_CAMPAIGN';\n  }\n\n  private predictNextPurchase(user: any): Date | undefined {\n    const allCampaigns = [\n      ...user.EmailCampaign,\n      ...user.SMSCampaign,\n      ...user.WhatsAppCampaign\n    ].filter(c => c.status === 'SENT');\n    \n    if (allCampaigns.length < 2) return undefined;\n    \n    const sortedCampaigns = allCampaigns.sort((a, b) => \n      new Date(b.sentAt).getTime() - new Date(a.sentAt).getTime()\n    );\n    \n    const intervals = [];\n    for (let i = 1; i < sortedCampaigns.length; i++) {\n      intervals.push(\n        new Date(sortedCampaigns[i-1].sentAt).getTime() -\n        new Date(sortedCampaigns[i].sentAt).getTime()\n      );\n    }\n    \n    const avgInterval = intervals.reduce((a, b) => a + b, 0) / intervals.length;\n    return new Date(Date.now() + avgInterval);\n  }\n\n  private segmentUser(user: any, engagementScore: number, churnRisk: number): string[] {\n    const segments = [];\n    \n    // Value-based segmentation\n    if (engagementScore > 0.8) segments.push('HIGH_VALUE');\n    else if (engagementScore > 0.5) segments.push('MEDIUM_VALUE');\n    else segments.push('LOW_VALUE');\n    \n    // Lifecycle segmentation\n    if (churnRisk > 0.7) segments.push('AT_RISK');\n    else if (churnRisk < 0.3) segments.push('LOYAL');\n    \n    // Channel preference\n    if (user.EmailCampaign.length > 0) segments.push('EMAIL_USER');\n    if (user.SMSCampaign.length > 0) segments.push('SMS_USER');\n    if (user.WhatsAppCampaign.length > 0) segments.push('WHATSAPP_USER');\n    \n    // Multi-channel engagement\n    const channelCount = [\n      user.EmailCampaign.length > 0,\n      user.SMSCampaign.length > 0,\n      user.WhatsAppCampaign.length > 0\n    ].filter(Boolean).length;\n    \n    if (channelCount >= 2) segments.push('MULTI_CHANNEL');\n    \n    return segments;\n  }\n\n  private generateInsights(user: any, churnRisk: number, engagementScore: number): string[] {\n    const insights = [];\n    \n    // Risk insights\n    if (churnRisk > 0.7) {\n      insights.push('High risk of churn - immediate attention required');\n    }\n    \n    // Engagement insights\n    if (engagementScore < 0.3) {\n      insights.push('Low engagement - consider re-engagement campaign');\n    }\n    \n    // Channel insights\n    const channels = {\n      email: user.EmailCampaign.length,\n      sms: user.SMSCampaign.length,\n      whatsapp: user.WhatsAppCampaign.length\n    };\n    \n    const preferredChannel = Object.entries(channels)\n      .reduce((a, b) => a[1] > b[1] ? a : b)[0];\n    \n    insights.push(`Preferred channel: ${preferredChannel.toUpperCase()}`);\n    \n    // Growth opportunities\n    if (channels.email === 0) {\n      insights.push('Opportunity: No email campaigns yet');\n    }\n    if (channels.sms === 0) {\n      insights.push('Opportunity: No SMS campaigns yet');\n    }\n    if (channels.whatsapp === 0) {\n      insights.push('Opportunity: No WhatsApp campaigns yet');\n    }\n    \n    return insights;\n  }\n\n  // Helper methods\n  private calculateRecency(activities: any[]): number {\n    if (activities.length === 0) return 0;\n    const mostRecent = new Date(activities[0].timestamp).getTime();\n    const now = Date.now();\n    const daysSinceLastActivity = (now - mostRecent) / (1000 * 60 * 60 * 24);\n    return Math.max(0, 1 - (daysSinceLastActivity / 30));\n  }\n\n  private calculateAverageSessionDuration(activities: any[]): number {\n    if (activities.length === 0) return 0;\n    \n    const sessions = activities.filter(a => \n      a.type === ActivityType.OPENED || a.type === ActivityType.CLICKED\n    );\n    if (sessions.length === 0) return 0;\n    \n    // Assume average session duration of 2 minutes for opens and 5 minutes for clicks\n    const totalDuration = sessions.reduce((sum, s) => \n      sum + (s.type === ActivityType.CLICKED ? 5 : 2), 0);\n    \n    return Math.min(totalDuration / (sessions.length * 5), 1); // Normalize to 0-1\n  }\n\n  private calculateInteractionDepth(activities: any[]): number {\n    if (activities.length === 0) return 0;\n    \n    const interactionTypes = new Set(activities.map(a => a.type)).size;\n    return Math.min(interactionTypes / 5, 1); // Normalize to 0-1 (max 5 types)\n  }\n\n  private calculateActivityDecline(activities: any[]): number {\n    const recent = activities.slice(0, 30).length;\n    const historical = activities.slice(30, 60).length;\n    if (historical === 0) return 0;\n    return Math.max(0, (historical - recent) / historical);\n  }\n\n  private calculateEngagementDrop(activities: any[]): number {\n    const recent = activities.slice(0, 30);\n    const historical = activities.slice(30, 60);\n    \n    const recentScore = this.calculateEngagementScore(recent, [], []);\n    const historicalScore = this.calculateEngagementScore(historical, [], []);\n    \n    if (historicalScore === 0) return 0;\n    return Math.max(0, (historicalScore - recentScore) / historicalScore);\n  }\n\n  private calculateNegativeFeedback(activities: any[]): number {\n    const negativeTypes = [\n      ActivityType.BOUNCED,\n      ActivityType.UNSUBSCRIBED,\n      ActivityType.FAILED\n    ];\n    const negative = activities.filter(a => negativeTypes.includes(a.type)).length;\n    return negative / Math.max(activities.length, 1);\n  }\n\n  private hasRecentActivity(activities: any[]): boolean {\n    if (activities.length === 0) return false;\n    \n    const mostRecent = new Date(activities[0].timestamp).getTime();\n    const daysSinceLastActivity = (Date.now() - mostRecent) / (1000 * 60 * 60 * 24);\n    return daysSinceLastActivity < 7; // Within last week\n  }\n\n  private hasLowEngagement(activities: any[]): boolean {\n    const last30Days = activities.filter(a => \n      (Date.now() - new Date(a.timestamp).getTime()) < (30 * 24 * 60 * 60 * 1000)\n    );\n    \n    return last30Days.length < 5; // Less than 5 activities in last 30 days\n  }\n\n  private calculateMonthsBetween(date1: Date, date2: Date): number {\n    return (date2.getTime() - date1.getTime()) / (1000 * 60 * 60 * 24 * 30);\n  }\n} "],"names":["BehavioralPredictor","prisma","PrismaClient","predictBehavior","userId","user","findUnique","where","id","include","EmailCampaign","SMSCampaign","WhatsAppCampaign","Contact","List","Segment","Error","emailActivities","emailActivity","findMany","campaignId","in","map","c","orderBy","timestamp","take","smsActivities","sMSActivity","waActivities","whatsAppActivity","engagementScore","calculateEngagementScore","churnRisk","predictChurnRisk","lifetimeValue","calculateLifetimeValue","nextBestAction","determineNextBestAction","nextPurchaseDate","predictNextPurchase","segments","segmentUser","predictions","confidenceScores","insights","generateInsights","error","logger","message","allActivities","recentActivities","sort","a","b","getTime","slice","metrics","frequency","length","recency","calculateRecency","duration","calculateAverageSessionDuration","interaction","calculateInteractionDepth","signals","activityDecline","calculateActivityDecline","engagementDrop","calculateEngagementDrop","negativeFeedback","calculateNegativeFeedback","emailValue","reduce","sum","campaign","metadata","JSON","parse","revenue","smsValue","waValue","totalValue","monthsSinceJoining","calculateMonthsBetween","Date","createdAt","hasRecentActivity","hasLowEngagement","allCampaigns","filter","status","undefined","sortedCampaigns","sentAt","intervals","i","push","avgInterval","now","channelCount","Boolean","channels","email","sms","whatsapp","preferredChannel","Object","entries","toUpperCase","activities","mostRecent","daysSinceLastActivity","Math","max","sessions","type","ActivityType","OPENED","CLICKED","totalDuration","s","min","interactionTypes","Set","size","recent","historical","recentScore","historicalScore","negativeTypes","BOUNCED","UNSUBSCRIBED","FAILED","negative","includes","last30Days","date1","date2"],"mappings":"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"}