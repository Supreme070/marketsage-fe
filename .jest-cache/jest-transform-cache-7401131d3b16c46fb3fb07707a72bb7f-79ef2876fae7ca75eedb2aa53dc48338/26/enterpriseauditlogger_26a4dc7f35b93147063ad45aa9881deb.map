{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/lib/audit/enterprise-audit-logger.ts"],"sourcesContent":["/**\n * Enterprise Audit Logging System\n * ==============================\n * Comprehensive audit trail with integrity protection and compliance features\n */\n\nimport prisma from '@/lib/db/prisma';\nimport { logger } from '@/lib/logger';\nimport { enterpriseEncryption } from '@/lib/encryption/enterprise-encryption';\nimport crypto from 'crypto';\n\nexport interface AuditEvent {\n  id: string;\n  timestamp: Date;\n  eventType: AuditEventType;\n  actor: {\n    id: string;\n    type: 'user' | 'system' | 'api' | 'admin';\n    identifier: string; // email, API key name, etc.\n    ipAddress?: string;\n    userAgent?: string;\n    sessionId?: string;\n  };\n  resource: {\n    type: ResourceType;\n    id: string;\n    name?: string;\n    organizationId: string;\n  };\n  action: AuditAction;\n  outcome: 'success' | 'failure' | 'partial';\n  details: {\n    changes?: Record<string, { from: any; to: any }>;\n    metadata?: Record<string, any>;\n    errorMessage?: string;\n    duration?: number;\n    riskLevel?: 'low' | 'medium' | 'high' | 'critical';\n  };\n  compliance: {\n    dataClassification: 'public' | 'internal' | 'confidential' | 'restricted';\n    retentionDays: number;\n    gdprRelevant: boolean;\n    hipaaRelevant: boolean;\n    pciRelevant: boolean;\n  };\n  integrity: {\n    hash: string;\n    previousHash?: string;\n    signature: string;\n    chainVerified: boolean;\n  };\n}\n\nexport type AuditEventType = \n  | 'AUTHENTICATION' | 'AUTHORIZATION' | 'DATA_ACCESS' | 'DATA_MODIFICATION'\n  | 'SYSTEM_ADMIN' | 'SECURITY_EVENT' | 'COMPLIANCE_EVENT' | 'API_ACCESS'\n  | 'CONFIGURATION_CHANGE' | 'BACKUP_RESTORE' | 'PRIVACY_REQUEST';\n\nexport type ResourceType = \n  | 'USER' | 'CONTACT' | 'CAMPAIGN' | 'WORKFLOW' | 'ORGANIZATION' | 'API_KEY'\n  | 'SYSTEM_SETTING' | 'DATABASE' | 'ENCRYPTION_KEY' | 'BACKUP' | 'AUDIT_LOG';\n\nexport type AuditAction = \n  | 'CREATE' | 'READ' | 'UPDATE' | 'DELETE' | 'LOGIN' | 'LOGOUT' | 'FAILED_LOGIN'\n  | 'PERMISSION_GRANT' | 'PERMISSION_REVOKE' | 'EXPORT' | 'IMPORT' | 'BACKUP'\n  | 'RESTORE' | 'CONFIGURE' | 'ENCRYPT' | 'DECRYPT' | 'ANONYMIZE' | 'PURGE';\n\nexport interface AuditQuery {\n  organizationId?: string;\n  actorId?: string;\n  resourceType?: ResourceType;\n  resourceId?: string;\n  eventType?: AuditEventType;\n  action?: AuditAction;\n  outcome?: 'success' | 'failure' | 'partial';\n  riskLevel?: 'low' | 'medium' | 'high' | 'critical';\n  startDate?: Date;\n  endDate?: Date;\n  limit?: number;\n  offset?: number;\n}\n\nexport interface AuditReport {\n  summary: {\n    totalEvents: number;\n    highRiskEvents: number;\n    failedEvents: number;\n    uniqueActors: number;\n    timeRange: { start: Date; end: Date };\n  };\n  riskAnalysis: {\n    riskDistribution: Record<string, number>;\n    suspiciousPatterns: string[];\n    anomalies: Array<{\n      type: string;\n      description: string;\n      severity: 'low' | 'medium' | 'high' | 'critical';\n      affectedResources: string[];\n    }>;\n  };\n  complianceMetrics: {\n    gdprEvents: number;\n    dataAccessEvents: number;\n    privacyRequests: number;\n    retentionViolations: number;\n  };\n  topEvents: {\n    mostActiveUsers: Array<{ actorId: string; eventCount: number }>;\n    mostAccessedResources: Array<{ resourceId: string; accessCount: number }>;\n    failuresByType: Record<string, number>;\n  };\n}\n\nexport class EnterpriseAuditLogger {\n  private readonly hashChain: Map<string, string> = new Map();\n  private readonly integrityKey: Buffer;\n\n  constructor() {\n    // Detect if we're in a build context\n    const isBuildPhase = this.detectBuildPhase();\n    \n    if (isBuildPhase) {\n      // During build, use a temporary key to allow compilation\n      console.log('Build phase detected - using temporary audit integrity key');\n      this.integrityKey = crypto.pbkdf2Sync('build-phase-audit-key', 'audit-salt', 1000, 32, 'sha512');\n      this.initializeHashChain();\n      return;\n    }\n    \n    // Initialize integrity protection\n    const integrityKeyEnv = process.env.AUDIT_INTEGRITY_KEY;\n    \n    // In development, allow a default key with a warning\n    if (process.env.NODE_ENV === 'development' && (!integrityKeyEnv || integrityKeyEnv === 'default-audit-key')) {\n      console.warn('Using default audit integrity key in development - DO NOT USE IN PRODUCTION');\n      this.integrityKey = crypto.pbkdf2Sync('development-audit-key', 'audit-salt', 1000, 32, 'sha512');\n      this.initializeHashChain();\n      return;\n    }\n    \n    if (!integrityKeyEnv || integrityKeyEnv === 'default-audit-key') {\n      throw new Error('SECURITY: Audit integrity key must be set and cannot be default value');\n    }\n    \n    this.integrityKey = crypto.pbkdf2Sync(integrityKeyEnv, 'audit-salt', 100000, 32, 'sha512');\n    this.initializeHashChain();\n  }\n\n  /**\n   * Detect if we're in a build phase using multiple indicators\n   */\n  private detectBuildPhase(): boolean {\n    // Multiple checks to reliably detect build phase\n    return (\n      // Next.js build command sets this\n      process.env.NEXT_PHASE === 'phase-production-build' ||\n      // Webpack build context\n      process.env.WEBPACK_BUILD === 'true' ||\n      // CI/CD build environments\n      process.env.CI === 'true' ||\n      // Docker build phase\n      process.env.DOCKER_BUILD === 'true' ||\n      // Check if we're in a serverless build context\n      typeof window === 'undefined' && process.env.NODE_ENV === 'production' && !process.env.NEXT_RUNTIME ||\n      // Check for missing runtime environment variables that would be present during actual runtime\n      (process.env.NODE_ENV === 'production' && !process.env.DATABASE_URL)\n    );\n  }\n\n  /**\n   * Log high-importance audit event with integrity protection\n   */\n  async logEvent(event: Omit<AuditEvent, 'id' | 'timestamp' | 'integrity'>): Promise<void> {\n    try {\n      const auditEvent = await this.createAuditEvent(event);\n      \n      // Store in multiple locations for redundancy\n      await Promise.all([\n        this.storeInDatabase(auditEvent),\n        this.storeInSecureLog(auditEvent),\n        this.updateHashChain(auditEvent)\n      ]);\n\n      // Real-time alerting for critical events\n      if (auditEvent.details.riskLevel === 'critical') {\n        await this.triggerSecurityAlert(auditEvent);\n      }\n\n      // Compliance notifications\n      if (auditEvent.compliance.gdprRelevant) {\n        await this.notifyComplianceTeam(auditEvent);\n      }\n\n    } catch (error) {\n      // Audit logging failures are critical - never fail silently\n      logger.error('CRITICAL: Audit logging failed', {\n        error: error instanceof Error ? error.message : String(error),\n        event: event.action,\n        resourceType: event.resource.type,\n        actorId: event.actor.id\n      });\n      \n      // Fallback to emergency logging\n      await this.emergencyLog(event, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Simplified logging for common events\n   */\n  async logUserAction(\n    userId: string,\n    action: AuditAction,\n    resourceType: ResourceType,\n    resourceId: string,\n    details?: Record<string, any>,\n    ipAddress?: string,\n    userAgent?: string\n  ): Promise<void> {\n    await this.logEvent({\n      eventType: 'DATA_ACCESS',\n      actor: {\n        id: userId,\n        type: 'user',\n        identifier: userId,\n        ipAddress,\n        userAgent\n      },\n      resource: {\n        type: resourceType,\n        id: resourceId,\n        organizationId: await this.getOrganizationId(userId)\n      },\n      action,\n      outcome: 'success',\n      details: {\n        metadata: details,\n        riskLevel: this.calculateRiskLevel(action, resourceType)\n      },\n      compliance: {\n        dataClassification: this.classifyData(resourceType),\n        retentionDays: this.getRetentionPeriod(resourceType),\n        gdprRelevant: this.isGDPRRelevant(resourceType),\n        hipaaRelevant: false,\n        pciRelevant: this.isPCIRelevant(resourceType)\n      }\n    });\n  }\n\n  /**\n   * Log security events with enhanced details\n   */\n  async logSecurityEvent(\n    eventType: 'FAILED_LOGIN' | 'SUSPICIOUS_ACTIVITY' | 'PERMISSION_VIOLATION' | 'DATA_BREACH',\n    actorIdentifier: string,\n    details: {\n      riskLevel: 'low' | 'medium' | 'high' | 'critical';\n      description: string;\n      ipAddress?: string;\n      userAgent?: string;\n      resourceId?: string;\n      resourceType?: ResourceType;\n      metadata?: Record<string, any>;\n    }\n  ): Promise<void> {\n    await this.logEvent({\n      eventType: 'SECURITY_EVENT',\n      actor: {\n        id: 'unknown',\n        type: 'user',\n        identifier: actorIdentifier,\n        ipAddress: details.ipAddress,\n        userAgent: details.userAgent\n      },\n      resource: {\n        type: details.resourceType || 'SYSTEM_SETTING',\n        id: details.resourceId || 'security-system',\n        organizationId: 'system'\n      },\n      action: eventType === 'FAILED_LOGIN' ? 'FAILED_LOGIN' : 'READ',\n      outcome: 'failure',\n      details: {\n        metadata: details.metadata,\n        errorMessage: details.description,\n        riskLevel: details.riskLevel\n      },\n      compliance: {\n        dataClassification: 'confidential',\n        retentionDays: 2555, // 7 years for security events\n        gdprRelevant: true,\n        hipaaRelevant: false,\n        pciRelevant: false\n      }\n    });\n  }\n\n  /**\n   * Log administrative actions\n   */\n  async logAdminAction(\n    adminId: string,\n    action: AuditAction,\n    resourceType: ResourceType,\n    resourceId: string,\n    changes?: Record<string, { from: any; to: any }>,\n    ipAddress?: string\n  ): Promise<void> {\n    await this.logEvent({\n      eventType: 'SYSTEM_ADMIN',\n      actor: {\n        id: adminId,\n        type: 'admin',\n        identifier: adminId,\n        ipAddress\n      },\n      resource: {\n        type: resourceType,\n        id: resourceId,\n        organizationId: await this.getOrganizationId(adminId)\n      },\n      action,\n      outcome: 'success',\n      details: {\n        changes,\n        riskLevel: 'high' // Admin actions are always high risk\n      },\n      compliance: {\n        dataClassification: 'restricted',\n        retentionDays: 2555,\n        gdprRelevant: true,\n        hipaaRelevant: false,\n        pciRelevant: false\n      }\n    });\n  }\n\n  /**\n   * Log API access with rate limiting context\n   */\n  async logAPIAccess(\n    apiKeyId: string,\n    endpoint: string,\n    method: string,\n    statusCode: number,\n    duration: number,\n    ipAddress: string,\n    userAgent: string\n  ): Promise<void> {\n    await this.logEvent({\n      eventType: 'API_ACCESS',\n      actor: {\n        id: apiKeyId,\n        type: 'api',\n        identifier: apiKeyId,\n        ipAddress,\n        userAgent\n      },\n      resource: {\n        type: 'API_KEY',\n        id: endpoint,\n        organizationId: await this.getOrganizationIdByApiKey(apiKeyId)\n      },\n      action: this.mapHttpMethodToAction(method),\n      outcome: statusCode < 400 ? 'success' : 'failure',\n      details: {\n        duration,\n        metadata: {\n          endpoint,\n          method,\n          statusCode\n        },\n        riskLevel: this.calculateAPIRiskLevel(endpoint, statusCode)\n      },\n      compliance: {\n        dataClassification: 'internal',\n        retentionDays: 365,\n        gdprRelevant: false,\n        hipaaRelevant: false,\n        pciRelevant: false\n      }\n    });\n  }\n\n  /**\n   * Query audit logs with advanced filtering\n   */\n  async queryLogs(query: AuditQuery): Promise<{\n    events: AuditEvent[];\n    totalCount: number;\n    hasMore: boolean;\n  }> {\n    try {\n      const whereClause = this.buildWhereClause(query);\n      \n      const [events, totalCount] = await Promise.all([\n        prisma.auditEvent.findMany({\n          where: whereClause,\n          orderBy: { timestamp: 'desc' },\n          take: query.limit || 100,\n          skip: query.offset || 0\n        }),\n        prisma.auditEvent.count({ where: whereClause })\n      ]);\n\n      // Decrypt and verify integrity\n      const decryptedEvents = await Promise.all(\n        events.map(event => this.decryptAuditEvent(event))\n      );\n\n      return {\n        events: decryptedEvents,\n        totalCount,\n        hasMore: (query.offset || 0) + events.length < totalCount\n      };\n\n    } catch (error) {\n      logger.error('Audit log query failed', {\n        error: error instanceof Error ? error.message : String(error),\n        query\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Generate comprehensive audit report\n   */\n  async generateReport(\n    organizationId: string,\n    startDate: Date,\n    endDate: Date\n  ): Promise<AuditReport> {\n    try {\n      const baseQuery = {\n        organizationId,\n        startDate,\n        endDate\n      };\n\n      const [\n        totalEvents,\n        highRiskEvents,\n        failedEvents,\n        uniqueActors,\n        riskDistribution,\n        complianceEvents,\n        topUsers,\n        topResources,\n        failuresByType\n      ] = await Promise.all([\n        this.countEvents(baseQuery),\n        this.countHighRiskEvents(baseQuery),\n        this.countFailedEvents(baseQuery),\n        this.countUniqueActors(baseQuery),\n        this.analyzeRiskDistribution(baseQuery),\n        this.analyzeComplianceEvents(baseQuery),\n        this.getTopActiveUsers(baseQuery),\n        this.getTopAccessedResources(baseQuery),\n        this.analyzeFailuresByType(baseQuery)\n      ]);\n\n      const anomalies = await this.detectAnomalies(baseQuery);\n      const suspiciousPatterns = await this.detectSuspiciousPatterns(baseQuery);\n\n      return {\n        summary: {\n          totalEvents,\n          highRiskEvents,\n          failedEvents,\n          uniqueActors,\n          timeRange: { start: startDate, end: endDate }\n        },\n        riskAnalysis: {\n          riskDistribution,\n          suspiciousPatterns,\n          anomalies\n        },\n        complianceMetrics: {\n          gdprEvents: complianceEvents.gdpr,\n          dataAccessEvents: complianceEvents.dataAccess,\n          privacyRequests: complianceEvents.privacy,\n          retentionViolations: complianceEvents.retention\n        },\n        topEvents: {\n          mostActiveUsers: topUsers,\n          mostAccessedResources: topResources,\n          failuresByType\n        }\n      };\n\n    } catch (error) {\n      logger.error('Audit report generation failed', {\n        error: error instanceof Error ? error.message : String(error),\n        organizationId,\n        startDate,\n        endDate\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Verify audit log integrity\n   */\n  async verifyIntegrity(organizationId: string): Promise<{\n    isValid: boolean;\n    corruptedEvents: string[];\n    chainBreaks: number;\n    lastVerifiedEvent: string;\n  }> {\n    try {\n      const events = await prisma.auditEvent.findMany({\n        where: { organizationId },\n        orderBy: { timestamp: 'asc' }\n      });\n\n      const corruptedEvents: string[] = [];\n      let chainBreaks = 0;\n      let lastVerifiedEvent = '';\n      let previousHash = '';\n\n      for (const event of events) {\n        // Verify individual event integrity\n        const decryptedEvent = await this.decryptAuditEvent(event);\n        const isEventValid = await this.verifyEventIntegrity(decryptedEvent);\n        \n        if (!isEventValid) {\n          corruptedEvents.push(event.id);\n        }\n\n        // Verify hash chain\n        if (previousHash && decryptedEvent.integrity.previousHash !== previousHash) {\n          chainBreaks++;\n        }\n\n        if (isEventValid) {\n          lastVerifiedEvent = event.id;\n        }\n\n        previousHash = decryptedEvent.integrity.hash;\n      }\n\n      const isValid = corruptedEvents.length === 0 && chainBreaks === 0;\n\n      logger.info('Audit integrity verification completed', {\n        organizationId,\n        isValid,\n        totalEvents: events.length,\n        corruptedEvents: corruptedEvents.length,\n        chainBreaks\n      });\n\n      return {\n        isValid,\n        corruptedEvents,\n        chainBreaks,\n        lastVerifiedEvent\n      };\n\n    } catch (error) {\n      logger.error('Audit integrity verification failed', {\n        error: error instanceof Error ? error.message : String(error),\n        organizationId\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Private helper methods\n   */\n  private async createAuditEvent(event: Omit<AuditEvent, 'id' | 'timestamp' | 'integrity'>): Promise<AuditEvent> {\n    const id = crypto.randomUUID();\n    const timestamp = new Date();\n    \n    // Create event payload for hashing\n    const eventPayload = {\n      id,\n      timestamp,\n      ...event\n    };\n\n    // Generate integrity protection\n    const eventHash = this.generateEventHash(eventPayload);\n    const previousHash = this.hashChain.get(event.resource.organizationId);\n    const signature = this.generateSignature(eventHash);\n\n    const auditEvent: AuditEvent = {\n      ...eventPayload,\n      integrity: {\n        hash: eventHash,\n        previousHash,\n        signature,\n        chainVerified: true\n      }\n    };\n\n    return auditEvent;\n  }\n\n  private generateEventHash(event: any): string {\n    const eventString = JSON.stringify(event, Object.keys(event).sort());\n    return crypto.createHash('sha256').update(eventString).digest('hex');\n  }\n\n  private generateSignature(hash: string): string {\n    return crypto.createHmac('sha256', this.integrityKey).update(hash).digest('hex');\n  }\n\n  private async storeInDatabase(event: AuditEvent): Promise<void> {\n    // Encrypt sensitive data before storage\n    const encryptedEvent = await this.encryptAuditEvent(event);\n    \n    await prisma.auditEvent.create({\n      data: {\n        id: encryptedEvent.id,\n        timestamp: encryptedEvent.timestamp,\n        eventType: encryptedEvent.eventType,\n        actorData: encryptedEvent.actorData,\n        resourceData: encryptedEvent.resourceData,\n        action: encryptedEvent.action,\n        outcome: encryptedEvent.outcome,\n        detailsData: encryptedEvent.detailsData,\n        complianceData: encryptedEvent.complianceData,\n        integrityData: encryptedEvent.integrityData,\n        organizationId: event.resource.organizationId\n      } as any\n    });\n  }\n\n  private async storeInSecureLog(event: AuditEvent): Promise<void> {\n    // Store in write-only security log for tamper protection\n    logger.audit('AUDIT_EVENT', {\n      eventId: event.id,\n      timestamp: event.timestamp,\n      eventType: event.eventType,\n      actor: event.actor.identifier,\n      resource: `${event.resource.type}:${event.resource.id}`,\n      action: event.action,\n      outcome: event.outcome,\n      riskLevel: event.details.riskLevel,\n      hash: event.integrity.hash\n    });\n  }\n\n  private async updateHashChain(event: AuditEvent): Promise<void> {\n    this.hashChain.set(event.resource.organizationId, event.integrity.hash);\n  }\n\n  private initializeHashChain(): void {\n    // Initialize hash chain for organizations\n    logger.info('Audit hash chain initialized');\n  }\n\n  private async encryptAuditEvent(event: AuditEvent): Promise<any> {\n    return {\n      id: event.id,\n      timestamp: event.timestamp,\n      eventType: event.eventType,\n      actorData: enterpriseEncryption.encryptAdvanced(JSON.stringify(event.actor)),\n      resourceData: enterpriseEncryption.encryptAdvanced(JSON.stringify(event.resource)),\n      action: event.action,\n      outcome: event.outcome,\n      detailsData: enterpriseEncryption.encryptAdvanced(JSON.stringify(event.details)),\n      complianceData: enterpriseEncryption.encryptAdvanced(JSON.stringify(event.compliance)),\n      integrityData: enterpriseEncryption.encryptAdvanced(JSON.stringify(event.integrity))\n    };\n  }\n\n  private async decryptAuditEvent(encryptedEvent: any): Promise<AuditEvent> {\n    return {\n      id: encryptedEvent.id,\n      timestamp: encryptedEvent.timestamp,\n      eventType: encryptedEvent.eventType,\n      actor: JSON.parse(enterpriseEncryption.decryptAdvanced(encryptedEvent.actorData)),\n      resource: JSON.parse(enterpriseEncryption.decryptAdvanced(encryptedEvent.resourceData)),\n      action: encryptedEvent.action,\n      outcome: encryptedEvent.outcome,\n      details: JSON.parse(enterpriseEncryption.decryptAdvanced(encryptedEvent.detailsData)),\n      compliance: JSON.parse(enterpriseEncryption.decryptAdvanced(encryptedEvent.complianceData)),\n      integrity: JSON.parse(enterpriseEncryption.decryptAdvanced(encryptedEvent.integrityData))\n    };\n  }\n\n  private calculateRiskLevel(action: AuditAction, resourceType: ResourceType): 'low' | 'medium' | 'high' | 'critical' {\n    const highRiskActions = ['DELETE', 'PURGE', 'EXPORT', 'PERMISSION_GRANT'];\n    const sensitiveResources = ['USER', 'ENCRYPTION_KEY', 'BACKUP', 'SYSTEM_SETTING'];\n    \n    if (highRiskActions.includes(action) && sensitiveResources.includes(resourceType)) {\n      return 'critical';\n    } else if (highRiskActions.includes(action) || sensitiveResources.includes(resourceType)) {\n      return 'high';\n    } else if (action === 'UPDATE') {\n      return 'medium';\n    }\n    return 'low';\n  }\n\n  private classifyData(resourceType: ResourceType): 'public' | 'internal' | 'confidential' | 'restricted' {\n    const restrictedTypes = ['ENCRYPTION_KEY', 'SYSTEM_SETTING', 'API_KEY'];\n    const confidentialTypes = ['USER', 'CONTACT', 'BACKUP'];\n    \n    if (restrictedTypes.includes(resourceType)) return 'restricted';\n    if (confidentialTypes.includes(resourceType)) return 'confidential';\n    return 'internal';\n  }\n\n  private getRetentionPeriod(resourceType: ResourceType): number {\n    const retentionMap: Record<ResourceType, number> = {\n      'USER': 2555, // 7 years\n      'CONTACT': 1095, // 3 years\n      'CAMPAIGN': 1095,\n      'WORKFLOW': 365,\n      'ORGANIZATION': 2555,\n      'API_KEY': 365,\n      'SYSTEM_SETTING': 2555,\n      'DATABASE': 2555,\n      'ENCRYPTION_KEY': 2555,\n      'BACKUP': 365,\n      'AUDIT_LOG': 2555\n    };\n    \n    return retentionMap[resourceType] || 365;\n  }\n\n  private isGDPRRelevant(resourceType: ResourceType): boolean {\n    return ['USER', 'CONTACT'].includes(resourceType);\n  }\n\n  private isPCIRelevant(resourceType: ResourceType): boolean {\n    return ['DATABASE', 'BACKUP', 'ENCRYPTION_KEY'].includes(resourceType);\n  }\n\n  private mapHttpMethodToAction(method: string): AuditAction {\n    const methodMap: Record<string, AuditAction> = {\n      'GET': 'READ',\n      'POST': 'CREATE',\n      'PUT': 'UPDATE',\n      'PATCH': 'UPDATE',\n      'DELETE': 'DELETE'\n    };\n    return methodMap[method] || 'READ';\n  }\n\n  private calculateAPIRiskLevel(endpoint: string, statusCode: number): 'low' | 'medium' | 'high' | 'critical' {\n    if (statusCode >= 500) return 'high';\n    if (statusCode >= 400) return 'medium';\n    if (endpoint.includes('/admin/') || endpoint.includes('/system/')) return 'high';\n    return 'low';\n  }\n\n  // Additional helper methods for report generation...\n  private async getOrganizationId(userId: string): Promise<string> {\n    const user = await prisma.user.findUnique({\n      where: { id: userId },\n      select: { organizationId: true }\n    });\n    return user?.organizationId || 'unknown';\n  }\n\n  private async getOrganizationIdByApiKey(apiKeyId: string): Promise<string> {\n    // Implementation would look up organization by API key\n    return 'unknown';\n  }\n\n  private buildWhereClause(query: AuditQuery): any {\n    const where: any = {};\n    \n    if (query.organizationId) where.organizationId = query.organizationId;\n    if (query.eventType) where.eventType = query.eventType;\n    if (query.action) where.action = query.action;\n    if (query.outcome) where.outcome = query.outcome;\n    if (query.startDate || query.endDate) {\n      where.timestamp = {};\n      if (query.startDate) where.timestamp.gte = query.startDate;\n      if (query.endDate) where.timestamp.lte = query.endDate;\n    }\n    \n    return where;\n  }\n\n  private async verifyEventIntegrity(event: AuditEvent): Promise<boolean> {\n    const eventPayload = { ...event };\n    delete eventPayload.integrity;\n    \n    const expectedHash = this.generateEventHash(eventPayload);\n    const expectedSignature = this.generateSignature(expectedHash);\n    \n    return event.integrity.hash === expectedHash && event.integrity.signature === expectedSignature;\n  }\n\n  private async triggerSecurityAlert(event: AuditEvent): Promise<void> {\n    logger.critical('SECURITY_ALERT', {\n      eventId: event.id,\n      actor: event.actor.identifier,\n      action: event.action,\n      resource: `${event.resource.type}:${event.resource.id}`,\n      riskLevel: event.details.riskLevel\n    });\n  }\n\n  private async notifyComplianceTeam(event: AuditEvent): Promise<void> {\n    logger.info('GDPR_EVENT', {\n      eventId: event.id,\n      eventType: event.eventType,\n      dataClassification: event.compliance.dataClassification\n    });\n  }\n\n  private async emergencyLog(event: any, error: any): Promise<void> {\n    // Emergency fallback logging\n    console.error('EMERGENCY_AUDIT_LOG', {\n      timestamp: new Date().toISOString(),\n      event: JSON.stringify(event),\n      error: error instanceof Error ? error.message : String(error)\n    });\n  }\n\n  // Report generation helper methods (simplified implementations)\n  private async countEvents(query: any): Promise<number> { return 0; }\n  private async countHighRiskEvents(query: any): Promise<number> { return 0; }\n  private async countFailedEvents(query: any): Promise<number> { return 0; }\n  private async countUniqueActors(query: any): Promise<number> { return 0; }\n  private async analyzeRiskDistribution(query: any): Promise<Record<string, number>> { return {}; }\n  private async analyzeComplianceEvents(query: any): Promise<any> { return { gdpr: 0, dataAccess: 0, privacy: 0, retention: 0 }; }\n  private async getTopActiveUsers(query: any): Promise<Array<{ actorId: string; eventCount: number }>> { return []; }\n  private async getTopAccessedResources(query: any): Promise<Array<{ resourceId: string; accessCount: number }>> { return []; }\n  private async analyzeFailuresByType(query: any): Promise<Record<string, number>> { return {}; }\n  private async detectAnomalies(query: any): Promise<any[]> { return []; }\n  private async detectSuspiciousPatterns(query: any): Promise<string[]> { return []; }\n}\n\n// Helper function to detect build phase for singleton creation\nfunction detectBuildPhaseForSingleton(): boolean {\n  return (\n    // Next.js build command sets this\n    process.env.NEXT_PHASE === 'phase-production-build' ||\n    // Webpack build context\n    process.env.WEBPACK_BUILD === 'true' ||\n    // CI/CD build environments\n    process.env.CI === 'true' ||\n    // Docker build phase\n    process.env.DOCKER_BUILD === 'true' ||\n    // Check if we're in a serverless build context\n    typeof window === 'undefined' && process.env.NODE_ENV === 'production' && !process.env.NEXT_RUNTIME ||\n    // Check for missing runtime environment variables that would be present during actual runtime\n    (process.env.NODE_ENV === 'production' && !process.env.DATABASE_URL)\n  );\n}\n\n// Export singleton with enterprise features\nlet enterpriseAuditLoggerInstance: EnterpriseAuditLogger | null = null;\n\ntry {\n  enterpriseAuditLoggerInstance = new EnterpriseAuditLogger();\n} catch (error) {\n  // If audit logger fails during build, create a mock instance\n  const isBuildPhase = detectBuildPhaseForSingleton();\n  if (isBuildPhase) {\n    console.warn('Using mock audit logger during build phase');\n    // Create a minimal mock that won't break the build\n    enterpriseAuditLoggerInstance = {\n      logEvent: async () => {},\n      logUserAction: async () => {},\n      logSecurityEvent: async () => {},\n      logAdminAction: async () => {},\n      logAPIAccess: async () => {},\n      queryLogs: async () => ({ events: [], totalCount: 0, hasMore: false }),\n      generateReport: async () => ({\n        summary: { totalEvents: 0, highRiskEvents: 0, failedEvents: 0, uniqueActors: 0, timeRange: { start: new Date(), end: new Date() } },\n        riskAnalysis: { riskDistribution: {}, suspiciousPatterns: [], anomalies: [] },\n        complianceMetrics: { gdprEvents: 0, dataAccessEvents: 0, privacyRequests: 0, retentionViolations: 0 },\n        topEvents: { mostActiveUsers: [], mostAccessedResources: [], failuresByType: {} }\n      }),\n      verifyIntegrity: async () => ({ isValid: true, corruptedEvents: [], chainBreaks: 0, lastVerifiedEvent: '' })\n    } as any;\n  } else {\n    throw error;\n  }\n}\n\nexport const enterpriseAuditLogger = enterpriseAuditLoggerInstance!;\n\n// Helper functions for easy usage\nexport const auditUserAction = (userId: string, action: AuditAction, resourceType: ResourceType, resourceId: string, details?: any, ipAddress?: string, userAgent?: string) =>\n  enterpriseAuditLogger.logUserAction(userId, action, resourceType, resourceId, details, ipAddress, userAgent);\n\nexport const auditSecurityEvent = (eventType: any, actorIdentifier: string, details: any) =>\n  enterpriseAuditLogger.logSecurityEvent(eventType, actorIdentifier, details);\n\nexport const auditAdminAction = (adminId: string, action: AuditAction, resourceType: ResourceType, resourceId: string, changes?: any, ipAddress?: string) =>\n  enterpriseAuditLogger.logAdminAction(adminId, action, resourceType, resourceId, changes, ipAddress);\n\nexport const auditAPIAccess = (apiKeyId: string, endpoint: string, method: string, statusCode: number, duration: number, ipAddress: string, userAgent: string) =>\n  enterpriseAuditLogger.logAPIAccess(apiKeyId, endpoint, method, statusCode, duration, ipAddress, userAgent);"],"names":["EnterpriseAuditLogger","auditAPIAccess","auditAdminAction","auditSecurityEvent","auditUserAction","enterpriseAuditLogger","constructor","hashChain","Map","isBuildPhase","detectBuildPhase","console","log","integrityKey","crypto","pbkdf2Sync","initializeHashChain","integrityKeyEnv","process","env","AUDIT_INTEGRITY_KEY","NODE_ENV","warn","Error","NEXT_PHASE","WEBPACK_BUILD","CI","DOCKER_BUILD","window","NEXT_RUNTIME","DATABASE_URL","logEvent","event","auditEvent","createAuditEvent","Promise","all","storeInDatabase","storeInSecureLog","updateHashChain","details","riskLevel","triggerSecurityAlert","compliance","gdprRelevant","notifyComplianceTeam","error","logger","message","String","action","resourceType","resource","type","actorId","actor","id","emergencyLog","logUserAction","userId","resourceId","ipAddress","userAgent","eventType","identifier","organizationId","getOrganizationId","outcome","metadata","calculateRiskLevel","dataClassification","classifyData","retentionDays","getRetentionPeriod","isGDPRRelevant","hipaaRelevant","pciRelevant","isPCIRelevant","logSecurityEvent","actorIdentifier","errorMessage","description","logAdminAction","adminId","changes","logAPIAccess","apiKeyId","endpoint","method","statusCode","duration","getOrganizationIdByApiKey","mapHttpMethodToAction","calculateAPIRiskLevel","queryLogs","query","whereClause","buildWhereClause","events","totalCount","prisma","findMany","where","orderBy","timestamp","take","limit","skip","offset","count","decryptedEvents","map","decryptAuditEvent","hasMore","length","generateReport","startDate","endDate","baseQuery","totalEvents","highRiskEvents","failedEvents","uniqueActors","riskDistribution","complianceEvents","topUsers","topResources","failuresByType","countEvents","countHighRiskEvents","countFailedEvents","countUniqueActors","analyzeRiskDistribution","analyzeComplianceEvents","getTopActiveUsers","getTopAccessedResources","analyzeFailuresByType","anomalies","detectAnomalies","suspiciousPatterns","detectSuspiciousPatterns","summary","timeRange","start","end","riskAnalysis","complianceMetrics","gdprEvents","gdpr","dataAccessEvents","dataAccess","privacyRequests","privacy","retentionViolations","retention","topEvents","mostActiveUsers","mostAccessedResources","verifyIntegrity","corruptedEvents","chainBreaks","lastVerifiedEvent","previousHash","decryptedEvent","isEventValid","verifyEventIntegrity","push","integrity","hash","isValid","info","randomUUID","Date","eventPayload","eventHash","generateEventHash","get","signature","generateSignature","chainVerified","eventString","JSON","stringify","Object","keys","sort","createHash","update","digest","createHmac","encryptedEvent","encryptAuditEvent","create","data","actorData","resourceData","detailsData","complianceData","integrityData","audit","eventId","set","enterpriseEncryption","encryptAdvanced","parse","decryptAdvanced","highRiskActions","sensitiveResources","includes","restrictedTypes","confidentialTypes","retentionMap","methodMap","user","findUnique","select","gte","lte","expectedHash","expectedSignature","critical","toISOString","detectBuildPhaseForSingleton","enterpriseAuditLoggerInstance"],"mappings":"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"}