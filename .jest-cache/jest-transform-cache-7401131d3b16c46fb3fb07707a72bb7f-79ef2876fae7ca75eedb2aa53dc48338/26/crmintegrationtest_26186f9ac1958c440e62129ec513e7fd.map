{"version":3,"sources":["/Users/supreme/Desktop/marketsage/__tests__/leadpulse/crm-integration.test.ts"],"sourcesContent":["/**\n * LeadPulse CRM Integration Tests\n * \n * Tests for CRM connector functionality including:\n * - Salesforce integration\n * - HubSpot integration\n * - Contact synchronization\n * - Deal/opportunity creation\n * - Error handling and retry logic\n */\n\nimport { describe, test, expect, beforeEach, afterEach, jest } from '@jest/globals';\nimport { \n  SalesforceConnector, \n  HubSpotConnector, \n  CRMIntegrationManager,\n  type CRMIntegrationConfig,\n  type CRMContact,\n  type CRMDeal \n} from '@/lib/leadpulse/integrations/crm-connectors';\nimport { leadPulseErrorHandler } from '@/lib/leadpulse/error-handler';\nimport prisma from '@/lib/db/prisma';\n\n// Mock dependencies\njest.mock('@/lib/db/prisma', () => ({\n  user: {\n    update: jest.fn(),\n    findUnique: jest.fn(),\n  },\n  leadPulseVisitor: {\n    findUnique: jest.fn(),\n  },\n  contact: {\n    findUnique: jest.fn(),\n    upsert: jest.fn(),\n  },\n  leadPulseAuditLog: {\n    create: jest.fn(),\n  },\n}));\n\njest.mock('@/lib/leadpulse/error-handler', () => ({\n  leadPulseErrorHandler: {\n    handleError: jest.fn(),\n  },\n}));\n\n// Mock fetch globally\nglobal.fetch = jest.fn();\n\ndescribe('LeadPulse CRM Integration', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    (global.fetch as jest.Mock).mockClear();\n  });\n\n  describe('Salesforce Connector', () => {\n    let salesforceConnector: SalesforceConnector;\n    let mockConfig: CRMIntegrationConfig;\n\n    beforeEach(() => {\n      mockConfig = {\n        platform: 'salesforce',\n        credentials: {\n          clientId: 'test_client_id',\n          clientSecret: 'test_client_secret',\n          refreshToken: 'test_refresh_token',\n          instanceUrl: 'https://test.salesforce.com',\n        },\n        mappings: {\n          leadSource: 'LeadPulse',\n          customFieldMappings: {\n            leadScore: 'Lead_Score__c',\n          },\n        },\n        syncSettings: {\n          autoSync: true,\n          syncInterval: 60,\n          syncDirection: 'to_crm',\n          conflictResolution: 'leadpulse_wins',\n        },\n      };\n\n      salesforceConnector = new SalesforceConnector(mockConfig);\n    });\n\n    test('should authenticate successfully', async () => {\n      const mockAuthResponse = {\n        access_token: 'new_access_token',\n        instance_url: 'https://test.salesforce.com',\n      };\n\n      (global.fetch as jest.Mock).mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockAuthResponse,\n      });\n\n      const result = await salesforceConnector.authenticate();\n\n      expect(result).toBe(true);\n      expect(mockConfig.credentials.accessToken).toBe('new_access_token');\n      expect(global.fetch).toHaveBeenCalledWith(\n        'https://test.salesforce.com/services/oauth2/token',\n        expect.objectContaining({\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n          },\n          body: expect.stringContaining('grant_type=refresh_token'),\n        })\n      );\n    });\n\n    test('should handle authentication failure', async () => {\n      (global.fetch as jest.Mock).mockResolvedValueOnce({\n        ok: false,\n        statusText: 'Unauthorized',\n      });\n\n      await expect(salesforceConnector.authenticate()).rejects.toThrow(\n        'Salesforce auth failed: Unauthorized'\n      );\n\n      expect(leadPulseErrorHandler.handleError).toHaveBeenCalled();\n    });\n\n    test('should create contact successfully', async () => {\n      const testContact: CRMContact = {\n        email: 'john.doe@example.com',\n        firstName: 'John',\n        lastName: 'Doe',\n        company: 'Example Corp',\n        phone: '+1234567890',\n        jobTitle: 'Marketing Manager',\n        leadScore: 85,\n      };\n\n      const mockCreateResponse = {\n        id: 'contact_sf_123',\n        success: true,\n      };\n\n      (global.fetch as jest.Mock).mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockCreateResponse,\n      });\n\n      // Set access token\n      mockConfig.credentials.accessToken = 'valid_token';\n\n      const result = await salesforceConnector.createContact(testContact);\n\n      expect(result.success).toBe(true);\n      expect(result.id).toBe('contact_sf_123');\n\n      expect(global.fetch).toHaveBeenCalledWith(\n        'https://test.salesforce.com/services/data/v58.0/sobjects/Contact',\n        expect.objectContaining({\n          method: 'POST',\n          headers: {\n            'Authorization': 'Bearer valid_token',\n            'Content-Type': 'application/json',\n          },\n          body: expect.stringContaining('\"Email\":\"john.doe@example.com\"'),\n        })\n      );\n    });\n\n    test('should update contact successfully', async () => {\n      const contactId = 'contact_sf_123';\n      const updateData: Partial<CRMContact> = {\n        firstName: 'John Updated',\n        leadScore: 95,\n      };\n\n      (global.fetch as jest.Mock).mockResolvedValueOnce({\n        ok: true,\n      });\n\n      mockConfig.credentials.accessToken = 'valid_token';\n\n      const result = await salesforceConnector.updateContact(contactId, updateData);\n\n      expect(result.success).toBe(true);\n\n      expect(global.fetch).toHaveBeenCalledWith(\n        `https://test.salesforce.com/services/data/v58.0/sobjects/Contact/${contactId}`,\n        expect.objectContaining({\n          method: 'PATCH',\n          headers: {\n            'Authorization': 'Bearer valid_token',\n            'Content-Type': 'application/json',\n          },\n          body: expect.stringContaining('\"FirstName\":\"John Updated\"'),\n        })\n      );\n    });\n\n    test('should search contacts by email', async () => {\n      const searchEmail = 'john.doe@example.com';\n      const mockSearchResponse = {\n        records: [\n          {\n            Id: 'contact_sf_123',\n            FirstName: 'John',\n            LastName: 'Doe',\n            Email: searchEmail,\n            Company: 'Example Corp',\n            Lead_Score__c: 85,\n          },\n        ],\n      };\n\n      (global.fetch as jest.Mock).mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockSearchResponse,\n      });\n\n      mockConfig.credentials.accessToken = 'valid_token';\n\n      const result = await salesforceConnector.searchContacts(searchEmail);\n\n      expect(result.success).toBe(true);\n      expect(result.contacts).toHaveLength(1);\n      expect(result.contacts![0].email).toBe(searchEmail);\n      expect(result.contacts![0].leadScore).toBe(85);\n\n      expect(global.fetch).toHaveBeenCalledWith(\n        expect.stringContaining(`/services/data/v58.0/query?q=`),\n        expect.objectContaining({\n          headers: {\n            'Authorization': 'Bearer valid_token',\n          },\n        })\n      );\n    });\n\n    test('should create deal/opportunity successfully', async () => {\n      const testDeal: CRMDeal = {\n        contactId: 'contact_sf_123',\n        title: 'LeadPulse Integration Deal',\n        amount: 5000,\n        stage: 'Qualified',\n        probability: 75,\n        description: 'Opportunity from LeadPulse visitor conversion',\n      };\n\n      const mockDealResponse = {\n        id: 'opportunity_sf_456',\n        success: true,\n      };\n\n      (global.fetch as jest.Mock).mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockDealResponse,\n      });\n\n      mockConfig.credentials.accessToken = 'valid_token';\n\n      const result = await salesforceConnector.createDeal(testDeal);\n\n      expect(result.success).toBe(true);\n      expect(result.id).toBe('opportunity_sf_456');\n\n      expect(global.fetch).toHaveBeenCalledWith(\n        'https://test.salesforce.com/services/data/v58.0/sobjects/Opportunity',\n        expect.objectContaining({\n          method: 'POST',\n          body: expect.stringContaining('\"Name\":\"LeadPulse Integration Deal\"'),\n        })\n      );\n    });\n\n    test('should test connection successfully', async () => {\n      (global.fetch as jest.Mock).mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ DailyApiRequests: { Max: 15000, Remaining: 14500 } }),\n      });\n\n      mockConfig.credentials.accessToken = 'valid_token';\n\n      const result = await salesforceConnector.testConnection();\n\n      expect(result.success).toBe(true);\n\n      expect(global.fetch).toHaveBeenCalledWith(\n        'https://test.salesforce.com/services/data/v58.0/limits',\n        expect.objectContaining({\n          headers: {\n            'Authorization': 'Bearer valid_token',\n          },\n        })\n      );\n    });\n\n    test('should handle rate limiting with delays', async () => {\n      const testContact: CRMContact = {\n        email: 'test@example.com',\n        firstName: 'Test',\n        lastName: 'User',\n      };\n\n      (global.fetch as jest.Mock).mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ id: 'contact_123', success: true }),\n      });\n\n      mockConfig.credentials.accessToken = 'valid_token';\n\n      const startTime = Date.now();\n      await salesforceConnector.createContact(testContact);\n      const endTime = Date.now();\n\n      // Should have a delay of at least 200ms (Salesforce rate limit delay)\n      expect(endTime - startTime).toBeGreaterThanOrEqual(200);\n    });\n  });\n\n  describe('HubSpot Connector', () => {\n    let hubspotConnector: HubSpotConnector;\n    let mockConfig: CRMIntegrationConfig;\n\n    beforeEach(() => {\n      mockConfig = {\n        platform: 'hubspot',\n        credentials: {\n          apiKey: 'test_hubspot_api_key',\n        },\n        mappings: {\n          leadSource: 'LeadPulse',\n        },\n        syncSettings: {\n          autoSync: true,\n          syncInterval: 30,\n          syncDirection: 'to_crm',\n          conflictResolution: 'leadpulse_wins',\n        },\n      };\n\n      hubspotConnector = new HubSpotConnector(mockConfig);\n    });\n\n    test('should authenticate with API key', async () => {\n      const result = await hubspotConnector.authenticate();\n      expect(result).toBe(true);\n    });\n\n    test('should fail authentication without API key', async () => {\n      mockConfig.credentials.apiKey = undefined;\n      const result = await hubspotConnector.authenticate();\n      expect(result).toBe(false);\n    });\n\n    test('should create contact successfully', async () => {\n      const testContact: CRMContact = {\n        email: 'jane.smith@example.com',\n        firstName: 'Jane',\n        lastName: 'Smith',\n        company: 'Tech Corp',\n        leadScore: 70,\n      };\n\n      const mockHubSpotResponse = {\n        id: 'contact_hs_789',\n        properties: {\n          email: testContact.email,\n          firstname: testContact.firstName,\n          lastname: testContact.lastName,\n        },\n      };\n\n      (global.fetch as jest.Mock).mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockHubSpotResponse,\n      });\n\n      const result = await hubspotConnector.createContact(testContact);\n\n      expect(result.success).toBe(true);\n      expect(result.id).toBe('contact_hs_789');\n\n      expect(global.fetch).toHaveBeenCalledWith(\n        'https://api.hubapi.com/crm/v3/objects/contacts',\n        expect.objectContaining({\n          method: 'POST',\n          headers: {\n            'Authorization': 'Bearer test_hubspot_api_key',\n            'Content-Type': 'application/json',\n          },\n          body: expect.stringContaining('\"email\":\"jane.smith@example.com\"'),\n        })\n      );\n    });\n\n    test('should search contacts with complex query', async () => {\n      const searchEmail = 'jane.smith@example.com';\n      const mockSearchResponse = {\n        results: [\n          {\n            id: 'contact_hs_789',\n            properties: {\n              email: searchEmail,\n              firstname: 'Jane',\n              lastname: 'Smith',\n              company: 'Tech Corp',\n              hubspotscore: 70,\n            },\n          },\n        ],\n      };\n\n      (global.fetch as jest.Mock).mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockSearchResponse,\n      });\n\n      const result = await hubspotConnector.searchContacts(searchEmail);\n\n      expect(result.success).toBe(true);\n      expect(result.contacts).toHaveLength(1);\n      expect(result.contacts![0].email).toBe(searchEmail);\n\n      expect(global.fetch).toHaveBeenCalledWith(\n        'https://api.hubapi.com/crm/v3/objects/contacts/search',\n        expect.objectContaining({\n          method: 'POST',\n          body: expect.stringContaining('\"propertyName\":\"email\"'),\n        })\n      );\n    });\n\n    test('should create deal with associations', async () => {\n      const testDeal: CRMDeal = {\n        contactId: 'contact_hs_789',\n        title: 'HubSpot Integration Deal',\n        amount: 7500,\n        stage: 'appointmentscheduled',\n      };\n\n      const mockDealResponse = {\n        id: 'deal_hs_101',\n        properties: {\n          dealname: testDeal.title,\n          amount: testDeal.amount.toString(),\n        },\n      };\n\n      (global.fetch as jest.Mock).mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockDealResponse,\n      });\n\n      const result = await hubspotConnector.createDeal(testDeal);\n\n      expect(result.success).toBe(true);\n      expect(result.id).toBe('deal_hs_101');\n\n      const fetchCall = (global.fetch as jest.Mock).mock.calls[0];\n      const requestBody = JSON.parse(fetchCall[1].body);\n      \n      expect(requestBody.associations).toEqual([\n        {\n          to: { id: testDeal.contactId },\n          types: [\n            {\n              associationCategory: 'HUBSPOT_DEFINED',\n              associationTypeId: 3,\n            },\n          ],\n        },\n      ]);\n    });\n\n    test('should handle API errors gracefully', async () => {\n      const testContact: CRMContact = {\n        email: 'error@example.com',\n        firstName: 'Error',\n        lastName: 'Test',\n      };\n\n      (global.fetch as jest.Mock).mockResolvedValueOnce({\n        ok: false,\n        status: 400,\n        text: async () => 'Bad Request: Invalid email format',\n      });\n\n      const result = await hubspotConnector.createContact(testContact);\n\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('HubSpot API error');\n    });\n\n    test('should respect rate limits', async () => {\n      const testContact: CRMContact = {\n        email: 'ratelimit@example.com',\n        firstName: 'Rate',\n        lastName: 'Limit',\n      };\n\n      (global.fetch as jest.Mock).mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ id: 'contact_rl_123' }),\n      });\n\n      const startTime = Date.now();\n      await hubspotConnector.createContact(testContact);\n      const endTime = Date.now();\n\n      // Should have a delay of at least 100ms (HubSpot rate limit delay)\n      expect(endTime - startTime).toBeGreaterThanOrEqual(100);\n    });\n  });\n\n  describe('CRM Integration Manager', () => {\n    let crmManager: CRMIntegrationManager;\n\n    beforeEach(() => {\n      crmManager = new CRMIntegrationManager();\n    });\n\n    test('should add Salesforce integration successfully', async () => {\n      const userId = 'user_test_123';\n      const config: CRMIntegrationConfig = {\n        platform: 'salesforce',\n        credentials: {\n          clientId: 'test_client_id',\n          clientSecret: 'test_client_secret',\n          refreshToken: 'test_refresh_token',\n          instanceUrl: 'https://test.salesforce.com',\n        },\n        mappings: {\n          leadSource: 'LeadPulse',\n        },\n        syncSettings: {\n          autoSync: true,\n          syncInterval: 60,\n          syncDirection: 'to_crm',\n          conflictResolution: 'leadpulse_wins',\n        },\n      };\n\n      // Mock successful authentication and connection test\n      (global.fetch as jest.Mock)\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => ({ access_token: 'test_token', instance_url: 'https://test.salesforce.com' }),\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => ({ DailyApiRequests: { Max: 15000, Remaining: 14500 } }),\n        });\n\n      (prisma.user.update as jest.Mock).mockResolvedValue({\n        id: userId,\n        crmIntegrations: {\n          salesforce: {\n            ...config,\n            connectedAt: expect.any(String),\n            status: 'active',\n          },\n        },\n      });\n\n      const result = await crmManager.addIntegration(userId, config);\n\n      expect(result.success).toBe(true);\n      expect(prisma.user.update).toHaveBeenCalledWith({\n        where: { id: userId },\n        data: {\n          crmIntegrations: expect.objectContaining({\n            salesforce: expect.objectContaining({\n              platform: 'salesforce',\n              status: 'active',\n            }),\n          }),\n        },\n      });\n    });\n\n    test('should add HubSpot integration successfully', async () => {\n      const userId = 'user_test_456';\n      const config: CRMIntegrationConfig = {\n        platform: 'hubspot',\n        credentials: {\n          apiKey: 'test_hubspot_key',\n        },\n        mappings: {\n          leadSource: 'LeadPulse',\n        },\n        syncSettings: {\n          autoSync: false,\n          syncInterval: 120,\n          syncDirection: 'bidirectional',\n          conflictResolution: 'manual',\n        },\n      };\n\n      // Mock successful connection test\n      (global.fetch as jest.Mock).mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ results: [] }),\n      });\n\n      (prisma.user.update as jest.Mock).mockResolvedValue({\n        id: userId,\n        crmIntegrations: {\n          hubspot: {\n            ...config,\n            connectedAt: expect.any(String),\n            status: 'active',\n          },\n        },\n      });\n\n      const result = await crmManager.addIntegration(userId, config);\n\n      expect(result.success).toBe(true);\n    });\n\n    test('should handle authentication failure', async () => {\n      const userId = 'user_auth_fail';\n      const config: CRMIntegrationConfig = {\n        platform: 'salesforce',\n        credentials: {\n          clientId: 'invalid_client_id',\n          clientSecret: 'invalid_secret',\n          refreshToken: 'invalid_token',\n        },\n        mappings: {},\n        syncSettings: {\n          autoSync: false,\n          syncInterval: 60,\n          syncDirection: 'to_crm',\n          conflictResolution: 'leadpulse_wins',\n        },\n      };\n\n      // Mock authentication failure\n      (global.fetch as jest.Mock).mockResolvedValueOnce({\n        ok: false,\n        statusText: 'Unauthorized',\n      });\n\n      const result = await crmManager.addIntegration(userId, config);\n\n      expect(result.success).toBe(false);\n      expect(result.error).toBe('Authentication failed');\n    });\n\n    test('should sync contact to CRM successfully', async () => {\n      const userId = 'user_sync_test';\n      const platform = 'salesforce';\n      const contact: CRMContact = {\n        email: 'sync@example.com',\n        firstName: 'Sync',\n        lastName: 'Test',\n        company: 'Test Corp',\n        leadScore: 80,\n      };\n\n      // Mock existing connector\n      const mockConnector = {\n        searchContacts: jest.fn().mockResolvedValue({\n          success: true,\n          contacts: [], // No existing contact\n        }),\n        createContact: jest.fn().mockResolvedValue({\n          success: true,\n          id: 'new_contact_123',\n        }),\n      };\n\n      // Add connector to manager\n      crmManager['connectors'].set(`${userId}-${platform}`, mockConnector as any);\n\n      const result = await crmManager.syncContact(userId, platform, contact);\n\n      expect(result.success).toBe(true);\n      expect(result.crmId).toBe('new_contact_123');\n      expect(mockConnector.searchContacts).toHaveBeenCalledWith(contact.email);\n      expect(mockConnector.createContact).toHaveBeenCalledWith(contact);\n    });\n\n    test('should update existing contact during sync', async () => {\n      const userId = 'user_update_test';\n      const platform = 'hubspot';\n      const contact: CRMContact = {\n        email: 'existing@example.com',\n        firstName: 'Updated',\n        lastName: 'Contact',\n        leadScore: 90,\n      };\n\n      const existingContact = {\n        id: 'existing_contact_456',\n        email: contact.email,\n        firstName: 'Old',\n        lastName: 'Name',\n      };\n\n      // Mock existing connector\n      const mockConnector = {\n        searchContacts: jest.fn().mockResolvedValue({\n          success: true,\n          contacts: [existingContact],\n        }),\n        updateContact: jest.fn().mockResolvedValue({\n          success: true,\n        }),\n      };\n\n      crmManager['connectors'].set(`${userId}-${platform}`, mockConnector as any);\n\n      const result = await crmManager.syncContact(userId, platform, contact);\n\n      expect(result.success).toBe(true);\n      expect(result.crmId).toBe(existingContact.id);\n      expect(mockConnector.updateContact).toHaveBeenCalledWith(\n        existingContact.id,\n        contact\n      );\n    });\n\n    test('should create deal from LeadPulse visitor', async () => {\n      const userId = 'user_deal_test';\n      const platform = 'salesforce';\n      const visitorId = 'visitor_deal_123';\n      const dealData: Partial<CRMDeal> = {\n        title: 'Custom Deal Title',\n        amount: 10000,\n        stage: 'Proposal',\n      };\n\n      // Mock database responses\n      const mockVisitor = {\n        id: visitorId,\n        score: 85,\n        contactId: 'contact_abc',\n        touchpoints: [\n          { type: 'pageview', url: '/pricing' },\n          { type: 'form_submit', formId: 'contact_form' },\n        ],\n      };\n\n      const mockContact = {\n        id: 'contact_abc',\n        email: 'deal@example.com',\n        firstName: 'Deal',\n        lastName: 'Creator',\n        company: 'Deal Corp',\n      };\n\n      (prisma.leadPulseVisitor.findUnique as jest.Mock).mockResolvedValue(mockVisitor);\n      (prisma.contact.findUnique as jest.Mock).mockResolvedValue(mockContact);\n      (prisma.leadPulseAuditLog.create as jest.Mock).mockResolvedValue({});\n\n      // Mock CRM connector\n      const mockConnector = {\n        searchContacts: jest.fn().mockResolvedValue({\n          success: true,\n          contacts: [],\n        }),\n        createContact: jest.fn().mockResolvedValue({\n          success: true,\n          crmId: 'crm_contact_789',\n        }),\n        createDeal: jest.fn().mockResolvedValue({\n          success: true,\n          id: 'deal_new_101',\n        }),\n      };\n\n      crmManager['connectors'].set(`${userId}-${platform}`, mockConnector as any);\n\n      // Mock the syncContact method\n      jest.spyOn(crmManager, 'syncContact').mockResolvedValue({\n        success: true,\n        crmId: 'crm_contact_789',\n      });\n\n      const result = await crmManager.createDealFromLeadPulse(\n        userId,\n        platform,\n        visitorId,\n        dealData\n      );\n\n      expect(result.success).toBe(true);\n      expect(result.dealId).toBe('deal_new_101');\n\n      // Verify deal creation with correct data\n      expect(mockConnector.createDeal).toHaveBeenCalledWith(\n        expect.objectContaining({\n          contactId: 'crm_contact_789',\n          title: dealData.title,\n          amount: dealData.amount,\n          stage: dealData.stage,\n          probability: 85, // Based on visitor score\n          description: expect.stringContaining(visitorId),\n        })\n      );\n\n      // Verify audit log creation\n      expect(prisma.leadPulseAuditLog.create).toHaveBeenCalledWith({\n        data: expect.objectContaining({\n          userId,\n          action: 'CREATE',\n          resource: 'crm_deal',\n          resourceId: 'deal_new_101',\n        }),\n      });\n    });\n\n    test('should handle missing visitor or contact', async () => {\n      const userId = 'user_missing_test';\n      const platform = 'salesforce';\n      const visitorId = 'nonexistent_visitor';\n\n      (prisma.leadPulseVisitor.findUnique as jest.Mock).mockResolvedValue(null);\n\n      const result = await crmManager.createDealFromLeadPulse(\n        userId,\n        platform,\n        visitorId,\n        {}\n      );\n\n      expect(result.success).toBe(false);\n      expect(result.error).toBe('Visitor not found or not converted to contact');\n    });\n\n    test('should handle unsupported CRM platforms', async () => {\n      const userId = 'user_unsupported';\n      const config: CRMIntegrationConfig = {\n        platform: 'unsupported_crm' as any,\n        credentials: {},\n        mappings: {},\n        syncSettings: {\n          autoSync: false,\n          syncInterval: 60,\n          syncDirection: 'to_crm',\n          conflictResolution: 'leadpulse_wins',\n        },\n      };\n\n      const result = await crmManager.addIntegration(userId, config);\n\n      expect(result.success).toBe(false);\n      expect(result.error).toBe('Unsupported CRM platform: unsupported_crm');\n    });\n  });\n\n  describe('Error Handling and Retry Logic', () => {\n    test('should handle network errors with retry', async () => {\n      const mockConfig: CRMIntegrationConfig = {\n        platform: 'salesforce',\n        credentials: {\n          clientId: 'test_client',\n          clientSecret: 'test_secret',\n          refreshToken: 'test_token',\n          accessToken: 'valid_token',\n          instanceUrl: 'https://test.salesforce.com',\n        },\n        mappings: {},\n        syncSettings: {\n          autoSync: false,\n          syncInterval: 60,\n          syncDirection: 'to_crm',\n          conflictResolution: 'leadpulse_wins',\n        },\n      };\n\n      const connector = new SalesforceConnector(mockConfig);\n      const testContact: CRMContact = {\n        email: 'network@example.com',\n        firstName: 'Network',\n        lastName: 'Error',\n      };\n\n      // Mock network error\n      (global.fetch as jest.Mock).mockRejectedValue(new Error('Network error'));\n\n      const result = await connector.createContact(testContact);\n\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('Network error');\n      expect(leadPulseErrorHandler.handleError).toHaveBeenCalled();\n    });\n\n    test('should handle rate limit responses', async () => {\n      const mockConfig: CRMIntegrationConfig = {\n        platform: 'hubspot',\n        credentials: {\n          apiKey: 'test_api_key',\n        },\n        mappings: {},\n        syncSettings: {\n          autoSync: false,\n          syncInterval: 60,\n          syncDirection: 'to_crm',\n          conflictResolution: 'leadpulse_wins',\n        },\n      };\n\n      const connector = new HubSpotConnector(mockConfig);\n      const testContact: CRMContact = {\n        email: 'ratelimit@example.com',\n        firstName: 'Rate',\n        lastName: 'Limit',\n      };\n\n      // Mock rate limit response\n      (global.fetch as jest.Mock).mockResolvedValueOnce({\n        ok: false,\n        status: 429,\n        text: async () => 'Rate limit exceeded',\n      });\n\n      const result = await connector.createContact(testContact);\n\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('Rate limit exceeded');\n    });\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n});"],"names":["jest","mock","user","update","fn","findUnique","leadPulseVisitor","contact","upsert","leadPulseAuditLog","create","leadPulseErrorHandler","handleError","global","fetch","describe","beforeEach","clearAllMocks","mockClear","salesforceConnector","mockConfig","platform","credentials","clientId","clientSecret","refreshToken","instanceUrl","mappings","leadSource","customFieldMappings","leadScore","syncSettings","autoSync","syncInterval","syncDirection","conflictResolution","SalesforceConnector","test","mockAuthResponse","access_token","instance_url","mockResolvedValueOnce","ok","json","result","authenticate","expect","toBe","accessToken","toHaveBeenCalledWith","objectContaining","method","headers","body","stringContaining","statusText","rejects","toThrow","toHaveBeenCalled","testContact","email","firstName","lastName","company","phone","jobTitle","mockCreateResponse","id","success","createContact","contactId","updateData","updateContact","searchEmail","mockSearchResponse","records","Id","FirstName","LastName","Email","Company","Lead_Score__c","searchContacts","contacts","toHaveLength","testDeal","title","amount","stage","probability","description","mockDealResponse","createDeal","DailyApiRequests","Max","Remaining","testConnection","startTime","Date","now","endTime","toBeGreaterThanOrEqual","hubspotConnector","apiKey","HubSpotConnector","undefined","mockHubSpotResponse","properties","firstname","lastname","results","hubspotscore","dealname","toString","fetchCall","calls","requestBody","JSON","parse","associations","toEqual","to","types","associationCategory","associationTypeId","status","text","error","toContain","crmManager","CRMIntegrationManager","userId","config","prisma","mockResolvedValue","crmIntegrations","salesforce","connectedAt","any","String","addIntegration","where","data","hubspot","mockConnector","set","syncContact","crmId","existingContact","visitorId","dealData","mockVisitor","score","touchpoints","type","url","formId","mockContact","spyOn","createDealFromLeadPulse","dealId","action","resource","resourceId","connector","mockRejectedValue","Error","afterEach"],"mappings":"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"}