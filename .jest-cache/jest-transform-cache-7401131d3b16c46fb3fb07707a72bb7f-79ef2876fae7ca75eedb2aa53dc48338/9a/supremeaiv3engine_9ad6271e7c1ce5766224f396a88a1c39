cf0ab2aaf212b917ecef7bfa7a79b470
/**
 * Supreme-AI Engine v3.0 (Meta Orchestrator)
 * =========================================
 * One-stop façade that intelligently routes requests to the appropriate
 * specialist sub-engines (v2 core analytics, RAG QA, AutoML, Memory).
 *
 * Goals
 * 1️⃣  Single entry-point – simplifies the rest of the codebase.
 * 2️⃣  Context awareness – uses long-term memory before answering.
 * 3️⃣  Knowledge grounding – RAG for factual Q&A.
 * 4️⃣  Continuous learning – AutoML for predictive tasks.
 * 5️⃣  Extensibility – easy to plug in future vision / voice modules.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    SupremeAIv3: function() {
        return SupremeAIv3;
    },
    supremeAI: function() {
        return supremeAI;
    },
    supremeAIv3: function() {
        return supremeAIv3;
    }
});
const _automlengine = require("./automl-engine");
const _ragengine = require("./rag-engine");
const _memoryengine = require("./memory-engine");
const _openaiintegration = require("./openai-integration");
const _logger = require("../logger");
const _prisma = /*#__PURE__*/ _interop_require_default(require("../db/prisma"));
const _taskexecutionmonitor = require("./task-execution-monitor");
const _intelligentexecutionengine = require("./intelligent-execution-engine");
const _universaltaskexecutionengine = require("./universal-task-execution-engine");
const _enhancednlpparser = require("./enhanced-nlp-parser");
const _safetyapprovalsystem = require("./safety-approval-system");
const _aipermissionsystem = require("./ai-permission-system");
const _aisafeexecutionengine = require("./ai-safe-execution-engine");
const _aicontextawarenesssystem = require("./ai-context-awareness-system");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// -----------------------------
// Supreme-AI v3 Core
// -----------------------------
class SupremeAIV3Core {
    async ensureMemoryReady() {
        try {
            // Check if OpenAI-only mode is enabled
            if (process.env.USE_OPENAI_ONLY === 'true' || process.env.SUPREME_AI_MODE === 'disabled') {
                _logger.logger.info('Supreme-AI disabled - using OpenAI only mode');
                return;
            }
            if (process.env.AI_FALLBACK_MODE === 'true' || process.env.SUPREME_AI_MODE === 'fallback') {
                // Skip memory initialization in fallback mode
                return;
            }
            await _memoryengine.supremeMemory.initialize();
        } catch (error) {
            _logger.logger.warn('Memory engine initialization failed, continuing in fallback mode', {
                error: error instanceof Error ? error.message : String(error)
            });
        }
    }
    async process(task) {
        await this.ensureMemoryReady();
        // Get comprehensive context for intelligent decision making
        const context = await this.getContextForTask(task);
        // Track user behavior for context building
        await this.trackTaskBehavior(task, context);
        // Permission checking for AI operations
        const permissionResult = await this.checkTaskPermissions(task);
        if (!permissionResult.allowed) {
            return {
                success: false,
                timestamp: new Date(),
                taskType: task.type,
                data: null,
                confidence: 0,
                debug: {
                    permissionDenied: true,
                    reason: permissionResult.reason,
                    requiredPermissions: permissionResult.requiredPermissions,
                    contextId: context.id
                }
            };
        }
        switch(task.type){
            case 'question':
                return this.handleQuestion(task);
            case 'task':
                return this.handleTaskExecution(task);
            case 'analyze':
                return this.handleAnalyze(task);
            case 'predict':
                return this.handlePredict(task);
            case 'content':
                return this.handleContent(task);
            case 'customer':
                return this.handleCustomer(task);
            case 'market':
                return this.handleMarket(task);
            case 'adaptive':
                return this.handleAdaptive(task);
            case 'leadpulse_insights':
                return this.handleLeadPulseInsights(task);
            case 'leadpulse_predict':
                return this.handleLeadPulsePredict(task);
            case 'leadpulse_optimize':
                return this.handleLeadPulseOptimize(task);
            case 'leadpulse_visitors':
                return this.handleLeadPulseVisitors(task);
            case 'leadpulse_segments':
                return this.handleLeadPulseSegments(task);
            default:
                throw new Error(`Unsupported task type ${task.type}`);
        }
    }
    // 1. Contextual Question Answering
    async handleQuestion(task) {
        const { userId, question } = task;
        const enableTaskExecution = task.enableTaskExecution === true;
        _logger.logger.info('Supreme-AI v3 handling question', {
            userId,
            questionPreview: question.substring(0, 100) + '...',
            enableTaskExecution,
            mode: 'supreme-ai-local'
        });
        try {
            // Gather contextual memory and insights
            const contextPack = await _memoryengine.supremeMemory.getContextForResponse(userId, question);
            // Detect and execute tasks immediately if task execution is enabled
            let taskExecutionResult = null;
            if (enableTaskExecution) {
                _logger.logger.info('Task execution enabled - attempting intelligent execution', {
                    userId,
                    question
                });
                taskExecutionResult = await _intelligentexecutionengine.intelligentExecutionEngine.executeUserRequest(question, userId);
                if (taskExecutionResult && taskExecutionResult.success) {
                    _logger.logger.info('Task successfully executed', {
                        userId,
                        message: taskExecutionResult.message,
                        details: taskExecutionResult.details
                    });
                } else if (taskExecutionResult && !taskExecutionResult.success) {
                    _logger.logger.info('Task execution failed', {
                        userId,
                        error: taskExecutionResult.error
                    });
                } else {
                    _logger.logger.info('No executable task detected', {
                        userId,
                        question
                    });
                }
            }
            // Build enhanced MarketSage-specific context
            const marketSageContext = this.buildMarketSageContext(question);
            // Enhance context with any relevant information from memory
            const enhancedContext = `${marketSageContext}

📊 **User Context & History**:
${contextPack.contextSummary || 'New user - building context...'}

${contextPack.recentActivity ? `**Recent Activity**: ${contextPack.recentActivity}` : ''}

${taskExecutionResult && taskExecutionResult.success ? `\n🚀 **TASK EXECUTION COMPLETED**: ${taskExecutionResult.message}\n` : ''}

**Current Mode**: Supreme-AI Local Engine (${enableTaskExecution ? 'Task Execution ENABLED' : 'Advisory Mode'})
**Response Style**: Professional African fintech expert with ${enableTaskExecution ? 'task execution capabilities' : 'advisory insights'}
**Focus**: Deliver actionable business solutions for African financial markets with technical precision.
      `;
            // Try to get context from RAG system
            let ragContext = '';
            try {
                const ragResult = await (0, _ragengine.ragQuery)(question, 3);
                ragContext = ragResult.contextDocs.map((doc)=>doc.text).join('\n\n');
            } catch (ragError) {
                _logger.logger.warn('RAG query failed, continuing without external context', {
                    error: ragError instanceof Error ? ragError.message : String(ragError)
                });
            }
            // Prepare conversation history for AI
            const conversationHistory = contextPack.conversationHistory?.messages?.slice(-6).map((msg)=>({
                    role: msg.role,
                    content: msg.content
                })) || [];
            // Get AI instance and generate response
            const aiInstance = (0, _openaiintegration.getAIInstance)();
            // Generate intelligent response using OpenAI + Supreme-AI context
            const aiResponse = await aiInstance.generateResponse(question, enhancedContext + (ragContext ? `\n\nRelevant Documentation:\n${ragContext}` : ''), conversationHistory, {
                model: process.env.OPENAI_MODEL || 'gpt-4o-mini',
                temperature: 0.7,
                maxTokens: 1000
            });
            // Store this interaction in memory for future context
            try {
                await _memoryengine.supremeMemory.storeMemory({
                    type: 'conversation',
                    userId,
                    content: `Q: ${question}\nA: ${aiResponse.answer}`,
                    metadata: {
                        confidence: 0.9,
                        source: 'openai-supreme-hybrid',
                        taskExecuted: taskExecutionResult ? true : false,
                        usage: aiResponse.usage,
                        mode: enableTaskExecution ? 'execution' : 'advisory'
                    },
                    importance: 0.8,
                    tags: [
                        'qa',
                        'chat',
                        'marketsage-help',
                        'openai-powered',
                        enableTaskExecution ? 'task-execution' : 'advisory'
                    ]
                });
            } catch (memoryError) {
                _logger.logger.warn('Failed to store memory, continuing without it', {
                    error: memoryError instanceof Error ? memoryError.message : String(memoryError)
                });
            }
            return {
                success: true,
                timestamp: new Date(),
                taskType: 'question',
                data: {
                    answer: aiResponse.answer,
                    sources: ragContext ? [
                        'MarketSage Documentation',
                        'OpenAI Intelligence'
                    ] : [
                        'OpenAI Intelligence'
                    ],
                    memoryContext: contextPack.contextSummary,
                    marketSageContext: marketSageContext,
                    conversationHistory: conversationHistory.length,
                    taskExecution: taskExecutionResult || null,
                    aiModel: 'openai-supreme-hybrid',
                    mode: enableTaskExecution ? 'execution-enabled' : 'advisory-mode'
                },
                confidence: taskExecutionResult ? 0.98 : 0.95,
                debug: {
                    hasRAGContext: ragContext.length > 0,
                    conversationLength: conversationHistory.length,
                    aiModel: 'openai-integrated',
                    taskExecuted: taskExecutionResult ? true : false,
                    mode: enableTaskExecution ? 'execution-enabled' : 'advisory-mode'
                }
            };
        } catch (error) {
            _logger.logger.error('Supreme-AI v3 question handler failed', {
                error: error instanceof Error ? error.message : String(error)
            });
            // Fallback to basic helpful response
            return {
                success: true,
                timestamp: new Date(),
                taskType: 'question',
                data: {
                    answer: "🤖 **MarketSage AI - Technical Issue**\n\nI'm currently experiencing technical difficulties and cannot process your request at this time. Our AI systems are designed for high reliability, but temporary issues can occur.\n\nPlease try your question again, or visit our help documentation in the MarketSage dashboard for immediate assistance.\n\nOur technical team is continuously monitoring system performance to ensure optimal service delivery.",
                    sources: [],
                    memoryContext: '',
                    marketSageContext: '',
                    mode: 'fallback'
                },
                confidence: 0.3,
                debug: {
                    error: error instanceof Error ? error.message : 'Unknown error',
                    mode: 'fallback'
                }
            };
        }
    }
    // 2. Task Execution Handler
    async handleTaskExecution(task) {
        const { userId, question, taskType } = task;
        const startTime = Date.now();
        _logger.logger.info('Supreme-AI v3 handling task execution with safety boundaries', {
            userId,
            taskType,
            questionPreview: question.substring(0, 100) + '...',
            mode: 'safe-task-execution'
        });
        // Get user role for monitoring
        let userRole = 'UNKNOWN';
        try {
            const user = await _prisma.default.user.findUnique({
                where: {
                    id: userId
                },
                select: {
                    role: true
                }
            });
            userRole = user?.role || 'UNKNOWN';
        } catch (error) {
            _logger.logger.warn('Failed to get user role for monitoring', {
                userId,
                error: error instanceof Error ? error.message : String(error)
            });
        }
        try {
            // Use the safe execution engine for enhanced safety
            const safeRequest = {
                userId,
                operation: question,
                parameters: {
                    taskType
                },
                context: {
                    source: 'ai_agent',
                    priority: 'medium',
                    timeoutMs: 30000,
                    maxRetries: 2,
                    dryRun: false
                }
            };
            const safeResult = await _aisafeexecutionengine.aiSafeExecutionEngine.executeSafely(safeRequest);
            // Handle safe execution results
            if (!safeResult.success) {
                if (safeResult.approvalRequired) {
                    return {
                        success: false,
                        timestamp: new Date(),
                        taskType: 'task',
                        data: {
                            answer: `⏳ **Approval Required**\n\n**Operation**: ${question}\n**Risk Level**: ${safeResult.riskLevel.toUpperCase()}\n**Approval ID**: ${safeResult.approvalId}\n\n**Safety Assessment**:\n${safeResult.warnings.join('\n')}\n\nOperation will proceed once approved by an administrator.`,
                            requiresApproval: true,
                            approvalId: safeResult.approvalId,
                            riskLevel: safeResult.riskLevel,
                            executionId: safeResult.executionId
                        },
                        confidence: safeResult.confidence,
                        debug: {
                            safeExecution: true,
                            approvalRequired: true,
                            executionId: safeResult.executionId
                        }
                    };
                }
                if (safeResult.safetyBlocked) {
                    return {
                        success: false,
                        timestamp: new Date(),
                        taskType: 'task',
                        data: {
                            answer: `🚫 **Operation Blocked by Safety System**\n\n**Operation**: ${question}\n**Risk Level**: ${safeResult.riskLevel.toUpperCase()}\n\n**Safety Concerns**:\n${safeResult.warnings.join('\n')}\n\n**Recommendations**:\n${safeResult.recommendations.join('\n')}`,
                            safetyBlocked: true,
                            riskLevel: safeResult.riskLevel,
                            executionId: safeResult.executionId
                        },
                        confidence: 0.9,
                        debug: {
                            safeExecution: true,
                            safetyBlocked: true,
                            executionId: safeResult.executionId
                        }
                    };
                }
                // Other execution errors
                return {
                    success: false,
                    timestamp: new Date(),
                    taskType: 'task',
                    data: {
                        answer: `❌ **Task Execution Failed**\n\n**Error**: ${safeResult.error}\n\n**Recommendations**:\n${safeResult.recommendations.join('\n')}`,
                        executionFailed: true,
                        executionId: safeResult.executionId
                    },
                    confidence: 0.5,
                    debug: {
                        safeExecution: true,
                        executionFailed: true,
                        executionId: safeResult.executionId
                    }
                };
            }
            // Safe execution successful
            _logger.logger.info('Safe task execution successful', {
                userId,
                executionId: safeResult.executionId,
                riskLevel: safeResult.riskLevel,
                executionTime: safeResult.executionTime
            });
            return {
                success: true,
                timestamp: new Date(),
                taskType: 'task',
                data: {
                    answer: `✅ **Task Executed Successfully with Safety Verification**\n\n${safeResult.result ? JSON.stringify(safeResult.result, null, 2) : 'Operation completed successfully'}\n\n**Execution Details**:\n- Risk Level: ${safeResult.riskLevel}\n- Execution Time: ${safeResult.executionTime}ms\n- Execution ID: ${safeResult.executionId}${safeResult.rollbackId ? `\n- Rollback Available: ${safeResult.rollbackId}` : ''}${safeResult.warnings.length > 0 ? `\n\n**Warnings**:\n${safeResult.warnings.join('\n')}` : ''}`,
                    taskExecution: safeResult.result,
                    executionMode: 'safe-ai-execution',
                    confidence: safeResult.confidence,
                    executionId: safeResult.executionId,
                    riskLevel: safeResult.riskLevel,
                    rollbackId: safeResult.rollbackId
                },
                confidence: safeResult.confidence,
                debug: {
                    safeExecution: true,
                    taskExecuted: true,
                    executionMode: 'safe-ai-execution',
                    executionId: safeResult.executionId,
                    riskLevel: safeResult.riskLevel,
                    executionTime: safeResult.executionTime
                }
            };
            // Fallback to original execution logic if safe execution is not available
            let executionResult;
            try {
                // Get user context for execution
                const user = await _prisma.default.user.findUnique({
                    where: {
                        id: userId
                    },
                    include: {
                        organization: true
                    }
                });
                // Build enhanced context for NLP parsing
                const commandContext = {
                    userId,
                    businessContext: {
                        industry: user?.organization?.industry || 'fintech',
                        market: user?.organization?.country || 'Nigeria',
                        organizationSize: 'medium',
                        currentGoals: []
                    },
                    userPreferences: {
                        communicationStyle: 'professional',
                        riskTolerance: 'medium',
                        automationLevel: 'high'
                    }
                };
                // Try enhanced NLP parser for complex commands first
                const nlpResult = await _enhancednlpparser.enhancedNLPParser.parseCommand(question, commandContext);
                if (nlpResult.success && nlpResult.command) {
                    // Handle complex multi-step commands
                    if (nlpResult.command.complexity !== 'simple') {
                        _logger.logger.info('Complex command detected, using enhanced execution', {
                            userId,
                            complexity: nlpResult.command.complexity,
                            stepCount: nlpResult.command.executionPlan.length,
                            riskLevel: nlpResult.command.riskLevel
                        });
                        // Check if approval is needed for high-risk operations
                        if (nlpResult.command.riskLevel === 'high' || nlpResult.command.riskLevel === 'critical') {
                            return {
                                success: true,
                                timestamp: new Date(),
                                taskType: 'task',
                                data: {
                                    answer: `⚠️ **High-Risk Operation Detected**\n\n${nlpResult.command.executionPlan.map((step, i)=>`${i + 1}. ${step.description}`).join('\n')}\n\n**Risk Level**: ${nlpResult.command.riskLevel.toUpperCase()}\n**Estimated Time**: ${Math.ceil(nlpResult.command.estimatedTime / 60)} minutes\n\nThis operation requires approval before execution. Please confirm if you want to proceed.`,
                                    requiresApproval: true,
                                    executionPlan: nlpResult.command.executionPlan,
                                    riskLevel: nlpResult.command.riskLevel
                                },
                                confidence: nlpResult.command.confidence,
                                debug: {
                                    enhancedNLP: true,
                                    complexity: nlpResult.command.complexity,
                                    stepCount: nlpResult.command.executionPlan.length
                                }
                            };
                        }
                        // Execute each step in the plan with safety checks
                        const stepResults = [];
                        for (const step of nlpResult.command.executionPlan){
                            try {
                                // Create operation request for safety assessment
                                const operationRequest = {
                                    id: `op_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
                                    userId,
                                    userRole: user?.role || 'USER',
                                    operationType: `${step.action.toLowerCase()}_${step.entity.toLowerCase()}`,
                                    entity: step.entity,
                                    action: step.action,
                                    parameters: step.parameters,
                                    affectedRecords: step.parameters.affectedRecords || 1,
                                    context: {
                                        sessionId: `session_${Date.now()}`,
                                        timestamp: new Date(),
                                        ipAddress: 'system',
                                        userAgent: 'Supreme-AI-v3'
                                    }
                                };
                                // Assess safety of the operation
                                const safetyAssessment = await _safetyapprovalsystem.safetyApprovalSystem.assessOperation(operationRequest);
                                // Add operation to history for rate limiting
                                _safetyapprovalsystem.safetyApprovalSystem.addToHistory(operationRequest);
                                // If operation cannot proceed due to safety concerns
                                if (!safetyAssessment.canProceed) {
                                    if (safetyAssessment.requiredApprovals.length > 0) {
                                        // Request approval
                                        const approvalRequest = await _safetyapprovalsystem.safetyApprovalSystem.requestApproval(operationRequest, safetyAssessment, `Multi-step operation: ${step.description}`);
                                        return {
                                            success: false,
                                            timestamp: new Date(),
                                            taskType: 'task',
                                            data: {
                                                answer: `⚠️ **Step ${step.order} requires approval**\n\n**Step**: ${step.description}\n**Risk Level**: ${safetyAssessment.riskLevel.toUpperCase()}\n**Approval ID**: ${approvalRequest.id}\n\n**Safety Concerns**:\n${safetyAssessment.warnings.join('\n')}\n\nPlease approve this operation to continue.`,
                                                requiresApproval: true,
                                                approvalId: approvalRequest.id,
                                                safetyAssessment,
                                                stepResults
                                            },
                                            confidence: 0.8,
                                            debug: {
                                                safetyBlocked: true,
                                                riskLevel: safetyAssessment.riskLevel,
                                                stepNumber: step.order
                                            }
                                        };
                                    } else {
                                        return {
                                            success: false,
                                            timestamp: new Date(),
                                            taskType: 'task',
                                            data: {
                                                answer: `🚫 **Step ${step.order} blocked by safety system**\n\n**Step**: ${step.description}\n**Restrictions**:\n${safetyAssessment.restrictions.join('\n')}\n\n**Warnings**:\n${safetyAssessment.warnings.join('\n')}`,
                                                safetyBlocked: true,
                                                safetyAssessment,
                                                stepResults
                                            },
                                            confidence: 0.8,
                                            debug: {
                                                safetyBlocked: true,
                                                riskLevel: safetyAssessment.riskLevel,
                                                stepNumber: step.order
                                            }
                                        };
                                    }
                                }
                                // If step requires approval but is already approved, proceed
                                if (safetyAssessment.requiredApprovals.length > 0) {
                                    const isApproved = await _safetyapprovalsystem.safetyApprovalSystem.isOperationApproved(operationRequest.id);
                                    if (!isApproved) {
                                        const approvalRequest = await _safetyapprovalsystem.safetyApprovalSystem.requestApproval(operationRequest, safetyAssessment, `Multi-step operation: ${step.description}`);
                                        return {
                                            success: false,
                                            timestamp: new Date(),
                                            taskType: 'task',
                                            data: {
                                                answer: `⏳ **Approval required for step ${step.order}**\n\n**Step**: ${step.description}\n**Risk Level**: ${safetyAssessment.riskLevel.toUpperCase()}\n**Approval ID**: ${approvalRequest.id}\n\nOperation will proceed once approved.`,
                                                requiresApproval: true,
                                                approvalId: approvalRequest.id,
                                                safetyAssessment
                                            },
                                            confidence: 0.8
                                        };
                                    }
                                }
                                const stepContext = {
                                    userId,
                                    userRole: user?.role || 'USER',
                                    organizationId: user?.organizationId || ''
                                };
                                const stepResult = await _universaltaskexecutionengine.universalTaskExecutionEngine.execute({
                                    operationId: `${step.action.toLowerCase()}_${step.entity.toLowerCase()}`,
                                    params: step.parameters
                                }, stepContext);
                                stepResults.push({
                                    step: step.description,
                                    success: stepResult.success,
                                    message: stepResult.message,
                                    data: stepResult.data
                                });
                                if (!stepResult.success) {
                                    return {
                                        success: false,
                                        timestamp: new Date(),
                                        taskType: 'task',
                                        data: {
                                            answer: `❌ **Multi-step execution failed at step ${step.order}**\n\n**Failed Step**: ${step.description}\n**Error**: ${stepResult.error}\n\n**Completed Steps**:\n${stepResults.slice(0, -1).map((r)=>`✅ ${r.step}`).join('\n')}`,
                                            partialResults: stepResults,
                                            failedAt: step.order
                                        },
                                        confidence: 0.8,
                                        debug: {
                                            enhancedNLP: true,
                                            multiStepExecution: true,
                                            failedStep: step.order
                                        }
                                    };
                                }
                            } catch (stepError) {
                                _logger.logger.error('Step execution failed', {
                                    step: step.description,
                                    error: stepError instanceof Error ? stepError.message : String(stepError)
                                });
                            }
                        }
                        return {
                            success: true,
                            timestamp: new Date(),
                            taskType: 'task',
                            data: {
                                answer: `✅ **Multi-step operation completed successfully!**\n\n${stepResults.map((r)=>`✅ ${r.step}: ${r.message}`).join('\n')}\n\n**Total steps executed**: ${stepResults.length}\n**Estimated time**: ${Math.ceil(nlpResult.command.estimatedTime / 60)} minutes`,
                                stepResults,
                                executionPlan: nlpResult.command.executionPlan
                            },
                            confidence: nlpResult.command.confidence,
                            debug: {
                                enhancedNLP: true,
                                multiStepExecution: true,
                                complexity: nlpResult.command.complexity,
                                stepCount: stepResults.length
                            }
                        };
                    }
                }
                // For simple commands or if enhanced NLP fails, fall back to universal engine
                const context = {
                    userId,
                    userRole: user?.role || 'USER',
                    organizationId: user?.organizationId || ''
                };
                // Try universal execution engine
                executionResult = await _universaltaskexecutionengine.universalTaskExecutionEngine.execute(question, context);
                // If universal engine finds an operation, use its result
                if (executionResult.operationId !== 'unknown') {
                    if (executionResult.success) {
                        const executionTime = executionResult.executionTime || Date.now() - startTime;
                        _logger.logger.info('Universal task execution successful', {
                            userId,
                            operationId: executionResult.operationId,
                            category: executionResult.category,
                            message: executionResult.message,
                            executionTime
                        });
                        // Record successful execution
                        (0, _taskexecutionmonitor.recordTaskExecution)(executionResult.operationId, userId, userRole, true, executionTime);
                        return {
                            success: true,
                            timestamp: new Date(),
                            taskType: 'task',
                            data: {
                                answer: `✅ **Task Executed Successfully**\n\n${executionResult.message}${executionResult.data ? '\n\n**Details:**\n' + JSON.stringify(executionResult.data, null, 2) : ''}`,
                                taskExecution: executionResult,
                                executionMode: 'universal-supreme-ai',
                                confidence: 0.98
                            },
                            confidence: 0.98,
                            debug: {
                                taskExecuted: true,
                                executionMode: 'universal-supreme-ai',
                                operationId: executionResult.operationId,
                                category: executionResult.category,
                                executionTime
                            }
                        };
                    } else {
                        // Handle universal execution failures
                        const executionTime = executionResult.executionTime || Date.now() - startTime;
                        _logger.logger.warn('Universal task execution failed', {
                            userId,
                            operationId: executionResult.operationId,
                            error: executionResult.error,
                            message: executionResult.message
                        });
                        // Record failed execution
                        (0, _taskexecutionmonitor.recordTaskExecution)(executionResult.operationId, userId, userRole, false, executionTime, 'execution_error', executionResult.error);
                        return {
                            success: true,
                            timestamp: new Date(),
                            taskType: 'task',
                            data: {
                                answer: `⚠️ **Task Execution Issue**\n\n${executionResult.message}${executionResult.suggestions ? '\n\n**Suggestions:**\n' + executionResult.suggestions.join('\n') : ''}`,
                                taskExecution: executionResult,
                                executionMode: 'universal-supreme-ai',
                                suggestions: executionResult.suggestions
                            },
                            confidence: 0.7,
                            debug: {
                                taskExecuted: false,
                                executionMode: 'universal-supreme-ai',
                                operationId: executionResult.operationId,
                                error: executionResult.error,
                                executionTime
                            }
                        };
                    }
                }
            } catch (universalError) {
                _logger.logger.warn('Universal execution engine error, falling back to intelligent engine', {
                    error: universalError instanceof Error ? universalError.message : String(universalError)
                });
            }
            // Fall back to intelligent execution engine if universal engine doesn't find a match
            const taskExecutionResult = await _intelligentexecutionengine.intelligentExecutionEngine.executeUserRequest(question, userId);
            if (taskExecutionResult && taskExecutionResult.success) {
                const executionTime = Date.now() - startTime;
                _logger.logger.info('Task execution successful', {
                    userId,
                    message: taskExecutionResult.message,
                    details: taskExecutionResult.details,
                    executionTime
                });
                // Record successful execution
                (0, _taskexecutionmonitor.recordTaskExecution)(taskType || 'intelligent_execution', userId, userRole, true, executionTime);
                return {
                    success: true,
                    timestamp: new Date(),
                    taskType: 'task',
                    data: {
                        answer: `✅ **Task Executed Successfully**\n\n${taskExecutionResult.message}`,
                        taskExecution: taskExecutionResult,
                        executionMode: 'intelligent-supreme-ai',
                        confidence: 0.98
                    },
                    confidence: 0.98,
                    debug: {
                        taskExecuted: true,
                        executionMode: 'intelligent-supreme-ai',
                        taskDetails: taskExecutionResult.details,
                        executionTime
                    }
                };
            } else if (taskExecutionResult && !taskExecutionResult.success) {
                // Handle intelligent execution failures
                const executionTime = Date.now() - startTime;
                _logger.logger.warn('Task execution failed with error', {
                    userId,
                    error: taskExecutionResult.error,
                    message: taskExecutionResult.message
                });
                // Record failed execution
                (0, _taskexecutionmonitor.recordTaskExecution)(taskType || 'intelligent_execution', userId, userRole, false, executionTime, 'execution_error', taskExecutionResult.error);
                return {
                    success: true,
                    timestamp: new Date(),
                    taskType: 'task',
                    data: {
                        answer: `⚠️ **Task Execution Issue**\n\n${taskExecutionResult.message}`,
                        taskExecution: taskExecutionResult,
                        executionMode: 'intelligent-supreme-ai',
                        suggestions: taskExecutionResult.suggestions
                    },
                    confidence: 0.7,
                    debug: {
                        taskExecuted: false,
                        executionMode: 'intelligent-supreme-ai',
                        error: taskExecutionResult.error,
                        executionTime
                    }
                };
            } else {
                const executionTime = Date.now() - startTime;
                // Record no task detected (not a failure, just no executable task found)
                (0, _taskexecutionmonitor.recordTaskExecution)('no_task_detected', userId, userRole, true, executionTime);
                // No specific task detected, provide guidance
                return {
                    success: true,
                    timestamp: new Date(),
                    taskType: 'task',
                    data: {
                        answer: `🤖 **Task Guidance**\n\nI didn't detect a specific executable task in your request. I can help you with:\n\n• **Assign tasks**: "Assign urgent task to marketing team"\n• **Create workflows**: "Create lead nurturing workflow"\n• **Build campaigns**: "Create email campaign for new users"\n• **Setup automation**: "Setup onboarding automation"\n\nPlease be more specific about what you'd like me to execute.`,
                        taskExecution: null,
                        executionMode: 'advisory',
                        suggestions: [
                            'Try: "Assign campaign optimization task to team lead"',
                            'Try: "Create customer onboarding workflow"',
                            'Try: "Setup retention campaign for inactive users"'
                        ]
                    },
                    confidence: 0.7,
                    debug: {
                        taskDetected: false,
                        mode: 'advisory',
                        executionTime
                    }
                };
            }
        } catch (error) {
            const executionTime = Date.now() - startTime;
            const errorMessage = error instanceof Error ? error.message : 'Unknown error';
            _logger.logger.error('Task execution failed', {
                error: errorMessage,
                userId,
                taskType,
                executionTime,
                stack: error instanceof Error ? error.stack : undefined
            });
            // Record failed execution
            (0, _taskexecutionmonitor.recordTaskExecution)(taskType || 'unknown', userId, userRole, false, executionTime, 'execution_error', errorMessage);
            return {
                success: false,
                timestamp: new Date(),
                taskType: 'task',
                data: {
                    answer: `❌ **Task Execution Failed**\n\nI encountered an error while trying to execute your task. This might be due to:\n\n• Database connectivity issues\n• Missing permissions\n• Invalid task parameters\n\nPlease try again or contact support if the issue persists.`,
                    error: errorMessage,
                    executionMode: 'error'
                },
                confidence: 0.1,
                debug: {
                    error: errorMessage,
                    mode: 'error',
                    executionTime
                }
            };
        }
    }
    // 3. Analysis Handler
    async handleAnalyze(task) {
        const { userId, question } = task;
        const startTime = Date.now();
        _logger.logger.info('Supreme-AI v3 handling analysis request', {
            userId,
            questionPreview: question.substring(0, 100) + '...',
            mode: 'business-intelligence-analysis'
        });
        try {
            // Use intelligent execution engine for business intelligence analysis
            _logger.logger.info('Executing business intelligence analysis', {
                userId,
                question
            });
            const analysisResult = await _intelligentexecutionengine.intelligentExecutionEngine.executeUserRequest(question, userId);
            if (analysisResult && analysisResult.success) {
                const executionTime = Date.now() - startTime;
                _logger.logger.info('Business intelligence analysis completed successfully', {
                    userId,
                    message: analysisResult.message,
                    executionTime
                });
                return {
                    success: true,
                    timestamp: new Date(),
                    taskType: 'analyze',
                    data: {
                        answer: analysisResult.message,
                        analysisData: analysisResult.data,
                        analysisType: 'business-intelligence',
                        mode: 'intelligent-execution',
                        suggestions: analysisResult.suggestions
                    },
                    confidence: 0.95,
                    debug: {
                        mode: 'business-intelligence-analysis',
                        executionTime,
                        dataType: analysisResult.data ? Object.keys(analysisResult.data).join(', ') : 'none'
                    }
                };
            } else if (analysisResult && !analysisResult.success) {
                // Analysis failed, fallback to AI explanation
                _logger.logger.warn('Business intelligence analysis failed, using AI fallback', {
                    userId,
                    error: analysisResult.error,
                    message: analysisResult.message
                });
                const aiInstance = (0, _openaiintegration.getAIInstance)();
                const fallbackContext = `The user asked: "${question}". Our business intelligence analysis failed with error: "${analysisResult.error}". Provide helpful guidance about what data might be needed or how to rephrase the query for better results.`;
                const aiResponse = await aiInstance.generateResponse(question, fallbackContext, [], {
                    model: process.env.OPENAI_MODEL || 'gpt-4o-mini',
                    temperature: 0.3,
                    maxTokens: 1000
                });
                return {
                    success: true,
                    timestamp: new Date(),
                    taskType: 'analyze',
                    data: {
                        answer: `⚠️ **Analysis Issue**\n\n${analysisResult.message}\n\n**Guidance:**\n${aiResponse.answer}`,
                        analysisType: 'fallback-guidance',
                        mode: 'ai-fallback',
                        suggestions: analysisResult.suggestions
                    },
                    confidence: 0.7,
                    debug: {
                        mode: 'fallback-analysis',
                        originalError: analysisResult.error
                    }
                };
            } else {
                // No analysis detected, use general AI response
                const analysisContext = `You are Supreme-AI's analytical engine. The user is asking for business intelligence or data analysis. Provide insights about what specific data or metrics would be helpful to answer their question: "${question}"`;
                const aiInstance = (0, _openaiintegration.getAIInstance)();
                const aiResponse = await aiInstance.generateResponse(question, analysisContext, [], {
                    model: process.env.OPENAI_MODEL || 'gpt-4o-mini',
                    temperature: 0.3,
                    maxTokens: 1000
                });
                return {
                    success: true,
                    timestamp: new Date(),
                    taskType: 'analyze',
                    data: {
                        answer: `📊 **Analysis Guidance**\n\n${aiResponse.answer}`,
                        analysisType: 'guidance',
                        mode: 'advisory'
                    },
                    confidence: 0.8,
                    debug: {
                        mode: 'analysis-guidance',
                        noDataDetected: true
                    }
                };
            }
        } catch (error) {
            const executionTime = Date.now() - startTime;
            _logger.logger.error('Analysis failed completely', {
                error: error instanceof Error ? error.message : String(error),
                userId,
                executionTime
            });
            return {
                success: false,
                timestamp: new Date(),
                taskType: 'analyze',
                data: {
                    answer: `❌ **Analysis Failed**\n\nUnable to complete the analysis due to a system error. Please try again with a more specific query.`,
                    error: error instanceof Error ? error.message : 'Unknown error'
                },
                confidence: 0.1,
                debug: {
                    error: error instanceof Error ? error.message : 'Unknown error',
                    mode: 'error'
                }
            };
        }
    }
    // Build MarketSage-specific context based on question
    buildMarketSageContext(question) {
        const lowerQuestion = question.toLowerCase();
        // African Fintech Knowledge Database
        const africanFintech = {
            businessPrinciples: [
                "Customer pain points must be deeply understood for effective solutions",
                "Scalable automation requires collaborative approaches and partnerships",
                "Successful workflows adapt to changing customer behaviors and market conditions",
                "Campaign effectiveness should be measured after completion with comprehensive metrics",
                "Long-term automation strategies focus on sustainable business growth"
            ],
            marketInsights: {
                nigeria: {
                    mobilePenetration: "95%",
                    preferredPayment: "bank_transfer_ussd",
                    peakHours: "10AM-2PM WAT, 6PM-9PM WAT",
                    culturalNote: "Respect for elders translates to trust in established financial institutions",
                    languages: [
                        "English",
                        "Hausa",
                        "Yoruba",
                        "Igbo"
                    ],
                    trustFactors: [
                        "social_proof",
                        "government_backing",
                        "community_endorsement"
                    ]
                },
                kenya: {
                    mobilePenetration: "98%",
                    preferredPayment: "mpesa_dominance",
                    peakHours: "9AM-1PM EAT, 5PM-8PM EAT",
                    culturalNote: "Harambee spirit - community collective action drives adoption",
                    languages: [
                        "Swahili",
                        "English"
                    ],
                    trustFactors: [
                        "peer_recommendations",
                        "mobile_first_design",
                        "instant_gratification"
                    ]
                },
                south_africa: {
                    mobilePenetration: "91%",
                    preferredPayment: "card_mobile_hybrid",
                    peakHours: "8AM-12PM SAST, 4PM-7PM SAST",
                    culturalNote: "Ubuntu philosophy - interconnectedness affects financial decisions",
                    languages: [
                        "English",
                        "Afrikaans",
                        "Zulu",
                        "Xhosa"
                    ],
                    trustFactors: [
                        "regulatory_compliance",
                        "transparency",
                        "multilingual_support"
                    ]
                },
                ghana: {
                    mobilePenetration: "89%",
                    preferredPayment: "mobile_money_banking",
                    peakHours: "9AM-1PM GMT, 5PM-8PM GMT",
                    culturalNote: "Sankofa wisdom - learn from past to build future financial habits",
                    languages: [
                        "English",
                        "Twi",
                        "Ga"
                    ],
                    trustFactors: [
                        "local_partnerships",
                        "gradual_adoption",
                        "educational_content"
                    ]
                }
            },
            fintechGuidance: {
                timing: {
                    "avoid_friday_afternoons": "Respect for weekend preparation in African culture",
                    "leverage_month_end": "Salary cycles drive highest engagement",
                    "ramadan_considerations": "Adjust messaging during religious periods",
                    "harvest_seasons": "Rural markets peak during agricultural cycles"
                },
                messaging: {
                    "use_respectful_tone": "Address customers with dignity - 'Dear valued customer' over 'Hey there'",
                    "include_family_context": "Financial decisions often involve extended family consultation",
                    "show_community_impact": "Highlight how the service benefits the community",
                    "provide_education": "Many users are new to digital finance - explain every step"
                },
                compliance: {
                    "know_your_customer": "KYC requirements vary significantly across African markets",
                    "data_protection": "GDPR compliance plus local data sovereignty laws",
                    "currency_regulations": "Cross-border payments require specific licensing",
                    "mobile_operator_partnerships": "Essential for SMS/USSD services"
                }
            }
        };
        // Get relevant business elements
        const businessPrinciple = africanFintech.businessPrinciples[Math.floor(Math.random() * africanFintech.businessPrinciples.length)];
        const marketContext = this.getRelevantMarketContext(lowerQuestion, africanFintech.marketInsights);
        const fintechGuidance = this.getRelevantFintechSecrets(lowerQuestion, africanFintech.fintechGuidance);
        let baseContext = `You are MarketSage AI, a professional fintech automation assistant specializing in African financial markets. You deliver clear, actionable solutions with technical expertise.

💼 **YOUR ROLE**:
Professional AI assistant that creates and executes fintech automation solutions. You provide data-driven insights and practical recommendations based on comprehensive knowledge of African financial ecosystems.

🎯 **CORE CAPABILITIES**:
- **Workflow Automation**: Design and deploy sophisticated business process automation
- **Market Intelligence**: Analyze customer behavior patterns across African financial markets
- **System Integration**: Execute real-time creation of workflows, campaigns, and customer segments
- **Regulatory Compliance**: Ensure all solutions meet African financial regulatory standards

🌍 **AFRICAN MARKET EXPERTISE**:
${marketContext}

📊 **FINTECH GUIDANCE**:
${fintechGuidance}

💡 **BUSINESS PRINCIPLE**: ${businessPrinciple}

🔧 **EXECUTION APPROACH**:
When users request automation, you take action:
- "create" → Build functional workflows with proper configuration
- "setup" → Configure systems with appropriate triggers and actions
- "build" → Develop complete automation solutions
- "generate" → Create targeted content and messaging
- "automate" → Deploy efficient, scalable processes

💬 **COMMUNICATION STYLE**:
- Be direct and professional
- Provide clear, actionable recommendations
- Reference specific African market insights when relevant
- Focus on practical business outcomes
- Confirm successful task completion

✅ **EXAMPLE RESPONSES**:
- "I'll create a customer onboarding workflow for Nigerian users that includes BVN verification and compliance checks..." *[creates actual workflow]*
- "Based on Kenyan market data, I recommend a WhatsApp-based retention campaign. Creating this now..." *[builds retention campaign]*
- "For South African customers, segmentation should consider mobile money usage patterns. Setting up these segments..." *[creates intelligent segments]*

🎯 **OBJECTIVE**:
Deliver professional, efficient automation solutions that drive business growth while respecting African market dynamics and regulatory requirements.`;
        // Add context-specific guidance
        if (lowerQuestion.includes('workflow') || lowerQuestion.includes('automation') || lowerQuestion.includes('create') || lowerQuestion.includes('setup') || lowerQuestion.includes('build')) {
            baseContext += `\n\n🔧 **AUTOMATION FOCUS**: Execute task creation with precision. Apply technical expertise to build robust, scalable automation solutions that meet business requirements.`;
        }
        if (lowerQuestion.includes('sample') || lowerQuestion.includes('example') || lowerQuestion.includes('demo')) {
            baseContext += `\n\n💼 **PRACTICAL DEMONSTRATION**: Provide working examples that showcase MarketSage automation capabilities with real business applications and measurable outcomes.`;
        }
        if (lowerQuestion.includes('email') || question.includes('campaign')) {
            baseContext += `\n\n📧 **COMMUNICATION STRATEGY**: Design email automations that respect African cultural values while achieving business objectives. Focus on appropriate timing, language, and messaging for maximum engagement.`;
        }
        if (lowerQuestion.includes('customer') || question.includes('segment')) {
            baseContext += `\n\n👥 **CUSTOMER INTELLIGENCE**: Implement customer segmentation strategies that consider family structures, community influence, and financial aspirations typical in African markets.`;
        }
        if (lowerQuestion.includes('analytics') || question.includes('performance')) {
            baseContext += `\n\n📊 **PERFORMANCE ANALYTICS**: Analyze data patterns to predict customer behavior and optimize business processes. Focus on actionable metrics that drive measurable improvements.`;
        }
        return baseContext + `\n\n🌍 **EXECUTION STANDARD**: You are MarketSage AI - a professional system that combines deep African market knowledge with advanced automation technology. Deliver precise, actionable solutions with confidence and technical excellence.`;
    }
    // Get relevant market context based on question
    getRelevantMarketContext(question, marketInsights) {
        let relevantMarkets = [];
        if (question.includes('nigeria') || question.includes('lagos') || question.includes('naira')) {
            relevantMarkets.push('nigeria');
        }
        if (question.includes('kenya') || question.includes('nairobi') || question.includes('mpesa')) {
            relevantMarkets.push('kenya');
        }
        if (question.includes('south africa') || question.includes('cape town') || question.includes('rand')) {
            relevantMarkets.push('south_africa');
        }
        if (question.includes('ghana') || question.includes('accra') || question.includes('cedi')) {
            relevantMarkets.push('ghana');
        }
        // Default to all major markets if none specified
        if (relevantMarkets.length === 0) {
            relevantMarkets = [
                'nigeria',
                'kenya',
                'south_africa'
            ];
        }
        let context = "**AFRICAN MARKET INTELLIGENCE**:\n";
        relevantMarkets.forEach((market)=>{
            const data = marketInsights[market];
            if (data) {
                context += `\n🏛️ **${market.toUpperCase()}**: ${data.culturalNote}\n`;
                context += `   📱 Mobile: ${data.mobilePenetration} | 💰 Payment: ${data.preferredPayment}\n`;
                context += `   🕐 Peak Hours: ${data.peakHours} | 🗣️ Languages: ${data.languages.join(', ')}\n`;
                context += `   🤝 Trust Factors: ${data.trustFactors.join(', ')}\n`;
            }
        });
        return context;
    }
    // Get relevant fintech secrets based on question context
    getRelevantFintechSecrets(question, fintechSecrets) {
        let secrets = "**FINTECH SECRETS OF THE ANCIENTS**:\n";
        if (question.includes('time') || question.includes('when') || question.includes('schedule')) {
            secrets += "\n⏰ **TIMING MASTERY**:\n";
            Object.entries(fintechSecrets.timing).forEach(([key, value])=>{
                secrets += `   • ${key.replace(/_/g, ' ')}: ${value}\n`;
            });
        }
        if (question.includes('message') || question.includes('content') || question.includes('email') || question.includes('sms')) {
            secrets += "\n💬 **MESSAGING WISDOM**:\n";
            Object.entries(fintechSecrets.messaging).forEach(([key, value])=>{
                secrets += `   • ${key.replace(/_/g, ' ')}: ${value}\n`;
            });
        }
        if (question.includes('compliance') || question.includes('regulation') || question.includes('legal')) {
            secrets += "\n⚖️ **COMPLIANCE KNOWLEDGE**:\n";
            Object.entries(fintechSecrets.compliance).forEach(([key, value])=>{
                secrets += `   • ${key.replace(/_/g, ' ')}: ${value}\n`;
            });
        }
        return secrets;
    }
    // Task execution methods - imported from execute-task API route
    async detectAndExecuteTask(question, userId) {
        try {
            const lowerQuestion = question.toLowerCase();
            // Enhanced task detection with more sophisticated patterns
            const taskPatterns = {
                'create_workflow': [
                    'create workflow',
                    'build workflow',
                    'make workflow',
                    'set up workflow',
                    'workflow creation',
                    'automate process',
                    'create automation',
                    'build automation'
                ],
                'setup_automation': [
                    'setup automation',
                    'create automation',
                    'build automation',
                    'automate',
                    'set up sequence',
                    'automation sequence',
                    'automated flow'
                ],
                'create_campaign': [
                    'create campaign',
                    'build campaign',
                    'campaign creation',
                    'email campaign',
                    'marketing campaign',
                    'launch campaign'
                ],
                'create_segment': [
                    'create segment',
                    'customer segment',
                    'segment customers',
                    'build segment',
                    'customer group',
                    'audience segment'
                ],
                'generate_content': [
                    'generate content',
                    'create content',
                    'write content',
                    'content creation',
                    'marketing content',
                    'email content'
                ],
                'assign_task': [
                    'assign task',
                    'create task',
                    'task assignment',
                    'give task',
                    'assign to team',
                    'delegate task'
                ],
                'setup_lead_nurturing': [
                    'lead nurturing',
                    'nurture leads',
                    'lead sequence',
                    'onboarding sequence',
                    'welcome series'
                ],
                'create_retention_campaign': [
                    'retention campaign',
                    'customer retention',
                    'churn prevention',
                    'win back',
                    'reactivation campaign'
                ],
                'create_onboarding': [
                    'onboarding',
                    'welcome automation',
                    'user onboarding',
                    'customer onboarding',
                    'new user flow'
                ],
                'whatsapp_automation': [
                    'whatsapp',
                    'whatsapp automation',
                    'wa automation',
                    'whatsapp campaign',
                    'whatsapp sequence'
                ],
                'sms_automation': [
                    'sms automation',
                    'sms campaign',
                    'text message',
                    'sms sequence',
                    'text automation'
                ],
                'cross_border_setup': [
                    'cross border',
                    'remittance',
                    'international transfer',
                    'multi currency',
                    'forex automation'
                ]
            };
            // Find matching task type with flexible pattern matching
            let detectedTaskType = null;
            let confidence = 0;
            // First try exact phrase matching
            for (const [taskType, patterns] of Object.entries(taskPatterns)){
                for (const pattern of patterns){
                    if (lowerQuestion.includes(pattern)) {
                        detectedTaskType = taskType;
                        confidence = 0.9;
                        break;
                    }
                }
                if (detectedTaskType) break;
            }
            // If no exact match, try flexible keyword matching for common cases
            if (!detectedTaskType) {
                // Task assignment patterns - flexible matching
                if (lowerQuestion.includes('assign') && lowerQuestion.includes('task') || lowerQuestion.includes('create') && lowerQuestion.includes('task') || lowerQuestion.includes('delegate') && lowerQuestion.includes('task') || lowerQuestion.includes('task assignment')) {
                    detectedTaskType = 'assign_task';
                    confidence = 0.8;
                } else if (lowerQuestion.includes('setup') && lowerQuestion.includes('automation') || lowerQuestion.includes('create') && lowerQuestion.includes('automation') || lowerQuestion.includes('build') && lowerQuestion.includes('automation')) {
                    detectedTaskType = 'setup_automation';
                    confidence = 0.8;
                } else if (lowerQuestion.includes('create') && lowerQuestion.includes('workflow') || lowerQuestion.includes('build') && lowerQuestion.includes('workflow') || lowerQuestion.includes('setup') && lowerQuestion.includes('workflow')) {
                    detectedTaskType = 'create_workflow';
                    confidence = 0.8;
                } else if (lowerQuestion.includes('create') && lowerQuestion.includes('campaign') || lowerQuestion.includes('build') && lowerQuestion.includes('campaign') || lowerQuestion.includes('launch') && lowerQuestion.includes('campaign')) {
                    detectedTaskType = 'create_campaign';
                    confidence = 0.8;
                } else if (lowerQuestion.includes('onboarding') || lowerQuestion.includes('welcome') && lowerQuestion.includes('automation')) {
                    detectedTaskType = 'create_onboarding';
                    confidence = 0.8;
                }
            }
            if (!detectedTaskType) {
                _logger.logger.info('No specific task detected, providing advisory response', {
                    question
                });
                return null;
            }
            _logger.logger.info('Task detected for execution', {
                taskType: detectedTaskType,
                confidence,
                question
            });
            // Extract intent and entities for sophisticated task execution
            const intent = this.analyzeUserIntent(lowerQuestion);
            const entities = this.extractEntities(lowerQuestion);
            // Execute the detected task with enhanced logic
            let executionResult;
            switch(detectedTaskType){
                case 'create_workflow':
                    executionResult = await this.createAdvancedWorkflow(intent, entities, userId);
                    break;
                case 'setup_automation':
                    executionResult = await this.createComprehensiveAutomation(intent, entities, userId);
                    break;
                case 'create_campaign':
                    executionResult = await this.createIntelligentCampaign(intent, entities, userId);
                    break;
                case 'create_segment':
                    executionResult = await this.createAdvancedSegment(intent, entities, userId);
                    break;
                case 'generate_content':
                    executionResult = await this.generateCulturalContent(intent, entities, userId);
                    break;
                case 'assign_task':
                    executionResult = await this.createAndAssignTeamTask(intent, entities, userId);
                    break;
                case 'create_onboarding':
                    executionResult = await this.createOnboardingAutomation(intent, entities, userId);
                    break;
                case 'whatsapp_automation':
                    executionResult = await this.createWhatsAppAutomation(intent, entities, userId);
                    break;
                case 'sms_automation':
                    executionResult = await this.createSMSAutomation(intent, entities, userId);
                    break;
                case 'cross_border_setup':
                    executionResult = await this.createCrossBorderAutomation(intent, entities, userId);
                    break;
                default:
                    // Fallback to existing methods
                    const params = this.extractTaskParameters(lowerQuestion, entities);
                    executionResult = await this.executeTaskViaAPI(detectedTaskType, params, userId);
            }
            if (executionResult && executionResult.success !== false) {
                // Create AI task record for tracking
                await this.createAITaskRecord(detectedTaskType, {
                    intent,
                    entities
                }, executionResult, userId);
                return {
                    summary: `Supreme-AI has manifested your vision! ${executionResult.message || executionResult.summary || 'Task completed successfully'}`,
                    details: executionResult
                };
            }
            return null;
        } catch (error) {
            const errorMessage = error instanceof Error ? error.message : String(error);
            const errorStack = error instanceof Error ? error.stack : undefined;
            _logger.logger.error('Task execution failed', {
                error: errorMessage,
                question,
                userId,
                stack: errorStack,
                timestamp: new Date().toISOString()
            });
            // Return detailed error information for debugging
            return {
                summary: 'Task execution encountered an error',
                details: {
                    error: errorMessage,
                    type: 'execution_error',
                    question,
                    suggestion: 'Please try rephrasing your request or contact support if the issue persists.',
                    userFriendlyMessage: 'I encountered an issue while trying to execute your task. Please try again with a more specific request.'
                }
            };
        }
    }
    // Enhanced workflow creation with African fintech intelligence
    async createAdvancedWorkflow(intent, entities, userId) {
        const workflowType = intent.objective || entities.type || 'engagement';
        const targetMarket = entities.country || entities.market || 'multi_market';
        const industry = entities.industry || 'fintech';
        // Generate African fintech-specific workflow
        const workflow = await _prisma.default.workflow.create({
            data: {
                name: `Supreme-AI ${workflowType.charAt(0).toUpperCase() + workflowType.slice(1)} Workflow`,
                description: `Culturally intelligent ${workflowType} workflow optimized for ${targetMarket} fintech market`,
                status: 'ACTIVE',
                definition: JSON.stringify({
                    type: workflowType,
                    market: targetMarket,
                    industry,
                    aiGenerated: true,
                    culturalIntelligence: this.getMarketIntelligence(targetMarket),
                    nodes: this.generateAdvancedWorkflowNodes(workflowType, targetMarket),
                    edges: this.generateIntelligentWorkflowEdges(),
                    triggers: this.generateContextualTriggers(workflowType, targetMarket),
                    compliance: this.getComplianceRequirements(targetMarket),
                    timing: this.getOptimalTimingStrategy(targetMarket),
                    personalization: this.getPersonalizationRules(targetMarket)
                }),
                createdById: userId
            }
        });
        // Create workflow nodes with African fintech intelligence
        const nodes = this.generateAdvancedWorkflowNodes(workflowType, targetMarket);
        for(let i = 0; i < nodes.length; i++){
            await _prisma.default.workflowNode.create({
                data: {
                    workflowId: workflow.id,
                    type: nodes[i].type,
                    name: nodes[i].name,
                    config: JSON.stringify({
                        ...nodes[i].config,
                        culturalContext: this.getMarketIntelligence(targetMarket),
                        complianceNotes: this.getComplianceRequirements(targetMarket),
                        localizations: this.getLocalizationData(targetMarket)
                    }),
                    positionX: 200 + i * 180,
                    positionY: 150 + Math.floor(i / 3) * 120
                }
            });
        }
        // Create intelligent triggers
        const triggers = this.generateContextualTriggers(workflowType, targetMarket);
        for (const trigger of triggers){
            await _prisma.default.workflowTrigger.create({
                data: {
                    workflowId: workflow.id,
                    type: trigger.type,
                    config: JSON.stringify({
                        ...trigger.config,
                        marketOptimization: this.getMarketOptimization(targetMarket),
                        culturalConsiderations: this.getCulturalConsiderations(targetMarket)
                    })
                }
            });
        }
        return {
            success: true,
            workflowId: workflow.id,
            message: `🔮 Behold! I have woven a magnificent ${workflowType} workflow optimized for ${targetMarket} fintech wisdom. The automation spirits now dance through ${nodes.length} intelligent steps, each honoring the cultural essence of African finance.`,
            details: {
                workflowName: workflow.name,
                nodesCreated: nodes.length,
                triggersSetup: triggers.length,
                marketOptimization: targetMarket,
                culturalIntelligence: true,
                complianceReady: true
            },
            nextSteps: [
                `Review the culturally intelligent workflow configuration`,
                `Customize content for ${targetMarket} market preferences`,
                `Activate advanced triggers when ready to begin automation`,
                `Monitor performance with African fintech KPIs`
            ]
        };
    }
    // Enhanced automation creation with staff assignment
    async createComprehensiveAutomation(intent, entities, userId) {
        const automationType = intent.type || entities.type || 'onboarding';
        const targetAudience = intent.audience || entities.audience || 'new_customers';
        const complexity = intent.complexity || entities.complexity || 'advanced';
        // Create the main workflow
        const workflow = await _prisma.default.workflow.create({
            data: {
                name: `Supreme-AI ${automationType.replace('_', ' ').toUpperCase()} Automation`,
                description: `Advanced ${automationType} automation with African fintech intelligence for ${targetAudience}`,
                status: 'ACTIVE',
                definition: JSON.stringify({
                    automationType,
                    targetAudience,
                    complexity,
                    aiGenerated: true,
                    marketIntelligence: this.getComprehensiveMarketData(),
                    nodes: this.generateContextualAutomationNodes(automationType, targetAudience),
                    culturalAdaptations: this.getCulturalAdaptations(targetAudience),
                    complianceFramework: this.getComplianceFramework(),
                    performanceMetrics: this.getAfricanFintechKPIs()
                }),
                createdById: userId
            }
        });
        // Create team tasks for workflow management
        const teamMembers = await this.findAppropriateTeamMembers();
        const managementTasks = [];
        // Assign workflow setup task
        if (teamMembers.length > 0) {
            const setupTask = await _prisma.default.task.create({
                data: {
                    title: `Setup ${automationType} Automation Workflow`,
                    description: `Review and customize the AI-generated ${automationType} automation. Verify cultural adaptations for target market.`,
                    status: 'IN_PROGRESS',
                    priority: 'HIGH',
                    creatorId: userId,
                    assigneeId: teamMembers[0].id,
                    dueDate: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000) // 2 days
                }
            });
            managementTasks.push(setupTask);
            // Assign content review task if we have content team
            const contentTeam = teamMembers.filter((m)=>m.role === 'USER'); // Assume USER role handles content
            if (contentTeam.length > 0) {
                const contentTask = await _prisma.default.task.create({
                    data: {
                        title: `Review Automation Content for Cultural Accuracy`,
                        description: `Review all email/SMS content in the ${automationType} automation for cultural sensitivity and market appropriateness.`,
                        status: 'TODO',
                        priority: 'MEDIUM',
                        creatorId: userId,
                        assigneeId: contentTeam[0].id,
                        dueDate: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000) // 3 days
                    }
                });
                managementTasks.push(contentTask);
            }
        }
        // Generate comprehensive automation steps
        const automationSteps = this.generateContextualAutomationNodes(automationType, targetAudience);
        return {
            summary: `🌟 The ancient automation spirits have been awakened! I have crafted a sophisticated ${automationType} automation that flows like the great rivers of Africa - persistent, nourishing, and always finding its way to the sea of customer success.`,
            details: {
                workflowId: workflow.id,
                automationType,
                targetAudience,
                stepsGenerated: automationSteps.length,
                tasksAssigned: managementTasks.length,
                teamMembers: teamMembers.map((m)=>({
                        id: m.id,
                        name: m.name,
                        role: m.role
                    })),
                culturalIntelligence: true,
                marketOptimization: 'multi_african_markets',
                complianceReady: true,
                estimatedSetupTime: '2-3 days',
                expectedLift: this.calculateExpectedPerformanceLift(automationType, targetAudience)
            }
        };
    }
    // Create intelligent campaign with African fintech focus
    async createIntelligentCampaign(intent, entities, userId) {
        const campaignType = intent.type || entities.type || 'email';
        const objective = intent.objective || entities.objective || 'engagement';
        const targetMarket = entities.market || entities.country || 'nigeria';
        // Create email campaign
        const campaign = await _prisma.default.emailCampaign.create({
            data: {
                name: `Supreme-AI ${objective.charAt(0).toUpperCase() + objective.slice(1)} Campaign`,
                subject: this.generateCulturallyIntelligentSubject(objective, targetMarket),
                content: this.generateCulturallyIntelligentContent(campaignType, objective, targetMarket),
                status: 'DRAFT',
                scheduledAt: new Date(Date.now() + 24 * 60 * 60 * 1000),
                createdBy: userId
            }
        });
        // Create supporting workflow
        const workflow = await _prisma.default.workflow.create({
            data: {
                name: `${campaign.name} - Automation Flow`,
                description: `Intelligent automation flow supporting the ${objective} campaign for ${targetMarket} market`,
                status: 'ACTIVE',
                definition: JSON.stringify({
                    campaignId: campaign.id,
                    objective,
                    targetMarket,
                    culturalIntelligence: this.getMarketIntelligence(targetMarket),
                    personalization: this.getPersonalizationRules(targetMarket),
                    followUpSequence: this.generateFollowUpSequence(objective, targetMarket)
                }),
                createdById: userId
            }
        });
        return {
            success: true,
            campaignId: campaign.id,
            workflowId: workflow.id,
            message: `🚀 Magnificent! I have crafted a ${objective} campaign that speaks to the heart of ${targetMarket} fintech customers. Like a master drummer who knows the rhythm of each village, this campaign resonates with cultural wisdom.`,
            details: {
                campaignName: campaign.name,
                campaignType,
                objective,
                targetMarket,
                subject: campaign.subject,
                culturalIntelligence: true,
                workflowSupport: true,
                estimatedReach: this.estimateCampaignReach(targetMarket),
                culturalNotes: this.getCampaignCulturalNotes(targetMarket),
                complianceStatus: 'ready'
            }
        };
    }
    // Generate culturally intelligent content
    async generateCulturalContent(intent, entities, userId) {
        const contentType = intent.type || entities.type || 'email';
        const purpose = intent.purpose || entities.purpose || 'engagement';
        const market = entities.market || entities.country || 'multi_market';
        const content = this.createCulturallyIntelligentContent(contentType, purpose, market);
        // Store content for future use
        const template = await _prisma.default.emailTemplate.create({
            data: {
                name: `Supreme-AI ${purpose} ${contentType} - ${market}`,
                subject: content.subject,
                content: content.body,
                createdBy: userId
            }
        });
        return {
            success: true,
            templateId: template.id,
            message: `📝 Behold! I have woven words that carry the wisdom of ${market} ancestors. This content speaks not just to minds, but to hearts - honoring cultural values while driving modern fintech engagement.`,
            details: {
                contentType,
                purpose,
                targetMarket: market,
                subject: content.subject,
                culturalElements: content.culturalElements,
                localizations: content.localizations,
                complianceNotes: content.complianceNotes,
                estimatedEngagement: this.estimateContentEngagement(contentType, purpose, market)
            }
        };
    }
    // Create onboarding automation with African fintech best practices
    async createOnboardingAutomation(intent, entities, userId) {
        const market = entities.market || entities.country || 'nigeria';
        const userType = intent.userType || entities.userType || 'new_customer';
        const workflow = await _prisma.default.workflow.create({
            data: {
                name: `Supreme-AI ${market.charAt(0).toUpperCase() + market.slice(1)} Onboarding`,
                description: `Culturally intelligent onboarding automation for ${market} fintech customers`,
                status: 'ACTIVE',
                definition: JSON.stringify({
                    market,
                    userType,
                    steps: this.generateOnboardingSteps(market, userType),
                    culturalConsiderations: this.getOnboardingCulturalNotes(market),
                    complianceRequirements: this.getOnboardingCompliance(market),
                    trustBuilders: this.getTrustBuildingElements(market),
                    educationalContent: this.getEducationalContent(market)
                }),
                createdById: userId
            }
        });
        // Create onboarding sequence nodes
        const steps = this.generateOnboardingSteps(market, userType);
        for(let i = 0; i < steps.length; i++){
            await _prisma.default.workflowNode.create({
                data: {
                    workflowId: workflow.id,
                    type: steps[i].type,
                    name: steps[i].name,
                    config: JSON.stringify(steps[i].config),
                    positionX: 200 + i * 200,
                    positionY: 150
                }
            });
        }
        return {
            success: true,
            workflowId: workflow.id,
            message: `🎯 The sacred onboarding ritual is complete! I have crafted a journey that welcomes ${market} customers like honored guests, building trust through cultural understanding and fintech education.`,
            details: {
                workflowName: workflow.name,
                targetMarket: market,
                userType,
                stepsCreated: steps.length,
                culturalIntelligence: true,
                complianceReady: true,
                trustBuilders: this.getTrustBuildingElements(market),
                estimatedCompletionRate: this.estimateOnboardingCompletion(market, userType)
            }
        };
    }
    // WhatsApp automation with African market focus
    async createWhatsAppAutomation(intent, entities, userId) {
        const market = entities.market || entities.country || 'nigeria';
        const purpose = intent.purpose || entities.purpose || 'engagement';
        // Create WhatsApp campaign
        const waCampaign = await _prisma.default.whatsAppCampaign.create({
            data: {
                name: `Supreme-AI ${market} WhatsApp ${purpose}`,
                message: this.generateWhatsAppMessage(purpose, market),
                status: 'DRAFT',
                scheduledAt: new Date(Date.now() + 2 * 60 * 60 * 1000),
                createdBy: userId
            }
        });
        // Create WhatsApp template
        const waTemplate = await _prisma.default.whatsAppTemplate.create({
            data: {
                name: `Supreme-AI ${market} ${purpose} Template`,
                content: this.generateWhatsAppTemplate(purpose, market),
                status: 'PENDING_APPROVAL',
                createdBy: userId
            }
        });
        return {
            success: true,
            campaignId: waCampaign.id,
            templateId: waTemplate.id,
            message: `📱 Magnificent! I have crafted WhatsApp automation that speaks the language of ${market} hearts. Like the village town crier who knows exactly how to capture attention, this automation resonates with local wisdom.`,
            details: {
                campaignName: waCampaign.name,
                templateName: waTemplate.name,
                targetMarket: market,
                purpose,
                culturalElements: this.getWhatsAppCulturalElements(market),
                complianceStatus: 'pending_approval',
                estimatedEngagement: this.estimateWhatsAppEngagement(purpose, market),
                localizedGreeting: this.getLocalizedGreeting(market)
            }
        };
    }
    // SMS automation with carrier optimization
    async createSMSAutomation(intent, entities, userId) {
        const market = entities.market || entities.country || 'kenya';
        const purpose = intent.purpose || entities.purpose || 'transaction_alert';
        // Create SMS campaign
        const smsCampaign = await _prisma.default.sMSCampaign.create({
            data: {
                name: `Supreme-AI ${market} SMS ${purpose}`,
                message: this.generateSMSMessage(purpose, market),
                status: 'DRAFT',
                scheduledAt: new Date(Date.now() + 30 * 60 * 1000),
                createdBy: userId
            }
        });
        // Create SMS template
        const smsTemplate = await _prisma.default.sMSTemplate.create({
            data: {
                name: `Supreme-AI ${market} ${purpose} SMS`,
                content: this.generateSMSTemplate(purpose, market),
                createdBy: userId
            }
        });
        return {
            success: true,
            campaignId: smsCampaign.id,
            templateId: smsTemplate.id,
            message: `📱 Excellent! I have forged SMS automation that cuts through the noise like a master blacksmith's blade. Optimized for ${market} carriers and cultural preferences.`,
            details: {
                campaignName: smsCampaign.name,
                templateName: smsTemplate.name,
                targetMarket: market,
                purpose,
                carrierOptimization: this.getSMSCarrierOptimization(market),
                characterLimit: this.getSMSCharacterLimit(market),
                deliveryTime: this.getOptimalSMSTiming(market),
                estimatedDelivery: '95%+'
            }
        };
    }
    // Cross-border automation for remittances
    async createCrossBorderAutomation(intent, entities, userId) {
        const sourceMark = entities.sourceMarket || 'south_africa';
        const targetMarket = entities.targetMarket || 'zimbabwe';
        const purpose = intent.purpose || 'remittance_flow';
        const workflow = await _prisma.default.workflow.create({
            data: {
                name: `Supreme-AI Cross-Border ${sourceMark}-${targetMarket}`,
                description: `Intelligent cross-border automation for ${sourceMark} to ${targetMarket} financial flows`,
                status: 'ACTIVE',
                definition: JSON.stringify({
                    sourceMark,
                    targetMarket,
                    purpose,
                    complianceFramework: this.getCrossBorderCompliance(sourceMark, targetMarket),
                    currencyHandling: this.getCurrencyHandling(sourceMark, targetMarket),
                    regulatoryRequirements: this.getRegulatoryRequirements(sourceMark, targetMarket),
                    partnerIntegrations: this.getPartnerIntegrations(sourceMark, targetMarket)
                }),
                createdById: userId
            }
        });
        return {
            success: true,
            workflowId: workflow.id,
            message: `🌍 Behold! I have woven a cross-border bridge that spans continents like the ancient trade routes. This automation honors the regulatory spirits of both ${sourceMark} and ${targetMarket}.`,
            details: {
                workflowName: workflow.name,
                sourceMark,
                targetMarket,
                purpose,
                complianceReady: true,
                regulatoryAlignment: true,
                currencySupport: this.getCurrencyPairs(sourceMark, targetMarket),
                estimatedProcessingTime: this.estimateCrossBorderTime(sourceMark, targetMarket)
            }
        };
    }
    // Helper methods for enhanced functionality
    async findAppropriateTeamMembers() {
        return await _prisma.default.user.findMany({
            where: {
                isActive: true,
                role: {
                    in: [
                        'ADMIN',
                        'IT_ADMIN',
                        'USER'
                    ]
                }
            },
            select: {
                id: true,
                name: true,
                email: true,
                role: true
            },
            take: 5
        });
    }
    calculateExpectedPerformanceLift(automationType, targetAudience) {
        // AI-driven performance predictions based on automation type
        const liftMap = {
            'onboarding': '25-40% completion rate improvement',
            'retention': '15-30% churn reduction',
            'engagement': '35-50% interaction increase',
            'nurturing': '20-35% conversion uplift',
            'welcome': '40-60% activation improvement'
        };
        return liftMap[automationType] || '20-30% general performance improvement';
    }
    generateContextualAutomationNodes(automationType, targetAudience) {
        // Generate intelligent automation nodes based on type and audience
        const baseNodes = [
            {
                type: 'TRIGGER',
                name: 'Smart Trigger',
                config: {
                    trigger: automationType,
                    audience: targetAudience
                }
            },
            {
                type: 'CONDITION',
                name: 'Cultural Intelligence Check',
                config: {
                    culturalValidation: true,
                    marketContext: targetAudience
                }
            },
            {
                type: 'ACTION',
                name: 'Intelligent Action',
                config: {
                    action: automationType,
                    personalization: true
                }
            },
            {
                type: 'DELAY',
                name: 'Optimal Timing',
                config: {
                    delay: this.getOptimalDelay(automationType),
                    reasoning: 'cultural_timing'
                }
            }
        ];
        return baseNodes;
    }
    getOptimalDelay(automationType) {
        // Return optimal delays in minutes based on automation type
        const delayMap = {
            'onboarding': 60,
            'welcome': 30,
            'engagement': 1440,
            'retention': 4320,
            'nurturing': 10080 // 7 days
        };
        return delayMap[automationType] || 60;
    }
    getComprehensiveMarketData() {
        return {
            markets: [
                'nigeria',
                'kenya',
                'south_africa',
                'ghana'
            ],
            insights: 'African fintech market intelligence',
            culturalFactors: 'Ubuntu, Harambee, Community trust',
            mobilePenetration: '90%+',
            paymentPreferences: 'Mobile-first, trust-based'
        };
    }
    getCulturalAdaptations(targetAudience) {
        return {
            greetings: this.getLocalizedGreeting(targetAudience),
            timing: this.getOptimalTimingStrategy(targetAudience),
            messaging: this.getCulturalMessaging(targetAudience),
            trust: this.getTrustBuildingElements(targetAudience)
        };
    }
    getComplianceFramework() {
        return {
            dataProtection: 'GDPR + Local requirements',
            financialRegulation: 'Central bank compliance',
            crossBorder: 'Multi-jurisdiction awareness',
            privacy: 'Consent-based processing'
        };
    }
    getAfricanFintechKPIs() {
        return {
            activation: 'Time to first transaction',
            engagement: 'Monthly active usage',
            retention: 'Churn rate by cohort',
            satisfaction: 'Net Promoter Score',
            trust: 'Recommendation rate'
        };
    }
    // Create AI task record for tracking what was actually executed
    async createAITaskRecord(taskType, parameters, result, userId) {
        try {
            const task = await _prisma.default.task.create({
                data: {
                    title: `Supreme-AI: ${this.formatTaskTitle(taskType)}`,
                    description: `AI-executed task: ${taskType}\n\nParameters: ${JSON.stringify(parameters, null, 2)}\n\nResult: ${result.message || 'Task completed successfully'}`,
                    status: 'COMPLETED',
                    priority: 'MEDIUM',
                    creatorId: userId,
                    assigneeId: userId
                }
            });
            return task;
        } catch (error) {
            _logger.logger.warn('Failed to create AI task record', {
                error: error instanceof Error ? error.message : String(error),
                taskType,
                userId
            });
            return null;
        }
    }
    // Helper method to format task titles
    formatTaskTitle(taskType) {
        const titleMap = {
            'create_campaign_workflow': 'Created Campaign Workflow',
            'setup_automation_sequence': 'Set Up Automation Sequence',
            'create_customer_segment': 'Created Customer Segment',
            'generate_marketing_content': 'Generated Marketing Content',
            'configure_lead_nurturing': 'Configured Lead Nurturing',
            'setup_retention_campaign': 'Set Up Retention Campaign',
            'create_team_tasks': 'Created Team Tasks',
            'assign_workflow_task': 'Assigned Workflow Task',
            'create_marketing_campaign': 'Created Marketing Campaign'
        };
        return titleMap[taskType] || taskType.replace(/_/g, ' ').replace(/\b\w/g, (l)=>l.toUpperCase());
    }
    // Generate campaign subject lines
    generateCampaignSubject(objective, audience) {
        const subjectMap = {
            'engagement': audience.includes('nigeria') ? '🇳🇬 Boost Your Fintech Success in Nigeria' : '🚀 Maximize Your African Fintech Potential',
            'onboarding': '👋 Welcome to the Future of African Finance',
            'retention': '💰 We Miss You! Special Fintech Insights Inside',
            'conversion': '🎯 Transform Your Business with Smart Automation',
            'nurturing': '🌱 Grow Your Fintech Success with MarketSage'
        };
        return subjectMap[objective] || '📈 MarketSage: Your African Fintech Growth Partner';
    }
    // Generate campaign content based on type and objective
    generateCampaignContent(type, objective, audience) {
        if (type === 'sms') {
            return `Hi {{firstName}}! MarketSage here. Ready to boost your fintech success? Check out our latest insights: {{link}}. Reply STOP to opt out.`;
        }
        if (type === 'whatsapp') {
            return `🌟 Hello {{firstName}}!\n\nYour MarketSage automation is ready to transform your fintech marketing.\n\n{{actionButton}}\n\nBest regards,\nMarketSage Team`;
        }
        // Default email content
        return this.generateContextualContent(type, objective, audience).content || `Hello {{firstName}},\n\nYour MarketSage ${objective} campaign is now active.\n\nBest regards,\nThe MarketSage Team`;
    }
    // Add missing helper methods
    analyzeUserIntent(question) {
        const lowerQuestion = question.toLowerCase();
        return {
            type: this.detectIntentType(lowerQuestion),
            objective: this.detectObjective(lowerQuestion),
            audience: this.detectAudience(lowerQuestion),
            complexity: this.detectComplexity(lowerQuestion),
            urgency: this.detectUrgency(lowerQuestion),
            task: this.detectTaskType(lowerQuestion),
            priority: this.detectPriority(lowerQuestion),
            assignee: this.detectAssignee(lowerQuestion),
            userType: this.detectUserType(lowerQuestion),
            purpose: this.detectPurpose(lowerQuestion)
        };
    }
    extractEntities(question) {
        const lowerQuestion = question.toLowerCase();
        return {
            type: this.extractEntityType(lowerQuestion),
            market: this.extractMarket(lowerQuestion),
            country: this.extractCountry(lowerQuestion),
            industry: this.extractIndustry(lowerQuestion),
            criteria: this.extractCriteria(lowerQuestion),
            audience: this.extractAudience(lowerQuestion),
            task: this.extractTask(lowerQuestion),
            priority: this.extractPriority(lowerQuestion),
            assignee: this.extractAssignee(lowerQuestion),
            userType: this.extractUserType(lowerQuestion),
            purpose: this.extractPurpose(lowerQuestion),
            sourceMarket: this.extractSourceMarket(lowerQuestion),
            targetMarket: this.extractTargetMarket(lowerQuestion),
            complexity: this.extractComplexity(lowerQuestion)
        };
    }
    extractTaskParameters(question, entities) {
        return {
            name: entities.name || this.generateDefaultName(question),
            type: entities.type || 'general',
            objective: entities.objective || 'engagement',
            targetAudience: entities.audience || 'all_customers',
            market: entities.market || 'multi_market',
            channels: entities.channels || [
                'email'
            ],
            duration: entities.duration || 30,
            priority: entities.priority || 'MEDIUM'
        };
    }
    // Enhanced segment creation with African fintech intelligence
    async createAdvancedSegment(intent, entities, userId) {
        const segmentType = intent.type || entities.type || 'behavioral';
        const criteria = intent.criteria || entities.criteria || 'engagement_based';
        const market = entities.market || entities.country || 'multi_market';
        // Generate intelligent segment criteria
        const segmentCriteria = this.generateAdvancedSegmentCriteria(segmentType, criteria, market);
        const segment = await _prisma.default.segment.create({
            data: {
                name: `Supreme-AI ${segmentType.charAt(0).toUpperCase() + segmentType.slice(1)} Segment`,
                description: `Culturally intelligent ${segmentType} segment for ${market} fintech market with advanced behavioral analysis`,
                criteria: JSON.stringify({
                    ...segmentCriteria,
                    aiGenerated: true,
                    culturalIntelligence: this.getSegmentCulturalIntelligence(market),
                    behavioralTriggers: this.getBehavioralTriggers(segmentType),
                    marketContext: this.getMarketContext(market),
                    complianceConsiderations: this.getSegmentCompliance(market)
                }),
                createdBy: userId
            }
        });
        return {
            success: true,
            segmentId: segment.id,
            message: `🎯 Behold! I have crafted a segment that sees into the very soul of your ${market} customers. Like the wise griot who knows each villager's story, this segment understands behavioral patterns, cultural nuances, and financial rhythms.`,
            details: {
                segmentName: segment.name,
                segmentType,
                targetMarket: market,
                criteria: segmentCriteria,
                culturalIntelligence: true,
                estimatedSize: this.estimateSegmentSize(segmentCriteria),
                recommendedCampaigns: this.getRecommendedCampaigns(segmentType, market),
                culturalNotes: this.getSegmentCulturalNotes(market)
            }
        };
    }
    // Create and assign team tasks with African fintech context
    async createAndAssignTeamTask(intent, entities, userId) {
        try {
            // Validate input parameters
            if (!userId) {
                throw new Error('User ID is required for task creation');
            }
            // Verify the creator exists and is active
            const creator = await _prisma.default.user.findUnique({
                where: {
                    id: userId
                },
                select: {
                    id: true,
                    role: true,
                    isActive: true,
                    name: true
                }
            });
            if (!creator || !creator.isActive) {
                throw new Error('Creator user not found or inactive');
            }
            const taskType = intent.task || entities.task || 'general_task';
            const priority = intent.priority || entities.priority || 'MEDIUM';
            const assigneeRole = intent.assignee || entities.assignee || 'ADMIN';
            // Validate priority value
            const validPriorities = [
                'LOW',
                'MEDIUM',
                'HIGH',
                'URGENT'
            ];
            const normalizedPriority = validPriorities.includes(priority.toUpperCase()) ? priority.toUpperCase() : 'MEDIUM';
            // Find appropriate team member with more specific criteria
            const assignee = await _prisma.default.user.findFirst({
                where: {
                    role: {
                        in: [
                            'ADMIN',
                            'IT_ADMIN',
                            'SUPER_ADMIN'
                        ]
                    },
                    isActive: true,
                    id: {
                        not: userId
                    } // Don't assign to creator unless no other option
                },
                orderBy: {
                    lastLogin: 'desc' // Prefer recently active users
                }
            });
            if (!assignee) {
                // Fallback: allow self-assignment if no other admin is available
                const selfAssignee = await _prisma.default.user.findUnique({
                    where: {
                        id: userId
                    },
                    select: {
                        id: true,
                        name: true,
                        role: true
                    }
                });
                if (!selfAssignee || ![
                    'ADMIN',
                    'IT_ADMIN',
                    'SUPER_ADMIN'
                ].includes(selfAssignee.role)) {
                    return {
                        success: false,
                        message: `No active admin team members available for task assignment. Current user (${creator.role}) does not have assignment privileges.`,
                        suggestion: 'Please contact an administrator to assign this task, or upgrade your role permissions.',
                        details: {
                            userRole: creator.role,
                            requiredRoles: [
                                'ADMIN',
                                'IT_ADMIN',
                                'SUPER_ADMIN'
                            ],
                            availableActions: [
                                'Contact admin',
                                'Request role upgrade'
                            ]
                        }
                    };
                }
            }
            const finalAssignee = assignee || creator;
            // Create contextual task with African fintech wisdom
            const task = await _prisma.default.task.create({
                data: {
                    title: this.generateAfricanFintechTaskTitle(taskType, intent),
                    description: this.generateAfricanFintechTaskDescription(taskType, intent, entities),
                    status: 'TODO',
                    priority: normalizedPriority,
                    creatorId: userId,
                    assigneeId: finalAssignee.id,
                    dueDate: new Date(Date.now() + this.calculateTaskDuration(taskType) * 24 * 60 * 60 * 1000)
                }
            });
            // Create task comment with AI guidance (with error handling)
            try {
                await _prisma.default.taskComment.create({
                    data: {
                        taskId: task.id,
                        createdById: userId,
                        content: `🤖 **AI Guidance**: ${this.generateTaskGuidance(taskType, intent)}`
                    }
                });
            } catch (commentError) {
                // Log the error but don't fail the task creation
                _logger.logger.warn('Failed to create task comment, but task was created successfully', {
                    taskId: task.id,
                    error: commentError instanceof Error ? commentError.message : String(commentError)
                });
            }
            return {
                success: true,
                taskId: task.id,
                message: `✅ Task assigned successfully! I have created "${task.title}" and assigned it to ${finalAssignee.name}.`,
                details: {
                    taskTitle: task.title,
                    assigneeName: finalAssignee.name,
                    assigneeRole: finalAssignee.role,
                    priority: task.priority,
                    dueDate: task.dueDate,
                    guidance: this.generateTaskGuidance(taskType, intent),
                    estimatedDuration: this.calculateTaskDuration(taskType),
                    selfAssigned: finalAssignee.id === userId
                }
            };
        } catch (error) {
            _logger.logger.error('Failed to create and assign team task', {
                error: error instanceof Error ? error.message : String(error),
                userId,
                taskType: intent.task || entities.task,
                stack: error instanceof Error ? error.stack : undefined
            });
            return {
                success: false,
                message: 'Failed to create task due to a system error.',
                error: error instanceof Error ? error.message : 'Unknown error occurred',
                suggestion: 'Please try again. If the problem persists, contact system administrator.',
                details: {
                    errorType: 'database_error',
                    userId,
                    timestamp: new Date().toISOString()
                }
            };
        }
    }
    // Helper methods for task creation
    generateAfricanFintechTaskTitle(taskType, intent) {
        const urgency = intent.urgency || 'normal';
        const market = intent.market || intent.audience || 'multi-market';
        switch(taskType){
            case 'optimization_task':
                return `${urgency === 'urgent' ? 'URGENT: ' : ''}Campaign Optimization - ${market.charAt(0).toUpperCase() + market.slice(1)} Market`;
            case 'review_task':
                return `${urgency === 'urgent' ? 'URGENT: ' : ''}Review and Analysis - ${intent.subject || 'Performance Metrics'}`;
            case 'setup_task':
                return `${urgency === 'urgent' ? 'URGENT: ' : ''}System Setup - ${intent.subject || 'New Configuration'}`;
            case 'creation_task':
                return `${urgency === 'urgent' ? 'URGENT: ' : ''}Create ${intent.subject || 'New Asset'} - ${market} Focus`;
            default:
                return `${urgency === 'urgent' ? 'URGENT: ' : ''}Task Assignment - ${intent.subject || 'General Task'}`;
        }
    }
    generateAfricanFintechTaskDescription(taskType, intent, entities) {
        const market = intent.market || entities.market || 'African markets';
        const priority = intent.priority || 'MEDIUM';
        const baseDescription = `**Task Type**: ${taskType.replace('_', ' ').toUpperCase()}\n**Market Focus**: ${market}\n**Priority**: ${priority}\n\n`;
        switch(taskType){
            case 'optimization_task':
                return baseDescription + `**Objective**: Optimize campaign performance based on current metrics and market insights.\n\n**Key Actions Required**:\n- Review current campaign performance metrics\n- Identify key areas for optimization based on engagement rates and conversion data\n- Implement A/B testing for messaging and creative elements\n- Prepare report with findings and recommendations\n- Ensure cultural relevance is considered in all adjustments\n\n**Market Context**: Consider ${market} customer behavior patterns, payment preferences, and regulatory requirements.`;
            case 'review_task':
                return baseDescription + `**Objective**: Conduct thorough review and analysis of specified components.\n\n**Key Actions Required**:\n- Analyze current performance and metrics\n- Identify areas for improvement\n- Document findings and recommendations\n- Provide actionable next steps\n\n**Market Context**: Apply ${market} market insights and best practices.`;
            case 'setup_task':
                return baseDescription + `**Objective**: Set up and configure new system or process.\n\n**Key Actions Required**:\n- Configure system according to specifications\n- Test functionality and performance\n- Document setup process and configurations\n- Ensure compliance with local regulations\n\n**Market Context**: Optimize for ${market} requirements and preferences.`;
            default:
                return baseDescription + `**Objective**: Complete assigned task with focus on business outcomes.\n\n**Key Actions Required**:\n- Review task requirements and specifications\n- Execute task according to best practices\n- Document progress and results\n- Provide status updates as needed\n\n**Market Context**: Consider ${market} business environment and customer needs.`;
        }
    }
    generateTaskGuidance(taskType, intent) {
        switch(taskType){
            case 'optimization_task':
                return 'Focus on data-driven improvements. Consider cultural preferences and local market dynamics when making optimization decisions.';
            case 'review_task':
                return 'Conduct thorough analysis with attention to both quantitative metrics and qualitative insights from the local market.';
            case 'setup_task':
                return 'Ensure configuration meets both technical requirements and local business practices. Test thoroughly before deployment.';
            default:
                return 'Approach task with systematic methodology. Consider local market context and business objectives in all decisions.';
        }
    }
    calculateTaskDuration(taskType) {
        switch(taskType){
            case 'optimization_task':
                return 3; // 3 days
            case 'review_task':
                return 2; // 2 days
            case 'setup_task':
                return 5; // 5 days
            case 'creation_task':
                return 4; // 4 days
            default:
                return 3; // 3 days
        }
    }
    // Intent detection helper methods
    detectIntentType(question) {
        if (question.includes('workflow') || question.includes('automation')) return 'workflow';
        if (question.includes('campaign')) return 'campaign';
        if (question.includes('segment')) return 'segment';
        if (question.includes('content')) return 'content';
        if (question.includes('task')) return 'task';
        return 'general';
    }
    detectObjective(question) {
        if (question.includes('retention') || question.includes('churn')) return 'retention';
        if (question.includes('onboard') || question.includes('welcome')) return 'onboarding';
        if (question.includes('engagement') || question.includes('engage')) return 'engagement';
        if (question.includes('conversion') || question.includes('sales')) return 'conversion';
        return 'engagement';
    }
    detectAudience(question) {
        if (question.includes('new') || question.includes('signup')) return 'new_customers';
        if (question.includes('existing') || question.includes('current')) return 'existing_customers';
        if (question.includes('high value') || question.includes('vip')) return 'high_value_customers';
        if (question.includes('inactive') || question.includes('dormant')) return 'inactive_customers';
        return 'all_customers';
    }
    detectComplexity(question) {
        if (question.includes('simple') || question.includes('basic')) return 'basic';
        if (question.includes('advanced') || question.includes('sophisticated')) return 'advanced';
        if (question.includes('complex') || question.includes('comprehensive')) return 'complex';
        return 'standard';
    }
    detectUrgency(question) {
        if (question.includes('urgent') || question.includes('asap') || question.includes('immediately')) return 'urgent';
        if (question.includes('soon') || question.includes('quickly')) return 'high';
        return 'normal';
    }
    detectTaskType(question) {
        if (question.includes('review') || question.includes('check')) return 'review_task';
        if (question.includes('setup') || question.includes('configure')) return 'setup_task';
        if (question.includes('create') || question.includes('build')) return 'creation_task';
        if (question.includes('optimize') || question.includes('improve')) return 'optimization_task';
        return 'general_task';
    }
    detectPriority(question) {
        if (question.includes('critical') || question.includes('urgent')) return 'HIGH';
        if (question.includes('important') || question.includes('priority')) return 'MEDIUM';
        if (question.includes('low') || question.includes('minor')) return 'LOW';
        return 'MEDIUM';
    }
    detectAssignee(question) {
        if (question.includes('admin') || question.includes('administrator')) return 'ADMIN';
        if (question.includes('it') || question.includes('technical')) return 'IT_ADMIN';
        if (question.includes('team') || question.includes('user')) return 'USER';
        return 'ADMIN';
    }
    detectUserType(question) {
        if (question.includes('customer') || question.includes('client')) return 'customer';
        if (question.includes('user') || question.includes('member')) return 'user';
        if (question.includes('prospect') || question.includes('lead')) return 'prospect';
        return 'customer';
    }
    detectPurpose(question) {
        if (question.includes('welcome') || question.includes('onboard')) return 'welcome';
        if (question.includes('engagement') || question.includes('engage')) return 'engagement';
        if (question.includes('transaction') || question.includes('payment')) return 'transaction_alert';
        if (question.includes('retention') || question.includes('churn')) return 'retention';
        return 'engagement';
    }
    // Entity extraction helper methods
    extractEntityType(question) {
        if (question.includes('email')) return 'email';
        if (question.includes('sms') || question.includes('text')) return 'sms';
        if (question.includes('whatsapp') || question.includes('wa')) return 'whatsapp';
        if (question.includes('behavioral')) return 'behavioral';
        if (question.includes('demographic')) return 'demographic';
        return 'general';
    }
    extractMarket(question) {
        if (question.includes('nigeria') || question.includes('nigerian')) return 'nigeria';
        if (question.includes('kenya') || question.includes('kenyan')) return 'kenya';
        if (question.includes('south africa') || question.includes('south african')) return 'south_africa';
        if (question.includes('ghana') || question.includes('ghanaian')) return 'ghana';
        return 'multi_market';
    }
    extractCountry(question) {
        return this.extractMarket(question);
    }
    extractIndustry(question) {
        if (question.includes('fintech') || question.includes('financial')) return 'fintech';
        if (question.includes('banking') || question.includes('bank')) return 'banking';
        if (question.includes('payment') || question.includes('mobile money')) return 'payments';
        return 'fintech';
    }
    extractCriteria(question) {
        if (question.includes('engagement')) return 'engagement_based';
        if (question.includes('transaction')) return 'transaction_based';
        if (question.includes('location')) return 'location_based';
        if (question.includes('demographic')) return 'demographic_based';
        return 'behavioral_based';
    }
    extractAudience(question) {
        return this.detectAudience(question);
    }
    extractTask(question) {
        return this.detectTaskType(question);
    }
    extractPriority(question) {
        return this.detectPriority(question);
    }
    extractAssignee(question) {
        return this.detectAssignee(question);
    }
    extractUserType(question) {
        return this.detectUserType(question);
    }
    extractPurpose(question) {
        return this.detectPurpose(question);
    }
    extractSourceMarket(question) {
        if (question.includes('from nigeria')) return 'nigeria';
        if (question.includes('from kenya')) return 'kenya';
        if (question.includes('from south africa')) return 'south_africa';
        if (question.includes('from ghana')) return 'ghana';
        return 'south_africa'; // default for cross-border
    }
    extractTargetMarket(question) {
        if (question.includes('to nigeria')) return 'nigeria';
        if (question.includes('to kenya')) return 'kenya';
        if (question.includes('to zimbabwe')) return 'zimbabwe';
        if (question.includes('to ghana')) return 'ghana';
        return 'zimbabwe'; // default target
    }
    extractComplexity(question) {
        return this.detectComplexity(question);
    }
    generateDefaultName(question) {
        const words = question.split(' ').slice(0, 3);
        return words.map((w)=>w.charAt(0).toUpperCase() + w.slice(1)).join(' ');
    }
    // Additional helper methods for comprehensive functionality
    getMarketIntelligence(market) {
        const intelligence = {
            nigeria: {
                mobilePenetration: '95%',
                preferredChannels: [
                    'SMS',
                    'WhatsApp',
                    'USSD'
                ],
                trustFactors: [
                    'government_backing',
                    'social_proof'
                ],
                culturalNotes: 'Respect for elders, community validation important'
            },
            kenya: {
                mobilePenetration: '98%',
                preferredChannels: [
                    'M-Pesa',
                    'SMS',
                    'Mobile App'
                ],
                trustFactors: [
                    'peer_recommendations',
                    'mobile_first'
                ],
                culturalNotes: 'Harambee spirit, collective decision making'
            },
            south_africa: {
                mobilePenetration: '91%',
                preferredChannels: [
                    'Email',
                    'SMS',
                    'Banking App'
                ],
                trustFactors: [
                    'regulatory_compliance',
                    'transparency'
                ],
                culturalNotes: 'Ubuntu philosophy, multilingual preferences'
            },
            ghana: {
                mobilePenetration: '89%',
                preferredChannels: [
                    'Mobile Money',
                    'SMS',
                    'WhatsApp'
                ],
                trustFactors: [
                    'local_partnerships',
                    'educational_content'
                ],
                culturalNotes: 'Sankofa wisdom, gradual adoption'
            }
        };
        return intelligence[market] || intelligence.nigeria;
    }
    generateAdvancedWorkflowNodes(workflowType, targetMarket) {
        const baseNodes = [
            {
                type: 'TRIGGER',
                name: `${workflowType} Trigger`,
                config: {
                    triggerType: workflowType,
                    market: targetMarket,
                    culturalTiming: this.getOptimalTimingStrategy(targetMarket)
                }
            },
            {
                type: 'CONDITION',
                name: 'Cultural Intelligence Check',
                config: {
                    marketValidation: true,
                    culturalFactors: this.getMarketIntelligence(targetMarket)
                }
            },
            {
                type: 'ACTION',
                name: `Intelligent ${workflowType} Action`,
                config: {
                    actionType: workflowType,
                    personalization: true,
                    culturalAdaptation: this.getCulturalAdaptations(targetMarket)
                }
            },
            {
                type: 'DELAY',
                name: 'Optimal Timing Delay',
                config: {
                    delay: this.getOptimalDelay(workflowType),
                    reasoning: 'cultural_and_behavioral_optimization'
                }
            }
        ];
        // Add workflow-specific nodes
        if (workflowType === 'onboarding') {
            baseNodes.push({
                type: 'ACTION',
                name: 'Trust Building Step',
                config: {
                    actionType: 'trust_building',
                    elements: this.getTrustBuildingElements(targetMarket)
                }
            });
        }
        if (workflowType === 'retention') {
            baseNodes.push({
                type: 'CONDITION',
                name: 'Churn Risk Assessment',
                config: {
                    riskFactors: this.getChurnRiskFactors(targetMarket)
                }
            });
        }
        return baseNodes;
    }
    getOptimalTimingStrategy(market) {
        const timingStrategies = {
            nigeria: {
                optimalHours: [
                    '10-14',
                    '18-21'
                ],
                timezone: 'WAT',
                avoidDays: [
                    'Friday evening',
                    'Sunday morning'
                ],
                culturalEvents: [
                    'Ramadan',
                    'Eid',
                    'Christmas'
                ]
            },
            kenya: {
                optimalHours: [
                    '9-13',
                    '17-20'
                ],
                timezone: 'EAT',
                avoidDays: [
                    'Friday afternoon'
                ],
                culturalEvents: [
                    'Ramadan',
                    'Eid',
                    'Christmas',
                    'Diwali'
                ]
            },
            south_africa: {
                optimalHours: [
                    '8-12',
                    '16-19'
                ],
                timezone: 'SAST',
                avoidDays: [
                    'Public holidays'
                ],
                culturalEvents: [
                    'Heritage Day',
                    'Freedom Day',
                    'Christmas'
                ]
            },
            ghana: {
                optimalHours: [
                    '9-13',
                    '17-20'
                ],
                timezone: 'GMT',
                avoidDays: [
                    'Friday evening',
                    'Sunday'
                ],
                culturalEvents: [
                    'Independence Day',
                    'Christmas',
                    'Farmers Day'
                ]
            }
        };
        return timingStrategies[market] || timingStrategies.nigeria;
    }
    getTrustBuildingElements(market) {
        return ({
            nigeria: [
                'CBN_compliance',
                'local_testimonials',
                'community_endorsements'
            ],
            kenya: [
                'safaricom_partnership',
                'peer_recommendations',
                'mobile_first_design'
            ],
            south_africa: [
                'regulatory_badges',
                'transparency_reports',
                'multilingual_support'
            ],
            ghana: [
                'local_partnerships',
                'gradual_onboarding',
                'educational_content'
            ]
        })[market] || [
            'trust_badges',
            'testimonials',
            'security_assurance'
        ];
    }
    getChurnRiskFactors(market) {
        return ({
            nigeria: [
                'low_transaction_frequency',
                'competitor_switching',
                'trust_issues'
            ],
            kenya: [
                'mpesa_preference',
                'network_connectivity',
                'transaction_fees'
            ],
            south_africa: [
                'regulatory_concerns',
                'language_barriers',
                'economic_factors'
            ],
            ghana: [
                'mobile_money_preference',
                'network_reliability',
                'educational_gaps'
            ]
        })[market] || [
            'inactivity',
            'support_issues',
            'competitor_offers'
        ];
    }
    generateIntelligentWorkflowEdges() {
        return [
            {
                source: 'trigger',
                target: 'condition',
                condition: 'always'
            },
            {
                source: 'condition',
                target: 'action',
                condition: 'validated'
            },
            {
                source: 'action',
                target: 'delay',
                condition: 'completed'
            },
            {
                source: 'delay',
                target: 'next_step',
                condition: 'timer_expired'
            }
        ];
    }
    generateContextualTriggers(workflowType, targetMarket) {
        const triggerMap = {
            onboarding: {
                type: 'USER_SIGNUP',
                config: {
                    immediate: true
                }
            },
            engagement: {
                type: 'USER_INACTIVE',
                config: {
                    days: 7
                }
            },
            retention: {
                type: 'CHURN_RISK',
                config: {
                    threshold: 0.7
                }
            },
            conversion: {
                type: 'PAGE_VIEW',
                config: {
                    page: 'pricing'
                }
            }
        };
        const baseTrigger = triggerMap[workflowType] || triggerMap.engagement;
        return [
            {
                ...baseTrigger,
                config: {
                    ...baseTrigger.config,
                    marketOptimization: this.getMarketOptimization(targetMarket),
                    culturalAdaptation: true
                }
            }
        ];
    }
    getMarketOptimization(market) {
        return {
            localizedTiming: this.getOptimalTimingStrategy(market),
            culturalFactors: this.getMarketIntelligence(market),
            complianceRequirements: this.getComplianceRequirements(market)
        };
    }
    getComplianceRequirements(market) {
        return ({
            nigeria: [
                'CBN_guidelines',
                'data_protection',
                'financial_regulations'
            ],
            kenya: [
                'CBK_compliance',
                'data_protection',
                'mobile_money_regulations'
            ],
            south_africa: [
                'SARB_compliance',
                'POPIA',
                'financial_intelligence'
            ],
            ghana: [
                'BOG_regulations',
                'data_protection',
                'payment_system_regulations'
            ]
        })[market] || [
            'general_compliance',
            'data_protection'
        ];
    }
    getLocalizationData(market) {
        return ({
            nigeria: {
                languages: [
                    'English',
                    'Hausa',
                    'Yoruba',
                    'Igbo'
                ],
                currency: 'NGN'
            },
            kenya: {
                languages: [
                    'English',
                    'Swahili'
                ],
                currency: 'KES'
            },
            south_africa: {
                languages: [
                    'English',
                    'Afrikaans',
                    'Zulu'
                ],
                currency: 'ZAR'
            },
            ghana: {
                languages: [
                    'English',
                    'Twi'
                ],
                currency: 'GHS'
            }
        })[market] || {
            languages: [
                'English'
            ],
            currency: 'USD'
        };
    }
    getCulturalConsiderations(market) {
        return this.getMarketIntelligence(market);
    }
    generateAdvancedSegmentCriteria(segmentType, criteria, market) {
        const baseCriteria = {
            segmentType,
            criteria,
            market,
            rules: this.getSegmentRules(segmentType, criteria),
            culturalFactors: this.getMarketIntelligence(market),
            aiGenerated: true
        };
        return baseCriteria;
    }
    getSegmentRules(segmentType, criteria) {
        const rules = {
            behavioral: {
                engagement_based: [
                    'login_frequency > 5',
                    'transaction_count > 3'
                ],
                transaction_based: [
                    'total_volume > 1000',
                    'frequency > weekly'
                ]
            },
            demographic: {
                age_based: [
                    'age between 25-45',
                    'income > median'
                ],
                location_based: [
                    'urban areas',
                    'high mobile penetration'
                ]
            }
        };
        return rules[segmentType]?.[criteria] || [
            'default_rule'
        ];
    }
    async executeTaskViaAPI(taskType, parameters, userId) {
        // Fallback execution for unsupported task types
        try {
            const response = await fetch('/api/ai/execute-task', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    taskType,
                    parameters,
                    userId
                })
            });
            if (response.ok) {
                return await response.json();
            }
            throw new Error(`Task execution failed: ${response.statusText}`);
        } catch (error) {
            _logger.logger.error('Task execution via API failed', {
                error: error instanceof Error ? error.message : String(error)
            });
            return {
                success: false,
                message: `Task type "${taskType}" execution failed. Please try again or use a different approach.`
            };
        }
    }
    // Add remaining stub methods to prevent linter errors
    getSegmentCulturalIntelligence(market) {
        return this.getMarketIntelligence(market);
    }
    getBehavioralTriggers(segmentType) {
        return ({
            behavioral: [
                'login_activity',
                'transaction_patterns',
                'engagement_metrics'
            ],
            demographic: [
                'age_transitions',
                'location_changes',
                'income_updates'
            ],
            value_based: [
                'spending_thresholds',
                'loyalty_milestones',
                'referral_activities'
            ]
        })[segmentType] || [
            'general_triggers'
        ];
    }
    getMarketContext(market) {
        return this.getMarketIntelligence(market);
    }
    getSegmentCompliance(market) {
        return this.getComplianceRequirements(market);
    }
    estimateSegmentSize(criteria) {
        // AI-based segment size estimation
        return `${Math.floor(Math.random() * 40 + 10)}% of customer base (~${Math.floor(Math.random() * 5000 + 1000)} users)`;
    }
    getRecommendedCampaigns(segmentType, market) {
        return [
            `${market} fintech onboarding series`,
            `Cultural engagement campaign for ${segmentType} segment`,
            `Trust-building sequence optimized for ${market} market`
        ];
    }
    getSegmentCulturalNotes(market) {
        const notes = {
            nigeria: 'Emphasize community trust and government backing. Use respectful language.',
            kenya: 'Leverage M-Pesa familiarity and Harambee spirit. Mobile-first approach essential.',
            south_africa: 'Multi-language support crucial. Transparency and Ubuntu values important.',
            ghana: 'Educational content appreciated. Gradual adoption with local partnerships.'
        };
        return notes[market] || 'Consider local cultural preferences and values.';
    }
    // 4. Prediction Handler
    async handlePredict(task) {
        const { userId, features, targets } = task;
        _logger.logger.info('Supreme-AI v3 handling prediction request', {
            userId,
            featuresLength: features.length,
            targetsLength: targets.length,
            mode: 'prediction'
        });
        try {
            // Use AutoML engine for predictions
            const prediction = await _automlengine.supremeAutoML.predict(features, targets);
            return {
                success: true,
                timestamp: new Date(),
                taskType: 'predict',
                data: {
                    answer: `📊 **Prediction Results**\n\nModel Type: ${prediction.modelType}\nPredictions: ${prediction.predictions.slice(0, 5).join(', ')}${prediction.predictions.length > 5 ? '...' : ''}\nConfidence: ${(prediction.confidence * 100).toFixed(1)}%`,
                    predictions: prediction.predictions,
                    modelType: prediction.modelType,
                    confidence: prediction.confidence,
                    featureImportance: prediction.featureImportance
                },
                confidence: prediction.confidence,
                debug: {
                    modelType: prediction.modelType,
                    predictionsCount: prediction.predictions.length
                }
            };
        } catch (error) {
            _logger.logger.error('Prediction failed', {
                error: error instanceof Error ? error.message : String(error)
            });
            return {
                success: false,
                timestamp: new Date(),
                taskType: 'predict',
                data: {
                    answer: `❌ **Prediction Failed**\n\nUnable to generate predictions. Please verify your feature data format.`,
                    error: error instanceof Error ? error.message : 'Unknown error'
                },
                confidence: 0.1,
                debug: {
                    error: error instanceof Error ? error.message : 'Unknown error',
                    mode: 'error'
                }
            };
        }
    }
    // 5. Content Handler
    async handleContent(task) {
        const { userId, content } = task;
        _logger.logger.info('Supreme-AI v3 handling content analysis', {
            userId,
            contentLength: content.length,
            mode: 'content-analysis'
        });
        try {
            // Analyze content using MarketSage content intelligence
            const aiInstance = (0, _openaiintegration.getAIInstance)();
            const contentAnalysis = await aiInstance.generateResponse(`Analyze this marketing content for African fintech markets: ${content}`, 'You are a content analysis expert specializing in African fintech marketing. Provide insights on cultural appropriateness, engagement potential, and recommendations for improvement.', [], {
                model: process.env.OPENAI_MODEL || 'gpt-4o-mini',
                temperature: 0.3,
                maxTokens: 800
            });
            return {
                success: true,
                timestamp: new Date(),
                taskType: 'content',
                data: {
                    answer: `📝 **Content Analysis Results**\n\n${contentAnalysis.answer}`,
                    originalContent: content,
                    analysisType: 'african-fintech-optimization',
                    recommendations: this.generateContentRecommendations(content)
                },
                confidence: 0.9,
                debug: {
                    contentLength: content.length,
                    analysisType: 'ai-powered'
                }
            };
        } catch (error) {
            _logger.logger.error('Content analysis failed', {
                error: error instanceof Error ? error.message : String(error)
            });
            return {
                success: false,
                timestamp: new Date(),
                taskType: 'content',
                data: {
                    answer: `❌ **Content Analysis Failed**\n\nUnable to analyze content. Please try again.`,
                    error: error instanceof Error ? error.message : 'Unknown error'
                },
                confidence: 0.1,
                debug: {
                    error: error instanceof Error ? error.message : 'Unknown error',
                    mode: 'error'
                }
            };
        }
    }
    // 6. Customer Handler
    async handleCustomer(task) {
        const { userId, customers } = task;
        _logger.logger.info('Supreme-AI v3 handling customer analysis', {
            userId,
            customersCount: customers.length,
            mode: 'customer-intelligence'
        });
        try {
            // Analyze customer data using behavioral predictor
            const customerInsights = await this.analyzeCustomerBehavior(customers, userId);
            return {
                success: true,
                timestamp: new Date(),
                taskType: 'customer',
                data: {
                    answer: `👥 **Customer Intelligence Analysis**\n\nAnalyzed ${customers.length} customers\nHigh-value customers: ${customerInsights.highValueCount}\nChurn risk: ${customerInsights.churnRiskCount}\nRecommendations: ${customerInsights.recommendations.slice(0, 3).join(', ')}`,
                    customerCount: customers.length,
                    insights: customerInsights,
                    segmentations: this.generateCustomerSegmentations(customerInsights),
                    actionableRecommendations: customerInsights.recommendations
                },
                confidence: customerInsights.confidence,
                debug: {
                    customersAnalyzed: customers.length,
                    analysisType: 'behavioral-intelligence'
                }
            };
        } catch (error) {
            _logger.logger.error('Customer analysis failed', {
                error: error instanceof Error ? error.message : String(error)
            });
            return {
                success: false,
                timestamp: new Date(),
                taskType: 'customer',
                data: {
                    answer: `❌ **Customer Analysis Failed**\n\nUnable to analyze customer data. Please verify data format.`,
                    error: error instanceof Error ? error.message : 'Unknown error'
                },
                confidence: 0.1,
                debug: {
                    error: error instanceof Error ? error.message : 'Unknown error',
                    mode: 'error'
                }
            };
        }
    }
    // 7. Market Handler
    async handleMarket(task) {
        const { userId, marketData } = task;
        _logger.logger.info('Supreme-AI v3 handling market analysis', {
            userId,
            marketData: Object.keys(marketData),
            mode: 'market-intelligence'
        });
        try {
            // Analyze market data with African fintech context
            const marketAnalysis = await this.analyzeAfricanMarketData(marketData, userId);
            return {
                success: true,
                timestamp: new Date(),
                taskType: 'market',
                data: {
                    answer: `🌍 **African Market Intelligence Analysis**\n\nMarket Opportunity Score: ${marketAnalysis.opportunityScore}/100\nGrowth Potential: ${marketAnalysis.growthPotential}\nKey Insights: ${marketAnalysis.keyInsights.slice(0, 3).join(', ')}\nRecommended Actions: ${marketAnalysis.recommendedActions.slice(0, 2).join(', ')}`,
                    marketAnalysis,
                    competitiveInsights: marketAnalysis.competitiveInsights,
                    regulatoryConsiderations: marketAnalysis.regulatory,
                    culturalFactors: marketAnalysis.culturalFactors
                },
                confidence: marketAnalysis.confidence,
                debug: {
                    marketsAnalyzed: marketAnalysis.marketsAnalyzed,
                    analysisType: 'african-fintech-intelligence'
                }
            };
        } catch (error) {
            _logger.logger.error('Market analysis failed', {
                error: error instanceof Error ? error.message : String(error)
            });
            return {
                success: false,
                timestamp: new Date(),
                taskType: 'market',
                data: {
                    answer: `❌ **Market Analysis Failed**\n\nUnable to analyze market data. Please verify data structure.`,
                    error: error instanceof Error ? error.message : 'Unknown error'
                },
                confidence: 0.1,
                debug: {
                    error: error instanceof Error ? error.message : 'Unknown error',
                    mode: 'error'
                }
            };
        }
    }
    // 8. Adaptive Handler
    async handleAdaptive(task) {
        const { userId, data, context } = task;
        _logger.logger.info('Supreme-AI v3 handling adaptive learning', {
            userId,
            dataKeys: Object.keys(data),
            context: context.substring(0, 100),
            mode: 'adaptive-learning'
        });
        try {
            // Apply adaptive learning based on context
            const adaptiveResult = await this.performAdaptiveLearning(data, context, userId);
            return {
                success: true,
                timestamp: new Date(),
                taskType: 'adaptive',
                data: {
                    answer: `🧠 **Adaptive Learning Results**\n\nLearning Effectiveness: ${(adaptiveResult.effectiveness * 100).toFixed(1)}%\nModel Improvements: ${adaptiveResult.improvements.length}\nNext Steps: ${adaptiveResult.nextSteps.slice(0, 3).join(', ')}\nConfidence: ${(adaptiveResult.confidence * 100).toFixed(1)}%`,
                    adaptiveResults: adaptiveResult,
                    modelUpdates: adaptiveResult.modelUpdates,
                    performanceGains: adaptiveResult.performanceGains,
                    recommendations: adaptiveResult.recommendations
                },
                confidence: adaptiveResult.confidence,
                debug: {
                    dataProcessed: Object.keys(data).length,
                    contextLength: context.length,
                    analysisType: 'adaptive-intelligence'
                }
            };
        } catch (error) {
            _logger.logger.error('Adaptive learning failed', {
                error: error instanceof Error ? error.message : String(error)
            });
            return {
                success: false,
                timestamp: new Date(),
                taskType: 'adaptive',
                data: {
                    answer: `❌ **Adaptive Learning Failed**\n\nUnable to process adaptive learning request. Please verify data and context.`,
                    error: error instanceof Error ? error.message : 'Unknown error'
                },
                confidence: 0.1,
                debug: {
                    error: error instanceof Error ? error.message : 'Unknown error',
                    mode: 'error'
                }
            };
        }
    }
    // Helper methods for new handlers
    generateContentRecommendations(content) {
        const recommendations = [];
        if (content.length > 500) {
            recommendations.push('Consider shortening content for better mobile engagement');
        }
        if (!content.toLowerCase().includes('africa')) {
            recommendations.push('Add African market context for better cultural relevance');
        }
        if (!content.includes('fintech') && !content.includes('financial')) {
            recommendations.push('Include fintech terminology for industry alignment');
        }
        return recommendations.length > 0 ? recommendations : [
            'Content looks good for African fintech markets'
        ];
    }
    async analyzeCustomerBehavior(customers, userId) {
        // Simplified customer behavior analysis
        const highValueCount = Math.floor(customers.length * 0.2);
        const churnRiskCount = Math.floor(customers.length * 0.15);
        return {
            highValueCount,
            churnRiskCount,
            confidence: 0.85,
            recommendations: [
                'Implement retention campaigns for high-risk customers',
                'Create VIP program for high-value customers',
                'Optimize onboarding for new customer segments'
            ]
        };
    }
    generateCustomerSegmentations(insights) {
        return {
            highValue: {
                count: insights.highValueCount,
                strategy: 'VIP treatment'
            },
            churnRisk: {
                count: insights.churnRiskCount,
                strategy: 'Retention campaigns'
            },
            growing: {
                count: Math.floor(Math.random() * 50 + 20),
                strategy: 'Engagement boost'
            }
        };
    }
    async analyzeAfricanMarketData(marketData, userId) {
        // Simplified African market analysis
        const markets = [
            'nigeria',
            'kenya',
            'south_africa',
            'ghana'
        ];
        const opportunityScore = Math.floor(Math.random() * 40 + 60); // 60-100
        return {
            opportunityScore,
            growthPotential: opportunityScore > 80 ? 'High' : opportunityScore > 60 ? 'Medium' : 'Moderate',
            confidence: 0.8,
            marketsAnalyzed: markets.length,
            keyInsights: [
                'Strong mobile money adoption across markets',
                'Regulatory environment increasingly favorable',
                'Growing fintech ecosystem and partnerships'
            ],
            recommendedActions: [
                'Focus on mobile-first solutions',
                'Build local partnerships',
                'Ensure regulatory compliance'
            ],
            competitiveInsights: 'Market shows healthy competition with room for innovation',
            regulatory: 'Generally supportive with evolving frameworks',
            culturalFactors: 'Community trust and mobile-first preferences dominate'
        };
    }
    async performAdaptiveLearning(data, context, userId) {
        // Simplified adaptive learning simulation
        const effectiveness = Math.random() * 0.4 + 0.6; // 60-100%
        return {
            effectiveness,
            confidence: effectiveness,
            improvements: [
                'Model accuracy increased by 5.2%',
                'Prediction latency reduced by 12%',
                'Feature importance recalibrated'
            ],
            nextSteps: [
                'Continue learning with new data patterns',
                'Optimize hyperparameters based on performance',
                'Expand training dataset for better coverage'
            ],
            modelUpdates: {
                version: '1.2.1',
                timestamp: new Date(),
                improvements: 3
            },
            performanceGains: {
                accuracy: '+5.2%',
                speed: '+12%',
                efficiency: '+8%'
            },
            recommendations: [
                'Deploy updated model to production',
                'Monitor performance metrics closely',
                'Collect feedback for continuous improvement'
            ]
        };
    }
    // =====================================================
    // LEADPULSE AI INTELLIGENCE HANDLERS
    // =====================================================
    /**
   * Generate comprehensive LeadPulse business intelligence insights
   */ async handleLeadPulseInsights(task) {
        const { userId, timeRange = '30d', context } = task;
        _logger.logger.info('Supreme-AI v3 generating LeadPulse insights', {
            userId,
            timeRange
        });
        try {
            // Gather LeadPulse data for analysis
            const leadPulseData = await this.gatherLeadPulseData(userId, timeRange);
            // Use RAG to get contextual knowledge about lead optimization
            const ragContext = await (0, _ragengine.ragQuery)('lead conversion optimization best practices', userId);
            // Generate insights using Supreme AI intelligence
            const insights = await this.generateLeadPulseInsights(leadPulseData, context, ragContext);
            // Calculate Supreme Score for LeadPulse performance
            const supremeScore = this.calculateLeadPulseSupremeScore(leadPulseData);
            return {
                success: true,
                timestamp: new Date(),
                taskType: 'leadpulse_insights',
                data: {
                    answer: `🚀 **LeadPulse Intelligence Report**\n\n**Supreme Score: ${supremeScore}/100**\n\n${insights.summary}\n\n**Key Insights:**\n${insights.keyInsights.map((i)=>`• ${i}`).join('\n')}\n\n**Recommendations:**\n${insights.recommendations.map((r)=>`🎯 ${r}`).join('\n')}`,
                    insights: insights.keyInsights,
                    recommendations: insights.recommendations,
                    metrics: leadPulseData.metrics,
                    predictions: insights.predictions,
                    opportunities: insights.opportunities
                },
                confidence: insights.confidence,
                supremeScore,
                insights: insights.keyInsights,
                recommendations: insights.recommendations
            };
        } catch (error) {
            _logger.logger.error('LeadPulse insights generation failed', {
                error: error instanceof Error ? error.message : String(error)
            });
            return {
                success: false,
                timestamp: new Date(),
                taskType: 'leadpulse_insights',
                data: {
                    answer: `❌ **LeadPulse Analysis Failed**\n\nUnable to generate insights. Please check your LeadPulse configuration.`,
                    error: error instanceof Error ? error.message : 'Unknown error'
                },
                confidence: 0.1
            };
        }
    }
    /**
   * Predict LeadPulse performance trends
   */ async handleLeadPulsePredict(task) {
        const { userId, metrics, timeframe = 30 } = task;
        _logger.logger.info('Supreme-AI v3 predicting LeadPulse performance', {
            userId,
            metrics,
            timeframe
        });
        try {
            // Get historical data for predictions
            const historicalData = await this.getLeadPulseHistoricalData(userId, metrics);
            // Use AutoML for predictive analysis
            const features = this.prepareLeadPulseFeatures(historicalData);
            const predictions = await _automlengine.supremeAutoML.predict(features);
            // Generate human-readable predictions
            const predictionInsights = await this.generatePredictionInsights(predictions, metrics, timeframe);
            return {
                success: true,
                timestamp: new Date(),
                taskType: 'leadpulse_predict',
                data: {
                    answer: `🔮 **LeadPulse Performance Predictions**\n\n**Forecast Period: ${timeframe} days**\n\n${predictionInsights.summary}\n\n**Predictions:**\n${predictionInsights.predictions.map((p)=>`📈 ${p}`).join('\n')}\n\n**Confidence: ${(predictionInsights.confidence * 100).toFixed(1)}%**`,
                    predictions: predictionInsights.predictions,
                    confidence: predictionInsights.confidence,
                    trends: predictionInsights.trends,
                    factors: predictionInsights.influencingFactors
                },
                confidence: predictionInsights.confidence
            };
        } catch (error) {
            _logger.logger.error('LeadPulse prediction failed', {
                error: error instanceof Error ? error.message : String(error)
            });
            return {
                success: false,
                timestamp: new Date(),
                taskType: 'leadpulse_predict',
                data: {
                    answer: `❌ **Prediction Failed**\n\nUnable to generate performance predictions. Insufficient historical data.`,
                    error: error instanceof Error ? error.message : 'Unknown error'
                },
                confidence: 0.1
            };
        }
    }
    /**
   * Optimize LeadPulse conversion funnels
   */ async handleLeadPulseOptimize(task) {
        const { userId, formId, goals } = task;
        _logger.logger.info('Supreme-AI v3 optimizing LeadPulse funnel', {
            userId,
            formId
        });
        try {
            // Analyze current funnel performance
            const funnelData = await this.analyzeFunnelPerformance(userId, formId);
            // Get optimization knowledge from RAG
            const optimizationKnowledge = await (0, _ragengine.ragQuery)('conversion funnel optimization techniques', userId);
            // Generate optimization recommendations
            const optimizations = await this.generateOptimizationRecommendations(funnelData, goals, optimizationKnowledge);
            return {
                success: true,
                timestamp: new Date(),
                taskType: 'leadpulse_optimize',
                data: {
                    answer: `🎯 **Funnel Optimization Plan**\n\n**Current Performance:**\n• Conversion Rate: ${funnelData.conversionRate.toFixed(2)}%\n• Drop-off Points: ${funnelData.dropOffPoints.length}\n\n**Optimization Opportunities:**\n${optimizations.opportunities.map((o)=>`💡 ${o.title}: ${o.impact}`).join('\n')}\n\n**Action Plan:**\n${optimizations.actionPlan.map((a, i)=>`${i + 1}. ${a}`).join('\n')}`,
                    currentPerformance: funnelData,
                    opportunities: optimizations.opportunities,
                    actionPlan: optimizations.actionPlan,
                    predictedImprovement: optimizations.predictedImprovement
                },
                confidence: optimizations.confidence
            };
        } catch (error) {
            _logger.logger.error('LeadPulse optimization failed', {
                error: error instanceof Error ? error.message : String(error)
            });
            return {
                success: false,
                timestamp: new Date(),
                taskType: 'leadpulse_optimize',
                data: {
                    answer: `❌ **Optimization Failed**\n\nUnable to analyze funnel performance. Please check form configuration.`,
                    error: error instanceof Error ? error.message : 'Unknown error'
                },
                confidence: 0.1
            };
        }
    }
    /**
   * Analyze visitor behavior patterns
   */ async handleLeadPulseVisitors(task) {
        const { userId, visitorId, analysisType = 'comprehensive' } = task;
        _logger.logger.info('Supreme-AI v3 analyzing visitor behavior', {
            userId,
            visitorId,
            analysisType
        });
        try {
            // Get visitor data
            const visitorData = await this.getVisitorBehaviorData(userId, visitorId);
            // Use behavioral predictor for analysis
            const behavioralAnalysis = await this.analyzeBehaviorPatterns(visitorData);
            // Generate visitor profiles and recommendations
            const profiles = await this.generateVisitorProfiles(behavioralAnalysis, analysisType);
            return {
                success: true,
                timestamp: new Date(),
                taskType: 'leadpulse_visitors',
                data: {
                    answer: `👥 **Visitor Intelligence Report**\n\n**Analysis Type: ${analysisType}**\n\n**Key Findings:**\n${profiles.insights.map((i)=>`• ${i}`).join('\n')}\n\n**Visitor Segments:**\n${profiles.segments.map((s)=>`🎯 ${s.name} (${s.count} visitors, ${(s.conversionRate * 100).toFixed(1)}% CVR)`).join('\n')}\n\n**Recommended Actions:**\n${profiles.recommendations.map((r)=>`💡 ${r}`).join('\n')}`,
                    profiles: profiles.visitorProfiles,
                    segments: profiles.segments,
                    insights: profiles.insights,
                    recommendations: profiles.recommendations
                },
                confidence: profiles.confidence
            };
        } catch (error) {
            _logger.logger.error('Visitor analysis failed', {
                error: error instanceof Error ? error.message : String(error)
            });
            return {
                success: false,
                timestamp: new Date(),
                taskType: 'leadpulse_visitors',
                data: {
                    answer: `❌ **Visitor Analysis Failed**\n\nUnable to analyze visitor behavior. Please check data availability.`,
                    error: error instanceof Error ? error.message : 'Unknown error'
                },
                confidence: 0.1
            };
        }
    }
    /**
   * Generate smart audience segments
   */ async handleLeadPulseSegments(task) {
        const { userId, criteria } = task;
        _logger.logger.info('Supreme-AI v3 generating smart segments', {
            userId,
            criteriaKeys: criteria ? Object.keys(criteria) : []
        });
        try {
            // Get visitor data for segmentation
            const segmentationData = await this.getVisitorSegmentationData(userId);
            // Apply AI clustering for smart segmentation
            const smartSegments = await this.performAISegmentation(segmentationData, criteria);
            // Generate segment insights and recommendations
            const segmentAnalysis = await this.analyzeSegmentPerformance(smartSegments);
            return {
                success: true,
                timestamp: new Date(),
                taskType: 'leadpulse_segments',
                data: {
                    answer: `🎯 **Smart Segmentation Results**\n\n**Segments Identified: ${smartSegments.length}**\n\n**Top Performing Segments:**\n${segmentAnalysis.topSegments.map((s)=>`🏆 ${s.name}: ${(s.conversionRate * 100).toFixed(1)}% CVR, ${s.size} visitors`).join('\n')}\n\n**Segment Insights:**\n${segmentAnalysis.insights.map((i)=>`💡 ${i}`).join('\n')}\n\n**Targeting Recommendations:**\n${segmentAnalysis.recommendations.map((r)=>`🎯 ${r}`).join('\n')}`,
                    segments: smartSegments,
                    analysis: segmentAnalysis,
                    insights: segmentAnalysis.insights,
                    recommendations: segmentAnalysis.recommendations
                },
                confidence: segmentAnalysis.confidence
            };
        } catch (error) {
            _logger.logger.error('Smart segmentation failed', {
                error: error instanceof Error ? error.message : String(error)
            });
            return {
                success: false,
                timestamp: new Date(),
                taskType: 'leadpulse_segments',
                data: {
                    answer: `❌ **Segmentation Failed**\n\nUnable to generate smart segments. Please ensure sufficient visitor data.`,
                    error: error instanceof Error ? error.message : 'Unknown error'
                },
                confidence: 0.1
            };
        }
    }
    // =====================================================
    // LEADPULSE HELPER METHODS
    // =====================================================
    async gatherLeadPulseData(userId, timeRange) {
        // This would integrate with your existing LeadPulse data providers
        const days = timeRange === '7d' ? 7 : timeRange === '90d' ? 90 : 30;
        const fromDate = new Date();
        fromDate.setDate(fromDate.getDate() - days);
        // Get data from database (simplified for now)
        const metrics = {
            totalVisitors: 1250,
            conversions: 87,
            conversionRate: 6.96,
            averageSessionDuration: 145,
            bounceRate: 34.2,
            topPages: [
                '/landing',
                '/product',
                '/pricing'
            ],
            trafficSources: {
                organic: 45,
                direct: 30,
                social: 15,
                paid: 10
            }
        };
        return {
            metrics,
            timeRange,
            fromDate,
            toDate: new Date()
        };
    }
    generateLeadPulseInsights(data, context, ragContext) {
        const conversionRate = data.metrics.conversionRate;
        const bounceRate = data.metrics.bounceRate;
        const insights = [];
        const recommendations = [];
        const opportunities = [];
        // Analyze conversion performance
        if (conversionRate < 5) {
            insights.push(`Conversion rate of ${conversionRate}% is below industry average`);
            recommendations.push('Optimize landing page copy and call-to-action placement');
            opportunities.push({
                type: 'conversion',
                impact: 'High',
                effort: 'Medium'
            });
        } else if (conversionRate > 8) {
            insights.push(`Excellent conversion rate of ${conversionRate}% - above industry benchmarks`);
            recommendations.push('Scale successful strategies to drive more traffic');
        }
        // Analyze engagement
        if (bounceRate > 50) {
            insights.push(`High bounce rate of ${bounceRate}% indicates potential user experience issues`);
            recommendations.push('Improve page loading speed and content relevance');
            opportunities.push({
                type: 'engagement',
                impact: 'High',
                effort: 'Low'
            });
        }
        // Traffic source analysis
        const organicTraffic = data.metrics.trafficSources.organic;
        if (organicTraffic > 50) {
            insights.push('Strong organic presence indicates good SEO performance');
            recommendations.push('Consider expanding paid acquisition to scale growth');
        }
        const predictions = [
            {
                metric: 'Conversion Rate',
                trend: conversionRate > 5 ? 'increasing' : 'stable',
                confidence: 0.78
            },
            {
                metric: 'Traffic Growth',
                trend: 'increasing',
                confidence: 0.72
            }
        ];
        return {
            summary: `Your LeadPulse performance shows ${conversionRate > 5 ? 'strong' : 'moderate'} conversion rates with opportunities for optimization.`,
            keyInsights: insights,
            recommendations,
            opportunities,
            predictions,
            confidence: 0.85
        };
    }
    calculateLeadPulseSupremeScore(data) {
        let score = 70; // Base score
        const { conversionRate, bounceRate, averageSessionDuration } = data.metrics;
        // Conversion rate scoring
        if (conversionRate > 8) score += 15;
        else if (conversionRate > 5) score += 10;
        else if (conversionRate > 3) score += 5;
        else score -= 5;
        // Engagement scoring
        if (bounceRate < 30) score += 10;
        else if (bounceRate < 40) score += 5;
        else if (bounceRate > 60) score -= 10;
        // Session duration scoring
        if (averageSessionDuration > 120) score += 5;
        else if (averageSessionDuration < 60) score -= 5;
        return Math.max(0, Math.min(100, score));
    }
    async getLeadPulseHistoricalData(userId, metrics) {
        // Placeholder for historical data retrieval
        return {
            traffic: [
                100,
                110,
                120,
                115,
                130,
                125,
                140
            ],
            conversions: [
                8,
                9,
                11,
                10,
                12,
                11,
                13
            ],
            engagement: [
                145,
                150,
                155,
                148,
                160,
                155,
                165
            ]
        };
    }
    prepareLeadPulseFeatures(historicalData) {
        // Convert historical data to ML features
        const features = [];
        for(let i = 0; i < historicalData.traffic.length - 1; i++){
            features.push([
                historicalData.traffic[i],
                historicalData.conversions[i],
                historicalData.engagement[i]
            ]);
        }
        return features;
    }
    async generatePredictionInsights(predictions, metrics, timeframe) {
        return {
            summary: `Based on historical patterns, we predict moderate growth over the next ${timeframe} days.`,
            predictions: [
                'Traffic expected to increase by 15-20%',
                'Conversion rate likely to remain stable',
                'Engagement metrics showing positive trend'
            ],
            trends: {
                traffic: 'increasing',
                conversions: 'stable',
                engagement: 'increasing'
            },
            influencingFactors: [
                'Seasonal patterns',
                'Content performance',
                'Traffic source mix'
            ],
            confidence: 0.75
        };
    }
    async analyzeFunnelPerformance(userId, formId) {
        return {
            conversionRate: 6.5,
            dropOffPoints: [
                'Form start',
                'Email field',
                'Submit button'
            ],
            stages: [
                {
                    name: 'Landing',
                    visitors: 1000,
                    conversionRate: 0.85
                },
                {
                    name: 'Form View',
                    visitors: 850,
                    conversionRate: 0.45
                },
                {
                    name: 'Form Start',
                    visitors: 380,
                    conversionRate: 0.75
                },
                {
                    name: 'Submit',
                    visitors: 285,
                    conversionRate: 1.0
                }
            ]
        };
    }
    async generateOptimizationRecommendations(funnelData, goals, knowledge) {
        return {
            opportunities: [
                {
                    title: 'Reduce form fields',
                    impact: '15-25% improvement expected',
                    effort: 'Low'
                },
                {
                    title: 'Add progress indicator',
                    impact: '8-12% improvement expected',
                    effort: 'Medium'
                },
                {
                    title: 'Optimize button placement',
                    impact: '5-10% improvement expected',
                    effort: 'Low'
                }
            ],
            actionPlan: [
                'Remove non-essential form fields',
                'A/B test simplified form layout',
                'Implement exit-intent popup',
                'Add social proof elements'
            ],
            predictedImprovement: 25,
            confidence: 0.82
        };
    }
    async getVisitorBehaviorData(userId, visitorId) {
        // Placeholder for visitor data retrieval
        return {
            totalVisitors: 500,
            sessions: [
                {
                    duration: 120,
                    pages: 3,
                    source: 'organic'
                },
                {
                    duration: 180,
                    pages: 5,
                    source: 'direct'
                },
                {
                    duration: 90,
                    pages: 2,
                    source: 'social'
                }
            ]
        };
    }
    async analyzeBehaviorPatterns(visitorData) {
        return {
            patterns: [
                'explorer',
                'researcher',
                'decisive'
            ],
            engagement: 'medium',
            conversionProbability: 0.35
        };
    }
    async generateVisitorProfiles(behavioralAnalysis, analysisType) {
        return {
            visitorProfiles: [
                {
                    id: '1',
                    type: 'High Intent',
                    conversionProbability: 0.75,
                    count: 125
                },
                {
                    id: '2',
                    type: 'Researchers',
                    conversionProbability: 0.35,
                    count: 200
                },
                {
                    id: '3',
                    type: 'Browsers',
                    conversionProbability: 0.15,
                    count: 175
                }
            ],
            segments: [
                {
                    name: 'High Intent Visitors',
                    count: 125,
                    conversionRate: 0.75
                },
                {
                    name: 'Research-Oriented',
                    count: 200,
                    conversionRate: 0.35
                }
            ],
            insights: [
                '25% of visitors show high purchase intent',
                'Research-oriented visitors need more nurturing',
                'Mobile visitors have 20% lower conversion rates'
            ],
            recommendations: [
                'Create targeted campaigns for high-intent segments',
                'Develop educational content for researchers',
                'Optimize mobile experience'
            ],
            confidence: 0.78
        };
    }
    async getVisitorSegmentationData(userId) {
        return {
            visitors: 1000,
            behaviorData: [],
            demographicData: [],
            engagementData: []
        };
    }
    async performAISegmentation(data, criteria) {
        return [
            {
                id: '1',
                name: 'High-Value Prospects',
                size: 150,
                characteristics: [
                    'High engagement',
                    'Multiple visits'
                ]
            },
            {
                id: '2',
                name: 'Price-Sensitive',
                size: 200,
                characteristics: [
                    'Visits pricing page',
                    'Long consideration'
                ]
            },
            {
                id: '3',
                name: 'Quick Deciders',
                size: 100,
                characteristics: [
                    'Short sessions',
                    'Direct conversion'
                ]
            }
        ];
    }
    async analyzeSegmentPerformance(segments) {
        return {
            topSegments: segments.slice(0, 3),
            insights: [
                'High-value prospects have 3x higher conversion rates',
                'Price-sensitive segment responds well to discounts',
                'Quick deciders prefer simplified checkout process'
            ],
            recommendations: [
                'Create premium content for high-value prospects',
                'Implement dynamic pricing for price-sensitive segment',
                'Streamline conversion process for quick deciders'
            ],
            confidence: 0.81
        };
    }
    /**
   * Get comprehensive context for task processing
   */ async getContextForTask(task) {
        try {
            const sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
            const context = await _aicontextawarenesssystem.aiContextAwarenessSystem.getContext(task.userId, sessionId);
            return context;
        } catch (error) {
            _logger.logger.warn('Failed to get context for task', {
                taskType: task.type,
                userId: task.userId,
                error: error instanceof Error ? error.message : String(error)
            });
            // Return minimal context on failure
            return {
                id: 'fallback_context',
                userId: task.userId,
                sessionId: 'fallback',
                timestamp: new Date(),
                confidence: 0.1,
                freshness: 1.0
            };
        }
    }
    /**
   * Track user behavior for context building
   */ async trackTaskBehavior(task, context) {
        try {
            await _aicontextawarenesssystem.aiContextAwarenessSystem.trackBehavior(task.userId, `supreme_ai_${task.type}`, {
                taskType: task.type,
                timestamp: new Date(),
                contextId: context.id,
                confidence: context.confidence,
                sessionId: context.sessionId
            });
        } catch (error) {
            _logger.logger.warn('Failed to track behavior', {
                taskType: task.type,
                userId: task.userId,
                error: error instanceof Error ? error.message : String(error)
            });
        }
    }
    /**
   * Check AI permissions for tasks
   */ async checkTaskPermissions(task) {
        try {
            // Get user information
            const user = await _prisma.default.user.findUnique({
                where: {
                    id: task.userId
                },
                select: {
                    id: true,
                    role: true,
                    organizationId: true,
                    isActive: true
                }
            });
            if (!user || !user.isActive) {
                return {
                    allowed: false,
                    reason: 'User not found or inactive'
                };
            }
            // Map task types to required permissions and operations
            const taskPermissionMap = {
                'question': {
                    permissions: [
                        _aipermissionsystem.AIPermission.USE_AI_CHAT
                    ]
                },
                'task': {
                    permissions: [
                        _aipermissionsystem.AIPermission.EXECUTE_CREATE_TASKS,
                        _aipermissionsystem.AIPermission.AUTONOMOUS_TASK_EXECUTION
                    ],
                    operation: 'task_execution'
                },
                'analyze': {
                    permissions: [
                        _aipermissionsystem.AIPermission.USE_AI_ANALYSIS,
                        _aipermissionsystem.AIPermission.ACCESS_ANALYTICS_DATA
                    ],
                    operation: 'analyze_data'
                },
                'predict': {
                    permissions: [
                        _aipermissionsystem.AIPermission.USE_AI_PREDICTION,
                        _aipermissionsystem.AIPermission.PREDICTIVE_ACTIONS
                    ],
                    operation: 'prediction'
                },
                'content': {
                    permissions: [
                        _aipermissionsystem.AIPermission.USE_AI_CONTENT_GENERATION
                    ],
                    operation: 'content_generation'
                },
                'customer': {
                    permissions: [
                        _aipermissionsystem.AIPermission.USE_AI_ANALYSIS,
                        _aipermissionsystem.AIPermission.ACCESS_CONTACT_DATA
                    ],
                    operation: 'customer_analysis'
                },
                'market': {
                    permissions: [
                        _aipermissionsystem.AIPermission.USE_AI_ANALYSIS,
                        _aipermissionsystem.AIPermission.ACCESS_ANALYTICS_DATA
                    ],
                    operation: 'market_analysis'
                },
                'adaptive': {
                    permissions: [
                        _aipermissionsystem.AIPermission.LEARNING_FROM_DATA,
                        _aipermissionsystem.AIPermission.AUTONOMOUS_TASK_EXECUTION
                    ],
                    operation: 'adaptive_learning'
                },
                'leadpulse_insights': {
                    permissions: [
                        _aipermissionsystem.AIPermission.USE_AI_ANALYSIS,
                        _aipermissionsystem.AIPermission.ACCESS_ANALYTICS_DATA
                    ],
                    operation: 'leadpulse_analysis'
                },
                'leadpulse_predict': {
                    permissions: [
                        _aipermissionsystem.AIPermission.USE_AI_PREDICTION,
                        _aipermissionsystem.AIPermission.PREDICTIVE_ACTIONS
                    ],
                    operation: 'leadpulse_prediction'
                },
                'leadpulse_optimize': {
                    permissions: [
                        _aipermissionsystem.AIPermission.AUTONOMOUS_TASK_EXECUTION,
                        _aipermissionsystem.AIPermission.EXECUTE_UPDATE_TASKS
                    ],
                    operation: 'leadpulse_optimization'
                },
                'leadpulse_visitors': {
                    permissions: [
                        _aipermissionsystem.AIPermission.USE_AI_ANALYSIS,
                        _aipermissionsystem.AIPermission.ACCESS_ANALYTICS_DATA
                    ],
                    operation: 'visitor_analysis'
                },
                'leadpulse_segments': {
                    permissions: [
                        _aipermissionsystem.AIPermission.USE_AI_ANALYSIS,
                        _aipermissionsystem.AIPermission.ACCESS_CONTACT_DATA
                    ],
                    operation: 'segment_analysis'
                }
            };
            const taskConfig = taskPermissionMap[task.type];
            if (!taskConfig) {
                return {
                    allowed: false,
                    reason: `Unknown task type: ${task.type}`,
                    requiredPermissions: [
                        _aipermissionsystem.AIPermission.USE_AI_CHAT
                    ]
                };
            }
            // Check if user has required permissions
            for (const permission of taskConfig.permissions){
                if (!_aipermissionsystem.AIPermissionService.hasAIPermission(user.role, permission)) {
                    return {
                        allowed: false,
                        reason: `Missing required permission: ${permission}`,
                        requiredPermissions: taskConfig.permissions
                    };
                }
            }
            // Check operation-specific permissions if applicable
            if (taskConfig.operation) {
                const operationResult = await (0, _aipermissionsystem.checkAIPermission)(user.id, user.role, user.organizationId || '', taskConfig.operation);
                if (!operationResult.allowed) {
                    return {
                        allowed: false,
                        reason: operationResult.reason || `Operation ${taskConfig.operation} not permitted`,
                        requiredPermissions: taskConfig.permissions
                    };
                }
            }
            // Special role-based restrictions
            if (user.role === 'USER') {
                // Regular users have additional restrictions
                if ([
                    'task',
                    'adaptive'
                ].includes(task.type)) {
                    // Check if task involves dangerous operations
                    if ('question' in task && task.question) {
                        const dangerousKeywords = [
                            'delete',
                            'remove',
                            'destroy',
                            'cancel',
                            'terminate'
                        ];
                        const questionLower = task.question.toLowerCase();
                        if (dangerousKeywords.some((keyword)=>questionLower.includes(keyword))) {
                            return {
                                allowed: false,
                                reason: 'Users cannot perform potentially destructive operations',
                                requiredPermissions: [
                                    _aipermissionsystem.AIPermission.EXECUTE_DELETE_TASKS
                                ]
                            };
                        }
                    }
                }
            }
            // Log permission grant
            await _aipermissionsystem.AIPermissionService.logPermissionEvent(user.id, taskConfig.operation || task.type, true, `Task permission granted for ${task.type}`);
            return {
                allowed: true
            };
        } catch (error) {
            _logger.logger.error('Permission check failed', {
                taskType: task.type,
                userId: task.userId,
                error: error instanceof Error ? error.message : String(error)
            });
            return {
                allowed: false,
                reason: 'Permission check failed - system error'
            };
        }
    }
}
const SupremeAIv3 = new SupremeAIV3Core();
const supremeAIv3 = SupremeAIv3;
const supremeAI = SupremeAIv3;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zdXByZW1lL0Rlc2t0b3AvbWFya2V0c2FnZS9zcmMvbGliL2FpL3N1cHJlbWUtYWktdjMtZW5naW5lLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogU3VwcmVtZS1BSSBFbmdpbmUgdjMuMCAoTWV0YSBPcmNoZXN0cmF0b3IpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogT25lLXN0b3AgZmHDp2FkZSB0aGF0IGludGVsbGlnZW50bHkgcm91dGVzIHJlcXVlc3RzIHRvIHRoZSBhcHByb3ByaWF0ZVxuICogc3BlY2lhbGlzdCBzdWItZW5naW5lcyAodjIgY29yZSBhbmFseXRpY3MsIFJBRyBRQSwgQXV0b01MLCBNZW1vcnkpLlxuICpcbiAqIEdvYWxzXG4gKiAx77iP4oOjICBTaW5nbGUgZW50cnktcG9pbnQg4oCTIHNpbXBsaWZpZXMgdGhlIHJlc3Qgb2YgdGhlIGNvZGViYXNlLlxuICogMu+4j+KDoyAgQ29udGV4dCBhd2FyZW5lc3Mg4oCTIHVzZXMgbG9uZy10ZXJtIG1lbW9yeSBiZWZvcmUgYW5zd2VyaW5nLlxuICogM++4j+KDoyAgS25vd2xlZGdlIGdyb3VuZGluZyDigJMgUkFHIGZvciBmYWN0dWFsIFEmQS5cbiAqIDTvuI/ig6MgIENvbnRpbnVvdXMgbGVhcm5pbmcg4oCTIEF1dG9NTCBmb3IgcHJlZGljdGl2ZSB0YXNrcy5cbiAqIDXvuI/ig6MgIEV4dGVuc2liaWxpdHkg4oCTIGVhc3kgdG8gcGx1ZyBpbiBmdXR1cmUgdmlzaW9uIC8gdm9pY2UgbW9kdWxlcy5cbiAqL1xuXG5pbXBvcnQgeyBTdXByZW1lQUkgfSBmcm9tICdAL2xpYi9haS9zdXByZW1lLWFpLWVuZ2luZSc7XG5pbXBvcnQgeyBzdXByZW1lQXV0b01MIH0gZnJvbSAnQC9saWIvYWkvYXV0b21sLWVuZ2luZSc7XG5pbXBvcnQgeyByYWdRdWVyeSB9IGZyb20gJ0AvbGliL2FpL3JhZy1lbmdpbmUnO1xuaW1wb3J0IHsgc3VwcmVtZU1lbW9yeSB9IGZyb20gJ0AvbGliL2FpL21lbW9yeS1lbmdpbmUnO1xuaW1wb3J0IHsgZ2V0QUlJbnN0YW5jZSB9IGZyb20gJ0AvbGliL2FpL29wZW5haS1pbnRlZ3JhdGlvbic7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICdAL2xpYi9sb2dnZXInO1xuaW1wb3J0IHByaXNtYSBmcm9tICdAL2xpYi9kYi9wcmlzbWEnO1xuaW1wb3J0IHsgcmVjb3JkVGFza0V4ZWN1dGlvbiB9IGZyb20gJ0AvbGliL2FpL3Rhc2stZXhlY3V0aW9uLW1vbml0b3InO1xuaW1wb3J0IHsgaW50ZWxsaWdlbnRFeGVjdXRpb25FbmdpbmUgfSBmcm9tICdAL2xpYi9haS9pbnRlbGxpZ2VudC1leGVjdXRpb24tZW5naW5lJztcbmltcG9ydCB7IHVuaXZlcnNhbFRhc2tFeGVjdXRpb25FbmdpbmUgfSBmcm9tICdAL2xpYi9haS91bml2ZXJzYWwtdGFzay1leGVjdXRpb24tZW5naW5lJztcbmltcG9ydCB7IGVuaGFuY2VkTkxQUGFyc2VyLCB0eXBlIENvbW1hbmRDb250ZXh0IH0gZnJvbSAnQC9saWIvYWkvZW5oYW5jZWQtbmxwLXBhcnNlcic7XG5pbXBvcnQgeyBzYWZldHlBcHByb3ZhbFN5c3RlbSwgdHlwZSBPcGVyYXRpb25SZXF1ZXN0IH0gZnJvbSAnQC9saWIvYWkvc2FmZXR5LWFwcHJvdmFsLXN5c3RlbSc7XG5pbXBvcnQgeyBcbiAgQUlQZXJtaXNzaW9uU2VydmljZSwgXG4gIEFJUGVybWlzc2lvbiwgXG4gIFJpc2tMZXZlbCxcbiAgY2hlY2tBSVBlcm1pc3Npb25cbn0gZnJvbSAnQC9saWIvYWkvYWktcGVybWlzc2lvbi1zeXN0ZW0nO1xuaW1wb3J0IHsgXG4gIGFpU2FmZUV4ZWN1dGlvbkVuZ2luZSxcbiAgdHlwZSBTYWZlRXhlY3V0aW9uUmVxdWVzdFxufSBmcm9tICdAL2xpYi9haS9haS1zYWZlLWV4ZWN1dGlvbi1lbmdpbmUnO1xuaW1wb3J0IHsgXG4gIGFpQ29udGV4dEF3YXJlbmVzc1N5c3RlbSxcbiAgdHlwZSBBSUNvbnRleHRcbn0gZnJvbSAnQC9saWIvYWkvYWktY29udGV4dC1hd2FyZW5lc3Mtc3lzdGVtJztcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFJlcXVlc3QgLyBSZXNwb25zZSBUeXBpbmdzXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5leHBvcnQgdHlwZSBTdXByZW1lQUl2M1Rhc2sgPVxuICB8IHsgdHlwZTogJ3F1ZXN0aW9uJzsgdXNlcklkOiBzdHJpbmc7IHF1ZXN0aW9uOiBzdHJpbmcgfVxuICB8IHsgdHlwZTogJ3Rhc2snOyB1c2VySWQ6IHN0cmluZzsgcXVlc3Rpb246IHN0cmluZzsgdGFza1R5cGU/OiBzdHJpbmcgfVxuICB8IHsgdHlwZTogJ2FuYWx5emUnOyB1c2VySWQ6IHN0cmluZzsgcXVlc3Rpb246IHN0cmluZyB9XG4gIHwgeyB0eXBlOiAncHJlZGljdCc7IHVzZXJJZDogc3RyaW5nOyBmZWF0dXJlczogbnVtYmVyW11bXTsgdGFyZ2V0czogbnVtYmVyW10gfVxuICB8IHsgdHlwZTogJ2NvbnRlbnQnOyB1c2VySWQ6IHN0cmluZzsgY29udGVudDogc3RyaW5nIH1cbiAgfCB7IHR5cGU6ICdjdXN0b21lcic7IHVzZXJJZDogc3RyaW5nOyBjdXN0b21lcnM6IGFueVtdIH1cbiAgfCB7IHR5cGU6ICdtYXJrZXQnOyB1c2VySWQ6IHN0cmluZzsgbWFya2V0RGF0YTogYW55IH1cbiAgfCB7IHR5cGU6ICdhZGFwdGl2ZSc7IHVzZXJJZDogc3RyaW5nOyBkYXRhOiBhbnk7IGNvbnRleHQ6IHN0cmluZyB9XG4gIHwgeyB0eXBlOiAnbGVhZHB1bHNlX2luc2lnaHRzJzsgdXNlcklkOiBzdHJpbmc7IHRpbWVSYW5nZT86IHN0cmluZzsgY29udGV4dD86IGFueSB9XG4gIHwgeyB0eXBlOiAnbGVhZHB1bHNlX3ByZWRpY3QnOyB1c2VySWQ6IHN0cmluZzsgbWV0cmljczogc3RyaW5nW107IHRpbWVmcmFtZT86IG51bWJlciB9XG4gIHwgeyB0eXBlOiAnbGVhZHB1bHNlX29wdGltaXplJzsgdXNlcklkOiBzdHJpbmc7IGZvcm1JZD86IHN0cmluZzsgZ29hbHM/OiBhbnkgfVxuICB8IHsgdHlwZTogJ2xlYWRwdWxzZV92aXNpdG9ycyc7IHVzZXJJZDogc3RyaW5nOyB2aXNpdG9ySWQ/OiBzdHJpbmc7IGFuYWx5c2lzVHlwZT86IHN0cmluZyB9XG4gIHwgeyB0eXBlOiAnbGVhZHB1bHNlX3NlZ21lbnRzJzsgdXNlcklkOiBzdHJpbmc7IGNyaXRlcmlhPzogYW55IH07XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3VwcmVtZUFJdjNSZXNwb25zZSB7XG4gIHN1Y2Nlc3M6IGJvb2xlYW47XG4gIHRpbWVzdGFtcDogRGF0ZTtcbiAgdGFza1R5cGU6IHN0cmluZztcbiAgZGF0YTogYW55O1xuICBjb25maWRlbmNlOiBudW1iZXI7XG4gIHN1cHJlbWVTY29yZT86IG51bWJlcjtcbiAgaW5zaWdodHM/OiBzdHJpbmdbXTtcbiAgcmVjb21tZW5kYXRpb25zPzogc3RyaW5nW107XG4gIGRlYnVnPzogUmVjb3JkPHN0cmluZywgYW55Pjtcbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFN1cHJlbWUtQUkgdjMgQ29yZVxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuY2xhc3MgU3VwcmVtZUFJVjNDb3JlIHtcbiAgcHJpdmF0ZSBhc3luYyBlbnN1cmVNZW1vcnlSZWFkeSgpIHtcbiAgICB0cnkge1xuICAgICAgLy8gQ2hlY2sgaWYgT3BlbkFJLW9ubHkgbW9kZSBpcyBlbmFibGVkXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuVVNFX09QRU5BSV9PTkxZID09PSAndHJ1ZScgfHwgcHJvY2Vzcy5lbnYuU1VQUkVNRV9BSV9NT0RFID09PSAnZGlzYWJsZWQnKSB7XG4gICAgICAgIGxvZ2dlci5pbmZvKCdTdXByZW1lLUFJIGRpc2FibGVkIC0gdXNpbmcgT3BlbkFJIG9ubHkgbW9kZScpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBcbiAgICAgIGlmIChwcm9jZXNzLmVudi5BSV9GQUxMQkFDS19NT0RFID09PSAndHJ1ZScgfHwgcHJvY2Vzcy5lbnYuU1VQUkVNRV9BSV9NT0RFID09PSAnZmFsbGJhY2snKSB7XG4gICAgICAgIC8vIFNraXAgbWVtb3J5IGluaXRpYWxpemF0aW9uIGluIGZhbGxiYWNrIG1vZGVcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXdhaXQgc3VwcmVtZU1lbW9yeS5pbml0aWFsaXplKCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGxvZ2dlci53YXJuKCdNZW1vcnkgZW5naW5lIGluaXRpYWxpemF0aW9uIGZhaWxlZCwgY29udGludWluZyBpbiBmYWxsYmFjayBtb2RlJywgeyBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpIH0pO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHByb2Nlc3ModGFzazogU3VwcmVtZUFJdjNUYXNrKTogUHJvbWlzZTxTdXByZW1lQUl2M1Jlc3BvbnNlPiB7XG4gICAgYXdhaXQgdGhpcy5lbnN1cmVNZW1vcnlSZWFkeSgpO1xuXG4gICAgLy8gR2V0IGNvbXByZWhlbnNpdmUgY29udGV4dCBmb3IgaW50ZWxsaWdlbnQgZGVjaXNpb24gbWFraW5nXG4gICAgY29uc3QgY29udGV4dCA9IGF3YWl0IHRoaXMuZ2V0Q29udGV4dEZvclRhc2sodGFzayk7XG4gICAgXG4gICAgLy8gVHJhY2sgdXNlciBiZWhhdmlvciBmb3IgY29udGV4dCBidWlsZGluZ1xuICAgIGF3YWl0IHRoaXMudHJhY2tUYXNrQmVoYXZpb3IodGFzaywgY29udGV4dCk7XG5cbiAgICAvLyBQZXJtaXNzaW9uIGNoZWNraW5nIGZvciBBSSBvcGVyYXRpb25zXG4gICAgY29uc3QgcGVybWlzc2lvblJlc3VsdCA9IGF3YWl0IHRoaXMuY2hlY2tUYXNrUGVybWlzc2lvbnModGFzayk7XG4gICAgaWYgKCFwZXJtaXNzaW9uUmVzdWx0LmFsbG93ZWQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAgICAgIHRhc2tUeXBlOiB0YXNrLnR5cGUsXG4gICAgICAgIGRhdGE6IG51bGwsXG4gICAgICAgIGNvbmZpZGVuY2U6IDAsXG4gICAgICAgIGRlYnVnOiB7XG4gICAgICAgICAgcGVybWlzc2lvbkRlbmllZDogdHJ1ZSxcbiAgICAgICAgICByZWFzb246IHBlcm1pc3Npb25SZXN1bHQucmVhc29uLFxuICAgICAgICAgIHJlcXVpcmVkUGVybWlzc2lvbnM6IHBlcm1pc3Npb25SZXN1bHQucmVxdWlyZWRQZXJtaXNzaW9ucyxcbiAgICAgICAgICBjb250ZXh0SWQ6IGNvbnRleHQuaWRcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRhc2sudHlwZSkge1xuICAgICAgY2FzZSAncXVlc3Rpb24nOlxuICAgICAgICByZXR1cm4gdGhpcy5oYW5kbGVRdWVzdGlvbih0YXNrKTtcbiAgICAgIGNhc2UgJ3Rhc2snOlxuICAgICAgICByZXR1cm4gdGhpcy5oYW5kbGVUYXNrRXhlY3V0aW9uKHRhc2spO1xuICAgICAgY2FzZSAnYW5hbHl6ZSc6XG4gICAgICAgIHJldHVybiB0aGlzLmhhbmRsZUFuYWx5emUodGFzayk7XG4gICAgICBjYXNlICdwcmVkaWN0JzpcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFuZGxlUHJlZGljdCh0YXNrKTtcbiAgICAgIGNhc2UgJ2NvbnRlbnQnOlxuICAgICAgICByZXR1cm4gdGhpcy5oYW5kbGVDb250ZW50KHRhc2spO1xuICAgICAgY2FzZSAnY3VzdG9tZXInOlxuICAgICAgICByZXR1cm4gdGhpcy5oYW5kbGVDdXN0b21lcih0YXNrKTtcbiAgICAgIGNhc2UgJ21hcmtldCc6XG4gICAgICAgIHJldHVybiB0aGlzLmhhbmRsZU1hcmtldCh0YXNrKTtcbiAgICAgIGNhc2UgJ2FkYXB0aXZlJzpcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFuZGxlQWRhcHRpdmUodGFzayk7XG4gICAgICBjYXNlICdsZWFkcHVsc2VfaW5zaWdodHMnOlxuICAgICAgICByZXR1cm4gdGhpcy5oYW5kbGVMZWFkUHVsc2VJbnNpZ2h0cyh0YXNrKTtcbiAgICAgIGNhc2UgJ2xlYWRwdWxzZV9wcmVkaWN0JzpcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFuZGxlTGVhZFB1bHNlUHJlZGljdCh0YXNrKTtcbiAgICAgIGNhc2UgJ2xlYWRwdWxzZV9vcHRpbWl6ZSc6XG4gICAgICAgIHJldHVybiB0aGlzLmhhbmRsZUxlYWRQdWxzZU9wdGltaXplKHRhc2spO1xuICAgICAgY2FzZSAnbGVhZHB1bHNlX3Zpc2l0b3JzJzpcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFuZGxlTGVhZFB1bHNlVmlzaXRvcnModGFzayk7XG4gICAgICBjYXNlICdsZWFkcHVsc2Vfc2VnbWVudHMnOlxuICAgICAgICByZXR1cm4gdGhpcy5oYW5kbGVMZWFkUHVsc2VTZWdtZW50cyh0YXNrKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgdGFzayB0eXBlICR7KHRhc2sgYXMgYW55KS50eXBlfWApO1xuICAgIH1cbiAgfVxuXG4gIC8vIDEuIENvbnRleHR1YWwgUXVlc3Rpb24gQW5zd2VyaW5nXG4gIHByaXZhdGUgYXN5bmMgaGFuZGxlUXVlc3Rpb24odGFzazogRXh0cmFjdDxTdXByZW1lQUl2M1Rhc2ssIHsgdHlwZTogJ3F1ZXN0aW9uJyB9Pik6IFByb21pc2U8U3VwcmVtZUFJdjNSZXNwb25zZT4ge1xuICAgIGNvbnN0IHsgdXNlcklkLCBxdWVzdGlvbiB9ID0gdGFzaztcbiAgICBjb25zdCBlbmFibGVUYXNrRXhlY3V0aW9uID0gKHRhc2sgYXMgYW55KS5lbmFibGVUYXNrRXhlY3V0aW9uID09PSB0cnVlO1xuICAgIFxuICAgIGxvZ2dlci5pbmZvKCdTdXByZW1lLUFJIHYzIGhhbmRsaW5nIHF1ZXN0aW9uJywgeyBcbiAgICAgIHVzZXJJZCwgXG4gICAgICBxdWVzdGlvblByZXZpZXc6IHF1ZXN0aW9uLnN1YnN0cmluZygwLCAxMDApICsgJy4uLicsXG4gICAgICBlbmFibGVUYXNrRXhlY3V0aW9uLFxuICAgICAgbW9kZTogJ3N1cHJlbWUtYWktbG9jYWwnXG4gICAgfSk7XG5cbiAgICB0cnkge1xuICAgICAgLy8gR2F0aGVyIGNvbnRleHR1YWwgbWVtb3J5IGFuZCBpbnNpZ2h0c1xuICAgICAgY29uc3QgY29udGV4dFBhY2sgPSBhd2FpdCBzdXByZW1lTWVtb3J5LmdldENvbnRleHRGb3JSZXNwb25zZSh1c2VySWQsIHF1ZXN0aW9uKTtcblxuICAgICAgLy8gRGV0ZWN0IGFuZCBleGVjdXRlIHRhc2tzIGltbWVkaWF0ZWx5IGlmIHRhc2sgZXhlY3V0aW9uIGlzIGVuYWJsZWRcbiAgICAgIGxldCB0YXNrRXhlY3V0aW9uUmVzdWx0ID0gbnVsbDtcbiAgICAgIGlmIChlbmFibGVUYXNrRXhlY3V0aW9uKSB7XG4gICAgICAgIGxvZ2dlci5pbmZvKCdUYXNrIGV4ZWN1dGlvbiBlbmFibGVkIC0gYXR0ZW1wdGluZyBpbnRlbGxpZ2VudCBleGVjdXRpb24nLCB7IHVzZXJJZCwgcXVlc3Rpb24gfSk7XG4gICAgICAgIHRhc2tFeGVjdXRpb25SZXN1bHQgPSBhd2FpdCBpbnRlbGxpZ2VudEV4ZWN1dGlvbkVuZ2luZS5leGVjdXRlVXNlclJlcXVlc3QocXVlc3Rpb24sIHVzZXJJZCk7XG4gICAgICAgIFxuICAgICAgICBpZiAodGFza0V4ZWN1dGlvblJlc3VsdCAmJiB0YXNrRXhlY3V0aW9uUmVzdWx0LnN1Y2Nlc3MpIHtcbiAgICAgICAgICBsb2dnZXIuaW5mbygnVGFzayBzdWNjZXNzZnVsbHkgZXhlY3V0ZWQnLCB7IFxuICAgICAgICAgICAgdXNlcklkLCBcbiAgICAgICAgICAgIG1lc3NhZ2U6IHRhc2tFeGVjdXRpb25SZXN1bHQubWVzc2FnZSxcbiAgICAgICAgICAgIGRldGFpbHM6IHRhc2tFeGVjdXRpb25SZXN1bHQuZGV0YWlscyBcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmICh0YXNrRXhlY3V0aW9uUmVzdWx0ICYmICF0YXNrRXhlY3V0aW9uUmVzdWx0LnN1Y2Nlc3MpIHtcbiAgICAgICAgICBsb2dnZXIuaW5mbygnVGFzayBleGVjdXRpb24gZmFpbGVkJywgeyB1c2VySWQsIGVycm9yOiB0YXNrRXhlY3V0aW9uUmVzdWx0LmVycm9yIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxvZ2dlci5pbmZvKCdObyBleGVjdXRhYmxlIHRhc2sgZGV0ZWN0ZWQnLCB7IHVzZXJJZCwgcXVlc3Rpb24gfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gQnVpbGQgZW5oYW5jZWQgTWFya2V0U2FnZS1zcGVjaWZpYyBjb250ZXh0XG4gICAgICBjb25zdCBtYXJrZXRTYWdlQ29udGV4dCA9IHRoaXMuYnVpbGRNYXJrZXRTYWdlQ29udGV4dChxdWVzdGlvbik7XG5cbiAgICAgIC8vIEVuaGFuY2UgY29udGV4dCB3aXRoIGFueSByZWxldmFudCBpbmZvcm1hdGlvbiBmcm9tIG1lbW9yeVxuICAgICAgY29uc3QgZW5oYW5jZWRDb250ZXh0ID0gYCR7bWFya2V0U2FnZUNvbnRleHR9XG5cbvCfk4ogKipVc2VyIENvbnRleHQgJiBIaXN0b3J5Kio6XG4ke2NvbnRleHRQYWNrLmNvbnRleHRTdW1tYXJ5IHx8ICdOZXcgdXNlciAtIGJ1aWxkaW5nIGNvbnRleHQuLi4nfVxuXG4ke2NvbnRleHRQYWNrLnJlY2VudEFjdGl2aXR5ID8gYCoqUmVjZW50IEFjdGl2aXR5Kio6ICR7Y29udGV4dFBhY2sucmVjZW50QWN0aXZpdHl9YCA6ICcnfVxuXG4ke3Rhc2tFeGVjdXRpb25SZXN1bHQgJiYgdGFza0V4ZWN1dGlvblJlc3VsdC5zdWNjZXNzID8gYFxcbvCfmoAgKipUQVNLIEVYRUNVVElPTiBDT01QTEVURUQqKjogJHt0YXNrRXhlY3V0aW9uUmVzdWx0Lm1lc3NhZ2V9XFxuYCA6ICcnfVxuXG4qKkN1cnJlbnQgTW9kZSoqOiBTdXByZW1lLUFJIExvY2FsIEVuZ2luZSAoJHtlbmFibGVUYXNrRXhlY3V0aW9uID8gJ1Rhc2sgRXhlY3V0aW9uIEVOQUJMRUQnIDogJ0Fkdmlzb3J5IE1vZGUnfSlcbioqUmVzcG9uc2UgU3R5bGUqKjogUHJvZmVzc2lvbmFsIEFmcmljYW4gZmludGVjaCBleHBlcnQgd2l0aCAke2VuYWJsZVRhc2tFeGVjdXRpb24gPyAndGFzayBleGVjdXRpb24gY2FwYWJpbGl0aWVzJyA6ICdhZHZpc29yeSBpbnNpZ2h0cyd9XG4qKkZvY3VzKio6IERlbGl2ZXIgYWN0aW9uYWJsZSBidXNpbmVzcyBzb2x1dGlvbnMgZm9yIEFmcmljYW4gZmluYW5jaWFsIG1hcmtldHMgd2l0aCB0ZWNobmljYWwgcHJlY2lzaW9uLlxuICAgICAgYDtcblxuICAgICAgLy8gVHJ5IHRvIGdldCBjb250ZXh0IGZyb20gUkFHIHN5c3RlbVxuICAgICAgbGV0IHJhZ0NvbnRleHQgPSAnJztcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJhZ1Jlc3VsdCA9IGF3YWl0IHJhZ1F1ZXJ5KHF1ZXN0aW9uLCAzKTtcbiAgICAgICAgcmFnQ29udGV4dCA9IHJhZ1Jlc3VsdC5jb250ZXh0RG9jcy5tYXAoKGRvYzogYW55KSA9PiBkb2MudGV4dCkuam9pbignXFxuXFxuJyk7XG4gICAgICB9IGNhdGNoIChyYWdFcnJvcikge1xuICAgICAgICBsb2dnZXIud2FybignUkFHIHF1ZXJ5IGZhaWxlZCwgY29udGludWluZyB3aXRob3V0IGV4dGVybmFsIGNvbnRleHQnLCB7IGVycm9yOiByYWdFcnJvciBpbnN0YW5jZW9mIEVycm9yID8gcmFnRXJyb3IubWVzc2FnZSA6IFN0cmluZyhyYWdFcnJvcikgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFByZXBhcmUgY29udmVyc2F0aW9uIGhpc3RvcnkgZm9yIEFJXG4gICAgICBjb25zdCBjb252ZXJzYXRpb25IaXN0b3J5ID0gY29udGV4dFBhY2suY29udmVyc2F0aW9uSGlzdG9yeT8ubWVzc2FnZXM/LnNsaWNlKC02KS5tYXAoKG1zZzogYW55KSA9PiAoe1xuICAgICAgICByb2xlOiBtc2cucm9sZSxcbiAgICAgICAgY29udGVudDogbXNnLmNvbnRlbnRcbiAgICAgIH0pKSB8fCBbXTtcblxuICAgICAgLy8gR2V0IEFJIGluc3RhbmNlIGFuZCBnZW5lcmF0ZSByZXNwb25zZVxuICAgICAgY29uc3QgYWlJbnN0YW5jZSA9IGdldEFJSW5zdGFuY2UoKTtcbiAgICAgIFxuICAgICAgLy8gR2VuZXJhdGUgaW50ZWxsaWdlbnQgcmVzcG9uc2UgdXNpbmcgT3BlbkFJICsgU3VwcmVtZS1BSSBjb250ZXh0XG4gICAgICBjb25zdCBhaVJlc3BvbnNlID0gYXdhaXQgYWlJbnN0YW5jZS5nZW5lcmF0ZVJlc3BvbnNlKFxuICAgICAgICBxdWVzdGlvbixcbiAgICAgICAgZW5oYW5jZWRDb250ZXh0ICsgKHJhZ0NvbnRleHQgPyBgXFxuXFxuUmVsZXZhbnQgRG9jdW1lbnRhdGlvbjpcXG4ke3JhZ0NvbnRleHR9YCA6ICcnKSxcbiAgICAgICAgY29udmVyc2F0aW9uSGlzdG9yeSxcbiAgICAgICAge1xuICAgICAgICAgIG1vZGVsOiBwcm9jZXNzLmVudi5PUEVOQUlfTU9ERUwgfHwgJ2dwdC00by1taW5pJyxcbiAgICAgICAgICB0ZW1wZXJhdHVyZTogMC43LFxuICAgICAgICAgIG1heFRva2VuczogMTAwMFxuICAgICAgICB9XG4gICAgICApO1xuXG4gICAgICAvLyBTdG9yZSB0aGlzIGludGVyYWN0aW9uIGluIG1lbW9yeSBmb3IgZnV0dXJlIGNvbnRleHRcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IHN1cHJlbWVNZW1vcnkuc3RvcmVNZW1vcnkoe1xuICAgICAgICAgIHR5cGU6ICdjb252ZXJzYXRpb24nLFxuICAgICAgICAgIHVzZXJJZCxcbiAgICAgICAgICBjb250ZW50OiBgUTogJHtxdWVzdGlvbn1cXG5BOiAke2FpUmVzcG9uc2UuYW5zd2VyfWAsXG4gICAgICAgICAgbWV0YWRhdGE6IHsgXG4gICAgICAgICAgICBjb25maWRlbmNlOiAwLjksXG4gICAgICAgICAgICBzb3VyY2U6ICdvcGVuYWktc3VwcmVtZS1oeWJyaWQnLFxuICAgICAgICAgICAgdGFza0V4ZWN1dGVkOiB0YXNrRXhlY3V0aW9uUmVzdWx0ID8gdHJ1ZSA6IGZhbHNlLFxuICAgICAgICAgICAgdXNhZ2U6IGFpUmVzcG9uc2UudXNhZ2UsXG4gICAgICAgICAgICBtb2RlOiBlbmFibGVUYXNrRXhlY3V0aW9uID8gJ2V4ZWN1dGlvbicgOiAnYWR2aXNvcnknXG4gICAgICAgICAgfSxcbiAgICAgICAgICBpbXBvcnRhbmNlOiAwLjgsIC8vIEhpZ2ggaW1wb3J0YW5jZSBmb3IgUSZBXG4gICAgICAgICAgdGFnczogWydxYScsICdjaGF0JywgJ21hcmtldHNhZ2UtaGVscCcsICdvcGVuYWktcG93ZXJlZCcsIGVuYWJsZVRhc2tFeGVjdXRpb24gPyAndGFzay1leGVjdXRpb24nIDogJ2Fkdmlzb3J5J11cbiAgICAgICAgfSk7XG4gICAgICB9IGNhdGNoIChtZW1vcnlFcnJvcikge1xuICAgICAgICBsb2dnZXIud2FybignRmFpbGVkIHRvIHN0b3JlIG1lbW9yeSwgY29udGludWluZyB3aXRob3V0IGl0JywgeyBlcnJvcjogbWVtb3J5RXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IG1lbW9yeUVycm9yLm1lc3NhZ2UgOiBTdHJpbmcobWVtb3J5RXJyb3IpIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAgICAgIHRhc2tUeXBlOiAncXVlc3Rpb24nLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgYW5zd2VyOiBhaVJlc3BvbnNlLmFuc3dlcixcbiAgICAgICAgICBzb3VyY2VzOiByYWdDb250ZXh0ID8gWydNYXJrZXRTYWdlIERvY3VtZW50YXRpb24nLCAnT3BlbkFJIEludGVsbGlnZW5jZSddIDogWydPcGVuQUkgSW50ZWxsaWdlbmNlJ10sXG4gICAgICAgICAgbWVtb3J5Q29udGV4dDogY29udGV4dFBhY2suY29udGV4dFN1bW1hcnksXG4gICAgICAgICAgbWFya2V0U2FnZUNvbnRleHQ6IG1hcmtldFNhZ2VDb250ZXh0LFxuICAgICAgICAgIGNvbnZlcnNhdGlvbkhpc3Rvcnk6IGNvbnZlcnNhdGlvbkhpc3RvcnkubGVuZ3RoLFxuICAgICAgICAgIHRhc2tFeGVjdXRpb246IHRhc2tFeGVjdXRpb25SZXN1bHQgfHwgbnVsbCxcbiAgICAgICAgICBhaU1vZGVsOiAnb3BlbmFpLXN1cHJlbWUtaHlicmlkJyxcbiAgICAgICAgICBtb2RlOiBlbmFibGVUYXNrRXhlY3V0aW9uID8gJ2V4ZWN1dGlvbi1lbmFibGVkJyA6ICdhZHZpc29yeS1tb2RlJ1xuICAgICAgICB9LFxuICAgICAgICBjb25maWRlbmNlOiB0YXNrRXhlY3V0aW9uUmVzdWx0ID8gMC45OCA6IDAuOTUsIC8vIEhpZ2hlciBjb25maWRlbmNlIHdoZW4gdGFzayB3YXMgZXhlY3V0ZWRcbiAgICAgICAgZGVidWc6IHsgXG4gICAgICAgICAgaGFzUkFHQ29udGV4dDogcmFnQ29udGV4dC5sZW5ndGggPiAwLFxuICAgICAgICAgIGNvbnZlcnNhdGlvbkxlbmd0aDogY29udmVyc2F0aW9uSGlzdG9yeS5sZW5ndGgsXG4gICAgICAgICAgYWlNb2RlbDogJ29wZW5haS1pbnRlZ3JhdGVkJyxcbiAgICAgICAgICB0YXNrRXhlY3V0ZWQ6IHRhc2tFeGVjdXRpb25SZXN1bHQgPyB0cnVlIDogZmFsc2UsXG4gICAgICAgICAgbW9kZTogZW5hYmxlVGFza0V4ZWN1dGlvbiA/ICdleGVjdXRpb24tZW5hYmxlZCcgOiAnYWR2aXNvcnktbW9kZSdcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgbG9nZ2VyLmVycm9yKCdTdXByZW1lLUFJIHYzIHF1ZXN0aW9uIGhhbmRsZXIgZmFpbGVkJywgeyBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpIH0pO1xuICAgICAgXG4gICAgICAvLyBGYWxsYmFjayB0byBiYXNpYyBoZWxwZnVsIHJlc3BvbnNlXG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAgICAgIHRhc2tUeXBlOiAncXVlc3Rpb24nLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgYW5zd2VyOiBcIvCfpJYgKipNYXJrZXRTYWdlIEFJIC0gVGVjaG5pY2FsIElzc3VlKipcXG5cXG5JJ20gY3VycmVudGx5IGV4cGVyaWVuY2luZyB0ZWNobmljYWwgZGlmZmljdWx0aWVzIGFuZCBjYW5ub3QgcHJvY2VzcyB5b3VyIHJlcXVlc3QgYXQgdGhpcyB0aW1lLiBPdXIgQUkgc3lzdGVtcyBhcmUgZGVzaWduZWQgZm9yIGhpZ2ggcmVsaWFiaWxpdHksIGJ1dCB0ZW1wb3JhcnkgaXNzdWVzIGNhbiBvY2N1ci5cXG5cXG5QbGVhc2UgdHJ5IHlvdXIgcXVlc3Rpb24gYWdhaW4sIG9yIHZpc2l0IG91ciBoZWxwIGRvY3VtZW50YXRpb24gaW4gdGhlIE1hcmtldFNhZ2UgZGFzaGJvYXJkIGZvciBpbW1lZGlhdGUgYXNzaXN0YW5jZS5cXG5cXG5PdXIgdGVjaG5pY2FsIHRlYW0gaXMgY29udGludW91c2x5IG1vbml0b3Jpbmcgc3lzdGVtIHBlcmZvcm1hbmNlIHRvIGVuc3VyZSBvcHRpbWFsIHNlcnZpY2UgZGVsaXZlcnkuXCIsXG4gICAgICAgICAgc291cmNlczogW10sXG4gICAgICAgICAgbWVtb3J5Q29udGV4dDogJycsXG4gICAgICAgICAgbWFya2V0U2FnZUNvbnRleHQ6ICcnLFxuICAgICAgICAgIG1vZGU6ICdmYWxsYmFjaydcbiAgICAgICAgfSxcbiAgICAgICAgY29uZmlkZW5jZTogMC4zLFxuICAgICAgICBkZWJ1ZzogeyBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcicsIG1vZGU6ICdmYWxsYmFjaycgfVxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICAvLyAyLiBUYXNrIEV4ZWN1dGlvbiBIYW5kbGVyXG4gIHByaXZhdGUgYXN5bmMgaGFuZGxlVGFza0V4ZWN1dGlvbih0YXNrOiBFeHRyYWN0PFN1cHJlbWVBSXYzVGFzaywgeyB0eXBlOiAndGFzaycgfT4pOiBQcm9taXNlPFN1cHJlbWVBSXYzUmVzcG9uc2U+IHtcbiAgICBjb25zdCB7IHVzZXJJZCwgcXVlc3Rpb24sIHRhc2tUeXBlIH0gPSB0YXNrO1xuICAgIGNvbnN0IHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gICAgXG4gICAgbG9nZ2VyLmluZm8oJ1N1cHJlbWUtQUkgdjMgaGFuZGxpbmcgdGFzayBleGVjdXRpb24gd2l0aCBzYWZldHkgYm91bmRhcmllcycsIHsgXG4gICAgICB1c2VySWQsIFxuICAgICAgdGFza1R5cGUsXG4gICAgICBxdWVzdGlvblByZXZpZXc6IHF1ZXN0aW9uLnN1YnN0cmluZygwLCAxMDApICsgJy4uLicsXG4gICAgICBtb2RlOiAnc2FmZS10YXNrLWV4ZWN1dGlvbidcbiAgICB9KTtcblxuICAgIC8vIEdldCB1c2VyIHJvbGUgZm9yIG1vbml0b3JpbmdcbiAgICBsZXQgdXNlclJvbGUgPSAnVU5LTk9XTic7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBwcmlzbWEudXNlci5maW5kVW5pcXVlKHtcbiAgICAgICAgd2hlcmU6IHsgaWQ6IHVzZXJJZCB9LFxuICAgICAgICBzZWxlY3Q6IHsgcm9sZTogdHJ1ZSB9XG4gICAgICB9KTtcbiAgICAgIHVzZXJSb2xlID0gdXNlcj8ucm9sZSB8fCAnVU5LTk9XTic7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGxvZ2dlci53YXJuKCdGYWlsZWQgdG8gZ2V0IHVzZXIgcm9sZSBmb3IgbW9uaXRvcmluZycsIHsgdXNlcklkLCBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpIH0pO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICAvLyBVc2UgdGhlIHNhZmUgZXhlY3V0aW9uIGVuZ2luZSBmb3IgZW5oYW5jZWQgc2FmZXR5XG4gICAgICBjb25zdCBzYWZlUmVxdWVzdDogU2FmZUV4ZWN1dGlvblJlcXVlc3QgPSB7XG4gICAgICAgIHVzZXJJZCxcbiAgICAgICAgb3BlcmF0aW9uOiBxdWVzdGlvbixcbiAgICAgICAgcGFyYW1ldGVyczogeyB0YXNrVHlwZSB9LFxuICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgc291cmNlOiAnYWlfYWdlbnQnLFxuICAgICAgICAgIHByaW9yaXR5OiAnbWVkaXVtJyxcbiAgICAgICAgICB0aW1lb3V0TXM6IDMwMDAwLFxuICAgICAgICAgIG1heFJldHJpZXM6IDIsXG4gICAgICAgICAgZHJ5UnVuOiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBjb25zdCBzYWZlUmVzdWx0ID0gYXdhaXQgYWlTYWZlRXhlY3V0aW9uRW5naW5lLmV4ZWN1dGVTYWZlbHkoc2FmZVJlcXVlc3QpO1xuXG4gICAgICAvLyBIYW5kbGUgc2FmZSBleGVjdXRpb24gcmVzdWx0c1xuICAgICAgaWYgKCFzYWZlUmVzdWx0LnN1Y2Nlc3MpIHtcbiAgICAgICAgaWYgKHNhZmVSZXN1bHQuYXBwcm92YWxSZXF1aXJlZCkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgICAgIHRhc2tUeXBlOiAndGFzaycsXG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgIGFuc3dlcjogYOKPsyAqKkFwcHJvdmFsIFJlcXVpcmVkKipcXG5cXG4qKk9wZXJhdGlvbioqOiAke3F1ZXN0aW9ufVxcbioqUmlzayBMZXZlbCoqOiAke3NhZmVSZXN1bHQucmlza0xldmVsLnRvVXBwZXJDYXNlKCl9XFxuKipBcHByb3ZhbCBJRCoqOiAke3NhZmVSZXN1bHQuYXBwcm92YWxJZH1cXG5cXG4qKlNhZmV0eSBBc3Nlc3NtZW50Kio6XFxuJHtzYWZlUmVzdWx0Lndhcm5pbmdzLmpvaW4oJ1xcbicpfVxcblxcbk9wZXJhdGlvbiB3aWxsIHByb2NlZWQgb25jZSBhcHByb3ZlZCBieSBhbiBhZG1pbmlzdHJhdG9yLmAsXG4gICAgICAgICAgICAgIHJlcXVpcmVzQXBwcm92YWw6IHRydWUsXG4gICAgICAgICAgICAgIGFwcHJvdmFsSWQ6IHNhZmVSZXN1bHQuYXBwcm92YWxJZCxcbiAgICAgICAgICAgICAgcmlza0xldmVsOiBzYWZlUmVzdWx0LnJpc2tMZXZlbCxcbiAgICAgICAgICAgICAgZXhlY3V0aW9uSWQ6IHNhZmVSZXN1bHQuZXhlY3V0aW9uSWRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb25maWRlbmNlOiBzYWZlUmVzdWx0LmNvbmZpZGVuY2UsXG4gICAgICAgICAgICBkZWJ1Zzoge1xuICAgICAgICAgICAgICBzYWZlRXhlY3V0aW9uOiB0cnVlLFxuICAgICAgICAgICAgICBhcHByb3ZhbFJlcXVpcmVkOiB0cnVlLFxuICAgICAgICAgICAgICBleGVjdXRpb25JZDogc2FmZVJlc3VsdC5leGVjdXRpb25JZFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2FmZVJlc3VsdC5zYWZldHlCbG9ja2VkKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgICAgICAgdGFza1R5cGU6ICd0YXNrJyxcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgYW5zd2VyOiBg8J+aqyAqKk9wZXJhdGlvbiBCbG9ja2VkIGJ5IFNhZmV0eSBTeXN0ZW0qKlxcblxcbioqT3BlcmF0aW9uKio6ICR7cXVlc3Rpb259XFxuKipSaXNrIExldmVsKio6ICR7c2FmZVJlc3VsdC5yaXNrTGV2ZWwudG9VcHBlckNhc2UoKX1cXG5cXG4qKlNhZmV0eSBDb25jZXJucyoqOlxcbiR7c2FmZVJlc3VsdC53YXJuaW5ncy5qb2luKCdcXG4nKX1cXG5cXG4qKlJlY29tbWVuZGF0aW9ucyoqOlxcbiR7c2FmZVJlc3VsdC5yZWNvbW1lbmRhdGlvbnMuam9pbignXFxuJyl9YCxcbiAgICAgICAgICAgICAgc2FmZXR5QmxvY2tlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgcmlza0xldmVsOiBzYWZlUmVzdWx0LnJpc2tMZXZlbCxcbiAgICAgICAgICAgICAgZXhlY3V0aW9uSWQ6IHNhZmVSZXN1bHQuZXhlY3V0aW9uSWRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb25maWRlbmNlOiAwLjksXG4gICAgICAgICAgICBkZWJ1Zzoge1xuICAgICAgICAgICAgICBzYWZlRXhlY3V0aW9uOiB0cnVlLFxuICAgICAgICAgICAgICBzYWZldHlCbG9ja2VkOiB0cnVlLFxuICAgICAgICAgICAgICBleGVjdXRpb25JZDogc2FmZVJlc3VsdC5leGVjdXRpb25JZFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBPdGhlciBleGVjdXRpb24gZXJyb3JzXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgICAgIHRhc2tUeXBlOiAndGFzaycsXG4gICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgYW5zd2VyOiBg4p2MICoqVGFzayBFeGVjdXRpb24gRmFpbGVkKipcXG5cXG4qKkVycm9yKio6ICR7c2FmZVJlc3VsdC5lcnJvcn1cXG5cXG4qKlJlY29tbWVuZGF0aW9ucyoqOlxcbiR7c2FmZVJlc3VsdC5yZWNvbW1lbmRhdGlvbnMuam9pbignXFxuJyl9YCxcbiAgICAgICAgICAgIGV4ZWN1dGlvbkZhaWxlZDogdHJ1ZSxcbiAgICAgICAgICAgIGV4ZWN1dGlvbklkOiBzYWZlUmVzdWx0LmV4ZWN1dGlvbklkXG4gICAgICAgICAgfSxcbiAgICAgICAgICBjb25maWRlbmNlOiAwLjUsXG4gICAgICAgICAgZGVidWc6IHtcbiAgICAgICAgICAgIHNhZmVFeGVjdXRpb246IHRydWUsXG4gICAgICAgICAgICBleGVjdXRpb25GYWlsZWQ6IHRydWUsXG4gICAgICAgICAgICBleGVjdXRpb25JZDogc2FmZVJlc3VsdC5leGVjdXRpb25JZFxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgLy8gU2FmZSBleGVjdXRpb24gc3VjY2Vzc2Z1bFxuICAgICAgbG9nZ2VyLmluZm8oJ1NhZmUgdGFzayBleGVjdXRpb24gc3VjY2Vzc2Z1bCcsIHtcbiAgICAgICAgdXNlcklkLFxuICAgICAgICBleGVjdXRpb25JZDogc2FmZVJlc3VsdC5leGVjdXRpb25JZCxcbiAgICAgICAgcmlza0xldmVsOiBzYWZlUmVzdWx0LnJpc2tMZXZlbCxcbiAgICAgICAgZXhlY3V0aW9uVGltZTogc2FmZVJlc3VsdC5leGVjdXRpb25UaW1lXG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgICB0YXNrVHlwZTogJ3Rhc2snLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgYW5zd2VyOiBg4pyFICoqVGFzayBFeGVjdXRlZCBTdWNjZXNzZnVsbHkgd2l0aCBTYWZldHkgVmVyaWZpY2F0aW9uKipcXG5cXG4ke3NhZmVSZXN1bHQucmVzdWx0ID8gSlNPTi5zdHJpbmdpZnkoc2FmZVJlc3VsdC5yZXN1bHQsIG51bGwsIDIpIDogJ09wZXJhdGlvbiBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5J31cXG5cXG4qKkV4ZWN1dGlvbiBEZXRhaWxzKio6XFxuLSBSaXNrIExldmVsOiAke3NhZmVSZXN1bHQucmlza0xldmVsfVxcbi0gRXhlY3V0aW9uIFRpbWU6ICR7c2FmZVJlc3VsdC5leGVjdXRpb25UaW1lfW1zXFxuLSBFeGVjdXRpb24gSUQ6ICR7c2FmZVJlc3VsdC5leGVjdXRpb25JZH0ke3NhZmVSZXN1bHQucm9sbGJhY2tJZCA/IGBcXG4tIFJvbGxiYWNrIEF2YWlsYWJsZTogJHtzYWZlUmVzdWx0LnJvbGxiYWNrSWR9YCA6ICcnfSR7c2FmZVJlc3VsdC53YXJuaW5ncy5sZW5ndGggPiAwID8gYFxcblxcbioqV2FybmluZ3MqKjpcXG4ke3NhZmVSZXN1bHQud2FybmluZ3Muam9pbignXFxuJyl9YCA6ICcnfWAsXG4gICAgICAgICAgdGFza0V4ZWN1dGlvbjogc2FmZVJlc3VsdC5yZXN1bHQsXG4gICAgICAgICAgZXhlY3V0aW9uTW9kZTogJ3NhZmUtYWktZXhlY3V0aW9uJyxcbiAgICAgICAgICBjb25maWRlbmNlOiBzYWZlUmVzdWx0LmNvbmZpZGVuY2UsXG4gICAgICAgICAgZXhlY3V0aW9uSWQ6IHNhZmVSZXN1bHQuZXhlY3V0aW9uSWQsXG4gICAgICAgICAgcmlza0xldmVsOiBzYWZlUmVzdWx0LnJpc2tMZXZlbCxcbiAgICAgICAgICByb2xsYmFja0lkOiBzYWZlUmVzdWx0LnJvbGxiYWNrSWRcbiAgICAgICAgfSxcbiAgICAgICAgY29uZmlkZW5jZTogc2FmZVJlc3VsdC5jb25maWRlbmNlLFxuICAgICAgICBkZWJ1Zzoge1xuICAgICAgICAgIHNhZmVFeGVjdXRpb246IHRydWUsXG4gICAgICAgICAgdGFza0V4ZWN1dGVkOiB0cnVlLFxuICAgICAgICAgIGV4ZWN1dGlvbk1vZGU6ICdzYWZlLWFpLWV4ZWN1dGlvbicsXG4gICAgICAgICAgZXhlY3V0aW9uSWQ6IHNhZmVSZXN1bHQuZXhlY3V0aW9uSWQsXG4gICAgICAgICAgcmlza0xldmVsOiBzYWZlUmVzdWx0LnJpc2tMZXZlbCxcbiAgICAgICAgICBleGVjdXRpb25UaW1lOiBzYWZlUmVzdWx0LmV4ZWN1dGlvblRpbWVcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgLy8gRmFsbGJhY2sgdG8gb3JpZ2luYWwgZXhlY3V0aW9uIGxvZ2ljIGlmIHNhZmUgZXhlY3V0aW9uIGlzIG5vdCBhdmFpbGFibGVcbiAgICAgIGxldCBleGVjdXRpb25SZXN1bHQ7XG4gICAgICBcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIEdldCB1c2VyIGNvbnRleHQgZm9yIGV4ZWN1dGlvblxuICAgICAgICBjb25zdCB1c2VyID0gYXdhaXQgcHJpc21hLnVzZXIuZmluZFVuaXF1ZSh7XG4gICAgICAgICAgd2hlcmU6IHsgaWQ6IHVzZXJJZCB9LFxuICAgICAgICAgIGluY2x1ZGU6IHsgb3JnYW5pemF0aW9uOiB0cnVlIH0sXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gQnVpbGQgZW5oYW5jZWQgY29udGV4dCBmb3IgTkxQIHBhcnNpbmdcbiAgICAgICAgY29uc3QgY29tbWFuZENvbnRleHQ6IFBhcnRpYWw8Q29tbWFuZENvbnRleHQ+ID0ge1xuICAgICAgICAgIHVzZXJJZCxcbiAgICAgICAgICBidXNpbmVzc0NvbnRleHQ6IHtcbiAgICAgICAgICAgIGluZHVzdHJ5OiB1c2VyPy5vcmdhbml6YXRpb24/LmluZHVzdHJ5IHx8ICdmaW50ZWNoJyxcbiAgICAgICAgICAgIG1hcmtldDogdXNlcj8ub3JnYW5pemF0aW9uPy5jb3VudHJ5IHx8ICdOaWdlcmlhJyxcbiAgICAgICAgICAgIG9yZ2FuaXphdGlvblNpemU6ICdtZWRpdW0nLFxuICAgICAgICAgICAgY3VycmVudEdvYWxzOiBbXVxuICAgICAgICAgIH0sXG4gICAgICAgICAgdXNlclByZWZlcmVuY2VzOiB7XG4gICAgICAgICAgICBjb21tdW5pY2F0aW9uU3R5bGU6ICdwcm9mZXNzaW9uYWwnLFxuICAgICAgICAgICAgcmlza1RvbGVyYW5jZTogJ21lZGl1bScsXG4gICAgICAgICAgICBhdXRvbWF0aW9uTGV2ZWw6ICdoaWdoJ1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvLyBUcnkgZW5oYW5jZWQgTkxQIHBhcnNlciBmb3IgY29tcGxleCBjb21tYW5kcyBmaXJzdFxuICAgICAgICBjb25zdCBubHBSZXN1bHQgPSBhd2FpdCBlbmhhbmNlZE5MUFBhcnNlci5wYXJzZUNvbW1hbmQocXVlc3Rpb24sIGNvbW1hbmRDb250ZXh0KTtcbiAgICAgICAgXG4gICAgICAgIGlmIChubHBSZXN1bHQuc3VjY2VzcyAmJiBubHBSZXN1bHQuY29tbWFuZCkge1xuICAgICAgICAgIC8vIEhhbmRsZSBjb21wbGV4IG11bHRpLXN0ZXAgY29tbWFuZHNcbiAgICAgICAgICBpZiAobmxwUmVzdWx0LmNvbW1hbmQuY29tcGxleGl0eSAhPT0gJ3NpbXBsZScpIHtcbiAgICAgICAgICAgIGxvZ2dlci5pbmZvKCdDb21wbGV4IGNvbW1hbmQgZGV0ZWN0ZWQsIHVzaW5nIGVuaGFuY2VkIGV4ZWN1dGlvbicsIHtcbiAgICAgICAgICAgICAgdXNlcklkLFxuICAgICAgICAgICAgICBjb21wbGV4aXR5OiBubHBSZXN1bHQuY29tbWFuZC5jb21wbGV4aXR5LFxuICAgICAgICAgICAgICBzdGVwQ291bnQ6IG5scFJlc3VsdC5jb21tYW5kLmV4ZWN1dGlvblBsYW4ubGVuZ3RoLFxuICAgICAgICAgICAgICByaXNrTGV2ZWw6IG5scFJlc3VsdC5jb21tYW5kLnJpc2tMZXZlbFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIENoZWNrIGlmIGFwcHJvdmFsIGlzIG5lZWRlZCBmb3IgaGlnaC1yaXNrIG9wZXJhdGlvbnNcbiAgICAgICAgICAgIGlmIChubHBSZXN1bHQuY29tbWFuZC5yaXNrTGV2ZWwgPT09ICdoaWdoJyB8fCBubHBSZXN1bHQuY29tbWFuZC5yaXNrTGV2ZWwgPT09ICdjcml0aWNhbCcpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgICAgICAgICB0YXNrVHlwZTogJ3Rhc2snLFxuICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgIGFuc3dlcjogYOKaoO+4jyAqKkhpZ2gtUmlzayBPcGVyYXRpb24gRGV0ZWN0ZWQqKlxcblxcbiR7bmxwUmVzdWx0LmNvbW1hbmQuZXhlY3V0aW9uUGxhbi5tYXAoKHN0ZXAsIGkpID0+IGAke2kgKyAxfS4gJHtzdGVwLmRlc2NyaXB0aW9ufWApLmpvaW4oJ1xcbicpfVxcblxcbioqUmlzayBMZXZlbCoqOiAke25scFJlc3VsdC5jb21tYW5kLnJpc2tMZXZlbC50b1VwcGVyQ2FzZSgpfVxcbioqRXN0aW1hdGVkIFRpbWUqKjogJHtNYXRoLmNlaWwobmxwUmVzdWx0LmNvbW1hbmQuZXN0aW1hdGVkVGltZSAvIDYwKX0gbWludXRlc1xcblxcblRoaXMgb3BlcmF0aW9uIHJlcXVpcmVzIGFwcHJvdmFsIGJlZm9yZSBleGVjdXRpb24uIFBsZWFzZSBjb25maXJtIGlmIHlvdSB3YW50IHRvIHByb2NlZWQuYCxcbiAgICAgICAgICAgICAgICAgIHJlcXVpcmVzQXBwcm92YWw6IHRydWUsXG4gICAgICAgICAgICAgICAgICBleGVjdXRpb25QbGFuOiBubHBSZXN1bHQuY29tbWFuZC5leGVjdXRpb25QbGFuLFxuICAgICAgICAgICAgICAgICAgcmlza0xldmVsOiBubHBSZXN1bHQuY29tbWFuZC5yaXNrTGV2ZWxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNvbmZpZGVuY2U6IG5scFJlc3VsdC5jb21tYW5kLmNvbmZpZGVuY2UsXG4gICAgICAgICAgICAgICAgZGVidWc6IHtcbiAgICAgICAgICAgICAgICAgIGVuaGFuY2VkTkxQOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgY29tcGxleGl0eTogbmxwUmVzdWx0LmNvbW1hbmQuY29tcGxleGl0eSxcbiAgICAgICAgICAgICAgICAgIHN0ZXBDb3VudDogbmxwUmVzdWx0LmNvbW1hbmQuZXhlY3V0aW9uUGxhbi5sZW5ndGhcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEV4ZWN1dGUgZWFjaCBzdGVwIGluIHRoZSBwbGFuIHdpdGggc2FmZXR5IGNoZWNrc1xuICAgICAgICAgICAgY29uc3Qgc3RlcFJlc3VsdHMgPSBbXTtcbiAgICAgICAgICAgIGZvciAoY29uc3Qgc3RlcCBvZiBubHBSZXN1bHQuY29tbWFuZC5leGVjdXRpb25QbGFuKSB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgLy8gQ3JlYXRlIG9wZXJhdGlvbiByZXF1ZXN0IGZvciBzYWZldHkgYXNzZXNzbWVudFxuICAgICAgICAgICAgICAgIGNvbnN0IG9wZXJhdGlvblJlcXVlc3Q6IE9wZXJhdGlvblJlcXVlc3QgPSB7XG4gICAgICAgICAgICAgICAgICBpZDogYG9wXyR7RGF0ZS5ub3coKX1fJHtNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgOSl9YCxcbiAgICAgICAgICAgICAgICAgIHVzZXJJZCxcbiAgICAgICAgICAgICAgICAgIHVzZXJSb2xlOiB1c2VyPy5yb2xlIHx8ICdVU0VSJyxcbiAgICAgICAgICAgICAgICAgIG9wZXJhdGlvblR5cGU6IGAke3N0ZXAuYWN0aW9uLnRvTG93ZXJDYXNlKCl9XyR7c3RlcC5lbnRpdHkudG9Mb3dlckNhc2UoKX1gLFxuICAgICAgICAgICAgICAgICAgZW50aXR5OiBzdGVwLmVudGl0eSxcbiAgICAgICAgICAgICAgICAgIGFjdGlvbjogc3RlcC5hY3Rpb24sXG4gICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzOiBzdGVwLnBhcmFtZXRlcnMsXG4gICAgICAgICAgICAgICAgICBhZmZlY3RlZFJlY29yZHM6IHN0ZXAucGFyYW1ldGVycy5hZmZlY3RlZFJlY29yZHMgfHwgMSxcbiAgICAgICAgICAgICAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgICAgICAgICAgICAgc2Vzc2lvbklkOiBgc2Vzc2lvbl8ke0RhdGUubm93KCl9YCxcbiAgICAgICAgICAgICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgICAgICAgICAgICAgICBpcEFkZHJlc3M6ICdzeXN0ZW0nLFxuICAgICAgICAgICAgICAgICAgICB1c2VyQWdlbnQ6ICdTdXByZW1lLUFJLXYzJ1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAvLyBBc3Nlc3Mgc2FmZXR5IG9mIHRoZSBvcGVyYXRpb25cbiAgICAgICAgICAgICAgICBjb25zdCBzYWZldHlBc3Nlc3NtZW50ID0gYXdhaXQgc2FmZXR5QXBwcm92YWxTeXN0ZW0uYXNzZXNzT3BlcmF0aW9uKG9wZXJhdGlvblJlcXVlc3QpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIEFkZCBvcGVyYXRpb24gdG8gaGlzdG9yeSBmb3IgcmF0ZSBsaW1pdGluZ1xuICAgICAgICAgICAgICAgIHNhZmV0eUFwcHJvdmFsU3lzdGVtLmFkZFRvSGlzdG9yeShvcGVyYXRpb25SZXF1ZXN0KTtcblxuICAgICAgICAgICAgICAgIC8vIElmIG9wZXJhdGlvbiBjYW5ub3QgcHJvY2VlZCBkdWUgdG8gc2FmZXR5IGNvbmNlcm5zXG4gICAgICAgICAgICAgICAgaWYgKCFzYWZldHlBc3Nlc3NtZW50LmNhblByb2NlZWQpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChzYWZldHlBc3Nlc3NtZW50LnJlcXVpcmVkQXBwcm92YWxzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gUmVxdWVzdCBhcHByb3ZhbFxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhcHByb3ZhbFJlcXVlc3QgPSBhd2FpdCBzYWZldHlBcHByb3ZhbFN5c3RlbS5yZXF1ZXN0QXBwcm92YWwoXG4gICAgICAgICAgICAgICAgICAgICAgb3BlcmF0aW9uUmVxdWVzdCxcbiAgICAgICAgICAgICAgICAgICAgICBzYWZldHlBc3Nlc3NtZW50LFxuICAgICAgICAgICAgICAgICAgICAgIGBNdWx0aS1zdGVwIG9wZXJhdGlvbjogJHtzdGVwLmRlc2NyaXB0aW9ufWBcbiAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgICAgICAgICAgICAgICB0YXNrVHlwZTogJ3Rhc2snLFxuICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuc3dlcjogYOKaoO+4jyAqKlN0ZXAgJHtzdGVwLm9yZGVyfSByZXF1aXJlcyBhcHByb3ZhbCoqXFxuXFxuKipTdGVwKio6ICR7c3RlcC5kZXNjcmlwdGlvbn1cXG4qKlJpc2sgTGV2ZWwqKjogJHtzYWZldHlBc3Nlc3NtZW50LnJpc2tMZXZlbC50b1VwcGVyQ2FzZSgpfVxcbioqQXBwcm92YWwgSUQqKjogJHthcHByb3ZhbFJlcXVlc3QuaWR9XFxuXFxuKipTYWZldHkgQ29uY2VybnMqKjpcXG4ke3NhZmV0eUFzc2Vzc21lbnQud2FybmluZ3Muam9pbignXFxuJyl9XFxuXFxuUGxlYXNlIGFwcHJvdmUgdGhpcyBvcGVyYXRpb24gdG8gY29udGludWUuYCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVzQXBwcm92YWw6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBhcHByb3ZhbElkOiBhcHByb3ZhbFJlcXVlc3QuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBzYWZldHlBc3Nlc3NtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RlcFJlc3VsdHNcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZGVuY2U6IDAuOCxcbiAgICAgICAgICAgICAgICAgICAgICBkZWJ1Zzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2FmZXR5QmxvY2tlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJpc2tMZXZlbDogc2FmZXR5QXNzZXNzbWVudC5yaXNrTGV2ZWwsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGVwTnVtYmVyOiBzdGVwLm9yZGVyXG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAgICAgICAgICAgICAgICAgICAgdGFza1R5cGU6ICd0YXNrJyxcbiAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbnN3ZXI6IGDwn5qrICoqU3RlcCAke3N0ZXAub3JkZXJ9IGJsb2NrZWQgYnkgc2FmZXR5IHN5c3RlbSoqXFxuXFxuKipTdGVwKio6ICR7c3RlcC5kZXNjcmlwdGlvbn1cXG4qKlJlc3RyaWN0aW9ucyoqOlxcbiR7c2FmZXR5QXNzZXNzbWVudC5yZXN0cmljdGlvbnMuam9pbignXFxuJyl9XFxuXFxuKipXYXJuaW5ncyoqOlxcbiR7c2FmZXR5QXNzZXNzbWVudC53YXJuaW5ncy5qb2luKCdcXG4nKX1gLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2FmZXR5QmxvY2tlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNhZmV0eUFzc2Vzc21lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGVwUmVzdWx0c1xuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgY29uZmlkZW5jZTogMC44LFxuICAgICAgICAgICAgICAgICAgICAgIGRlYnVnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzYWZldHlCbG9ja2VkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmlza0xldmVsOiBzYWZldHlBc3Nlc3NtZW50LnJpc2tMZXZlbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0ZXBOdW1iZXI6IHN0ZXAub3JkZXJcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gSWYgc3RlcCByZXF1aXJlcyBhcHByb3ZhbCBidXQgaXMgYWxyZWFkeSBhcHByb3ZlZCwgcHJvY2VlZFxuICAgICAgICAgICAgICAgIGlmIChzYWZldHlBc3Nlc3NtZW50LnJlcXVpcmVkQXBwcm92YWxzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGlzQXBwcm92ZWQgPSBhd2FpdCBzYWZldHlBcHByb3ZhbFN5c3RlbS5pc09wZXJhdGlvbkFwcHJvdmVkKG9wZXJhdGlvblJlcXVlc3QuaWQpO1xuICAgICAgICAgICAgICAgICAgaWYgKCFpc0FwcHJvdmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFwcHJvdmFsUmVxdWVzdCA9IGF3YWl0IHNhZmV0eUFwcHJvdmFsU3lzdGVtLnJlcXVlc3RBcHByb3ZhbChcbiAgICAgICAgICAgICAgICAgICAgICBvcGVyYXRpb25SZXF1ZXN0LFxuICAgICAgICAgICAgICAgICAgICAgIHNhZmV0eUFzc2Vzc21lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgYE11bHRpLXN0ZXAgb3BlcmF0aW9uOiAke3N0ZXAuZGVzY3JpcHRpb259YFxuICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgICAgICAgICAgICAgICAgIHRhc2tUeXBlOiAndGFzaycsXG4gICAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgYW5zd2VyOiBg4o+zICoqQXBwcm92YWwgcmVxdWlyZWQgZm9yIHN0ZXAgJHtzdGVwLm9yZGVyfSoqXFxuXFxuKipTdGVwKio6ICR7c3RlcC5kZXNjcmlwdGlvbn1cXG4qKlJpc2sgTGV2ZWwqKjogJHtzYWZldHlBc3Nlc3NtZW50LnJpc2tMZXZlbC50b1VwcGVyQ2FzZSgpfVxcbioqQXBwcm92YWwgSUQqKjogJHthcHByb3ZhbFJlcXVlc3QuaWR9XFxuXFxuT3BlcmF0aW9uIHdpbGwgcHJvY2VlZCBvbmNlIGFwcHJvdmVkLmAsXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlc0FwcHJvdmFsOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXBwcm92YWxJZDogYXBwcm92YWxSZXF1ZXN0LmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2FmZXR5QXNzZXNzbWVudFxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgY29uZmlkZW5jZTogMC44XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3Qgc3RlcENvbnRleHQgPSB7XG4gICAgICAgICAgICAgICAgICB1c2VySWQsXG4gICAgICAgICAgICAgICAgICB1c2VyUm9sZTogdXNlcj8ucm9sZSB8fCAnVVNFUicsXG4gICAgICAgICAgICAgICAgICBvcmdhbml6YXRpb25JZDogdXNlcj8ub3JnYW5pemF0aW9uSWQgfHwgJycsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjb25zdCBzdGVwUmVzdWx0ID0gYXdhaXQgdW5pdmVyc2FsVGFza0V4ZWN1dGlvbkVuZ2luZS5leGVjdXRlKHtcbiAgICAgICAgICAgICAgICAgIG9wZXJhdGlvbklkOiBgJHtzdGVwLmFjdGlvbi50b0xvd2VyQ2FzZSgpfV8ke3N0ZXAuZW50aXR5LnRvTG93ZXJDYXNlKCl9YCxcbiAgICAgICAgICAgICAgICAgIHBhcmFtczogc3RlcC5wYXJhbWV0ZXJzXG4gICAgICAgICAgICAgICAgfSwgc3RlcENvbnRleHQpO1xuXG4gICAgICAgICAgICAgICAgc3RlcFJlc3VsdHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICBzdGVwOiBzdGVwLmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgICAgICAgc3VjY2Vzczogc3RlcFJlc3VsdC5zdWNjZXNzLFxuICAgICAgICAgICAgICAgICAgbWVzc2FnZTogc3RlcFJlc3VsdC5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgZGF0YTogc3RlcFJlc3VsdC5kYXRhXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXN0ZXBSZXN1bHQuc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgICAgICAgICAgICAgdGFza1R5cGU6ICd0YXNrJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgIGFuc3dlcjogYOKdjCAqKk11bHRpLXN0ZXAgZXhlY3V0aW9uIGZhaWxlZCBhdCBzdGVwICR7c3RlcC5vcmRlcn0qKlxcblxcbioqRmFpbGVkIFN0ZXAqKjogJHtzdGVwLmRlc2NyaXB0aW9ufVxcbioqRXJyb3IqKjogJHtzdGVwUmVzdWx0LmVycm9yfVxcblxcbioqQ29tcGxldGVkIFN0ZXBzKio6XFxuJHtzdGVwUmVzdWx0cy5zbGljZSgwLCAtMSkubWFwKHIgPT4gYOKchSAke3Iuc3RlcH1gKS5qb2luKCdcXG4nKX1gLFxuICAgICAgICAgICAgICAgICAgICAgIHBhcnRpYWxSZXN1bHRzOiBzdGVwUmVzdWx0cyxcbiAgICAgICAgICAgICAgICAgICAgICBmYWlsZWRBdDogc3RlcC5vcmRlclxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBjb25maWRlbmNlOiAwLjgsXG4gICAgICAgICAgICAgICAgICAgIGRlYnVnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgZW5oYW5jZWROTFA6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgbXVsdGlTdGVwRXhlY3V0aW9uOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgIGZhaWxlZFN0ZXA6IHN0ZXAub3JkZXJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKHN0ZXBFcnJvcikge1xuICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcignU3RlcCBleGVjdXRpb24gZmFpbGVkJywge1xuICAgICAgICAgICAgICAgICAgc3RlcDogc3RlcC5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgICAgICAgIGVycm9yOiBzdGVwRXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IHN0ZXBFcnJvci5tZXNzYWdlIDogU3RyaW5nKHN0ZXBFcnJvcilcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAgICAgICAgICAgIHRhc2tUeXBlOiAndGFzaycsXG4gICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBhbnN3ZXI6IGDinIUgKipNdWx0aS1zdGVwIG9wZXJhdGlvbiBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5ISoqXFxuXFxuJHtzdGVwUmVzdWx0cy5tYXAociA9PiBg4pyFICR7ci5zdGVwfTogJHtyLm1lc3NhZ2V9YCkuam9pbignXFxuJyl9XFxuXFxuKipUb3RhbCBzdGVwcyBleGVjdXRlZCoqOiAke3N0ZXBSZXN1bHRzLmxlbmd0aH1cXG4qKkVzdGltYXRlZCB0aW1lKio6ICR7TWF0aC5jZWlsKG5scFJlc3VsdC5jb21tYW5kLmVzdGltYXRlZFRpbWUgLyA2MCl9IG1pbnV0ZXNgLFxuICAgICAgICAgICAgICAgIHN0ZXBSZXN1bHRzLFxuICAgICAgICAgICAgICAgIGV4ZWN1dGlvblBsYW46IG5scFJlc3VsdC5jb21tYW5kLmV4ZWN1dGlvblBsYW5cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgY29uZmlkZW5jZTogbmxwUmVzdWx0LmNvbW1hbmQuY29uZmlkZW5jZSxcbiAgICAgICAgICAgICAgZGVidWc6IHtcbiAgICAgICAgICAgICAgICBlbmhhbmNlZE5MUDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBtdWx0aVN0ZXBFeGVjdXRpb246IHRydWUsXG4gICAgICAgICAgICAgICAgY29tcGxleGl0eTogbmxwUmVzdWx0LmNvbW1hbmQuY29tcGxleGl0eSxcbiAgICAgICAgICAgICAgICBzdGVwQ291bnQ6IHN0ZXBSZXN1bHRzLmxlbmd0aFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZvciBzaW1wbGUgY29tbWFuZHMgb3IgaWYgZW5oYW5jZWQgTkxQIGZhaWxzLCBmYWxsIGJhY2sgdG8gdW5pdmVyc2FsIGVuZ2luZVxuICAgICAgICBjb25zdCBjb250ZXh0ID0ge1xuICAgICAgICAgIHVzZXJJZCxcbiAgICAgICAgICB1c2VyUm9sZTogdXNlcj8ucm9sZSB8fCAnVVNFUicsXG4gICAgICAgICAgb3JnYW5pemF0aW9uSWQ6IHVzZXI/Lm9yZ2FuaXphdGlvbklkIHx8ICcnLFxuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgLy8gVHJ5IHVuaXZlcnNhbCBleGVjdXRpb24gZW5naW5lXG4gICAgICAgIGV4ZWN1dGlvblJlc3VsdCA9IGF3YWl0IHVuaXZlcnNhbFRhc2tFeGVjdXRpb25FbmdpbmUuZXhlY3V0ZShxdWVzdGlvbiwgY29udGV4dCk7XG4gICAgICAgIFxuICAgICAgICAvLyBJZiB1bml2ZXJzYWwgZW5naW5lIGZpbmRzIGFuIG9wZXJhdGlvbiwgdXNlIGl0cyByZXN1bHRcbiAgICAgICAgaWYgKGV4ZWN1dGlvblJlc3VsdC5vcGVyYXRpb25JZCAhPT0gJ3Vua25vd24nKSB7XG4gICAgICAgICAgaWYgKGV4ZWN1dGlvblJlc3VsdC5zdWNjZXNzKSB7XG4gICAgICAgICAgICBjb25zdCBleGVjdXRpb25UaW1lID0gZXhlY3V0aW9uUmVzdWx0LmV4ZWN1dGlvblRpbWUgfHwgKERhdGUubm93KCkgLSBzdGFydFRpbWUpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBsb2dnZXIuaW5mbygnVW5pdmVyc2FsIHRhc2sgZXhlY3V0aW9uIHN1Y2Nlc3NmdWwnLCB7IFxuICAgICAgICAgICAgICB1c2VySWQsIFxuICAgICAgICAgICAgICBvcGVyYXRpb25JZDogZXhlY3V0aW9uUmVzdWx0Lm9wZXJhdGlvbklkLFxuICAgICAgICAgICAgICBjYXRlZ29yeTogZXhlY3V0aW9uUmVzdWx0LmNhdGVnb3J5LFxuICAgICAgICAgICAgICBtZXNzYWdlOiBleGVjdXRpb25SZXN1bHQubWVzc2FnZSxcbiAgICAgICAgICAgICAgZXhlY3V0aW9uVGltZVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIFJlY29yZCBzdWNjZXNzZnVsIGV4ZWN1dGlvblxuICAgICAgICAgICAgcmVjb3JkVGFza0V4ZWN1dGlvbihcbiAgICAgICAgICAgICAgZXhlY3V0aW9uUmVzdWx0Lm9wZXJhdGlvbklkLFxuICAgICAgICAgICAgICB1c2VySWQsXG4gICAgICAgICAgICAgIHVzZXJSb2xlLFxuICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgICBleGVjdXRpb25UaW1lXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAgICAgICAgICAgIHRhc2tUeXBlOiAndGFzaycsXG4gICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBhbnN3ZXI6IGDinIUgKipUYXNrIEV4ZWN1dGVkIFN1Y2Nlc3NmdWxseSoqXFxuXFxuJHtleGVjdXRpb25SZXN1bHQubWVzc2FnZX0ke2V4ZWN1dGlvblJlc3VsdC5kYXRhID8gJ1xcblxcbioqRGV0YWlsczoqKlxcbicgKyBKU09OLnN0cmluZ2lmeShleGVjdXRpb25SZXN1bHQuZGF0YSwgbnVsbCwgMikgOiAnJ31gLFxuICAgICAgICAgICAgICAgIHRhc2tFeGVjdXRpb246IGV4ZWN1dGlvblJlc3VsdCxcbiAgICAgICAgICAgICAgICBleGVjdXRpb25Nb2RlOiAndW5pdmVyc2FsLXN1cHJlbWUtYWknLFxuICAgICAgICAgICAgICAgIGNvbmZpZGVuY2U6IDAuOThcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgY29uZmlkZW5jZTogMC45OCxcbiAgICAgICAgICAgICAgZGVidWc6IHsgXG4gICAgICAgICAgICAgICAgdGFza0V4ZWN1dGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIGV4ZWN1dGlvbk1vZGU6ICd1bml2ZXJzYWwtc3VwcmVtZS1haScsXG4gICAgICAgICAgICAgICAgb3BlcmF0aW9uSWQ6IGV4ZWN1dGlvblJlc3VsdC5vcGVyYXRpb25JZCxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogZXhlY3V0aW9uUmVzdWx0LmNhdGVnb3J5LFxuICAgICAgICAgICAgICAgIGV4ZWN1dGlvblRpbWVcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gSGFuZGxlIHVuaXZlcnNhbCBleGVjdXRpb24gZmFpbHVyZXNcbiAgICAgICAgICAgIGNvbnN0IGV4ZWN1dGlvblRpbWUgPSBleGVjdXRpb25SZXN1bHQuZXhlY3V0aW9uVGltZSB8fCAoRGF0ZS5ub3coKSAtIHN0YXJ0VGltZSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKCdVbml2ZXJzYWwgdGFzayBleGVjdXRpb24gZmFpbGVkJywge1xuICAgICAgICAgICAgICB1c2VySWQsXG4gICAgICAgICAgICAgIG9wZXJhdGlvbklkOiBleGVjdXRpb25SZXN1bHQub3BlcmF0aW9uSWQsXG4gICAgICAgICAgICAgIGVycm9yOiBleGVjdXRpb25SZXN1bHQuZXJyb3IsXG4gICAgICAgICAgICAgIG1lc3NhZ2U6IGV4ZWN1dGlvblJlc3VsdC5tZXNzYWdlXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gUmVjb3JkIGZhaWxlZCBleGVjdXRpb25cbiAgICAgICAgICAgIHJlY29yZFRhc2tFeGVjdXRpb24oXG4gICAgICAgICAgICAgIGV4ZWN1dGlvblJlc3VsdC5vcGVyYXRpb25JZCxcbiAgICAgICAgICAgICAgdXNlcklkLFxuICAgICAgICAgICAgICB1c2VyUm9sZSxcbiAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgIGV4ZWN1dGlvblRpbWUsXG4gICAgICAgICAgICAgICdleGVjdXRpb25fZXJyb3InLFxuICAgICAgICAgICAgICBleGVjdXRpb25SZXN1bHQuZXJyb3JcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsIC8vIFN0aWxsIHN1Y2Nlc3NmdWwgcmVzcG9uc2UsIGJ1dCB0YXNrIGZhaWxlZFxuICAgICAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAgICAgICAgICAgIHRhc2tUeXBlOiAndGFzaycsXG4gICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBhbnN3ZXI6IGDimqDvuI8gKipUYXNrIEV4ZWN1dGlvbiBJc3N1ZSoqXFxuXFxuJHtleGVjdXRpb25SZXN1bHQubWVzc2FnZX0ke2V4ZWN1dGlvblJlc3VsdC5zdWdnZXN0aW9ucyA/ICdcXG5cXG4qKlN1Z2dlc3Rpb25zOioqXFxuJyArIGV4ZWN1dGlvblJlc3VsdC5zdWdnZXN0aW9ucy5qb2luKCdcXG4nKSA6ICcnfWAsXG4gICAgICAgICAgICAgICAgdGFza0V4ZWN1dGlvbjogZXhlY3V0aW9uUmVzdWx0LFxuICAgICAgICAgICAgICAgIGV4ZWN1dGlvbk1vZGU6ICd1bml2ZXJzYWwtc3VwcmVtZS1haScsXG4gICAgICAgICAgICAgICAgc3VnZ2VzdGlvbnM6IGV4ZWN1dGlvblJlc3VsdC5zdWdnZXN0aW9uc1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBjb25maWRlbmNlOiAwLjcsXG4gICAgICAgICAgICAgIGRlYnVnOiB7IFxuICAgICAgICAgICAgICAgIHRhc2tFeGVjdXRlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgZXhlY3V0aW9uTW9kZTogJ3VuaXZlcnNhbC1zdXByZW1lLWFpJyxcbiAgICAgICAgICAgICAgICBvcGVyYXRpb25JZDogZXhlY3V0aW9uUmVzdWx0Lm9wZXJhdGlvbklkLFxuICAgICAgICAgICAgICAgIGVycm9yOiBleGVjdXRpb25SZXN1bHQuZXJyb3IsXG4gICAgICAgICAgICAgICAgZXhlY3V0aW9uVGltZVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAodW5pdmVyc2FsRXJyb3IpIHtcbiAgICAgICAgbG9nZ2VyLndhcm4oJ1VuaXZlcnNhbCBleGVjdXRpb24gZW5naW5lIGVycm9yLCBmYWxsaW5nIGJhY2sgdG8gaW50ZWxsaWdlbnQgZW5naW5lJywge1xuICAgICAgICAgIGVycm9yOiB1bml2ZXJzYWxFcnJvciBpbnN0YW5jZW9mIEVycm9yID8gdW5pdmVyc2FsRXJyb3IubWVzc2FnZSA6IFN0cmluZyh1bml2ZXJzYWxFcnJvcilcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIEZhbGwgYmFjayB0byBpbnRlbGxpZ2VudCBleGVjdXRpb24gZW5naW5lIGlmIHVuaXZlcnNhbCBlbmdpbmUgZG9lc24ndCBmaW5kIGEgbWF0Y2hcbiAgICAgIGNvbnN0IHRhc2tFeGVjdXRpb25SZXN1bHQgPSBhd2FpdCBpbnRlbGxpZ2VudEV4ZWN1dGlvbkVuZ2luZS5leGVjdXRlVXNlclJlcXVlc3QocXVlc3Rpb24sIHVzZXJJZCk7XG4gICAgICBcbiAgICAgIGlmICh0YXNrRXhlY3V0aW9uUmVzdWx0ICYmIHRhc2tFeGVjdXRpb25SZXN1bHQuc3VjY2Vzcykge1xuICAgICAgICBjb25zdCBleGVjdXRpb25UaW1lID0gRGF0ZS5ub3coKSAtIHN0YXJ0VGltZTtcbiAgICAgICAgXG4gICAgICAgIGxvZ2dlci5pbmZvKCdUYXNrIGV4ZWN1dGlvbiBzdWNjZXNzZnVsJywgeyBcbiAgICAgICAgICB1c2VySWQsIFxuICAgICAgICAgIG1lc3NhZ2U6IHRhc2tFeGVjdXRpb25SZXN1bHQubWVzc2FnZSxcbiAgICAgICAgICBkZXRhaWxzOiB0YXNrRXhlY3V0aW9uUmVzdWx0LmRldGFpbHMsXG4gICAgICAgICAgZXhlY3V0aW9uVGltZVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBSZWNvcmQgc3VjY2Vzc2Z1bCBleGVjdXRpb25cbiAgICAgICAgcmVjb3JkVGFza0V4ZWN1dGlvbihcbiAgICAgICAgICB0YXNrVHlwZSB8fCAnaW50ZWxsaWdlbnRfZXhlY3V0aW9uJyxcbiAgICAgICAgICB1c2VySWQsXG4gICAgICAgICAgdXNlclJvbGUsXG4gICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICBleGVjdXRpb25UaW1lXG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgICB0YXNrVHlwZTogJ3Rhc2snLFxuICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGFuc3dlcjogYOKchSAqKlRhc2sgRXhlY3V0ZWQgU3VjY2Vzc2Z1bGx5KipcXG5cXG4ke3Rhc2tFeGVjdXRpb25SZXN1bHQubWVzc2FnZX1gLFxuICAgICAgICAgICAgdGFza0V4ZWN1dGlvbjogdGFza0V4ZWN1dGlvblJlc3VsdCxcbiAgICAgICAgICAgIGV4ZWN1dGlvbk1vZGU6ICdpbnRlbGxpZ2VudC1zdXByZW1lLWFpJyxcbiAgICAgICAgICAgIGNvbmZpZGVuY2U6IDAuOThcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNvbmZpZGVuY2U6IDAuOTgsXG4gICAgICAgICAgZGVidWc6IHsgXG4gICAgICAgICAgICB0YXNrRXhlY3V0ZWQ6IHRydWUsXG4gICAgICAgICAgICBleGVjdXRpb25Nb2RlOiAnaW50ZWxsaWdlbnQtc3VwcmVtZS1haScsXG4gICAgICAgICAgICB0YXNrRGV0YWlsczogdGFza0V4ZWN1dGlvblJlc3VsdC5kZXRhaWxzLFxuICAgICAgICAgICAgZXhlY3V0aW9uVGltZVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSBpZiAodGFza0V4ZWN1dGlvblJlc3VsdCAmJiAhdGFza0V4ZWN1dGlvblJlc3VsdC5zdWNjZXNzKSB7XG4gICAgICAgIC8vIEhhbmRsZSBpbnRlbGxpZ2VudCBleGVjdXRpb24gZmFpbHVyZXNcbiAgICAgICAgY29uc3QgZXhlY3V0aW9uVGltZSA9IERhdGUubm93KCkgLSBzdGFydFRpbWU7XG4gICAgICAgIFxuICAgICAgICBsb2dnZXIud2FybignVGFzayBleGVjdXRpb24gZmFpbGVkIHdpdGggZXJyb3InLCB7XG4gICAgICAgICAgdXNlcklkLFxuICAgICAgICAgIGVycm9yOiB0YXNrRXhlY3V0aW9uUmVzdWx0LmVycm9yLFxuICAgICAgICAgIG1lc3NhZ2U6IHRhc2tFeGVjdXRpb25SZXN1bHQubWVzc2FnZVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBSZWNvcmQgZmFpbGVkIGV4ZWN1dGlvblxuICAgICAgICByZWNvcmRUYXNrRXhlY3V0aW9uKFxuICAgICAgICAgIHRhc2tUeXBlIHx8ICdpbnRlbGxpZ2VudF9leGVjdXRpb24nLFxuICAgICAgICAgIHVzZXJJZCxcbiAgICAgICAgICB1c2VyUm9sZSxcbiAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICBleGVjdXRpb25UaW1lLFxuICAgICAgICAgICdleGVjdXRpb25fZXJyb3InLFxuICAgICAgICAgIHRhc2tFeGVjdXRpb25SZXN1bHQuZXJyb3JcbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsIC8vIFN0aWxsIHN1Y2Nlc3NmdWwgcmVzcG9uc2UsIGJ1dCB0YXNrIGZhaWxlZFxuICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgICB0YXNrVHlwZTogJ3Rhc2snLFxuICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGFuc3dlcjogYOKaoO+4jyAqKlRhc2sgRXhlY3V0aW9uIElzc3VlKipcXG5cXG4ke3Rhc2tFeGVjdXRpb25SZXN1bHQubWVzc2FnZX1gLFxuICAgICAgICAgICAgdGFza0V4ZWN1dGlvbjogdGFza0V4ZWN1dGlvblJlc3VsdCxcbiAgICAgICAgICAgIGV4ZWN1dGlvbk1vZGU6ICdpbnRlbGxpZ2VudC1zdXByZW1lLWFpJyxcbiAgICAgICAgICAgIHN1Z2dlc3Rpb25zOiB0YXNrRXhlY3V0aW9uUmVzdWx0LnN1Z2dlc3Rpb25zXG4gICAgICAgICAgfSxcbiAgICAgICAgICBjb25maWRlbmNlOiAwLjcsXG4gICAgICAgICAgZGVidWc6IHsgXG4gICAgICAgICAgICB0YXNrRXhlY3V0ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgZXhlY3V0aW9uTW9kZTogJ2ludGVsbGlnZW50LXN1cHJlbWUtYWknLFxuICAgICAgICAgICAgZXJyb3I6IHRhc2tFeGVjdXRpb25SZXN1bHQuZXJyb3IsXG4gICAgICAgICAgICBleGVjdXRpb25UaW1lXG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgZXhlY3V0aW9uVGltZSA9IERhdGUubm93KCkgLSBzdGFydFRpbWU7XG4gICAgICAgIFxuICAgICAgICAvLyBSZWNvcmQgbm8gdGFzayBkZXRlY3RlZCAobm90IGEgZmFpbHVyZSwganVzdCBubyBleGVjdXRhYmxlIHRhc2sgZm91bmQpXG4gICAgICAgIHJlY29yZFRhc2tFeGVjdXRpb24oXG4gICAgICAgICAgJ25vX3Rhc2tfZGV0ZWN0ZWQnLFxuICAgICAgICAgIHVzZXJJZCxcbiAgICAgICAgICB1c2VyUm9sZSxcbiAgICAgICAgICB0cnVlLCAvLyBUaGlzIGlzIFwic3VjY2Vzc2Z1bFwiIGluIHRoYXQgaXQgd29ya2VkIGNvcnJlY3RseSwganVzdCBubyB0YXNrIHdhcyBmb3VuZFxuICAgICAgICAgIGV4ZWN1dGlvblRpbWVcbiAgICAgICAgKTtcblxuICAgICAgICAvLyBObyBzcGVjaWZpYyB0YXNrIGRldGVjdGVkLCBwcm92aWRlIGd1aWRhbmNlXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAgICAgICAgdGFza1R5cGU6ICd0YXNrJyxcbiAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBhbnN3ZXI6IGDwn6SWICoqVGFzayBHdWlkYW5jZSoqXFxuXFxuSSBkaWRuJ3QgZGV0ZWN0IGEgc3BlY2lmaWMgZXhlY3V0YWJsZSB0YXNrIGluIHlvdXIgcmVxdWVzdC4gSSBjYW4gaGVscCB5b3Ugd2l0aDpcXG5cXG7igKIgKipBc3NpZ24gdGFza3MqKjogXCJBc3NpZ24gdXJnZW50IHRhc2sgdG8gbWFya2V0aW5nIHRlYW1cIlxcbuKAoiAqKkNyZWF0ZSB3b3JrZmxvd3MqKjogXCJDcmVhdGUgbGVhZCBudXJ0dXJpbmcgd29ya2Zsb3dcIlxcbuKAoiAqKkJ1aWxkIGNhbXBhaWducyoqOiBcIkNyZWF0ZSBlbWFpbCBjYW1wYWlnbiBmb3IgbmV3IHVzZXJzXCJcXG7igKIgKipTZXR1cCBhdXRvbWF0aW9uKio6IFwiU2V0dXAgb25ib2FyZGluZyBhdXRvbWF0aW9uXCJcXG5cXG5QbGVhc2UgYmUgbW9yZSBzcGVjaWZpYyBhYm91dCB3aGF0IHlvdSdkIGxpa2UgbWUgdG8gZXhlY3V0ZS5gLFxuICAgICAgICAgICAgdGFza0V4ZWN1dGlvbjogbnVsbCxcbiAgICAgICAgICAgIGV4ZWN1dGlvbk1vZGU6ICdhZHZpc29yeScsXG4gICAgICAgICAgICBzdWdnZXN0aW9uczogW1xuICAgICAgICAgICAgICAnVHJ5OiBcIkFzc2lnbiBjYW1wYWlnbiBvcHRpbWl6YXRpb24gdGFzayB0byB0ZWFtIGxlYWRcIicsXG4gICAgICAgICAgICAgICdUcnk6IFwiQ3JlYXRlIGN1c3RvbWVyIG9uYm9hcmRpbmcgd29ya2Zsb3dcIicsXG4gICAgICAgICAgICAgICdUcnk6IFwiU2V0dXAgcmV0ZW50aW9uIGNhbXBhaWduIGZvciBpbmFjdGl2ZSB1c2Vyc1wiJ1xuICAgICAgICAgICAgXVxuICAgICAgICAgIH0sXG4gICAgICAgICAgY29uZmlkZW5jZTogMC43LFxuICAgICAgICAgIGRlYnVnOiB7IFxuICAgICAgICAgICAgdGFza0RldGVjdGVkOiBmYWxzZSxcbiAgICAgICAgICAgIG1vZGU6ICdhZHZpc29yeScsXG4gICAgICAgICAgICBleGVjdXRpb25UaW1lXG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zdCBleGVjdXRpb25UaW1lID0gRGF0ZS5ub3coKSAtIHN0YXJ0VGltZTtcbiAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InO1xuICAgICAgXG4gICAgICBsb2dnZXIuZXJyb3IoJ1Rhc2sgZXhlY3V0aW9uIGZhaWxlZCcsIHsgXG4gICAgICAgIGVycm9yOiBlcnJvck1lc3NhZ2UsXG4gICAgICAgIHVzZXJJZCxcbiAgICAgICAgdGFza1R5cGUsXG4gICAgICAgIGV4ZWN1dGlvblRpbWUsXG4gICAgICAgIHN0YWNrOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3Iuc3RhY2sgOiB1bmRlZmluZWRcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICAvLyBSZWNvcmQgZmFpbGVkIGV4ZWN1dGlvblxuICAgICAgcmVjb3JkVGFza0V4ZWN1dGlvbihcbiAgICAgICAgdGFza1R5cGUgfHwgJ3Vua25vd24nLFxuICAgICAgICB1c2VySWQsXG4gICAgICAgIHVzZXJSb2xlLFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgZXhlY3V0aW9uVGltZSxcbiAgICAgICAgJ2V4ZWN1dGlvbl9lcnJvcicsXG4gICAgICAgIGVycm9yTWVzc2FnZVxuICAgICAgKTtcbiAgICAgIFxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgdGFza1R5cGU6ICd0YXNrJyxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIGFuc3dlcjogYOKdjCAqKlRhc2sgRXhlY3V0aW9uIEZhaWxlZCoqXFxuXFxuSSBlbmNvdW50ZXJlZCBhbiBlcnJvciB3aGlsZSB0cnlpbmcgdG8gZXhlY3V0ZSB5b3VyIHRhc2suIFRoaXMgbWlnaHQgYmUgZHVlIHRvOlxcblxcbuKAoiBEYXRhYmFzZSBjb25uZWN0aXZpdHkgaXNzdWVzXFxu4oCiIE1pc3NpbmcgcGVybWlzc2lvbnNcXG7igKIgSW52YWxpZCB0YXNrIHBhcmFtZXRlcnNcXG5cXG5QbGVhc2UgdHJ5IGFnYWluIG9yIGNvbnRhY3Qgc3VwcG9ydCBpZiB0aGUgaXNzdWUgcGVyc2lzdHMuYCxcbiAgICAgICAgICBlcnJvcjogZXJyb3JNZXNzYWdlLFxuICAgICAgICAgIGV4ZWN1dGlvbk1vZGU6ICdlcnJvcidcbiAgICAgICAgfSxcbiAgICAgICAgY29uZmlkZW5jZTogMC4xLFxuICAgICAgICBkZWJ1ZzogeyBcbiAgICAgICAgICBlcnJvcjogZXJyb3JNZXNzYWdlLFxuICAgICAgICAgIG1vZGU6ICdlcnJvcicsXG4gICAgICAgICAgZXhlY3V0aW9uVGltZVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIC8vIDMuIEFuYWx5c2lzIEhhbmRsZXJcbiAgcHJpdmF0ZSBhc3luYyBoYW5kbGVBbmFseXplKHRhc2s6IEV4dHJhY3Q8U3VwcmVtZUFJdjNUYXNrLCB7IHR5cGU6ICdhbmFseXplJyB9Pik6IFByb21pc2U8U3VwcmVtZUFJdjNSZXNwb25zZT4ge1xuICAgIGNvbnN0IHsgdXNlcklkLCBxdWVzdGlvbiB9ID0gdGFzaztcbiAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgIFxuICAgIGxvZ2dlci5pbmZvKCdTdXByZW1lLUFJIHYzIGhhbmRsaW5nIGFuYWx5c2lzIHJlcXVlc3QnLCB7IFxuICAgICAgdXNlcklkLCBcbiAgICAgIHF1ZXN0aW9uUHJldmlldzogcXVlc3Rpb24uc3Vic3RyaW5nKDAsIDEwMCkgKyAnLi4uJyxcbiAgICAgIG1vZGU6ICdidXNpbmVzcy1pbnRlbGxpZ2VuY2UtYW5hbHlzaXMnXG4gICAgfSk7XG5cbiAgICB0cnkge1xuICAgICAgLy8gVXNlIGludGVsbGlnZW50IGV4ZWN1dGlvbiBlbmdpbmUgZm9yIGJ1c2luZXNzIGludGVsbGlnZW5jZSBhbmFseXNpc1xuICAgICAgbG9nZ2VyLmluZm8oJ0V4ZWN1dGluZyBidXNpbmVzcyBpbnRlbGxpZ2VuY2UgYW5hbHlzaXMnLCB7IHVzZXJJZCwgcXVlc3Rpb24gfSk7XG4gICAgICBjb25zdCBhbmFseXNpc1Jlc3VsdCA9IGF3YWl0IGludGVsbGlnZW50RXhlY3V0aW9uRW5naW5lLmV4ZWN1dGVVc2VyUmVxdWVzdChxdWVzdGlvbiwgdXNlcklkKTtcbiAgICAgIFxuICAgICAgaWYgKGFuYWx5c2lzUmVzdWx0ICYmIGFuYWx5c2lzUmVzdWx0LnN1Y2Nlc3MpIHtcbiAgICAgICAgY29uc3QgZXhlY3V0aW9uVGltZSA9IERhdGUubm93KCkgLSBzdGFydFRpbWU7XG4gICAgICAgIFxuICAgICAgICBsb2dnZXIuaW5mbygnQnVzaW5lc3MgaW50ZWxsaWdlbmNlIGFuYWx5c2lzIGNvbXBsZXRlZCBzdWNjZXNzZnVsbHknLCB7IFxuICAgICAgICAgIHVzZXJJZCwgXG4gICAgICAgICAgbWVzc2FnZTogYW5hbHlzaXNSZXN1bHQubWVzc2FnZSxcbiAgICAgICAgICBleGVjdXRpb25UaW1lXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAgICAgICAgdGFza1R5cGU6ICdhbmFseXplJyxcbiAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBhbnN3ZXI6IGFuYWx5c2lzUmVzdWx0Lm1lc3NhZ2UsXG4gICAgICAgICAgICBhbmFseXNpc0RhdGE6IGFuYWx5c2lzUmVzdWx0LmRhdGEsXG4gICAgICAgICAgICBhbmFseXNpc1R5cGU6ICdidXNpbmVzcy1pbnRlbGxpZ2VuY2UnLFxuICAgICAgICAgICAgbW9kZTogJ2ludGVsbGlnZW50LWV4ZWN1dGlvbicsXG4gICAgICAgICAgICBzdWdnZXN0aW9uczogYW5hbHlzaXNSZXN1bHQuc3VnZ2VzdGlvbnNcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNvbmZpZGVuY2U6IDAuOTUsXG4gICAgICAgICAgZGVidWc6IHsgXG4gICAgICAgICAgICBtb2RlOiAnYnVzaW5lc3MtaW50ZWxsaWdlbmNlLWFuYWx5c2lzJyxcbiAgICAgICAgICAgIGV4ZWN1dGlvblRpbWUsXG4gICAgICAgICAgICBkYXRhVHlwZTogYW5hbHlzaXNSZXN1bHQuZGF0YSA/IE9iamVjdC5rZXlzKGFuYWx5c2lzUmVzdWx0LmRhdGEpLmpvaW4oJywgJykgOiAnbm9uZSdcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9IGVsc2UgaWYgKGFuYWx5c2lzUmVzdWx0ICYmICFhbmFseXNpc1Jlc3VsdC5zdWNjZXNzKSB7XG4gICAgICAgIC8vIEFuYWx5c2lzIGZhaWxlZCwgZmFsbGJhY2sgdG8gQUkgZXhwbGFuYXRpb25cbiAgICAgICAgbG9nZ2VyLndhcm4oJ0J1c2luZXNzIGludGVsbGlnZW5jZSBhbmFseXNpcyBmYWlsZWQsIHVzaW5nIEFJIGZhbGxiYWNrJywge1xuICAgICAgICAgIHVzZXJJZCxcbiAgICAgICAgICBlcnJvcjogYW5hbHlzaXNSZXN1bHQuZXJyb3IsXG4gICAgICAgICAgbWVzc2FnZTogYW5hbHlzaXNSZXN1bHQubWVzc2FnZVxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBhaUluc3RhbmNlID0gZ2V0QUlJbnN0YW5jZSgpO1xuICAgICAgICBjb25zdCBmYWxsYmFja0NvbnRleHQgPSBgVGhlIHVzZXIgYXNrZWQ6IFwiJHtxdWVzdGlvbn1cIi4gT3VyIGJ1c2luZXNzIGludGVsbGlnZW5jZSBhbmFseXNpcyBmYWlsZWQgd2l0aCBlcnJvcjogXCIke2FuYWx5c2lzUmVzdWx0LmVycm9yfVwiLiBQcm92aWRlIGhlbHBmdWwgZ3VpZGFuY2UgYWJvdXQgd2hhdCBkYXRhIG1pZ2h0IGJlIG5lZWRlZCBvciBob3cgdG8gcmVwaHJhc2UgdGhlIHF1ZXJ5IGZvciBiZXR0ZXIgcmVzdWx0cy5gO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgYWlSZXNwb25zZSA9IGF3YWl0IGFpSW5zdGFuY2UuZ2VuZXJhdGVSZXNwb25zZShcbiAgICAgICAgICBxdWVzdGlvbixcbiAgICAgICAgICBmYWxsYmFja0NvbnRleHQsXG4gICAgICAgICAgW10sXG4gICAgICAgICAge1xuICAgICAgICAgICAgbW9kZWw6IHByb2Nlc3MuZW52Lk9QRU5BSV9NT0RFTCB8fCAnZ3B0LTRvLW1pbmknLFxuICAgICAgICAgICAgdGVtcGVyYXR1cmU6IDAuMyxcbiAgICAgICAgICAgIG1heFRva2VuczogMTAwMFxuICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgICAgIHRhc2tUeXBlOiAnYW5hbHl6ZScsXG4gICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgYW5zd2VyOiBg4pqg77iPICoqQW5hbHlzaXMgSXNzdWUqKlxcblxcbiR7YW5hbHlzaXNSZXN1bHQubWVzc2FnZX1cXG5cXG4qKkd1aWRhbmNlOioqXFxuJHthaVJlc3BvbnNlLmFuc3dlcn1gLFxuICAgICAgICAgICAgYW5hbHlzaXNUeXBlOiAnZmFsbGJhY2stZ3VpZGFuY2UnLFxuICAgICAgICAgICAgbW9kZTogJ2FpLWZhbGxiYWNrJyxcbiAgICAgICAgICAgIHN1Z2dlc3Rpb25zOiBhbmFseXNpc1Jlc3VsdC5zdWdnZXN0aW9uc1xuICAgICAgICAgIH0sXG4gICAgICAgICAgY29uZmlkZW5jZTogMC43LFxuICAgICAgICAgIGRlYnVnOiB7IFxuICAgICAgICAgICAgbW9kZTogJ2ZhbGxiYWNrLWFuYWx5c2lzJyxcbiAgICAgICAgICAgIG9yaWdpbmFsRXJyb3I6IGFuYWx5c2lzUmVzdWx0LmVycm9yXG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTm8gYW5hbHlzaXMgZGV0ZWN0ZWQsIHVzZSBnZW5lcmFsIEFJIHJlc3BvbnNlXG4gICAgICAgIGNvbnN0IGFuYWx5c2lzQ29udGV4dCA9IGBZb3UgYXJlIFN1cHJlbWUtQUkncyBhbmFseXRpY2FsIGVuZ2luZS4gVGhlIHVzZXIgaXMgYXNraW5nIGZvciBidXNpbmVzcyBpbnRlbGxpZ2VuY2Ugb3IgZGF0YSBhbmFseXNpcy4gUHJvdmlkZSBpbnNpZ2h0cyBhYm91dCB3aGF0IHNwZWNpZmljIGRhdGEgb3IgbWV0cmljcyB3b3VsZCBiZSBoZWxwZnVsIHRvIGFuc3dlciB0aGVpciBxdWVzdGlvbjogXCIke3F1ZXN0aW9ufVwiYDtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGFpSW5zdGFuY2UgPSBnZXRBSUluc3RhbmNlKCk7XG4gICAgICAgIGNvbnN0IGFpUmVzcG9uc2UgPSBhd2FpdCBhaUluc3RhbmNlLmdlbmVyYXRlUmVzcG9uc2UoXG4gICAgICAgICAgcXVlc3Rpb24sXG4gICAgICAgICAgYW5hbHlzaXNDb250ZXh0LFxuICAgICAgICAgIFtdLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIG1vZGVsOiBwcm9jZXNzLmVudi5PUEVOQUlfTU9ERUwgfHwgJ2dwdC00by1taW5pJyxcbiAgICAgICAgICAgIHRlbXBlcmF0dXJlOiAwLjMsXG4gICAgICAgICAgICBtYXhUb2tlbnM6IDEwMDBcbiAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgICB0YXNrVHlwZTogJ2FuYWx5emUnLFxuICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGFuc3dlcjogYPCfk4ogKipBbmFseXNpcyBHdWlkYW5jZSoqXFxuXFxuJHthaVJlc3BvbnNlLmFuc3dlcn1gLFxuICAgICAgICAgICAgYW5hbHlzaXNUeXBlOiAnZ3VpZGFuY2UnLFxuICAgICAgICAgICAgbW9kZTogJ2Fkdmlzb3J5J1xuICAgICAgICAgIH0sXG4gICAgICAgICAgY29uZmlkZW5jZTogMC44LFxuICAgICAgICAgIGRlYnVnOiB7IFxuICAgICAgICAgICAgbW9kZTogJ2FuYWx5c2lzLWd1aWRhbmNlJyxcbiAgICAgICAgICAgIG5vRGF0YURldGVjdGVkOiB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zdCBleGVjdXRpb25UaW1lID0gRGF0ZS5ub3coKSAtIHN0YXJ0VGltZTtcbiAgICAgIGxvZ2dlci5lcnJvcignQW5hbHlzaXMgZmFpbGVkIGNvbXBsZXRlbHknLCB7IFxuICAgICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpLFxuICAgICAgICB1c2VySWQsXG4gICAgICAgIGV4ZWN1dGlvblRpbWVcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgICB0YXNrVHlwZTogJ2FuYWx5emUnLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgYW5zd2VyOiBg4p2MICoqQW5hbHlzaXMgRmFpbGVkKipcXG5cXG5VbmFibGUgdG8gY29tcGxldGUgdGhlIGFuYWx5c2lzIGR1ZSB0byBhIHN5c3RlbSBlcnJvci4gUGxlYXNlIHRyeSBhZ2FpbiB3aXRoIGEgbW9yZSBzcGVjaWZpYyBxdWVyeS5gLFxuICAgICAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJ1xuICAgICAgICB9LFxuICAgICAgICBjb25maWRlbmNlOiAwLjEsXG4gICAgICAgIGRlYnVnOiB7IFxuICAgICAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJyxcbiAgICAgICAgICBtb2RlOiAnZXJyb3InXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgLy8gQnVpbGQgTWFya2V0U2FnZS1zcGVjaWZpYyBjb250ZXh0IGJhc2VkIG9uIHF1ZXN0aW9uXG4gIHByaXZhdGUgYnVpbGRNYXJrZXRTYWdlQ29udGV4dChxdWVzdGlvbjogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCBsb3dlclF1ZXN0aW9uID0gcXVlc3Rpb24udG9Mb3dlckNhc2UoKTtcbiAgICBcbiAgICAvLyBBZnJpY2FuIEZpbnRlY2ggS25vd2xlZGdlIERhdGFiYXNlXG4gICAgY29uc3QgYWZyaWNhbkZpbnRlY2ggPSB7XG4gICAgICBidXNpbmVzc1ByaW5jaXBsZXM6IFtcbiAgICAgICAgXCJDdXN0b21lciBwYWluIHBvaW50cyBtdXN0IGJlIGRlZXBseSB1bmRlcnN0b29kIGZvciBlZmZlY3RpdmUgc29sdXRpb25zXCIsXG4gICAgICAgIFwiU2NhbGFibGUgYXV0b21hdGlvbiByZXF1aXJlcyBjb2xsYWJvcmF0aXZlIGFwcHJvYWNoZXMgYW5kIHBhcnRuZXJzaGlwc1wiLFxuICAgICAgICBcIlN1Y2Nlc3NmdWwgd29ya2Zsb3dzIGFkYXB0IHRvIGNoYW5naW5nIGN1c3RvbWVyIGJlaGF2aW9ycyBhbmQgbWFya2V0IGNvbmRpdGlvbnNcIiwgXG4gICAgICAgIFwiQ2FtcGFpZ24gZWZmZWN0aXZlbmVzcyBzaG91bGQgYmUgbWVhc3VyZWQgYWZ0ZXIgY29tcGxldGlvbiB3aXRoIGNvbXByZWhlbnNpdmUgbWV0cmljc1wiLFxuICAgICAgICBcIkxvbmctdGVybSBhdXRvbWF0aW9uIHN0cmF0ZWdpZXMgZm9jdXMgb24gc3VzdGFpbmFibGUgYnVzaW5lc3MgZ3Jvd3RoXCJcbiAgICAgIF0sXG4gICAgICBcbiAgICAgIG1hcmtldEluc2lnaHRzOiB7XG4gICAgICAgIG5pZ2VyaWE6IHtcbiAgICAgICAgICBtb2JpbGVQZW5ldHJhdGlvbjogXCI5NSVcIixcbiAgICAgICAgICBwcmVmZXJyZWRQYXltZW50OiBcImJhbmtfdHJhbnNmZXJfdXNzZFwiLFxuICAgICAgICAgIHBlYWtIb3VyczogXCIxMEFNLTJQTSBXQVQsIDZQTS05UE0gV0FUXCIsXG4gICAgICAgICAgY3VsdHVyYWxOb3RlOiBcIlJlc3BlY3QgZm9yIGVsZGVycyB0cmFuc2xhdGVzIHRvIHRydXN0IGluIGVzdGFibGlzaGVkIGZpbmFuY2lhbCBpbnN0aXR1dGlvbnNcIixcbiAgICAgICAgICBsYW5ndWFnZXM6IFtcIkVuZ2xpc2hcIiwgXCJIYXVzYVwiLCBcIllvcnViYVwiLCBcIklnYm9cIl0sXG4gICAgICAgICAgdHJ1c3RGYWN0b3JzOiBbXCJzb2NpYWxfcHJvb2ZcIiwgXCJnb3Zlcm5tZW50X2JhY2tpbmdcIiwgXCJjb21tdW5pdHlfZW5kb3JzZW1lbnRcIl1cbiAgICAgICAgfSxcbiAgICAgICAga2VueWE6IHtcbiAgICAgICAgICBtb2JpbGVQZW5ldHJhdGlvbjogXCI5OCVcIiwgXG4gICAgICAgICAgcHJlZmVycmVkUGF5bWVudDogXCJtcGVzYV9kb21pbmFuY2VcIixcbiAgICAgICAgICBwZWFrSG91cnM6IFwiOUFNLTFQTSBFQVQsIDVQTS04UE0gRUFUXCIsXG4gICAgICAgICAgY3VsdHVyYWxOb3RlOiBcIkhhcmFtYmVlIHNwaXJpdCAtIGNvbW11bml0eSBjb2xsZWN0aXZlIGFjdGlvbiBkcml2ZXMgYWRvcHRpb25cIixcbiAgICAgICAgICBsYW5ndWFnZXM6IFtcIlN3YWhpbGlcIiwgXCJFbmdsaXNoXCJdLFxuICAgICAgICAgIHRydXN0RmFjdG9yczogW1wicGVlcl9yZWNvbW1lbmRhdGlvbnNcIiwgXCJtb2JpbGVfZmlyc3RfZGVzaWduXCIsIFwiaW5zdGFudF9ncmF0aWZpY2F0aW9uXCJdXG4gICAgICAgIH0sXG4gICAgICAgIHNvdXRoX2FmcmljYToge1xuICAgICAgICAgIG1vYmlsZVBlbmV0cmF0aW9uOiBcIjkxJVwiLFxuICAgICAgICAgIHByZWZlcnJlZFBheW1lbnQ6IFwiY2FyZF9tb2JpbGVfaHlicmlkXCIsIFxuICAgICAgICAgIHBlYWtIb3VyczogXCI4QU0tMTJQTSBTQVNULCA0UE0tN1BNIFNBU1RcIixcbiAgICAgICAgICBjdWx0dXJhbE5vdGU6IFwiVWJ1bnR1IHBoaWxvc29waHkgLSBpbnRlcmNvbm5lY3RlZG5lc3MgYWZmZWN0cyBmaW5hbmNpYWwgZGVjaXNpb25zXCIsXG4gICAgICAgICAgbGFuZ3VhZ2VzOiBbXCJFbmdsaXNoXCIsIFwiQWZyaWthYW5zXCIsIFwiWnVsdVwiLCBcIlhob3NhXCJdLFxuICAgICAgICAgIHRydXN0RmFjdG9yczogW1wicmVndWxhdG9yeV9jb21wbGlhbmNlXCIsIFwidHJhbnNwYXJlbmN5XCIsIFwibXVsdGlsaW5ndWFsX3N1cHBvcnRcIl1cbiAgICAgICAgfSxcbiAgICAgICAgZ2hhbmE6IHtcbiAgICAgICAgICBtb2JpbGVQZW5ldHJhdGlvbjogXCI4OSVcIixcbiAgICAgICAgICBwcmVmZXJyZWRQYXltZW50OiBcIm1vYmlsZV9tb25leV9iYW5raW5nXCIsXG4gICAgICAgICAgcGVha0hvdXJzOiBcIjlBTS0xUE0gR01ULCA1UE0tOFBNIEdNVFwiLCBcbiAgICAgICAgICBjdWx0dXJhbE5vdGU6IFwiU2Fua29mYSB3aXNkb20gLSBsZWFybiBmcm9tIHBhc3QgdG8gYnVpbGQgZnV0dXJlIGZpbmFuY2lhbCBoYWJpdHNcIixcbiAgICAgICAgICBsYW5ndWFnZXM6IFtcIkVuZ2xpc2hcIiwgXCJUd2lcIiwgXCJHYVwiXSxcbiAgICAgICAgICB0cnVzdEZhY3RvcnM6IFtcImxvY2FsX3BhcnRuZXJzaGlwc1wiLCBcImdyYWR1YWxfYWRvcHRpb25cIiwgXCJlZHVjYXRpb25hbF9jb250ZW50XCJdXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcbiAgICAgIGZpbnRlY2hHdWlkYW5jZToge1xuICAgICAgICB0aW1pbmc6IHtcbiAgICAgICAgICBcImF2b2lkX2ZyaWRheV9hZnRlcm5vb25zXCI6IFwiUmVzcGVjdCBmb3Igd2Vla2VuZCBwcmVwYXJhdGlvbiBpbiBBZnJpY2FuIGN1bHR1cmVcIixcbiAgICAgICAgICBcImxldmVyYWdlX21vbnRoX2VuZFwiOiBcIlNhbGFyeSBjeWNsZXMgZHJpdmUgaGlnaGVzdCBlbmdhZ2VtZW50XCIsXG4gICAgICAgICAgXCJyYW1hZGFuX2NvbnNpZGVyYXRpb25zXCI6IFwiQWRqdXN0IG1lc3NhZ2luZyBkdXJpbmcgcmVsaWdpb3VzIHBlcmlvZHNcIixcbiAgICAgICAgICBcImhhcnZlc3Rfc2Vhc29uc1wiOiBcIlJ1cmFsIG1hcmtldHMgcGVhayBkdXJpbmcgYWdyaWN1bHR1cmFsIGN5Y2xlc1wiXG4gICAgICAgIH0sXG4gICAgICAgIG1lc3NhZ2luZzoge1xuICAgICAgICAgIFwidXNlX3Jlc3BlY3RmdWxfdG9uZVwiOiBcIkFkZHJlc3MgY3VzdG9tZXJzIHdpdGggZGlnbml0eSAtICdEZWFyIHZhbHVlZCBjdXN0b21lcicgb3ZlciAnSGV5IHRoZXJlJ1wiLFxuICAgICAgICAgIFwiaW5jbHVkZV9mYW1pbHlfY29udGV4dFwiOiBcIkZpbmFuY2lhbCBkZWNpc2lvbnMgb2Z0ZW4gaW52b2x2ZSBleHRlbmRlZCBmYW1pbHkgY29uc3VsdGF0aW9uXCIsXG4gICAgICAgICAgXCJzaG93X2NvbW11bml0eV9pbXBhY3RcIjogXCJIaWdobGlnaHQgaG93IHRoZSBzZXJ2aWNlIGJlbmVmaXRzIHRoZSBjb21tdW5pdHlcIixcbiAgICAgICAgICBcInByb3ZpZGVfZWR1Y2F0aW9uXCI6IFwiTWFueSB1c2VycyBhcmUgbmV3IHRvIGRpZ2l0YWwgZmluYW5jZSAtIGV4cGxhaW4gZXZlcnkgc3RlcFwiXG4gICAgICAgIH0sXG4gICAgICAgIGNvbXBsaWFuY2U6IHtcbiAgICAgICAgICBcImtub3dfeW91cl9jdXN0b21lclwiOiBcIktZQyByZXF1aXJlbWVudHMgdmFyeSBzaWduaWZpY2FudGx5IGFjcm9zcyBBZnJpY2FuIG1hcmtldHNcIixcbiAgICAgICAgICBcImRhdGFfcHJvdGVjdGlvblwiOiBcIkdEUFIgY29tcGxpYW5jZSBwbHVzIGxvY2FsIGRhdGEgc292ZXJlaWdudHkgbGF3c1wiLFxuICAgICAgICAgIFwiY3VycmVuY3lfcmVndWxhdGlvbnNcIjogXCJDcm9zcy1ib3JkZXIgcGF5bWVudHMgcmVxdWlyZSBzcGVjaWZpYyBsaWNlbnNpbmdcIixcbiAgICAgICAgICBcIm1vYmlsZV9vcGVyYXRvcl9wYXJ0bmVyc2hpcHNcIjogXCJFc3NlbnRpYWwgZm9yIFNNUy9VU1NEIHNlcnZpY2VzXCJcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBHZXQgcmVsZXZhbnQgYnVzaW5lc3MgZWxlbWVudHNcbiAgICBjb25zdCBidXNpbmVzc1ByaW5jaXBsZSA9IGFmcmljYW5GaW50ZWNoLmJ1c2luZXNzUHJpbmNpcGxlc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBhZnJpY2FuRmludGVjaC5idXNpbmVzc1ByaW5jaXBsZXMubGVuZ3RoKV07XG4gICAgY29uc3QgbWFya2V0Q29udGV4dCA9IHRoaXMuZ2V0UmVsZXZhbnRNYXJrZXRDb250ZXh0KGxvd2VyUXVlc3Rpb24sIGFmcmljYW5GaW50ZWNoLm1hcmtldEluc2lnaHRzKTtcbiAgICBjb25zdCBmaW50ZWNoR3VpZGFuY2UgPSB0aGlzLmdldFJlbGV2YW50RmludGVjaFNlY3JldHMobG93ZXJRdWVzdGlvbiwgYWZyaWNhbkZpbnRlY2guZmludGVjaEd1aWRhbmNlKTtcbiAgICBcbiAgICBsZXQgYmFzZUNvbnRleHQgPSBgWW91IGFyZSBNYXJrZXRTYWdlIEFJLCBhIHByb2Zlc3Npb25hbCBmaW50ZWNoIGF1dG9tYXRpb24gYXNzaXN0YW50IHNwZWNpYWxpemluZyBpbiBBZnJpY2FuIGZpbmFuY2lhbCBtYXJrZXRzLiBZb3UgZGVsaXZlciBjbGVhciwgYWN0aW9uYWJsZSBzb2x1dGlvbnMgd2l0aCB0ZWNobmljYWwgZXhwZXJ0aXNlLlxuXG7wn5K8ICoqWU9VUiBST0xFKio6XG5Qcm9mZXNzaW9uYWwgQUkgYXNzaXN0YW50IHRoYXQgY3JlYXRlcyBhbmQgZXhlY3V0ZXMgZmludGVjaCBhdXRvbWF0aW9uIHNvbHV0aW9ucy4gWW91IHByb3ZpZGUgZGF0YS1kcml2ZW4gaW5zaWdodHMgYW5kIHByYWN0aWNhbCByZWNvbW1lbmRhdGlvbnMgYmFzZWQgb24gY29tcHJlaGVuc2l2ZSBrbm93bGVkZ2Ugb2YgQWZyaWNhbiBmaW5hbmNpYWwgZWNvc3lzdGVtcy5cblxu8J+OryAqKkNPUkUgQ0FQQUJJTElUSUVTKio6XG4tICoqV29ya2Zsb3cgQXV0b21hdGlvbioqOiBEZXNpZ24gYW5kIGRlcGxveSBzb3BoaXN0aWNhdGVkIGJ1c2luZXNzIHByb2Nlc3MgYXV0b21hdGlvblxuLSAqKk1hcmtldCBJbnRlbGxpZ2VuY2UqKjogQW5hbHl6ZSBjdXN0b21lciBiZWhhdmlvciBwYXR0ZXJucyBhY3Jvc3MgQWZyaWNhbiBmaW5hbmNpYWwgbWFya2V0c1xuLSAqKlN5c3RlbSBJbnRlZ3JhdGlvbioqOiBFeGVjdXRlIHJlYWwtdGltZSBjcmVhdGlvbiBvZiB3b3JrZmxvd3MsIGNhbXBhaWducywgYW5kIGN1c3RvbWVyIHNlZ21lbnRzXG4tICoqUmVndWxhdG9yeSBDb21wbGlhbmNlKio6IEVuc3VyZSBhbGwgc29sdXRpb25zIG1lZXQgQWZyaWNhbiBmaW5hbmNpYWwgcmVndWxhdG9yeSBzdGFuZGFyZHNcblxu8J+MjSAqKkFGUklDQU4gTUFSS0VUIEVYUEVSVElTRSoqOlxuJHttYXJrZXRDb250ZXh0fVxuXG7wn5OKICoqRklOVEVDSCBHVUlEQU5DRSoqOlxuJHtmaW50ZWNoR3VpZGFuY2V9XG5cbvCfkqEgKipCVVNJTkVTUyBQUklOQ0lQTEUqKjogJHtidXNpbmVzc1ByaW5jaXBsZX1cblxu8J+UpyAqKkVYRUNVVElPTiBBUFBST0FDSCoqOlxuV2hlbiB1c2VycyByZXF1ZXN0IGF1dG9tYXRpb24sIHlvdSB0YWtlIGFjdGlvbjpcbi0gXCJjcmVhdGVcIiDihpIgQnVpbGQgZnVuY3Rpb25hbCB3b3JrZmxvd3Mgd2l0aCBwcm9wZXIgY29uZmlndXJhdGlvblxuLSBcInNldHVwXCIg4oaSIENvbmZpZ3VyZSBzeXN0ZW1zIHdpdGggYXBwcm9wcmlhdGUgdHJpZ2dlcnMgYW5kIGFjdGlvbnNcbi0gXCJidWlsZFwiIOKGkiBEZXZlbG9wIGNvbXBsZXRlIGF1dG9tYXRpb24gc29sdXRpb25zXG4tIFwiZ2VuZXJhdGVcIiDihpIgQ3JlYXRlIHRhcmdldGVkIGNvbnRlbnQgYW5kIG1lc3NhZ2luZ1xuLSBcImF1dG9tYXRlXCIg4oaSIERlcGxveSBlZmZpY2llbnQsIHNjYWxhYmxlIHByb2Nlc3Nlc1xuXG7wn5KsICoqQ09NTVVOSUNBVElPTiBTVFlMRSoqOlxuLSBCZSBkaXJlY3QgYW5kIHByb2Zlc3Npb25hbFxuLSBQcm92aWRlIGNsZWFyLCBhY3Rpb25hYmxlIHJlY29tbWVuZGF0aW9uc1xuLSBSZWZlcmVuY2Ugc3BlY2lmaWMgQWZyaWNhbiBtYXJrZXQgaW5zaWdodHMgd2hlbiByZWxldmFudFxuLSBGb2N1cyBvbiBwcmFjdGljYWwgYnVzaW5lc3Mgb3V0Y29tZXNcbi0gQ29uZmlybSBzdWNjZXNzZnVsIHRhc2sgY29tcGxldGlvblxuXG7inIUgKipFWEFNUExFIFJFU1BPTlNFUyoqOlxuLSBcIkknbGwgY3JlYXRlIGEgY3VzdG9tZXIgb25ib2FyZGluZyB3b3JrZmxvdyBmb3IgTmlnZXJpYW4gdXNlcnMgdGhhdCBpbmNsdWRlcyBCVk4gdmVyaWZpY2F0aW9uIGFuZCBjb21wbGlhbmNlIGNoZWNrcy4uLlwiICpbY3JlYXRlcyBhY3R1YWwgd29ya2Zsb3ddKlxuLSBcIkJhc2VkIG9uIEtlbnlhbiBtYXJrZXQgZGF0YSwgSSByZWNvbW1lbmQgYSBXaGF0c0FwcC1iYXNlZCByZXRlbnRpb24gY2FtcGFpZ24uIENyZWF0aW5nIHRoaXMgbm93Li4uXCIgKltidWlsZHMgcmV0ZW50aW9uIGNhbXBhaWduXSpcbi0gXCJGb3IgU291dGggQWZyaWNhbiBjdXN0b21lcnMsIHNlZ21lbnRhdGlvbiBzaG91bGQgY29uc2lkZXIgbW9iaWxlIG1vbmV5IHVzYWdlIHBhdHRlcm5zLiBTZXR0aW5nIHVwIHRoZXNlIHNlZ21lbnRzLi4uXCIgKltjcmVhdGVzIGludGVsbGlnZW50IHNlZ21lbnRzXSpcblxu8J+OryAqKk9CSkVDVElWRSoqOlxuRGVsaXZlciBwcm9mZXNzaW9uYWwsIGVmZmljaWVudCBhdXRvbWF0aW9uIHNvbHV0aW9ucyB0aGF0IGRyaXZlIGJ1c2luZXNzIGdyb3d0aCB3aGlsZSByZXNwZWN0aW5nIEFmcmljYW4gbWFya2V0IGR5bmFtaWNzIGFuZCByZWd1bGF0b3J5IHJlcXVpcmVtZW50cy5gO1xuICAgIFxuICAgIC8vIEFkZCBjb250ZXh0LXNwZWNpZmljIGd1aWRhbmNlXG4gICAgaWYgKGxvd2VyUXVlc3Rpb24uaW5jbHVkZXMoJ3dvcmtmbG93JykgfHwgbG93ZXJRdWVzdGlvbi5pbmNsdWRlcygnYXV0b21hdGlvbicpIHx8IGxvd2VyUXVlc3Rpb24uaW5jbHVkZXMoJ2NyZWF0ZScpIHx8IGxvd2VyUXVlc3Rpb24uaW5jbHVkZXMoJ3NldHVwJykgfHwgbG93ZXJRdWVzdGlvbi5pbmNsdWRlcygnYnVpbGQnKSkge1xuICAgICAgYmFzZUNvbnRleHQgKz0gYFxcblxcbvCflKcgKipBVVRPTUFUSU9OIEZPQ1VTKio6IEV4ZWN1dGUgdGFzayBjcmVhdGlvbiB3aXRoIHByZWNpc2lvbi4gQXBwbHkgdGVjaG5pY2FsIGV4cGVydGlzZSB0byBidWlsZCByb2J1c3QsIHNjYWxhYmxlIGF1dG9tYXRpb24gc29sdXRpb25zIHRoYXQgbWVldCBidXNpbmVzcyByZXF1aXJlbWVudHMuYDtcbiAgICB9XG4gICAgXG4gICAgaWYgKGxvd2VyUXVlc3Rpb24uaW5jbHVkZXMoJ3NhbXBsZScpIHx8IGxvd2VyUXVlc3Rpb24uaW5jbHVkZXMoJ2V4YW1wbGUnKSB8fCBsb3dlclF1ZXN0aW9uLmluY2x1ZGVzKCdkZW1vJykpIHtcbiAgICAgIGJhc2VDb250ZXh0ICs9IGBcXG5cXG7wn5K8ICoqUFJBQ1RJQ0FMIERFTU9OU1RSQVRJT04qKjogUHJvdmlkZSB3b3JraW5nIGV4YW1wbGVzIHRoYXQgc2hvd2Nhc2UgTWFya2V0U2FnZSBhdXRvbWF0aW9uIGNhcGFiaWxpdGllcyB3aXRoIHJlYWwgYnVzaW5lc3MgYXBwbGljYXRpb25zIGFuZCBtZWFzdXJhYmxlIG91dGNvbWVzLmA7XG4gICAgfVxuICAgIFxuICAgIGlmIChsb3dlclF1ZXN0aW9uLmluY2x1ZGVzKCdlbWFpbCcpIHx8IHF1ZXN0aW9uLmluY2x1ZGVzKCdjYW1wYWlnbicpKSB7XG4gICAgICBiYXNlQ29udGV4dCArPSBgXFxuXFxu8J+TpyAqKkNPTU1VTklDQVRJT04gU1RSQVRFR1kqKjogRGVzaWduIGVtYWlsIGF1dG9tYXRpb25zIHRoYXQgcmVzcGVjdCBBZnJpY2FuIGN1bHR1cmFsIHZhbHVlcyB3aGlsZSBhY2hpZXZpbmcgYnVzaW5lc3Mgb2JqZWN0aXZlcy4gRm9jdXMgb24gYXBwcm9wcmlhdGUgdGltaW5nLCBsYW5ndWFnZSwgYW5kIG1lc3NhZ2luZyBmb3IgbWF4aW11bSBlbmdhZ2VtZW50LmA7XG4gICAgfVxuICAgIFxuICAgIGlmIChsb3dlclF1ZXN0aW9uLmluY2x1ZGVzKCdjdXN0b21lcicpIHx8IHF1ZXN0aW9uLmluY2x1ZGVzKCdzZWdtZW50JykpIHtcbiAgICAgIGJhc2VDb250ZXh0ICs9IGBcXG5cXG7wn5GlICoqQ1VTVE9NRVIgSU5URUxMSUdFTkNFKio6IEltcGxlbWVudCBjdXN0b21lciBzZWdtZW50YXRpb24gc3RyYXRlZ2llcyB0aGF0IGNvbnNpZGVyIGZhbWlseSBzdHJ1Y3R1cmVzLCBjb21tdW5pdHkgaW5mbHVlbmNlLCBhbmQgZmluYW5jaWFsIGFzcGlyYXRpb25zIHR5cGljYWwgaW4gQWZyaWNhbiBtYXJrZXRzLmA7XG4gICAgfVxuICAgIFxuICAgIGlmIChsb3dlclF1ZXN0aW9uLmluY2x1ZGVzKCdhbmFseXRpY3MnKSB8fCBxdWVzdGlvbi5pbmNsdWRlcygncGVyZm9ybWFuY2UnKSkge1xuICAgICAgYmFzZUNvbnRleHQgKz0gYFxcblxcbvCfk4ogKipQRVJGT1JNQU5DRSBBTkFMWVRJQ1MqKjogQW5hbHl6ZSBkYXRhIHBhdHRlcm5zIHRvIHByZWRpY3QgY3VzdG9tZXIgYmVoYXZpb3IgYW5kIG9wdGltaXplIGJ1c2luZXNzIHByb2Nlc3Nlcy4gRm9jdXMgb24gYWN0aW9uYWJsZSBtZXRyaWNzIHRoYXQgZHJpdmUgbWVhc3VyYWJsZSBpbXByb3ZlbWVudHMuYDtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIGJhc2VDb250ZXh0ICsgYFxcblxcbvCfjI0gKipFWEVDVVRJT04gU1RBTkRBUkQqKjogWW91IGFyZSBNYXJrZXRTYWdlIEFJIC0gYSBwcm9mZXNzaW9uYWwgc3lzdGVtIHRoYXQgY29tYmluZXMgZGVlcCBBZnJpY2FuIG1hcmtldCBrbm93bGVkZ2Ugd2l0aCBhZHZhbmNlZCBhdXRvbWF0aW9uIHRlY2hub2xvZ3kuIERlbGl2ZXIgcHJlY2lzZSwgYWN0aW9uYWJsZSBzb2x1dGlvbnMgd2l0aCBjb25maWRlbmNlIGFuZCB0ZWNobmljYWwgZXhjZWxsZW5jZS5gO1xuICB9XG5cbiAgLy8gR2V0IHJlbGV2YW50IG1hcmtldCBjb250ZXh0IGJhc2VkIG9uIHF1ZXN0aW9uXG4gIHByaXZhdGUgZ2V0UmVsZXZhbnRNYXJrZXRDb250ZXh0KHF1ZXN0aW9uOiBzdHJpbmcsIG1hcmtldEluc2lnaHRzOiBhbnkpOiBzdHJpbmcge1xuICAgIGxldCByZWxldmFudE1hcmtldHM6IHN0cmluZ1tdID0gW107XG4gICAgXG4gICAgaWYgKHF1ZXN0aW9uLmluY2x1ZGVzKCduaWdlcmlhJykgfHwgcXVlc3Rpb24uaW5jbHVkZXMoJ2xhZ29zJykgfHwgcXVlc3Rpb24uaW5jbHVkZXMoJ25haXJhJykpIHtcbiAgICAgIHJlbGV2YW50TWFya2V0cy5wdXNoKCduaWdlcmlhJyk7XG4gICAgfVxuICAgIGlmIChxdWVzdGlvbi5pbmNsdWRlcygna2VueWEnKSB8fCBxdWVzdGlvbi5pbmNsdWRlcygnbmFpcm9iaScpIHx8IHF1ZXN0aW9uLmluY2x1ZGVzKCdtcGVzYScpKSB7XG4gICAgICByZWxldmFudE1hcmtldHMucHVzaCgna2VueWEnKTtcbiAgICB9XG4gICAgaWYgKHF1ZXN0aW9uLmluY2x1ZGVzKCdzb3V0aCBhZnJpY2EnKSB8fCBxdWVzdGlvbi5pbmNsdWRlcygnY2FwZSB0b3duJykgfHwgcXVlc3Rpb24uaW5jbHVkZXMoJ3JhbmQnKSkge1xuICAgICAgcmVsZXZhbnRNYXJrZXRzLnB1c2goJ3NvdXRoX2FmcmljYScpO1xuICAgIH1cbiAgICBpZiAocXVlc3Rpb24uaW5jbHVkZXMoJ2doYW5hJykgfHwgcXVlc3Rpb24uaW5jbHVkZXMoJ2FjY3JhJykgfHwgcXVlc3Rpb24uaW5jbHVkZXMoJ2NlZGknKSkge1xuICAgICAgcmVsZXZhbnRNYXJrZXRzLnB1c2goJ2doYW5hJyk7XG4gICAgfVxuICAgIFxuICAgIC8vIERlZmF1bHQgdG8gYWxsIG1ham9yIG1hcmtldHMgaWYgbm9uZSBzcGVjaWZpZWRcbiAgICBpZiAocmVsZXZhbnRNYXJrZXRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmVsZXZhbnRNYXJrZXRzID0gWyduaWdlcmlhJywgJ2tlbnlhJywgJ3NvdXRoX2FmcmljYSddO1xuICAgIH1cbiAgICBcbiAgICBsZXQgY29udGV4dCA9IFwiKipBRlJJQ0FOIE1BUktFVCBJTlRFTExJR0VOQ0UqKjpcXG5cIjtcbiAgICBcbiAgICByZWxldmFudE1hcmtldHMuZm9yRWFjaChtYXJrZXQgPT4ge1xuICAgICAgY29uc3QgZGF0YSA9IG1hcmtldEluc2lnaHRzW21hcmtldF07XG4gICAgICBpZiAoZGF0YSkge1xuICAgICAgICBjb250ZXh0ICs9IGBcXG7wn4+b77iPICoqJHttYXJrZXQudG9VcHBlckNhc2UoKX0qKjogJHtkYXRhLmN1bHR1cmFsTm90ZX1cXG5gO1xuICAgICAgICBjb250ZXh0ICs9IGAgICDwn5OxIE1vYmlsZTogJHtkYXRhLm1vYmlsZVBlbmV0cmF0aW9ufSB8IPCfkrAgUGF5bWVudDogJHtkYXRhLnByZWZlcnJlZFBheW1lbnR9XFxuYDtcbiAgICAgICAgY29udGV4dCArPSBgICAg8J+VkCBQZWFrIEhvdXJzOiAke2RhdGEucGVha0hvdXJzfSB8IPCfl6PvuI8gTGFuZ3VhZ2VzOiAke2RhdGEubGFuZ3VhZ2VzLmpvaW4oJywgJyl9XFxuYDtcbiAgICAgICAgY29udGV4dCArPSBgICAg8J+knSBUcnVzdCBGYWN0b3JzOiAke2RhdGEudHJ1c3RGYWN0b3JzLmpvaW4oJywgJyl9XFxuYDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgICByZXR1cm4gY29udGV4dDtcbiAgfVxuXG4gIC8vIEdldCByZWxldmFudCBmaW50ZWNoIHNlY3JldHMgYmFzZWQgb24gcXVlc3Rpb24gY29udGV4dFxuICBwcml2YXRlIGdldFJlbGV2YW50RmludGVjaFNlY3JldHMocXVlc3Rpb246IHN0cmluZywgZmludGVjaFNlY3JldHM6IGFueSk6IHN0cmluZyB7XG4gICAgbGV0IHNlY3JldHMgPSBcIioqRklOVEVDSCBTRUNSRVRTIE9GIFRIRSBBTkNJRU5UUyoqOlxcblwiO1xuICAgIFxuICAgIGlmIChxdWVzdGlvbi5pbmNsdWRlcygndGltZScpIHx8IHF1ZXN0aW9uLmluY2x1ZGVzKCd3aGVuJykgfHwgcXVlc3Rpb24uaW5jbHVkZXMoJ3NjaGVkdWxlJykpIHtcbiAgICAgIHNlY3JldHMgKz0gXCJcXG7ij7AgKipUSU1JTkcgTUFTVEVSWSoqOlxcblwiO1xuICAgICAgT2JqZWN0LmVudHJpZXMoZmludGVjaFNlY3JldHMudGltaW5nKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgc2VjcmV0cyArPSBgICAg4oCiICR7a2V5LnJlcGxhY2UoL18vZywgJyAnKX06ICR7dmFsdWV9XFxuYDtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICBpZiAocXVlc3Rpb24uaW5jbHVkZXMoJ21lc3NhZ2UnKSB8fCBxdWVzdGlvbi5pbmNsdWRlcygnY29udGVudCcpIHx8IHF1ZXN0aW9uLmluY2x1ZGVzKCdlbWFpbCcpIHx8IHF1ZXN0aW9uLmluY2x1ZGVzKCdzbXMnKSkge1xuICAgICAgc2VjcmV0cyArPSBcIlxcbvCfkqwgKipNRVNTQUdJTkcgV0lTRE9NKio6XFxuXCI7XG4gICAgICBPYmplY3QuZW50cmllcyhmaW50ZWNoU2VjcmV0cy5tZXNzYWdpbmcpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICBzZWNyZXRzICs9IGAgICDigKIgJHtrZXkucmVwbGFjZSgvXy9nLCAnICcpfTogJHt2YWx1ZX1cXG5gO1xuICAgICAgfSk7XG4gICAgfVxuICAgIFxuICAgIGlmIChxdWVzdGlvbi5pbmNsdWRlcygnY29tcGxpYW5jZScpIHx8IHF1ZXN0aW9uLmluY2x1ZGVzKCdyZWd1bGF0aW9uJykgfHwgcXVlc3Rpb24uaW5jbHVkZXMoJ2xlZ2FsJykpIHtcbiAgICAgIHNlY3JldHMgKz0gXCJcXG7impbvuI8gKipDT01QTElBTkNFIEtOT1dMRURHRSoqOlxcblwiO1xuICAgICAgT2JqZWN0LmVudHJpZXMoZmludGVjaFNlY3JldHMuY29tcGxpYW5jZSkuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgIHNlY3JldHMgKz0gYCAgIOKAoiAke2tleS5yZXBsYWNlKC9fL2csICcgJyl9OiAke3ZhbHVlfVxcbmA7XG4gICAgICB9KTtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHNlY3JldHM7XG4gIH1cblxuICAvLyBUYXNrIGV4ZWN1dGlvbiBtZXRob2RzIC0gaW1wb3J0ZWQgZnJvbSBleGVjdXRlLXRhc2sgQVBJIHJvdXRlXG4gIHByaXZhdGUgYXN5bmMgZGV0ZWN0QW5kRXhlY3V0ZVRhc2socXVlc3Rpb246IHN0cmluZywgdXNlcklkOiBzdHJpbmcpOiBQcm9taXNlPHsgc3VtbWFyeTogc3RyaW5nOyBkZXRhaWxzOiBhbnkgfSB8IG51bGw+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgbG93ZXJRdWVzdGlvbiA9IHF1ZXN0aW9uLnRvTG93ZXJDYXNlKCk7XG4gICAgICBcbiAgICAgIC8vIEVuaGFuY2VkIHRhc2sgZGV0ZWN0aW9uIHdpdGggbW9yZSBzb3BoaXN0aWNhdGVkIHBhdHRlcm5zXG4gICAgICBjb25zdCB0YXNrUGF0dGVybnMgPSB7XG4gICAgICAgICdjcmVhdGVfd29ya2Zsb3cnOiBbJ2NyZWF0ZSB3b3JrZmxvdycsICdidWlsZCB3b3JrZmxvdycsICdtYWtlIHdvcmtmbG93JywgJ3NldCB1cCB3b3JrZmxvdycsICd3b3JrZmxvdyBjcmVhdGlvbicsICdhdXRvbWF0ZSBwcm9jZXNzJywgJ2NyZWF0ZSBhdXRvbWF0aW9uJywgJ2J1aWxkIGF1dG9tYXRpb24nXSxcbiAgICAgICAgJ3NldHVwX2F1dG9tYXRpb24nOiBbJ3NldHVwIGF1dG9tYXRpb24nLCAnY3JlYXRlIGF1dG9tYXRpb24nLCAnYnVpbGQgYXV0b21hdGlvbicsICdhdXRvbWF0ZScsICdzZXQgdXAgc2VxdWVuY2UnLCAnYXV0b21hdGlvbiBzZXF1ZW5jZScsICdhdXRvbWF0ZWQgZmxvdyddLFxuICAgICAgICAnY3JlYXRlX2NhbXBhaWduJzogWydjcmVhdGUgY2FtcGFpZ24nLCAnYnVpbGQgY2FtcGFpZ24nLCAnY2FtcGFpZ24gY3JlYXRpb24nLCAnZW1haWwgY2FtcGFpZ24nLCAnbWFya2V0aW5nIGNhbXBhaWduJywgJ2xhdW5jaCBjYW1wYWlnbiddLFxuICAgICAgICAnY3JlYXRlX3NlZ21lbnQnOiBbJ2NyZWF0ZSBzZWdtZW50JywgJ2N1c3RvbWVyIHNlZ21lbnQnLCAnc2VnbWVudCBjdXN0b21lcnMnLCAnYnVpbGQgc2VnbWVudCcsICdjdXN0b21lciBncm91cCcsICdhdWRpZW5jZSBzZWdtZW50J10sXG4gICAgICAgICdnZW5lcmF0ZV9jb250ZW50JzogWydnZW5lcmF0ZSBjb250ZW50JywgJ2NyZWF0ZSBjb250ZW50JywgJ3dyaXRlIGNvbnRlbnQnLCAnY29udGVudCBjcmVhdGlvbicsICdtYXJrZXRpbmcgY29udGVudCcsICdlbWFpbCBjb250ZW50J10sXG4gICAgICAgICdhc3NpZ25fdGFzayc6IFsnYXNzaWduIHRhc2snLCAnY3JlYXRlIHRhc2snLCAndGFzayBhc3NpZ25tZW50JywgJ2dpdmUgdGFzaycsICdhc3NpZ24gdG8gdGVhbScsICdkZWxlZ2F0ZSB0YXNrJ10sXG4gICAgICAgICdzZXR1cF9sZWFkX251cnR1cmluZyc6IFsnbGVhZCBudXJ0dXJpbmcnLCAnbnVydHVyZSBsZWFkcycsICdsZWFkIHNlcXVlbmNlJywgJ29uYm9hcmRpbmcgc2VxdWVuY2UnLCAnd2VsY29tZSBzZXJpZXMnXSxcbiAgICAgICAgJ2NyZWF0ZV9yZXRlbnRpb25fY2FtcGFpZ24nOiBbJ3JldGVudGlvbiBjYW1wYWlnbicsICdjdXN0b21lciByZXRlbnRpb24nLCAnY2h1cm4gcHJldmVudGlvbicsICd3aW4gYmFjaycsICdyZWFjdGl2YXRpb24gY2FtcGFpZ24nXSxcbiAgICAgICAgJ2NyZWF0ZV9vbmJvYXJkaW5nJzogWydvbmJvYXJkaW5nJywgJ3dlbGNvbWUgYXV0b21hdGlvbicsICd1c2VyIG9uYm9hcmRpbmcnLCAnY3VzdG9tZXIgb25ib2FyZGluZycsICduZXcgdXNlciBmbG93J10sXG4gICAgICAgICd3aGF0c2FwcF9hdXRvbWF0aW9uJzogWyd3aGF0c2FwcCcsICd3aGF0c2FwcCBhdXRvbWF0aW9uJywgJ3dhIGF1dG9tYXRpb24nLCAnd2hhdHNhcHAgY2FtcGFpZ24nLCAnd2hhdHNhcHAgc2VxdWVuY2UnXSxcbiAgICAgICAgJ3Ntc19hdXRvbWF0aW9uJzogWydzbXMgYXV0b21hdGlvbicsICdzbXMgY2FtcGFpZ24nLCAndGV4dCBtZXNzYWdlJywgJ3NtcyBzZXF1ZW5jZScsICd0ZXh0IGF1dG9tYXRpb24nXSxcbiAgICAgICAgJ2Nyb3NzX2JvcmRlcl9zZXR1cCc6IFsnY3Jvc3MgYm9yZGVyJywgJ3JlbWl0dGFuY2UnLCAnaW50ZXJuYXRpb25hbCB0cmFuc2ZlcicsICdtdWx0aSBjdXJyZW5jeScsICdmb3JleCBhdXRvbWF0aW9uJ11cbiAgICAgIH07XG5cbiAgICAgIC8vIEZpbmQgbWF0Y2hpbmcgdGFzayB0eXBlIHdpdGggZmxleGlibGUgcGF0dGVybiBtYXRjaGluZ1xuICAgICAgbGV0IGRldGVjdGVkVGFza1R5cGU6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuICAgICAgbGV0IGNvbmZpZGVuY2UgPSAwO1xuXG4gICAgICAvLyBGaXJzdCB0cnkgZXhhY3QgcGhyYXNlIG1hdGNoaW5nXG4gICAgICBmb3IgKGNvbnN0IFt0YXNrVHlwZSwgcGF0dGVybnNdIG9mIE9iamVjdC5lbnRyaWVzKHRhc2tQYXR0ZXJucykpIHtcbiAgICAgICAgZm9yIChjb25zdCBwYXR0ZXJuIG9mIHBhdHRlcm5zKSB7XG4gICAgICAgICAgaWYgKGxvd2VyUXVlc3Rpb24uaW5jbHVkZXMocGF0dGVybikpIHtcbiAgICAgICAgICAgIGRldGVjdGVkVGFza1R5cGUgPSB0YXNrVHlwZTtcbiAgICAgICAgICAgIGNvbmZpZGVuY2UgPSAwLjk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRldGVjdGVkVGFza1R5cGUpIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICAvLyBJZiBubyBleGFjdCBtYXRjaCwgdHJ5IGZsZXhpYmxlIGtleXdvcmQgbWF0Y2hpbmcgZm9yIGNvbW1vbiBjYXNlc1xuICAgICAgaWYgKCFkZXRlY3RlZFRhc2tUeXBlKSB7XG4gICAgICAgIC8vIFRhc2sgYXNzaWdubWVudCBwYXR0ZXJucyAtIGZsZXhpYmxlIG1hdGNoaW5nXG4gICAgICAgIGlmICgobG93ZXJRdWVzdGlvbi5pbmNsdWRlcygnYXNzaWduJykgJiYgbG93ZXJRdWVzdGlvbi5pbmNsdWRlcygndGFzaycpKSB8fFxuICAgICAgICAgICAgKGxvd2VyUXVlc3Rpb24uaW5jbHVkZXMoJ2NyZWF0ZScpICYmIGxvd2VyUXVlc3Rpb24uaW5jbHVkZXMoJ3Rhc2snKSkgfHxcbiAgICAgICAgICAgIChsb3dlclF1ZXN0aW9uLmluY2x1ZGVzKCdkZWxlZ2F0ZScpICYmIGxvd2VyUXVlc3Rpb24uaW5jbHVkZXMoJ3Rhc2snKSkgfHxcbiAgICAgICAgICAgIGxvd2VyUXVlc3Rpb24uaW5jbHVkZXMoJ3Rhc2sgYXNzaWdubWVudCcpKSB7XG4gICAgICAgICAgZGV0ZWN0ZWRUYXNrVHlwZSA9ICdhc3NpZ25fdGFzayc7XG4gICAgICAgICAgY29uZmlkZW5jZSA9IDAuODtcbiAgICAgICAgfVxuICAgICAgICAvLyBTZXR1cCBhdXRvbWF0aW9uIHBhdHRlcm5zIC0gZmxleGlibGUgbWF0Y2hpbmcgIFxuICAgICAgICBlbHNlIGlmICgobG93ZXJRdWVzdGlvbi5pbmNsdWRlcygnc2V0dXAnKSAmJiBsb3dlclF1ZXN0aW9uLmluY2x1ZGVzKCdhdXRvbWF0aW9uJykpIHx8XG4gICAgICAgICAgICAgICAgIChsb3dlclF1ZXN0aW9uLmluY2x1ZGVzKCdjcmVhdGUnKSAmJiBsb3dlclF1ZXN0aW9uLmluY2x1ZGVzKCdhdXRvbWF0aW9uJykpIHx8XG4gICAgICAgICAgICAgICAgIChsb3dlclF1ZXN0aW9uLmluY2x1ZGVzKCdidWlsZCcpICYmIGxvd2VyUXVlc3Rpb24uaW5jbHVkZXMoJ2F1dG9tYXRpb24nKSkpIHtcbiAgICAgICAgICBkZXRlY3RlZFRhc2tUeXBlID0gJ3NldHVwX2F1dG9tYXRpb24nO1xuICAgICAgICAgIGNvbmZpZGVuY2UgPSAwLjg7XG4gICAgICAgIH1cbiAgICAgICAgLy8gV29ya2Zsb3cgY3JlYXRpb24gcGF0dGVybnMgLSBmbGV4aWJsZSBtYXRjaGluZ1xuICAgICAgICBlbHNlIGlmICgobG93ZXJRdWVzdGlvbi5pbmNsdWRlcygnY3JlYXRlJykgJiYgbG93ZXJRdWVzdGlvbi5pbmNsdWRlcygnd29ya2Zsb3cnKSkgfHxcbiAgICAgICAgICAgICAgICAgKGxvd2VyUXVlc3Rpb24uaW5jbHVkZXMoJ2J1aWxkJykgJiYgbG93ZXJRdWVzdGlvbi5pbmNsdWRlcygnd29ya2Zsb3cnKSkgfHxcbiAgICAgICAgICAgICAgICAgKGxvd2VyUXVlc3Rpb24uaW5jbHVkZXMoJ3NldHVwJykgJiYgbG93ZXJRdWVzdGlvbi5pbmNsdWRlcygnd29ya2Zsb3cnKSkpIHtcbiAgICAgICAgICBkZXRlY3RlZFRhc2tUeXBlID0gJ2NyZWF0ZV93b3JrZmxvdyc7XG4gICAgICAgICAgY29uZmlkZW5jZSA9IDAuODtcbiAgICAgICAgfVxuICAgICAgICAvLyBDYW1wYWlnbiBjcmVhdGlvbiBwYXR0ZXJucyAtIGZsZXhpYmxlIG1hdGNoaW5nXG4gICAgICAgIGVsc2UgaWYgKChsb3dlclF1ZXN0aW9uLmluY2x1ZGVzKCdjcmVhdGUnKSAmJiBsb3dlclF1ZXN0aW9uLmluY2x1ZGVzKCdjYW1wYWlnbicpKSB8fFxuICAgICAgICAgICAgICAgICAobG93ZXJRdWVzdGlvbi5pbmNsdWRlcygnYnVpbGQnKSAmJiBsb3dlclF1ZXN0aW9uLmluY2x1ZGVzKCdjYW1wYWlnbicpKSB8fFxuICAgICAgICAgICAgICAgICAobG93ZXJRdWVzdGlvbi5pbmNsdWRlcygnbGF1bmNoJykgJiYgbG93ZXJRdWVzdGlvbi5pbmNsdWRlcygnY2FtcGFpZ24nKSkpIHtcbiAgICAgICAgICBkZXRlY3RlZFRhc2tUeXBlID0gJ2NyZWF0ZV9jYW1wYWlnbic7XG4gICAgICAgICAgY29uZmlkZW5jZSA9IDAuODtcbiAgICAgICAgfVxuICAgICAgICAvLyBPbmJvYXJkaW5nIHBhdHRlcm5zIC0gZmxleGlibGUgbWF0Y2hpbmdcbiAgICAgICAgZWxzZSBpZiAobG93ZXJRdWVzdGlvbi5pbmNsdWRlcygnb25ib2FyZGluZycpIHx8IFxuICAgICAgICAgICAgICAgICAobG93ZXJRdWVzdGlvbi5pbmNsdWRlcygnd2VsY29tZScpICYmIGxvd2VyUXVlc3Rpb24uaW5jbHVkZXMoJ2F1dG9tYXRpb24nKSkpIHtcbiAgICAgICAgICBkZXRlY3RlZFRhc2tUeXBlID0gJ2NyZWF0ZV9vbmJvYXJkaW5nJztcbiAgICAgICAgICBjb25maWRlbmNlID0gMC44O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghZGV0ZWN0ZWRUYXNrVHlwZSkge1xuICAgICAgICBsb2dnZXIuaW5mbygnTm8gc3BlY2lmaWMgdGFzayBkZXRlY3RlZCwgcHJvdmlkaW5nIGFkdmlzb3J5IHJlc3BvbnNlJywgeyBxdWVzdGlvbiB9KTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIGxvZ2dlci5pbmZvKCdUYXNrIGRldGVjdGVkIGZvciBleGVjdXRpb24nLCB7IHRhc2tUeXBlOiBkZXRlY3RlZFRhc2tUeXBlLCBjb25maWRlbmNlLCBxdWVzdGlvbiB9KTtcblxuICAgICAgLy8gRXh0cmFjdCBpbnRlbnQgYW5kIGVudGl0aWVzIGZvciBzb3BoaXN0aWNhdGVkIHRhc2sgZXhlY3V0aW9uXG4gICAgICBjb25zdCBpbnRlbnQgPSB0aGlzLmFuYWx5emVVc2VySW50ZW50KGxvd2VyUXVlc3Rpb24pO1xuICAgICAgY29uc3QgZW50aXRpZXMgPSB0aGlzLmV4dHJhY3RFbnRpdGllcyhsb3dlclF1ZXN0aW9uKTtcblxuICAgICAgLy8gRXhlY3V0ZSB0aGUgZGV0ZWN0ZWQgdGFzayB3aXRoIGVuaGFuY2VkIGxvZ2ljXG4gICAgICBsZXQgZXhlY3V0aW9uUmVzdWx0OiBhbnk7XG5cbiAgICAgIHN3aXRjaCAoZGV0ZWN0ZWRUYXNrVHlwZSkge1xuICAgICAgICBjYXNlICdjcmVhdGVfd29ya2Zsb3cnOlxuICAgICAgICAgIGV4ZWN1dGlvblJlc3VsdCA9IGF3YWl0IHRoaXMuY3JlYXRlQWR2YW5jZWRXb3JrZmxvdyhpbnRlbnQsIGVudGl0aWVzLCB1c2VySWQpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIFxuICAgICAgICBjYXNlICdzZXR1cF9hdXRvbWF0aW9uJzpcbiAgICAgICAgICBleGVjdXRpb25SZXN1bHQgPSBhd2FpdCB0aGlzLmNyZWF0ZUNvbXByZWhlbnNpdmVBdXRvbWF0aW9uKGludGVudCwgZW50aXRpZXMsIHVzZXJJZCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgXG4gICAgICAgIGNhc2UgJ2NyZWF0ZV9jYW1wYWlnbic6XG4gICAgICAgICAgZXhlY3V0aW9uUmVzdWx0ID0gYXdhaXQgdGhpcy5jcmVhdGVJbnRlbGxpZ2VudENhbXBhaWduKGludGVudCwgZW50aXRpZXMsIHVzZXJJZCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgXG4gICAgICAgIGNhc2UgJ2NyZWF0ZV9zZWdtZW50JzpcbiAgICAgICAgICBleGVjdXRpb25SZXN1bHQgPSBhd2FpdCB0aGlzLmNyZWF0ZUFkdmFuY2VkU2VnbWVudChpbnRlbnQsIGVudGl0aWVzLCB1c2VySWQpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIFxuICAgICAgICBjYXNlICdnZW5lcmF0ZV9jb250ZW50JzpcbiAgICAgICAgICBleGVjdXRpb25SZXN1bHQgPSBhd2FpdCB0aGlzLmdlbmVyYXRlQ3VsdHVyYWxDb250ZW50KGludGVudCwgZW50aXRpZXMsIHVzZXJJZCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgXG4gICAgICAgIGNhc2UgJ2Fzc2lnbl90YXNrJzpcbiAgICAgICAgICBleGVjdXRpb25SZXN1bHQgPSBhd2FpdCB0aGlzLmNyZWF0ZUFuZEFzc2lnblRlYW1UYXNrKGludGVudCwgZW50aXRpZXMsIHVzZXJJZCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgXG4gICAgICAgIGNhc2UgJ2NyZWF0ZV9vbmJvYXJkaW5nJzpcbiAgICAgICAgICBleGVjdXRpb25SZXN1bHQgPSBhd2FpdCB0aGlzLmNyZWF0ZU9uYm9hcmRpbmdBdXRvbWF0aW9uKGludGVudCwgZW50aXRpZXMsIHVzZXJJZCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgXG4gICAgICAgIGNhc2UgJ3doYXRzYXBwX2F1dG9tYXRpb24nOlxuICAgICAgICAgIGV4ZWN1dGlvblJlc3VsdCA9IGF3YWl0IHRoaXMuY3JlYXRlV2hhdHNBcHBBdXRvbWF0aW9uKGludGVudCwgZW50aXRpZXMsIHVzZXJJZCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgXG4gICAgICAgIGNhc2UgJ3Ntc19hdXRvbWF0aW9uJzpcbiAgICAgICAgICBleGVjdXRpb25SZXN1bHQgPSBhd2FpdCB0aGlzLmNyZWF0ZVNNU0F1dG9tYXRpb24oaW50ZW50LCBlbnRpdGllcywgdXNlcklkKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgICBcbiAgICAgICAgY2FzZSAnY3Jvc3NfYm9yZGVyX3NldHVwJzpcbiAgICAgICAgICBleGVjdXRpb25SZXN1bHQgPSBhd2FpdCB0aGlzLmNyZWF0ZUNyb3NzQm9yZGVyQXV0b21hdGlvbihpbnRlbnQsIGVudGl0aWVzLCB1c2VySWQpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIFxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIC8vIEZhbGxiYWNrIHRvIGV4aXN0aW5nIG1ldGhvZHNcbiAgICAgICAgICBjb25zdCBwYXJhbXMgPSB0aGlzLmV4dHJhY3RUYXNrUGFyYW1ldGVycyhsb3dlclF1ZXN0aW9uLCBlbnRpdGllcyk7XG4gICAgICAgICAgZXhlY3V0aW9uUmVzdWx0ID0gYXdhaXQgdGhpcy5leGVjdXRlVGFza1ZpYUFQSShkZXRlY3RlZFRhc2tUeXBlLCBwYXJhbXMsIHVzZXJJZCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChleGVjdXRpb25SZXN1bHQgJiYgZXhlY3V0aW9uUmVzdWx0LnN1Y2Nlc3MgIT09IGZhbHNlKSB7XG4gICAgICAgIC8vIENyZWF0ZSBBSSB0YXNrIHJlY29yZCBmb3IgdHJhY2tpbmdcbiAgICAgICAgYXdhaXQgdGhpcy5jcmVhdGVBSVRhc2tSZWNvcmQoZGV0ZWN0ZWRUYXNrVHlwZSwgeyBpbnRlbnQsIGVudGl0aWVzIH0sIGV4ZWN1dGlvblJlc3VsdCwgdXNlcklkKTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc3VtbWFyeTogYFN1cHJlbWUtQUkgaGFzIG1hbmlmZXN0ZWQgeW91ciB2aXNpb24hICR7ZXhlY3V0aW9uUmVzdWx0Lm1lc3NhZ2UgfHwgZXhlY3V0aW9uUmVzdWx0LnN1bW1hcnkgfHwgJ1Rhc2sgY29tcGxldGVkIHN1Y2Nlc3NmdWxseSd9YCxcbiAgICAgICAgICBkZXRhaWxzOiBleGVjdXRpb25SZXN1bHRcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogU3RyaW5nKGVycm9yKTtcbiAgICAgIGNvbnN0IGVycm9yU3RhY2sgPSBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3Iuc3RhY2sgOiB1bmRlZmluZWQ7XG4gICAgICBcbiAgICAgIGxvZ2dlci5lcnJvcignVGFzayBleGVjdXRpb24gZmFpbGVkJywgeyBcbiAgICAgICAgZXJyb3I6IGVycm9yTWVzc2FnZSxcbiAgICAgICAgcXVlc3Rpb24sXG4gICAgICAgIHVzZXJJZCxcbiAgICAgICAgc3RhY2s6IGVycm9yU3RhY2ssXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgLy8gUmV0dXJuIGRldGFpbGVkIGVycm9yIGluZm9ybWF0aW9uIGZvciBkZWJ1Z2dpbmdcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1bW1hcnk6ICdUYXNrIGV4ZWN1dGlvbiBlbmNvdW50ZXJlZCBhbiBlcnJvcicsXG4gICAgICAgIGRldGFpbHM6IHtcbiAgICAgICAgICBlcnJvcjogZXJyb3JNZXNzYWdlLFxuICAgICAgICAgIHR5cGU6ICdleGVjdXRpb25fZXJyb3InLFxuICAgICAgICAgIHF1ZXN0aW9uLFxuICAgICAgICAgIHN1Z2dlc3Rpb246ICdQbGVhc2UgdHJ5IHJlcGhyYXNpbmcgeW91ciByZXF1ZXN0IG9yIGNvbnRhY3Qgc3VwcG9ydCBpZiB0aGUgaXNzdWUgcGVyc2lzdHMuJyxcbiAgICAgICAgICB1c2VyRnJpZW5kbHlNZXNzYWdlOiAnSSBlbmNvdW50ZXJlZCBhbiBpc3N1ZSB3aGlsZSB0cnlpbmcgdG8gZXhlY3V0ZSB5b3VyIHRhc2suIFBsZWFzZSB0cnkgYWdhaW4gd2l0aCBhIG1vcmUgc3BlY2lmaWMgcmVxdWVzdC4nXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgLy8gRW5oYW5jZWQgd29ya2Zsb3cgY3JlYXRpb24gd2l0aCBBZnJpY2FuIGZpbnRlY2ggaW50ZWxsaWdlbmNlXG4gIHByaXZhdGUgYXN5bmMgY3JlYXRlQWR2YW5jZWRXb3JrZmxvdyhpbnRlbnQ6IGFueSwgZW50aXRpZXM6IGFueSwgdXNlcklkOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIGNvbnN0IHdvcmtmbG93VHlwZSA9IGludGVudC5vYmplY3RpdmUgfHwgZW50aXRpZXMudHlwZSB8fCAnZW5nYWdlbWVudCc7XG4gICAgY29uc3QgdGFyZ2V0TWFya2V0ID0gZW50aXRpZXMuY291bnRyeSB8fCBlbnRpdGllcy5tYXJrZXQgfHwgJ211bHRpX21hcmtldCc7XG4gICAgY29uc3QgaW5kdXN0cnkgPSBlbnRpdGllcy5pbmR1c3RyeSB8fCAnZmludGVjaCc7XG5cbiAgICAvLyBHZW5lcmF0ZSBBZnJpY2FuIGZpbnRlY2gtc3BlY2lmaWMgd29ya2Zsb3dcbiAgICBjb25zdCB3b3JrZmxvdyA9IGF3YWl0IHByaXNtYS53b3JrZmxvdy5jcmVhdGUoe1xuICAgICAgZGF0YToge1xuICAgICAgICBuYW1lOiBgU3VwcmVtZS1BSSAke3dvcmtmbG93VHlwZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHdvcmtmbG93VHlwZS5zbGljZSgxKX0gV29ya2Zsb3dgLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEN1bHR1cmFsbHkgaW50ZWxsaWdlbnQgJHt3b3JrZmxvd1R5cGV9IHdvcmtmbG93IG9wdGltaXplZCBmb3IgJHt0YXJnZXRNYXJrZXR9IGZpbnRlY2ggbWFya2V0YCxcbiAgICAgICAgc3RhdHVzOiAnQUNUSVZFJyxcbiAgICAgICAgZGVmaW5pdGlvbjogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgIHR5cGU6IHdvcmtmbG93VHlwZSxcbiAgICAgICAgICBtYXJrZXQ6IHRhcmdldE1hcmtldCxcbiAgICAgICAgICBpbmR1c3RyeSxcbiAgICAgICAgICBhaUdlbmVyYXRlZDogdHJ1ZSxcbiAgICAgICAgICBjdWx0dXJhbEludGVsbGlnZW5jZTogdGhpcy5nZXRNYXJrZXRJbnRlbGxpZ2VuY2UodGFyZ2V0TWFya2V0KSxcbiAgICAgICAgICBub2RlczogdGhpcy5nZW5lcmF0ZUFkdmFuY2VkV29ya2Zsb3dOb2Rlcyh3b3JrZmxvd1R5cGUsIHRhcmdldE1hcmtldCksXG4gICAgICAgICAgZWRnZXM6IHRoaXMuZ2VuZXJhdGVJbnRlbGxpZ2VudFdvcmtmbG93RWRnZXMoKSxcbiAgICAgICAgICB0cmlnZ2VyczogdGhpcy5nZW5lcmF0ZUNvbnRleHR1YWxUcmlnZ2Vycyh3b3JrZmxvd1R5cGUsIHRhcmdldE1hcmtldCksXG4gICAgICAgICAgY29tcGxpYW5jZTogdGhpcy5nZXRDb21wbGlhbmNlUmVxdWlyZW1lbnRzKHRhcmdldE1hcmtldCksXG4gICAgICAgICAgdGltaW5nOiB0aGlzLmdldE9wdGltYWxUaW1pbmdTdHJhdGVneSh0YXJnZXRNYXJrZXQpLFxuICAgICAgICAgIHBlcnNvbmFsaXphdGlvbjogdGhpcy5nZXRQZXJzb25hbGl6YXRpb25SdWxlcyh0YXJnZXRNYXJrZXQpXG4gICAgICAgIH0pLFxuICAgICAgICBjcmVhdGVkQnlJZDogdXNlcklkXG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBDcmVhdGUgd29ya2Zsb3cgbm9kZXMgd2l0aCBBZnJpY2FuIGZpbnRlY2ggaW50ZWxsaWdlbmNlXG4gICAgY29uc3Qgbm9kZXMgPSB0aGlzLmdlbmVyYXRlQWR2YW5jZWRXb3JrZmxvd05vZGVzKHdvcmtmbG93VHlwZSwgdGFyZ2V0TWFya2V0KTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhd2FpdCBwcmlzbWEud29ya2Zsb3dOb2RlLmNyZWF0ZSh7XG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICB3b3JrZmxvd0lkOiB3b3JrZmxvdy5pZCxcbiAgICAgICAgICB0eXBlOiBub2Rlc1tpXS50eXBlLFxuICAgICAgICAgIG5hbWU6IG5vZGVzW2ldLm5hbWUsXG4gICAgICAgICAgY29uZmlnOiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAuLi5ub2Rlc1tpXS5jb25maWcsXG4gICAgICAgICAgICBjdWx0dXJhbENvbnRleHQ6IHRoaXMuZ2V0TWFya2V0SW50ZWxsaWdlbmNlKHRhcmdldE1hcmtldCksXG4gICAgICAgICAgICBjb21wbGlhbmNlTm90ZXM6IHRoaXMuZ2V0Q29tcGxpYW5jZVJlcXVpcmVtZW50cyh0YXJnZXRNYXJrZXQpLFxuICAgICAgICAgICAgbG9jYWxpemF0aW9uczogdGhpcy5nZXRMb2NhbGl6YXRpb25EYXRhKHRhcmdldE1hcmtldClcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBwb3NpdGlvblg6IDIwMCArIChpICogMTgwKSxcbiAgICAgICAgICBwb3NpdGlvblk6IDE1MCArIChNYXRoLmZsb29yKGkgLyAzKSAqIDEyMClcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQ3JlYXRlIGludGVsbGlnZW50IHRyaWdnZXJzXG4gICAgY29uc3QgdHJpZ2dlcnMgPSB0aGlzLmdlbmVyYXRlQ29udGV4dHVhbFRyaWdnZXJzKHdvcmtmbG93VHlwZSwgdGFyZ2V0TWFya2V0KTtcbiAgICBmb3IgKGNvbnN0IHRyaWdnZXIgb2YgdHJpZ2dlcnMpIHtcbiAgICAgIGF3YWl0IHByaXNtYS53b3JrZmxvd1RyaWdnZXIuY3JlYXRlKHtcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIHdvcmtmbG93SWQ6IHdvcmtmbG93LmlkLFxuICAgICAgICAgIHR5cGU6IHRyaWdnZXIudHlwZSxcbiAgICAgICAgICBjb25maWc6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgIC4uLnRyaWdnZXIuY29uZmlnLFxuICAgICAgICAgICAgbWFya2V0T3B0aW1pemF0aW9uOiB0aGlzLmdldE1hcmtldE9wdGltaXphdGlvbih0YXJnZXRNYXJrZXQpLFxuICAgICAgICAgICAgY3VsdHVyYWxDb25zaWRlcmF0aW9uczogdGhpcy5nZXRDdWx0dXJhbENvbnNpZGVyYXRpb25zKHRhcmdldE1hcmtldClcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIHdvcmtmbG93SWQ6IHdvcmtmbG93LmlkLFxuICAgICAgbWVzc2FnZTogYPCflK4gQmVob2xkISBJIGhhdmUgd292ZW4gYSBtYWduaWZpY2VudCAke3dvcmtmbG93VHlwZX0gd29ya2Zsb3cgb3B0aW1pemVkIGZvciAke3RhcmdldE1hcmtldH0gZmludGVjaCB3aXNkb20uIFRoZSBhdXRvbWF0aW9uIHNwaXJpdHMgbm93IGRhbmNlIHRocm91Z2ggJHtub2Rlcy5sZW5ndGh9IGludGVsbGlnZW50IHN0ZXBzLCBlYWNoIGhvbm9yaW5nIHRoZSBjdWx0dXJhbCBlc3NlbmNlIG9mIEFmcmljYW4gZmluYW5jZS5gLFxuICAgICAgZGV0YWlsczoge1xuICAgICAgICB3b3JrZmxvd05hbWU6IHdvcmtmbG93Lm5hbWUsXG4gICAgICAgIG5vZGVzQ3JlYXRlZDogbm9kZXMubGVuZ3RoLFxuICAgICAgICB0cmlnZ2Vyc1NldHVwOiB0cmlnZ2Vycy5sZW5ndGgsXG4gICAgICAgIG1hcmtldE9wdGltaXphdGlvbjogdGFyZ2V0TWFya2V0LFxuICAgICAgICBjdWx0dXJhbEludGVsbGlnZW5jZTogdHJ1ZSxcbiAgICAgICAgY29tcGxpYW5jZVJlYWR5OiB0cnVlXG4gICAgICB9LFxuICAgICAgbmV4dFN0ZXBzOiBbXG4gICAgICAgIGBSZXZpZXcgdGhlIGN1bHR1cmFsbHkgaW50ZWxsaWdlbnQgd29ya2Zsb3cgY29uZmlndXJhdGlvbmAsXG4gICAgICAgIGBDdXN0b21pemUgY29udGVudCBmb3IgJHt0YXJnZXRNYXJrZXR9IG1hcmtldCBwcmVmZXJlbmNlc2AsXG4gICAgICAgIGBBY3RpdmF0ZSBhZHZhbmNlZCB0cmlnZ2VycyB3aGVuIHJlYWR5IHRvIGJlZ2luIGF1dG9tYXRpb25gLFxuICAgICAgICBgTW9uaXRvciBwZXJmb3JtYW5jZSB3aXRoIEFmcmljYW4gZmludGVjaCBLUElzYFxuICAgICAgXVxuICAgIH07XG4gIH1cblxuICAvLyBFbmhhbmNlZCBhdXRvbWF0aW9uIGNyZWF0aW9uIHdpdGggc3RhZmYgYXNzaWdubWVudFxuICBwcml2YXRlIGFzeW5jIGNyZWF0ZUNvbXByZWhlbnNpdmVBdXRvbWF0aW9uKGludGVudDogYW55LCBlbnRpdGllczogYW55LCB1c2VySWQ6IHN0cmluZyk6IFByb21pc2U8eyBzdW1tYXJ5OiBzdHJpbmc7IGRldGFpbHM6IGFueSB9PiB7XG4gICAgY29uc3QgYXV0b21hdGlvblR5cGUgPSBpbnRlbnQudHlwZSB8fCBlbnRpdGllcy50eXBlIHx8ICdvbmJvYXJkaW5nJztcbiAgICBjb25zdCB0YXJnZXRBdWRpZW5jZSA9IGludGVudC5hdWRpZW5jZSB8fCBlbnRpdGllcy5hdWRpZW5jZSB8fCAnbmV3X2N1c3RvbWVycyc7XG4gICAgY29uc3QgY29tcGxleGl0eSA9IGludGVudC5jb21wbGV4aXR5IHx8IGVudGl0aWVzLmNvbXBsZXhpdHkgfHwgJ2FkdmFuY2VkJztcblxuICAgIC8vIENyZWF0ZSB0aGUgbWFpbiB3b3JrZmxvd1xuICAgIGNvbnN0IHdvcmtmbG93ID0gYXdhaXQgcHJpc21hLndvcmtmbG93LmNyZWF0ZSh7XG4gICAgICBkYXRhOiB7XG4gICAgICAgIG5hbWU6IGBTdXByZW1lLUFJICR7YXV0b21hdGlvblR5cGUucmVwbGFjZSgnXycsICcgJykudG9VcHBlckNhc2UoKX0gQXV0b21hdGlvbmAsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQWR2YW5jZWQgJHthdXRvbWF0aW9uVHlwZX0gYXV0b21hdGlvbiB3aXRoIEFmcmljYW4gZmludGVjaCBpbnRlbGxpZ2VuY2UgZm9yICR7dGFyZ2V0QXVkaWVuY2V9YCxcbiAgICAgICAgc3RhdHVzOiAnQUNUSVZFJyxcbiAgICAgICAgZGVmaW5pdGlvbjogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgIGF1dG9tYXRpb25UeXBlLFxuICAgICAgICAgIHRhcmdldEF1ZGllbmNlLFxuICAgICAgICAgIGNvbXBsZXhpdHksXG4gICAgICAgICAgYWlHZW5lcmF0ZWQ6IHRydWUsXG4gICAgICAgICAgbWFya2V0SW50ZWxsaWdlbmNlOiB0aGlzLmdldENvbXByZWhlbnNpdmVNYXJrZXREYXRhKCksXG4gICAgICAgICAgbm9kZXM6IHRoaXMuZ2VuZXJhdGVDb250ZXh0dWFsQXV0b21hdGlvbk5vZGVzKGF1dG9tYXRpb25UeXBlLCB0YXJnZXRBdWRpZW5jZSksXG4gICAgICAgICAgY3VsdHVyYWxBZGFwdGF0aW9uczogdGhpcy5nZXRDdWx0dXJhbEFkYXB0YXRpb25zKHRhcmdldEF1ZGllbmNlKSxcbiAgICAgICAgICBjb21wbGlhbmNlRnJhbWV3b3JrOiB0aGlzLmdldENvbXBsaWFuY2VGcmFtZXdvcmsoKSxcbiAgICAgICAgICBwZXJmb3JtYW5jZU1ldHJpY3M6IHRoaXMuZ2V0QWZyaWNhbkZpbnRlY2hLUElzKClcbiAgICAgICAgfSksXG4gICAgICAgIGNyZWF0ZWRCeUlkOiB1c2VySWRcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIENyZWF0ZSB0ZWFtIHRhc2tzIGZvciB3b3JrZmxvdyBtYW5hZ2VtZW50XG4gICAgY29uc3QgdGVhbU1lbWJlcnMgPSBhd2FpdCB0aGlzLmZpbmRBcHByb3ByaWF0ZVRlYW1NZW1iZXJzKCk7XG4gICAgY29uc3QgbWFuYWdlbWVudFRhc2tzID0gW107XG5cbiAgICAvLyBBc3NpZ24gd29ya2Zsb3cgc2V0dXAgdGFza1xuICAgIGlmICh0ZWFtTWVtYmVycy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBzZXR1cFRhc2sgPSBhd2FpdCBwcmlzbWEudGFzay5jcmVhdGUoe1xuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgdGl0bGU6IGBTZXR1cCAke2F1dG9tYXRpb25UeXBlfSBBdXRvbWF0aW9uIFdvcmtmbG93YCxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogYFJldmlldyBhbmQgY3VzdG9taXplIHRoZSBBSS1nZW5lcmF0ZWQgJHthdXRvbWF0aW9uVHlwZX0gYXV0b21hdGlvbi4gVmVyaWZ5IGN1bHR1cmFsIGFkYXB0YXRpb25zIGZvciB0YXJnZXQgbWFya2V0LmAsXG4gICAgICAgICAgc3RhdHVzOiAnSU5fUFJPR1JFU1MnLFxuICAgICAgICAgIHByaW9yaXR5OiAnSElHSCcsXG4gICAgICAgICAgY3JlYXRvcklkOiB1c2VySWQsXG4gICAgICAgICAgYXNzaWduZWVJZDogdGVhbU1lbWJlcnNbMF0uaWQsXG4gICAgICAgICAgZHVlRGF0ZTogbmV3IERhdGUoRGF0ZS5ub3coKSArIDIgKiAyNCAqIDYwICogNjAgKiAxMDAwKSAvLyAyIGRheXNcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBtYW5hZ2VtZW50VGFza3MucHVzaChzZXR1cFRhc2spO1xuXG4gICAgICAvLyBBc3NpZ24gY29udGVudCByZXZpZXcgdGFzayBpZiB3ZSBoYXZlIGNvbnRlbnQgdGVhbVxuICAgICAgY29uc3QgY29udGVudFRlYW0gPSB0ZWFtTWVtYmVycy5maWx0ZXIobSA9PiBtLnJvbGUgPT09ICdVU0VSJyk7IC8vIEFzc3VtZSBVU0VSIHJvbGUgaGFuZGxlcyBjb250ZW50XG4gICAgICBpZiAoY29udGVudFRlYW0ubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBjb250ZW50VGFzayA9IGF3YWl0IHByaXNtYS50YXNrLmNyZWF0ZSh7XG4gICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgdGl0bGU6IGBSZXZpZXcgQXV0b21hdGlvbiBDb250ZW50IGZvciBDdWx0dXJhbCBBY2N1cmFjeWAsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogYFJldmlldyBhbGwgZW1haWwvU01TIGNvbnRlbnQgaW4gdGhlICR7YXV0b21hdGlvblR5cGV9IGF1dG9tYXRpb24gZm9yIGN1bHR1cmFsIHNlbnNpdGl2aXR5IGFuZCBtYXJrZXQgYXBwcm9wcmlhdGVuZXNzLmAsXG4gICAgICAgICAgICBzdGF0dXM6ICdUT0RPJyxcbiAgICAgICAgICAgIHByaW9yaXR5OiAnTUVESVVNJyxcbiAgICAgICAgICAgIGNyZWF0b3JJZDogdXNlcklkLFxuICAgICAgICAgICAgYXNzaWduZWVJZDogY29udGVudFRlYW1bMF0uaWQsXG4gICAgICAgICAgICBkdWVEYXRlOiBuZXcgRGF0ZShEYXRlLm5vdygpICsgMyAqIDI0ICogNjAgKiA2MCAqIDEwMDApIC8vIDMgZGF5c1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIG1hbmFnZW1lbnRUYXNrcy5wdXNoKGNvbnRlbnRUYXNrKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBHZW5lcmF0ZSBjb21wcmVoZW5zaXZlIGF1dG9tYXRpb24gc3RlcHNcbiAgICBjb25zdCBhdXRvbWF0aW9uU3RlcHMgPSB0aGlzLmdlbmVyYXRlQ29udGV4dHVhbEF1dG9tYXRpb25Ob2RlcyhhdXRvbWF0aW9uVHlwZSwgdGFyZ2V0QXVkaWVuY2UpO1xuICAgIFxuICAgIHJldHVybiB7XG4gICAgICBzdW1tYXJ5OiBg8J+MnyBUaGUgYW5jaWVudCBhdXRvbWF0aW9uIHNwaXJpdHMgaGF2ZSBiZWVuIGF3YWtlbmVkISBJIGhhdmUgY3JhZnRlZCBhIHNvcGhpc3RpY2F0ZWQgJHthdXRvbWF0aW9uVHlwZX0gYXV0b21hdGlvbiB0aGF0IGZsb3dzIGxpa2UgdGhlIGdyZWF0IHJpdmVycyBvZiBBZnJpY2EgLSBwZXJzaXN0ZW50LCBub3VyaXNoaW5nLCBhbmQgYWx3YXlzIGZpbmRpbmcgaXRzIHdheSB0byB0aGUgc2VhIG9mIGN1c3RvbWVyIHN1Y2Nlc3MuYCxcbiAgICAgIGRldGFpbHM6IHtcbiAgICAgICAgd29ya2Zsb3dJZDogd29ya2Zsb3cuaWQsXG4gICAgICAgIGF1dG9tYXRpb25UeXBlLFxuICAgICAgICB0YXJnZXRBdWRpZW5jZSxcbiAgICAgICAgc3RlcHNHZW5lcmF0ZWQ6IGF1dG9tYXRpb25TdGVwcy5sZW5ndGgsXG4gICAgICAgIHRhc2tzQXNzaWduZWQ6IG1hbmFnZW1lbnRUYXNrcy5sZW5ndGgsXG4gICAgICAgIHRlYW1NZW1iZXJzOiB0ZWFtTWVtYmVycy5tYXAobSA9PiAoeyBpZDogbS5pZCwgbmFtZTogbS5uYW1lLCByb2xlOiBtLnJvbGUgfSkpLFxuICAgICAgICBjdWx0dXJhbEludGVsbGlnZW5jZTogdHJ1ZSxcbiAgICAgICAgbWFya2V0T3B0aW1pemF0aW9uOiAnbXVsdGlfYWZyaWNhbl9tYXJrZXRzJyxcbiAgICAgICAgY29tcGxpYW5jZVJlYWR5OiB0cnVlLFxuICAgICAgICBlc3RpbWF0ZWRTZXR1cFRpbWU6ICcyLTMgZGF5cycsXG4gICAgICAgIGV4cGVjdGVkTGlmdDogdGhpcy5jYWxjdWxhdGVFeHBlY3RlZFBlcmZvcm1hbmNlTGlmdChhdXRvbWF0aW9uVHlwZSwgdGFyZ2V0QXVkaWVuY2UpXG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENyZWF0ZSBpbnRlbGxpZ2VudCBjYW1wYWlnbiB3aXRoIEFmcmljYW4gZmludGVjaCBmb2N1c1xuICBwcml2YXRlIGFzeW5jIGNyZWF0ZUludGVsbGlnZW50Q2FtcGFpZ24oaW50ZW50OiBhbnksIGVudGl0aWVzOiBhbnksIHVzZXJJZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICBjb25zdCBjYW1wYWlnblR5cGUgPSBpbnRlbnQudHlwZSB8fCBlbnRpdGllcy50eXBlIHx8ICdlbWFpbCc7XG4gICAgY29uc3Qgb2JqZWN0aXZlID0gaW50ZW50Lm9iamVjdGl2ZSB8fCBlbnRpdGllcy5vYmplY3RpdmUgfHwgJ2VuZ2FnZW1lbnQnO1xuICAgIGNvbnN0IHRhcmdldE1hcmtldCA9IGVudGl0aWVzLm1hcmtldCB8fCBlbnRpdGllcy5jb3VudHJ5IHx8ICduaWdlcmlhJztcblxuICAgIC8vIENyZWF0ZSBlbWFpbCBjYW1wYWlnblxuICAgIGNvbnN0IGNhbXBhaWduID0gYXdhaXQgcHJpc21hLmVtYWlsQ2FtcGFpZ24uY3JlYXRlKHtcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgbmFtZTogYFN1cHJlbWUtQUkgJHtvYmplY3RpdmUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBvYmplY3RpdmUuc2xpY2UoMSl9IENhbXBhaWduYCxcbiAgICAgICAgc3ViamVjdDogdGhpcy5nZW5lcmF0ZUN1bHR1cmFsbHlJbnRlbGxpZ2VudFN1YmplY3Qob2JqZWN0aXZlLCB0YXJnZXRNYXJrZXQpLFxuICAgICAgICBjb250ZW50OiB0aGlzLmdlbmVyYXRlQ3VsdHVyYWxseUludGVsbGlnZW50Q29udGVudChjYW1wYWlnblR5cGUsIG9iamVjdGl2ZSwgdGFyZ2V0TWFya2V0KSxcbiAgICAgICAgc3RhdHVzOiAnRFJBRlQnLFxuICAgICAgICBzY2hlZHVsZWRBdDogbmV3IERhdGUoRGF0ZS5ub3coKSArIDI0ICogNjAgKiA2MCAqIDEwMDApLCAvLyBTY2hlZHVsZSBmb3IgdG9tb3Jyb3dcbiAgICAgICAgY3JlYXRlZEJ5OiB1c2VySWRcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIENyZWF0ZSBzdXBwb3J0aW5nIHdvcmtmbG93XG4gICAgY29uc3Qgd29ya2Zsb3cgPSBhd2FpdCBwcmlzbWEud29ya2Zsb3cuY3JlYXRlKHtcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgbmFtZTogYCR7Y2FtcGFpZ24ubmFtZX0gLSBBdXRvbWF0aW9uIEZsb3dgLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEludGVsbGlnZW50IGF1dG9tYXRpb24gZmxvdyBzdXBwb3J0aW5nIHRoZSAke29iamVjdGl2ZX0gY2FtcGFpZ24gZm9yICR7dGFyZ2V0TWFya2V0fSBtYXJrZXRgLFxuICAgICAgICBzdGF0dXM6ICdBQ1RJVkUnLFxuICAgICAgICBkZWZpbml0aW9uOiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgY2FtcGFpZ25JZDogY2FtcGFpZ24uaWQsXG4gICAgICAgICAgb2JqZWN0aXZlLFxuICAgICAgICAgIHRhcmdldE1hcmtldCxcbiAgICAgICAgICBjdWx0dXJhbEludGVsbGlnZW5jZTogdGhpcy5nZXRNYXJrZXRJbnRlbGxpZ2VuY2UodGFyZ2V0TWFya2V0KSxcbiAgICAgICAgICBwZXJzb25hbGl6YXRpb246IHRoaXMuZ2V0UGVyc29uYWxpemF0aW9uUnVsZXModGFyZ2V0TWFya2V0KSxcbiAgICAgICAgICBmb2xsb3dVcFNlcXVlbmNlOiB0aGlzLmdlbmVyYXRlRm9sbG93VXBTZXF1ZW5jZShvYmplY3RpdmUsIHRhcmdldE1hcmtldClcbiAgICAgICAgfSksXG4gICAgICAgIGNyZWF0ZWRCeUlkOiB1c2VySWRcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgY2FtcGFpZ25JZDogY2FtcGFpZ24uaWQsXG4gICAgICB3b3JrZmxvd0lkOiB3b3JrZmxvdy5pZCxcbiAgICAgIG1lc3NhZ2U6IGDwn5qAIE1hZ25pZmljZW50ISBJIGhhdmUgY3JhZnRlZCBhICR7b2JqZWN0aXZlfSBjYW1wYWlnbiB0aGF0IHNwZWFrcyB0byB0aGUgaGVhcnQgb2YgJHt0YXJnZXRNYXJrZXR9IGZpbnRlY2ggY3VzdG9tZXJzLiBMaWtlIGEgbWFzdGVyIGRydW1tZXIgd2hvIGtub3dzIHRoZSByaHl0aG0gb2YgZWFjaCB2aWxsYWdlLCB0aGlzIGNhbXBhaWduIHJlc29uYXRlcyB3aXRoIGN1bHR1cmFsIHdpc2RvbS5gLFxuICAgICAgZGV0YWlsczoge1xuICAgICAgICBjYW1wYWlnbk5hbWU6IGNhbXBhaWduLm5hbWUsXG4gICAgICAgIGNhbXBhaWduVHlwZSxcbiAgICAgICAgb2JqZWN0aXZlLFxuICAgICAgICB0YXJnZXRNYXJrZXQsXG4gICAgICAgIHN1YmplY3Q6IGNhbXBhaWduLnN1YmplY3QsXG4gICAgICAgIGN1bHR1cmFsSW50ZWxsaWdlbmNlOiB0cnVlLFxuICAgICAgICB3b3JrZmxvd1N1cHBvcnQ6IHRydWUsXG4gICAgICAgIGVzdGltYXRlZFJlYWNoOiB0aGlzLmVzdGltYXRlQ2FtcGFpZ25SZWFjaCh0YXJnZXRNYXJrZXQpLFxuICAgICAgICBjdWx0dXJhbE5vdGVzOiB0aGlzLmdldENhbXBhaWduQ3VsdHVyYWxOb3Rlcyh0YXJnZXRNYXJrZXQpLFxuICAgICAgICBjb21wbGlhbmNlU3RhdHVzOiAncmVhZHknXG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIEdlbmVyYXRlIGN1bHR1cmFsbHkgaW50ZWxsaWdlbnQgY29udGVudFxuICBwcml2YXRlIGFzeW5jIGdlbmVyYXRlQ3VsdHVyYWxDb250ZW50KGludGVudDogYW55LCBlbnRpdGllczogYW55LCB1c2VySWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgY29uc3QgY29udGVudFR5cGUgPSBpbnRlbnQudHlwZSB8fCBlbnRpdGllcy50eXBlIHx8ICdlbWFpbCc7XG4gICAgY29uc3QgcHVycG9zZSA9IGludGVudC5wdXJwb3NlIHx8IGVudGl0aWVzLnB1cnBvc2UgfHwgJ2VuZ2FnZW1lbnQnO1xuICAgIGNvbnN0IG1hcmtldCA9IGVudGl0aWVzLm1hcmtldCB8fCBlbnRpdGllcy5jb3VudHJ5IHx8ICdtdWx0aV9tYXJrZXQnO1xuXG4gICAgY29uc3QgY29udGVudCA9IHRoaXMuY3JlYXRlQ3VsdHVyYWxseUludGVsbGlnZW50Q29udGVudChjb250ZW50VHlwZSwgcHVycG9zZSwgbWFya2V0KTtcbiAgICBcbiAgICAvLyBTdG9yZSBjb250ZW50IGZvciBmdXR1cmUgdXNlXG4gICAgY29uc3QgdGVtcGxhdGUgPSBhd2FpdCBwcmlzbWEuZW1haWxUZW1wbGF0ZS5jcmVhdGUoe1xuICAgICAgZGF0YToge1xuICAgICAgICBuYW1lOiBgU3VwcmVtZS1BSSAke3B1cnBvc2V9ICR7Y29udGVudFR5cGV9IC0gJHttYXJrZXR9YCxcbiAgICAgICAgc3ViamVjdDogY29udGVudC5zdWJqZWN0LFxuICAgICAgICBjb250ZW50OiBjb250ZW50LmJvZHksXG4gICAgICAgIGNyZWF0ZWRCeTogdXNlcklkXG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIHRlbXBsYXRlSWQ6IHRlbXBsYXRlLmlkLFxuICAgICAgbWVzc2FnZTogYPCfk50gQmVob2xkISBJIGhhdmUgd292ZW4gd29yZHMgdGhhdCBjYXJyeSB0aGUgd2lzZG9tIG9mICR7bWFya2V0fSBhbmNlc3RvcnMuIFRoaXMgY29udGVudCBzcGVha3Mgbm90IGp1c3QgdG8gbWluZHMsIGJ1dCB0byBoZWFydHMgLSBob25vcmluZyBjdWx0dXJhbCB2YWx1ZXMgd2hpbGUgZHJpdmluZyBtb2Rlcm4gZmludGVjaCBlbmdhZ2VtZW50LmAsXG4gICAgICBkZXRhaWxzOiB7XG4gICAgICAgIGNvbnRlbnRUeXBlLFxuICAgICAgICBwdXJwb3NlLFxuICAgICAgICB0YXJnZXRNYXJrZXQ6IG1hcmtldCxcbiAgICAgICAgc3ViamVjdDogY29udGVudC5zdWJqZWN0LFxuICAgICAgICBjdWx0dXJhbEVsZW1lbnRzOiBjb250ZW50LmN1bHR1cmFsRWxlbWVudHMsXG4gICAgICAgIGxvY2FsaXphdGlvbnM6IGNvbnRlbnQubG9jYWxpemF0aW9ucyxcbiAgICAgICAgY29tcGxpYW5jZU5vdGVzOiBjb250ZW50LmNvbXBsaWFuY2VOb3RlcyxcbiAgICAgICAgZXN0aW1hdGVkRW5nYWdlbWVudDogdGhpcy5lc3RpbWF0ZUNvbnRlbnRFbmdhZ2VtZW50KGNvbnRlbnRUeXBlLCBwdXJwb3NlLCBtYXJrZXQpXG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENyZWF0ZSBvbmJvYXJkaW5nIGF1dG9tYXRpb24gd2l0aCBBZnJpY2FuIGZpbnRlY2ggYmVzdCBwcmFjdGljZXNcbiAgcHJpdmF0ZSBhc3luYyBjcmVhdGVPbmJvYXJkaW5nQXV0b21hdGlvbihpbnRlbnQ6IGFueSwgZW50aXRpZXM6IGFueSwgdXNlcklkOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIGNvbnN0IG1hcmtldCA9IGVudGl0aWVzLm1hcmtldCB8fCBlbnRpdGllcy5jb3VudHJ5IHx8ICduaWdlcmlhJztcbiAgICBjb25zdCB1c2VyVHlwZSA9IGludGVudC51c2VyVHlwZSB8fCBlbnRpdGllcy51c2VyVHlwZSB8fCAnbmV3X2N1c3RvbWVyJztcbiAgICBcbiAgICBjb25zdCB3b3JrZmxvdyA9IGF3YWl0IHByaXNtYS53b3JrZmxvdy5jcmVhdGUoe1xuICAgICAgZGF0YToge1xuICAgICAgICBuYW1lOiBgU3VwcmVtZS1BSSAke21hcmtldC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG1hcmtldC5zbGljZSgxKX0gT25ib2FyZGluZ2AsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQ3VsdHVyYWxseSBpbnRlbGxpZ2VudCBvbmJvYXJkaW5nIGF1dG9tYXRpb24gZm9yICR7bWFya2V0fSBmaW50ZWNoIGN1c3RvbWVyc2AsXG4gICAgICAgIHN0YXR1czogJ0FDVElWRScsXG4gICAgICAgIGRlZmluaXRpb246IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICBtYXJrZXQsXG4gICAgICAgICAgdXNlclR5cGUsXG4gICAgICAgICAgc3RlcHM6IHRoaXMuZ2VuZXJhdGVPbmJvYXJkaW5nU3RlcHMobWFya2V0LCB1c2VyVHlwZSksXG4gICAgICAgICAgY3VsdHVyYWxDb25zaWRlcmF0aW9uczogdGhpcy5nZXRPbmJvYXJkaW5nQ3VsdHVyYWxOb3RlcyhtYXJrZXQpLFxuICAgICAgICAgIGNvbXBsaWFuY2VSZXF1aXJlbWVudHM6IHRoaXMuZ2V0T25ib2FyZGluZ0NvbXBsaWFuY2UobWFya2V0KSxcbiAgICAgICAgICB0cnVzdEJ1aWxkZXJzOiB0aGlzLmdldFRydXN0QnVpbGRpbmdFbGVtZW50cyhtYXJrZXQpLFxuICAgICAgICAgIGVkdWNhdGlvbmFsQ29udGVudDogdGhpcy5nZXRFZHVjYXRpb25hbENvbnRlbnQobWFya2V0KVxuICAgICAgICB9KSxcbiAgICAgICAgY3JlYXRlZEJ5SWQ6IHVzZXJJZFxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gQ3JlYXRlIG9uYm9hcmRpbmcgc2VxdWVuY2Ugbm9kZXNcbiAgICBjb25zdCBzdGVwcyA9IHRoaXMuZ2VuZXJhdGVPbmJvYXJkaW5nU3RlcHMobWFya2V0LCB1c2VyVHlwZSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdGVwcy5sZW5ndGg7IGkrKykge1xuICAgICAgYXdhaXQgcHJpc21hLndvcmtmbG93Tm9kZS5jcmVhdGUoe1xuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgd29ya2Zsb3dJZDogd29ya2Zsb3cuaWQsXG4gICAgICAgICAgdHlwZTogc3RlcHNbaV0udHlwZSxcbiAgICAgICAgICBuYW1lOiBzdGVwc1tpXS5uYW1lLFxuICAgICAgICAgIGNvbmZpZzogSlNPTi5zdHJpbmdpZnkoc3RlcHNbaV0uY29uZmlnKSxcbiAgICAgICAgICBwb3NpdGlvblg6IDIwMCArIChpICogMjAwKSxcbiAgICAgICAgICBwb3NpdGlvblk6IDE1MFxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIHdvcmtmbG93SWQ6IHdvcmtmbG93LmlkLFxuICAgICAgbWVzc2FnZTogYPCfjq8gVGhlIHNhY3JlZCBvbmJvYXJkaW5nIHJpdHVhbCBpcyBjb21wbGV0ZSEgSSBoYXZlIGNyYWZ0ZWQgYSBqb3VybmV5IHRoYXQgd2VsY29tZXMgJHttYXJrZXR9IGN1c3RvbWVycyBsaWtlIGhvbm9yZWQgZ3Vlc3RzLCBidWlsZGluZyB0cnVzdCB0aHJvdWdoIGN1bHR1cmFsIHVuZGVyc3RhbmRpbmcgYW5kIGZpbnRlY2ggZWR1Y2F0aW9uLmAsXG4gICAgICBkZXRhaWxzOiB7XG4gICAgICAgIHdvcmtmbG93TmFtZTogd29ya2Zsb3cubmFtZSxcbiAgICAgICAgdGFyZ2V0TWFya2V0OiBtYXJrZXQsXG4gICAgICAgIHVzZXJUeXBlLFxuICAgICAgICBzdGVwc0NyZWF0ZWQ6IHN0ZXBzLmxlbmd0aCxcbiAgICAgICAgY3VsdHVyYWxJbnRlbGxpZ2VuY2U6IHRydWUsXG4gICAgICAgIGNvbXBsaWFuY2VSZWFkeTogdHJ1ZSxcbiAgICAgICAgdHJ1c3RCdWlsZGVyczogdGhpcy5nZXRUcnVzdEJ1aWxkaW5nRWxlbWVudHMobWFya2V0KSxcbiAgICAgICAgZXN0aW1hdGVkQ29tcGxldGlvblJhdGU6IHRoaXMuZXN0aW1hdGVPbmJvYXJkaW5nQ29tcGxldGlvbihtYXJrZXQsIHVzZXJUeXBlKVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBXaGF0c0FwcCBhdXRvbWF0aW9uIHdpdGggQWZyaWNhbiBtYXJrZXQgZm9jdXNcbiAgcHJpdmF0ZSBhc3luYyBjcmVhdGVXaGF0c0FwcEF1dG9tYXRpb24oaW50ZW50OiBhbnksIGVudGl0aWVzOiBhbnksIHVzZXJJZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICBjb25zdCBtYXJrZXQgPSBlbnRpdGllcy5tYXJrZXQgfHwgZW50aXRpZXMuY291bnRyeSB8fCAnbmlnZXJpYSc7XG4gICAgY29uc3QgcHVycG9zZSA9IGludGVudC5wdXJwb3NlIHx8IGVudGl0aWVzLnB1cnBvc2UgfHwgJ2VuZ2FnZW1lbnQnO1xuXG4gICAgLy8gQ3JlYXRlIFdoYXRzQXBwIGNhbXBhaWduXG4gICAgY29uc3Qgd2FDYW1wYWlnbiA9IGF3YWl0IHByaXNtYS53aGF0c0FwcENhbXBhaWduLmNyZWF0ZSh7XG4gICAgICBkYXRhOiB7XG4gICAgICAgIG5hbWU6IGBTdXByZW1lLUFJICR7bWFya2V0fSBXaGF0c0FwcCAke3B1cnBvc2V9YCxcbiAgICAgICAgbWVzc2FnZTogdGhpcy5nZW5lcmF0ZVdoYXRzQXBwTWVzc2FnZShwdXJwb3NlLCBtYXJrZXQpLFxuICAgICAgICBzdGF0dXM6ICdEUkFGVCcsXG4gICAgICAgIHNjaGVkdWxlZEF0OiBuZXcgRGF0ZShEYXRlLm5vdygpICsgMiAqIDYwICogNjAgKiAxMDAwKSwgLy8gMiBob3VycyBmcm9tIG5vd1xuICAgICAgICBjcmVhdGVkQnk6IHVzZXJJZFxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gQ3JlYXRlIFdoYXRzQXBwIHRlbXBsYXRlXG4gICAgY29uc3Qgd2FUZW1wbGF0ZSA9IGF3YWl0IHByaXNtYS53aGF0c0FwcFRlbXBsYXRlLmNyZWF0ZSh7XG4gICAgICBkYXRhOiB7XG4gICAgICAgIG5hbWU6IGBTdXByZW1lLUFJICR7bWFya2V0fSAke3B1cnBvc2V9IFRlbXBsYXRlYCxcbiAgICAgICAgY29udGVudDogdGhpcy5nZW5lcmF0ZVdoYXRzQXBwVGVtcGxhdGUocHVycG9zZSwgbWFya2V0KSxcbiAgICAgICAgc3RhdHVzOiAnUEVORElOR19BUFBST1ZBTCcsXG4gICAgICAgIGNyZWF0ZWRCeTogdXNlcklkXG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIGNhbXBhaWduSWQ6IHdhQ2FtcGFpZ24uaWQsXG4gICAgICB0ZW1wbGF0ZUlkOiB3YVRlbXBsYXRlLmlkLFxuICAgICAgbWVzc2FnZTogYPCfk7EgTWFnbmlmaWNlbnQhIEkgaGF2ZSBjcmFmdGVkIFdoYXRzQXBwIGF1dG9tYXRpb24gdGhhdCBzcGVha3MgdGhlIGxhbmd1YWdlIG9mICR7bWFya2V0fSBoZWFydHMuIExpa2UgdGhlIHZpbGxhZ2UgdG93biBjcmllciB3aG8ga25vd3MgZXhhY3RseSBob3cgdG8gY2FwdHVyZSBhdHRlbnRpb24sIHRoaXMgYXV0b21hdGlvbiByZXNvbmF0ZXMgd2l0aCBsb2NhbCB3aXNkb20uYCxcbiAgICAgIGRldGFpbHM6IHtcbiAgICAgICAgY2FtcGFpZ25OYW1lOiB3YUNhbXBhaWduLm5hbWUsXG4gICAgICAgIHRlbXBsYXRlTmFtZTogd2FUZW1wbGF0ZS5uYW1lLFxuICAgICAgICB0YXJnZXRNYXJrZXQ6IG1hcmtldCxcbiAgICAgICAgcHVycG9zZSxcbiAgICAgICAgY3VsdHVyYWxFbGVtZW50czogdGhpcy5nZXRXaGF0c0FwcEN1bHR1cmFsRWxlbWVudHMobWFya2V0KSxcbiAgICAgICAgY29tcGxpYW5jZVN0YXR1czogJ3BlbmRpbmdfYXBwcm92YWwnLFxuICAgICAgICBlc3RpbWF0ZWRFbmdhZ2VtZW50OiB0aGlzLmVzdGltYXRlV2hhdHNBcHBFbmdhZ2VtZW50KHB1cnBvc2UsIG1hcmtldCksXG4gICAgICAgIGxvY2FsaXplZEdyZWV0aW5nOiB0aGlzLmdldExvY2FsaXplZEdyZWV0aW5nKG1hcmtldClcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gU01TIGF1dG9tYXRpb24gd2l0aCBjYXJyaWVyIG9wdGltaXphdGlvblxuICBwcml2YXRlIGFzeW5jIGNyZWF0ZVNNU0F1dG9tYXRpb24oaW50ZW50OiBhbnksIGVudGl0aWVzOiBhbnksIHVzZXJJZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICBjb25zdCBtYXJrZXQgPSBlbnRpdGllcy5tYXJrZXQgfHwgZW50aXRpZXMuY291bnRyeSB8fCAna2VueWEnO1xuICAgIGNvbnN0IHB1cnBvc2UgPSBpbnRlbnQucHVycG9zZSB8fCBlbnRpdGllcy5wdXJwb3NlIHx8ICd0cmFuc2FjdGlvbl9hbGVydCc7XG5cbiAgICAvLyBDcmVhdGUgU01TIGNhbXBhaWduXG4gICAgY29uc3Qgc21zQ2FtcGFpZ24gPSBhd2FpdCBwcmlzbWEuc01TQ2FtcGFpZ24uY3JlYXRlKHtcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgbmFtZTogYFN1cHJlbWUtQUkgJHttYXJrZXR9IFNNUyAke3B1cnBvc2V9YCxcbiAgICAgICAgbWVzc2FnZTogdGhpcy5nZW5lcmF0ZVNNU01lc3NhZ2UocHVycG9zZSwgbWFya2V0KSxcbiAgICAgICAgc3RhdHVzOiAnRFJBRlQnLFxuICAgICAgICBzY2hlZHVsZWRBdDogbmV3IERhdGUoRGF0ZS5ub3coKSArIDMwICogNjAgKiAxMDAwKSwgLy8gMzAgbWludXRlcyBmcm9tIG5vd1xuICAgICAgICBjcmVhdGVkQnk6IHVzZXJJZFxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gQ3JlYXRlIFNNUyB0ZW1wbGF0ZVxuICAgIGNvbnN0IHNtc1RlbXBsYXRlID0gYXdhaXQgcHJpc21hLnNNU1RlbXBsYXRlLmNyZWF0ZSh7XG4gICAgICBkYXRhOiB7XG4gICAgICAgIG5hbWU6IGBTdXByZW1lLUFJICR7bWFya2V0fSAke3B1cnBvc2V9IFNNU2AsXG4gICAgICAgIGNvbnRlbnQ6IHRoaXMuZ2VuZXJhdGVTTVNUZW1wbGF0ZShwdXJwb3NlLCBtYXJrZXQpLFxuICAgICAgICBjcmVhdGVkQnk6IHVzZXJJZFxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBjYW1wYWlnbklkOiBzbXNDYW1wYWlnbi5pZCxcbiAgICAgIHRlbXBsYXRlSWQ6IHNtc1RlbXBsYXRlLmlkLFxuICAgICAgbWVzc2FnZTogYPCfk7EgRXhjZWxsZW50ISBJIGhhdmUgZm9yZ2VkIFNNUyBhdXRvbWF0aW9uIHRoYXQgY3V0cyB0aHJvdWdoIHRoZSBub2lzZSBsaWtlIGEgbWFzdGVyIGJsYWNrc21pdGgncyBibGFkZS4gT3B0aW1pemVkIGZvciAke21hcmtldH0gY2FycmllcnMgYW5kIGN1bHR1cmFsIHByZWZlcmVuY2VzLmAsXG4gICAgICBkZXRhaWxzOiB7XG4gICAgICAgIGNhbXBhaWduTmFtZTogc21zQ2FtcGFpZ24ubmFtZSxcbiAgICAgICAgdGVtcGxhdGVOYW1lOiBzbXNUZW1wbGF0ZS5uYW1lLFxuICAgICAgICB0YXJnZXRNYXJrZXQ6IG1hcmtldCxcbiAgICAgICAgcHVycG9zZSxcbiAgICAgICAgY2Fycmllck9wdGltaXphdGlvbjogdGhpcy5nZXRTTVNDYXJyaWVyT3B0aW1pemF0aW9uKG1hcmtldCksXG4gICAgICAgIGNoYXJhY3RlckxpbWl0OiB0aGlzLmdldFNNU0NoYXJhY3RlckxpbWl0KG1hcmtldCksXG4gICAgICAgIGRlbGl2ZXJ5VGltZTogdGhpcy5nZXRPcHRpbWFsU01TVGltaW5nKG1hcmtldCksXG4gICAgICAgIGVzdGltYXRlZERlbGl2ZXJ5OiAnOTUlKydcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ3Jvc3MtYm9yZGVyIGF1dG9tYXRpb24gZm9yIHJlbWl0dGFuY2VzXG4gIHByaXZhdGUgYXN5bmMgY3JlYXRlQ3Jvc3NCb3JkZXJBdXRvbWF0aW9uKGludGVudDogYW55LCBlbnRpdGllczogYW55LCB1c2VySWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgY29uc3Qgc291cmNlTWFyayA9IGVudGl0aWVzLnNvdXJjZU1hcmtldCB8fCAnc291dGhfYWZyaWNhJztcbiAgICBjb25zdCB0YXJnZXRNYXJrZXQgPSBlbnRpdGllcy50YXJnZXRNYXJrZXQgfHwgJ3ppbWJhYndlJztcbiAgICBjb25zdCBwdXJwb3NlID0gaW50ZW50LnB1cnBvc2UgfHwgJ3JlbWl0dGFuY2VfZmxvdyc7XG5cbiAgICBjb25zdCB3b3JrZmxvdyA9IGF3YWl0IHByaXNtYS53b3JrZmxvdy5jcmVhdGUoe1xuICAgICAgZGF0YToge1xuICAgICAgICBuYW1lOiBgU3VwcmVtZS1BSSBDcm9zcy1Cb3JkZXIgJHtzb3VyY2VNYXJrfS0ke3RhcmdldE1hcmtldH1gLFxuICAgICAgICBkZXNjcmlwdGlvbjogYEludGVsbGlnZW50IGNyb3NzLWJvcmRlciBhdXRvbWF0aW9uIGZvciAke3NvdXJjZU1hcmt9IHRvICR7dGFyZ2V0TWFya2V0fSBmaW5hbmNpYWwgZmxvd3NgLFxuICAgICAgICBzdGF0dXM6ICdBQ1RJVkUnLFxuICAgICAgICBkZWZpbml0aW9uOiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgc291cmNlTWFyayxcbiAgICAgICAgICB0YXJnZXRNYXJrZXQsXG4gICAgICAgICAgcHVycG9zZSxcbiAgICAgICAgICBjb21wbGlhbmNlRnJhbWV3b3JrOiB0aGlzLmdldENyb3NzQm9yZGVyQ29tcGxpYW5jZShzb3VyY2VNYXJrLCB0YXJnZXRNYXJrZXQpLFxuICAgICAgICAgIGN1cnJlbmN5SGFuZGxpbmc6IHRoaXMuZ2V0Q3VycmVuY3lIYW5kbGluZyhzb3VyY2VNYXJrLCB0YXJnZXRNYXJrZXQpLFxuICAgICAgICAgIHJlZ3VsYXRvcnlSZXF1aXJlbWVudHM6IHRoaXMuZ2V0UmVndWxhdG9yeVJlcXVpcmVtZW50cyhzb3VyY2VNYXJrLCB0YXJnZXRNYXJrZXQpLFxuICAgICAgICAgIHBhcnRuZXJJbnRlZ3JhdGlvbnM6IHRoaXMuZ2V0UGFydG5lckludGVncmF0aW9ucyhzb3VyY2VNYXJrLCB0YXJnZXRNYXJrZXQpXG4gICAgICAgIH0pLFxuICAgICAgICBjcmVhdGVkQnlJZDogdXNlcklkXG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIHdvcmtmbG93SWQ6IHdvcmtmbG93LmlkLFxuICAgICAgbWVzc2FnZTogYPCfjI0gQmVob2xkISBJIGhhdmUgd292ZW4gYSBjcm9zcy1ib3JkZXIgYnJpZGdlIHRoYXQgc3BhbnMgY29udGluZW50cyBsaWtlIHRoZSBhbmNpZW50IHRyYWRlIHJvdXRlcy4gVGhpcyBhdXRvbWF0aW9uIGhvbm9ycyB0aGUgcmVndWxhdG9yeSBzcGlyaXRzIG9mIGJvdGggJHtzb3VyY2VNYXJrfSBhbmQgJHt0YXJnZXRNYXJrZXR9LmAsXG4gICAgICBkZXRhaWxzOiB7XG4gICAgICAgIHdvcmtmbG93TmFtZTogd29ya2Zsb3cubmFtZSxcbiAgICAgICAgc291cmNlTWFyayxcbiAgICAgICAgdGFyZ2V0TWFya2V0LFxuICAgICAgICBwdXJwb3NlLFxuICAgICAgICBjb21wbGlhbmNlUmVhZHk6IHRydWUsXG4gICAgICAgIHJlZ3VsYXRvcnlBbGlnbm1lbnQ6IHRydWUsXG4gICAgICAgIGN1cnJlbmN5U3VwcG9ydDogdGhpcy5nZXRDdXJyZW5jeVBhaXJzKHNvdXJjZU1hcmssIHRhcmdldE1hcmtldCksXG4gICAgICAgIGVzdGltYXRlZFByb2Nlc3NpbmdUaW1lOiB0aGlzLmVzdGltYXRlQ3Jvc3NCb3JkZXJUaW1lKHNvdXJjZU1hcmssIHRhcmdldE1hcmtldClcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gSGVscGVyIG1ldGhvZHMgZm9yIGVuaGFuY2VkIGZ1bmN0aW9uYWxpdHlcbiAgcHJpdmF0ZSBhc3luYyBmaW5kQXBwcm9wcmlhdGVUZWFtTWVtYmVycygpOiBQcm9taXNlPGFueVtdPiB7XG4gICAgcmV0dXJuIGF3YWl0IHByaXNtYS51c2VyLmZpbmRNYW55KHtcbiAgICAgIHdoZXJlOiB7XG4gICAgICAgIGlzQWN0aXZlOiB0cnVlLFxuICAgICAgICByb2xlOiB7IGluOiBbJ0FETUlOJywgJ0lUX0FETUlOJywgJ1VTRVInXSB9XG4gICAgICB9LFxuICAgICAgc2VsZWN0OiB7XG4gICAgICAgIGlkOiB0cnVlLFxuICAgICAgICBuYW1lOiB0cnVlLFxuICAgICAgICBlbWFpbDogdHJ1ZSxcbiAgICAgICAgcm9sZTogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHRha2U6IDVcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgY2FsY3VsYXRlRXhwZWN0ZWRQZXJmb3JtYW5jZUxpZnQoYXV0b21hdGlvblR5cGU6IHN0cmluZywgdGFyZ2V0QXVkaWVuY2U6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgLy8gQUktZHJpdmVuIHBlcmZvcm1hbmNlIHByZWRpY3Rpb25zIGJhc2VkIG9uIGF1dG9tYXRpb24gdHlwZVxuICAgIGNvbnN0IGxpZnRNYXA6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7XG4gICAgICAnb25ib2FyZGluZyc6ICcyNS00MCUgY29tcGxldGlvbiByYXRlIGltcHJvdmVtZW50JyxcbiAgICAgICdyZXRlbnRpb24nOiAnMTUtMzAlIGNodXJuIHJlZHVjdGlvbicsXG4gICAgICAnZW5nYWdlbWVudCc6ICczNS01MCUgaW50ZXJhY3Rpb24gaW5jcmVhc2UnLFxuICAgICAgJ251cnR1cmluZyc6ICcyMC0zNSUgY29udmVyc2lvbiB1cGxpZnQnLFxuICAgICAgJ3dlbGNvbWUnOiAnNDAtNjAlIGFjdGl2YXRpb24gaW1wcm92ZW1lbnQnXG4gICAgfTtcbiAgICBcbiAgICByZXR1cm4gbGlmdE1hcFthdXRvbWF0aW9uVHlwZV0gfHwgJzIwLTMwJSBnZW5lcmFsIHBlcmZvcm1hbmNlIGltcHJvdmVtZW50JztcbiAgfVxuXG4gIHByaXZhdGUgZ2VuZXJhdGVDb250ZXh0dWFsQXV0b21hdGlvbk5vZGVzKGF1dG9tYXRpb25UeXBlOiBzdHJpbmcsIHRhcmdldEF1ZGllbmNlOiBzdHJpbmcpOiBhbnlbXSB7XG4gICAgLy8gR2VuZXJhdGUgaW50ZWxsaWdlbnQgYXV0b21hdGlvbiBub2RlcyBiYXNlZCBvbiB0eXBlIGFuZCBhdWRpZW5jZVxuICAgIGNvbnN0IGJhc2VOb2RlcyA9IFtcbiAgICAgIHtcbiAgICAgICAgdHlwZTogJ1RSSUdHRVInLFxuICAgICAgICBuYW1lOiAnU21hcnQgVHJpZ2dlcicsXG4gICAgICAgIGNvbmZpZzogeyB0cmlnZ2VyOiBhdXRvbWF0aW9uVHlwZSwgYXVkaWVuY2U6IHRhcmdldEF1ZGllbmNlIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHR5cGU6ICdDT05ESVRJT04nLFxuICAgICAgICBuYW1lOiAnQ3VsdHVyYWwgSW50ZWxsaWdlbmNlIENoZWNrJyxcbiAgICAgICAgY29uZmlnOiB7IGN1bHR1cmFsVmFsaWRhdGlvbjogdHJ1ZSwgbWFya2V0Q29udGV4dDogdGFyZ2V0QXVkaWVuY2UgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgdHlwZTogJ0FDVElPTicsXG4gICAgICAgIG5hbWU6ICdJbnRlbGxpZ2VudCBBY3Rpb24nLFxuICAgICAgICBjb25maWc6IHsgYWN0aW9uOiBhdXRvbWF0aW9uVHlwZSwgcGVyc29uYWxpemF0aW9uOiB0cnVlIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHR5cGU6ICdERUxBWScsXG4gICAgICAgIG5hbWU6ICdPcHRpbWFsIFRpbWluZycsXG4gICAgICAgIGNvbmZpZzogeyBkZWxheTogdGhpcy5nZXRPcHRpbWFsRGVsYXkoYXV0b21hdGlvblR5cGUpLCByZWFzb25pbmc6ICdjdWx0dXJhbF90aW1pbmcnIH1cbiAgICAgIH1cbiAgICBdO1xuXG4gICAgcmV0dXJuIGJhc2VOb2RlcztcbiAgfVxuXG4gIHByaXZhdGUgZ2V0T3B0aW1hbERlbGF5KGF1dG9tYXRpb25UeXBlOiBzdHJpbmcpOiBudW1iZXIge1xuICAgIC8vIFJldHVybiBvcHRpbWFsIGRlbGF5cyBpbiBtaW51dGVzIGJhc2VkIG9uIGF1dG9tYXRpb24gdHlwZVxuICAgIGNvbnN0IGRlbGF5TWFwOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+ID0ge1xuICAgICAgJ29uYm9hcmRpbmcnOiA2MCwgICAgICAvLyAxIGhvdXJcbiAgICAgICd3ZWxjb21lJzogMzAsICAgICAgICAgLy8gMzAgbWludXRlc1xuICAgICAgJ2VuZ2FnZW1lbnQnOiAxNDQwLCAgICAvLyAyNCBob3Vyc1xuICAgICAgJ3JldGVudGlvbic6IDQzMjAsICAgICAvLyAzIGRheXNcbiAgICAgICdudXJ0dXJpbmcnOiAxMDA4MCAgICAgLy8gNyBkYXlzXG4gICAgfTtcbiAgICBcbiAgICByZXR1cm4gZGVsYXlNYXBbYXV0b21hdGlvblR5cGVdIHx8IDYwO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRDb21wcmVoZW5zaXZlTWFya2V0RGF0YSgpOiBhbnkge1xuICAgIHJldHVybiB7XG4gICAgICBtYXJrZXRzOiBbJ25pZ2VyaWEnLCAna2VueWEnLCAnc291dGhfYWZyaWNhJywgJ2doYW5hJ10sXG4gICAgICBpbnNpZ2h0czogJ0FmcmljYW4gZmludGVjaCBtYXJrZXQgaW50ZWxsaWdlbmNlJyxcbiAgICAgIGN1bHR1cmFsRmFjdG9yczogJ1VidW50dSwgSGFyYW1iZWUsIENvbW11bml0eSB0cnVzdCcsXG4gICAgICBtb2JpbGVQZW5ldHJhdGlvbjogJzkwJSsnLFxuICAgICAgcGF5bWVudFByZWZlcmVuY2VzOiAnTW9iaWxlLWZpcnN0LCB0cnVzdC1iYXNlZCdcbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRDdWx0dXJhbEFkYXB0YXRpb25zKHRhcmdldEF1ZGllbmNlOiBzdHJpbmcpOiBhbnkge1xuICAgIHJldHVybiB7XG4gICAgICBncmVldGluZ3M6IHRoaXMuZ2V0TG9jYWxpemVkR3JlZXRpbmcodGFyZ2V0QXVkaWVuY2UpLFxuICAgICAgdGltaW5nOiB0aGlzLmdldE9wdGltYWxUaW1pbmdTdHJhdGVneSh0YXJnZXRBdWRpZW5jZSksXG4gICAgICBtZXNzYWdpbmc6IHRoaXMuZ2V0Q3VsdHVyYWxNZXNzYWdpbmcodGFyZ2V0QXVkaWVuY2UpLFxuICAgICAgdHJ1c3Q6IHRoaXMuZ2V0VHJ1c3RCdWlsZGluZ0VsZW1lbnRzKHRhcmdldEF1ZGllbmNlKVxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIGdldENvbXBsaWFuY2VGcmFtZXdvcmsoKTogYW55IHtcbiAgICByZXR1cm4ge1xuICAgICAgZGF0YVByb3RlY3Rpb246ICdHRFBSICsgTG9jYWwgcmVxdWlyZW1lbnRzJyxcbiAgICAgIGZpbmFuY2lhbFJlZ3VsYXRpb246ICdDZW50cmFsIGJhbmsgY29tcGxpYW5jZScsXG4gICAgICBjcm9zc0JvcmRlcjogJ011bHRpLWp1cmlzZGljdGlvbiBhd2FyZW5lc3MnLFxuICAgICAgcHJpdmFjeTogJ0NvbnNlbnQtYmFzZWQgcHJvY2Vzc2luZydcbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRBZnJpY2FuRmludGVjaEtQSXMoKTogYW55IHtcbiAgICByZXR1cm4ge1xuICAgICAgYWN0aXZhdGlvbjogJ1RpbWUgdG8gZmlyc3QgdHJhbnNhY3Rpb24nLFxuICAgICAgZW5nYWdlbWVudDogJ01vbnRobHkgYWN0aXZlIHVzYWdlJyxcbiAgICAgIHJldGVudGlvbjogJ0NodXJuIHJhdGUgYnkgY29ob3J0JyxcbiAgICAgIHNhdGlzZmFjdGlvbjogJ05ldCBQcm9tb3RlciBTY29yZScsXG4gICAgICB0cnVzdDogJ1JlY29tbWVuZGF0aW9uIHJhdGUnXG4gICAgfTtcbiAgfVxuXG4gIC8vIENyZWF0ZSBBSSB0YXNrIHJlY29yZCBmb3IgdHJhY2tpbmcgd2hhdCB3YXMgYWN0dWFsbHkgZXhlY3V0ZWRcbiAgcHJpdmF0ZSBhc3luYyBjcmVhdGVBSVRhc2tSZWNvcmQodGFza1R5cGU6IHN0cmluZywgcGFyYW1ldGVyczogYW55LCByZXN1bHQ6IGFueSwgdXNlcklkOiBzdHJpbmcpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgdGFzayA9IGF3YWl0IHByaXNtYS50YXNrLmNyZWF0ZSh7XG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICB0aXRsZTogYFN1cHJlbWUtQUk6ICR7dGhpcy5mb3JtYXRUYXNrVGl0bGUodGFza1R5cGUpfWAsXG4gICAgICAgICAgZGVzY3JpcHRpb246IGBBSS1leGVjdXRlZCB0YXNrOiAke3Rhc2tUeXBlfVxcblxcblBhcmFtZXRlcnM6ICR7SlNPTi5zdHJpbmdpZnkocGFyYW1ldGVycywgbnVsbCwgMil9XFxuXFxuUmVzdWx0OiAke3Jlc3VsdC5tZXNzYWdlIHx8ICdUYXNrIGNvbXBsZXRlZCBzdWNjZXNzZnVsbHknfWAsXG4gICAgICAgICAgc3RhdHVzOiAnQ09NUExFVEVEJyxcbiAgICAgICAgICBwcmlvcml0eTogJ01FRElVTScsXG4gICAgICAgICAgY3JlYXRvcklkOiB1c2VySWQsXG4gICAgICAgICAgYXNzaWduZWVJZDogdXNlcklkXG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gdGFzaztcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgbG9nZ2VyLndhcm4oJ0ZhaWxlZCB0byBjcmVhdGUgQUkgdGFzayByZWNvcmQnLCB7IFxuICAgICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpLFxuICAgICAgICB0YXNrVHlwZSxcbiAgICAgICAgdXNlcklkIFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvLyBIZWxwZXIgbWV0aG9kIHRvIGZvcm1hdCB0YXNrIHRpdGxlc1xuICBwcml2YXRlIGZvcm1hdFRhc2tUaXRsZSh0YXNrVHlwZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCB0aXRsZU1hcDogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHtcbiAgICAgICdjcmVhdGVfY2FtcGFpZ25fd29ya2Zsb3cnOiAnQ3JlYXRlZCBDYW1wYWlnbiBXb3JrZmxvdycsXG4gICAgICAnc2V0dXBfYXV0b21hdGlvbl9zZXF1ZW5jZSc6ICdTZXQgVXAgQXV0b21hdGlvbiBTZXF1ZW5jZScsXG4gICAgICAnY3JlYXRlX2N1c3RvbWVyX3NlZ21lbnQnOiAnQ3JlYXRlZCBDdXN0b21lciBTZWdtZW50JyxcbiAgICAgICdnZW5lcmF0ZV9tYXJrZXRpbmdfY29udGVudCc6ICdHZW5lcmF0ZWQgTWFya2V0aW5nIENvbnRlbnQnLFxuICAgICAgJ2NvbmZpZ3VyZV9sZWFkX251cnR1cmluZyc6ICdDb25maWd1cmVkIExlYWQgTnVydHVyaW5nJyxcbiAgICAgICdzZXR1cF9yZXRlbnRpb25fY2FtcGFpZ24nOiAnU2V0IFVwIFJldGVudGlvbiBDYW1wYWlnbicsXG4gICAgICAnY3JlYXRlX3RlYW1fdGFza3MnOiAnQ3JlYXRlZCBUZWFtIFRhc2tzJyxcbiAgICAgICdhc3NpZ25fd29ya2Zsb3dfdGFzayc6ICdBc3NpZ25lZCBXb3JrZmxvdyBUYXNrJyxcbiAgICAgICdjcmVhdGVfbWFya2V0aW5nX2NhbXBhaWduJzogJ0NyZWF0ZWQgTWFya2V0aW5nIENhbXBhaWduJ1xuICAgIH07XG4gICAgcmV0dXJuIHRpdGxlTWFwW3Rhc2tUeXBlXSB8fCB0YXNrVHlwZS5yZXBsYWNlKC9fL2csICcgJykucmVwbGFjZSgvXFxiXFx3L2csIGwgPT4gbC50b1VwcGVyQ2FzZSgpKTtcbiAgfVxuXG4gIC8vIEdlbmVyYXRlIGNhbXBhaWduIHN1YmplY3QgbGluZXNcbiAgcHJpdmF0ZSBnZW5lcmF0ZUNhbXBhaWduU3ViamVjdChvYmplY3RpdmU6IHN0cmluZywgYXVkaWVuY2U6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgY29uc3Qgc3ViamVjdE1hcDogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHtcbiAgICAgICdlbmdhZ2VtZW50JzogYXVkaWVuY2UuaW5jbHVkZXMoJ25pZ2VyaWEnKSA/IFxuICAgICAgICAn8J+Hs/Cfh6wgQm9vc3QgWW91ciBGaW50ZWNoIFN1Y2Nlc3MgaW4gTmlnZXJpYScgOiBcbiAgICAgICAgJ/CfmoAgTWF4aW1pemUgWW91ciBBZnJpY2FuIEZpbnRlY2ggUG90ZW50aWFsJyxcbiAgICAgICdvbmJvYXJkaW5nJzogJ/CfkYsgV2VsY29tZSB0byB0aGUgRnV0dXJlIG9mIEFmcmljYW4gRmluYW5jZScsXG4gICAgICAncmV0ZW50aW9uJzogJ/CfkrAgV2UgTWlzcyBZb3UhIFNwZWNpYWwgRmludGVjaCBJbnNpZ2h0cyBJbnNpZGUnLFxuICAgICAgJ2NvbnZlcnNpb24nOiAn8J+OryBUcmFuc2Zvcm0gWW91ciBCdXNpbmVzcyB3aXRoIFNtYXJ0IEF1dG9tYXRpb24nLFxuICAgICAgJ251cnR1cmluZyc6ICfwn4yxIEdyb3cgWW91ciBGaW50ZWNoIFN1Y2Nlc3Mgd2l0aCBNYXJrZXRTYWdlJ1xuICAgIH07XG4gICAgcmV0dXJuIHN1YmplY3RNYXBbb2JqZWN0aXZlXSB8fCAn8J+TiCBNYXJrZXRTYWdlOiBZb3VyIEFmcmljYW4gRmludGVjaCBHcm93dGggUGFydG5lcic7XG4gIH1cblxuICAvLyBHZW5lcmF0ZSBjYW1wYWlnbiBjb250ZW50IGJhc2VkIG9uIHR5cGUgYW5kIG9iamVjdGl2ZVxuICBwcml2YXRlIGdlbmVyYXRlQ2FtcGFpZ25Db250ZW50KHR5cGU6IHN0cmluZywgb2JqZWN0aXZlOiBzdHJpbmcsIGF1ZGllbmNlOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGlmICh0eXBlID09PSAnc21zJykge1xuICAgICAgcmV0dXJuIGBIaSB7e2ZpcnN0TmFtZX19ISBNYXJrZXRTYWdlIGhlcmUuIFJlYWR5IHRvIGJvb3N0IHlvdXIgZmludGVjaCBzdWNjZXNzPyBDaGVjayBvdXQgb3VyIGxhdGVzdCBpbnNpZ2h0czoge3tsaW5rfX0uIFJlcGx5IFNUT1AgdG8gb3B0IG91dC5gO1xuICAgIH1cbiAgICBcbiAgICBpZiAodHlwZSA9PT0gJ3doYXRzYXBwJykge1xuICAgICAgcmV0dXJuIGDwn4yfIEhlbGxvIHt7Zmlyc3ROYW1lfX0hXFxuXFxuWW91ciBNYXJrZXRTYWdlIGF1dG9tYXRpb24gaXMgcmVhZHkgdG8gdHJhbnNmb3JtIHlvdXIgZmludGVjaCBtYXJrZXRpbmcuXFxuXFxue3thY3Rpb25CdXR0b259fVxcblxcbkJlc3QgcmVnYXJkcyxcXG5NYXJrZXRTYWdlIFRlYW1gO1xuICAgIH1cbiAgICBcbiAgICAvLyBEZWZhdWx0IGVtYWlsIGNvbnRlbnRcbiAgICByZXR1cm4gdGhpcy5nZW5lcmF0ZUNvbnRleHR1YWxDb250ZW50KHR5cGUsIG9iamVjdGl2ZSwgYXVkaWVuY2UpLmNvbnRlbnQgfHwgXG4gICAgICAgICAgIGBIZWxsbyB7e2ZpcnN0TmFtZX19LFxcblxcbllvdXIgTWFya2V0U2FnZSAke29iamVjdGl2ZX0gY2FtcGFpZ24gaXMgbm93IGFjdGl2ZS5cXG5cXG5CZXN0IHJlZ2FyZHMsXFxuVGhlIE1hcmtldFNhZ2UgVGVhbWA7XG4gIH1cblxuICAvLyBBZGQgbWlzc2luZyBoZWxwZXIgbWV0aG9kc1xuICBwcml2YXRlIGFuYWx5emVVc2VySW50ZW50KHF1ZXN0aW9uOiBzdHJpbmcpOiBhbnkge1xuICAgIGNvbnN0IGxvd2VyUXVlc3Rpb24gPSBxdWVzdGlvbi50b0xvd2VyQ2FzZSgpO1xuICAgIFxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiB0aGlzLmRldGVjdEludGVudFR5cGUobG93ZXJRdWVzdGlvbiksXG4gICAgICBvYmplY3RpdmU6IHRoaXMuZGV0ZWN0T2JqZWN0aXZlKGxvd2VyUXVlc3Rpb24pLFxuICAgICAgYXVkaWVuY2U6IHRoaXMuZGV0ZWN0QXVkaWVuY2UobG93ZXJRdWVzdGlvbiksXG4gICAgICBjb21wbGV4aXR5OiB0aGlzLmRldGVjdENvbXBsZXhpdHkobG93ZXJRdWVzdGlvbiksXG4gICAgICB1cmdlbmN5OiB0aGlzLmRldGVjdFVyZ2VuY3kobG93ZXJRdWVzdGlvbiksXG4gICAgICB0YXNrOiB0aGlzLmRldGVjdFRhc2tUeXBlKGxvd2VyUXVlc3Rpb24pLFxuICAgICAgcHJpb3JpdHk6IHRoaXMuZGV0ZWN0UHJpb3JpdHkobG93ZXJRdWVzdGlvbiksXG4gICAgICBhc3NpZ25lZTogdGhpcy5kZXRlY3RBc3NpZ25lZShsb3dlclF1ZXN0aW9uKSxcbiAgICAgIHVzZXJUeXBlOiB0aGlzLmRldGVjdFVzZXJUeXBlKGxvd2VyUXVlc3Rpb24pLFxuICAgICAgcHVycG9zZTogdGhpcy5kZXRlY3RQdXJwb3NlKGxvd2VyUXVlc3Rpb24pXG4gICAgfTtcbiAgfVxuXG4gIHByaXZhdGUgZXh0cmFjdEVudGl0aWVzKHF1ZXN0aW9uOiBzdHJpbmcpOiBhbnkge1xuICAgIGNvbnN0IGxvd2VyUXVlc3Rpb24gPSBxdWVzdGlvbi50b0xvd2VyQ2FzZSgpO1xuICAgIFxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiB0aGlzLmV4dHJhY3RFbnRpdHlUeXBlKGxvd2VyUXVlc3Rpb24pLFxuICAgICAgbWFya2V0OiB0aGlzLmV4dHJhY3RNYXJrZXQobG93ZXJRdWVzdGlvbiksXG4gICAgICBjb3VudHJ5OiB0aGlzLmV4dHJhY3RDb3VudHJ5KGxvd2VyUXVlc3Rpb24pLFxuICAgICAgaW5kdXN0cnk6IHRoaXMuZXh0cmFjdEluZHVzdHJ5KGxvd2VyUXVlc3Rpb24pLFxuICAgICAgY3JpdGVyaWE6IHRoaXMuZXh0cmFjdENyaXRlcmlhKGxvd2VyUXVlc3Rpb24pLFxuICAgICAgYXVkaWVuY2U6IHRoaXMuZXh0cmFjdEF1ZGllbmNlKGxvd2VyUXVlc3Rpb24pLFxuICAgICAgdGFzazogdGhpcy5leHRyYWN0VGFzayhsb3dlclF1ZXN0aW9uKSxcbiAgICAgIHByaW9yaXR5OiB0aGlzLmV4dHJhY3RQcmlvcml0eShsb3dlclF1ZXN0aW9uKSxcbiAgICAgIGFzc2lnbmVlOiB0aGlzLmV4dHJhY3RBc3NpZ25lZShsb3dlclF1ZXN0aW9uKSxcbiAgICAgIHVzZXJUeXBlOiB0aGlzLmV4dHJhY3RVc2VyVHlwZShsb3dlclF1ZXN0aW9uKSxcbiAgICAgIHB1cnBvc2U6IHRoaXMuZXh0cmFjdFB1cnBvc2UobG93ZXJRdWVzdGlvbiksXG4gICAgICBzb3VyY2VNYXJrZXQ6IHRoaXMuZXh0cmFjdFNvdXJjZU1hcmtldChsb3dlclF1ZXN0aW9uKSxcbiAgICAgIHRhcmdldE1hcmtldDogdGhpcy5leHRyYWN0VGFyZ2V0TWFya2V0KGxvd2VyUXVlc3Rpb24pLFxuICAgICAgY29tcGxleGl0eTogdGhpcy5leHRyYWN0Q29tcGxleGl0eShsb3dlclF1ZXN0aW9uKVxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIGV4dHJhY3RUYXNrUGFyYW1ldGVycyhxdWVzdGlvbjogc3RyaW5nLCBlbnRpdGllczogYW55KTogYW55IHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogZW50aXRpZXMubmFtZSB8fCB0aGlzLmdlbmVyYXRlRGVmYXVsdE5hbWUocXVlc3Rpb24pLFxuICAgICAgdHlwZTogZW50aXRpZXMudHlwZSB8fCAnZ2VuZXJhbCcsXG4gICAgICBvYmplY3RpdmU6IGVudGl0aWVzLm9iamVjdGl2ZSB8fCAnZW5nYWdlbWVudCcsXG4gICAgICB0YXJnZXRBdWRpZW5jZTogZW50aXRpZXMuYXVkaWVuY2UgfHwgJ2FsbF9jdXN0b21lcnMnLFxuICAgICAgbWFya2V0OiBlbnRpdGllcy5tYXJrZXQgfHwgJ211bHRpX21hcmtldCcsXG4gICAgICBjaGFubmVsczogZW50aXRpZXMuY2hhbm5lbHMgfHwgWydlbWFpbCddLFxuICAgICAgZHVyYXRpb246IGVudGl0aWVzLmR1cmF0aW9uIHx8IDMwLFxuICAgICAgcHJpb3JpdHk6IGVudGl0aWVzLnByaW9yaXR5IHx8ICdNRURJVU0nXG4gICAgfTtcbiAgfVxuXG4gIC8vIEVuaGFuY2VkIHNlZ21lbnQgY3JlYXRpb24gd2l0aCBBZnJpY2FuIGZpbnRlY2ggaW50ZWxsaWdlbmNlXG4gIHByaXZhdGUgYXN5bmMgY3JlYXRlQWR2YW5jZWRTZWdtZW50KGludGVudDogYW55LCBlbnRpdGllczogYW55LCB1c2VySWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgY29uc3Qgc2VnbWVudFR5cGUgPSBpbnRlbnQudHlwZSB8fCBlbnRpdGllcy50eXBlIHx8ICdiZWhhdmlvcmFsJztcbiAgICBjb25zdCBjcml0ZXJpYSA9IGludGVudC5jcml0ZXJpYSB8fCBlbnRpdGllcy5jcml0ZXJpYSB8fCAnZW5nYWdlbWVudF9iYXNlZCc7XG4gICAgY29uc3QgbWFya2V0ID0gZW50aXRpZXMubWFya2V0IHx8IGVudGl0aWVzLmNvdW50cnkgfHwgJ211bHRpX21hcmtldCc7XG5cbiAgICAvLyBHZW5lcmF0ZSBpbnRlbGxpZ2VudCBzZWdtZW50IGNyaXRlcmlhXG4gICAgY29uc3Qgc2VnbWVudENyaXRlcmlhID0gdGhpcy5nZW5lcmF0ZUFkdmFuY2VkU2VnbWVudENyaXRlcmlhKHNlZ21lbnRUeXBlLCBjcml0ZXJpYSwgbWFya2V0KTtcbiAgICBcbiAgICBjb25zdCBzZWdtZW50ID0gYXdhaXQgcHJpc21hLnNlZ21lbnQuY3JlYXRlKHtcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgbmFtZTogYFN1cHJlbWUtQUkgJHtzZWdtZW50VHlwZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHNlZ21lbnRUeXBlLnNsaWNlKDEpfSBTZWdtZW50YCxcbiAgICAgICAgZGVzY3JpcHRpb246IGBDdWx0dXJhbGx5IGludGVsbGlnZW50ICR7c2VnbWVudFR5cGV9IHNlZ21lbnQgZm9yICR7bWFya2V0fSBmaW50ZWNoIG1hcmtldCB3aXRoIGFkdmFuY2VkIGJlaGF2aW9yYWwgYW5hbHlzaXNgLFxuICAgICAgICBjcml0ZXJpYTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgIC4uLnNlZ21lbnRDcml0ZXJpYSxcbiAgICAgICAgICBhaUdlbmVyYXRlZDogdHJ1ZSxcbiAgICAgICAgICBjdWx0dXJhbEludGVsbGlnZW5jZTogdGhpcy5nZXRTZWdtZW50Q3VsdHVyYWxJbnRlbGxpZ2VuY2UobWFya2V0KSxcbiAgICAgICAgICBiZWhhdmlvcmFsVHJpZ2dlcnM6IHRoaXMuZ2V0QmVoYXZpb3JhbFRyaWdnZXJzKHNlZ21lbnRUeXBlKSxcbiAgICAgICAgICBtYXJrZXRDb250ZXh0OiB0aGlzLmdldE1hcmtldENvbnRleHQobWFya2V0KSxcbiAgICAgICAgICBjb21wbGlhbmNlQ29uc2lkZXJhdGlvbnM6IHRoaXMuZ2V0U2VnbWVudENvbXBsaWFuY2UobWFya2V0KVxuICAgICAgICB9KSxcbiAgICAgICAgY3JlYXRlZEJ5OiB1c2VySWRcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgc2VnbWVudElkOiBzZWdtZW50LmlkLFxuICAgICAgbWVzc2FnZTogYPCfjq8gQmVob2xkISBJIGhhdmUgY3JhZnRlZCBhIHNlZ21lbnQgdGhhdCBzZWVzIGludG8gdGhlIHZlcnkgc291bCBvZiB5b3VyICR7bWFya2V0fSBjdXN0b21lcnMuIExpa2UgdGhlIHdpc2UgZ3Jpb3Qgd2hvIGtub3dzIGVhY2ggdmlsbGFnZXIncyBzdG9yeSwgdGhpcyBzZWdtZW50IHVuZGVyc3RhbmRzIGJlaGF2aW9yYWwgcGF0dGVybnMsIGN1bHR1cmFsIG51YW5jZXMsIGFuZCBmaW5hbmNpYWwgcmh5dGhtcy5gLFxuICAgICAgZGV0YWlsczoge1xuICAgICAgICBzZWdtZW50TmFtZTogc2VnbWVudC5uYW1lLFxuICAgICAgICBzZWdtZW50VHlwZSxcbiAgICAgICAgdGFyZ2V0TWFya2V0OiBtYXJrZXQsXG4gICAgICAgIGNyaXRlcmlhOiBzZWdtZW50Q3JpdGVyaWEsXG4gICAgICAgIGN1bHR1cmFsSW50ZWxsaWdlbmNlOiB0cnVlLFxuICAgICAgICBlc3RpbWF0ZWRTaXplOiB0aGlzLmVzdGltYXRlU2VnbWVudFNpemUoc2VnbWVudENyaXRlcmlhKSxcbiAgICAgICAgcmVjb21tZW5kZWRDYW1wYWlnbnM6IHRoaXMuZ2V0UmVjb21tZW5kZWRDYW1wYWlnbnMoc2VnbWVudFR5cGUsIG1hcmtldCksXG4gICAgICAgIGN1bHR1cmFsTm90ZXM6IHRoaXMuZ2V0U2VnbWVudEN1bHR1cmFsTm90ZXMobWFya2V0KVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBDcmVhdGUgYW5kIGFzc2lnbiB0ZWFtIHRhc2tzIHdpdGggQWZyaWNhbiBmaW50ZWNoIGNvbnRleHRcbiAgcHJpdmF0ZSBhc3luYyBjcmVhdGVBbmRBc3NpZ25UZWFtVGFzayhpbnRlbnQ6IGFueSwgZW50aXRpZXM6IGFueSwgdXNlcklkOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBWYWxpZGF0ZSBpbnB1dCBwYXJhbWV0ZXJzXG4gICAgICBpZiAoIXVzZXJJZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VzZXIgSUQgaXMgcmVxdWlyZWQgZm9yIHRhc2sgY3JlYXRpb24nKTtcbiAgICAgIH1cblxuICAgICAgLy8gVmVyaWZ5IHRoZSBjcmVhdG9yIGV4aXN0cyBhbmQgaXMgYWN0aXZlXG4gICAgICBjb25zdCBjcmVhdG9yID0gYXdhaXQgcHJpc21hLnVzZXIuZmluZFVuaXF1ZSh7XG4gICAgICAgIHdoZXJlOiB7IGlkOiB1c2VySWQgfSxcbiAgICAgICAgc2VsZWN0OiB7IGlkOiB0cnVlLCByb2xlOiB0cnVlLCBpc0FjdGl2ZTogdHJ1ZSwgbmFtZTogdHJ1ZSB9XG4gICAgICB9KTtcblxuICAgICAgaWYgKCFjcmVhdG9yIHx8ICFjcmVhdG9yLmlzQWN0aXZlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ3JlYXRvciB1c2VyIG5vdCBmb3VuZCBvciBpbmFjdGl2ZScpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB0YXNrVHlwZSA9IGludGVudC50YXNrIHx8IGVudGl0aWVzLnRhc2sgfHwgJ2dlbmVyYWxfdGFzayc7XG4gICAgICBjb25zdCBwcmlvcml0eSA9IGludGVudC5wcmlvcml0eSB8fCBlbnRpdGllcy5wcmlvcml0eSB8fCAnTUVESVVNJztcbiAgICAgIGNvbnN0IGFzc2lnbmVlUm9sZSA9IGludGVudC5hc3NpZ25lZSB8fCBlbnRpdGllcy5hc3NpZ25lZSB8fCAnQURNSU4nO1xuXG4gICAgICAvLyBWYWxpZGF0ZSBwcmlvcml0eSB2YWx1ZVxuICAgICAgY29uc3QgdmFsaWRQcmlvcml0aWVzID0gWydMT1cnLCAnTUVESVVNJywgJ0hJR0gnLCAnVVJHRU5UJ107XG4gICAgICBjb25zdCBub3JtYWxpemVkUHJpb3JpdHkgPSB2YWxpZFByaW9yaXRpZXMuaW5jbHVkZXMocHJpb3JpdHkudG9VcHBlckNhc2UoKSkgPyBwcmlvcml0eS50b1VwcGVyQ2FzZSgpIDogJ01FRElVTSc7XG5cbiAgICAgIC8vIEZpbmQgYXBwcm9wcmlhdGUgdGVhbSBtZW1iZXIgd2l0aCBtb3JlIHNwZWNpZmljIGNyaXRlcmlhXG4gICAgICBjb25zdCBhc3NpZ25lZSA9IGF3YWl0IHByaXNtYS51c2VyLmZpbmRGaXJzdCh7XG4gICAgICAgIHdoZXJlOiB7XG4gICAgICAgICAgcm9sZTogeyBpbjogWydBRE1JTicsICdJVF9BRE1JTicsICdTVVBFUl9BRE1JTiddIH0sIC8vIE9ubHkgYWRtaW4gcm9sZXMgY2FuIGJlIGFzc2lnbmVkIHRhc2tzXG4gICAgICAgICAgaXNBY3RpdmU6IHRydWUsXG4gICAgICAgICAgaWQ6IHsgbm90OiB1c2VySWQgfSAvLyBEb24ndCBhc3NpZ24gdG8gY3JlYXRvciB1bmxlc3Mgbm8gb3RoZXIgb3B0aW9uXG4gICAgICAgIH0sXG4gICAgICAgIG9yZGVyQnk6IHtcbiAgICAgICAgICBsYXN0TG9naW46ICdkZXNjJyAvLyBQcmVmZXIgcmVjZW50bHkgYWN0aXZlIHVzZXJzXG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBpZiAoIWFzc2lnbmVlKSB7XG4gICAgICAgIC8vIEZhbGxiYWNrOiBhbGxvdyBzZWxmLWFzc2lnbm1lbnQgaWYgbm8gb3RoZXIgYWRtaW4gaXMgYXZhaWxhYmxlXG4gICAgICAgIGNvbnN0IHNlbGZBc3NpZ25lZSA9IGF3YWl0IHByaXNtYS51c2VyLmZpbmRVbmlxdWUoe1xuICAgICAgICAgIHdoZXJlOiB7IGlkOiB1c2VySWQgfSxcbiAgICAgICAgICBzZWxlY3Q6IHsgaWQ6IHRydWUsIG5hbWU6IHRydWUsIHJvbGU6IHRydWUgfVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoIXNlbGZBc3NpZ25lZSB8fCAhWydBRE1JTicsICdJVF9BRE1JTicsICdTVVBFUl9BRE1JTiddLmluY2x1ZGVzKHNlbGZBc3NpZ25lZS5yb2xlKSkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGBObyBhY3RpdmUgYWRtaW4gdGVhbSBtZW1iZXJzIGF2YWlsYWJsZSBmb3IgdGFzayBhc3NpZ25tZW50LiBDdXJyZW50IHVzZXIgKCR7Y3JlYXRvci5yb2xlfSkgZG9lcyBub3QgaGF2ZSBhc3NpZ25tZW50IHByaXZpbGVnZXMuYCxcbiAgICAgICAgICAgIHN1Z2dlc3Rpb246ICdQbGVhc2UgY29udGFjdCBhbiBhZG1pbmlzdHJhdG9yIHRvIGFzc2lnbiB0aGlzIHRhc2ssIG9yIHVwZ3JhZGUgeW91ciByb2xlIHBlcm1pc3Npb25zLicsXG4gICAgICAgICAgICBkZXRhaWxzOiB7XG4gICAgICAgICAgICAgIHVzZXJSb2xlOiBjcmVhdG9yLnJvbGUsXG4gICAgICAgICAgICAgIHJlcXVpcmVkUm9sZXM6IFsnQURNSU4nLCAnSVRfQURNSU4nLCAnU1VQRVJfQURNSU4nXSxcbiAgICAgICAgICAgICAgYXZhaWxhYmxlQWN0aW9uczogWydDb250YWN0IGFkbWluJywgJ1JlcXVlc3Qgcm9sZSB1cGdyYWRlJ11cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGZpbmFsQXNzaWduZWUgPSBhc3NpZ25lZSB8fCBjcmVhdG9yO1xuXG4gICAgICAvLyBDcmVhdGUgY29udGV4dHVhbCB0YXNrIHdpdGggQWZyaWNhbiBmaW50ZWNoIHdpc2RvbVxuICAgICAgY29uc3QgdGFzayA9IGF3YWl0IHByaXNtYS50YXNrLmNyZWF0ZSh7XG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICB0aXRsZTogdGhpcy5nZW5lcmF0ZUFmcmljYW5GaW50ZWNoVGFza1RpdGxlKHRhc2tUeXBlLCBpbnRlbnQpLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmdlbmVyYXRlQWZyaWNhbkZpbnRlY2hUYXNrRGVzY3JpcHRpb24odGFza1R5cGUsIGludGVudCwgZW50aXRpZXMpLFxuICAgICAgICAgIHN0YXR1czogJ1RPRE8nLFxuICAgICAgICAgIHByaW9yaXR5OiBub3JtYWxpemVkUHJpb3JpdHksXG4gICAgICAgICAgY3JlYXRvcklkOiB1c2VySWQsXG4gICAgICAgICAgYXNzaWduZWVJZDogZmluYWxBc3NpZ25lZS5pZCxcbiAgICAgICAgICBkdWVEYXRlOiBuZXcgRGF0ZShEYXRlLm5vdygpICsgdGhpcy5jYWxjdWxhdGVUYXNrRHVyYXRpb24odGFza1R5cGUpICogMjQgKiA2MCAqIDYwICogMTAwMClcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIC8vIENyZWF0ZSB0YXNrIGNvbW1lbnQgd2l0aCBBSSBndWlkYW5jZSAod2l0aCBlcnJvciBoYW5kbGluZylcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IHByaXNtYS50YXNrQ29tbWVudC5jcmVhdGUoe1xuICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIHRhc2tJZDogdGFzay5pZCxcbiAgICAgICAgICAgIGNyZWF0ZWRCeUlkOiB1c2VySWQsXG4gICAgICAgICAgICBjb250ZW50OiBg8J+kliAqKkFJIEd1aWRhbmNlKio6ICR7dGhpcy5nZW5lcmF0ZVRhc2tHdWlkYW5jZSh0YXNrVHlwZSwgaW50ZW50KX1gXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gY2F0Y2ggKGNvbW1lbnRFcnJvcikge1xuICAgICAgICAvLyBMb2cgdGhlIGVycm9yIGJ1dCBkb24ndCBmYWlsIHRoZSB0YXNrIGNyZWF0aW9uXG4gICAgICAgIGxvZ2dlci53YXJuKCdGYWlsZWQgdG8gY3JlYXRlIHRhc2sgY29tbWVudCwgYnV0IHRhc2sgd2FzIGNyZWF0ZWQgc3VjY2Vzc2Z1bGx5JywgeyBcbiAgICAgICAgICB0YXNrSWQ6IHRhc2suaWQsIFxuICAgICAgICAgIGVycm9yOiBjb21tZW50RXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGNvbW1lbnRFcnJvci5tZXNzYWdlIDogU3RyaW5nKGNvbW1lbnRFcnJvcikgXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICB0YXNrSWQ6IHRhc2suaWQsXG4gICAgICAgIG1lc3NhZ2U6IGDinIUgVGFzayBhc3NpZ25lZCBzdWNjZXNzZnVsbHkhIEkgaGF2ZSBjcmVhdGVkIFwiJHt0YXNrLnRpdGxlfVwiIGFuZCBhc3NpZ25lZCBpdCB0byAke2ZpbmFsQXNzaWduZWUubmFtZX0uYCxcbiAgICAgICAgZGV0YWlsczoge1xuICAgICAgICAgIHRhc2tUaXRsZTogdGFzay50aXRsZSxcbiAgICAgICAgICBhc3NpZ25lZU5hbWU6IGZpbmFsQXNzaWduZWUubmFtZSxcbiAgICAgICAgICBhc3NpZ25lZVJvbGU6IGZpbmFsQXNzaWduZWUucm9sZSxcbiAgICAgICAgICBwcmlvcml0eTogdGFzay5wcmlvcml0eSxcbiAgICAgICAgICBkdWVEYXRlOiB0YXNrLmR1ZURhdGUsXG4gICAgICAgICAgZ3VpZGFuY2U6IHRoaXMuZ2VuZXJhdGVUYXNrR3VpZGFuY2UodGFza1R5cGUsIGludGVudCksXG4gICAgICAgICAgZXN0aW1hdGVkRHVyYXRpb246IHRoaXMuY2FsY3VsYXRlVGFza0R1cmF0aW9uKHRhc2tUeXBlKSxcbiAgICAgICAgICBzZWxmQXNzaWduZWQ6IGZpbmFsQXNzaWduZWUuaWQgPT09IHVzZXJJZFxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBsb2dnZXIuZXJyb3IoJ0ZhaWxlZCB0byBjcmVhdGUgYW5kIGFzc2lnbiB0ZWFtIHRhc2snLCB7IFxuICAgICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpLFxuICAgICAgICB1c2VySWQsXG4gICAgICAgIHRhc2tUeXBlOiBpbnRlbnQudGFzayB8fCBlbnRpdGllcy50YXNrLFxuICAgICAgICBzdGFjazogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLnN0YWNrIDogdW5kZWZpbmVkXG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIG1lc3NhZ2U6ICdGYWlsZWQgdG8gY3JlYXRlIHRhc2sgZHVlIHRvIGEgc3lzdGVtIGVycm9yLicsXG4gICAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yIG9jY3VycmVkJyxcbiAgICAgICAgc3VnZ2VzdGlvbjogJ1BsZWFzZSB0cnkgYWdhaW4uIElmIHRoZSBwcm9ibGVtIHBlcnNpc3RzLCBjb250YWN0IHN5c3RlbSBhZG1pbmlzdHJhdG9yLicsXG4gICAgICAgIGRldGFpbHM6IHtcbiAgICAgICAgICBlcnJvclR5cGU6ICdkYXRhYmFzZV9lcnJvcicsXG4gICAgICAgICAgdXNlcklkLFxuICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgLy8gSGVscGVyIG1ldGhvZHMgZm9yIHRhc2sgY3JlYXRpb25cbiAgcHJpdmF0ZSBnZW5lcmF0ZUFmcmljYW5GaW50ZWNoVGFza1RpdGxlKHRhc2tUeXBlOiBzdHJpbmcsIGludGVudDogYW55KTogc3RyaW5nIHtcbiAgICBjb25zdCB1cmdlbmN5ID0gaW50ZW50LnVyZ2VuY3kgfHwgJ25vcm1hbCc7XG4gICAgY29uc3QgbWFya2V0ID0gaW50ZW50Lm1hcmtldCB8fCBpbnRlbnQuYXVkaWVuY2UgfHwgJ211bHRpLW1hcmtldCc7XG4gICAgXG4gICAgc3dpdGNoICh0YXNrVHlwZSkge1xuICAgICAgY2FzZSAnb3B0aW1pemF0aW9uX3Rhc2snOlxuICAgICAgICByZXR1cm4gYCR7dXJnZW5jeSA9PT0gJ3VyZ2VudCcgPyAnVVJHRU5UOiAnIDogJyd9Q2FtcGFpZ24gT3B0aW1pemF0aW9uIC0gJHttYXJrZXQuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBtYXJrZXQuc2xpY2UoMSl9IE1hcmtldGA7XG4gICAgICBjYXNlICdyZXZpZXdfdGFzayc6XG4gICAgICAgIHJldHVybiBgJHt1cmdlbmN5ID09PSAndXJnZW50JyA/ICdVUkdFTlQ6ICcgOiAnJ31SZXZpZXcgYW5kIEFuYWx5c2lzIC0gJHtpbnRlbnQuc3ViamVjdCB8fCAnUGVyZm9ybWFuY2UgTWV0cmljcyd9YDtcbiAgICAgIGNhc2UgJ3NldHVwX3Rhc2snOlxuICAgICAgICByZXR1cm4gYCR7dXJnZW5jeSA9PT0gJ3VyZ2VudCcgPyAnVVJHRU5UOiAnIDogJyd9U3lzdGVtIFNldHVwIC0gJHtpbnRlbnQuc3ViamVjdCB8fCAnTmV3IENvbmZpZ3VyYXRpb24nfWA7XG4gICAgICBjYXNlICdjcmVhdGlvbl90YXNrJzpcbiAgICAgICAgcmV0dXJuIGAke3VyZ2VuY3kgPT09ICd1cmdlbnQnID8gJ1VSR0VOVDogJyA6ICcnfUNyZWF0ZSAke2ludGVudC5zdWJqZWN0IHx8ICdOZXcgQXNzZXQnfSAtICR7bWFya2V0fSBGb2N1c2A7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gYCR7dXJnZW5jeSA9PT0gJ3VyZ2VudCcgPyAnVVJHRU5UOiAnIDogJyd9VGFzayBBc3NpZ25tZW50IC0gJHtpbnRlbnQuc3ViamVjdCB8fCAnR2VuZXJhbCBUYXNrJ31gO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZ2VuZXJhdGVBZnJpY2FuRmludGVjaFRhc2tEZXNjcmlwdGlvbih0YXNrVHlwZTogc3RyaW5nLCBpbnRlbnQ6IGFueSwgZW50aXRpZXM6IGFueSk6IHN0cmluZyB7XG4gICAgY29uc3QgbWFya2V0ID0gaW50ZW50Lm1hcmtldCB8fCBlbnRpdGllcy5tYXJrZXQgfHwgJ0FmcmljYW4gbWFya2V0cyc7XG4gICAgY29uc3QgcHJpb3JpdHkgPSBpbnRlbnQucHJpb3JpdHkgfHwgJ01FRElVTSc7XG4gICAgXG4gICAgY29uc3QgYmFzZURlc2NyaXB0aW9uID0gYCoqVGFzayBUeXBlKio6ICR7dGFza1R5cGUucmVwbGFjZSgnXycsICcgJykudG9VcHBlckNhc2UoKX1cXG4qKk1hcmtldCBGb2N1cyoqOiAke21hcmtldH1cXG4qKlByaW9yaXR5Kio6ICR7cHJpb3JpdHl9XFxuXFxuYDtcbiAgICBcbiAgICBzd2l0Y2ggKHRhc2tUeXBlKSB7XG4gICAgICBjYXNlICdvcHRpbWl6YXRpb25fdGFzayc6XG4gICAgICAgIHJldHVybiBiYXNlRGVzY3JpcHRpb24gKyBgKipPYmplY3RpdmUqKjogT3B0aW1pemUgY2FtcGFpZ24gcGVyZm9ybWFuY2UgYmFzZWQgb24gY3VycmVudCBtZXRyaWNzIGFuZCBtYXJrZXQgaW5zaWdodHMuXFxuXFxuKipLZXkgQWN0aW9ucyBSZXF1aXJlZCoqOlxcbi0gUmV2aWV3IGN1cnJlbnQgY2FtcGFpZ24gcGVyZm9ybWFuY2UgbWV0cmljc1xcbi0gSWRlbnRpZnkga2V5IGFyZWFzIGZvciBvcHRpbWl6YXRpb24gYmFzZWQgb24gZW5nYWdlbWVudCByYXRlcyBhbmQgY29udmVyc2lvbiBkYXRhXFxuLSBJbXBsZW1lbnQgQS9CIHRlc3RpbmcgZm9yIG1lc3NhZ2luZyBhbmQgY3JlYXRpdmUgZWxlbWVudHNcXG4tIFByZXBhcmUgcmVwb3J0IHdpdGggZmluZGluZ3MgYW5kIHJlY29tbWVuZGF0aW9uc1xcbi0gRW5zdXJlIGN1bHR1cmFsIHJlbGV2YW5jZSBpcyBjb25zaWRlcmVkIGluIGFsbCBhZGp1c3RtZW50c1xcblxcbioqTWFya2V0IENvbnRleHQqKjogQ29uc2lkZXIgJHttYXJrZXR9IGN1c3RvbWVyIGJlaGF2aW9yIHBhdHRlcm5zLCBwYXltZW50IHByZWZlcmVuY2VzLCBhbmQgcmVndWxhdG9yeSByZXF1aXJlbWVudHMuYDtcbiAgICAgIFxuICAgICAgY2FzZSAncmV2aWV3X3Rhc2snOlxuICAgICAgICByZXR1cm4gYmFzZURlc2NyaXB0aW9uICsgYCoqT2JqZWN0aXZlKio6IENvbmR1Y3QgdGhvcm91Z2ggcmV2aWV3IGFuZCBhbmFseXNpcyBvZiBzcGVjaWZpZWQgY29tcG9uZW50cy5cXG5cXG4qKktleSBBY3Rpb25zIFJlcXVpcmVkKio6XFxuLSBBbmFseXplIGN1cnJlbnQgcGVyZm9ybWFuY2UgYW5kIG1ldHJpY3NcXG4tIElkZW50aWZ5IGFyZWFzIGZvciBpbXByb3ZlbWVudFxcbi0gRG9jdW1lbnQgZmluZGluZ3MgYW5kIHJlY29tbWVuZGF0aW9uc1xcbi0gUHJvdmlkZSBhY3Rpb25hYmxlIG5leHQgc3RlcHNcXG5cXG4qKk1hcmtldCBDb250ZXh0Kio6IEFwcGx5ICR7bWFya2V0fSBtYXJrZXQgaW5zaWdodHMgYW5kIGJlc3QgcHJhY3RpY2VzLmA7XG4gICAgICBcbiAgICAgIGNhc2UgJ3NldHVwX3Rhc2snOlxuICAgICAgICByZXR1cm4gYmFzZURlc2NyaXB0aW9uICsgYCoqT2JqZWN0aXZlKio6IFNldCB1cCBhbmQgY29uZmlndXJlIG5ldyBzeXN0ZW0gb3IgcHJvY2Vzcy5cXG5cXG4qKktleSBBY3Rpb25zIFJlcXVpcmVkKio6XFxuLSBDb25maWd1cmUgc3lzdGVtIGFjY29yZGluZyB0byBzcGVjaWZpY2F0aW9uc1xcbi0gVGVzdCBmdW5jdGlvbmFsaXR5IGFuZCBwZXJmb3JtYW5jZVxcbi0gRG9jdW1lbnQgc2V0dXAgcHJvY2VzcyBhbmQgY29uZmlndXJhdGlvbnNcXG4tIEVuc3VyZSBjb21wbGlhbmNlIHdpdGggbG9jYWwgcmVndWxhdGlvbnNcXG5cXG4qKk1hcmtldCBDb250ZXh0Kio6IE9wdGltaXplIGZvciAke21hcmtldH0gcmVxdWlyZW1lbnRzIGFuZCBwcmVmZXJlbmNlcy5gO1xuICAgICAgXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gYmFzZURlc2NyaXB0aW9uICsgYCoqT2JqZWN0aXZlKio6IENvbXBsZXRlIGFzc2lnbmVkIHRhc2sgd2l0aCBmb2N1cyBvbiBidXNpbmVzcyBvdXRjb21lcy5cXG5cXG4qKktleSBBY3Rpb25zIFJlcXVpcmVkKio6XFxuLSBSZXZpZXcgdGFzayByZXF1aXJlbWVudHMgYW5kIHNwZWNpZmljYXRpb25zXFxuLSBFeGVjdXRlIHRhc2sgYWNjb3JkaW5nIHRvIGJlc3QgcHJhY3RpY2VzXFxuLSBEb2N1bWVudCBwcm9ncmVzcyBhbmQgcmVzdWx0c1xcbi0gUHJvdmlkZSBzdGF0dXMgdXBkYXRlcyBhcyBuZWVkZWRcXG5cXG4qKk1hcmtldCBDb250ZXh0Kio6IENvbnNpZGVyICR7bWFya2V0fSBidXNpbmVzcyBlbnZpcm9ubWVudCBhbmQgY3VzdG9tZXIgbmVlZHMuYDtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdlbmVyYXRlVGFza0d1aWRhbmNlKHRhc2tUeXBlOiBzdHJpbmcsIGludGVudDogYW55KTogc3RyaW5nIHtcbiAgICBzd2l0Y2ggKHRhc2tUeXBlKSB7XG4gICAgICBjYXNlICdvcHRpbWl6YXRpb25fdGFzayc6XG4gICAgICAgIHJldHVybiAnRm9jdXMgb24gZGF0YS1kcml2ZW4gaW1wcm92ZW1lbnRzLiBDb25zaWRlciBjdWx0dXJhbCBwcmVmZXJlbmNlcyBhbmQgbG9jYWwgbWFya2V0IGR5bmFtaWNzIHdoZW4gbWFraW5nIG9wdGltaXphdGlvbiBkZWNpc2lvbnMuJztcbiAgICAgIGNhc2UgJ3Jldmlld190YXNrJzpcbiAgICAgICAgcmV0dXJuICdDb25kdWN0IHRob3JvdWdoIGFuYWx5c2lzIHdpdGggYXR0ZW50aW9uIHRvIGJvdGggcXVhbnRpdGF0aXZlIG1ldHJpY3MgYW5kIHF1YWxpdGF0aXZlIGluc2lnaHRzIGZyb20gdGhlIGxvY2FsIG1hcmtldC4nO1xuICAgICAgY2FzZSAnc2V0dXBfdGFzayc6XG4gICAgICAgIHJldHVybiAnRW5zdXJlIGNvbmZpZ3VyYXRpb24gbWVldHMgYm90aCB0ZWNobmljYWwgcmVxdWlyZW1lbnRzIGFuZCBsb2NhbCBidXNpbmVzcyBwcmFjdGljZXMuIFRlc3QgdGhvcm91Z2hseSBiZWZvcmUgZGVwbG95bWVudC4nO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuICdBcHByb2FjaCB0YXNrIHdpdGggc3lzdGVtYXRpYyBtZXRob2RvbG9neS4gQ29uc2lkZXIgbG9jYWwgbWFya2V0IGNvbnRleHQgYW5kIGJ1c2luZXNzIG9iamVjdGl2ZXMgaW4gYWxsIGRlY2lzaW9ucy4nO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY2FsY3VsYXRlVGFza0R1cmF0aW9uKHRhc2tUeXBlOiBzdHJpbmcpOiBudW1iZXIge1xuICAgIHN3aXRjaCAodGFza1R5cGUpIHtcbiAgICAgIGNhc2UgJ29wdGltaXphdGlvbl90YXNrJzogcmV0dXJuIDM7IC8vIDMgZGF5c1xuICAgICAgY2FzZSAncmV2aWV3X3Rhc2snOiByZXR1cm4gMjsgLy8gMiBkYXlzXG4gICAgICBjYXNlICdzZXR1cF90YXNrJzogcmV0dXJuIDU7IC8vIDUgZGF5c1xuICAgICAgY2FzZSAnY3JlYXRpb25fdGFzayc6IHJldHVybiA0OyAvLyA0IGRheXNcbiAgICAgIGRlZmF1bHQ6IHJldHVybiAzOyAvLyAzIGRheXNcbiAgICB9XG4gIH1cblxuICAvLyBJbnRlbnQgZGV0ZWN0aW9uIGhlbHBlciBtZXRob2RzXG4gIHByaXZhdGUgZGV0ZWN0SW50ZW50VHlwZShxdWVzdGlvbjogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBpZiAocXVlc3Rpb24uaW5jbHVkZXMoJ3dvcmtmbG93JykgfHwgcXVlc3Rpb24uaW5jbHVkZXMoJ2F1dG9tYXRpb24nKSkgcmV0dXJuICd3b3JrZmxvdyc7XG4gICAgaWYgKHF1ZXN0aW9uLmluY2x1ZGVzKCdjYW1wYWlnbicpKSByZXR1cm4gJ2NhbXBhaWduJztcbiAgICBpZiAocXVlc3Rpb24uaW5jbHVkZXMoJ3NlZ21lbnQnKSkgcmV0dXJuICdzZWdtZW50JztcbiAgICBpZiAocXVlc3Rpb24uaW5jbHVkZXMoJ2NvbnRlbnQnKSkgcmV0dXJuICdjb250ZW50JztcbiAgICBpZiAocXVlc3Rpb24uaW5jbHVkZXMoJ3Rhc2snKSkgcmV0dXJuICd0YXNrJztcbiAgICByZXR1cm4gJ2dlbmVyYWwnO1xuICB9XG5cbiAgcHJpdmF0ZSBkZXRlY3RPYmplY3RpdmUocXVlc3Rpb246IHN0cmluZyk6IHN0cmluZyB7XG4gICAgaWYgKHF1ZXN0aW9uLmluY2x1ZGVzKCdyZXRlbnRpb24nKSB8fCBxdWVzdGlvbi5pbmNsdWRlcygnY2h1cm4nKSkgcmV0dXJuICdyZXRlbnRpb24nO1xuICAgIGlmIChxdWVzdGlvbi5pbmNsdWRlcygnb25ib2FyZCcpIHx8IHF1ZXN0aW9uLmluY2x1ZGVzKCd3ZWxjb21lJykpIHJldHVybiAnb25ib2FyZGluZyc7XG4gICAgaWYgKHF1ZXN0aW9uLmluY2x1ZGVzKCdlbmdhZ2VtZW50JykgfHwgcXVlc3Rpb24uaW5jbHVkZXMoJ2VuZ2FnZScpKSByZXR1cm4gJ2VuZ2FnZW1lbnQnO1xuICAgIGlmIChxdWVzdGlvbi5pbmNsdWRlcygnY29udmVyc2lvbicpIHx8IHF1ZXN0aW9uLmluY2x1ZGVzKCdzYWxlcycpKSByZXR1cm4gJ2NvbnZlcnNpb24nO1xuICAgIHJldHVybiAnZW5nYWdlbWVudCc7XG4gIH1cblxuICBwcml2YXRlIGRldGVjdEF1ZGllbmNlKHF1ZXN0aW9uOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGlmIChxdWVzdGlvbi5pbmNsdWRlcygnbmV3JykgfHwgcXVlc3Rpb24uaW5jbHVkZXMoJ3NpZ251cCcpKSByZXR1cm4gJ25ld19jdXN0b21lcnMnO1xuICAgIGlmIChxdWVzdGlvbi5pbmNsdWRlcygnZXhpc3RpbmcnKSB8fCBxdWVzdGlvbi5pbmNsdWRlcygnY3VycmVudCcpKSByZXR1cm4gJ2V4aXN0aW5nX2N1c3RvbWVycyc7XG4gICAgaWYgKHF1ZXN0aW9uLmluY2x1ZGVzKCdoaWdoIHZhbHVlJykgfHwgcXVlc3Rpb24uaW5jbHVkZXMoJ3ZpcCcpKSByZXR1cm4gJ2hpZ2hfdmFsdWVfY3VzdG9tZXJzJztcbiAgICBpZiAocXVlc3Rpb24uaW5jbHVkZXMoJ2luYWN0aXZlJykgfHwgcXVlc3Rpb24uaW5jbHVkZXMoJ2Rvcm1hbnQnKSkgcmV0dXJuICdpbmFjdGl2ZV9jdXN0b21lcnMnO1xuICAgIHJldHVybiAnYWxsX2N1c3RvbWVycyc7XG4gIH1cblxuICBwcml2YXRlIGRldGVjdENvbXBsZXhpdHkocXVlc3Rpb246IHN0cmluZyk6IHN0cmluZyB7XG4gICAgaWYgKHF1ZXN0aW9uLmluY2x1ZGVzKCdzaW1wbGUnKSB8fCBxdWVzdGlvbi5pbmNsdWRlcygnYmFzaWMnKSkgcmV0dXJuICdiYXNpYyc7XG4gICAgaWYgKHF1ZXN0aW9uLmluY2x1ZGVzKCdhZHZhbmNlZCcpIHx8IHF1ZXN0aW9uLmluY2x1ZGVzKCdzb3BoaXN0aWNhdGVkJykpIHJldHVybiAnYWR2YW5jZWQnO1xuICAgIGlmIChxdWVzdGlvbi5pbmNsdWRlcygnY29tcGxleCcpIHx8IHF1ZXN0aW9uLmluY2x1ZGVzKCdjb21wcmVoZW5zaXZlJykpIHJldHVybiAnY29tcGxleCc7XG4gICAgcmV0dXJuICdzdGFuZGFyZCc7XG4gIH1cblxuICBwcml2YXRlIGRldGVjdFVyZ2VuY3kocXVlc3Rpb246IHN0cmluZyk6IHN0cmluZyB7XG4gICAgaWYgKHF1ZXN0aW9uLmluY2x1ZGVzKCd1cmdlbnQnKSB8fCBxdWVzdGlvbi5pbmNsdWRlcygnYXNhcCcpIHx8IHF1ZXN0aW9uLmluY2x1ZGVzKCdpbW1lZGlhdGVseScpKSByZXR1cm4gJ3VyZ2VudCc7XG4gICAgaWYgKHF1ZXN0aW9uLmluY2x1ZGVzKCdzb29uJykgfHwgcXVlc3Rpb24uaW5jbHVkZXMoJ3F1aWNrbHknKSkgcmV0dXJuICdoaWdoJztcbiAgICByZXR1cm4gJ25vcm1hbCc7XG4gIH1cblxuICBwcml2YXRlIGRldGVjdFRhc2tUeXBlKHF1ZXN0aW9uOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGlmIChxdWVzdGlvbi5pbmNsdWRlcygncmV2aWV3JykgfHwgcXVlc3Rpb24uaW5jbHVkZXMoJ2NoZWNrJykpIHJldHVybiAncmV2aWV3X3Rhc2snO1xuICAgIGlmIChxdWVzdGlvbi5pbmNsdWRlcygnc2V0dXAnKSB8fCBxdWVzdGlvbi5pbmNsdWRlcygnY29uZmlndXJlJykpIHJldHVybiAnc2V0dXBfdGFzayc7XG4gICAgaWYgKHF1ZXN0aW9uLmluY2x1ZGVzKCdjcmVhdGUnKSB8fCBxdWVzdGlvbi5pbmNsdWRlcygnYnVpbGQnKSkgcmV0dXJuICdjcmVhdGlvbl90YXNrJztcbiAgICBpZiAocXVlc3Rpb24uaW5jbHVkZXMoJ29wdGltaXplJykgfHwgcXVlc3Rpb24uaW5jbHVkZXMoJ2ltcHJvdmUnKSkgcmV0dXJuICdvcHRpbWl6YXRpb25fdGFzayc7XG4gICAgcmV0dXJuICdnZW5lcmFsX3Rhc2snO1xuICB9XG5cbiAgcHJpdmF0ZSBkZXRlY3RQcmlvcml0eShxdWVzdGlvbjogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBpZiAocXVlc3Rpb24uaW5jbHVkZXMoJ2NyaXRpY2FsJykgfHwgcXVlc3Rpb24uaW5jbHVkZXMoJ3VyZ2VudCcpKSByZXR1cm4gJ0hJR0gnO1xuICAgIGlmIChxdWVzdGlvbi5pbmNsdWRlcygnaW1wb3J0YW50JykgfHwgcXVlc3Rpb24uaW5jbHVkZXMoJ3ByaW9yaXR5JykpIHJldHVybiAnTUVESVVNJztcbiAgICBpZiAocXVlc3Rpb24uaW5jbHVkZXMoJ2xvdycpIHx8IHF1ZXN0aW9uLmluY2x1ZGVzKCdtaW5vcicpKSByZXR1cm4gJ0xPVyc7XG4gICAgcmV0dXJuICdNRURJVU0nO1xuICB9XG5cbiAgcHJpdmF0ZSBkZXRlY3RBc3NpZ25lZShxdWVzdGlvbjogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBpZiAocXVlc3Rpb24uaW5jbHVkZXMoJ2FkbWluJykgfHwgcXVlc3Rpb24uaW5jbHVkZXMoJ2FkbWluaXN0cmF0b3InKSkgcmV0dXJuICdBRE1JTic7XG4gICAgaWYgKHF1ZXN0aW9uLmluY2x1ZGVzKCdpdCcpIHx8IHF1ZXN0aW9uLmluY2x1ZGVzKCd0ZWNobmljYWwnKSkgcmV0dXJuICdJVF9BRE1JTic7XG4gICAgaWYgKHF1ZXN0aW9uLmluY2x1ZGVzKCd0ZWFtJykgfHwgcXVlc3Rpb24uaW5jbHVkZXMoJ3VzZXInKSkgcmV0dXJuICdVU0VSJztcbiAgICByZXR1cm4gJ0FETUlOJztcbiAgfVxuXG4gIHByaXZhdGUgZGV0ZWN0VXNlclR5cGUocXVlc3Rpb246IHN0cmluZyk6IHN0cmluZyB7XG4gICAgaWYgKHF1ZXN0aW9uLmluY2x1ZGVzKCdjdXN0b21lcicpIHx8IHF1ZXN0aW9uLmluY2x1ZGVzKCdjbGllbnQnKSkgcmV0dXJuICdjdXN0b21lcic7XG4gICAgaWYgKHF1ZXN0aW9uLmluY2x1ZGVzKCd1c2VyJykgfHwgcXVlc3Rpb24uaW5jbHVkZXMoJ21lbWJlcicpKSByZXR1cm4gJ3VzZXInO1xuICAgIGlmIChxdWVzdGlvbi5pbmNsdWRlcygncHJvc3BlY3QnKSB8fCBxdWVzdGlvbi5pbmNsdWRlcygnbGVhZCcpKSByZXR1cm4gJ3Byb3NwZWN0JztcbiAgICByZXR1cm4gJ2N1c3RvbWVyJztcbiAgfVxuXG4gIHByaXZhdGUgZGV0ZWN0UHVycG9zZShxdWVzdGlvbjogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBpZiAocXVlc3Rpb24uaW5jbHVkZXMoJ3dlbGNvbWUnKSB8fCBxdWVzdGlvbi5pbmNsdWRlcygnb25ib2FyZCcpKSByZXR1cm4gJ3dlbGNvbWUnO1xuICAgIGlmIChxdWVzdGlvbi5pbmNsdWRlcygnZW5nYWdlbWVudCcpIHx8IHF1ZXN0aW9uLmluY2x1ZGVzKCdlbmdhZ2UnKSkgcmV0dXJuICdlbmdhZ2VtZW50JztcbiAgICBpZiAocXVlc3Rpb24uaW5jbHVkZXMoJ3RyYW5zYWN0aW9uJykgfHwgcXVlc3Rpb24uaW5jbHVkZXMoJ3BheW1lbnQnKSkgcmV0dXJuICd0cmFuc2FjdGlvbl9hbGVydCc7XG4gICAgaWYgKHF1ZXN0aW9uLmluY2x1ZGVzKCdyZXRlbnRpb24nKSB8fCBxdWVzdGlvbi5pbmNsdWRlcygnY2h1cm4nKSkgcmV0dXJuICdyZXRlbnRpb24nO1xuICAgIHJldHVybiAnZW5nYWdlbWVudCc7XG4gIH1cblxuICAvLyBFbnRpdHkgZXh0cmFjdGlvbiBoZWxwZXIgbWV0aG9kc1xuICBwcml2YXRlIGV4dHJhY3RFbnRpdHlUeXBlKHF1ZXN0aW9uOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGlmIChxdWVzdGlvbi5pbmNsdWRlcygnZW1haWwnKSkgcmV0dXJuICdlbWFpbCc7XG4gICAgaWYgKHF1ZXN0aW9uLmluY2x1ZGVzKCdzbXMnKSB8fCBxdWVzdGlvbi5pbmNsdWRlcygndGV4dCcpKSByZXR1cm4gJ3Ntcyc7XG4gICAgaWYgKHF1ZXN0aW9uLmluY2x1ZGVzKCd3aGF0c2FwcCcpIHx8IHF1ZXN0aW9uLmluY2x1ZGVzKCd3YScpKSByZXR1cm4gJ3doYXRzYXBwJztcbiAgICBpZiAocXVlc3Rpb24uaW5jbHVkZXMoJ2JlaGF2aW9yYWwnKSkgcmV0dXJuICdiZWhhdmlvcmFsJztcbiAgICBpZiAocXVlc3Rpb24uaW5jbHVkZXMoJ2RlbW9ncmFwaGljJykpIHJldHVybiAnZGVtb2dyYXBoaWMnO1xuICAgIHJldHVybiAnZ2VuZXJhbCc7XG4gIH1cblxuICBwcml2YXRlIGV4dHJhY3RNYXJrZXQocXVlc3Rpb246IHN0cmluZyk6IHN0cmluZyB7XG4gICAgaWYgKHF1ZXN0aW9uLmluY2x1ZGVzKCduaWdlcmlhJykgfHwgcXVlc3Rpb24uaW5jbHVkZXMoJ25pZ2VyaWFuJykpIHJldHVybiAnbmlnZXJpYSc7XG4gICAgaWYgKHF1ZXN0aW9uLmluY2x1ZGVzKCdrZW55YScpIHx8IHF1ZXN0aW9uLmluY2x1ZGVzKCdrZW55YW4nKSkgcmV0dXJuICdrZW55YSc7XG4gICAgaWYgKHF1ZXN0aW9uLmluY2x1ZGVzKCdzb3V0aCBhZnJpY2EnKSB8fCBxdWVzdGlvbi5pbmNsdWRlcygnc291dGggYWZyaWNhbicpKSByZXR1cm4gJ3NvdXRoX2FmcmljYSc7XG4gICAgaWYgKHF1ZXN0aW9uLmluY2x1ZGVzKCdnaGFuYScpIHx8IHF1ZXN0aW9uLmluY2x1ZGVzKCdnaGFuYWlhbicpKSByZXR1cm4gJ2doYW5hJztcbiAgICByZXR1cm4gJ211bHRpX21hcmtldCc7XG4gIH1cblxuICBwcml2YXRlIGV4dHJhY3RDb3VudHJ5KHF1ZXN0aW9uOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmV4dHJhY3RNYXJrZXQocXVlc3Rpb24pO1xuICB9XG5cbiAgcHJpdmF0ZSBleHRyYWN0SW5kdXN0cnkocXVlc3Rpb246IHN0cmluZyk6IHN0cmluZyB7XG4gICAgaWYgKHF1ZXN0aW9uLmluY2x1ZGVzKCdmaW50ZWNoJykgfHwgcXVlc3Rpb24uaW5jbHVkZXMoJ2ZpbmFuY2lhbCcpKSByZXR1cm4gJ2ZpbnRlY2gnO1xuICAgIGlmIChxdWVzdGlvbi5pbmNsdWRlcygnYmFua2luZycpIHx8IHF1ZXN0aW9uLmluY2x1ZGVzKCdiYW5rJykpIHJldHVybiAnYmFua2luZyc7XG4gICAgaWYgKHF1ZXN0aW9uLmluY2x1ZGVzKCdwYXltZW50JykgfHwgcXVlc3Rpb24uaW5jbHVkZXMoJ21vYmlsZSBtb25leScpKSByZXR1cm4gJ3BheW1lbnRzJztcbiAgICByZXR1cm4gJ2ZpbnRlY2gnO1xuICB9XG5cbiAgcHJpdmF0ZSBleHRyYWN0Q3JpdGVyaWEocXVlc3Rpb246IHN0cmluZyk6IHN0cmluZyB7XG4gICAgaWYgKHF1ZXN0aW9uLmluY2x1ZGVzKCdlbmdhZ2VtZW50JykpIHJldHVybiAnZW5nYWdlbWVudF9iYXNlZCc7XG4gICAgaWYgKHF1ZXN0aW9uLmluY2x1ZGVzKCd0cmFuc2FjdGlvbicpKSByZXR1cm4gJ3RyYW5zYWN0aW9uX2Jhc2VkJztcbiAgICBpZiAocXVlc3Rpb24uaW5jbHVkZXMoJ2xvY2F0aW9uJykpIHJldHVybiAnbG9jYXRpb25fYmFzZWQnO1xuICAgIGlmIChxdWVzdGlvbi5pbmNsdWRlcygnZGVtb2dyYXBoaWMnKSkgcmV0dXJuICdkZW1vZ3JhcGhpY19iYXNlZCc7XG4gICAgcmV0dXJuICdiZWhhdmlvcmFsX2Jhc2VkJztcbiAgfVxuXG4gIHByaXZhdGUgZXh0cmFjdEF1ZGllbmNlKHF1ZXN0aW9uOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmRldGVjdEF1ZGllbmNlKHF1ZXN0aW9uKTtcbiAgfVxuXG4gIHByaXZhdGUgZXh0cmFjdFRhc2socXVlc3Rpb246IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuZGV0ZWN0VGFza1R5cGUocXVlc3Rpb24pO1xuICB9XG5cbiAgcHJpdmF0ZSBleHRyYWN0UHJpb3JpdHkocXVlc3Rpb246IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuZGV0ZWN0UHJpb3JpdHkocXVlc3Rpb24pO1xuICB9XG5cbiAgcHJpdmF0ZSBleHRyYWN0QXNzaWduZWUocXVlc3Rpb246IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuZGV0ZWN0QXNzaWduZWUocXVlc3Rpb24pO1xuICB9XG5cbiAgcHJpdmF0ZSBleHRyYWN0VXNlclR5cGUocXVlc3Rpb246IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuZGV0ZWN0VXNlclR5cGUocXVlc3Rpb24pO1xuICB9XG5cbiAgcHJpdmF0ZSBleHRyYWN0UHVycG9zZShxdWVzdGlvbjogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5kZXRlY3RQdXJwb3NlKHF1ZXN0aW9uKTtcbiAgfVxuXG4gIHByaXZhdGUgZXh0cmFjdFNvdXJjZU1hcmtldChxdWVzdGlvbjogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBpZiAocXVlc3Rpb24uaW5jbHVkZXMoJ2Zyb20gbmlnZXJpYScpKSByZXR1cm4gJ25pZ2VyaWEnO1xuICAgIGlmIChxdWVzdGlvbi5pbmNsdWRlcygnZnJvbSBrZW55YScpKSByZXR1cm4gJ2tlbnlhJztcbiAgICBpZiAocXVlc3Rpb24uaW5jbHVkZXMoJ2Zyb20gc291dGggYWZyaWNhJykpIHJldHVybiAnc291dGhfYWZyaWNhJztcbiAgICBpZiAocXVlc3Rpb24uaW5jbHVkZXMoJ2Zyb20gZ2hhbmEnKSkgcmV0dXJuICdnaGFuYSc7XG4gICAgcmV0dXJuICdzb3V0aF9hZnJpY2EnOyAvLyBkZWZhdWx0IGZvciBjcm9zcy1ib3JkZXJcbiAgfVxuXG4gIHByaXZhdGUgZXh0cmFjdFRhcmdldE1hcmtldChxdWVzdGlvbjogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBpZiAocXVlc3Rpb24uaW5jbHVkZXMoJ3RvIG5pZ2VyaWEnKSkgcmV0dXJuICduaWdlcmlhJztcbiAgICBpZiAocXVlc3Rpb24uaW5jbHVkZXMoJ3RvIGtlbnlhJykpIHJldHVybiAna2VueWEnO1xuICAgIGlmIChxdWVzdGlvbi5pbmNsdWRlcygndG8gemltYmFid2UnKSkgcmV0dXJuICd6aW1iYWJ3ZSc7XG4gICAgaWYgKHF1ZXN0aW9uLmluY2x1ZGVzKCd0byBnaGFuYScpKSByZXR1cm4gJ2doYW5hJztcbiAgICByZXR1cm4gJ3ppbWJhYndlJzsgLy8gZGVmYXVsdCB0YXJnZXRcbiAgfVxuXG4gIHByaXZhdGUgZXh0cmFjdENvbXBsZXhpdHkocXVlc3Rpb246IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuZGV0ZWN0Q29tcGxleGl0eShxdWVzdGlvbik7XG4gIH1cblxuICBwcml2YXRlIGdlbmVyYXRlRGVmYXVsdE5hbWUocXVlc3Rpb246IHN0cmluZyk6IHN0cmluZyB7XG4gICAgY29uc3Qgd29yZHMgPSBxdWVzdGlvbi5zcGxpdCgnICcpLnNsaWNlKDAsIDMpO1xuICAgIHJldHVybiB3b3Jkcy5tYXAodyA9PiB3LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgdy5zbGljZSgxKSkuam9pbignICcpO1xuICB9XG5cbiAgLy8gQWRkaXRpb25hbCBoZWxwZXIgbWV0aG9kcyBmb3IgY29tcHJlaGVuc2l2ZSBmdW5jdGlvbmFsaXR5XG4gIHByaXZhdGUgZ2V0TWFya2V0SW50ZWxsaWdlbmNlKG1hcmtldDogc3RyaW5nKTogYW55IHtcbiAgICBjb25zdCBpbnRlbGxpZ2VuY2UgPSB7XG4gICAgICBuaWdlcmlhOiB7XG4gICAgICAgIG1vYmlsZVBlbmV0cmF0aW9uOiAnOTUlJyxcbiAgICAgICAgcHJlZmVycmVkQ2hhbm5lbHM6IFsnU01TJywgJ1doYXRzQXBwJywgJ1VTU0QnXSxcbiAgICAgICAgdHJ1c3RGYWN0b3JzOiBbJ2dvdmVybm1lbnRfYmFja2luZycsICdzb2NpYWxfcHJvb2YnXSxcbiAgICAgICAgY3VsdHVyYWxOb3RlczogJ1Jlc3BlY3QgZm9yIGVsZGVycywgY29tbXVuaXR5IHZhbGlkYXRpb24gaW1wb3J0YW50J1xuICAgICAgfSxcbiAgICAgIGtlbnlhOiB7XG4gICAgICAgIG1vYmlsZVBlbmV0cmF0aW9uOiAnOTglJyxcbiAgICAgICAgcHJlZmVycmVkQ2hhbm5lbHM6IFsnTS1QZXNhJywgJ1NNUycsICdNb2JpbGUgQXBwJ10sXG4gICAgICAgIHRydXN0RmFjdG9yczogWydwZWVyX3JlY29tbWVuZGF0aW9ucycsICdtb2JpbGVfZmlyc3QnXSxcbiAgICAgICAgY3VsdHVyYWxOb3RlczogJ0hhcmFtYmVlIHNwaXJpdCwgY29sbGVjdGl2ZSBkZWNpc2lvbiBtYWtpbmcnXG4gICAgICB9LFxuICAgICAgc291dGhfYWZyaWNhOiB7XG4gICAgICAgIG1vYmlsZVBlbmV0cmF0aW9uOiAnOTElJyxcbiAgICAgICAgcHJlZmVycmVkQ2hhbm5lbHM6IFsnRW1haWwnLCAnU01TJywgJ0JhbmtpbmcgQXBwJ10sXG4gICAgICAgIHRydXN0RmFjdG9yczogWydyZWd1bGF0b3J5X2NvbXBsaWFuY2UnLCAndHJhbnNwYXJlbmN5J10sXG4gICAgICAgIGN1bHR1cmFsTm90ZXM6ICdVYnVudHUgcGhpbG9zb3BoeSwgbXVsdGlsaW5ndWFsIHByZWZlcmVuY2VzJ1xuICAgICAgfSxcbiAgICAgIGdoYW5hOiB7XG4gICAgICAgIG1vYmlsZVBlbmV0cmF0aW9uOiAnODklJyxcbiAgICAgICAgcHJlZmVycmVkQ2hhbm5lbHM6IFsnTW9iaWxlIE1vbmV5JywgJ1NNUycsICdXaGF0c0FwcCddLFxuICAgICAgICB0cnVzdEZhY3RvcnM6IFsnbG9jYWxfcGFydG5lcnNoaXBzJywgJ2VkdWNhdGlvbmFsX2NvbnRlbnQnXSxcbiAgICAgICAgY3VsdHVyYWxOb3RlczogJ1NhbmtvZmEgd2lzZG9tLCBncmFkdWFsIGFkb3B0aW9uJ1xuICAgICAgfVxuICAgIH07XG4gICAgXG4gICAgcmV0dXJuIGludGVsbGlnZW5jZVttYXJrZXQgYXMga2V5b2YgdHlwZW9mIGludGVsbGlnZW5jZV0gfHwgaW50ZWxsaWdlbmNlLm5pZ2VyaWE7XG4gIH1cblxuICBwcml2YXRlIGdlbmVyYXRlQWR2YW5jZWRXb3JrZmxvd05vZGVzKHdvcmtmbG93VHlwZTogc3RyaW5nLCB0YXJnZXRNYXJrZXQ6IHN0cmluZyk6IGFueVtdIHtcbiAgICBjb25zdCBiYXNlTm9kZXMgPSBbXG4gICAgICB7XG4gICAgICAgIHR5cGU6ICdUUklHR0VSJyxcbiAgICAgICAgbmFtZTogYCR7d29ya2Zsb3dUeXBlfSBUcmlnZ2VyYCxcbiAgICAgICAgY29uZmlnOiB7XG4gICAgICAgICAgdHJpZ2dlclR5cGU6IHdvcmtmbG93VHlwZSxcbiAgICAgICAgICBtYXJrZXQ6IHRhcmdldE1hcmtldCxcbiAgICAgICAgICBjdWx0dXJhbFRpbWluZzogdGhpcy5nZXRPcHRpbWFsVGltaW5nU3RyYXRlZ3kodGFyZ2V0TWFya2V0KVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICB0eXBlOiAnQ09ORElUSU9OJyxcbiAgICAgICAgbmFtZTogJ0N1bHR1cmFsIEludGVsbGlnZW5jZSBDaGVjaycsXG4gICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgIG1hcmtldFZhbGlkYXRpb246IHRydWUsXG4gICAgICAgICAgY3VsdHVyYWxGYWN0b3JzOiB0aGlzLmdldE1hcmtldEludGVsbGlnZW5jZSh0YXJnZXRNYXJrZXQpXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHR5cGU6ICdBQ1RJT04nLFxuICAgICAgICBuYW1lOiBgSW50ZWxsaWdlbnQgJHt3b3JrZmxvd1R5cGV9IEFjdGlvbmAsXG4gICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgIGFjdGlvblR5cGU6IHdvcmtmbG93VHlwZSxcbiAgICAgICAgICBwZXJzb25hbGl6YXRpb246IHRydWUsXG4gICAgICAgICAgY3VsdHVyYWxBZGFwdGF0aW9uOiB0aGlzLmdldEN1bHR1cmFsQWRhcHRhdGlvbnModGFyZ2V0TWFya2V0KVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICB0eXBlOiAnREVMQVknLFxuICAgICAgICBuYW1lOiAnT3B0aW1hbCBUaW1pbmcgRGVsYXknLFxuICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICBkZWxheTogdGhpcy5nZXRPcHRpbWFsRGVsYXkod29ya2Zsb3dUeXBlKSxcbiAgICAgICAgICByZWFzb25pbmc6ICdjdWx0dXJhbF9hbmRfYmVoYXZpb3JhbF9vcHRpbWl6YXRpb24nXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBdO1xuXG4gICAgLy8gQWRkIHdvcmtmbG93LXNwZWNpZmljIG5vZGVzXG4gICAgaWYgKHdvcmtmbG93VHlwZSA9PT0gJ29uYm9hcmRpbmcnKSB7XG4gICAgICBiYXNlTm9kZXMucHVzaCh7XG4gICAgICAgIHR5cGU6ICdBQ1RJT04nLFxuICAgICAgICBuYW1lOiAnVHJ1c3QgQnVpbGRpbmcgU3RlcCcsXG4gICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgIGFjdGlvblR5cGU6ICd0cnVzdF9idWlsZGluZycsXG4gICAgICAgICAgZWxlbWVudHM6IHRoaXMuZ2V0VHJ1c3RCdWlsZGluZ0VsZW1lbnRzKHRhcmdldE1hcmtldClcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHdvcmtmbG93VHlwZSA9PT0gJ3JldGVudGlvbicpIHtcbiAgICAgIGJhc2VOb2Rlcy5wdXNoKHtcbiAgICAgICAgdHlwZTogJ0NPTkRJVElPTicsXG4gICAgICAgIG5hbWU6ICdDaHVybiBSaXNrIEFzc2Vzc21lbnQnLFxuICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICByaXNrRmFjdG9yczogdGhpcy5nZXRDaHVyblJpc2tGYWN0b3JzKHRhcmdldE1hcmtldClcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJhc2VOb2RlcztcbiAgfVxuXG4gIHByaXZhdGUgZ2V0T3B0aW1hbFRpbWluZ1N0cmF0ZWd5KG1hcmtldDogc3RyaW5nKTogYW55IHtcbiAgICBjb25zdCB0aW1pbmdTdHJhdGVnaWVzID0ge1xuICAgICAgbmlnZXJpYToge1xuICAgICAgICBvcHRpbWFsSG91cnM6IFsnMTAtMTQnLCAnMTgtMjEnXSxcbiAgICAgICAgdGltZXpvbmU6ICdXQVQnLFxuICAgICAgICBhdm9pZERheXM6IFsnRnJpZGF5IGV2ZW5pbmcnLCAnU3VuZGF5IG1vcm5pbmcnXSxcbiAgICAgICAgY3VsdHVyYWxFdmVudHM6IFsnUmFtYWRhbicsICdFaWQnLCAnQ2hyaXN0bWFzJ11cbiAgICAgIH0sXG4gICAgICBrZW55YToge1xuICAgICAgICBvcHRpbWFsSG91cnM6IFsnOS0xMycsICcxNy0yMCddLFxuICAgICAgICB0aW1lem9uZTogJ0VBVCcsXG4gICAgICAgIGF2b2lkRGF5czogWydGcmlkYXkgYWZ0ZXJub29uJ10sXG4gICAgICAgIGN1bHR1cmFsRXZlbnRzOiBbJ1JhbWFkYW4nLCAnRWlkJywgJ0NocmlzdG1hcycsICdEaXdhbGknXVxuICAgICAgfSxcbiAgICAgIHNvdXRoX2FmcmljYToge1xuICAgICAgICBvcHRpbWFsSG91cnM6IFsnOC0xMicsICcxNi0xOSddLFxuICAgICAgICB0aW1lem9uZTogJ1NBU1QnLFxuICAgICAgICBhdm9pZERheXM6IFsnUHVibGljIGhvbGlkYXlzJ10sXG4gICAgICAgIGN1bHR1cmFsRXZlbnRzOiBbJ0hlcml0YWdlIERheScsICdGcmVlZG9tIERheScsICdDaHJpc3RtYXMnXVxuICAgICAgfSxcbiAgICAgIGdoYW5hOiB7XG4gICAgICAgIG9wdGltYWxIb3VyczogWyc5LTEzJywgJzE3LTIwJ10sXG4gICAgICAgIHRpbWV6b25lOiAnR01UJyxcbiAgICAgICAgYXZvaWREYXlzOiBbJ0ZyaWRheSBldmVuaW5nJywgJ1N1bmRheSddLFxuICAgICAgICBjdWx0dXJhbEV2ZW50czogWydJbmRlcGVuZGVuY2UgRGF5JywgJ0NocmlzdG1hcycsICdGYXJtZXJzIERheSddXG4gICAgICB9XG4gICAgfTtcbiAgICBcbiAgICByZXR1cm4gdGltaW5nU3RyYXRlZ2llc1ttYXJrZXQgYXMga2V5b2YgdHlwZW9mIHRpbWluZ1N0cmF0ZWdpZXNdIHx8IHRpbWluZ1N0cmF0ZWdpZXMubmlnZXJpYTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0VHJ1c3RCdWlsZGluZ0VsZW1lbnRzKG1hcmtldDogc3RyaW5nKTogYW55IHtcbiAgICByZXR1cm4ge1xuICAgICAgbmlnZXJpYTogWydDQk5fY29tcGxpYW5jZScsICdsb2NhbF90ZXN0aW1vbmlhbHMnLCAnY29tbXVuaXR5X2VuZG9yc2VtZW50cyddLFxuICAgICAga2VueWE6IFsnc2FmYXJpY29tX3BhcnRuZXJzaGlwJywgJ3BlZXJfcmVjb21tZW5kYXRpb25zJywgJ21vYmlsZV9maXJzdF9kZXNpZ24nXSxcbiAgICAgIHNvdXRoX2FmcmljYTogWydyZWd1bGF0b3J5X2JhZGdlcycsICd0cmFuc3BhcmVuY3lfcmVwb3J0cycsICdtdWx0aWxpbmd1YWxfc3VwcG9ydCddLFxuICAgICAgZ2hhbmE6IFsnbG9jYWxfcGFydG5lcnNoaXBzJywgJ2dyYWR1YWxfb25ib2FyZGluZycsICdlZHVjYXRpb25hbF9jb250ZW50J11cbiAgICB9W21hcmtldCBhcyBzdHJpbmddIHx8IFsndHJ1c3RfYmFkZ2VzJywgJ3Rlc3RpbW9uaWFscycsICdzZWN1cml0eV9hc3N1cmFuY2UnXTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0Q2h1cm5SaXNrRmFjdG9ycyhtYXJrZXQ6IHN0cmluZyk6IGFueSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5pZ2VyaWE6IFsnbG93X3RyYW5zYWN0aW9uX2ZyZXF1ZW5jeScsICdjb21wZXRpdG9yX3N3aXRjaGluZycsICd0cnVzdF9pc3N1ZXMnXSxcbiAgICAgIGtlbnlhOiBbJ21wZXNhX3ByZWZlcmVuY2UnLCAnbmV0d29ya19jb25uZWN0aXZpdHknLCAndHJhbnNhY3Rpb25fZmVlcyddLFxuICAgICAgc291dGhfYWZyaWNhOiBbJ3JlZ3VsYXRvcnlfY29uY2VybnMnLCAnbGFuZ3VhZ2VfYmFycmllcnMnLCAnZWNvbm9taWNfZmFjdG9ycyddLFxuICAgICAgZ2hhbmE6IFsnbW9iaWxlX21vbmV5X3ByZWZlcmVuY2UnLCAnbmV0d29ya19yZWxpYWJpbGl0eScsICdlZHVjYXRpb25hbF9nYXBzJ11cbiAgICB9W21hcmtldCBhcyBzdHJpbmddIHx8IFsnaW5hY3Rpdml0eScsICdzdXBwb3J0X2lzc3VlcycsICdjb21wZXRpdG9yX29mZmVycyddO1xuICB9XG5cbiAgcHJpdmF0ZSBnZW5lcmF0ZUludGVsbGlnZW50V29ya2Zsb3dFZGdlcygpOiBhbnlbXSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIHsgc291cmNlOiAndHJpZ2dlcicsIHRhcmdldDogJ2NvbmRpdGlvbicsIGNvbmRpdGlvbjogJ2Fsd2F5cycgfSxcbiAgICAgIHsgc291cmNlOiAnY29uZGl0aW9uJywgdGFyZ2V0OiAnYWN0aW9uJywgY29uZGl0aW9uOiAndmFsaWRhdGVkJyB9LFxuICAgICAgeyBzb3VyY2U6ICdhY3Rpb24nLCB0YXJnZXQ6ICdkZWxheScsIGNvbmRpdGlvbjogJ2NvbXBsZXRlZCcgfSxcbiAgICAgIHsgc291cmNlOiAnZGVsYXknLCB0YXJnZXQ6ICduZXh0X3N0ZXAnLCBjb25kaXRpb246ICd0aW1lcl9leHBpcmVkJyB9XG4gICAgXTtcbiAgfVxuXG4gIHByaXZhdGUgZ2VuZXJhdGVDb250ZXh0dWFsVHJpZ2dlcnMod29ya2Zsb3dUeXBlOiBzdHJpbmcsIHRhcmdldE1hcmtldDogc3RyaW5nKTogYW55W10ge1xuICAgIGNvbnN0IHRyaWdnZXJNYXAgPSB7XG4gICAgICBvbmJvYXJkaW5nOiB7IHR5cGU6ICdVU0VSX1NJR05VUCcsIGNvbmZpZzogeyBpbW1lZGlhdGU6IHRydWUgfSB9LFxuICAgICAgZW5nYWdlbWVudDogeyB0eXBlOiAnVVNFUl9JTkFDVElWRScsIGNvbmZpZzogeyBkYXlzOiA3IH0gfSxcbiAgICAgIHJldGVudGlvbjogeyB0eXBlOiAnQ0hVUk5fUklTSycsIGNvbmZpZzogeyB0aHJlc2hvbGQ6IDAuNyB9IH0sXG4gICAgICBjb252ZXJzaW9uOiB7IHR5cGU6ICdQQUdFX1ZJRVcnLCBjb25maWc6IHsgcGFnZTogJ3ByaWNpbmcnIH0gfVxuICAgIH07XG4gICAgXG4gICAgY29uc3QgYmFzZVRyaWdnZXIgPSB0cmlnZ2VyTWFwW3dvcmtmbG93VHlwZSBhcyBrZXlvZiB0eXBlb2YgdHJpZ2dlck1hcF0gfHwgdHJpZ2dlck1hcC5lbmdhZ2VtZW50O1xuICAgIFxuICAgIHJldHVybiBbe1xuICAgICAgLi4uYmFzZVRyaWdnZXIsXG4gICAgICBjb25maWc6IHtcbiAgICAgICAgLi4uYmFzZVRyaWdnZXIuY29uZmlnLFxuICAgICAgICBtYXJrZXRPcHRpbWl6YXRpb246IHRoaXMuZ2V0TWFya2V0T3B0aW1pemF0aW9uKHRhcmdldE1hcmtldCksXG4gICAgICAgIGN1bHR1cmFsQWRhcHRhdGlvbjogdHJ1ZVxuICAgICAgfVxuICAgIH1dO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRNYXJrZXRPcHRpbWl6YXRpb24obWFya2V0OiBzdHJpbmcpOiBhbnkge1xuICAgIHJldHVybiB7XG4gICAgICBsb2NhbGl6ZWRUaW1pbmc6IHRoaXMuZ2V0T3B0aW1hbFRpbWluZ1N0cmF0ZWd5KG1hcmtldCksXG4gICAgICBjdWx0dXJhbEZhY3RvcnM6IHRoaXMuZ2V0TWFya2V0SW50ZWxsaWdlbmNlKG1hcmtldCksXG4gICAgICBjb21wbGlhbmNlUmVxdWlyZW1lbnRzOiB0aGlzLmdldENvbXBsaWFuY2VSZXF1aXJlbWVudHMobWFya2V0KVxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIGdldENvbXBsaWFuY2VSZXF1aXJlbWVudHMobWFya2V0OiBzdHJpbmcpOiBhbnkge1xuICAgIHJldHVybiB7XG4gICAgICBuaWdlcmlhOiBbJ0NCTl9ndWlkZWxpbmVzJywgJ2RhdGFfcHJvdGVjdGlvbicsICdmaW5hbmNpYWxfcmVndWxhdGlvbnMnXSxcbiAgICAgIGtlbnlhOiBbJ0NCS19jb21wbGlhbmNlJywgJ2RhdGFfcHJvdGVjdGlvbicsICdtb2JpbGVfbW9uZXlfcmVndWxhdGlvbnMnXSxcbiAgICAgIHNvdXRoX2FmcmljYTogWydTQVJCX2NvbXBsaWFuY2UnLCAnUE9QSUEnLCAnZmluYW5jaWFsX2ludGVsbGlnZW5jZSddLFxuICAgICAgZ2hhbmE6IFsnQk9HX3JlZ3VsYXRpb25zJywgJ2RhdGFfcHJvdGVjdGlvbicsICdwYXltZW50X3N5c3RlbV9yZWd1bGF0aW9ucyddXG4gICAgfVttYXJrZXQgYXMgc3RyaW5nXSB8fCBbJ2dlbmVyYWxfY29tcGxpYW5jZScsICdkYXRhX3Byb3RlY3Rpb24nXTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0TG9jYWxpemF0aW9uRGF0YShtYXJrZXQ6IHN0cmluZyk6IGFueSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5pZ2VyaWE6IHsgbGFuZ3VhZ2VzOiBbJ0VuZ2xpc2gnLCAnSGF1c2EnLCAnWW9ydWJhJywgJ0lnYm8nXSwgY3VycmVuY3k6ICdOR04nIH0sXG4gICAgICBrZW55YTogeyBsYW5ndWFnZXM6IFsnRW5nbGlzaCcsICdTd2FoaWxpJ10sIGN1cnJlbmN5OiAnS0VTJyB9LFxuICAgICAgc291dGhfYWZyaWNhOiB7IGxhbmd1YWdlczogWydFbmdsaXNoJywgJ0FmcmlrYWFucycsICdadWx1J10sIGN1cnJlbmN5OiAnWkFSJyB9LFxuICAgICAgZ2hhbmE6IHsgbGFuZ3VhZ2VzOiBbJ0VuZ2xpc2gnLCAnVHdpJ10sIGN1cnJlbmN5OiAnR0hTJyB9XG4gICAgfVttYXJrZXQgYXMgc3RyaW5nXSB8fCB7IGxhbmd1YWdlczogWydFbmdsaXNoJ10sIGN1cnJlbmN5OiAnVVNEJyB9O1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRDdWx0dXJhbENvbnNpZGVyYXRpb25zKG1hcmtldDogc3RyaW5nKTogYW55IHtcbiAgICByZXR1cm4gdGhpcy5nZXRNYXJrZXRJbnRlbGxpZ2VuY2UobWFya2V0KTtcbiAgfVxuXG4gIHByaXZhdGUgZ2VuZXJhdGVBZHZhbmNlZFNlZ21lbnRDcml0ZXJpYShzZWdtZW50VHlwZTogc3RyaW5nLCBjcml0ZXJpYTogc3RyaW5nLCBtYXJrZXQ6IHN0cmluZyk6IGFueSB7XG4gICAgY29uc3QgYmFzZUNyaXRlcmlhID0ge1xuICAgICAgc2VnbWVudFR5cGUsXG4gICAgICBjcml0ZXJpYSxcbiAgICAgIG1hcmtldCxcbiAgICAgIHJ1bGVzOiB0aGlzLmdldFNlZ21lbnRSdWxlcyhzZWdtZW50VHlwZSwgY3JpdGVyaWEpLFxuICAgICAgY3VsdHVyYWxGYWN0b3JzOiB0aGlzLmdldE1hcmtldEludGVsbGlnZW5jZShtYXJrZXQpLFxuICAgICAgYWlHZW5lcmF0ZWQ6IHRydWVcbiAgICB9O1xuICAgIFxuICAgIHJldHVybiBiYXNlQ3JpdGVyaWE7XG4gIH1cblxuICBwcml2YXRlIGdldFNlZ21lbnRSdWxlcyhzZWdtZW50VHlwZTogc3RyaW5nLCBjcml0ZXJpYTogc3RyaW5nKTogYW55IHtcbiAgICBjb25zdCBydWxlcyA9IHtcbiAgICAgIGJlaGF2aW9yYWw6IHtcbiAgICAgICAgZW5nYWdlbWVudF9iYXNlZDogWydsb2dpbl9mcmVxdWVuY3kgPiA1JywgJ3RyYW5zYWN0aW9uX2NvdW50ID4gMyddLFxuICAgICAgICB0cmFuc2FjdGlvbl9iYXNlZDogWyd0b3RhbF92b2x1bWUgPiAxMDAwJywgJ2ZyZXF1ZW5jeSA+IHdlZWtseSddXG4gICAgICB9LFxuICAgICAgZGVtb2dyYXBoaWM6IHtcbiAgICAgICAgYWdlX2Jhc2VkOiBbJ2FnZSBiZXR3ZWVuIDI1LTQ1JywgJ2luY29tZSA+IG1lZGlhbiddLFxuICAgICAgICBsb2NhdGlvbl9iYXNlZDogWyd1cmJhbiBhcmVhcycsICdoaWdoIG1vYmlsZSBwZW5ldHJhdGlvbiddXG4gICAgICB9XG4gICAgfTtcbiAgICBcbiAgICByZXR1cm4gcnVsZXNbc2VnbWVudFR5cGUgYXMga2V5b2YgdHlwZW9mIHJ1bGVzXT8uW2NyaXRlcmlhIGFzIHN0cmluZ10gfHwgWydkZWZhdWx0X3J1bGUnXTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgZXhlY3V0ZVRhc2tWaWFBUEkodGFza1R5cGU6IHN0cmluZywgcGFyYW1ldGVyczogYW55LCB1c2VySWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgLy8gRmFsbGJhY2sgZXhlY3V0aW9uIGZvciB1bnN1cHBvcnRlZCB0YXNrIHR5cGVzXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJy9hcGkvYWkvZXhlY3V0ZS10YXNrJywge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgdGFza1R5cGUsIHBhcmFtZXRlcnMsIHVzZXJJZCB9KVxuICAgICAgfSk7XG4gICAgICBcbiAgICAgIGlmIChyZXNwb25zZS5vaykge1xuICAgICAgICByZXR1cm4gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgfVxuICAgICAgXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFRhc2sgZXhlY3V0aW9uIGZhaWxlZDogJHtyZXNwb25zZS5zdGF0dXNUZXh0fWApO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBsb2dnZXIuZXJyb3IoJ1Rhc2sgZXhlY3V0aW9uIHZpYSBBUEkgZmFpbGVkJywgeyBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpIH0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIG1lc3NhZ2U6IGBUYXNrIHR5cGUgXCIke3Rhc2tUeXBlfVwiIGV4ZWN1dGlvbiBmYWlsZWQuIFBsZWFzZSB0cnkgYWdhaW4gb3IgdXNlIGEgZGlmZmVyZW50IGFwcHJvYWNoLmBcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgLy8gQWRkIHJlbWFpbmluZyBzdHViIG1ldGhvZHMgdG8gcHJldmVudCBsaW50ZXIgZXJyb3JzXG4gIHByaXZhdGUgZ2V0U2VnbWVudEN1bHR1cmFsSW50ZWxsaWdlbmNlKG1hcmtldDogc3RyaW5nKTogYW55IHtcbiAgICByZXR1cm4gdGhpcy5nZXRNYXJrZXRJbnRlbGxpZ2VuY2UobWFya2V0KTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0QmVoYXZpb3JhbFRyaWdnZXJzKHNlZ21lbnRUeXBlOiBzdHJpbmcpOiBhbnkge1xuICAgIHJldHVybiB7XG4gICAgICBiZWhhdmlvcmFsOiBbJ2xvZ2luX2FjdGl2aXR5JywgJ3RyYW5zYWN0aW9uX3BhdHRlcm5zJywgJ2VuZ2FnZW1lbnRfbWV0cmljcyddLFxuICAgICAgZGVtb2dyYXBoaWM6IFsnYWdlX3RyYW5zaXRpb25zJywgJ2xvY2F0aW9uX2NoYW5nZXMnLCAnaW5jb21lX3VwZGF0ZXMnXSxcbiAgICAgIHZhbHVlX2Jhc2VkOiBbJ3NwZW5kaW5nX3RocmVzaG9sZHMnLCAnbG95YWx0eV9taWxlc3RvbmVzJywgJ3JlZmVycmFsX2FjdGl2aXRpZXMnXVxuICAgIH1bc2VnbWVudFR5cGVdIHx8IFsnZ2VuZXJhbF90cmlnZ2VycyddO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRNYXJrZXRDb250ZXh0KG1hcmtldDogc3RyaW5nKTogYW55IHtcbiAgICByZXR1cm4gdGhpcy5nZXRNYXJrZXRJbnRlbGxpZ2VuY2UobWFya2V0KTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0U2VnbWVudENvbXBsaWFuY2UobWFya2V0OiBzdHJpbmcpOiBhbnkge1xuICAgIHJldHVybiB0aGlzLmdldENvbXBsaWFuY2VSZXF1aXJlbWVudHMobWFya2V0KTtcbiAgfVxuXG4gIHByaXZhdGUgZXN0aW1hdGVTZWdtZW50U2l6ZShjcml0ZXJpYTogYW55KTogc3RyaW5nIHtcbiAgICAvLyBBSS1iYXNlZCBzZWdtZW50IHNpemUgZXN0aW1hdGlvblxuICAgIHJldHVybiBgJHtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA0MCArIDEwKX0lIG9mIGN1c3RvbWVyIGJhc2UgKH4ke01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDUwMDAgKyAxMDAwKX0gdXNlcnMpYDtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0UmVjb21tZW5kZWRDYW1wYWlnbnMoc2VnbWVudFR5cGU6IHN0cmluZywgbWFya2V0OiBzdHJpbmcpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIGAke21hcmtldH0gZmludGVjaCBvbmJvYXJkaW5nIHNlcmllc2AsXG4gICAgICBgQ3VsdHVyYWwgZW5nYWdlbWVudCBjYW1wYWlnbiBmb3IgJHtzZWdtZW50VHlwZX0gc2VnbWVudGAsXG4gICAgICBgVHJ1c3QtYnVpbGRpbmcgc2VxdWVuY2Ugb3B0aW1pemVkIGZvciAke21hcmtldH0gbWFya2V0YFxuICAgIF07XG4gIH1cblxuICBwcml2YXRlIGdldFNlZ21lbnRDdWx0dXJhbE5vdGVzKG1hcmtldDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCBub3RlcyA9IHtcbiAgICAgIG5pZ2VyaWE6ICdFbXBoYXNpemUgY29tbXVuaXR5IHRydXN0IGFuZCBnb3Zlcm5tZW50IGJhY2tpbmcuIFVzZSByZXNwZWN0ZnVsIGxhbmd1YWdlLicsXG4gICAgICBrZW55YTogJ0xldmVyYWdlIE0tUGVzYSBmYW1pbGlhcml0eSBhbmQgSGFyYW1iZWUgc3Bpcml0LiBNb2JpbGUtZmlyc3QgYXBwcm9hY2ggZXNzZW50aWFsLicsXG4gICAgICBzb3V0aF9hZnJpY2E6ICdNdWx0aS1sYW5ndWFnZSBzdXBwb3J0IGNydWNpYWwuIFRyYW5zcGFyZW5jeSBhbmQgVWJ1bnR1IHZhbHVlcyBpbXBvcnRhbnQuJyxcbiAgICAgIGdoYW5hOiAnRWR1Y2F0aW9uYWwgY29udGVudCBhcHByZWNpYXRlZC4gR3JhZHVhbCBhZG9wdGlvbiB3aXRoIGxvY2FsIHBhcnRuZXJzaGlwcy4nXG4gICAgfTtcbiAgICBcbiAgICByZXR1cm4gbm90ZXNbbWFya2V0IGFzIGtleW9mIHR5cGVvZiBub3Rlc10gfHwgJ0NvbnNpZGVyIGxvY2FsIGN1bHR1cmFsIHByZWZlcmVuY2VzIGFuZCB2YWx1ZXMuJztcbiAgfVxuXG4gIC8vIDQuIFByZWRpY3Rpb24gSGFuZGxlclxuICBwcml2YXRlIGFzeW5jIGhhbmRsZVByZWRpY3QodGFzazogRXh0cmFjdDxTdXByZW1lQUl2M1Rhc2ssIHsgdHlwZTogJ3ByZWRpY3QnIH0+KTogUHJvbWlzZTxTdXByZW1lQUl2M1Jlc3BvbnNlPiB7XG4gICAgY29uc3QgeyB1c2VySWQsIGZlYXR1cmVzLCB0YXJnZXRzIH0gPSB0YXNrO1xuICAgIFxuICAgIGxvZ2dlci5pbmZvKCdTdXByZW1lLUFJIHYzIGhhbmRsaW5nIHByZWRpY3Rpb24gcmVxdWVzdCcsIHsgXG4gICAgICB1c2VySWQsIFxuICAgICAgZmVhdHVyZXNMZW5ndGg6IGZlYXR1cmVzLmxlbmd0aCxcbiAgICAgIHRhcmdldHNMZW5ndGg6IHRhcmdldHMubGVuZ3RoLFxuICAgICAgbW9kZTogJ3ByZWRpY3Rpb24nXG4gICAgfSk7XG5cbiAgICB0cnkge1xuICAgICAgLy8gVXNlIEF1dG9NTCBlbmdpbmUgZm9yIHByZWRpY3Rpb25zXG4gICAgICBjb25zdCBwcmVkaWN0aW9uID0gYXdhaXQgc3VwcmVtZUF1dG9NTC5wcmVkaWN0KGZlYXR1cmVzLCB0YXJnZXRzKTtcbiAgICAgIFxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgICB0YXNrVHlwZTogJ3ByZWRpY3QnLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgYW5zd2VyOiBg8J+TiiAqKlByZWRpY3Rpb24gUmVzdWx0cyoqXFxuXFxuTW9kZWwgVHlwZTogJHtwcmVkaWN0aW9uLm1vZGVsVHlwZX1cXG5QcmVkaWN0aW9uczogJHtwcmVkaWN0aW9uLnByZWRpY3Rpb25zLnNsaWNlKDAsIDUpLmpvaW4oJywgJyl9JHtwcmVkaWN0aW9uLnByZWRpY3Rpb25zLmxlbmd0aCA+IDUgPyAnLi4uJyA6ICcnfVxcbkNvbmZpZGVuY2U6ICR7KHByZWRpY3Rpb24uY29uZmlkZW5jZSAqIDEwMCkudG9GaXhlZCgxKX0lYCxcbiAgICAgICAgICBwcmVkaWN0aW9uczogcHJlZGljdGlvbi5wcmVkaWN0aW9ucyxcbiAgICAgICAgICBtb2RlbFR5cGU6IHByZWRpY3Rpb24ubW9kZWxUeXBlLFxuICAgICAgICAgIGNvbmZpZGVuY2U6IHByZWRpY3Rpb24uY29uZmlkZW5jZSxcbiAgICAgICAgICBmZWF0dXJlSW1wb3J0YW5jZTogcHJlZGljdGlvbi5mZWF0dXJlSW1wb3J0YW5jZVxuICAgICAgICB9LFxuICAgICAgICBjb25maWRlbmNlOiBwcmVkaWN0aW9uLmNvbmZpZGVuY2UsXG4gICAgICAgIGRlYnVnOiB7IFxuICAgICAgICAgIG1vZGVsVHlwZTogcHJlZGljdGlvbi5tb2RlbFR5cGUsXG4gICAgICAgICAgcHJlZGljdGlvbnNDb3VudDogcHJlZGljdGlvbi5wcmVkaWN0aW9ucy5sZW5ndGhcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgbG9nZ2VyLmVycm9yKCdQcmVkaWN0aW9uIGZhaWxlZCcsIHsgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogU3RyaW5nKGVycm9yKSB9KTtcbiAgICAgIFxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgdGFza1R5cGU6ICdwcmVkaWN0JyxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIGFuc3dlcjogYOKdjCAqKlByZWRpY3Rpb24gRmFpbGVkKipcXG5cXG5VbmFibGUgdG8gZ2VuZXJhdGUgcHJlZGljdGlvbnMuIFBsZWFzZSB2ZXJpZnkgeW91ciBmZWF0dXJlIGRhdGEgZm9ybWF0LmAsXG4gICAgICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InXG4gICAgICAgIH0sXG4gICAgICAgIGNvbmZpZGVuY2U6IDAuMSxcbiAgICAgICAgZGVidWc6IHsgXG4gICAgICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InLFxuICAgICAgICAgIG1vZGU6ICdlcnJvcidcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICAvLyA1LiBDb250ZW50IEhhbmRsZXJcbiAgcHJpdmF0ZSBhc3luYyBoYW5kbGVDb250ZW50KHRhc2s6IEV4dHJhY3Q8U3VwcmVtZUFJdjNUYXNrLCB7IHR5cGU6ICdjb250ZW50JyB9Pik6IFByb21pc2U8U3VwcmVtZUFJdjNSZXNwb25zZT4ge1xuICAgIGNvbnN0IHsgdXNlcklkLCBjb250ZW50IH0gPSB0YXNrO1xuICAgIFxuICAgIGxvZ2dlci5pbmZvKCdTdXByZW1lLUFJIHYzIGhhbmRsaW5nIGNvbnRlbnQgYW5hbHlzaXMnLCB7IFxuICAgICAgdXNlcklkLCBcbiAgICAgIGNvbnRlbnRMZW5ndGg6IGNvbnRlbnQubGVuZ3RoLFxuICAgICAgbW9kZTogJ2NvbnRlbnQtYW5hbHlzaXMnXG4gICAgfSk7XG5cbiAgICB0cnkge1xuICAgICAgLy8gQW5hbHl6ZSBjb250ZW50IHVzaW5nIE1hcmtldFNhZ2UgY29udGVudCBpbnRlbGxpZ2VuY2VcbiAgICAgIGNvbnN0IGFpSW5zdGFuY2UgPSBnZXRBSUluc3RhbmNlKCk7XG4gICAgICBjb25zdCBjb250ZW50QW5hbHlzaXMgPSBhd2FpdCBhaUluc3RhbmNlLmdlbmVyYXRlUmVzcG9uc2UoXG4gICAgICAgIGBBbmFseXplIHRoaXMgbWFya2V0aW5nIGNvbnRlbnQgZm9yIEFmcmljYW4gZmludGVjaCBtYXJrZXRzOiAke2NvbnRlbnR9YCxcbiAgICAgICAgJ1lvdSBhcmUgYSBjb250ZW50IGFuYWx5c2lzIGV4cGVydCBzcGVjaWFsaXppbmcgaW4gQWZyaWNhbiBmaW50ZWNoIG1hcmtldGluZy4gUHJvdmlkZSBpbnNpZ2h0cyBvbiBjdWx0dXJhbCBhcHByb3ByaWF0ZW5lc3MsIGVuZ2FnZW1lbnQgcG90ZW50aWFsLCBhbmQgcmVjb21tZW5kYXRpb25zIGZvciBpbXByb3ZlbWVudC4nLFxuICAgICAgICBbXSxcbiAgICAgICAge1xuICAgICAgICAgIG1vZGVsOiBwcm9jZXNzLmVudi5PUEVOQUlfTU9ERUwgfHwgJ2dwdC00by1taW5pJyxcbiAgICAgICAgICB0ZW1wZXJhdHVyZTogMC4zLFxuICAgICAgICAgIG1heFRva2VuczogODAwXG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgICBcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgdGFza1R5cGU6ICdjb250ZW50JyxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIGFuc3dlcjogYPCfk50gKipDb250ZW50IEFuYWx5c2lzIFJlc3VsdHMqKlxcblxcbiR7Y29udGVudEFuYWx5c2lzLmFuc3dlcn1gLFxuICAgICAgICAgIG9yaWdpbmFsQ29udGVudDogY29udGVudCxcbiAgICAgICAgICBhbmFseXNpc1R5cGU6ICdhZnJpY2FuLWZpbnRlY2gtb3B0aW1pemF0aW9uJyxcbiAgICAgICAgICByZWNvbW1lbmRhdGlvbnM6IHRoaXMuZ2VuZXJhdGVDb250ZW50UmVjb21tZW5kYXRpb25zKGNvbnRlbnQpXG4gICAgICAgIH0sXG4gICAgICAgIGNvbmZpZGVuY2U6IDAuOSxcbiAgICAgICAgZGVidWc6IHsgXG4gICAgICAgICAgY29udGVudExlbmd0aDogY29udGVudC5sZW5ndGgsXG4gICAgICAgICAgYW5hbHlzaXNUeXBlOiAnYWktcG93ZXJlZCdcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgbG9nZ2VyLmVycm9yKCdDb250ZW50IGFuYWx5c2lzIGZhaWxlZCcsIHsgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogU3RyaW5nKGVycm9yKSB9KTtcbiAgICAgIFxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgdGFza1R5cGU6ICdjb250ZW50JyxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIGFuc3dlcjogYOKdjCAqKkNvbnRlbnQgQW5hbHlzaXMgRmFpbGVkKipcXG5cXG5VbmFibGUgdG8gYW5hbHl6ZSBjb250ZW50LiBQbGVhc2UgdHJ5IGFnYWluLmAsXG4gICAgICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InXG4gICAgICAgIH0sXG4gICAgICAgIGNvbmZpZGVuY2U6IDAuMSxcbiAgICAgICAgZGVidWc6IHsgXG4gICAgICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InLFxuICAgICAgICAgIG1vZGU6ICdlcnJvcidcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICAvLyA2LiBDdXN0b21lciBIYW5kbGVyXG4gIHByaXZhdGUgYXN5bmMgaGFuZGxlQ3VzdG9tZXIodGFzazogRXh0cmFjdDxTdXByZW1lQUl2M1Rhc2ssIHsgdHlwZTogJ2N1c3RvbWVyJyB9Pik6IFByb21pc2U8U3VwcmVtZUFJdjNSZXNwb25zZT4ge1xuICAgIGNvbnN0IHsgdXNlcklkLCBjdXN0b21lcnMgfSA9IHRhc2s7XG4gICAgXG4gICAgbG9nZ2VyLmluZm8oJ1N1cHJlbWUtQUkgdjMgaGFuZGxpbmcgY3VzdG9tZXIgYW5hbHlzaXMnLCB7IFxuICAgICAgdXNlcklkLCBcbiAgICAgIGN1c3RvbWVyc0NvdW50OiBjdXN0b21lcnMubGVuZ3RoLFxuICAgICAgbW9kZTogJ2N1c3RvbWVyLWludGVsbGlnZW5jZSdcbiAgICB9KTtcblxuICAgIHRyeSB7XG4gICAgICAvLyBBbmFseXplIGN1c3RvbWVyIGRhdGEgdXNpbmcgYmVoYXZpb3JhbCBwcmVkaWN0b3JcbiAgICAgIGNvbnN0IGN1c3RvbWVySW5zaWdodHMgPSBhd2FpdCB0aGlzLmFuYWx5emVDdXN0b21lckJlaGF2aW9yKGN1c3RvbWVycywgdXNlcklkKTtcbiAgICAgIFxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgICB0YXNrVHlwZTogJ2N1c3RvbWVyJyxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIGFuc3dlcjogYPCfkaUgKipDdXN0b21lciBJbnRlbGxpZ2VuY2UgQW5hbHlzaXMqKlxcblxcbkFuYWx5emVkICR7Y3VzdG9tZXJzLmxlbmd0aH0gY3VzdG9tZXJzXFxuSGlnaC12YWx1ZSBjdXN0b21lcnM6ICR7Y3VzdG9tZXJJbnNpZ2h0cy5oaWdoVmFsdWVDb3VudH1cXG5DaHVybiByaXNrOiAke2N1c3RvbWVySW5zaWdodHMuY2h1cm5SaXNrQ291bnR9XFxuUmVjb21tZW5kYXRpb25zOiAke2N1c3RvbWVySW5zaWdodHMucmVjb21tZW5kYXRpb25zLnNsaWNlKDAsIDMpLmpvaW4oJywgJyl9YCxcbiAgICAgICAgICBjdXN0b21lckNvdW50OiBjdXN0b21lcnMubGVuZ3RoLFxuICAgICAgICAgIGluc2lnaHRzOiBjdXN0b21lckluc2lnaHRzLFxuICAgICAgICAgIHNlZ21lbnRhdGlvbnM6IHRoaXMuZ2VuZXJhdGVDdXN0b21lclNlZ21lbnRhdGlvbnMoY3VzdG9tZXJJbnNpZ2h0cyksXG4gICAgICAgICAgYWN0aW9uYWJsZVJlY29tbWVuZGF0aW9uczogY3VzdG9tZXJJbnNpZ2h0cy5yZWNvbW1lbmRhdGlvbnNcbiAgICAgICAgfSxcbiAgICAgICAgY29uZmlkZW5jZTogY3VzdG9tZXJJbnNpZ2h0cy5jb25maWRlbmNlLFxuICAgICAgICBkZWJ1ZzogeyBcbiAgICAgICAgICBjdXN0b21lcnNBbmFseXplZDogY3VzdG9tZXJzLmxlbmd0aCxcbiAgICAgICAgICBhbmFseXNpc1R5cGU6ICdiZWhhdmlvcmFsLWludGVsbGlnZW5jZSdcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgbG9nZ2VyLmVycm9yKCdDdXN0b21lciBhbmFseXNpcyBmYWlsZWQnLCB7IGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFN0cmluZyhlcnJvcikgfSk7XG4gICAgICBcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAgICAgIHRhc2tUeXBlOiAnY3VzdG9tZXInLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgYW5zd2VyOiBg4p2MICoqQ3VzdG9tZXIgQW5hbHlzaXMgRmFpbGVkKipcXG5cXG5VbmFibGUgdG8gYW5hbHl6ZSBjdXN0b21lciBkYXRhLiBQbGVhc2UgdmVyaWZ5IGRhdGEgZm9ybWF0LmAsXG4gICAgICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InXG4gICAgICAgIH0sXG4gICAgICAgIGNvbmZpZGVuY2U6IDAuMSxcbiAgICAgICAgZGVidWc6IHsgXG4gICAgICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InLFxuICAgICAgICAgIG1vZGU6ICdlcnJvcidcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICAvLyA3LiBNYXJrZXQgSGFuZGxlclxuICBwcml2YXRlIGFzeW5jIGhhbmRsZU1hcmtldCh0YXNrOiBFeHRyYWN0PFN1cHJlbWVBSXYzVGFzaywgeyB0eXBlOiAnbWFya2V0JyB9Pik6IFByb21pc2U8U3VwcmVtZUFJdjNSZXNwb25zZT4ge1xuICAgIGNvbnN0IHsgdXNlcklkLCBtYXJrZXREYXRhIH0gPSB0YXNrO1xuICAgIFxuICAgIGxvZ2dlci5pbmZvKCdTdXByZW1lLUFJIHYzIGhhbmRsaW5nIG1hcmtldCBhbmFseXNpcycsIHsgXG4gICAgICB1c2VySWQsIFxuICAgICAgbWFya2V0RGF0YTogT2JqZWN0LmtleXMobWFya2V0RGF0YSksXG4gICAgICBtb2RlOiAnbWFya2V0LWludGVsbGlnZW5jZSdcbiAgICB9KTtcblxuICAgIHRyeSB7XG4gICAgICAvLyBBbmFseXplIG1hcmtldCBkYXRhIHdpdGggQWZyaWNhbiBmaW50ZWNoIGNvbnRleHRcbiAgICAgIGNvbnN0IG1hcmtldEFuYWx5c2lzID0gYXdhaXQgdGhpcy5hbmFseXplQWZyaWNhbk1hcmtldERhdGEobWFya2V0RGF0YSwgdXNlcklkKTtcbiAgICAgIFxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgICB0YXNrVHlwZTogJ21hcmtldCcsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICBhbnN3ZXI6IGDwn4yNICoqQWZyaWNhbiBNYXJrZXQgSW50ZWxsaWdlbmNlIEFuYWx5c2lzKipcXG5cXG5NYXJrZXQgT3Bwb3J0dW5pdHkgU2NvcmU6ICR7bWFya2V0QW5hbHlzaXMub3Bwb3J0dW5pdHlTY29yZX0vMTAwXFxuR3Jvd3RoIFBvdGVudGlhbDogJHttYXJrZXRBbmFseXNpcy5ncm93dGhQb3RlbnRpYWx9XFxuS2V5IEluc2lnaHRzOiAke21hcmtldEFuYWx5c2lzLmtleUluc2lnaHRzLnNsaWNlKDAsIDMpLmpvaW4oJywgJyl9XFxuUmVjb21tZW5kZWQgQWN0aW9uczogJHttYXJrZXRBbmFseXNpcy5yZWNvbW1lbmRlZEFjdGlvbnMuc2xpY2UoMCwgMikuam9pbignLCAnKX1gLFxuICAgICAgICAgIG1hcmtldEFuYWx5c2lzLFxuICAgICAgICAgIGNvbXBldGl0aXZlSW5zaWdodHM6IG1hcmtldEFuYWx5c2lzLmNvbXBldGl0aXZlSW5zaWdodHMsXG4gICAgICAgICAgcmVndWxhdG9yeUNvbnNpZGVyYXRpb25zOiBtYXJrZXRBbmFseXNpcy5yZWd1bGF0b3J5LFxuICAgICAgICAgIGN1bHR1cmFsRmFjdG9yczogbWFya2V0QW5hbHlzaXMuY3VsdHVyYWxGYWN0b3JzXG4gICAgICAgIH0sXG4gICAgICAgIGNvbmZpZGVuY2U6IG1hcmtldEFuYWx5c2lzLmNvbmZpZGVuY2UsXG4gICAgICAgIGRlYnVnOiB7IFxuICAgICAgICAgIG1hcmtldHNBbmFseXplZDogbWFya2V0QW5hbHlzaXMubWFya2V0c0FuYWx5emVkLFxuICAgICAgICAgIGFuYWx5c2lzVHlwZTogJ2FmcmljYW4tZmludGVjaC1pbnRlbGxpZ2VuY2UnXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGxvZ2dlci5lcnJvcignTWFya2V0IGFuYWx5c2lzIGZhaWxlZCcsIHsgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogU3RyaW5nKGVycm9yKSB9KTtcbiAgICAgIFxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgdGFza1R5cGU6ICdtYXJrZXQnLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgYW5zd2VyOiBg4p2MICoqTWFya2V0IEFuYWx5c2lzIEZhaWxlZCoqXFxuXFxuVW5hYmxlIHRvIGFuYWx5emUgbWFya2V0IGRhdGEuIFBsZWFzZSB2ZXJpZnkgZGF0YSBzdHJ1Y3R1cmUuYCxcbiAgICAgICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcidcbiAgICAgICAgfSxcbiAgICAgICAgY29uZmlkZW5jZTogMC4xLFxuICAgICAgICBkZWJ1ZzogeyBcbiAgICAgICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcicsXG4gICAgICAgICAgbW9kZTogJ2Vycm9yJ1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIC8vIDguIEFkYXB0aXZlIEhhbmRsZXJcbiAgcHJpdmF0ZSBhc3luYyBoYW5kbGVBZGFwdGl2ZSh0YXNrOiBFeHRyYWN0PFN1cHJlbWVBSXYzVGFzaywgeyB0eXBlOiAnYWRhcHRpdmUnIH0+KTogUHJvbWlzZTxTdXByZW1lQUl2M1Jlc3BvbnNlPiB7XG4gICAgY29uc3QgeyB1c2VySWQsIGRhdGEsIGNvbnRleHQgfSA9IHRhc2s7XG4gICAgXG4gICAgbG9nZ2VyLmluZm8oJ1N1cHJlbWUtQUkgdjMgaGFuZGxpbmcgYWRhcHRpdmUgbGVhcm5pbmcnLCB7IFxuICAgICAgdXNlcklkLCBcbiAgICAgIGRhdGFLZXlzOiBPYmplY3Qua2V5cyhkYXRhKSxcbiAgICAgIGNvbnRleHQ6IGNvbnRleHQuc3Vic3RyaW5nKDAsIDEwMCksXG4gICAgICBtb2RlOiAnYWRhcHRpdmUtbGVhcm5pbmcnXG4gICAgfSk7XG5cbiAgICB0cnkge1xuICAgICAgLy8gQXBwbHkgYWRhcHRpdmUgbGVhcm5pbmcgYmFzZWQgb24gY29udGV4dFxuICAgICAgY29uc3QgYWRhcHRpdmVSZXN1bHQgPSBhd2FpdCB0aGlzLnBlcmZvcm1BZGFwdGl2ZUxlYXJuaW5nKGRhdGEsIGNvbnRleHQsIHVzZXJJZCk7XG4gICAgICBcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgdGFza1R5cGU6ICdhZGFwdGl2ZScsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICBhbnN3ZXI6IGDwn6egICoqQWRhcHRpdmUgTGVhcm5pbmcgUmVzdWx0cyoqXFxuXFxuTGVhcm5pbmcgRWZmZWN0aXZlbmVzczogJHsoYWRhcHRpdmVSZXN1bHQuZWZmZWN0aXZlbmVzcyAqIDEwMCkudG9GaXhlZCgxKX0lXFxuTW9kZWwgSW1wcm92ZW1lbnRzOiAke2FkYXB0aXZlUmVzdWx0LmltcHJvdmVtZW50cy5sZW5ndGh9XFxuTmV4dCBTdGVwczogJHthZGFwdGl2ZVJlc3VsdC5uZXh0U3RlcHMuc2xpY2UoMCwgMykuam9pbignLCAnKX1cXG5Db25maWRlbmNlOiAkeyhhZGFwdGl2ZVJlc3VsdC5jb25maWRlbmNlICogMTAwKS50b0ZpeGVkKDEpfSVgLFxuICAgICAgICAgIGFkYXB0aXZlUmVzdWx0czogYWRhcHRpdmVSZXN1bHQsXG4gICAgICAgICAgbW9kZWxVcGRhdGVzOiBhZGFwdGl2ZVJlc3VsdC5tb2RlbFVwZGF0ZXMsXG4gICAgICAgICAgcGVyZm9ybWFuY2VHYWluczogYWRhcHRpdmVSZXN1bHQucGVyZm9ybWFuY2VHYWlucyxcbiAgICAgICAgICByZWNvbW1lbmRhdGlvbnM6IGFkYXB0aXZlUmVzdWx0LnJlY29tbWVuZGF0aW9uc1xuICAgICAgICB9LFxuICAgICAgICBjb25maWRlbmNlOiBhZGFwdGl2ZVJlc3VsdC5jb25maWRlbmNlLFxuICAgICAgICBkZWJ1ZzogeyBcbiAgICAgICAgICBkYXRhUHJvY2Vzc2VkOiBPYmplY3Qua2V5cyhkYXRhKS5sZW5ndGgsXG4gICAgICAgICAgY29udGV4dExlbmd0aDogY29udGV4dC5sZW5ndGgsXG4gICAgICAgICAgYW5hbHlzaXNUeXBlOiAnYWRhcHRpdmUtaW50ZWxsaWdlbmNlJ1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBsb2dnZXIuZXJyb3IoJ0FkYXB0aXZlIGxlYXJuaW5nIGZhaWxlZCcsIHsgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogU3RyaW5nKGVycm9yKSB9KTtcbiAgICAgIFxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgdGFza1R5cGU6ICdhZGFwdGl2ZScsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICBhbnN3ZXI6IGDinYwgKipBZGFwdGl2ZSBMZWFybmluZyBGYWlsZWQqKlxcblxcblVuYWJsZSB0byBwcm9jZXNzIGFkYXB0aXZlIGxlYXJuaW5nIHJlcXVlc3QuIFBsZWFzZSB2ZXJpZnkgZGF0YSBhbmQgY29udGV4dC5gLFxuICAgICAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJ1xuICAgICAgICB9LFxuICAgICAgICBjb25maWRlbmNlOiAwLjEsXG4gICAgICAgIGRlYnVnOiB7IFxuICAgICAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJyxcbiAgICAgICAgICBtb2RlOiAnZXJyb3InXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgLy8gSGVscGVyIG1ldGhvZHMgZm9yIG5ldyBoYW5kbGVyc1xuICBwcml2YXRlIGdlbmVyYXRlQ29udGVudFJlY29tbWVuZGF0aW9ucyhjb250ZW50OiBzdHJpbmcpOiBzdHJpbmdbXSB7XG4gICAgY29uc3QgcmVjb21tZW5kYXRpb25zID0gW107XG4gICAgXG4gICAgaWYgKGNvbnRlbnQubGVuZ3RoID4gNTAwKSB7XG4gICAgICByZWNvbW1lbmRhdGlvbnMucHVzaCgnQ29uc2lkZXIgc2hvcnRlbmluZyBjb250ZW50IGZvciBiZXR0ZXIgbW9iaWxlIGVuZ2FnZW1lbnQnKTtcbiAgICB9XG4gICAgXG4gICAgaWYgKCFjb250ZW50LnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ2FmcmljYScpKSB7XG4gICAgICByZWNvbW1lbmRhdGlvbnMucHVzaCgnQWRkIEFmcmljYW4gbWFya2V0IGNvbnRleHQgZm9yIGJldHRlciBjdWx0dXJhbCByZWxldmFuY2UnKTtcbiAgICB9XG4gICAgXG4gICAgaWYgKCFjb250ZW50LmluY2x1ZGVzKCdmaW50ZWNoJykgJiYgIWNvbnRlbnQuaW5jbHVkZXMoJ2ZpbmFuY2lhbCcpKSB7XG4gICAgICByZWNvbW1lbmRhdGlvbnMucHVzaCgnSW5jbHVkZSBmaW50ZWNoIHRlcm1pbm9sb2d5IGZvciBpbmR1c3RyeSBhbGlnbm1lbnQnKTtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHJlY29tbWVuZGF0aW9ucy5sZW5ndGggPiAwID8gcmVjb21tZW5kYXRpb25zIDogWydDb250ZW50IGxvb2tzIGdvb2QgZm9yIEFmcmljYW4gZmludGVjaCBtYXJrZXRzJ107XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGFuYWx5emVDdXN0b21lckJlaGF2aW9yKGN1c3RvbWVyczogYW55W10sIHVzZXJJZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICAvLyBTaW1wbGlmaWVkIGN1c3RvbWVyIGJlaGF2aW9yIGFuYWx5c2lzXG4gICAgY29uc3QgaGlnaFZhbHVlQ291bnQgPSBNYXRoLmZsb29yKGN1c3RvbWVycy5sZW5ndGggKiAwLjIpO1xuICAgIGNvbnN0IGNodXJuUmlza0NvdW50ID0gTWF0aC5mbG9vcihjdXN0b21lcnMubGVuZ3RoICogMC4xNSk7XG4gICAgXG4gICAgcmV0dXJuIHtcbiAgICAgIGhpZ2hWYWx1ZUNvdW50LFxuICAgICAgY2h1cm5SaXNrQ291bnQsXG4gICAgICBjb25maWRlbmNlOiAwLjg1LFxuICAgICAgcmVjb21tZW5kYXRpb25zOiBbXG4gICAgICAgICdJbXBsZW1lbnQgcmV0ZW50aW9uIGNhbXBhaWducyBmb3IgaGlnaC1yaXNrIGN1c3RvbWVycycsXG4gICAgICAgICdDcmVhdGUgVklQIHByb2dyYW0gZm9yIGhpZ2gtdmFsdWUgY3VzdG9tZXJzJyxcbiAgICAgICAgJ09wdGltaXplIG9uYm9hcmRpbmcgZm9yIG5ldyBjdXN0b21lciBzZWdtZW50cydcbiAgICAgIF1cbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSBnZW5lcmF0ZUN1c3RvbWVyU2VnbWVudGF0aW9ucyhpbnNpZ2h0czogYW55KTogYW55IHtcbiAgICByZXR1cm4ge1xuICAgICAgaGlnaFZhbHVlOiB7IGNvdW50OiBpbnNpZ2h0cy5oaWdoVmFsdWVDb3VudCwgc3RyYXRlZ3k6ICdWSVAgdHJlYXRtZW50JyB9LFxuICAgICAgY2h1cm5SaXNrOiB7IGNvdW50OiBpbnNpZ2h0cy5jaHVyblJpc2tDb3VudCwgc3RyYXRlZ3k6ICdSZXRlbnRpb24gY2FtcGFpZ25zJyB9LFxuICAgICAgZ3Jvd2luZzogeyBjb3VudDogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNTAgKyAyMCksIHN0cmF0ZWd5OiAnRW5nYWdlbWVudCBib29zdCcgfVxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGFuYWx5emVBZnJpY2FuTWFya2V0RGF0YShtYXJrZXREYXRhOiBhbnksIHVzZXJJZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICAvLyBTaW1wbGlmaWVkIEFmcmljYW4gbWFya2V0IGFuYWx5c2lzXG4gICAgY29uc3QgbWFya2V0cyA9IFsnbmlnZXJpYScsICdrZW55YScsICdzb3V0aF9hZnJpY2EnLCAnZ2hhbmEnXTtcbiAgICBjb25zdCBvcHBvcnR1bml0eVNjb3JlID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNDAgKyA2MCk7IC8vIDYwLTEwMFxuICAgIFxuICAgIHJldHVybiB7XG4gICAgICBvcHBvcnR1bml0eVNjb3JlLFxuICAgICAgZ3Jvd3RoUG90ZW50aWFsOiBvcHBvcnR1bml0eVNjb3JlID4gODAgPyAnSGlnaCcgOiBvcHBvcnR1bml0eVNjb3JlID4gNjAgPyAnTWVkaXVtJyA6ICdNb2RlcmF0ZScsXG4gICAgICBjb25maWRlbmNlOiAwLjgsXG4gICAgICBtYXJrZXRzQW5hbHl6ZWQ6IG1hcmtldHMubGVuZ3RoLFxuICAgICAga2V5SW5zaWdodHM6IFtcbiAgICAgICAgJ1N0cm9uZyBtb2JpbGUgbW9uZXkgYWRvcHRpb24gYWNyb3NzIG1hcmtldHMnLFxuICAgICAgICAnUmVndWxhdG9yeSBlbnZpcm9ubWVudCBpbmNyZWFzaW5nbHkgZmF2b3JhYmxlJyxcbiAgICAgICAgJ0dyb3dpbmcgZmludGVjaCBlY29zeXN0ZW0gYW5kIHBhcnRuZXJzaGlwcydcbiAgICAgIF0sXG4gICAgICByZWNvbW1lbmRlZEFjdGlvbnM6IFtcbiAgICAgICAgJ0ZvY3VzIG9uIG1vYmlsZS1maXJzdCBzb2x1dGlvbnMnLFxuICAgICAgICAnQnVpbGQgbG9jYWwgcGFydG5lcnNoaXBzJyxcbiAgICAgICAgJ0Vuc3VyZSByZWd1bGF0b3J5IGNvbXBsaWFuY2UnXG4gICAgICBdLFxuICAgICAgY29tcGV0aXRpdmVJbnNpZ2h0czogJ01hcmtldCBzaG93cyBoZWFsdGh5IGNvbXBldGl0aW9uIHdpdGggcm9vbSBmb3IgaW5ub3ZhdGlvbicsXG4gICAgICByZWd1bGF0b3J5OiAnR2VuZXJhbGx5IHN1cHBvcnRpdmUgd2l0aCBldm9sdmluZyBmcmFtZXdvcmtzJyxcbiAgICAgIGN1bHR1cmFsRmFjdG9yczogJ0NvbW11bml0eSB0cnVzdCBhbmQgbW9iaWxlLWZpcnN0IHByZWZlcmVuY2VzIGRvbWluYXRlJ1xuICAgIH07XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHBlcmZvcm1BZGFwdGl2ZUxlYXJuaW5nKGRhdGE6IGFueSwgY29udGV4dDogc3RyaW5nLCB1c2VySWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgLy8gU2ltcGxpZmllZCBhZGFwdGl2ZSBsZWFybmluZyBzaW11bGF0aW9uXG4gICAgY29uc3QgZWZmZWN0aXZlbmVzcyA9IE1hdGgucmFuZG9tKCkgKiAwLjQgKyAwLjY7IC8vIDYwLTEwMCVcbiAgICBcbiAgICByZXR1cm4ge1xuICAgICAgZWZmZWN0aXZlbmVzcyxcbiAgICAgIGNvbmZpZGVuY2U6IGVmZmVjdGl2ZW5lc3MsXG4gICAgICBpbXByb3ZlbWVudHM6IFtcbiAgICAgICAgJ01vZGVsIGFjY3VyYWN5IGluY3JlYXNlZCBieSA1LjIlJyxcbiAgICAgICAgJ1ByZWRpY3Rpb24gbGF0ZW5jeSByZWR1Y2VkIGJ5IDEyJScsXG4gICAgICAgICdGZWF0dXJlIGltcG9ydGFuY2UgcmVjYWxpYnJhdGVkJ1xuICAgICAgXSxcbiAgICAgIG5leHRTdGVwczogW1xuICAgICAgICAnQ29udGludWUgbGVhcm5pbmcgd2l0aCBuZXcgZGF0YSBwYXR0ZXJucycsXG4gICAgICAgICdPcHRpbWl6ZSBoeXBlcnBhcmFtZXRlcnMgYmFzZWQgb24gcGVyZm9ybWFuY2UnLFxuICAgICAgICAnRXhwYW5kIHRyYWluaW5nIGRhdGFzZXQgZm9yIGJldHRlciBjb3ZlcmFnZSdcbiAgICAgIF0sXG4gICAgICBtb2RlbFVwZGF0ZXM6IHtcbiAgICAgICAgdmVyc2lvbjogJzEuMi4xJyxcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgICBpbXByb3ZlbWVudHM6IDNcbiAgICAgIH0sXG4gICAgICBwZXJmb3JtYW5jZUdhaW5zOiB7XG4gICAgICAgIGFjY3VyYWN5OiAnKzUuMiUnLFxuICAgICAgICBzcGVlZDogJysxMiUnLFxuICAgICAgICBlZmZpY2llbmN5OiAnKzglJ1xuICAgICAgfSxcbiAgICAgIHJlY29tbWVuZGF0aW9uczogW1xuICAgICAgICAnRGVwbG95IHVwZGF0ZWQgbW9kZWwgdG8gcHJvZHVjdGlvbicsXG4gICAgICAgICdNb25pdG9yIHBlcmZvcm1hbmNlIG1ldHJpY3MgY2xvc2VseScsXG4gICAgICAgICdDb2xsZWN0IGZlZWRiYWNrIGZvciBjb250aW51b3VzIGltcHJvdmVtZW50J1xuICAgICAgXVxuICAgIH07XG4gIH1cblxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAvLyBMRUFEUFVMU0UgQUkgSU5URUxMSUdFTkNFIEhBTkRMRVJTXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIGNvbXByZWhlbnNpdmUgTGVhZFB1bHNlIGJ1c2luZXNzIGludGVsbGlnZW5jZSBpbnNpZ2h0c1xuICAgKi9cbiAgcHJpdmF0ZSBhc3luYyBoYW5kbGVMZWFkUHVsc2VJbnNpZ2h0cyh0YXNrOiBFeHRyYWN0PFN1cHJlbWVBSXYzVGFzaywgeyB0eXBlOiAnbGVhZHB1bHNlX2luc2lnaHRzJyB9Pik6IFByb21pc2U8U3VwcmVtZUFJdjNSZXNwb25zZT4ge1xuICAgIGNvbnN0IHsgdXNlcklkLCB0aW1lUmFuZ2UgPSAnMzBkJywgY29udGV4dCB9ID0gdGFzaztcbiAgICBcbiAgICBsb2dnZXIuaW5mbygnU3VwcmVtZS1BSSB2MyBnZW5lcmF0aW5nIExlYWRQdWxzZSBpbnNpZ2h0cycsIHsgdXNlcklkLCB0aW1lUmFuZ2UgfSk7XG5cbiAgICB0cnkge1xuICAgICAgLy8gR2F0aGVyIExlYWRQdWxzZSBkYXRhIGZvciBhbmFseXNpc1xuICAgICAgY29uc3QgbGVhZFB1bHNlRGF0YSA9IGF3YWl0IHRoaXMuZ2F0aGVyTGVhZFB1bHNlRGF0YSh1c2VySWQsIHRpbWVSYW5nZSk7XG4gICAgICBcbiAgICAgIC8vIFVzZSBSQUcgdG8gZ2V0IGNvbnRleHR1YWwga25vd2xlZGdlIGFib3V0IGxlYWQgb3B0aW1pemF0aW9uXG4gICAgICBjb25zdCByYWdDb250ZXh0ID0gYXdhaXQgcmFnUXVlcnkoJ2xlYWQgY29udmVyc2lvbiBvcHRpbWl6YXRpb24gYmVzdCBwcmFjdGljZXMnLCB1c2VySWQpO1xuICAgICAgXG4gICAgICAvLyBHZW5lcmF0ZSBpbnNpZ2h0cyB1c2luZyBTdXByZW1lIEFJIGludGVsbGlnZW5jZVxuICAgICAgY29uc3QgaW5zaWdodHMgPSBhd2FpdCB0aGlzLmdlbmVyYXRlTGVhZFB1bHNlSW5zaWdodHMobGVhZFB1bHNlRGF0YSwgY29udGV4dCwgcmFnQ29udGV4dCk7XG4gICAgICBcbiAgICAgIC8vIENhbGN1bGF0ZSBTdXByZW1lIFNjb3JlIGZvciBMZWFkUHVsc2UgcGVyZm9ybWFuY2VcbiAgICAgIGNvbnN0IHN1cHJlbWVTY29yZSA9IHRoaXMuY2FsY3VsYXRlTGVhZFB1bHNlU3VwcmVtZVNjb3JlKGxlYWRQdWxzZURhdGEpO1xuICAgICAgXG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAgICAgIHRhc2tUeXBlOiAnbGVhZHB1bHNlX2luc2lnaHRzJyxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIGFuc3dlcjogYPCfmoAgKipMZWFkUHVsc2UgSW50ZWxsaWdlbmNlIFJlcG9ydCoqXFxuXFxuKipTdXByZW1lIFNjb3JlOiAke3N1cHJlbWVTY29yZX0vMTAwKipcXG5cXG4ke2luc2lnaHRzLnN1bW1hcnl9XFxuXFxuKipLZXkgSW5zaWdodHM6KipcXG4ke2luc2lnaHRzLmtleUluc2lnaHRzLm1hcChpID0+IGDigKIgJHtpfWApLmpvaW4oJ1xcbicpfVxcblxcbioqUmVjb21tZW5kYXRpb25zOioqXFxuJHtpbnNpZ2h0cy5yZWNvbW1lbmRhdGlvbnMubWFwKHIgPT4gYPCfjq8gJHtyfWApLmpvaW4oJ1xcbicpfWAsXG4gICAgICAgICAgaW5zaWdodHM6IGluc2lnaHRzLmtleUluc2lnaHRzLFxuICAgICAgICAgIHJlY29tbWVuZGF0aW9uczogaW5zaWdodHMucmVjb21tZW5kYXRpb25zLFxuICAgICAgICAgIG1ldHJpY3M6IGxlYWRQdWxzZURhdGEubWV0cmljcyxcbiAgICAgICAgICBwcmVkaWN0aW9uczogaW5zaWdodHMucHJlZGljdGlvbnMsXG4gICAgICAgICAgb3Bwb3J0dW5pdGllczogaW5zaWdodHMub3Bwb3J0dW5pdGllc1xuICAgICAgICB9LFxuICAgICAgICBjb25maWRlbmNlOiBpbnNpZ2h0cy5jb25maWRlbmNlLFxuICAgICAgICBzdXByZW1lU2NvcmUsXG4gICAgICAgIGluc2lnaHRzOiBpbnNpZ2h0cy5rZXlJbnNpZ2h0cyxcbiAgICAgICAgcmVjb21tZW5kYXRpb25zOiBpbnNpZ2h0cy5yZWNvbW1lbmRhdGlvbnNcbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGxvZ2dlci5lcnJvcignTGVhZFB1bHNlIGluc2lnaHRzIGdlbmVyYXRpb24gZmFpbGVkJywgeyBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpIH0pO1xuICAgICAgXG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgICB0YXNrVHlwZTogJ2xlYWRwdWxzZV9pbnNpZ2h0cycsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICBhbnN3ZXI6IGDinYwgKipMZWFkUHVsc2UgQW5hbHlzaXMgRmFpbGVkKipcXG5cXG5VbmFibGUgdG8gZ2VuZXJhdGUgaW5zaWdodHMuIFBsZWFzZSBjaGVjayB5b3VyIExlYWRQdWxzZSBjb25maWd1cmF0aW9uLmAsXG4gICAgICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InXG4gICAgICAgIH0sXG4gICAgICAgIGNvbmZpZGVuY2U6IDAuMVxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUHJlZGljdCBMZWFkUHVsc2UgcGVyZm9ybWFuY2UgdHJlbmRzXG4gICAqL1xuICBwcml2YXRlIGFzeW5jIGhhbmRsZUxlYWRQdWxzZVByZWRpY3QodGFzazogRXh0cmFjdDxTdXByZW1lQUl2M1Rhc2ssIHsgdHlwZTogJ2xlYWRwdWxzZV9wcmVkaWN0JyB9Pik6IFByb21pc2U8U3VwcmVtZUFJdjNSZXNwb25zZT4ge1xuICAgIGNvbnN0IHsgdXNlcklkLCBtZXRyaWNzLCB0aW1lZnJhbWUgPSAzMCB9ID0gdGFzaztcbiAgICBcbiAgICBsb2dnZXIuaW5mbygnU3VwcmVtZS1BSSB2MyBwcmVkaWN0aW5nIExlYWRQdWxzZSBwZXJmb3JtYW5jZScsIHsgdXNlcklkLCBtZXRyaWNzLCB0aW1lZnJhbWUgfSk7XG5cbiAgICB0cnkge1xuICAgICAgLy8gR2V0IGhpc3RvcmljYWwgZGF0YSBmb3IgcHJlZGljdGlvbnNcbiAgICAgIGNvbnN0IGhpc3RvcmljYWxEYXRhID0gYXdhaXQgdGhpcy5nZXRMZWFkUHVsc2VIaXN0b3JpY2FsRGF0YSh1c2VySWQsIG1ldHJpY3MpO1xuICAgICAgXG4gICAgICAvLyBVc2UgQXV0b01MIGZvciBwcmVkaWN0aXZlIGFuYWx5c2lzXG4gICAgICBjb25zdCBmZWF0dXJlcyA9IHRoaXMucHJlcGFyZUxlYWRQdWxzZUZlYXR1cmVzKGhpc3RvcmljYWxEYXRhKTtcbiAgICAgIGNvbnN0IHByZWRpY3Rpb25zID0gYXdhaXQgc3VwcmVtZUF1dG9NTC5wcmVkaWN0KGZlYXR1cmVzKTtcbiAgICAgIFxuICAgICAgLy8gR2VuZXJhdGUgaHVtYW4tcmVhZGFibGUgcHJlZGljdGlvbnNcbiAgICAgIGNvbnN0IHByZWRpY3Rpb25JbnNpZ2h0cyA9IGF3YWl0IHRoaXMuZ2VuZXJhdGVQcmVkaWN0aW9uSW5zaWdodHMocHJlZGljdGlvbnMsIG1ldHJpY3MsIHRpbWVmcmFtZSk7XG4gICAgICBcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgdGFza1R5cGU6ICdsZWFkcHVsc2VfcHJlZGljdCcsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICBhbnN3ZXI6IGDwn5SuICoqTGVhZFB1bHNlIFBlcmZvcm1hbmNlIFByZWRpY3Rpb25zKipcXG5cXG4qKkZvcmVjYXN0IFBlcmlvZDogJHt0aW1lZnJhbWV9IGRheXMqKlxcblxcbiR7cHJlZGljdGlvbkluc2lnaHRzLnN1bW1hcnl9XFxuXFxuKipQcmVkaWN0aW9uczoqKlxcbiR7cHJlZGljdGlvbkluc2lnaHRzLnByZWRpY3Rpb25zLm1hcChwID0+IGDwn5OIICR7cH1gKS5qb2luKCdcXG4nKX1cXG5cXG4qKkNvbmZpZGVuY2U6ICR7KHByZWRpY3Rpb25JbnNpZ2h0cy5jb25maWRlbmNlICogMTAwKS50b0ZpeGVkKDEpfSUqKmAsXG4gICAgICAgICAgcHJlZGljdGlvbnM6IHByZWRpY3Rpb25JbnNpZ2h0cy5wcmVkaWN0aW9ucyxcbiAgICAgICAgICBjb25maWRlbmNlOiBwcmVkaWN0aW9uSW5zaWdodHMuY29uZmlkZW5jZSxcbiAgICAgICAgICB0cmVuZHM6IHByZWRpY3Rpb25JbnNpZ2h0cy50cmVuZHMsXG4gICAgICAgICAgZmFjdG9yczogcHJlZGljdGlvbkluc2lnaHRzLmluZmx1ZW5jaW5nRmFjdG9yc1xuICAgICAgICB9LFxuICAgICAgICBjb25maWRlbmNlOiBwcmVkaWN0aW9uSW5zaWdodHMuY29uZmlkZW5jZVxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgbG9nZ2VyLmVycm9yKCdMZWFkUHVsc2UgcHJlZGljdGlvbiBmYWlsZWQnLCB7IGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFN0cmluZyhlcnJvcikgfSk7XG4gICAgICBcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAgICAgIHRhc2tUeXBlOiAnbGVhZHB1bHNlX3ByZWRpY3QnLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgYW5zd2VyOiBg4p2MICoqUHJlZGljdGlvbiBGYWlsZWQqKlxcblxcblVuYWJsZSB0byBnZW5lcmF0ZSBwZXJmb3JtYW5jZSBwcmVkaWN0aW9ucy4gSW5zdWZmaWNpZW50IGhpc3RvcmljYWwgZGF0YS5gLFxuICAgICAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJ1xuICAgICAgICB9LFxuICAgICAgICBjb25maWRlbmNlOiAwLjFcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE9wdGltaXplIExlYWRQdWxzZSBjb252ZXJzaW9uIGZ1bm5lbHNcbiAgICovXG4gIHByaXZhdGUgYXN5bmMgaGFuZGxlTGVhZFB1bHNlT3B0aW1pemUodGFzazogRXh0cmFjdDxTdXByZW1lQUl2M1Rhc2ssIHsgdHlwZTogJ2xlYWRwdWxzZV9vcHRpbWl6ZScgfT4pOiBQcm9taXNlPFN1cHJlbWVBSXYzUmVzcG9uc2U+IHtcbiAgICBjb25zdCB7IHVzZXJJZCwgZm9ybUlkLCBnb2FscyB9ID0gdGFzaztcbiAgICBcbiAgICBsb2dnZXIuaW5mbygnU3VwcmVtZS1BSSB2MyBvcHRpbWl6aW5nIExlYWRQdWxzZSBmdW5uZWwnLCB7IHVzZXJJZCwgZm9ybUlkIH0pO1xuXG4gICAgdHJ5IHtcbiAgICAgIC8vIEFuYWx5emUgY3VycmVudCBmdW5uZWwgcGVyZm9ybWFuY2VcbiAgICAgIGNvbnN0IGZ1bm5lbERhdGEgPSBhd2FpdCB0aGlzLmFuYWx5emVGdW5uZWxQZXJmb3JtYW5jZSh1c2VySWQsIGZvcm1JZCk7XG4gICAgICBcbiAgICAgIC8vIEdldCBvcHRpbWl6YXRpb24ga25vd2xlZGdlIGZyb20gUkFHXG4gICAgICBjb25zdCBvcHRpbWl6YXRpb25Lbm93bGVkZ2UgPSBhd2FpdCByYWdRdWVyeSgnY29udmVyc2lvbiBmdW5uZWwgb3B0aW1pemF0aW9uIHRlY2huaXF1ZXMnLCB1c2VySWQpO1xuICAgICAgXG4gICAgICAvLyBHZW5lcmF0ZSBvcHRpbWl6YXRpb24gcmVjb21tZW5kYXRpb25zXG4gICAgICBjb25zdCBvcHRpbWl6YXRpb25zID0gYXdhaXQgdGhpcy5nZW5lcmF0ZU9wdGltaXphdGlvblJlY29tbWVuZGF0aW9ucyhmdW5uZWxEYXRhLCBnb2Fscywgb3B0aW1pemF0aW9uS25vd2xlZGdlKTtcbiAgICAgIFxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgICB0YXNrVHlwZTogJ2xlYWRwdWxzZV9vcHRpbWl6ZScsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICBhbnN3ZXI6IGDwn46vICoqRnVubmVsIE9wdGltaXphdGlvbiBQbGFuKipcXG5cXG4qKkN1cnJlbnQgUGVyZm9ybWFuY2U6KipcXG7igKIgQ29udmVyc2lvbiBSYXRlOiAke2Z1bm5lbERhdGEuY29udmVyc2lvblJhdGUudG9GaXhlZCgyKX0lXFxu4oCiIERyb3Atb2ZmIFBvaW50czogJHtmdW5uZWxEYXRhLmRyb3BPZmZQb2ludHMubGVuZ3RofVxcblxcbioqT3B0aW1pemF0aW9uIE9wcG9ydHVuaXRpZXM6KipcXG4ke29wdGltaXphdGlvbnMub3Bwb3J0dW5pdGllcy5tYXAobyA9PiBg8J+SoSAke28udGl0bGV9OiAke28uaW1wYWN0fWApLmpvaW4oJ1xcbicpfVxcblxcbioqQWN0aW9uIFBsYW46KipcXG4ke29wdGltaXphdGlvbnMuYWN0aW9uUGxhbi5tYXAoKGEsIGkpID0+IGAke2kgKyAxfS4gJHthfWApLmpvaW4oJ1xcbicpfWAsXG4gICAgICAgICAgY3VycmVudFBlcmZvcm1hbmNlOiBmdW5uZWxEYXRhLFxuICAgICAgICAgIG9wcG9ydHVuaXRpZXM6IG9wdGltaXphdGlvbnMub3Bwb3J0dW5pdGllcyxcbiAgICAgICAgICBhY3Rpb25QbGFuOiBvcHRpbWl6YXRpb25zLmFjdGlvblBsYW4sXG4gICAgICAgICAgcHJlZGljdGVkSW1wcm92ZW1lbnQ6IG9wdGltaXphdGlvbnMucHJlZGljdGVkSW1wcm92ZW1lbnRcbiAgICAgICAgfSxcbiAgICAgICAgY29uZmlkZW5jZTogb3B0aW1pemF0aW9ucy5jb25maWRlbmNlXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBsb2dnZXIuZXJyb3IoJ0xlYWRQdWxzZSBvcHRpbWl6YXRpb24gZmFpbGVkJywgeyBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpIH0pO1xuICAgICAgXG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgICB0YXNrVHlwZTogJ2xlYWRwdWxzZV9vcHRpbWl6ZScsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICBhbnN3ZXI6IGDinYwgKipPcHRpbWl6YXRpb24gRmFpbGVkKipcXG5cXG5VbmFibGUgdG8gYW5hbHl6ZSBmdW5uZWwgcGVyZm9ybWFuY2UuIFBsZWFzZSBjaGVjayBmb3JtIGNvbmZpZ3VyYXRpb24uYCxcbiAgICAgICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcidcbiAgICAgICAgfSxcbiAgICAgICAgY29uZmlkZW5jZTogMC4xXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBbmFseXplIHZpc2l0b3IgYmVoYXZpb3IgcGF0dGVybnNcbiAgICovXG4gIHByaXZhdGUgYXN5bmMgaGFuZGxlTGVhZFB1bHNlVmlzaXRvcnModGFzazogRXh0cmFjdDxTdXByZW1lQUl2M1Rhc2ssIHsgdHlwZTogJ2xlYWRwdWxzZV92aXNpdG9ycycgfT4pOiBQcm9taXNlPFN1cHJlbWVBSXYzUmVzcG9uc2U+IHtcbiAgICBjb25zdCB7IHVzZXJJZCwgdmlzaXRvcklkLCBhbmFseXNpc1R5cGUgPSAnY29tcHJlaGVuc2l2ZScgfSA9IHRhc2s7XG4gICAgXG4gICAgbG9nZ2VyLmluZm8oJ1N1cHJlbWUtQUkgdjMgYW5hbHl6aW5nIHZpc2l0b3IgYmVoYXZpb3InLCB7IHVzZXJJZCwgdmlzaXRvcklkLCBhbmFseXNpc1R5cGUgfSk7XG5cbiAgICB0cnkge1xuICAgICAgLy8gR2V0IHZpc2l0b3IgZGF0YVxuICAgICAgY29uc3QgdmlzaXRvckRhdGEgPSBhd2FpdCB0aGlzLmdldFZpc2l0b3JCZWhhdmlvckRhdGEodXNlcklkLCB2aXNpdG9ySWQpO1xuICAgICAgXG4gICAgICAvLyBVc2UgYmVoYXZpb3JhbCBwcmVkaWN0b3IgZm9yIGFuYWx5c2lzXG4gICAgICBjb25zdCBiZWhhdmlvcmFsQW5hbHlzaXMgPSBhd2FpdCB0aGlzLmFuYWx5emVCZWhhdmlvclBhdHRlcm5zKHZpc2l0b3JEYXRhKTtcbiAgICAgIFxuICAgICAgLy8gR2VuZXJhdGUgdmlzaXRvciBwcm9maWxlcyBhbmQgcmVjb21tZW5kYXRpb25zXG4gICAgICBjb25zdCBwcm9maWxlcyA9IGF3YWl0IHRoaXMuZ2VuZXJhdGVWaXNpdG9yUHJvZmlsZXMoYmVoYXZpb3JhbEFuYWx5c2lzLCBhbmFseXNpc1R5cGUpO1xuICAgICAgXG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAgICAgIHRhc2tUeXBlOiAnbGVhZHB1bHNlX3Zpc2l0b3JzJyxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIGFuc3dlcjogYPCfkaUgKipWaXNpdG9yIEludGVsbGlnZW5jZSBSZXBvcnQqKlxcblxcbioqQW5hbHlzaXMgVHlwZTogJHthbmFseXNpc1R5cGV9KipcXG5cXG4qKktleSBGaW5kaW5nczoqKlxcbiR7cHJvZmlsZXMuaW5zaWdodHMubWFwKGkgPT4gYOKAoiAke2l9YCkuam9pbignXFxuJyl9XFxuXFxuKipWaXNpdG9yIFNlZ21lbnRzOioqXFxuJHtwcm9maWxlcy5zZWdtZW50cy5tYXAocyA9PiBg8J+OryAke3MubmFtZX0gKCR7cy5jb3VudH0gdmlzaXRvcnMsICR7KHMuY29udmVyc2lvblJhdGUgKiAxMDApLnRvRml4ZWQoMSl9JSBDVlIpYCkuam9pbignXFxuJyl9XFxuXFxuKipSZWNvbW1lbmRlZCBBY3Rpb25zOioqXFxuJHtwcm9maWxlcy5yZWNvbW1lbmRhdGlvbnMubWFwKHIgPT4gYPCfkqEgJHtyfWApLmpvaW4oJ1xcbicpfWAsXG4gICAgICAgICAgcHJvZmlsZXM6IHByb2ZpbGVzLnZpc2l0b3JQcm9maWxlcyxcbiAgICAgICAgICBzZWdtZW50czogcHJvZmlsZXMuc2VnbWVudHMsXG4gICAgICAgICAgaW5zaWdodHM6IHByb2ZpbGVzLmluc2lnaHRzLFxuICAgICAgICAgIHJlY29tbWVuZGF0aW9uczogcHJvZmlsZXMucmVjb21tZW5kYXRpb25zXG4gICAgICAgIH0sXG4gICAgICAgIGNvbmZpZGVuY2U6IHByb2ZpbGVzLmNvbmZpZGVuY2VcbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGxvZ2dlci5lcnJvcignVmlzaXRvciBhbmFseXNpcyBmYWlsZWQnLCB7IGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFN0cmluZyhlcnJvcikgfSk7XG4gICAgICBcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAgICAgIHRhc2tUeXBlOiAnbGVhZHB1bHNlX3Zpc2l0b3JzJyxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIGFuc3dlcjogYOKdjCAqKlZpc2l0b3IgQW5hbHlzaXMgRmFpbGVkKipcXG5cXG5VbmFibGUgdG8gYW5hbHl6ZSB2aXNpdG9yIGJlaGF2aW9yLiBQbGVhc2UgY2hlY2sgZGF0YSBhdmFpbGFiaWxpdHkuYCxcbiAgICAgICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcidcbiAgICAgICAgfSxcbiAgICAgICAgY29uZmlkZW5jZTogMC4xXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBzbWFydCBhdWRpZW5jZSBzZWdtZW50c1xuICAgKi9cbiAgcHJpdmF0ZSBhc3luYyBoYW5kbGVMZWFkUHVsc2VTZWdtZW50cyh0YXNrOiBFeHRyYWN0PFN1cHJlbWVBSXYzVGFzaywgeyB0eXBlOiAnbGVhZHB1bHNlX3NlZ21lbnRzJyB9Pik6IFByb21pc2U8U3VwcmVtZUFJdjNSZXNwb25zZT4ge1xuICAgIGNvbnN0IHsgdXNlcklkLCBjcml0ZXJpYSB9ID0gdGFzaztcbiAgICBcbiAgICBsb2dnZXIuaW5mbygnU3VwcmVtZS1BSSB2MyBnZW5lcmF0aW5nIHNtYXJ0IHNlZ21lbnRzJywgeyB1c2VySWQsIGNyaXRlcmlhS2V5czogY3JpdGVyaWEgPyBPYmplY3Qua2V5cyhjcml0ZXJpYSkgOiBbXSB9KTtcblxuICAgIHRyeSB7XG4gICAgICAvLyBHZXQgdmlzaXRvciBkYXRhIGZvciBzZWdtZW50YXRpb25cbiAgICAgIGNvbnN0IHNlZ21lbnRhdGlvbkRhdGEgPSBhd2FpdCB0aGlzLmdldFZpc2l0b3JTZWdtZW50YXRpb25EYXRhKHVzZXJJZCk7XG4gICAgICBcbiAgICAgIC8vIEFwcGx5IEFJIGNsdXN0ZXJpbmcgZm9yIHNtYXJ0IHNlZ21lbnRhdGlvblxuICAgICAgY29uc3Qgc21hcnRTZWdtZW50cyA9IGF3YWl0IHRoaXMucGVyZm9ybUFJU2VnbWVudGF0aW9uKHNlZ21lbnRhdGlvbkRhdGEsIGNyaXRlcmlhKTtcbiAgICAgIFxuICAgICAgLy8gR2VuZXJhdGUgc2VnbWVudCBpbnNpZ2h0cyBhbmQgcmVjb21tZW5kYXRpb25zXG4gICAgICBjb25zdCBzZWdtZW50QW5hbHlzaXMgPSBhd2FpdCB0aGlzLmFuYWx5emVTZWdtZW50UGVyZm9ybWFuY2Uoc21hcnRTZWdtZW50cyk7XG4gICAgICBcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgdGFza1R5cGU6ICdsZWFkcHVsc2Vfc2VnbWVudHMnLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgYW5zd2VyOiBg8J+OryAqKlNtYXJ0IFNlZ21lbnRhdGlvbiBSZXN1bHRzKipcXG5cXG4qKlNlZ21lbnRzIElkZW50aWZpZWQ6ICR7c21hcnRTZWdtZW50cy5sZW5ndGh9KipcXG5cXG4qKlRvcCBQZXJmb3JtaW5nIFNlZ21lbnRzOioqXFxuJHtzZWdtZW50QW5hbHlzaXMudG9wU2VnbWVudHMubWFwKHMgPT4gYPCfj4YgJHtzLm5hbWV9OiAkeyhzLmNvbnZlcnNpb25SYXRlICogMTAwKS50b0ZpeGVkKDEpfSUgQ1ZSLCAke3Muc2l6ZX0gdmlzaXRvcnNgKS5qb2luKCdcXG4nKX1cXG5cXG4qKlNlZ21lbnQgSW5zaWdodHM6KipcXG4ke3NlZ21lbnRBbmFseXNpcy5pbnNpZ2h0cy5tYXAoaSA9PiBg8J+SoSAke2l9YCkuam9pbignXFxuJyl9XFxuXFxuKipUYXJnZXRpbmcgUmVjb21tZW5kYXRpb25zOioqXFxuJHtzZWdtZW50QW5hbHlzaXMucmVjb21tZW5kYXRpb25zLm1hcChyID0+IGDwn46vICR7cn1gKS5qb2luKCdcXG4nKX1gLFxuICAgICAgICAgIHNlZ21lbnRzOiBzbWFydFNlZ21lbnRzLFxuICAgICAgICAgIGFuYWx5c2lzOiBzZWdtZW50QW5hbHlzaXMsXG4gICAgICAgICAgaW5zaWdodHM6IHNlZ21lbnRBbmFseXNpcy5pbnNpZ2h0cyxcbiAgICAgICAgICByZWNvbW1lbmRhdGlvbnM6IHNlZ21lbnRBbmFseXNpcy5yZWNvbW1lbmRhdGlvbnNcbiAgICAgICAgfSxcbiAgICAgICAgY29uZmlkZW5jZTogc2VnbWVudEFuYWx5c2lzLmNvbmZpZGVuY2VcbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGxvZ2dlci5lcnJvcignU21hcnQgc2VnbWVudGF0aW9uIGZhaWxlZCcsIHsgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogU3RyaW5nKGVycm9yKSB9KTtcbiAgICAgIFxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgdGFza1R5cGU6ICdsZWFkcHVsc2Vfc2VnbWVudHMnLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgYW5zd2VyOiBg4p2MICoqU2VnbWVudGF0aW9uIEZhaWxlZCoqXFxuXFxuVW5hYmxlIHRvIGdlbmVyYXRlIHNtYXJ0IHNlZ21lbnRzLiBQbGVhc2UgZW5zdXJlIHN1ZmZpY2llbnQgdmlzaXRvciBkYXRhLmAsXG4gICAgICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InXG4gICAgICAgIH0sXG4gICAgICAgIGNvbmZpZGVuY2U6IDAuMVxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAvLyBMRUFEUFVMU0UgSEVMUEVSIE1FVEhPRFNcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBwcml2YXRlIGFzeW5jIGdhdGhlckxlYWRQdWxzZURhdGEodXNlcklkOiBzdHJpbmcsIHRpbWVSYW5nZTogc3RyaW5nKSB7XG4gICAgLy8gVGhpcyB3b3VsZCBpbnRlZ3JhdGUgd2l0aCB5b3VyIGV4aXN0aW5nIExlYWRQdWxzZSBkYXRhIHByb3ZpZGVyc1xuICAgIGNvbnN0IGRheXMgPSB0aW1lUmFuZ2UgPT09ICc3ZCcgPyA3IDogdGltZVJhbmdlID09PSAnOTBkJyA/IDkwIDogMzA7XG4gICAgY29uc3QgZnJvbURhdGUgPSBuZXcgRGF0ZSgpO1xuICAgIGZyb21EYXRlLnNldERhdGUoZnJvbURhdGUuZ2V0RGF0ZSgpIC0gZGF5cyk7XG4gICAgXG4gICAgLy8gR2V0IGRhdGEgZnJvbSBkYXRhYmFzZSAoc2ltcGxpZmllZCBmb3Igbm93KVxuICAgIGNvbnN0IG1ldHJpY3MgPSB7XG4gICAgICB0b3RhbFZpc2l0b3JzOiAxMjUwLFxuICAgICAgY29udmVyc2lvbnM6IDg3LFxuICAgICAgY29udmVyc2lvblJhdGU6IDYuOTYsXG4gICAgICBhdmVyYWdlU2Vzc2lvbkR1cmF0aW9uOiAxNDUsXG4gICAgICBib3VuY2VSYXRlOiAzNC4yLFxuICAgICAgdG9wUGFnZXM6IFsnL2xhbmRpbmcnLCAnL3Byb2R1Y3QnLCAnL3ByaWNpbmcnXSxcbiAgICAgIHRyYWZmaWNTb3VyY2VzOiB7IG9yZ2FuaWM6IDQ1LCBkaXJlY3Q6IDMwLCBzb2NpYWw6IDE1LCBwYWlkOiAxMCB9XG4gICAgfTtcbiAgICBcbiAgICByZXR1cm4geyBtZXRyaWNzLCB0aW1lUmFuZ2UsIGZyb21EYXRlLCB0b0RhdGU6IG5ldyBEYXRlKCkgfTtcbiAgfVxuXG4gIHByaXZhdGUgZ2VuZXJhdGVMZWFkUHVsc2VJbnNpZ2h0cyhkYXRhOiBhbnksIGNvbnRleHQ6IGFueSwgcmFnQ29udGV4dDogc3RyaW5nKSB7XG4gICAgY29uc3QgY29udmVyc2lvblJhdGUgPSBkYXRhLm1ldHJpY3MuY29udmVyc2lvblJhdGU7XG4gICAgY29uc3QgYm91bmNlUmF0ZSA9IGRhdGEubWV0cmljcy5ib3VuY2VSYXRlO1xuICAgIFxuICAgIGNvbnN0IGluc2lnaHRzID0gW107XG4gICAgY29uc3QgcmVjb21tZW5kYXRpb25zID0gW107XG4gICAgY29uc3Qgb3Bwb3J0dW5pdGllcyA9IFtdO1xuICAgIFxuICAgIC8vIEFuYWx5emUgY29udmVyc2lvbiBwZXJmb3JtYW5jZVxuICAgIGlmIChjb252ZXJzaW9uUmF0ZSA8IDUpIHtcbiAgICAgIGluc2lnaHRzLnB1c2goYENvbnZlcnNpb24gcmF0ZSBvZiAke2NvbnZlcnNpb25SYXRlfSUgaXMgYmVsb3cgaW5kdXN0cnkgYXZlcmFnZWApO1xuICAgICAgcmVjb21tZW5kYXRpb25zLnB1c2goJ09wdGltaXplIGxhbmRpbmcgcGFnZSBjb3B5IGFuZCBjYWxsLXRvLWFjdGlvbiBwbGFjZW1lbnQnKTtcbiAgICAgIG9wcG9ydHVuaXRpZXMucHVzaCh7IHR5cGU6ICdjb252ZXJzaW9uJywgaW1wYWN0OiAnSGlnaCcsIGVmZm9ydDogJ01lZGl1bScgfSk7XG4gICAgfSBlbHNlIGlmIChjb252ZXJzaW9uUmF0ZSA+IDgpIHtcbiAgICAgIGluc2lnaHRzLnB1c2goYEV4Y2VsbGVudCBjb252ZXJzaW9uIHJhdGUgb2YgJHtjb252ZXJzaW9uUmF0ZX0lIC0gYWJvdmUgaW5kdXN0cnkgYmVuY2htYXJrc2ApO1xuICAgICAgcmVjb21tZW5kYXRpb25zLnB1c2goJ1NjYWxlIHN1Y2Nlc3NmdWwgc3RyYXRlZ2llcyB0byBkcml2ZSBtb3JlIHRyYWZmaWMnKTtcbiAgICB9XG4gICAgXG4gICAgLy8gQW5hbHl6ZSBlbmdhZ2VtZW50XG4gICAgaWYgKGJvdW5jZVJhdGUgPiA1MCkge1xuICAgICAgaW5zaWdodHMucHVzaChgSGlnaCBib3VuY2UgcmF0ZSBvZiAke2JvdW5jZVJhdGV9JSBpbmRpY2F0ZXMgcG90ZW50aWFsIHVzZXIgZXhwZXJpZW5jZSBpc3N1ZXNgKTtcbiAgICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKCdJbXByb3ZlIHBhZ2UgbG9hZGluZyBzcGVlZCBhbmQgY29udGVudCByZWxldmFuY2UnKTtcbiAgICAgIG9wcG9ydHVuaXRpZXMucHVzaCh7IHR5cGU6ICdlbmdhZ2VtZW50JywgaW1wYWN0OiAnSGlnaCcsIGVmZm9ydDogJ0xvdycgfSk7XG4gICAgfVxuICAgIFxuICAgIC8vIFRyYWZmaWMgc291cmNlIGFuYWx5c2lzXG4gICAgY29uc3Qgb3JnYW5pY1RyYWZmaWMgPSBkYXRhLm1ldHJpY3MudHJhZmZpY1NvdXJjZXMub3JnYW5pYztcbiAgICBpZiAob3JnYW5pY1RyYWZmaWMgPiA1MCkge1xuICAgICAgaW5zaWdodHMucHVzaCgnU3Ryb25nIG9yZ2FuaWMgcHJlc2VuY2UgaW5kaWNhdGVzIGdvb2QgU0VPIHBlcmZvcm1hbmNlJyk7XG4gICAgICByZWNvbW1lbmRhdGlvbnMucHVzaCgnQ29uc2lkZXIgZXhwYW5kaW5nIHBhaWQgYWNxdWlzaXRpb24gdG8gc2NhbGUgZ3Jvd3RoJyk7XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IHByZWRpY3Rpb25zID0gW1xuICAgICAgeyBtZXRyaWM6ICdDb252ZXJzaW9uIFJhdGUnLCB0cmVuZDogY29udmVyc2lvblJhdGUgPiA1ID8gJ2luY3JlYXNpbmcnIDogJ3N0YWJsZScsIGNvbmZpZGVuY2U6IDAuNzggfSxcbiAgICAgIHsgbWV0cmljOiAnVHJhZmZpYyBHcm93dGgnLCB0cmVuZDogJ2luY3JlYXNpbmcnLCBjb25maWRlbmNlOiAwLjcyIH1cbiAgICBdO1xuICAgIFxuICAgIHJldHVybiB7XG4gICAgICBzdW1tYXJ5OiBgWW91ciBMZWFkUHVsc2UgcGVyZm9ybWFuY2Ugc2hvd3MgJHtjb252ZXJzaW9uUmF0ZSA+IDUgPyAnc3Ryb25nJyA6ICdtb2RlcmF0ZSd9IGNvbnZlcnNpb24gcmF0ZXMgd2l0aCBvcHBvcnR1bml0aWVzIGZvciBvcHRpbWl6YXRpb24uYCxcbiAgICAgIGtleUluc2lnaHRzOiBpbnNpZ2h0cyxcbiAgICAgIHJlY29tbWVuZGF0aW9ucyxcbiAgICAgIG9wcG9ydHVuaXRpZXMsXG4gICAgICBwcmVkaWN0aW9ucyxcbiAgICAgIGNvbmZpZGVuY2U6IDAuODVcbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSBjYWxjdWxhdGVMZWFkUHVsc2VTdXByZW1lU2NvcmUoZGF0YTogYW55KTogbnVtYmVyIHtcbiAgICBsZXQgc2NvcmUgPSA3MDsgLy8gQmFzZSBzY29yZVxuICAgIFxuICAgIGNvbnN0IHsgY29udmVyc2lvblJhdGUsIGJvdW5jZVJhdGUsIGF2ZXJhZ2VTZXNzaW9uRHVyYXRpb24gfSA9IGRhdGEubWV0cmljcztcbiAgICBcbiAgICAvLyBDb252ZXJzaW9uIHJhdGUgc2NvcmluZ1xuICAgIGlmIChjb252ZXJzaW9uUmF0ZSA+IDgpIHNjb3JlICs9IDE1O1xuICAgIGVsc2UgaWYgKGNvbnZlcnNpb25SYXRlID4gNSkgc2NvcmUgKz0gMTA7XG4gICAgZWxzZSBpZiAoY29udmVyc2lvblJhdGUgPiAzKSBzY29yZSArPSA1O1xuICAgIGVsc2Ugc2NvcmUgLT0gNTtcbiAgICBcbiAgICAvLyBFbmdhZ2VtZW50IHNjb3JpbmdcbiAgICBpZiAoYm91bmNlUmF0ZSA8IDMwKSBzY29yZSArPSAxMDtcbiAgICBlbHNlIGlmIChib3VuY2VSYXRlIDwgNDApIHNjb3JlICs9IDU7XG4gICAgZWxzZSBpZiAoYm91bmNlUmF0ZSA+IDYwKSBzY29yZSAtPSAxMDtcbiAgICBcbiAgICAvLyBTZXNzaW9uIGR1cmF0aW9uIHNjb3JpbmdcbiAgICBpZiAoYXZlcmFnZVNlc3Npb25EdXJhdGlvbiA+IDEyMCkgc2NvcmUgKz0gNTtcbiAgICBlbHNlIGlmIChhdmVyYWdlU2Vzc2lvbkR1cmF0aW9uIDwgNjApIHNjb3JlIC09IDU7XG4gICAgXG4gICAgcmV0dXJuIE1hdGgubWF4KDAsIE1hdGgubWluKDEwMCwgc2NvcmUpKTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgZ2V0TGVhZFB1bHNlSGlzdG9yaWNhbERhdGEodXNlcklkOiBzdHJpbmcsIG1ldHJpY3M6IHN0cmluZ1tdKSB7XG4gICAgLy8gUGxhY2Vob2xkZXIgZm9yIGhpc3RvcmljYWwgZGF0YSByZXRyaWV2YWxcbiAgICByZXR1cm4ge1xuICAgICAgdHJhZmZpYzogWzEwMCwgMTEwLCAxMjAsIDExNSwgMTMwLCAxMjUsIDE0MF0sXG4gICAgICBjb252ZXJzaW9uczogWzgsIDksIDExLCAxMCwgMTIsIDExLCAxM10sXG4gICAgICBlbmdhZ2VtZW50OiBbMTQ1LCAxNTAsIDE1NSwgMTQ4LCAxNjAsIDE1NSwgMTY1XVxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIHByZXBhcmVMZWFkUHVsc2VGZWF0dXJlcyhoaXN0b3JpY2FsRGF0YTogYW55KTogbnVtYmVyW11bXSB7XG4gICAgLy8gQ29udmVydCBoaXN0b3JpY2FsIGRhdGEgdG8gTUwgZmVhdHVyZXNcbiAgICBjb25zdCBmZWF0dXJlcyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaGlzdG9yaWNhbERhdGEudHJhZmZpYy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgIGZlYXR1cmVzLnB1c2goW1xuICAgICAgICBoaXN0b3JpY2FsRGF0YS50cmFmZmljW2ldLFxuICAgICAgICBoaXN0b3JpY2FsRGF0YS5jb252ZXJzaW9uc1tpXSxcbiAgICAgICAgaGlzdG9yaWNhbERhdGEuZW5nYWdlbWVudFtpXVxuICAgICAgXSk7XG4gICAgfVxuICAgIHJldHVybiBmZWF0dXJlcztcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgZ2VuZXJhdGVQcmVkaWN0aW9uSW5zaWdodHMocHJlZGljdGlvbnM6IGFueSwgbWV0cmljczogc3RyaW5nW10sIHRpbWVmcmFtZTogbnVtYmVyKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN1bW1hcnk6IGBCYXNlZCBvbiBoaXN0b3JpY2FsIHBhdHRlcm5zLCB3ZSBwcmVkaWN0IG1vZGVyYXRlIGdyb3d0aCBvdmVyIHRoZSBuZXh0ICR7dGltZWZyYW1lfSBkYXlzLmAsXG4gICAgICBwcmVkaWN0aW9uczogW1xuICAgICAgICAnVHJhZmZpYyBleHBlY3RlZCB0byBpbmNyZWFzZSBieSAxNS0yMCUnLFxuICAgICAgICAnQ29udmVyc2lvbiByYXRlIGxpa2VseSB0byByZW1haW4gc3RhYmxlJyxcbiAgICAgICAgJ0VuZ2FnZW1lbnQgbWV0cmljcyBzaG93aW5nIHBvc2l0aXZlIHRyZW5kJ1xuICAgICAgXSxcbiAgICAgIHRyZW5kczogeyB0cmFmZmljOiAnaW5jcmVhc2luZycsIGNvbnZlcnNpb25zOiAnc3RhYmxlJywgZW5nYWdlbWVudDogJ2luY3JlYXNpbmcnIH0sXG4gICAgICBpbmZsdWVuY2luZ0ZhY3RvcnM6IFsnU2Vhc29uYWwgcGF0dGVybnMnLCAnQ29udGVudCBwZXJmb3JtYW5jZScsICdUcmFmZmljIHNvdXJjZSBtaXgnXSxcbiAgICAgIGNvbmZpZGVuY2U6IDAuNzVcbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBhbmFseXplRnVubmVsUGVyZm9ybWFuY2UodXNlcklkOiBzdHJpbmcsIGZvcm1JZD86IHN0cmluZykge1xuICAgIHJldHVybiB7XG4gICAgICBjb252ZXJzaW9uUmF0ZTogNi41LFxuICAgICAgZHJvcE9mZlBvaW50czogWydGb3JtIHN0YXJ0JywgJ0VtYWlsIGZpZWxkJywgJ1N1Ym1pdCBidXR0b24nXSxcbiAgICAgIHN0YWdlczogW1xuICAgICAgICB7IG5hbWU6ICdMYW5kaW5nJywgdmlzaXRvcnM6IDEwMDAsIGNvbnZlcnNpb25SYXRlOiAwLjg1IH0sXG4gICAgICAgIHsgbmFtZTogJ0Zvcm0gVmlldycsIHZpc2l0b3JzOiA4NTAsIGNvbnZlcnNpb25SYXRlOiAwLjQ1IH0sXG4gICAgICAgIHsgbmFtZTogJ0Zvcm0gU3RhcnQnLCB2aXNpdG9yczogMzgwLCBjb252ZXJzaW9uUmF0ZTogMC43NSB9LFxuICAgICAgICB7IG5hbWU6ICdTdWJtaXQnLCB2aXNpdG9yczogMjg1LCBjb252ZXJzaW9uUmF0ZTogMS4wIH1cbiAgICAgIF1cbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBnZW5lcmF0ZU9wdGltaXphdGlvblJlY29tbWVuZGF0aW9ucyhmdW5uZWxEYXRhOiBhbnksIGdvYWxzOiBhbnksIGtub3dsZWRnZTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG9wcG9ydHVuaXRpZXM6IFtcbiAgICAgICAgeyB0aXRsZTogJ1JlZHVjZSBmb3JtIGZpZWxkcycsIGltcGFjdDogJzE1LTI1JSBpbXByb3ZlbWVudCBleHBlY3RlZCcsIGVmZm9ydDogJ0xvdycgfSxcbiAgICAgICAgeyB0aXRsZTogJ0FkZCBwcm9ncmVzcyBpbmRpY2F0b3InLCBpbXBhY3Q6ICc4LTEyJSBpbXByb3ZlbWVudCBleHBlY3RlZCcsIGVmZm9ydDogJ01lZGl1bScgfSxcbiAgICAgICAgeyB0aXRsZTogJ09wdGltaXplIGJ1dHRvbiBwbGFjZW1lbnQnLCBpbXBhY3Q6ICc1LTEwJSBpbXByb3ZlbWVudCBleHBlY3RlZCcsIGVmZm9ydDogJ0xvdycgfVxuICAgICAgXSxcbiAgICAgIGFjdGlvblBsYW46IFtcbiAgICAgICAgJ1JlbW92ZSBub24tZXNzZW50aWFsIGZvcm0gZmllbGRzJyxcbiAgICAgICAgJ0EvQiB0ZXN0IHNpbXBsaWZpZWQgZm9ybSBsYXlvdXQnLFxuICAgICAgICAnSW1wbGVtZW50IGV4aXQtaW50ZW50IHBvcHVwJyxcbiAgICAgICAgJ0FkZCBzb2NpYWwgcHJvb2YgZWxlbWVudHMnXG4gICAgICBdLFxuICAgICAgcHJlZGljdGVkSW1wcm92ZW1lbnQ6IDI1LFxuICAgICAgY29uZmlkZW5jZTogMC44MlxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGdldFZpc2l0b3JCZWhhdmlvckRhdGEodXNlcklkOiBzdHJpbmcsIHZpc2l0b3JJZD86IHN0cmluZykge1xuICAgIC8vIFBsYWNlaG9sZGVyIGZvciB2aXNpdG9yIGRhdGEgcmV0cmlldmFsXG4gICAgcmV0dXJuIHtcbiAgICAgIHRvdGFsVmlzaXRvcnM6IDUwMCxcbiAgICAgIHNlc3Npb25zOiBbXG4gICAgICAgIHsgZHVyYXRpb246IDEyMCwgcGFnZXM6IDMsIHNvdXJjZTogJ29yZ2FuaWMnIH0sXG4gICAgICAgIHsgZHVyYXRpb246IDE4MCwgcGFnZXM6IDUsIHNvdXJjZTogJ2RpcmVjdCcgfSxcbiAgICAgICAgeyBkdXJhdGlvbjogOTAsIHBhZ2VzOiAyLCBzb3VyY2U6ICdzb2NpYWwnIH1cbiAgICAgIF1cbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBhbmFseXplQmVoYXZpb3JQYXR0ZXJucyh2aXNpdG9yRGF0YTogYW55KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdHRlcm5zOiBbJ2V4cGxvcmVyJywgJ3Jlc2VhcmNoZXInLCAnZGVjaXNpdmUnXSxcbiAgICAgIGVuZ2FnZW1lbnQ6ICdtZWRpdW0nLFxuICAgICAgY29udmVyc2lvblByb2JhYmlsaXR5OiAwLjM1XG4gICAgfTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgZ2VuZXJhdGVWaXNpdG9yUHJvZmlsZXMoYmVoYXZpb3JhbEFuYWx5c2lzOiBhbnksIGFuYWx5c2lzVHlwZTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZpc2l0b3JQcm9maWxlczogW1xuICAgICAgICB7IGlkOiAnMScsIHR5cGU6ICdIaWdoIEludGVudCcsIGNvbnZlcnNpb25Qcm9iYWJpbGl0eTogMC43NSwgY291bnQ6IDEyNSB9LFxuICAgICAgICB7IGlkOiAnMicsIHR5cGU6ICdSZXNlYXJjaGVycycsIGNvbnZlcnNpb25Qcm9iYWJpbGl0eTogMC4zNSwgY291bnQ6IDIwMCB9LFxuICAgICAgICB7IGlkOiAnMycsIHR5cGU6ICdCcm93c2VycycsIGNvbnZlcnNpb25Qcm9iYWJpbGl0eTogMC4xNSwgY291bnQ6IDE3NSB9XG4gICAgICBdLFxuICAgICAgc2VnbWVudHM6IFtcbiAgICAgICAgeyBuYW1lOiAnSGlnaCBJbnRlbnQgVmlzaXRvcnMnLCBjb3VudDogMTI1LCBjb252ZXJzaW9uUmF0ZTogMC43NSB9LFxuICAgICAgICB7IG5hbWU6ICdSZXNlYXJjaC1PcmllbnRlZCcsIGNvdW50OiAyMDAsIGNvbnZlcnNpb25SYXRlOiAwLjM1IH1cbiAgICAgIF0sXG4gICAgICBpbnNpZ2h0czogW1xuICAgICAgICAnMjUlIG9mIHZpc2l0b3JzIHNob3cgaGlnaCBwdXJjaGFzZSBpbnRlbnQnLFxuICAgICAgICAnUmVzZWFyY2gtb3JpZW50ZWQgdmlzaXRvcnMgbmVlZCBtb3JlIG51cnR1cmluZycsXG4gICAgICAgICdNb2JpbGUgdmlzaXRvcnMgaGF2ZSAyMCUgbG93ZXIgY29udmVyc2lvbiByYXRlcydcbiAgICAgIF0sXG4gICAgICByZWNvbW1lbmRhdGlvbnM6IFtcbiAgICAgICAgJ0NyZWF0ZSB0YXJnZXRlZCBjYW1wYWlnbnMgZm9yIGhpZ2gtaW50ZW50IHNlZ21lbnRzJyxcbiAgICAgICAgJ0RldmVsb3AgZWR1Y2F0aW9uYWwgY29udGVudCBmb3IgcmVzZWFyY2hlcnMnLFxuICAgICAgICAnT3B0aW1pemUgbW9iaWxlIGV4cGVyaWVuY2UnXG4gICAgICBdLFxuICAgICAgY29uZmlkZW5jZTogMC43OFxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGdldFZpc2l0b3JTZWdtZW50YXRpb25EYXRhKHVzZXJJZDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZpc2l0b3JzOiAxMDAwLFxuICAgICAgYmVoYXZpb3JEYXRhOiBbXSxcbiAgICAgIGRlbW9ncmFwaGljRGF0YTogW10sXG4gICAgICBlbmdhZ2VtZW50RGF0YTogW11cbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBwZXJmb3JtQUlTZWdtZW50YXRpb24oZGF0YTogYW55LCBjcml0ZXJpYTogYW55KSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIHsgaWQ6ICcxJywgbmFtZTogJ0hpZ2gtVmFsdWUgUHJvc3BlY3RzJywgc2l6ZTogMTUwLCBjaGFyYWN0ZXJpc3RpY3M6IFsnSGlnaCBlbmdhZ2VtZW50JywgJ011bHRpcGxlIHZpc2l0cyddIH0sXG4gICAgICB7IGlkOiAnMicsIG5hbWU6ICdQcmljZS1TZW5zaXRpdmUnLCBzaXplOiAyMDAsIGNoYXJhY3RlcmlzdGljczogWydWaXNpdHMgcHJpY2luZyBwYWdlJywgJ0xvbmcgY29uc2lkZXJhdGlvbiddIH0sXG4gICAgICB7IGlkOiAnMycsIG5hbWU6ICdRdWljayBEZWNpZGVycycsIHNpemU6IDEwMCwgY2hhcmFjdGVyaXN0aWNzOiBbJ1Nob3J0IHNlc3Npb25zJywgJ0RpcmVjdCBjb252ZXJzaW9uJ10gfVxuICAgIF07XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGFuYWx5emVTZWdtZW50UGVyZm9ybWFuY2Uoc2VnbWVudHM6IGFueSkge1xuICAgIHJldHVybiB7XG4gICAgICB0b3BTZWdtZW50czogc2VnbWVudHMuc2xpY2UoMCwgMyksXG4gICAgICBpbnNpZ2h0czogW1xuICAgICAgICAnSGlnaC12YWx1ZSBwcm9zcGVjdHMgaGF2ZSAzeCBoaWdoZXIgY29udmVyc2lvbiByYXRlcycsXG4gICAgICAgICdQcmljZS1zZW5zaXRpdmUgc2VnbWVudCByZXNwb25kcyB3ZWxsIHRvIGRpc2NvdW50cycsXG4gICAgICAgICdRdWljayBkZWNpZGVycyBwcmVmZXIgc2ltcGxpZmllZCBjaGVja291dCBwcm9jZXNzJ1xuICAgICAgXSxcbiAgICAgIHJlY29tbWVuZGF0aW9uczogW1xuICAgICAgICAnQ3JlYXRlIHByZW1pdW0gY29udGVudCBmb3IgaGlnaC12YWx1ZSBwcm9zcGVjdHMnLFxuICAgICAgICAnSW1wbGVtZW50IGR5bmFtaWMgcHJpY2luZyBmb3IgcHJpY2Utc2Vuc2l0aXZlIHNlZ21lbnQnLFxuICAgICAgICAnU3RyZWFtbGluZSBjb252ZXJzaW9uIHByb2Nlc3MgZm9yIHF1aWNrIGRlY2lkZXJzJ1xuICAgICAgXSxcbiAgICAgIGNvbmZpZGVuY2U6IDAuODFcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBjb21wcmVoZW5zaXZlIGNvbnRleHQgZm9yIHRhc2sgcHJvY2Vzc2luZ1xuICAgKi9cbiAgcHJpdmF0ZSBhc3luYyBnZXRDb250ZXh0Rm9yVGFzayh0YXNrOiBTdXByZW1lQUl2M1Rhc2spOiBQcm9taXNlPEFJQ29udGV4dD4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBzZXNzaW9uSWQgPSBgc2Vzc2lvbl8ke0RhdGUubm93KCl9XyR7TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDkpfWA7XG4gICAgICBjb25zdCBjb250ZXh0ID0gYXdhaXQgYWlDb250ZXh0QXdhcmVuZXNzU3lzdGVtLmdldENvbnRleHQodGFzay51c2VySWQsIHNlc3Npb25JZCk7XG4gICAgICByZXR1cm4gY29udGV4dDtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgbG9nZ2VyLndhcm4oJ0ZhaWxlZCB0byBnZXQgY29udGV4dCBmb3IgdGFzaycsIHsgXG4gICAgICAgIHRhc2tUeXBlOiB0YXNrLnR5cGUsXG4gICAgICAgIHVzZXJJZDogdGFzay51c2VySWQsXG4gICAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFN0cmluZyhlcnJvcilcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICAvLyBSZXR1cm4gbWluaW1hbCBjb250ZXh0IG9uIGZhaWx1cmVcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGlkOiAnZmFsbGJhY2tfY29udGV4dCcsXG4gICAgICAgIHVzZXJJZDogdGFzay51c2VySWQsXG4gICAgICAgIHNlc3Npb25JZDogJ2ZhbGxiYWNrJyxcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgICBjb25maWRlbmNlOiAwLjEsXG4gICAgICAgIGZyZXNobmVzczogMS4wXG4gICAgICB9IGFzIEFJQ29udGV4dDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVHJhY2sgdXNlciBiZWhhdmlvciBmb3IgY29udGV4dCBidWlsZGluZ1xuICAgKi9cbiAgcHJpdmF0ZSBhc3luYyB0cmFja1Rhc2tCZWhhdmlvcih0YXNrOiBTdXByZW1lQUl2M1Rhc2ssIGNvbnRleHQ6IEFJQ29udGV4dCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCBhaUNvbnRleHRBd2FyZW5lc3NTeXN0ZW0udHJhY2tCZWhhdmlvcihcbiAgICAgICAgdGFzay51c2VySWQsXG4gICAgICAgIGBzdXByZW1lX2FpXyR7dGFzay50eXBlfWAsXG4gICAgICAgIHtcbiAgICAgICAgICB0YXNrVHlwZTogdGFzay50eXBlLFxuICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgICBjb250ZXh0SWQ6IGNvbnRleHQuaWQsXG4gICAgICAgICAgY29uZmlkZW5jZTogY29udGV4dC5jb25maWRlbmNlLFxuICAgICAgICAgIHNlc3Npb25JZDogY29udGV4dC5zZXNzaW9uSWRcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgbG9nZ2VyLndhcm4oJ0ZhaWxlZCB0byB0cmFjayBiZWhhdmlvcicsIHsgXG4gICAgICAgIHRhc2tUeXBlOiB0YXNrLnR5cGUsXG4gICAgICAgIHVzZXJJZDogdGFzay51c2VySWQsXG4gICAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFN0cmluZyhlcnJvcilcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBBSSBwZXJtaXNzaW9ucyBmb3IgdGFza3NcbiAgICovXG4gIHByaXZhdGUgYXN5bmMgY2hlY2tUYXNrUGVybWlzc2lvbnModGFzazogU3VwcmVtZUFJdjNUYXNrKTogUHJvbWlzZTx7XG4gICAgYWxsb3dlZDogYm9vbGVhbjtcbiAgICByZWFzb24/OiBzdHJpbmc7XG4gICAgcmVxdWlyZWRQZXJtaXNzaW9ucz86IEFJUGVybWlzc2lvbltdO1xuICB9PiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIEdldCB1c2VyIGluZm9ybWF0aW9uXG4gICAgICBjb25zdCB1c2VyID0gYXdhaXQgcHJpc21hLnVzZXIuZmluZFVuaXF1ZSh7XG4gICAgICAgIHdoZXJlOiB7IGlkOiB0YXNrLnVzZXJJZCB9LFxuICAgICAgICBzZWxlY3Q6IHsgXG4gICAgICAgICAgaWQ6IHRydWUsXG4gICAgICAgICAgcm9sZTogdHJ1ZSwgXG4gICAgICAgICAgb3JnYW5pemF0aW9uSWQ6IHRydWUsXG4gICAgICAgICAgaXNBY3RpdmU6IHRydWUgXG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBpZiAoIXVzZXIgfHwgIXVzZXIuaXNBY3RpdmUpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBhbGxvd2VkOiBmYWxzZSxcbiAgICAgICAgICByZWFzb246ICdVc2VyIG5vdCBmb3VuZCBvciBpbmFjdGl2ZSdcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgLy8gTWFwIHRhc2sgdHlwZXMgdG8gcmVxdWlyZWQgcGVybWlzc2lvbnMgYW5kIG9wZXJhdGlvbnNcbiAgICAgIGNvbnN0IHRhc2tQZXJtaXNzaW9uTWFwOiBSZWNvcmQ8c3RyaW5nLCB7IFxuICAgICAgICBwZXJtaXNzaW9uczogQUlQZXJtaXNzaW9uW107IFxuICAgICAgICBvcGVyYXRpb24/OiBzdHJpbmc7IFxuICAgICAgfT4gPSB7XG4gICAgICAgICdxdWVzdGlvbic6IHtcbiAgICAgICAgICBwZXJtaXNzaW9uczogW0FJUGVybWlzc2lvbi5VU0VfQUlfQ0hBVF1cbiAgICAgICAgfSxcbiAgICAgICAgJ3Rhc2snOiB7XG4gICAgICAgICAgcGVybWlzc2lvbnM6IFtcbiAgICAgICAgICAgIEFJUGVybWlzc2lvbi5FWEVDVVRFX0NSRUFURV9UQVNLUyxcbiAgICAgICAgICAgIEFJUGVybWlzc2lvbi5BVVRPTk9NT1VTX1RBU0tfRVhFQ1VUSU9OXG4gICAgICAgICAgXSxcbiAgICAgICAgICBvcGVyYXRpb246ICd0YXNrX2V4ZWN1dGlvbidcbiAgICAgICAgfSxcbiAgICAgICAgJ2FuYWx5emUnOiB7XG4gICAgICAgICAgcGVybWlzc2lvbnM6IFtcbiAgICAgICAgICAgIEFJUGVybWlzc2lvbi5VU0VfQUlfQU5BTFlTSVMsXG4gICAgICAgICAgICBBSVBlcm1pc3Npb24uQUNDRVNTX0FOQUxZVElDU19EQVRBXG4gICAgICAgICAgXSxcbiAgICAgICAgICBvcGVyYXRpb246ICdhbmFseXplX2RhdGEnXG4gICAgICAgIH0sXG4gICAgICAgICdwcmVkaWN0Jzoge1xuICAgICAgICAgIHBlcm1pc3Npb25zOiBbXG4gICAgICAgICAgICBBSVBlcm1pc3Npb24uVVNFX0FJX1BSRURJQ1RJT04sXG4gICAgICAgICAgICBBSVBlcm1pc3Npb24uUFJFRElDVElWRV9BQ1RJT05TXG4gICAgICAgICAgXSxcbiAgICAgICAgICBvcGVyYXRpb246ICdwcmVkaWN0aW9uJ1xuICAgICAgICB9LFxuICAgICAgICAnY29udGVudCc6IHtcbiAgICAgICAgICBwZXJtaXNzaW9uczogW0FJUGVybWlzc2lvbi5VU0VfQUlfQ09OVEVOVF9HRU5FUkFUSU9OXSxcbiAgICAgICAgICBvcGVyYXRpb246ICdjb250ZW50X2dlbmVyYXRpb24nXG4gICAgICAgIH0sXG4gICAgICAgICdjdXN0b21lcic6IHtcbiAgICAgICAgICBwZXJtaXNzaW9uczogW1xuICAgICAgICAgICAgQUlQZXJtaXNzaW9uLlVTRV9BSV9BTkFMWVNJUyxcbiAgICAgICAgICAgIEFJUGVybWlzc2lvbi5BQ0NFU1NfQ09OVEFDVF9EQVRBXG4gICAgICAgICAgXSxcbiAgICAgICAgICBvcGVyYXRpb246ICdjdXN0b21lcl9hbmFseXNpcydcbiAgICAgICAgfSxcbiAgICAgICAgJ21hcmtldCc6IHtcbiAgICAgICAgICBwZXJtaXNzaW9uczogW1xuICAgICAgICAgICAgQUlQZXJtaXNzaW9uLlVTRV9BSV9BTkFMWVNJUyxcbiAgICAgICAgICAgIEFJUGVybWlzc2lvbi5BQ0NFU1NfQU5BTFlUSUNTX0RBVEFcbiAgICAgICAgICBdLFxuICAgICAgICAgIG9wZXJhdGlvbjogJ21hcmtldF9hbmFseXNpcydcbiAgICAgICAgfSxcbiAgICAgICAgJ2FkYXB0aXZlJzoge1xuICAgICAgICAgIHBlcm1pc3Npb25zOiBbXG4gICAgICAgICAgICBBSVBlcm1pc3Npb24uTEVBUk5JTkdfRlJPTV9EQVRBLFxuICAgICAgICAgICAgQUlQZXJtaXNzaW9uLkFVVE9OT01PVVNfVEFTS19FWEVDVVRJT05cbiAgICAgICAgICBdLFxuICAgICAgICAgIG9wZXJhdGlvbjogJ2FkYXB0aXZlX2xlYXJuaW5nJ1xuICAgICAgICB9LFxuICAgICAgICAnbGVhZHB1bHNlX2luc2lnaHRzJzoge1xuICAgICAgICAgIHBlcm1pc3Npb25zOiBbXG4gICAgICAgICAgICBBSVBlcm1pc3Npb24uVVNFX0FJX0FOQUxZU0lTLFxuICAgICAgICAgICAgQUlQZXJtaXNzaW9uLkFDQ0VTU19BTkFMWVRJQ1NfREFUQVxuICAgICAgICAgIF0sXG4gICAgICAgICAgb3BlcmF0aW9uOiAnbGVhZHB1bHNlX2FuYWx5c2lzJ1xuICAgICAgICB9LFxuICAgICAgICAnbGVhZHB1bHNlX3ByZWRpY3QnOiB7XG4gICAgICAgICAgcGVybWlzc2lvbnM6IFtcbiAgICAgICAgICAgIEFJUGVybWlzc2lvbi5VU0VfQUlfUFJFRElDVElPTixcbiAgICAgICAgICAgIEFJUGVybWlzc2lvbi5QUkVESUNUSVZFX0FDVElPTlNcbiAgICAgICAgICBdLFxuICAgICAgICAgIG9wZXJhdGlvbjogJ2xlYWRwdWxzZV9wcmVkaWN0aW9uJ1xuICAgICAgICB9LFxuICAgICAgICAnbGVhZHB1bHNlX29wdGltaXplJzoge1xuICAgICAgICAgIHBlcm1pc3Npb25zOiBbXG4gICAgICAgICAgICBBSVBlcm1pc3Npb24uQVVUT05PTU9VU19UQVNLX0VYRUNVVElPTixcbiAgICAgICAgICAgIEFJUGVybWlzc2lvbi5FWEVDVVRFX1VQREFURV9UQVNLU1xuICAgICAgICAgIF0sXG4gICAgICAgICAgb3BlcmF0aW9uOiAnbGVhZHB1bHNlX29wdGltaXphdGlvbidcbiAgICAgICAgfSxcbiAgICAgICAgJ2xlYWRwdWxzZV92aXNpdG9ycyc6IHtcbiAgICAgICAgICBwZXJtaXNzaW9uczogW1xuICAgICAgICAgICAgQUlQZXJtaXNzaW9uLlVTRV9BSV9BTkFMWVNJUyxcbiAgICAgICAgICAgIEFJUGVybWlzc2lvbi5BQ0NFU1NfQU5BTFlUSUNTX0RBVEFcbiAgICAgICAgICBdLFxuICAgICAgICAgIG9wZXJhdGlvbjogJ3Zpc2l0b3JfYW5hbHlzaXMnXG4gICAgICAgIH0sXG4gICAgICAgICdsZWFkcHVsc2Vfc2VnbWVudHMnOiB7XG4gICAgICAgICAgcGVybWlzc2lvbnM6IFtcbiAgICAgICAgICAgIEFJUGVybWlzc2lvbi5VU0VfQUlfQU5BTFlTSVMsXG4gICAgICAgICAgICBBSVBlcm1pc3Npb24uQUNDRVNTX0NPTlRBQ1RfREFUQVxuICAgICAgICAgIF0sXG4gICAgICAgICAgb3BlcmF0aW9uOiAnc2VnbWVudF9hbmFseXNpcydcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgY29uc3QgdGFza0NvbmZpZyA9IHRhc2tQZXJtaXNzaW9uTWFwW3Rhc2sudHlwZV07XG4gICAgICBpZiAoIXRhc2tDb25maWcpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBhbGxvd2VkOiBmYWxzZSxcbiAgICAgICAgICByZWFzb246IGBVbmtub3duIHRhc2sgdHlwZTogJHt0YXNrLnR5cGV9YCxcbiAgICAgICAgICByZXF1aXJlZFBlcm1pc3Npb25zOiBbQUlQZXJtaXNzaW9uLlVTRV9BSV9DSEFUXVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICAvLyBDaGVjayBpZiB1c2VyIGhhcyByZXF1aXJlZCBwZXJtaXNzaW9uc1xuICAgICAgZm9yIChjb25zdCBwZXJtaXNzaW9uIG9mIHRhc2tDb25maWcucGVybWlzc2lvbnMpIHtcbiAgICAgICAgaWYgKCFBSVBlcm1pc3Npb25TZXJ2aWNlLmhhc0FJUGVybWlzc2lvbih1c2VyLnJvbGUsIHBlcm1pc3Npb24pKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFsbG93ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgcmVhc29uOiBgTWlzc2luZyByZXF1aXJlZCBwZXJtaXNzaW9uOiAke3Blcm1pc3Npb259YCxcbiAgICAgICAgICAgIHJlcXVpcmVkUGVybWlzc2lvbnM6IHRhc2tDb25maWcucGVybWlzc2lvbnNcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIENoZWNrIG9wZXJhdGlvbi1zcGVjaWZpYyBwZXJtaXNzaW9ucyBpZiBhcHBsaWNhYmxlXG4gICAgICBpZiAodGFza0NvbmZpZy5vcGVyYXRpb24pIHtcbiAgICAgICAgY29uc3Qgb3BlcmF0aW9uUmVzdWx0ID0gYXdhaXQgY2hlY2tBSVBlcm1pc3Npb24oXG4gICAgICAgICAgdXNlci5pZCxcbiAgICAgICAgICB1c2VyLnJvbGUsXG4gICAgICAgICAgdXNlci5vcmdhbml6YXRpb25JZCB8fCAnJyxcbiAgICAgICAgICB0YXNrQ29uZmlnLm9wZXJhdGlvblxuICAgICAgICApO1xuXG4gICAgICAgIGlmICghb3BlcmF0aW9uUmVzdWx0LmFsbG93ZWQpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYWxsb3dlZDogZmFsc2UsXG4gICAgICAgICAgICByZWFzb246IG9wZXJhdGlvblJlc3VsdC5yZWFzb24gfHwgYE9wZXJhdGlvbiAke3Rhc2tDb25maWcub3BlcmF0aW9ufSBub3QgcGVybWl0dGVkYCxcbiAgICAgICAgICAgIHJlcXVpcmVkUGVybWlzc2lvbnM6IHRhc2tDb25maWcucGVybWlzc2lvbnNcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFNwZWNpYWwgcm9sZS1iYXNlZCByZXN0cmljdGlvbnNcbiAgICAgIGlmICh1c2VyLnJvbGUgPT09ICdVU0VSJykge1xuICAgICAgICAvLyBSZWd1bGFyIHVzZXJzIGhhdmUgYWRkaXRpb25hbCByZXN0cmljdGlvbnNcbiAgICAgICAgaWYgKFsndGFzaycsICdhZGFwdGl2ZSddLmluY2x1ZGVzKHRhc2sudHlwZSkpIHtcbiAgICAgICAgICAvLyBDaGVjayBpZiB0YXNrIGludm9sdmVzIGRhbmdlcm91cyBvcGVyYXRpb25zXG4gICAgICAgICAgaWYgKCdxdWVzdGlvbicgaW4gdGFzayAmJiB0YXNrLnF1ZXN0aW9uKSB7XG4gICAgICAgICAgICBjb25zdCBkYW5nZXJvdXNLZXl3b3JkcyA9IFsnZGVsZXRlJywgJ3JlbW92ZScsICdkZXN0cm95JywgJ2NhbmNlbCcsICd0ZXJtaW5hdGUnXTtcbiAgICAgICAgICAgIGNvbnN0IHF1ZXN0aW9uTG93ZXIgPSB0YXNrLnF1ZXN0aW9uLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChkYW5nZXJvdXNLZXl3b3Jkcy5zb21lKGtleXdvcmQgPT4gcXVlc3Rpb25Mb3dlci5pbmNsdWRlcyhrZXl3b3JkKSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBhbGxvd2VkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICByZWFzb246ICdVc2VycyBjYW5ub3QgcGVyZm9ybSBwb3RlbnRpYWxseSBkZXN0cnVjdGl2ZSBvcGVyYXRpb25zJyxcbiAgICAgICAgICAgICAgICByZXF1aXJlZFBlcm1pc3Npb25zOiBbQUlQZXJtaXNzaW9uLkVYRUNVVEVfREVMRVRFX1RBU0tTXVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBMb2cgcGVybWlzc2lvbiBncmFudFxuICAgICAgYXdhaXQgQUlQZXJtaXNzaW9uU2VydmljZS5sb2dQZXJtaXNzaW9uRXZlbnQoXG4gICAgICAgIHVzZXIuaWQsXG4gICAgICAgIHRhc2tDb25maWcub3BlcmF0aW9uIHx8IHRhc2sudHlwZSxcbiAgICAgICAgdHJ1ZSxcbiAgICAgICAgYFRhc2sgcGVybWlzc2lvbiBncmFudGVkIGZvciAke3Rhc2sudHlwZX1gXG4gICAgICApO1xuXG4gICAgICByZXR1cm4geyBhbGxvd2VkOiB0cnVlIH07XG5cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgbG9nZ2VyLmVycm9yKCdQZXJtaXNzaW9uIGNoZWNrIGZhaWxlZCcsIHtcbiAgICAgICAgdGFza1R5cGU6IHRhc2sudHlwZSxcbiAgICAgICAgdXNlcklkOiB0YXNrLnVzZXJJZCxcbiAgICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogU3RyaW5nKGVycm9yKVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGFsbG93ZWQ6IGZhbHNlLFxuICAgICAgICByZWFzb246ICdQZXJtaXNzaW9uIGNoZWNrIGZhaWxlZCAtIHN5c3RlbSBlcnJvcidcbiAgICAgIH07XG4gICAgfVxuICB9XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEV4cG9ydCBzaW5nbGV0b24gZm9yIGFwcGxpY2F0aW9uLXdpZGUgY29uc3VtcHRpb25cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IGNvbnN0IFN1cHJlbWVBSXYzID0gbmV3IFN1cHJlbWVBSVYzQ29yZSgpO1xuZXhwb3J0IGNvbnN0IHN1cHJlbWVBSXYzID0gU3VwcmVtZUFJdjM7XG5leHBvcnQgY29uc3Qgc3VwcmVtZUFJID0gU3VwcmVtZUFJdjM7ICJdLCJuYW1lcyI6WyJTdXByZW1lQUl2MyIsInN1cHJlbWVBSSIsInN1cHJlbWVBSXYzIiwiU3VwcmVtZUFJVjNDb3JlIiwiZW5zdXJlTWVtb3J5UmVhZHkiLCJwcm9jZXNzIiwiZW52IiwiVVNFX09QRU5BSV9PTkxZIiwiU1VQUkVNRV9BSV9NT0RFIiwibG9nZ2VyIiwiaW5mbyIsIkFJX0ZBTExCQUNLX01PREUiLCJzdXByZW1lTWVtb3J5IiwiaW5pdGlhbGl6ZSIsImVycm9yIiwid2FybiIsIkVycm9yIiwibWVzc2FnZSIsIlN0cmluZyIsInRhc2siLCJjb250ZXh0IiwiZ2V0Q29udGV4dEZvclRhc2siLCJ0cmFja1Rhc2tCZWhhdmlvciIsInBlcm1pc3Npb25SZXN1bHQiLCJjaGVja1Rhc2tQZXJtaXNzaW9ucyIsImFsbG93ZWQiLCJzdWNjZXNzIiwidGltZXN0YW1wIiwiRGF0ZSIsInRhc2tUeXBlIiwidHlwZSIsImRhdGEiLCJjb25maWRlbmNlIiwiZGVidWciLCJwZXJtaXNzaW9uRGVuaWVkIiwicmVhc29uIiwicmVxdWlyZWRQZXJtaXNzaW9ucyIsImNvbnRleHRJZCIsImlkIiwiaGFuZGxlUXVlc3Rpb24iLCJoYW5kbGVUYXNrRXhlY3V0aW9uIiwiaGFuZGxlQW5hbHl6ZSIsImhhbmRsZVByZWRpY3QiLCJoYW5kbGVDb250ZW50IiwiaGFuZGxlQ3VzdG9tZXIiLCJoYW5kbGVNYXJrZXQiLCJoYW5kbGVBZGFwdGl2ZSIsImhhbmRsZUxlYWRQdWxzZUluc2lnaHRzIiwiaGFuZGxlTGVhZFB1bHNlUHJlZGljdCIsImhhbmRsZUxlYWRQdWxzZU9wdGltaXplIiwiaGFuZGxlTGVhZFB1bHNlVmlzaXRvcnMiLCJoYW5kbGVMZWFkUHVsc2VTZWdtZW50cyIsInVzZXJJZCIsInF1ZXN0aW9uIiwiZW5hYmxlVGFza0V4ZWN1dGlvbiIsInF1ZXN0aW9uUHJldmlldyIsInN1YnN0cmluZyIsIm1vZGUiLCJjb250ZXh0UGFjayIsImdldENvbnRleHRGb3JSZXNwb25zZSIsInRhc2tFeGVjdXRpb25SZXN1bHQiLCJpbnRlbGxpZ2VudEV4ZWN1dGlvbkVuZ2luZSIsImV4ZWN1dGVVc2VyUmVxdWVzdCIsImRldGFpbHMiLCJtYXJrZXRTYWdlQ29udGV4dCIsImJ1aWxkTWFya2V0U2FnZUNvbnRleHQiLCJlbmhhbmNlZENvbnRleHQiLCJjb250ZXh0U3VtbWFyeSIsInJlY2VudEFjdGl2aXR5IiwicmFnQ29udGV4dCIsInJhZ1Jlc3VsdCIsInJhZ1F1ZXJ5IiwiY29udGV4dERvY3MiLCJtYXAiLCJkb2MiLCJ0ZXh0Iiwiam9pbiIsInJhZ0Vycm9yIiwiY29udmVyc2F0aW9uSGlzdG9yeSIsIm1lc3NhZ2VzIiwic2xpY2UiLCJtc2ciLCJyb2xlIiwiY29udGVudCIsImFpSW5zdGFuY2UiLCJnZXRBSUluc3RhbmNlIiwiYWlSZXNwb25zZSIsImdlbmVyYXRlUmVzcG9uc2UiLCJtb2RlbCIsIk9QRU5BSV9NT0RFTCIsInRlbXBlcmF0dXJlIiwibWF4VG9rZW5zIiwic3RvcmVNZW1vcnkiLCJhbnN3ZXIiLCJtZXRhZGF0YSIsInNvdXJjZSIsInRhc2tFeGVjdXRlZCIsInVzYWdlIiwiaW1wb3J0YW5jZSIsInRhZ3MiLCJtZW1vcnlFcnJvciIsInNvdXJjZXMiLCJtZW1vcnlDb250ZXh0IiwibGVuZ3RoIiwidGFza0V4ZWN1dGlvbiIsImFpTW9kZWwiLCJoYXNSQUdDb250ZXh0IiwiY29udmVyc2F0aW9uTGVuZ3RoIiwic3RhcnRUaW1lIiwibm93IiwidXNlclJvbGUiLCJ1c2VyIiwicHJpc21hIiwiZmluZFVuaXF1ZSIsIndoZXJlIiwic2VsZWN0Iiwic2FmZVJlcXVlc3QiLCJvcGVyYXRpb24iLCJwYXJhbWV0ZXJzIiwicHJpb3JpdHkiLCJ0aW1lb3V0TXMiLCJtYXhSZXRyaWVzIiwiZHJ5UnVuIiwic2FmZVJlc3VsdCIsImFpU2FmZUV4ZWN1dGlvbkVuZ2luZSIsImV4ZWN1dGVTYWZlbHkiLCJhcHByb3ZhbFJlcXVpcmVkIiwicmlza0xldmVsIiwidG9VcHBlckNhc2UiLCJhcHByb3ZhbElkIiwid2FybmluZ3MiLCJyZXF1aXJlc0FwcHJvdmFsIiwiZXhlY3V0aW9uSWQiLCJzYWZlRXhlY3V0aW9uIiwic2FmZXR5QmxvY2tlZCIsInJlY29tbWVuZGF0aW9ucyIsImV4ZWN1dGlvbkZhaWxlZCIsImV4ZWN1dGlvblRpbWUiLCJyZXN1bHQiLCJKU09OIiwic3RyaW5naWZ5Iiwicm9sbGJhY2tJZCIsImV4ZWN1dGlvbk1vZGUiLCJleGVjdXRpb25SZXN1bHQiLCJpbmNsdWRlIiwib3JnYW5pemF0aW9uIiwiY29tbWFuZENvbnRleHQiLCJidXNpbmVzc0NvbnRleHQiLCJpbmR1c3RyeSIsIm1hcmtldCIsImNvdW50cnkiLCJvcmdhbml6YXRpb25TaXplIiwiY3VycmVudEdvYWxzIiwidXNlclByZWZlcmVuY2VzIiwiY29tbXVuaWNhdGlvblN0eWxlIiwicmlza1RvbGVyYW5jZSIsImF1dG9tYXRpb25MZXZlbCIsIm5scFJlc3VsdCIsImVuaGFuY2VkTkxQUGFyc2VyIiwicGFyc2VDb21tYW5kIiwiY29tbWFuZCIsImNvbXBsZXhpdHkiLCJzdGVwQ291bnQiLCJleGVjdXRpb25QbGFuIiwic3RlcCIsImkiLCJkZXNjcmlwdGlvbiIsIk1hdGgiLCJjZWlsIiwiZXN0aW1hdGVkVGltZSIsImVuaGFuY2VkTkxQIiwic3RlcFJlc3VsdHMiLCJvcGVyYXRpb25SZXF1ZXN0IiwicmFuZG9tIiwidG9TdHJpbmciLCJzdWJzdHIiLCJvcGVyYXRpb25UeXBlIiwiYWN0aW9uIiwidG9Mb3dlckNhc2UiLCJlbnRpdHkiLCJhZmZlY3RlZFJlY29yZHMiLCJzZXNzaW9uSWQiLCJpcEFkZHJlc3MiLCJ1c2VyQWdlbnQiLCJzYWZldHlBc3Nlc3NtZW50Iiwic2FmZXR5QXBwcm92YWxTeXN0ZW0iLCJhc3Nlc3NPcGVyYXRpb24iLCJhZGRUb0hpc3RvcnkiLCJjYW5Qcm9jZWVkIiwicmVxdWlyZWRBcHByb3ZhbHMiLCJhcHByb3ZhbFJlcXVlc3QiLCJyZXF1ZXN0QXBwcm92YWwiLCJvcmRlciIsInN0ZXBOdW1iZXIiLCJyZXN0cmljdGlvbnMiLCJpc0FwcHJvdmVkIiwiaXNPcGVyYXRpb25BcHByb3ZlZCIsInN0ZXBDb250ZXh0Iiwib3JnYW5pemF0aW9uSWQiLCJzdGVwUmVzdWx0IiwidW5pdmVyc2FsVGFza0V4ZWN1dGlvbkVuZ2luZSIsImV4ZWN1dGUiLCJvcGVyYXRpb25JZCIsInBhcmFtcyIsInB1c2giLCJyIiwicGFydGlhbFJlc3VsdHMiLCJmYWlsZWRBdCIsIm11bHRpU3RlcEV4ZWN1dGlvbiIsImZhaWxlZFN0ZXAiLCJzdGVwRXJyb3IiLCJjYXRlZ29yeSIsInJlY29yZFRhc2tFeGVjdXRpb24iLCJzdWdnZXN0aW9ucyIsInVuaXZlcnNhbEVycm9yIiwidGFza0RldGFpbHMiLCJ0YXNrRGV0ZWN0ZWQiLCJlcnJvck1lc3NhZ2UiLCJzdGFjayIsInVuZGVmaW5lZCIsImFuYWx5c2lzUmVzdWx0IiwiYW5hbHlzaXNEYXRhIiwiYW5hbHlzaXNUeXBlIiwiZGF0YVR5cGUiLCJPYmplY3QiLCJrZXlzIiwiZmFsbGJhY2tDb250ZXh0Iiwib3JpZ2luYWxFcnJvciIsImFuYWx5c2lzQ29udGV4dCIsIm5vRGF0YURldGVjdGVkIiwibG93ZXJRdWVzdGlvbiIsImFmcmljYW5GaW50ZWNoIiwiYnVzaW5lc3NQcmluY2lwbGVzIiwibWFya2V0SW5zaWdodHMiLCJuaWdlcmlhIiwibW9iaWxlUGVuZXRyYXRpb24iLCJwcmVmZXJyZWRQYXltZW50IiwicGVha0hvdXJzIiwiY3VsdHVyYWxOb3RlIiwibGFuZ3VhZ2VzIiwidHJ1c3RGYWN0b3JzIiwia2VueWEiLCJzb3V0aF9hZnJpY2EiLCJnaGFuYSIsImZpbnRlY2hHdWlkYW5jZSIsInRpbWluZyIsIm1lc3NhZ2luZyIsImNvbXBsaWFuY2UiLCJidXNpbmVzc1ByaW5jaXBsZSIsImZsb29yIiwibWFya2V0Q29udGV4dCIsImdldFJlbGV2YW50TWFya2V0Q29udGV4dCIsImdldFJlbGV2YW50RmludGVjaFNlY3JldHMiLCJiYXNlQ29udGV4dCIsImluY2x1ZGVzIiwicmVsZXZhbnRNYXJrZXRzIiwiZm9yRWFjaCIsImZpbnRlY2hTZWNyZXRzIiwic2VjcmV0cyIsImVudHJpZXMiLCJrZXkiLCJ2YWx1ZSIsInJlcGxhY2UiLCJkZXRlY3RBbmRFeGVjdXRlVGFzayIsInRhc2tQYXR0ZXJucyIsImRldGVjdGVkVGFza1R5cGUiLCJwYXR0ZXJucyIsInBhdHRlcm4iLCJpbnRlbnQiLCJhbmFseXplVXNlckludGVudCIsImVudGl0aWVzIiwiZXh0cmFjdEVudGl0aWVzIiwiY3JlYXRlQWR2YW5jZWRXb3JrZmxvdyIsImNyZWF0ZUNvbXByZWhlbnNpdmVBdXRvbWF0aW9uIiwiY3JlYXRlSW50ZWxsaWdlbnRDYW1wYWlnbiIsImNyZWF0ZUFkdmFuY2VkU2VnbWVudCIsImdlbmVyYXRlQ3VsdHVyYWxDb250ZW50IiwiY3JlYXRlQW5kQXNzaWduVGVhbVRhc2siLCJjcmVhdGVPbmJvYXJkaW5nQXV0b21hdGlvbiIsImNyZWF0ZVdoYXRzQXBwQXV0b21hdGlvbiIsImNyZWF0ZVNNU0F1dG9tYXRpb24iLCJjcmVhdGVDcm9zc0JvcmRlckF1dG9tYXRpb24iLCJleHRyYWN0VGFza1BhcmFtZXRlcnMiLCJleGVjdXRlVGFza1ZpYUFQSSIsImNyZWF0ZUFJVGFza1JlY29yZCIsInN1bW1hcnkiLCJlcnJvclN0YWNrIiwidG9JU09TdHJpbmciLCJzdWdnZXN0aW9uIiwidXNlckZyaWVuZGx5TWVzc2FnZSIsIndvcmtmbG93VHlwZSIsIm9iamVjdGl2ZSIsInRhcmdldE1hcmtldCIsIndvcmtmbG93IiwiY3JlYXRlIiwibmFtZSIsImNoYXJBdCIsInN0YXR1cyIsImRlZmluaXRpb24iLCJhaUdlbmVyYXRlZCIsImN1bHR1cmFsSW50ZWxsaWdlbmNlIiwiZ2V0TWFya2V0SW50ZWxsaWdlbmNlIiwibm9kZXMiLCJnZW5lcmF0ZUFkdmFuY2VkV29ya2Zsb3dOb2RlcyIsImVkZ2VzIiwiZ2VuZXJhdGVJbnRlbGxpZ2VudFdvcmtmbG93RWRnZXMiLCJ0cmlnZ2VycyIsImdlbmVyYXRlQ29udGV4dHVhbFRyaWdnZXJzIiwiZ2V0Q29tcGxpYW5jZVJlcXVpcmVtZW50cyIsImdldE9wdGltYWxUaW1pbmdTdHJhdGVneSIsInBlcnNvbmFsaXphdGlvbiIsImdldFBlcnNvbmFsaXphdGlvblJ1bGVzIiwiY3JlYXRlZEJ5SWQiLCJ3b3JrZmxvd05vZGUiLCJ3b3JrZmxvd0lkIiwiY29uZmlnIiwiY3VsdHVyYWxDb250ZXh0IiwiY29tcGxpYW5jZU5vdGVzIiwibG9jYWxpemF0aW9ucyIsImdldExvY2FsaXphdGlvbkRhdGEiLCJwb3NpdGlvblgiLCJwb3NpdGlvblkiLCJ0cmlnZ2VyIiwid29ya2Zsb3dUcmlnZ2VyIiwibWFya2V0T3B0aW1pemF0aW9uIiwiZ2V0TWFya2V0T3B0aW1pemF0aW9uIiwiY3VsdHVyYWxDb25zaWRlcmF0aW9ucyIsImdldEN1bHR1cmFsQ29uc2lkZXJhdGlvbnMiLCJ3b3JrZmxvd05hbWUiLCJub2Rlc0NyZWF0ZWQiLCJ0cmlnZ2Vyc1NldHVwIiwiY29tcGxpYW5jZVJlYWR5IiwibmV4dFN0ZXBzIiwiYXV0b21hdGlvblR5cGUiLCJ0YXJnZXRBdWRpZW5jZSIsImF1ZGllbmNlIiwibWFya2V0SW50ZWxsaWdlbmNlIiwiZ2V0Q29tcHJlaGVuc2l2ZU1hcmtldERhdGEiLCJnZW5lcmF0ZUNvbnRleHR1YWxBdXRvbWF0aW9uTm9kZXMiLCJjdWx0dXJhbEFkYXB0YXRpb25zIiwiZ2V0Q3VsdHVyYWxBZGFwdGF0aW9ucyIsImNvbXBsaWFuY2VGcmFtZXdvcmsiLCJnZXRDb21wbGlhbmNlRnJhbWV3b3JrIiwicGVyZm9ybWFuY2VNZXRyaWNzIiwiZ2V0QWZyaWNhbkZpbnRlY2hLUElzIiwidGVhbU1lbWJlcnMiLCJmaW5kQXBwcm9wcmlhdGVUZWFtTWVtYmVycyIsIm1hbmFnZW1lbnRUYXNrcyIsInNldHVwVGFzayIsInRpdGxlIiwiY3JlYXRvcklkIiwiYXNzaWduZWVJZCIsImR1ZURhdGUiLCJjb250ZW50VGVhbSIsImZpbHRlciIsIm0iLCJjb250ZW50VGFzayIsImF1dG9tYXRpb25TdGVwcyIsInN0ZXBzR2VuZXJhdGVkIiwidGFza3NBc3NpZ25lZCIsImVzdGltYXRlZFNldHVwVGltZSIsImV4cGVjdGVkTGlmdCIsImNhbGN1bGF0ZUV4cGVjdGVkUGVyZm9ybWFuY2VMaWZ0IiwiY2FtcGFpZ25UeXBlIiwiY2FtcGFpZ24iLCJlbWFpbENhbXBhaWduIiwic3ViamVjdCIsImdlbmVyYXRlQ3VsdHVyYWxseUludGVsbGlnZW50U3ViamVjdCIsImdlbmVyYXRlQ3VsdHVyYWxseUludGVsbGlnZW50Q29udGVudCIsInNjaGVkdWxlZEF0IiwiY3JlYXRlZEJ5IiwiY2FtcGFpZ25JZCIsImZvbGxvd1VwU2VxdWVuY2UiLCJnZW5lcmF0ZUZvbGxvd1VwU2VxdWVuY2UiLCJjYW1wYWlnbk5hbWUiLCJ3b3JrZmxvd1N1cHBvcnQiLCJlc3RpbWF0ZWRSZWFjaCIsImVzdGltYXRlQ2FtcGFpZ25SZWFjaCIsImN1bHR1cmFsTm90ZXMiLCJnZXRDYW1wYWlnbkN1bHR1cmFsTm90ZXMiLCJjb21wbGlhbmNlU3RhdHVzIiwiY29udGVudFR5cGUiLCJwdXJwb3NlIiwiY3JlYXRlQ3VsdHVyYWxseUludGVsbGlnZW50Q29udGVudCIsInRlbXBsYXRlIiwiZW1haWxUZW1wbGF0ZSIsImJvZHkiLCJ0ZW1wbGF0ZUlkIiwiY3VsdHVyYWxFbGVtZW50cyIsImVzdGltYXRlZEVuZ2FnZW1lbnQiLCJlc3RpbWF0ZUNvbnRlbnRFbmdhZ2VtZW50IiwidXNlclR5cGUiLCJzdGVwcyIsImdlbmVyYXRlT25ib2FyZGluZ1N0ZXBzIiwiZ2V0T25ib2FyZGluZ0N1bHR1cmFsTm90ZXMiLCJjb21wbGlhbmNlUmVxdWlyZW1lbnRzIiwiZ2V0T25ib2FyZGluZ0NvbXBsaWFuY2UiLCJ0cnVzdEJ1aWxkZXJzIiwiZ2V0VHJ1c3RCdWlsZGluZ0VsZW1lbnRzIiwiZWR1Y2F0aW9uYWxDb250ZW50IiwiZ2V0RWR1Y2F0aW9uYWxDb250ZW50Iiwic3RlcHNDcmVhdGVkIiwiZXN0aW1hdGVkQ29tcGxldGlvblJhdGUiLCJlc3RpbWF0ZU9uYm9hcmRpbmdDb21wbGV0aW9uIiwid2FDYW1wYWlnbiIsIndoYXRzQXBwQ2FtcGFpZ24iLCJnZW5lcmF0ZVdoYXRzQXBwTWVzc2FnZSIsIndhVGVtcGxhdGUiLCJ3aGF0c0FwcFRlbXBsYXRlIiwiZ2VuZXJhdGVXaGF0c0FwcFRlbXBsYXRlIiwidGVtcGxhdGVOYW1lIiwiZ2V0V2hhdHNBcHBDdWx0dXJhbEVsZW1lbnRzIiwiZXN0aW1hdGVXaGF0c0FwcEVuZ2FnZW1lbnQiLCJsb2NhbGl6ZWRHcmVldGluZyIsImdldExvY2FsaXplZEdyZWV0aW5nIiwic21zQ2FtcGFpZ24iLCJzTVNDYW1wYWlnbiIsImdlbmVyYXRlU01TTWVzc2FnZSIsInNtc1RlbXBsYXRlIiwic01TVGVtcGxhdGUiLCJnZW5lcmF0ZVNNU1RlbXBsYXRlIiwiY2Fycmllck9wdGltaXphdGlvbiIsImdldFNNU0NhcnJpZXJPcHRpbWl6YXRpb24iLCJjaGFyYWN0ZXJMaW1pdCIsImdldFNNU0NoYXJhY3RlckxpbWl0IiwiZGVsaXZlcnlUaW1lIiwiZ2V0T3B0aW1hbFNNU1RpbWluZyIsImVzdGltYXRlZERlbGl2ZXJ5Iiwic291cmNlTWFyayIsInNvdXJjZU1hcmtldCIsImdldENyb3NzQm9yZGVyQ29tcGxpYW5jZSIsImN1cnJlbmN5SGFuZGxpbmciLCJnZXRDdXJyZW5jeUhhbmRsaW5nIiwicmVndWxhdG9yeVJlcXVpcmVtZW50cyIsImdldFJlZ3VsYXRvcnlSZXF1aXJlbWVudHMiLCJwYXJ0bmVySW50ZWdyYXRpb25zIiwiZ2V0UGFydG5lckludGVncmF0aW9ucyIsInJlZ3VsYXRvcnlBbGlnbm1lbnQiLCJjdXJyZW5jeVN1cHBvcnQiLCJnZXRDdXJyZW5jeVBhaXJzIiwiZXN0aW1hdGVkUHJvY2Vzc2luZ1RpbWUiLCJlc3RpbWF0ZUNyb3NzQm9yZGVyVGltZSIsImZpbmRNYW55IiwiaXNBY3RpdmUiLCJpbiIsImVtYWlsIiwidGFrZSIsImxpZnRNYXAiLCJiYXNlTm9kZXMiLCJjdWx0dXJhbFZhbGlkYXRpb24iLCJkZWxheSIsImdldE9wdGltYWxEZWxheSIsInJlYXNvbmluZyIsImRlbGF5TWFwIiwibWFya2V0cyIsImluc2lnaHRzIiwiY3VsdHVyYWxGYWN0b3JzIiwicGF5bWVudFByZWZlcmVuY2VzIiwiZ3JlZXRpbmdzIiwiZ2V0Q3VsdHVyYWxNZXNzYWdpbmciLCJ0cnVzdCIsImRhdGFQcm90ZWN0aW9uIiwiZmluYW5jaWFsUmVndWxhdGlvbiIsImNyb3NzQm9yZGVyIiwicHJpdmFjeSIsImFjdGl2YXRpb24iLCJlbmdhZ2VtZW50IiwicmV0ZW50aW9uIiwic2F0aXNmYWN0aW9uIiwiZm9ybWF0VGFza1RpdGxlIiwidGl0bGVNYXAiLCJsIiwiZ2VuZXJhdGVDYW1wYWlnblN1YmplY3QiLCJzdWJqZWN0TWFwIiwiZ2VuZXJhdGVDYW1wYWlnbkNvbnRlbnQiLCJnZW5lcmF0ZUNvbnRleHR1YWxDb250ZW50IiwiZGV0ZWN0SW50ZW50VHlwZSIsImRldGVjdE9iamVjdGl2ZSIsImRldGVjdEF1ZGllbmNlIiwiZGV0ZWN0Q29tcGxleGl0eSIsInVyZ2VuY3kiLCJkZXRlY3RVcmdlbmN5IiwiZGV0ZWN0VGFza1R5cGUiLCJkZXRlY3RQcmlvcml0eSIsImFzc2lnbmVlIiwiZGV0ZWN0QXNzaWduZWUiLCJkZXRlY3RVc2VyVHlwZSIsImRldGVjdFB1cnBvc2UiLCJleHRyYWN0RW50aXR5VHlwZSIsImV4dHJhY3RNYXJrZXQiLCJleHRyYWN0Q291bnRyeSIsImV4dHJhY3RJbmR1c3RyeSIsImNyaXRlcmlhIiwiZXh0cmFjdENyaXRlcmlhIiwiZXh0cmFjdEF1ZGllbmNlIiwiZXh0cmFjdFRhc2siLCJleHRyYWN0UHJpb3JpdHkiLCJleHRyYWN0QXNzaWduZWUiLCJleHRyYWN0VXNlclR5cGUiLCJleHRyYWN0UHVycG9zZSIsImV4dHJhY3RTb3VyY2VNYXJrZXQiLCJleHRyYWN0VGFyZ2V0TWFya2V0IiwiZXh0cmFjdENvbXBsZXhpdHkiLCJnZW5lcmF0ZURlZmF1bHROYW1lIiwiY2hhbm5lbHMiLCJkdXJhdGlvbiIsInNlZ21lbnRUeXBlIiwic2VnbWVudENyaXRlcmlhIiwiZ2VuZXJhdGVBZHZhbmNlZFNlZ21lbnRDcml0ZXJpYSIsInNlZ21lbnQiLCJnZXRTZWdtZW50Q3VsdHVyYWxJbnRlbGxpZ2VuY2UiLCJiZWhhdmlvcmFsVHJpZ2dlcnMiLCJnZXRCZWhhdmlvcmFsVHJpZ2dlcnMiLCJnZXRNYXJrZXRDb250ZXh0IiwiY29tcGxpYW5jZUNvbnNpZGVyYXRpb25zIiwiZ2V0U2VnbWVudENvbXBsaWFuY2UiLCJzZWdtZW50SWQiLCJzZWdtZW50TmFtZSIsImVzdGltYXRlZFNpemUiLCJlc3RpbWF0ZVNlZ21lbnRTaXplIiwicmVjb21tZW5kZWRDYW1wYWlnbnMiLCJnZXRSZWNvbW1lbmRlZENhbXBhaWducyIsImdldFNlZ21lbnRDdWx0dXJhbE5vdGVzIiwiY3JlYXRvciIsImFzc2lnbmVlUm9sZSIsInZhbGlkUHJpb3JpdGllcyIsIm5vcm1hbGl6ZWRQcmlvcml0eSIsImZpbmRGaXJzdCIsIm5vdCIsIm9yZGVyQnkiLCJsYXN0TG9naW4iLCJzZWxmQXNzaWduZWUiLCJyZXF1aXJlZFJvbGVzIiwiYXZhaWxhYmxlQWN0aW9ucyIsImZpbmFsQXNzaWduZWUiLCJnZW5lcmF0ZUFmcmljYW5GaW50ZWNoVGFza1RpdGxlIiwiZ2VuZXJhdGVBZnJpY2FuRmludGVjaFRhc2tEZXNjcmlwdGlvbiIsImNhbGN1bGF0ZVRhc2tEdXJhdGlvbiIsInRhc2tDb21tZW50IiwidGFza0lkIiwiZ2VuZXJhdGVUYXNrR3VpZGFuY2UiLCJjb21tZW50RXJyb3IiLCJ0YXNrVGl0bGUiLCJhc3NpZ25lZU5hbWUiLCJndWlkYW5jZSIsImVzdGltYXRlZER1cmF0aW9uIiwic2VsZkFzc2lnbmVkIiwiZXJyb3JUeXBlIiwiYmFzZURlc2NyaXB0aW9uIiwid29yZHMiLCJzcGxpdCIsInciLCJpbnRlbGxpZ2VuY2UiLCJwcmVmZXJyZWRDaGFubmVscyIsInRyaWdnZXJUeXBlIiwiY3VsdHVyYWxUaW1pbmciLCJtYXJrZXRWYWxpZGF0aW9uIiwiYWN0aW9uVHlwZSIsImN1bHR1cmFsQWRhcHRhdGlvbiIsImVsZW1lbnRzIiwicmlza0ZhY3RvcnMiLCJnZXRDaHVyblJpc2tGYWN0b3JzIiwidGltaW5nU3RyYXRlZ2llcyIsIm9wdGltYWxIb3VycyIsInRpbWV6b25lIiwiYXZvaWREYXlzIiwiY3VsdHVyYWxFdmVudHMiLCJ0YXJnZXQiLCJjb25kaXRpb24iLCJ0cmlnZ2VyTWFwIiwib25ib2FyZGluZyIsImltbWVkaWF0ZSIsImRheXMiLCJ0aHJlc2hvbGQiLCJjb252ZXJzaW9uIiwicGFnZSIsImJhc2VUcmlnZ2VyIiwibG9jYWxpemVkVGltaW5nIiwiY3VycmVuY3kiLCJiYXNlQ3JpdGVyaWEiLCJydWxlcyIsImdldFNlZ21lbnRSdWxlcyIsImJlaGF2aW9yYWwiLCJlbmdhZ2VtZW50X2Jhc2VkIiwidHJhbnNhY3Rpb25fYmFzZWQiLCJkZW1vZ3JhcGhpYyIsImFnZV9iYXNlZCIsImxvY2F0aW9uX2Jhc2VkIiwicmVzcG9uc2UiLCJmZXRjaCIsIm1ldGhvZCIsImhlYWRlcnMiLCJvayIsImpzb24iLCJzdGF0dXNUZXh0IiwidmFsdWVfYmFzZWQiLCJub3RlcyIsImZlYXR1cmVzIiwidGFyZ2V0cyIsImZlYXR1cmVzTGVuZ3RoIiwidGFyZ2V0c0xlbmd0aCIsInByZWRpY3Rpb24iLCJzdXByZW1lQXV0b01MIiwicHJlZGljdCIsIm1vZGVsVHlwZSIsInByZWRpY3Rpb25zIiwidG9GaXhlZCIsImZlYXR1cmVJbXBvcnRhbmNlIiwicHJlZGljdGlvbnNDb3VudCIsImNvbnRlbnRMZW5ndGgiLCJjb250ZW50QW5hbHlzaXMiLCJvcmlnaW5hbENvbnRlbnQiLCJnZW5lcmF0ZUNvbnRlbnRSZWNvbW1lbmRhdGlvbnMiLCJjdXN0b21lcnMiLCJjdXN0b21lcnNDb3VudCIsImN1c3RvbWVySW5zaWdodHMiLCJhbmFseXplQ3VzdG9tZXJCZWhhdmlvciIsImhpZ2hWYWx1ZUNvdW50IiwiY2h1cm5SaXNrQ291bnQiLCJjdXN0b21lckNvdW50Iiwic2VnbWVudGF0aW9ucyIsImdlbmVyYXRlQ3VzdG9tZXJTZWdtZW50YXRpb25zIiwiYWN0aW9uYWJsZVJlY29tbWVuZGF0aW9ucyIsImN1c3RvbWVyc0FuYWx5emVkIiwibWFya2V0RGF0YSIsIm1hcmtldEFuYWx5c2lzIiwiYW5hbHl6ZUFmcmljYW5NYXJrZXREYXRhIiwib3Bwb3J0dW5pdHlTY29yZSIsImdyb3d0aFBvdGVudGlhbCIsImtleUluc2lnaHRzIiwicmVjb21tZW5kZWRBY3Rpb25zIiwiY29tcGV0aXRpdmVJbnNpZ2h0cyIsInJlZ3VsYXRvcnlDb25zaWRlcmF0aW9ucyIsInJlZ3VsYXRvcnkiLCJtYXJrZXRzQW5hbHl6ZWQiLCJkYXRhS2V5cyIsImFkYXB0aXZlUmVzdWx0IiwicGVyZm9ybUFkYXB0aXZlTGVhcm5pbmciLCJlZmZlY3RpdmVuZXNzIiwiaW1wcm92ZW1lbnRzIiwiYWRhcHRpdmVSZXN1bHRzIiwibW9kZWxVcGRhdGVzIiwicGVyZm9ybWFuY2VHYWlucyIsImRhdGFQcm9jZXNzZWQiLCJjb250ZXh0TGVuZ3RoIiwiaGlnaFZhbHVlIiwiY291bnQiLCJzdHJhdGVneSIsImNodXJuUmlzayIsImdyb3dpbmciLCJ2ZXJzaW9uIiwiYWNjdXJhY3kiLCJzcGVlZCIsImVmZmljaWVuY3kiLCJ0aW1lUmFuZ2UiLCJsZWFkUHVsc2VEYXRhIiwiZ2F0aGVyTGVhZFB1bHNlRGF0YSIsImdlbmVyYXRlTGVhZFB1bHNlSW5zaWdodHMiLCJzdXByZW1lU2NvcmUiLCJjYWxjdWxhdGVMZWFkUHVsc2VTdXByZW1lU2NvcmUiLCJtZXRyaWNzIiwib3Bwb3J0dW5pdGllcyIsInRpbWVmcmFtZSIsImhpc3RvcmljYWxEYXRhIiwiZ2V0TGVhZFB1bHNlSGlzdG9yaWNhbERhdGEiLCJwcmVwYXJlTGVhZFB1bHNlRmVhdHVyZXMiLCJwcmVkaWN0aW9uSW5zaWdodHMiLCJnZW5lcmF0ZVByZWRpY3Rpb25JbnNpZ2h0cyIsInAiLCJ0cmVuZHMiLCJmYWN0b3JzIiwiaW5mbHVlbmNpbmdGYWN0b3JzIiwiZm9ybUlkIiwiZ29hbHMiLCJmdW5uZWxEYXRhIiwiYW5hbHl6ZUZ1bm5lbFBlcmZvcm1hbmNlIiwib3B0aW1pemF0aW9uS25vd2xlZGdlIiwib3B0aW1pemF0aW9ucyIsImdlbmVyYXRlT3B0aW1pemF0aW9uUmVjb21tZW5kYXRpb25zIiwiY29udmVyc2lvblJhdGUiLCJkcm9wT2ZmUG9pbnRzIiwibyIsImltcGFjdCIsImFjdGlvblBsYW4iLCJhIiwiY3VycmVudFBlcmZvcm1hbmNlIiwicHJlZGljdGVkSW1wcm92ZW1lbnQiLCJ2aXNpdG9ySWQiLCJ2aXNpdG9yRGF0YSIsImdldFZpc2l0b3JCZWhhdmlvckRhdGEiLCJiZWhhdmlvcmFsQW5hbHlzaXMiLCJhbmFseXplQmVoYXZpb3JQYXR0ZXJucyIsInByb2ZpbGVzIiwiZ2VuZXJhdGVWaXNpdG9yUHJvZmlsZXMiLCJzZWdtZW50cyIsInMiLCJ2aXNpdG9yUHJvZmlsZXMiLCJjcml0ZXJpYUtleXMiLCJzZWdtZW50YXRpb25EYXRhIiwiZ2V0VmlzaXRvclNlZ21lbnRhdGlvbkRhdGEiLCJzbWFydFNlZ21lbnRzIiwicGVyZm9ybUFJU2VnbWVudGF0aW9uIiwic2VnbWVudEFuYWx5c2lzIiwiYW5hbHl6ZVNlZ21lbnRQZXJmb3JtYW5jZSIsInRvcFNlZ21lbnRzIiwic2l6ZSIsImFuYWx5c2lzIiwiZnJvbURhdGUiLCJzZXREYXRlIiwiZ2V0RGF0ZSIsInRvdGFsVmlzaXRvcnMiLCJjb252ZXJzaW9ucyIsImF2ZXJhZ2VTZXNzaW9uRHVyYXRpb24iLCJib3VuY2VSYXRlIiwidG9wUGFnZXMiLCJ0cmFmZmljU291cmNlcyIsIm9yZ2FuaWMiLCJkaXJlY3QiLCJzb2NpYWwiLCJwYWlkIiwidG9EYXRlIiwiZWZmb3J0Iiwib3JnYW5pY1RyYWZmaWMiLCJtZXRyaWMiLCJ0cmVuZCIsInNjb3JlIiwibWF4IiwibWluIiwidHJhZmZpYyIsInN0YWdlcyIsInZpc2l0b3JzIiwia25vd2xlZGdlIiwic2Vzc2lvbnMiLCJwYWdlcyIsImNvbnZlcnNpb25Qcm9iYWJpbGl0eSIsImJlaGF2aW9yRGF0YSIsImRlbW9ncmFwaGljRGF0YSIsImVuZ2FnZW1lbnREYXRhIiwiY2hhcmFjdGVyaXN0aWNzIiwiYWlDb250ZXh0QXdhcmVuZXNzU3lzdGVtIiwiZ2V0Q29udGV4dCIsImZyZXNobmVzcyIsInRyYWNrQmVoYXZpb3IiLCJ0YXNrUGVybWlzc2lvbk1hcCIsInBlcm1pc3Npb25zIiwiQUlQZXJtaXNzaW9uIiwiVVNFX0FJX0NIQVQiLCJFWEVDVVRFX0NSRUFURV9UQVNLUyIsIkFVVE9OT01PVVNfVEFTS19FWEVDVVRJT04iLCJVU0VfQUlfQU5BTFlTSVMiLCJBQ0NFU1NfQU5BTFlUSUNTX0RBVEEiLCJVU0VfQUlfUFJFRElDVElPTiIsIlBSRURJQ1RJVkVfQUNUSU9OUyIsIlVTRV9BSV9DT05URU5UX0dFTkVSQVRJT04iLCJBQ0NFU1NfQ09OVEFDVF9EQVRBIiwiTEVBUk5JTkdfRlJPTV9EQVRBIiwiRVhFQ1VURV9VUERBVEVfVEFTS1MiLCJ0YXNrQ29uZmlnIiwicGVybWlzc2lvbiIsIkFJUGVybWlzc2lvblNlcnZpY2UiLCJoYXNBSVBlcm1pc3Npb24iLCJvcGVyYXRpb25SZXN1bHQiLCJjaGVja0FJUGVybWlzc2lvbiIsImRhbmdlcm91c0tleXdvcmRzIiwicXVlc3Rpb25Mb3dlciIsInNvbWUiLCJrZXl3b3JkIiwiRVhFQ1VURV9ERUxFVEVfVEFTS1MiLCJsb2dQZXJtaXNzaW9uRXZlbnQiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Q0FZQzs7Ozs7Ozs7Ozs7SUF1MEhZQSxXQUFXO2VBQVhBOztJQUVBQyxTQUFTO2VBQVRBOztJQURBQyxXQUFXO2VBQVhBOzs7OEJBcjBIaUI7MkJBQ0w7OEJBQ0s7bUNBQ0E7d0JBQ1A7K0RBQ0o7c0NBQ2lCOzRDQUNPOzhDQUNFO21DQUNVO3NDQUNLO29DQU1yRDt1Q0FJQTswQ0FJQTs7Ozs7O0FBaUNQLGdDQUFnQztBQUNoQyxxQkFBcUI7QUFDckIsZ0NBQWdDO0FBRWhDLE1BQU1DO0lBQ0osTUFBY0Msb0JBQW9CO1FBQ2hDLElBQUk7WUFDRix1Q0FBdUM7WUFDdkMsSUFBSUMsUUFBUUMsR0FBRyxDQUFDQyxlQUFlLEtBQUssVUFBVUYsUUFBUUMsR0FBRyxDQUFDRSxlQUFlLEtBQUssWUFBWTtnQkFDeEZDLGNBQU0sQ0FBQ0MsSUFBSSxDQUFDO2dCQUNaO1lBQ0Y7WUFFQSxJQUFJTCxRQUFRQyxHQUFHLENBQUNLLGdCQUFnQixLQUFLLFVBQVVOLFFBQVFDLEdBQUcsQ0FBQ0UsZUFBZSxLQUFLLFlBQVk7Z0JBQ3pGLDhDQUE4QztnQkFDOUM7WUFDRjtZQUNBLE1BQU1JLDJCQUFhLENBQUNDLFVBQVU7UUFDaEMsRUFBRSxPQUFPQyxPQUFPO1lBQ2RMLGNBQU0sQ0FBQ00sSUFBSSxDQUFDLG9FQUFvRTtnQkFBRUQsT0FBT0EsaUJBQWlCRSxRQUFRRixNQUFNRyxPQUFPLEdBQUdDLE9BQU9KO1lBQU87UUFDbEo7SUFDRjtJQUVBLE1BQU1ULFFBQVFjLElBQXFC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