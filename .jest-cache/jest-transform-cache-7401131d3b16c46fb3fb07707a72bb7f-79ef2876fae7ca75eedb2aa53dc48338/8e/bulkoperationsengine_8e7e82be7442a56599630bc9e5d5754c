8a4a5d453c53fdf79a5ac116c183c5c3
/**
 * Bulk Operations AI Engine
 * ========================
 * Intelligent system for handling mass contact, campaign, and data operations
 * Optimizes performance and provides progress tracking for large-scale operations
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    BulkOperationsEngine: function() {
        return BulkOperationsEngine;
    },
    bulkOperationsEngine: function() {
        return bulkOperationsEngine;
    }
});
const _logger = require("../logger");
const _prisma = /*#__PURE__*/ _interop_require_default(require("../db/prisma"));
const _transactionmanager = require("../security/transaction-manager");
const _authorization = require("../security/authorization");
const _inputvalidation = require("../security/input-validation");
const _ratelimiter = require("../security/rate-limiter");
const _zod = require("zod");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Validation schemas for bulk operations
const bulkOperationSchemas = {
    contactImport: _zod.z.object({
        data: _zod.z.array(_zod.z.object({
            firstName: _zod.z.string().min(1, 'First name required'),
            lastName: _zod.z.string().min(1, 'Last name required'),
            email: _zod.z.string().email('Invalid email'),
            phone: _zod.z.string().optional(),
            company: _zod.z.string().optional(),
            jobTitle: _zod.z.string().optional(),
            tags: _zod.z.array(_zod.z.string()).optional(),
            customFields: _zod.z.record(_zod.z.any()).optional(),
            listIds: _zod.z.array(_zod.z.string()).optional()
        })).min(1, 'At least one contact required').max(10000, 'Too many contacts'),
        options: _zod.z.object({
            batchSize: _zod.z.number().min(1).max(1000).default(100),
            continueOnError: _zod.z.boolean().default(true),
            validateData: _zod.z.boolean().default(true),
            dryRun: _zod.z.boolean().default(false),
            deduplicateBy: _zod.z.enum([
                'email',
                'phone',
                'email+phone'
            ]).default('email')
        })
    }),
    contactUpdate: _zod.z.object({
        filters: _zod.z.object({
            contactIds: _zod.z.array(_zod.z.string()).optional(),
            listIds: _zod.z.array(_zod.z.string()).optional(),
            tags: _zod.z.array(_zod.z.string()).optional(),
            segmentIds: _zod.z.array(_zod.z.string()).optional(),
            createdAfter: _zod.z.coerce.date().optional(),
            createdBefore: _zod.z.coerce.date().optional()
        }).refine((data)=>Object.values(data).some((val)=>val !== undefined), 'At least one filter required'),
        updates: _zod.z.object({
            tags: _zod.z.array(_zod.z.string()).optional(),
            customFields: _zod.z.record(_zod.z.any()).optional(),
            isActive: _zod.z.boolean().optional(),
            addToLists: _zod.z.array(_zod.z.string()).optional(),
            removeFromLists: _zod.z.array(_zod.z.string()).optional()
        }),
        options: _zod.z.object({
            batchSize: _zod.z.number().min(1).max(1000).default(100),
            continueOnError: _zod.z.boolean().default(true),
            dryRun: _zod.z.boolean().default(false)
        })
    }),
    campaignSend: _zod.z.object({
        campaignId: _zod.z.string().min(1, 'Campaign ID required'),
        recipients: _zod.z.object({
            type: _zod.z.enum([
                'all',
                'lists',
                'segments',
                'contacts'
            ]),
            ids: _zod.z.array(_zod.z.string()).optional(),
            filters: _zod.z.record(_zod.z.any()).optional()
        }),
        options: _zod.z.object({
            batchSize: _zod.z.number().min(1).max(1000).default(100),
            delayBetweenBatches: _zod.z.number().min(0).max(300).default(5),
            testMode: _zod.z.boolean().default(false),
            scheduleAt: _zod.z.coerce.date().optional()
        })
    })
};
class BulkOperationsEngine {
    constructor(){
        this.activeOperations = new Map();
        this.operationQueue = [];
        this.isProcessing = false;
        this.maxConcurrentOperations = 3;
        this.startProcessor();
        this.startCleanup();
    }
    /**
   * Execute bulk contact import
   */ async executeContactImport(request, userId, userRole, organizationId) {
        // Validate permissions
        const authResult = await _authorization.AuthorizationService.validateBulkOperation(userId, userRole, organizationId, _authorization.Permission.BULK_CONTACT_OPERATIONS, request.data.length);
        if (!authResult.allowed) {
            throw new Error(authResult.reason || 'Bulk operation not allowed');
        }
        // Validate input
        const validation = (0, _inputvalidation.validateRequest)(bulkOperationSchemas.contactImport, request, 'contact_import');
        if (!validation.success) {
            throw new Error(`Validation failed: ${validation.errors?.join(', ')}`);
        }
        const validatedRequest = validation.data;
        // Check rate limits
        const rateLimitResult = _ratelimiter.rateLimiters.api.check(userId, '/bulk/contact-import');
        if (!rateLimitResult.allowed) {
            throw new Error('Rate limit exceeded for bulk operations');
        }
        // Create operation
        const operationId = await this.createOperation({
            type: 'contact_import',
            data: validatedRequest.data,
            options: validatedRequest.options,
            userId,
            organizationId
        });
        // Execute operation
        if (validatedRequest.options.dryRun) {
            return await this.executeDryRun(operationId, 'contact_import', validatedRequest);
        } else {
            this.queueOperation(operationId);
            return {
                success: true,
                operationId,
                summary: {
                    totalRecords: validatedRequest.data.length,
                    successfulRecords: 0,
                    failedRecords: 0,
                    skippedRecords: 0,
                    duplicatesFound: 0,
                    executionTime: 0
                },
                errors: []
            };
        }
    }
    /**
   * Execute bulk contact update
   */ async executeContactUpdate(request, userId, userRole, organizationId) {
        // Validate permissions
        const canUpdate = _authorization.AuthorizationService.hasPermission(userRole, _authorization.Permission.BULK_CONTACT_OPERATIONS);
        if (!canUpdate) {
            throw new Error('Insufficient permissions for bulk contact updates');
        }
        // Validate input
        const validation = (0, _inputvalidation.validateRequest)(bulkOperationSchemas.contactUpdate, request, 'contact_update');
        if (!validation.success) {
            throw new Error(`Validation failed: ${validation.errors?.join(', ')}`);
        }
        const validatedRequest = validation.data;
        // Get matching contacts count first
        const contactCount = await this.getContactCount(validatedRequest.filters, organizationId);
        // Check bulk operation limits
        const authResult = await _authorization.AuthorizationService.validateBulkOperation(userId, userRole, organizationId, _authorization.Permission.BULK_CONTACT_OPERATIONS, contactCount);
        if (!authResult.allowed) {
            throw new Error(authResult.reason || 'Bulk operation limit exceeded');
        }
        // Create operation
        const operationId = await this.createOperation({
            type: 'contact_update',
            filters: validatedRequest.filters,
            data: [
                validatedRequest.updates
            ],
            options: validatedRequest.options,
            userId,
            organizationId
        });
        // Execute operation
        if (validatedRequest.options.dryRun) {
            return await this.executeDryRun(operationId, 'contact_update', validatedRequest);
        } else {
            this.queueOperation(operationId);
            return {
                success: true,
                operationId,
                summary: {
                    totalRecords: contactCount,
                    successfulRecords: 0,
                    failedRecords: 0,
                    skippedRecords: 0,
                    duplicatesFound: 0,
                    executionTime: 0
                },
                errors: []
            };
        }
    }
    /**
   * Execute bulk campaign sending
   */ async executeCampaignSend(request, userId, userRole, organizationId) {
        // Validate permissions
        const canSend = _authorization.AuthorizationService.hasAllPermissions(userRole, [
            _authorization.Permission.SEND_CAMPAIGN,
            _authorization.Permission.BULK_CONTACT_OPERATIONS
        ]);
        if (!canSend) {
            throw new Error('Insufficient permissions for bulk campaign sending');
        }
        // Validate input
        const validation = (0, _inputvalidation.validateRequest)(bulkOperationSchemas.campaignSend, request, 'campaign_send');
        if (!validation.success) {
            throw new Error(`Validation failed: ${validation.errors?.join(', ')}`);
        }
        const validatedRequest = validation.data;
        // Verify campaign exists and user has access
        const campaign = await _prisma.default.emailCampaign.findFirst({
            where: {
                id: validatedRequest.campaignId,
                organizationId,
                status: 'DRAFT'
            }
        });
        if (!campaign) {
            throw new Error('Campaign not found or not in draft status');
        }
        // Get recipient count
        const recipientCount = await this.getRecipientCount(validatedRequest.recipients, organizationId);
        // Check sending limits
        const authResult = await _authorization.AuthorizationService.validateBulkOperation(userId, userRole, organizationId, _authorization.Permission.SEND_CAMPAIGN, recipientCount);
        if (!authResult.allowed) {
            throw new Error(authResult.reason || 'Campaign sending limit exceeded');
        }
        // Create operation
        const operationId = await this.createOperation({
            type: 'campaign_send',
            data: [
                validatedRequest
            ],
            options: validatedRequest.options,
            userId,
            organizationId
        });
        // Schedule or queue operation
        if (validatedRequest.options.scheduleAt) {
            await this.scheduleOperation(operationId, validatedRequest.options.scheduleAt);
        } else {
            this.queueOperation(operationId);
        }
        return {
            success: true,
            operationId,
            summary: {
                totalRecords: recipientCount,
                successfulRecords: 0,
                failedRecords: 0,
                skippedRecords: 0,
                duplicatesFound: 0,
                executionTime: 0
            },
            errors: []
        };
    }
    /**
   * Get operation status
   */ getOperationStatus(operationId) {
        return this.activeOperations.get(operationId) || null;
    }
    /**
   * Cancel operation
   */ async cancelOperation(operationId, userId, userRole) {
        const operation = this.activeOperations.get(operationId);
        if (!operation) {
            return false;
        }
        // Check if user can cancel this operation
        if (operation.userId !== userId && userRole !== 'SUPER_ADMIN') {
            throw new Error('Cannot cancel operation - insufficient permissions');
        }
        if (operation.status === 'processing') {
            operation.status = 'cancelled';
            _logger.logger.info('Bulk operation cancelled', {
                operationId,
                userId,
                type: operation.type,
                progress: operation.progress
            });
        }
        return true;
    }
    /**
   * Create new bulk operation
   */ async createOperation(request) {
        const operationId = `bulk_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        const dataLength = Array.isArray(request.data) ? request.data.length : request.filters ? await this.getFilteredCount(request.filters, request.organizationId) : 0;
        const operation = {
            id: operationId,
            type: request.type,
            status: 'pending',
            progress: {
                total: dataLength,
                processed: 0,
                successful: 0,
                failed: 0,
                percentage: 0
            },
            batchSize: request.options.batchSize || 100,
            estimatedTime: this.estimateExecutionTime(request.type, dataLength),
            errors: [],
            metadata: {
                options: request.options,
                filters: request.filters,
                transformations: request.transformations
            },
            userId: request.userId,
            organizationId: request.organizationId
        };
        this.activeOperations.set(operationId, operation);
        _logger.logger.info('Bulk operation created', {
            operationId,
            type: request.type,
            userId: request.userId,
            totalRecords: dataLength,
            estimatedTime: operation.estimatedTime
        });
        return operationId;
    }
    /**
   * Queue operation for processing
   */ queueOperation(operationId) {
        this.operationQueue.push(operationId);
        this.processQueue();
    }
    /**
   * Process operation queue
   */ async processQueue() {
        if (this.isProcessing || this.operationQueue.length === 0) {
            return;
        }
        this.isProcessing = true;
        try {
            const activeCount = Array.from(this.activeOperations.values()).filter((op)=>op.status === 'processing').length;
            if (activeCount >= this.maxConcurrentOperations) {
                this.isProcessing = false;
                return;
            }
            const operationId = this.operationQueue.shift();
            if (operationId) {
                await this.executeOperation(operationId);
            }
        } finally{
            this.isProcessing = false;
            // Continue processing if there are more operations
            if (this.operationQueue.length > 0) {
                setTimeout(()=>this.processQueue(), 1000);
            }
        }
    }
    /**
   * Execute a specific operation
   */ async executeOperation(operationId) {
        const operation = this.activeOperations.get(operationId);
        if (!operation) {
            return;
        }
        operation.status = 'processing';
        operation.startedAt = new Date();
        try {
            switch(operation.type){
                case 'contact_import':
                    await this.processContactImport(operation);
                    break;
                case 'contact_update':
                    await this.processContactUpdate(operation);
                    break;
                case 'campaign_send':
                    await this.processCampaignSend(operation);
                    break;
                default:
                    throw new Error(`Unsupported operation type: ${operation.type}`);
            }
            operation.status = 'completed';
            operation.completedAt = new Date();
            _logger.logger.info('Bulk operation completed', {
                operationId,
                type: operation.type,
                executionTime: Date.now() - (operation.startedAt?.getTime() || 0),
                summary: operation.progress
            });
        } catch (error) {
            operation.status = 'failed';
            operation.completedAt = new Date();
            const errorMessage = error instanceof Error ? error.message : String(error);
            operation.errors.push({
                id: `err_${Date.now()}`,
                batchIndex: -1,
                error: errorMessage,
                timestamp: new Date(),
                retryable: false
            });
            _logger.logger.error('Bulk operation failed', {
                operationId,
                type: operation.type,
                error: errorMessage,
                progress: operation.progress
            });
        }
    }
    /**
   * Process contact import operation
   */ async processContactImport(operation) {
        const contacts = operation.metadata.data || [];
        const options = operation.metadata.options || {};
        // Process in batches
        for(let i = 0; i < contacts.length; i += operation.batchSize){
            if (operation.status === 'cancelled') {
                break;
            }
            const batch = contacts.slice(i, i + operation.batchSize);
            try {
                await (0, _transactionmanager.withTransaction)(operation.userId, operation.id, `Contact import batch ${Math.floor(i / operation.batchSize) + 1}`, async (transactionId)=>{
                    await this.processBatchContactImport(batch, operation, transactionId);
                });
                operation.progress.processed += batch.length;
                operation.progress.successful += batch.length;
            } catch (error) {
                const errorMessage = error instanceof Error ? error.message : String(error);
                if (options.continueOnError) {
                    operation.progress.processed += batch.length;
                    operation.progress.failed += batch.length;
                    operation.errors.push({
                        id: `err_${Date.now()}`,
                        batchIndex: Math.floor(i / operation.batchSize),
                        error: errorMessage,
                        timestamp: new Date(),
                        retryable: true
                    });
                } else {
                    throw error;
                }
            }
            // Update progress
            operation.progress.percentage = Math.round(operation.progress.processed / operation.progress.total * 100);
            // Small delay between batches to prevent overwhelming the system
            await new Promise((resolve)=>setTimeout(resolve, 100));
        }
    }
    /**
   * Process single batch of contact imports
   */ async processBatchContactImport(contacts, operation, transactionId) {
        const deduplicatedContacts = this.deduplicateContacts(contacts);
        for (const contact of deduplicatedContacts){
            await _transactionmanager.TransactionManager.executeStep(transactionId, `import_contact_${contact.email}`, 'CREATE', 'CONTACT', async (tx)=>{
                return await tx.contact.create({
                    data: {
                        firstName: contact.firstName,
                        lastName: contact.lastName,
                        email: contact.email,
                        phone: contact.phone,
                        company: contact.company,
                        jobTitle: contact.jobTitle,
                        tags: contact.tags || [],
                        customFields: contact.customFields || {},
                        organizationId: operation.organizationId,
                        createdById: operation.userId,
                        isActive: true
                    }
                });
            });
        }
    }
    /**
   * Deduplicate contacts based on criteria
   */ deduplicateContacts(contacts) {
        const seen = new Set();
        const deduplicated = [];
        for (const contact of contacts){
            const key = contact.email.toLowerCase();
            if (!seen.has(key)) {
                seen.add(key);
                deduplicated.push(contact);
            }
        }
        return deduplicated;
    }
    /**
   * Helper functions for counting records
   */ async getContactCount(filters, organizationId) {
        const whereClause = this.buildContactWhereClause(filters, organizationId);
        return await _prisma.default.contact.count({
            where: whereClause
        });
    }
    async getRecipientCount(recipients, organizationId) {
        switch(recipients.type){
            case 'all':
                return await _prisma.default.contact.count({
                    where: {
                        organizationId,
                        isActive: true
                    }
                });
            case 'lists':
                return await _prisma.default.contact.count({
                    where: {
                        organizationId,
                        isActive: true,
                        lists: {
                            some: {
                                id: {
                                    in: recipients.ids
                                }
                            }
                        }
                    }
                });
            case 'contacts':
                return recipients.ids?.length || 0;
            default:
                return 0;
        }
    }
    buildContactWhereClause(filters, organizationId) {
        const where = {
            organizationId
        };
        if (filters.contactIds) {
            where.id = {
                in: filters.contactIds
            };
        }
        if (filters.tags && filters.tags.length > 0) {
            where.tags = {
                hasSome: filters.tags
            };
        }
        if (filters.createdAfter) {
            where.createdAt = {
                ...where.createdAt,
                gte: filters.createdAfter
            };
        }
        if (filters.createdBefore) {
            where.createdAt = {
                ...where.createdAt,
                lte: filters.createdBefore
            };
        }
        return where;
    }
    async getFilteredCount(filters, organizationId) {
        return await this.getContactCount(filters, organizationId);
    }
    estimateExecutionTime(type, recordCount) {
        const timePerRecord = {
            'contact_import': 0.5,
            'contact_update': 0.2,
            'campaign_send': 1.0,
            'contact_export': 0.1
        };
        return Math.ceil(recordCount * (timePerRecord[type] || 0.5));
    }
    /**
   * Execute dry run to preview operation results
   */ async executeDryRun(operationId, type, request) {
        // Simulate operation without making changes
        const totalRecords = Array.isArray(request.data) ? request.data.length : 0;
        return {
            success: true,
            operationId,
            summary: {
                totalRecords,
                successfulRecords: Math.floor(totalRecords * 0.95),
                failedRecords: Math.floor(totalRecords * 0.05),
                skippedRecords: 0,
                duplicatesFound: Math.floor(totalRecords * 0.1),
                executionTime: 0
            },
            errors: [],
            data: request.data?.slice(0, 10) // Return first 10 records as preview
        };
    }
    /**
   * Additional operation processing methods would be implemented here
   */ async processContactUpdate(operation) {
    // Implementation for bulk contact updates
    }
    async processCampaignSend(operation) {
    // Implementation for bulk campaign sending
    }
    async scheduleOperation(operationId, scheduleAt) {
    // Implementation for scheduling operations
    }
    /**
   * Start background processor
   */ startProcessor() {
        // Process queue every 5 seconds
        setInterval(()=>{
            this.processQueue();
        }, 5000);
    }
    /**
   * Start cleanup process
   */ startCleanup() {
        // Clean up completed operations every hour
        setInterval(()=>{
            this.cleanupCompletedOperations();
        }, 60 * 60 * 1000);
    }
    cleanupCompletedOperations() {
        const cutoff = Date.now() - 24 * 60 * 60 * 1000; // 24 hours ago
        let cleaned = 0;
        for (const [operationId, operation] of this.activeOperations){
            if (operation.status === 'completed' || operation.status === 'failed') {
                const completedTime = operation.completedAt?.getTime() || 0;
                if (completedTime < cutoff) {
                    this.activeOperations.delete(operationId);
                    cleaned++;
                }
            }
        }
        if (cleaned > 0) {
            _logger.logger.info('Bulk operations cleanup completed', {
                operationsRemoved: cleaned,
                remainingOperations: this.activeOperations.size
            });
        }
    }
}
const bulkOperationsEngine = new BulkOperationsEngine();

//# sourceMappingURL=data:application/json;base64,