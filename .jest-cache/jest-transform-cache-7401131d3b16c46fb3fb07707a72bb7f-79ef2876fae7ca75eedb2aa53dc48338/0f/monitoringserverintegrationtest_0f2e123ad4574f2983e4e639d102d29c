2375007443bb67e1b3a6d466509b97be
/**
 * Monitoring MCP Server Integration Tests
 * 
 * These tests verify the Monitoring MCP server works correctly with real monitoring
 * metrics, system health data, and business KPI tracking.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jest = require("@jest/jest");
const _monitoringserver = require("../../../mcp/servers/monitoring-server");
const _setup = require("./setup");
(0, _jest.describe)('Monitoring MCP Server Integration Tests', ()=>{
    let server;
    let dbManager;
    let performanceTracker;
    let authContext;
    (0, _jest.beforeAll)(async ()=>{
        dbManager = _setup.TestDatabaseManager.getInstance();
        await dbManager.setup();
        performanceTracker = new _setup.PerformanceTracker();
        server = new _monitoringserver.MonitoringMCPServer({
            rateLimiting: {
                enabled: false
            }
        });
        authContext = {
            organizationId: 'test-org-1',
            userId: 'test-user-1',
            role: 'ADMIN',
            permissions: [
                'read:monitoring',
                'read:metrics'
            ]
        };
    }, _setup.testConfig.timeouts.database);
    (0, _jest.afterAll)(async ()=>{
        await dbManager.teardown();
    });
    (0, _jest.beforeEach)(()=>{
        performanceTracker.reset();
    });
    (0, _jest.describe)('Monitoring Metrics Data Integrity', ()=>{
        (0, _jest.test)('should verify monitoring metrics data structure and relationships', async ()=>{
            const metrics = await _setup.testPrisma.mCPMonitoringMetrics.findMany({
                include: {
                    organization: true
                }
            });
            (0, _jest.expect)(metrics.length).toBeGreaterThan(0);
            let globalMetrics = 0;
            let orgSpecificMetrics = 0;
            for (const metric of metrics){
                // Verify basic structure
                (0, _jest.expect)(metric.id).toBeDefined();
                (0, _jest.expect)(metric.category).toBeDefined();
                (0, _jest.expect)(metric.metricName).toBeDefined();
                (0, _jest.expect)(typeof metric.metricValue).toBe('number');
                (0, _jest.expect)(metric.unit).toBeDefined();
                (0, _jest.expect)(metric.timestamp).toBeInstanceOf(Date);
                // Verify categories
                const validCategories = [
                    'business',
                    'system',
                    'security',
                    'infrastructure',
                    'system_overview'
                ];
                (0, _jest.expect)(validCategories).toContain(metric.category);
                // Verify alert levels
                const validAlertLevels = [
                    'info',
                    'warning',
                    'critical'
                ];
                (0, _jest.expect)(validAlertLevels).toContain(metric.alertLevel);
                // Count global vs org-specific metrics
                if (metric.organizationId) {
                    orgSpecificMetrics++;
                    (0, _jest.expect)(metric.organization).toBeDefined();
                } else {
                    globalMetrics++;
                }
                // Verify metadata structure
                if (metric.metadata) {
                    const metadata = JSON.parse(metric.metadata);
                    (0, _jest.expect)(typeof metadata).toBe('object');
                }
                // Verify tags structure
                if (metric.tags) {
                    const tags = JSON.parse(metric.tags);
                    (0, _jest.expect)(Array.isArray(tags)).toBe(true);
                }
            }
            (0, _jest.expect)(globalMetrics).toBeGreaterThan(0); // Should have global system metrics
            console.log(`✅ Verified ${metrics.length} monitoring metrics (${globalMetrics} global, ${orgSpecificMetrics} org-specific)`);
        });
        (0, _jest.test)('should validate comprehensive monitoring snapshot structure', async ()=>{
            // Find the comprehensive monitoring snapshot
            const snapshot = await _setup.testPrisma.mCPMonitoringMetrics.findFirst({
                where: {
                    metricName: 'comprehensive_monitoring',
                    category: 'system_overview'
                }
            });
            (0, _jest.expect)(snapshot).toBeDefined();
            (0, _jest.expect)(snapshot.metadata).toBeDefined();
            const monitoringData = JSON.parse(snapshot.metadata);
            // Verify main sections
            (0, _jest.expect)(monitoringData).toHaveProperty('business_metrics');
            (0, _jest.expect)(monitoringData).toHaveProperty('system_metrics');
            (0, _jest.expect)(monitoringData).toHaveProperty('security_metrics');
            (0, _jest.expect)(monitoringData).toHaveProperty('infrastructure_health');
            (0, _jest.expect)(monitoringData).toHaveProperty('alerts');
            (0, _jest.expect)(monitoringData).toHaveProperty('overall_health_score');
            // Verify business metrics
            const businessMetrics = monitoringData.business_metrics;
            (0, _jest.expect)(businessMetrics).toHaveProperty('total_users');
            (0, _jest.expect)(businessMetrics).toHaveProperty('total_organizations');
            (0, _jest.expect)(businessMetrics).toHaveProperty('total_contacts');
            (0, _jest.expect)(businessMetrics).toHaveProperty('total_campaigns');
            (0, _jest.expect)(businessMetrics).toHaveProperty('monthly_recurring_revenue');
            (0, _jest.expect)(businessMetrics).toHaveProperty('conversion_rate');
            // Verify system metrics
            const systemMetrics = monitoringData.system_metrics;
            (0, _jest.expect)(systemMetrics).toHaveProperty('avg_response_time');
            (0, _jest.expect)(systemMetrics).toHaveProperty('error_rate_percentage');
            (0, _jest.expect)(systemMetrics).toHaveProperty('cpu_usage_percentage');
            (0, _jest.expect)(systemMetrics).toHaveProperty('memory_usage_percentage');
            (0, _jest.expect)(systemMetrics).toHaveProperty('uptime_percentage');
            // Verify security metrics
            const securityMetrics = monitoringData.security_metrics;
            (0, _jest.expect)(securityMetrics).toHaveProperty('security_score');
            (0, _jest.expect)(securityMetrics).toHaveProperty('compliance_score');
            (0, _jest.expect)(securityMetrics).toHaveProperty('failed_login_attempts_today');
            // Verify infrastructure health
            const infraHealth = monitoringData.infrastructure_health;
            (0, _jest.expect)(Array.isArray(infraHealth)).toBe(true);
            for (const component of infraHealth){
                (0, _jest.expect)(component).toHaveProperty('name');
                (0, _jest.expect)(component).toHaveProperty('type');
                (0, _jest.expect)(component).toHaveProperty('status');
                (0, _jest.expect)(component).toHaveProperty('health_score');
                (0, _jest.expect)(component).toHaveProperty('response_time_ms');
            }
            // Verify alerts
            const alerts = monitoringData.alerts;
            (0, _jest.expect)(Array.isArray(alerts)).toBe(true);
            for (const alert of alerts){
                (0, _jest.expect)(alert).toHaveProperty('name');
                (0, _jest.expect)(alert).toHaveProperty('condition');
                (0, _jest.expect)(alert).toHaveProperty('severity');
                (0, _jest.expect)(alert).toHaveProperty('threshold');
                (0, _jest.expect)(alert).toHaveProperty('current_value');
                (0, _jest.expect)(alert).toHaveProperty('is_triggered');
            }
            // Verify African market insights
            (0, _jest.expect)(monitoringData).toHaveProperty('market_insights');
            const marketInsights = monitoringData.market_insights;
            (0, _jest.expect)(marketInsights).toHaveProperty('mobile_vs_desktop_ratio');
            (0, _jest.expect)(marketInsights).toHaveProperty('whatsapp_adoption_rate');
            (0, _jest.expect)(marketInsights).toHaveProperty('currency_distribution');
            console.log('✅ Comprehensive monitoring snapshot structure validated');
        });
    });
    (0, _jest.describe)('System Health Monitoring', ()=>{
        (0, _jest.test)('should retrieve system health overview', async ()=>{
            performanceTracker.start();
            const result = await server.readResource('monitoring://system-health', {
                organizationId: 'test-org-1'
            }, authContext);
            const duration = performanceTracker.measure('systemHealth');
            (0, _jest.expect)(result.success).toBe(true);
            (0, _jest.expect)(result.data).toBeDefined();
            const data = result.data;
            (0, _jest.expect)(data).toHaveProperty('overallHealth');
            (0, _jest.expect)(data).toHaveProperty('components');
            (0, _jest.expect)(data).toHaveProperty('metrics');
            (0, _jest.expect)(data).toHaveProperty('alerts');
            // Verify overall health score
            (0, _jest.expect)(data.overallHealth.score).toBeGreaterThanOrEqual(0);
            (0, _jest.expect)(data.overallHealth.score).toBeLessThanOrEqual(100);
            (0, _jest.expect)(data.overallHealth.status).toBeDefined();
            // Verify components
            (0, _jest.expect)(Array.isArray(data.components)).toBe(true);
            for (const component of data.components){
                (0, _jest.expect)(component).toHaveProperty('name');
                (0, _jest.expect)(component).toHaveProperty('status');
                (0, _jest.expect)(component).toHaveProperty('healthScore');
                (0, _jest.expect)(component).toHaveProperty('responseTime');
                (0, _jest.expect)([
                    'healthy',
                    'degraded',
                    'unhealthy'
                ]).toContain(component.status);
            }
            // Verify metrics
            (0, _jest.expect)(data.metrics).toHaveProperty('responseTime');
            (0, _jest.expect)(data.metrics).toHaveProperty('errorRate');
            (0, _jest.expect)(data.metrics).toHaveProperty('throughput');
            (0, _jest.expect)(data.metrics).toHaveProperty('uptime');
            (0, _jest.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxResponseTime);
            console.log(`✅ Retrieved system health with ${data.components.length} components in ${duration}ms`);
        });
        (0, _jest.test)('should monitor business KPIs and metrics', async ()=>{
            performanceTracker.start();
            const result = await server.readResource('monitoring://business-metrics', {
                organizationId: 'test-org-1',
                timeRange: 'last_30_days'
            }, authContext);
            const duration = performanceTracker.measure('businessMetrics');
            (0, _jest.expect)(result.success).toBe(true);
            const data = result.data;
            (0, _jest.expect)(data).toHaveProperty('kpis');
            (0, _jest.expect)(data).toHaveProperty('growth');
            (0, _jest.expect)(data).toHaveProperty('conversion');
            (0, _jest.expect)(data).toHaveProperty('revenue');
            // Verify KPIs
            const kpis = data.kpis;
            (0, _jest.expect)(kpis).toHaveProperty('totalUsers');
            (0, _jest.expect)(kpis).toHaveProperty('activeUsers');
            (0, _jest.expect)(kpis).toHaveProperty('totalOrganizations');
            (0, _jest.expect)(kpis).toHaveProperty('totalCampaigns');
            (0, _jest.expect)(kpis.totalUsers).toBeGreaterThanOrEqual(0);
            (0, _jest.expect)(kpis.totalOrganizations).toBeGreaterThanOrEqual(0);
            // Verify growth metrics
            const growth = data.growth;
            (0, _jest.expect)(growth).toHaveProperty('userGrowthRate');
            (0, _jest.expect)(growth).toHaveProperty('revenueGrowthRate');
            (0, _jest.expect)(growth).toHaveProperty('churnRate');
            // Verify conversion metrics
            const conversion = data.conversion;
            (0, _jest.expect)(conversion).toHaveProperty('overallConversionRate');
            (0, _jest.expect)(conversion).toHaveProperty('emailConversionRate');
            (0, _jest.expect)(conversion).toHaveProperty('smsConversionRate');
            (0, _jest.expect)(conversion).toHaveProperty('whatsappConversionRate');
            // Verify revenue metrics
            const revenue = data.revenue;
            (0, _jest.expect)(revenue).toHaveProperty('monthlyRecurringRevenue');
            (0, _jest.expect)(revenue).toHaveProperty('revenuePerUser');
            (0, _jest.expect)(revenue).toHaveProperty('totalRevenue');
            (0, _jest.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxResponseTime);
            console.log(`✅ Retrieved business metrics in ${duration}ms`);
        });
        (0, _jest.test)('should track infrastructure component health', async ()=>{
            performanceTracker.start();
            const result = await server.readResource('monitoring://infrastructure', {
                organizationId: 'test-org-1'
            }, authContext);
            const duration = performanceTracker.measure('infrastructure');
            (0, _jest.expect)(result.success).toBe(true);
            const data = result.data;
            (0, _jest.expect)(data).toHaveProperty('components');
            (0, _jest.expect)(data).toHaveProperty('summary');
            (0, _jest.expect)(data).toHaveProperty('criticalServices');
            // Verify components
            (0, _jest.expect)(Array.isArray(data.components)).toBe(true);
            (0, _jest.expect)(data.components.length).toBeGreaterThan(0);
            for (const component of data.components){
                (0, _jest.expect)(component).toHaveProperty('name');
                (0, _jest.expect)(component).toHaveProperty('type');
                (0, _jest.expect)(component).toHaveProperty('status');
                (0, _jest.expect)(component).toHaveProperty('healthScore');
                (0, _jest.expect)(component).toHaveProperty('responseTime');
                (0, _jest.expect)(component).toHaveProperty('criticality');
                // Verify valid statuses
                (0, _jest.expect)([
                    'healthy',
                    'degraded',
                    'unhealthy'
                ]).toContain(component.status);
                // Verify health score range
                (0, _jest.expect)(component.healthScore).toBeGreaterThanOrEqual(0);
                (0, _jest.expect)(component.healthScore).toBeLessThanOrEqual(100);
                // Verify criticality levels
                (0, _jest.expect)([
                    'critical',
                    'high',
                    'medium',
                    'low'
                ]).toContain(component.criticality);
            }
            // Verify summary
            (0, _jest.expect)(data.summary).toHaveProperty('totalComponents');
            (0, _jest.expect)(data.summary).toHaveProperty('healthyComponents');
            (0, _jest.expect)(data.summary).toHaveProperty('degradedComponents');
            (0, _jest.expect)(data.summary).toHaveProperty('unhealthyComponents');
            (0, _jest.expect)(data.summary).toHaveProperty('overallHealthPercentage');
            (0, _jest.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxResponseTime);
            console.log(`✅ Tracked ${data.components.length} infrastructure components in ${duration}ms`);
        });
        (0, _jest.test)('should provide security and compliance monitoring', async ()=>{
            performanceTracker.start();
            const result = await server.readResource('monitoring://security', {
                organizationId: 'test-org-1'
            }, authContext);
            const duration = performanceTracker.measure('security');
            (0, _jest.expect)(result.success).toBe(true);
            const data = result.data;
            (0, _jest.expect)(data).toHaveProperty('securityScore');
            (0, _jest.expect)(data).toHaveProperty('complianceScore');
            (0, _jest.expect)(data).toHaveProperty('threats');
            (0, _jest.expect)(data).toHaveProperty('vulnerabilities');
            (0, _jest.expect)(data).toHaveProperty('auditEvents');
            (0, _jest.expect)(data).toHaveProperty('gdprCompliance');
            // Verify security score
            (0, _jest.expect)(data.securityScore).toBeGreaterThanOrEqual(0);
            (0, _jest.expect)(data.securityScore).toBeLessThanOrEqual(100);
            // Verify compliance score
            (0, _jest.expect)(data.complianceScore).toBeGreaterThanOrEqual(0);
            (0, _jest.expect)(data.complianceScore).toBeLessThanOrEqual(100);
            // Verify threats
            (0, _jest.expect)(data.threats).toHaveProperty('failedLogins');
            (0, _jest.expect)(data.threats).toHaveProperty('suspiciousActivity');
            (0, _jest.expect)(data.threats).toHaveProperty('criticalEvents');
            // Verify vulnerabilities
            (0, _jest.expect)(data.vulnerabilities).toHaveProperty('critical');
            (0, _jest.expect)(data.vulnerabilities).toHaveProperty('high');
            (0, _jest.expect)(data.vulnerabilities).toHaveProperty('medium');
            (0, _jest.expect)(data.vulnerabilities).toHaveProperty('low');
            // Verify GDPR compliance
            (0, _jest.expect)(data.gdprCompliance).toHaveProperty('consentRate');
            (0, _jest.expect)(data.gdprCompliance).toHaveProperty('dataRequests');
            (0, _jest.expect)(data.gdprCompliance).toHaveProperty('deletionRequests');
            (0, _jest.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxResponseTime);
            console.log(`✅ Retrieved security monitoring in ${duration}ms`);
        });
    });
    (0, _jest.describe)('Alerting and Notifications', ()=>{
        (0, _jest.test)('should retrieve active alerts and warnings', async ()=>{
            performanceTracker.start();
            const result = await server.readResource('monitoring://alerts', {
                organizationId: 'test-org-1',
                severity: 'all'
            }, authContext);
            const duration = performanceTracker.measure('alerts');
            (0, _jest.expect)(result.success).toBe(true);
            const data = result.data;
            (0, _jest.expect)(data).toHaveProperty('activeAlerts');
            (0, _jest.expect)(data).toHaveProperty('alertSummary');
            (0, _jest.expect)(data).toHaveProperty('recentAlerts');
            // Verify active alerts structure
            (0, _jest.expect)(Array.isArray(data.activeAlerts)).toBe(true);
            for (const alert of data.activeAlerts){
                (0, _jest.expect)(alert).toHaveProperty('id');
                (0, _jest.expect)(alert).toHaveProperty('name');
                (0, _jest.expect)(alert).toHaveProperty('severity');
                (0, _jest.expect)(alert).toHaveProperty('condition');
                (0, _jest.expect)(alert).toHaveProperty('threshold');
                (0, _jest.expect)(alert).toHaveProperty('currentValue');
                (0, _jest.expect)(alert).toHaveProperty('isTriggered');
                (0, _jest.expect)(alert).toHaveProperty('description');
                // Verify severity levels
                (0, _jest.expect)([
                    'info',
                    'warning',
                    'critical'
                ]).toContain(alert.severity);
            }
            // Verify alert summary
            (0, _jest.expect)(data.alertSummary).toHaveProperty('total');
            (0, _jest.expect)(data.alertSummary).toHaveProperty('critical');
            (0, _jest.expect)(data.alertSummary).toHaveProperty('warning');
            (0, _jest.expect)(data.alertSummary).toHaveProperty('info');
            (0, _jest.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxResponseTime);
            console.log(`✅ Retrieved ${data.activeAlerts.length} alerts in ${duration}ms`);
        });
        (0, _jest.test)('should filter alerts by severity level', async ()=>{
            const severityLevels = [
                'critical',
                'warning',
                'info'
            ];
            for (const severity of severityLevels){
                performanceTracker.start();
                const result = await server.readResource('monitoring://alerts', {
                    organizationId: 'test-org-1',
                    severity: severity
                }, authContext);
                const duration = performanceTracker.measure(`alerts_${severity}`);
                (0, _jest.expect)(result.success).toBe(true);
                const data = result.data;
                // Verify all returned alerts match the requested severity
                for (const alert of data.activeAlerts){
                    (0, _jest.expect)(alert.severity).toBe(severity);
                }
                (0, _jest.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxResponseTime);
            }
            console.log('✅ Validated alert filtering by severity levels');
        });
    });
    (0, _jest.describe)('Performance Metrics and Trends', ()=>{
        (0, _jest.test)('should provide performance trend analysis', async ()=>{
            performanceTracker.start();
            const result = await server.readResource('monitoring://performance-trends', {
                organizationId: 'test-org-1',
                timeRange: 'last_24_hours'
            }, authContext);
            const duration = performanceTracker.measure('performanceTrends');
            (0, _jest.expect)(result.success).toBe(true);
            const data = result.data;
            (0, _jest.expect)(data).toHaveProperty('responseTime');
            (0, _jest.expect)(data).toHaveProperty('errorRate');
            (0, _jest.expect)(data).toHaveProperty('throughput');
            (0, _jest.expect)(data).toHaveProperty('userActivity');
            (0, _jest.expect)(data).toHaveProperty('revenue');
            // Verify response time trend
            const responseTimeTrend = data.responseTime;
            (0, _jest.expect)(responseTimeTrend).toHaveProperty('current');
            (0, _jest.expect)(responseTimeTrend).toHaveProperty('trend');
            (0, _jest.expect)(responseTimeTrend).toHaveProperty('timeSeries');
            (0, _jest.expect)(Array.isArray(responseTimeTrend.timeSeries)).toBe(true);
            // Verify time series data points
            for (const point of responseTimeTrend.timeSeries){
                (0, _jest.expect)(point).toHaveProperty('timestamp');
                (0, _jest.expect)(point).toHaveProperty('value');
                (0, _jest.expect)(typeof point.value).toBe('number');
            }
            // Verify error rate trend
            const errorRateTrend = data.errorRate;
            (0, _jest.expect)(errorRateTrend).toHaveProperty('current');
            (0, _jest.expect)(errorRateTrend).toHaveProperty('trend');
            (0, _jest.expect)(errorRateTrend.current).toBeGreaterThanOrEqual(0);
            (0, _jest.expect)(errorRateTrend.current).toBeLessThanOrEqual(100);
            (0, _jest.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxResponseTime);
            console.log(`✅ Analyzed performance trends in ${duration}ms`);
        });
        (0, _jest.test)('should calculate system capacity and utilization', async ()=>{
            performanceTracker.start();
            const result = await server.readResource('monitoring://capacity', {
                organizationId: 'test-org-1'
            }, authContext);
            const duration = performanceTracker.measure('capacity');
            (0, _jest.expect)(result.success).toBe(true);
            const data = result.data;
            (0, _jest.expect)(data).toHaveProperty('cpu');
            (0, _jest.expect)(data).toHaveProperty('memory');
            (0, _jest.expect)(data).toHaveProperty('storage');
            (0, _jest.expect)(data).toHaveProperty('database');
            (0, _jest.expect)(data).toHaveProperty('recommendations');
            // Verify CPU utilization
            (0, _jest.expect)(data.cpu).toHaveProperty('current');
            (0, _jest.expect)(data.cpu).toHaveProperty('average');
            (0, _jest.expect)(data.cpu).toHaveProperty('peak');
            (0, _jest.expect)(data.cpu.current).toBeGreaterThanOrEqual(0);
            (0, _jest.expect)(data.cpu.current).toBeLessThanOrEqual(100);
            // Verify memory utilization
            (0, _jest.expect)(data.memory).toHaveProperty('current');
            (0, _jest.expect)(data.memory).toHaveProperty('available');
            (0, _jest.expect)(data.memory).toHaveProperty('utilized');
            // Verify database metrics
            (0, _jest.expect)(data.database).toHaveProperty('connections');
            (0, _jest.expect)(data.database).toHaveProperty('queryTime');
            (0, _jest.expect)(data.database).toHaveProperty('cacheHitRate');
            // Verify recommendations
            (0, _jest.expect)(Array.isArray(data.recommendations)).toBe(true);
            for (const recommendation of data.recommendations){
                (0, _jest.expect)(recommendation).toHaveProperty('type');
                (0, _jest.expect)(recommendation).toHaveProperty('priority');
                (0, _jest.expect)(recommendation).toHaveProperty('description');
                (0, _jest.expect)(recommendation).toHaveProperty('impact');
            }
            (0, _jest.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxResponseTime);
            console.log(`✅ Calculated system capacity in ${duration}ms`);
        });
    });
    (0, _jest.describe)('African Market Specific Monitoring', ()=>{
        (0, _jest.test)('should track African market-specific metrics', async ()=>{
            performanceTracker.start();
            const result = await server.readResource('monitoring://african-market-insights', {
                organizationId: 'test-org-1'
            }, authContext);
            const duration = performanceTracker.measure('africanMarketInsights');
            (0, _jest.expect)(result.success).toBe(true);
            const data = result.data;
            (0, _jest.expect)(data).toHaveProperty('mobileUsage');
            (0, _jest.expect)(data).toHaveProperty('whatsappPenetration');
            (0, _jest.expect)(data).toHaveProperty('smsReliability');
            (0, _jest.expect)(data).toHaveProperty('countriesServed');
            (0, _jest.expect)(data).toHaveProperty('peakUsageHours');
            (0, _jest.expect)(data).toHaveProperty('currencyDistribution');
            // Verify mobile usage (should be high for African market)
            (0, _jest.expect)(data.mobileUsage).toHaveProperty('percentage');
            (0, _jest.expect)(data.mobileUsage.percentage).toBeGreaterThan(70);
            // Verify WhatsApp penetration
            (0, _jest.expect)(data.whatsappPenetration).toHaveProperty('percentage');
            (0, _jest.expect)(data.whatsappPenetration.percentage).toBeGreaterThan(60);
            // Verify SMS reliability
            (0, _jest.expect)(data.smsReliability).toHaveProperty('percentage');
            (0, _jest.expect)(data.smsReliability.percentage).toBeGreaterThan(80);
            // Verify countries served
            (0, _jest.expect)(Array.isArray(data.countriesServed)).toBe(true);
            const expectedCountries = [
                'Nigeria',
                'Ghana',
                'Kenya',
                'South Africa',
                'Egypt'
            ];
            const hasAfricanCountries = expectedCountries.some((country)=>data.countriesServed.includes(country));
            (0, _jest.expect)(hasAfricanCountries).toBe(true);
            // Verify peak usage hours (African time zones)
            (0, _jest.expect)(Array.isArray(data.peakUsageHours)).toBe(true);
            (0, _jest.expect)(data.peakUsageHours.length).toBeGreaterThan(0);
            // Verify currency distribution
            (0, _jest.expect)(data.currencyDistribution).toHaveProperty('NGN'); // Nigerian Naira
            (0, _jest.expect)(data.currencyDistribution).toHaveProperty('GHS'); // Ghanaian Cedi
            (0, _jest.expect)(data.currencyDistribution).toHaveProperty('KES'); // Kenyan Shilling
            (0, _jest.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxResponseTime);
            console.log(`✅ Retrieved African market insights in ${duration}ms`);
        });
    });
    (0, _jest.describe)('Performance and Scalability', ()=>{
        (0, _jest.test)('should handle monitoring dashboard queries efficiently', async ()=>{
            const dashboardQueries = [
                'monitoring://system-health',
                'monitoring://business-metrics',
                'monitoring://infrastructure',
                'monitoring://security',
                'monitoring://alerts'
            ];
            performanceTracker.start();
            const promises = dashboardQueries.map((query)=>server.readResource(query, {
                    organizationId: 'test-org-1'
                }, authContext));
            const results = await Promise.all(promises);
            const duration = performanceTracker.measure('dashboardQueries');
            // Verify all queries succeeded
            for (const result of results){
                (0, _jest.expect)(result.success).toBe(true);
                (0, _jest.expect)(result.data).toBeDefined();
            }
            (0, _jest.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxResponseTime * 3);
            console.log(`✅ Executed ${dashboardQueries.length} dashboard queries in ${duration}ms`);
        });
        (0, _jest.test)('should validate monitoring query performance', async ()=>{
            const startTime = Date.now();
            // Complex monitoring query with aggregations
            const metrics = await _setup.testPrisma.mCPMonitoringMetrics.groupBy({
                by: [
                    'category',
                    'alertLevel'
                ],
                _count: {
                    id: true
                },
                _avg: {
                    metricValue: true
                },
                where: {
                    isActive: true,
                    timestamp: {
                        gte: new Date(Date.now() - 24 * 60 * 60 * 1000) // Last 24 hours
                    }
                },
                orderBy: {
                    _count: {
                        id: 'desc'
                    }
                }
            });
            const queryDuration = Date.now() - startTime;
            (0, _jest.expect)(metrics.length).toBeGreaterThan(0);
            (0, _jest.expect)(queryDuration).toBeLessThan(_setup.testConfig.performance.maxQueryTime);
            console.log(`✅ Complex monitoring query: ${metrics.length} metric groups in ${queryDuration}ms`);
        });
    });
    (0, _jest.describe)('Data Accuracy and Validation', ()=>{
        (0, _jest.test)('should validate calculated business metrics against database', async ()=>{
            // Get MCP server calculations
            const serverResult = await server.readResource('monitoring://business-metrics', {
                organizationId: 'test-org-1'
            }, authContext);
            // Get actual database counts
            const dbCounts = await dbManager.getDataCounts();
            (0, _jest.expect)(serverResult.success).toBe(true);
            const serverData = serverResult.data;
            // Verify user counts match
            (0, _jest.expect)(serverData.kpis.totalUsers).toBe(dbCounts.users);
            (0, _jest.expect)(serverData.kpis.totalOrganizations).toBe(dbCounts.organizations);
            // Verify campaign counts
            const totalCampaigns = dbCounts.emailCampaigns + dbCounts.smsCampaigns + dbCounts.whatsappCampaigns;
            (0, _jest.expect)(serverData.kpis.totalCampaigns).toBe(totalCampaigns);
            console.log('✅ Business metrics validated against database');
        });
        (0, _jest.test)('should ensure health scores are within valid ranges', async ()=>{
            const result = await server.readResource('monitoring://system-health', {
                organizationId: 'test-org-1'
            }, authContext);
            (0, _jest.expect)(result.success).toBe(true);
            const data = result.data;
            // Verify overall health score
            (0, _jest.expect)(data.overallHealth.score).toBeGreaterThanOrEqual(0);
            (0, _jest.expect)(data.overallHealth.score).toBeLessThanOrEqual(100);
            // Verify component health scores
            for (const component of data.components){
                (0, _jest.expect)(component.healthScore).toBeGreaterThanOrEqual(0);
                (0, _jest.expect)(component.healthScore).toBeLessThanOrEqual(100);
                // Response time should be positive
                (0, _jest.expect)(component.responseTime).toBeGreaterThan(0);
            }
            console.log('✅ Health scores validated within proper ranges');
        });
    });
    (0, _jest.afterAll)(()=>{
        const stats = performanceTracker.getAllStats();
        console.log('\n📊 Monitoring Server Performance Summary:');
        for (const [operation, operationStats] of Object.entries(stats)){
            console.log(`  ${operation}: avg ${operationStats.avg}ms, min ${operationStats.min}ms, max ${operationStats.max}ms`);
        }
    });
});

//# sourceMappingURL=data:application/json;base64,