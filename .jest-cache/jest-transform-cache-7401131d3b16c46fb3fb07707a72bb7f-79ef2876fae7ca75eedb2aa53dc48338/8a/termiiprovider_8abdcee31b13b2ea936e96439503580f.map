{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/lib/sms-providers/termii-provider.ts"],"sourcesContent":["/**\n * Termii SMS Provider\n * Provides SMS sending capabilities using Termii API\n */\n\nimport { SMSProvider, SMSResult, SMSConfig } from './base-provider';\nimport { logger } from '@/lib/logger';\n\nexport interface TermiiConfig extends SMSConfig {\n  apiKey: string;\n  senderId: string;\n  channel?: 'generic' | 'dnd' | 'whatsapp';\n  messageType?: 'plain' | 'unicode';\n}\n\nexport class TermiiSMSProvider implements SMSProvider {\n  public readonly name = 'Termii';\n  private config: TermiiConfig;\n\n  constructor(config?: TermiiConfig) {\n    this.config = config || {\n      apiKey: process.env.TERMII_API_KEY || '',\n      senderId: process.env.TERMII_SENDER_ID || 'MarketSage',\n      channel: 'generic',\n      messageType: 'plain'\n    };\n  }\n\n  async sendSMS(phoneNumber: string, message: string): Promise<SMSResult> {\n    try {\n      if (!this.isConfigured()) {\n        return {\n          success: false,\n          error: {\n            message: 'Termii provider not properly configured',\n            code: 'PROVIDER_NOT_CONFIGURED'\n          }\n        };\n      }\n\n      // Clean and format phone number\n      const cleanPhoneNumber = this.formatPhoneNumber(phoneNumber);\n      \n      if (!this.validatePhoneNumber(cleanPhoneNumber)) {\n        return {\n          success: false,\n          error: {\n            message: 'Invalid phone number format',\n            code: 'INVALID_PHONE_NUMBER'\n          }\n        };\n      }\n\n      const payload = {\n        to: cleanPhoneNumber,\n        from: this.config.senderId,\n        sms: message,\n        type: this.config.messageType || 'plain',\n        channel: this.config.channel || 'generic',\n        api_key: this.config.apiKey,\n        media: {\n          url: null,\n          caption: null\n        }\n      };\n\n      const response = await fetch('https://api.ng.termii.com/api/sms/send', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(payload),\n      });\n\n      const responseData = await response.json();\n\n      if (!response.ok) {\n        logger.error('Termii API error:', {\n          status: response.status,\n          error: responseData\n        });\n\n        return {\n          success: false,\n          error: {\n            message: responseData.message || 'Termii API error',\n            code: responseData.code || 'TERMII_ERROR'\n          }\n        };\n      }\n\n      // Check if the response indicates success\n      if (responseData.code === 'ok' || responseData.message_id) {\n        return {\n          success: true,\n          messageId: responseData.message_id,\n          cost: responseData.balance ? parseFloat(responseData.balance) : undefined,\n          metadata: {\n            provider: 'termii',\n            channel: this.config.channel,\n            messageType: this.config.messageType,\n            balance: responseData.balance\n          }\n        };\n      } else {\n        return {\n          success: false,\n          error: {\n            message: responseData.message || 'Failed to send SMS',\n            code: responseData.code || 'TERMII_SEND_FAILED'\n          }\n        };\n      }\n\n    } catch (error) {\n      logger.error('Termii send error:', error);\n      \n      return {\n        success: false,\n        error: {\n          message: error instanceof Error ? error.message : 'Unknown Termii error',\n          code: 'TERMII_SEND_ERROR'\n        }\n      };\n    }\n  }\n\n  validatePhoneNumber(phoneNumber: string): boolean {\n    if (!phoneNumber || typeof phoneNumber !== 'string') {\n      return false;\n    }\n    \n    const cleanPhoneNumber = phoneNumber.replace(/\\D/g, '');\n    \n    // Must be between 10-15 digits\n    if (cleanPhoneNumber.length < 10 || cleanPhoneNumber.length > 15) {\n      return false;\n    }\n    \n    // Support for African countries (primary Termii markets)\n    const supportedCountries = [\n      { code: '234', length: 13, name: 'Nigeria' },\n      { code: '254', length: 12, name: 'Kenya' },\n      { code: '256', length: 12, name: 'Uganda' },\n      { code: '255', length: 12, name: 'Tanzania' },\n      { code: '233', length: 12, name: 'Ghana' },\n      { code: '237', length: 12, name: 'Cameroon' },\n      { code: '225', length: 12, name: 'Ivory Coast' },\n      { code: '221', length: 12, name: 'Senegal' },\n    ];\n    \n    // Check international format\n    for (const country of supportedCountries) {\n      if (cleanPhoneNumber.startsWith(country.code) && cleanPhoneNumber.length === country.length) {\n        return true;\n      }\n    }\n    \n    // Special handling for Nigerian local numbers\n    if (cleanPhoneNumber.startsWith('0') && cleanPhoneNumber.length === 11) {\n      const validPrefixes = ['080', '081', '070', '090', '091', '071'];\n      const prefix = cleanPhoneNumber.substring(1, 4);\n      return validPrefixes.includes(prefix);\n    }\n    \n    return false;\n  }\n\n  private formatPhoneNumber(phoneNumber: string): string {\n    let cleanNumber = phoneNumber.replace(/\\D/g, '');\n    \n    // Convert Nigerian local format to international\n    if (cleanNumber.startsWith('0') && cleanNumber.length === 11) {\n      cleanNumber = '234' + cleanNumber.substring(1);\n    }\n    \n    // Ensure it starts with country code\n    if (!cleanNumber.startsWith('234') && cleanNumber.length === 10) {\n      cleanNumber = '234' + cleanNumber;\n    }\n    \n    return cleanNumber;\n  }\n\n  isConfigured(): boolean {\n    return !!(this.config.apiKey && this.config.senderId);\n  }\n\n  /**\n   * Get account balance\n   */\n  async getBalance(): Promise<{ success: boolean; balance?: number; currency?: string; error?: string }> {\n    try {\n      if (!this.isConfigured()) {\n        return {\n          success: false,\n          error: 'Provider not configured'\n        };\n      }\n\n      const response = await fetch(`https://api.ng.termii.com/api/get-balance?api_key=${this.config.apiKey}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        }\n      });\n\n      const data = await response.json();\n\n      if (response.ok && data.balance !== undefined) {\n        return {\n          success: true,\n          balance: parseFloat(data.balance),\n          currency: data.currency || 'NGN'\n        };\n      } else {\n        return {\n          success: false,\n          error: data.message || 'Failed to get balance'\n        };\n      }\n\n    } catch (error) {\n      logger.error('Error getting Termii balance:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Get delivery report for a message\n   */\n  async getDeliveryReport(messageId: string): Promise<{ success: boolean; status?: string; error?: string }> {\n    try {\n      if (!this.isConfigured()) {\n        return {\n          success: false,\n          error: 'Provider not configured'\n        };\n      }\n\n      const response = await fetch(\n        `https://api.ng.termii.com/api/sms/inbox?api_key=${this.config.apiKey}&message_id=${messageId}`,\n        {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n          }\n        }\n      );\n\n      const data = await response.json();\n\n      if (response.ok) {\n        return {\n          success: true,\n          status: data.status || 'unknown'\n        };\n      } else {\n        return {\n          success: false,\n          error: data.message || 'Failed to get delivery report'\n        };\n      }\n\n    } catch (error) {\n      logger.error('Error getting Termii delivery report:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Send OTP message\n   */\n  async sendOTP(phoneNumber: string, options: {\n    pinAttempts?: number;\n    pinTimeToLive?: number;\n    pinLength?: number;\n    pinPlaceholder?: string;\n    messageText?: string;\n  } = {}): Promise<{ success: boolean; pinId?: string; error?: string }> {\n    try {\n      if (!this.isConfigured()) {\n        return {\n          success: false,\n          error: 'Provider not configured'\n        };\n      }\n\n      const cleanPhoneNumber = this.formatPhoneNumber(phoneNumber);\n\n      const payload = {\n        api_key: this.config.apiKey,\n        message_type: 'NUMERIC',\n        to: cleanPhoneNumber,\n        from: this.config.senderId,\n        channel: this.config.channel || 'generic',\n        pin_attempts: options.pinAttempts || 3,\n        pin_time_to_live: options.pinTimeToLive || 5,\n        pin_length: options.pinLength || 6,\n        pin_placeholder: options.pinPlaceholder || '< 1234 >',\n        message_text: options.messageText || `Your MarketSage verification code is ${options.pinPlaceholder || '< 1234 >'}. Valid for ${options.pinTimeToLive || 5} minutes.`\n      };\n\n      const response = await fetch('https://api.ng.termii.com/api/sms/otp/send', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(payload),\n      });\n\n      const data = await response.json();\n\n      if (response.ok && data.pinId) {\n        return {\n          success: true,\n          pinId: data.pinId\n        };\n      } else {\n        return {\n          success: false,\n          error: data.message || 'Failed to send OTP'\n        };\n      }\n\n    } catch (error) {\n      logger.error('Error sending Termii OTP:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Verify OTP\n   */\n  async verifyOTP(pinId: string, pin: string): Promise<{ success: boolean; verified?: boolean; error?: string }> {\n    try {\n      if (!this.isConfigured()) {\n        return {\n          success: false,\n          error: 'Provider not configured'\n        };\n      }\n\n      const payload = {\n        api_key: this.config.apiKey,\n        pin_id: pinId,\n        pin: pin\n      };\n\n      const response = await fetch('https://api.ng.termii.com/api/sms/otp/verify', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(payload),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        return {\n          success: true,\n          verified: data.verified === true || data.verified === 'True'\n        };\n      } else {\n        return {\n          success: false,\n          error: data.message || 'Failed to verify OTP'\n        };\n      }\n\n    } catch (error) {\n      logger.error('Error verifying Termii OTP:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Get sender ID status\n   */\n  async getSenderIdStatus(): Promise<{ success: boolean; senderIds?: any[]; error?: string }> {\n    try {\n      if (!this.isConfigured()) {\n        return {\n          success: false,\n          error: 'Provider not configured'\n        };\n      }\n\n      const response = await fetch(`https://api.ng.termii.com/api/sender-id?api_key=${this.config.apiKey}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        }\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        return {\n          success: true,\n          senderIds: data.data || []\n        };\n      } else {\n        return {\n          success: false,\n          error: data.message || 'Failed to get sender ID status'\n        };\n      }\n\n    } catch (error) {\n      logger.error('Error getting Termii sender ID status:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n}"],"names":["TermiiSMSProvider","constructor","config","name","apiKey","process","env","TERMII_API_KEY","senderId","TERMII_SENDER_ID","channel","messageType","sendSMS","phoneNumber","message","isConfigured","success","error","code","cleanPhoneNumber","formatPhoneNumber","validatePhoneNumber","payload","to","from","sms","type","api_key","media","url","caption","response","fetch","method","headers","body","JSON","stringify","responseData","json","ok","logger","status","message_id","messageId","cost","balance","parseFloat","undefined","metadata","provider","Error","replace","length","supportedCountries","country","startsWith","validPrefixes","prefix","substring","includes","cleanNumber","getBalance","data","currency","getDeliveryReport","sendOTP","options","message_type","pin_attempts","pinAttempts","pin_time_to_live","pinTimeToLive","pin_length","pinLength","pin_placeholder","pinPlaceholder","message_text","messageText","pinId","verifyOTP","pin","pin_id","verified","getSenderIdStatus","senderIds"],"mappings":"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"}