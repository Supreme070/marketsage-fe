224b8eb763149030a55ef11e5c463825
/**
 * API Client for Frontend-Backend Communication
 * ============================================
 * 
 * Central API client to communicate with NestJS backend
 * Replaces direct database access in frontend
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    apiClient: function() {
        return apiClient;
    },
    default: function() {
        return _default;
    }
});
const BACKEND_URL = process.env.NEXT_PUBLIC_BACKEND_URL || 'http://localhost:3006';
const API_BASE = `${BACKEND_URL}/api/v2`;
class ApiClient {
    getAuthHeaders() {
        // Try to get token from localStorage first (for manual token storage)
        let token = typeof window !== 'undefined' ? localStorage.getItem('access_token') : null;
        // If no token in localStorage, try to get it from NextAuth session
        // Note: This is primarily for client-side usage where session token 
        // might be available through other means
        return {
            'Content-Type': 'application/json',
            ...token && {
                'Authorization': `Bearer ${token}`
            }
        };
    }
    // Method to set token explicitly (useful after login)
    setToken(token) {
        if (typeof window !== 'undefined') {
            localStorage.setItem('access_token', token);
        }
    }
    // Method to clear token (useful for logout)
    clearToken() {
        if (typeof window !== 'undefined') {
            localStorage.removeItem('access_token');
        }
    }
    buildUrl(endpoint, params) {
        const url = new URL(`${API_BASE}${endpoint}`);
        if (params) {
            Object.entries(params).forEach(([key, value])=>{
                url.searchParams.append(key, value);
            });
        }
        return url.toString();
    }
    async request(endpoint, options = {}) {
        const { method = 'GET', headers = {}, body, params } = options;
        const url = this.buildUrl(endpoint, params);
        const config = {
            method,
            headers: {
                ...this.getAuthHeaders(),
                ...headers
            }
        };
        if (body && method !== 'GET') {
            config.body = JSON.stringify(body);
        }
        try {
            const response = await fetch(url, config);
            const data = await response.json();
            if (!response.ok) {
                return {
                    success: false,
                    error: {
                        code: response.status.toString(),
                        message: data.message || 'Request failed',
                        details: data,
                        timestamp: new Date().toISOString()
                    }
                };
            }
            return {
                success: true,
                data: data.data || data,
                message: data.message
            };
        } catch (error) {
            return {
                success: false,
                error: {
                    code: 'NETWORK_ERROR',
                    message: error instanceof Error ? error.message : 'Network error',
                    timestamp: new Date().toISOString()
                }
            };
        }
    }
    // Authentication methods
    async login(email, password) {
        return this.request('/auth/login', {
            method: 'POST',
            body: {
                email,
                password
            }
        });
    }
    async register(email, password, name, company) {
        return this.request('/auth/register', {
            method: 'POST',
            body: {
                email,
                password,
                name,
                company
            }
        });
    }
    async getProfile() {
        return this.request('/auth/profile');
    }
    // User management
    async getUsers(params) {
        return this.request('/users', {
            params: params
        });
    }
    async getUserById(id) {
        return this.request(`/users/${id}`);
    }
    async updateUser(id, data) {
        return this.request(`/users/${id}`, {
            method: 'PATCH',
            body: data
        });
    }
    async deleteUser(id) {
        return this.request(`/users/${id}`, {
            method: 'DELETE'
        });
    }
    // Organization management
    async getOrganizations(params) {
        return this.request('/organizations', {
            params: params
        });
    }
    async getOrganizationById(id) {
        return this.request(`/organizations/${id}`);
    }
    async createOrganization(data) {
        return this.request('/organizations', {
            method: 'POST',
            body: data
        });
    }
    // Notifications
    async getNotifications(params) {
        return this.request('/notifications', {
            params: params
        });
    }
    async markNotificationRead(id) {
        return this.request(`/notifications/${id}/read`, {
            method: 'PATCH'
        });
    }
    async markAllNotificationsRead() {
        return this.request('/notifications/mark-all-read', {
            method: 'PATCH'
        });
    }
    // AI Services
    async chatWithAI(message, context) {
        return this.request('/ai/chat', {
            method: 'POST',
            body: {
                message,
                context
            }
        });
    }
    async analyzeData(data, type) {
        return this.request('/ai/analyze', {
            method: 'POST',
            body: {
                data,
                type
            }
        });
    }
    async predictData(data, model) {
        return this.request('/ai/predict', {
            method: 'POST',
            body: {
                data,
                model
            }
        });
    }
    // Health and system status
    async getHealth() {
        return this.request('/health/simple');
    }
    async getMetrics() {
        return this.request('/metrics');
    }
}
const apiClient = new ApiClient();
const _default = apiClient;

//# sourceMappingURL=data:application/json;base64,