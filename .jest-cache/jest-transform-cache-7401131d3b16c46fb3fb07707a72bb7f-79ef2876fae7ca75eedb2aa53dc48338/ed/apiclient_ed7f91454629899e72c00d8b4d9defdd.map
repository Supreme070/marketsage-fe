{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/lib/api-client.ts"],"sourcesContent":["/**\n * API Client for Frontend-Backend Communication\n * ============================================\n * \n * Central API client to communicate with NestJS backend\n * Replaces direct database access in frontend\n */\n\nimport type { ApiResponse, PaginatedResponse } from '@/shared/types/api';\n\nconst BACKEND_URL = process.env.NEXT_PUBLIC_BACKEND_URL || 'http://localhost:3006';\nconst API_BASE = `${BACKEND_URL}/api/v2`;\n\ninterface RequestOptions {\n  method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE';\n  headers?: Record<string, string>;\n  body?: any;\n  params?: Record<string, string>;\n}\n\nclass ApiClient {\n  private getAuthHeaders(): Record<string, string> {\n    // Try to get token from localStorage first (for manual token storage)\n    let token = typeof window !== 'undefined' \n      ? localStorage.getItem('access_token') \n      : null;\n    \n    // If no token in localStorage, try to get it from NextAuth session\n    // Note: This is primarily for client-side usage where session token \n    // might be available through other means\n    \n    return {\n      'Content-Type': 'application/json',\n      ...(token && { 'Authorization': `Bearer ${token}` }),\n    };\n  }\n\n  // Method to set token explicitly (useful after login)\n  setToken(token: string): void {\n    if (typeof window !== 'undefined') {\n      localStorage.setItem('access_token', token);\n    }\n  }\n\n  // Method to clear token (useful for logout)\n  clearToken(): void {\n    if (typeof window !== 'undefined') {\n      localStorage.removeItem('access_token');\n    }\n  }\n\n  private buildUrl(endpoint: string, params?: Record<string, string>): string {\n    const url = new URL(`${API_BASE}${endpoint}`);\n    if (params) {\n      Object.entries(params).forEach(([key, value]) => {\n        url.searchParams.append(key, value);\n      });\n    }\n    return url.toString();\n  }\n\n  async request<T = any>(\n    endpoint: string, \n    options: RequestOptions = {}\n  ): Promise<ApiResponse<T>> {\n    const {\n      method = 'GET',\n      headers = {},\n      body,\n      params\n    } = options;\n\n    const url = this.buildUrl(endpoint, params);\n    const config: RequestInit = {\n      method,\n      headers: {\n        ...this.getAuthHeaders(),\n        ...headers,\n      },\n    };\n\n    if (body && method !== 'GET') {\n      config.body = JSON.stringify(body);\n    }\n\n    try {\n      const response = await fetch(url, config);\n      const data = await response.json();\n\n      if (!response.ok) {\n        return {\n          success: false,\n          error: {\n            code: response.status.toString(),\n            message: data.message || 'Request failed',\n            details: data,\n            timestamp: new Date().toISOString(),\n          }\n        };\n      }\n\n      return {\n        success: true,\n        data: data.data || data,\n        message: data.message,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: {\n          code: 'NETWORK_ERROR',\n          message: error instanceof Error ? error.message : 'Network error',\n          timestamp: new Date().toISOString(),\n        }\n      };\n    }\n  }\n\n  // Authentication methods\n  async login(email: string, password: string) {\n    return this.request('/auth/login', {\n      method: 'POST',\n      body: { email, password }\n    });\n  }\n\n  async register(email: string, password: string, name: string, company?: string) {\n    return this.request('/auth/register', {\n      method: 'POST',\n      body: { email, password, name, company }\n    });\n  }\n\n  async getProfile() {\n    return this.request('/auth/profile');\n  }\n\n  // User management\n  async getUsers(params?: { page?: number; limit?: number }) {\n    return this.request('/users', { params: params as Record<string, string> });\n  }\n\n  async getUserById(id: string) {\n    return this.request(`/users/${id}`);\n  }\n\n  async updateUser(id: string, data: any) {\n    return this.request(`/users/${id}`, {\n      method: 'PATCH',\n      body: data\n    });\n  }\n\n  async deleteUser(id: string) {\n    return this.request(`/users/${id}`, {\n      method: 'DELETE'\n    });\n  }\n\n  // Organization management\n  async getOrganizations(params?: { page?: number; limit?: number }) {\n    return this.request('/organizations', { params: params as Record<string, string> });\n  }\n\n  async getOrganizationById(id: string) {\n    return this.request(`/organizations/${id}`);\n  }\n\n  async createOrganization(data: any) {\n    return this.request('/organizations', {\n      method: 'POST',\n      body: data\n    });\n  }\n\n  // Notifications\n  async getNotifications(params?: { page?: number; limit?: number; unread?: boolean }) {\n    return this.request('/notifications', { params: params as Record<string, string> });\n  }\n\n  async markNotificationRead(id: string) {\n    return this.request(`/notifications/${id}/read`, {\n      method: 'PATCH'\n    });\n  }\n\n  async markAllNotificationsRead() {\n    return this.request('/notifications/mark-all-read', {\n      method: 'PATCH'\n    });\n  }\n\n  // AI Services\n  async chatWithAI(message: string, context?: any) {\n    return this.request('/ai/chat', {\n      method: 'POST',\n      body: { message, context }\n    });\n  }\n\n  async analyzeData(data: any, type: string) {\n    return this.request('/ai/analyze', {\n      method: 'POST',\n      body: { data, type }\n    });\n  }\n\n  async predictData(data: any, model: string) {\n    return this.request('/ai/predict', {\n      method: 'POST',\n      body: { data, model }\n    });\n  }\n\n  // Health and system status\n  async getHealth() {\n    return this.request('/health/simple');\n  }\n\n  async getMetrics() {\n    return this.request('/metrics');\n  }\n}\n\n// Export singleton instance\nexport const apiClient = new ApiClient();\nexport default apiClient;\n\n// Type exports for consumers\nexport type { ApiResponse, PaginatedResponse };"],"names":["apiClient","BACKEND_URL","process","env","NEXT_PUBLIC_BACKEND_URL","API_BASE","ApiClient","getAuthHeaders","token","window","localStorage","getItem","setToken","setItem","clearToken","removeItem","buildUrl","endpoint","params","url","URL","Object","entries","forEach","key","value","searchParams","append","toString","request","options","method","headers","body","config","JSON","stringify","response","fetch","data","json","ok","success","error","code","status","message","details","timestamp","Date","toISOString","Error","login","email","password","register","name","company","getProfile","getUsers","getUserById","id","updateUser","deleteUser","getOrganizations","getOrganizationById","createOrganization","getNotifications","markNotificationRead","markAllNotificationsRead","chatWithAI","context","analyzeData","type","predictData","model","getHealth","getMetrics"],"mappings":"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"}