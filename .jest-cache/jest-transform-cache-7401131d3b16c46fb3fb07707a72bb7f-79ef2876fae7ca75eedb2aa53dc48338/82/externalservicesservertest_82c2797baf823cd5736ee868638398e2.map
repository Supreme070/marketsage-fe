{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/__tests__/mcp/external-services-server.test.ts"],"sourcesContent":["/**\n * External Services MCP Server Unit Tests\n * \n * Comprehensive tests for the External Services MCP server including:\n * - Email service integration testing with real providers\n * - SMS service testing with multiple providers (AfricasTalking, Twilio)\n * - WhatsApp Business API integration testing\n * - Message validation and formatting\n * - Provider balance and status checking\n * - Delivery status tracking\n * - Template management and personalization\n * - Multi-channel message routing\n * - Error handling for service failures\n * - Rate limiting and quota management\n * - Security and permission validation\n * - Audit logging for message sending\n * - Cost tracking and billing integration\n */\n\nimport { ExternalServicesMCPServer } from '../../mcp/servers/external-services-server';\nimport { MCPServerConfig } from '../../mcp/config/mcp-config';\nimport { MCPAuthContext, MCPValidationError, SendMessageRequest } from '../../mcp/types/mcp-types';\nimport { \n  mockPrismaClient, \n  mockRedisClient, \n  mockAuditLogger,\n  testDataFactory,\n  mockAuthScenarios,\n  mockDatabaseScenarios,\n  resetAllMocks,\n  setupDefaultMocks\n} from './__mocks__/mcp-mocks';\n\n// Mock external service dependencies\njest.mock('../../lib/db/prisma', () => ({\n  prisma: mockPrismaClient\n}));\n\njest.mock('../../lib/cache/redis-client', () => ({\n  redisCache: mockRedisClient,\n  CACHE_KEYS: {\n    API_RATE_LIMIT: (key: string) => `rate_limit:${key}`\n  }\n}));\n\njest.mock('../../lib/audit/enterprise-audit-logger', () => ({\n  enterpriseAuditLogger: mockAuditLogger\n}));\n\njest.mock('../../lib/logger', () => ({\n  logger: {\n    info: jest.fn(),\n    error: jest.fn(),\n    warn: jest.fn(),\n    debug: jest.fn()\n  }\n}));\n\n// Mock external service integrations\njest.mock('../../lib/email-service', () => ({\n  sendTrackedEmail: jest.fn()\n}));\n\njest.mock('../../lib/sms-service', () => ({\n  sendSMS: jest.fn(),\n  smsService: {\n    getBalance: jest.fn(),\n    getDeliveryStatus: jest.fn()\n  }\n}));\n\njest.mock('../../lib/whatsapp-service', () => ({\n  sendWhatsAppMessage: jest.fn()\n}));\n\nimport { sendTrackedEmail } from '../../lib/email-service';\nimport { sendSMS, smsService } from '../../lib/sms-service';\nimport { sendWhatsAppMessage } from '../../lib/whatsapp-service';\nimport { logger } from '../../lib/logger';\n\nconst mockSendTrackedEmail = sendTrackedEmail as jest.MockedFunction<typeof sendTrackedEmail>;\nconst mockSendSMS = sendSMS as jest.MockedFunction<typeof sendSMS>;\nconst mockSendWhatsAppMessage = sendWhatsAppMessage as jest.MockedFunction<typeof sendWhatsAppMessage>;\nconst mockSMSService = smsService as jest.Mocked<typeof smsService>;\n\n// Test data factories for external services\nconst createMockEmailResult = (overrides?: any) => ({\n  success: true,\n  messageId: 'email-msg-123',\n  provider: 'sendgrid',\n  deliveredAt: new Date().toISOString(),\n  cost: 0.001,\n  ...overrides\n});\n\nconst createMockSMSResult = (overrides?: any) => ({\n  success: true,\n  messageId: 'sms-msg-456',\n  provider: 'africastalking',\n  cost: 0.05,\n  delivered: true,\n  ...overrides\n});\n\nconst createMockWhatsAppResult = (overrides?: any) => ({\n  success: true,\n  messageId: 'wa-msg-789',\n  provider: 'whatsapp_business',\n  status: 'sent',\n  ...overrides\n});\n\ndescribe('External Services MCP Server', () => {\n  let server: ExternalServicesMCPServer;\n  let config: MCPServerConfig;\n\n  beforeEach(() => {\n    resetAllMocks();\n    setupDefaultMocks();\n\n    config = {\n      name: 'external-services-server',\n      version: '1.0.0',\n      port: 3006,\n      enabled: true,\n      authentication: { required: true, methods: ['jwt'] },\n      rateLimit: { enabled: true, maxRequests: 100, windowMs: 60000 },\n      fallback: { enabled: true, timeout: 5000 },\n      validation: { strict: true, sanitizeOutput: true }\n    };\n\n    server = new ExternalServicesMCPServer(config);\n\n    // Reset external service mocks\n    mockSendTrackedEmail.mockClear();\n    mockSendSMS.mockClear();\n    mockSendWhatsAppMessage.mockClear();\n    mockSMSService.getBalance.mockClear();\n    mockSMSService.getDeliveryStatus.mockClear();\n  });\n\n  afterEach(() => {\n    resetAllMocks();\n  });\n\n  describe('Resource Listing', () => {\n    it('should list available service resources for users with write permissions', async () => {\n      // Arrange\n      const userContext = testUtils.createMockAuthContext({\n        role: 'ADMIN',\n        permissions: ['write:org']\n      });\n\n      // Act\n      const resources = await server['listResources'](userContext);\n\n      // Assert\n      expect(resources).toHaveLength(5);\n      expect(resources.map(r => r.uri)).toEqual([\n        'services://email',\n        'services://sms',\n        'services://whatsapp',\n        'services://templates',\n        'services://providers'\n      ]);\n    });\n\n    it('should list limited resources for users without write permissions', async () => {\n      // Arrange\n      const userContext = testUtils.createMockAuthContext({\n        role: 'USER',\n        permissions: ['read:own:basic']\n      });\n\n      // Act\n      const resources = await server['listResources'](userContext);\n\n      // Assert\n      expect(resources).toHaveLength(2);\n      expect(resources.map(r => r.uri)).toEqual([\n        'services://templates',\n        'services://providers'\n      ]);\n    });\n  });\n\n  describe('Tool Listing', () => {\n    it('should list available tools for users with write permissions', async () => {\n      // Arrange\n      const userContext = testUtils.createMockAuthContext({\n        role: 'ADMIN',\n        permissions: ['write:org']\n      });\n\n      // Act\n      const tools = await server['listTools'](userContext);\n\n      // Assert\n      expect(tools).toHaveLength(6);\n      expect(tools.map(t => t.name)).toEqual([\n        'send_email',\n        'send_sms',\n        'send_whatsapp',\n        'get_delivery_status',\n        'get_provider_balance',\n        'validate_message'\n      ]);\n      \n      // Verify tool schemas\n      const emailTool = tools.find(t => t.name === 'send_email');\n      expect(emailTool?.inputSchema.properties.to.format).toBe('email');\n      expect(emailTool?.inputSchema.required).toEqual(['to', 'subject', 'content']);\n\n      const smsTool = tools.find(t => t.name === 'send_sms');\n      expect(smsTool?.inputSchema.properties.to.pattern).toBe('^\\\\+[1-9]\\\\d{1,14}$');\n      expect(smsTool?.inputSchema.properties.content.maxLength).toBe(160);\n    });\n\n    it('should list limited tools for users without write permissions', async () => {\n      // Arrange\n      const userContext = testUtils.createMockAuthContext({\n        role: 'USER',\n        permissions: ['read:own:basic']\n      });\n\n      // Act\n      const tools = await server['listTools'](userContext);\n\n      // Assert\n      expect(tools).toHaveLength(3);\n      expect(tools.map(t => t.name)).toEqual([\n        'get_delivery_status',\n        'get_provider_balance',\n        'validate_message'\n      ]);\n    });\n  });\n\n  describe('Email Service Integration', () => {\n    it('should send email through real email service with validation', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const emailResult = createMockEmailResult();\n      \n      // Mock the real email service method\n      server['sendEmailWithRealService'] = jest.fn().mockResolvedValue(emailResult);\n\n      const args = {\n        to: 'recipient@example.com',\n        subject: 'Test Email Subject',\n        content: '<p>This is a test email</p>',\n        templateId: 'email-template-1',\n        personalization: { name: 'John Doe', company: 'ACME Corp' }\n      };\n\n      // Act\n      const result = await server['callTool']('send_email', args, authContext);\n\n      // Assert\n      expect(result.content[0].type).toBe('text');\n      const data = JSON.parse(result.content[0].text);\n      expect(data.success).toBe(true);\n      expect(data.data.messageId).toBe('email-msg-123');\n      expect(data.data.provider).toBe('sendgrid');\n      expect(data.meta.channel).toBe('email');\n      expect(data.meta.timestamp).toBeDefined();\n\n      // Verify service was called with correct parameters\n      expect(server['sendEmailWithRealService']).toHaveBeenCalledWith({\n        to: 'recipient@example.com',\n        subject: 'Test Email Subject',\n        content: '<p>This is a test email</p>',\n        templateId: 'email-template-1',\n        personalization: { name: 'John Doe', company: 'ACME Corp' },\n        organizationId: authContext.organizationId,\n        userId: authContext.userId\n      });\n\n      // Verify logging\n      expect(logger.info).toHaveBeenCalledWith(\n        'MCP External Services: Sending email',\n        expect.objectContaining({\n          to: 'recipient@example.com',\n          subject: 'Test Email Subject',\n          templateId: 'email-template-1',\n          userId: authContext.userId\n        })\n      );\n    });\n\n    it('should validate email address format', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const args = {\n        to: 'invalid-email-format',\n        subject: 'Test Subject',\n        content: 'Test content'\n      };\n\n      // Act\n      const result = await server['callTool']('send_email', args, authContext);\n\n      // Assert\n      expect(result.isError).toBe(true);\n      const data = JSON.parse(result.content[0].text);\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('Invalid email address format');\n      expect(data.to).toBe('invalid-email-format');\n    });\n\n    it('should handle email service failures gracefully', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      server['sendEmailWithRealService'] = jest.fn().mockRejectedValue(new Error('SMTP server unavailable'));\n\n      const args = {\n        to: 'valid@example.com',\n        subject: 'Test Subject',\n        content: 'Test content'\n      };\n\n      // Act\n      const result = await server['callTool']('send_email', args, authContext);\n\n      // Assert\n      expect(result.isError).toBe(true);\n      const data = JSON.parse(result.content[0].text);\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('Failed to send email');\n      expect(data.details).toBe('SMTP server unavailable');\n\n      // Verify error logging\n      expect(logger.error).toHaveBeenCalledWith(\n        'MCP External Services: Email sending failed',\n        expect.any(Error)\n      );\n    });\n  });\n\n  describe('SMS Service Integration', () => {\n    it('should send SMS through real SMS service with provider selection', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const smsResult = createMockSMSResult();\n      \n      // Mock the real SMS service method\n      server['sendSMSWithRealService'] = jest.fn().mockResolvedValue(smsResult);\n\n      const args = {\n        to: '+234812345678',\n        content: 'Your verification code is 123456',\n        provider: 'africastalking',\n        templateId: 'sms-verification'\n      };\n\n      // Act\n      const result = await server['callTool']('send_sms', args, authContext);\n\n      // Assert\n      expect(result.content[0].type).toBe('text');\n      const data = JSON.parse(result.content[0].text);\n      expect(data.success).toBe(true);\n      expect(data.data.messageId).toBe('sms-msg-456');\n      expect(data.data.provider).toBe('africastalking');\n      expect(data.meta.channel).toBe('sms');\n      expect(data.meta.cost).toBe(0.05);\n\n      // Verify service was called with correct parameters\n      expect(server['sendSMSWithRealService']).toHaveBeenCalledWith({\n        to: '+234812345678',\n        content: 'Your verification code is 123456',\n        templateId: 'sms-verification',\n        provider: 'africastalking',\n        organizationId: authContext.organizationId,\n        userId: authContext.userId\n      });\n\n      // Verify logging\n      expect(logger.info).toHaveBeenCalledWith(\n        'MCP External Services: Sending SMS',\n        expect.objectContaining({\n          to: '+234812345678',\n          contentLength: 32,\n          provider: 'africastalking',\n          userId: authContext.userId\n        })\n      );\n    });\n\n    it('should validate phone number format for SMS', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const args = {\n        to: '08123456789', // Invalid format (no country code)\n        content: 'Test message'\n      };\n\n      // Act\n      const result = await server['callTool']('send_sms', args, authContext);\n\n      // Assert\n      expect(result.isError).toBe(true);\n      const data = JSON.parse(result.content[0].text);\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('Invalid phone number format. Use international format (+1234567890)');\n      expect(data.to).toBe('08123456789');\n    });\n\n    it('should validate SMS content length', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const longMessage = 'A'.repeat(161); // Exceeds 160 character limit\n      const args = {\n        to: '+234812345678',\n        content: longMessage\n      };\n\n      // Act\n      const result = await server['callTool']('send_sms', args, authContext);\n\n      // Assert\n      expect(result.isError).toBe(true);\n      const data = JSON.parse(result.content[0].text);\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('SMS content exceeds 160 character limit');\n      expect(data.contentLength).toBe(161);\n      expect(data.maxLength).toBe(160);\n    });\n\n    it('should use auto provider selection when not specified', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const smsResult = createMockSMSResult({ provider: 'twilio' });\n      server['sendSMSWithRealService'] = jest.fn().mockResolvedValue(smsResult);\n\n      const args = {\n        to: '+1234567890',\n        content: 'Auto provider test'\n        // provider defaults to 'auto'\n      };\n\n      // Act\n      const result = await server['callTool']('send_sms', args, authContext);\n\n      // Assert\n      const data = JSON.parse(result.content[0].text);\n      expect(data.success).toBe(true);\n      expect(data.data.provider).toBe('twilio'); // Auto-selected provider\n\n      expect(server['sendSMSWithRealService']).toHaveBeenCalledWith(\n        expect.objectContaining({\n          provider: 'auto'\n        })\n      );\n    });\n  });\n\n  describe('WhatsApp Service Integration', () => {\n    it('should send WhatsApp message through real WhatsApp service', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const whatsappResult = createMockWhatsAppResult();\n      \n      // Mock the real WhatsApp service method\n      server['sendWhatsAppWithRealService'] = jest.fn().mockResolvedValue(whatsappResult);\n\n      const args = {\n        to: '+234812345678',\n        content: 'Welcome to our service!',\n        templateId: 'welcome_template',\n        templateParams: ['John Doe', 'Premium'],\n        mediaUrl: 'https://example.com/welcome-image.jpg'\n      };\n\n      // Act\n      const result = await server['callTool']('send_whatsapp', args, authContext);\n\n      // Assert\n      expect(result.content[0].type).toBe('text');\n      const data = JSON.parse(result.content[0].text);\n      expect(data.success).toBe(true);\n      expect(data.data.messageId).toBe('wa-msg-789');\n      expect(data.data.provider).toBe('whatsapp_business');\n      expect(data.meta.channel).toBe('whatsapp');\n      expect(data.meta.templateUsed).toBe(true);\n\n      // Verify service was called with correct parameters\n      expect(server['sendWhatsAppWithRealService']).toHaveBeenCalledWith({\n        to: '+234812345678',\n        content: 'Welcome to our service!',\n        templateId: 'welcome_template',\n        templateParams: ['John Doe', 'Premium'],\n        mediaUrl: 'https://example.com/welcome-image.jpg',\n        organizationId: authContext.organizationId,\n        userId: authContext.userId\n      });\n\n      // Verify logging\n      expect(logger.info).toHaveBeenCalledWith(\n        'MCP External Services: Sending WhatsApp',\n        expect.objectContaining({\n          to: '+234812345678',\n          contentLength: 25,\n          templateId: 'welcome_template',\n          hasMedia: true,\n          userId: authContext.userId\n        })\n      );\n    });\n\n    it('should validate WhatsApp phone number format', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const args = {\n        to: 'invalid-whatsapp-number',\n        content: 'Test message'\n      };\n\n      // Act\n      const result = await server['callTool']('send_whatsapp', args, authContext);\n\n      // Assert\n      expect(result.isError).toBe(true);\n      const data = JSON.parse(result.content[0].text);\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('Invalid WhatsApp number format. Use international format (+1234567890)');\n    });\n\n    it('should handle WhatsApp service failures', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      server['sendWhatsAppWithRealService'] = jest.fn().mockRejectedValue(\n        new Error('WhatsApp Business API quota exceeded')\n      );\n\n      const args = {\n        to: '+234812345678',\n        content: 'Test message'\n      };\n\n      // Act\n      const result = await server['callTool']('send_whatsapp', args, authContext);\n\n      // Assert\n      expect(result.isError).toBe(true);\n      const data = JSON.parse(result.content[0].text);\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('Failed to send WhatsApp message');\n      expect(data.details).toBe('WhatsApp Business API quota exceeded');\n    });\n  });\n\n  describe('Delivery Status Tracking', () => {\n    it('should get delivery status from real service providers', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      \n      // Mock the delivery status method\n      server['getDeliveryStatus'] = jest.fn().mockResolvedValue({\n        content: [{\n          type: \"text\",\n          text: JSON.stringify({\n            success: true,\n            data: {\n              messageId: 'sms-msg-456',\n              channel: 'sms',\n              status: 'delivered',\n              deliveredAt: new Date().toISOString(),\n              provider: 'africastalking',\n              cost: 0.05,\n              attempts: 1,\n              statusHistory: [\n                { status: 'sent', timestamp: new Date(Date.now() - 30000).toISOString() },\n                { status: 'delivered', timestamp: new Date().toISOString() }\n              ]\n            }\n          })\n        }]\n      });\n\n      const args = { messageId: 'sms-msg-456', channel: 'sms' };\n\n      // Act\n      const result = await server['callTool']('get_delivery_status', args, authContext);\n\n      // Assert\n      const data = JSON.parse(result.content[0].text);\n      expect(data.success).toBe(true);\n      expect(data.data.messageId).toBe('sms-msg-456');\n      expect(data.data.status).toBe('delivered');\n      expect(data.data.provider).toBe('africastalking');\n      expect(data.data.statusHistory).toHaveLength(2);\n    });\n\n    it('should handle delivery status for different channels', async () => {\n      // Test each channel type\n      const channels = ['email', 'sms', 'whatsapp'];\n      \n      for (const channel of channels) {\n        // Arrange\n        const authContext = testUtils.createMockAuthContext();\n        server['getDeliveryStatus'] = jest.fn().mockResolvedValue({\n          content: [{\n            type: \"text\",\n            text: JSON.stringify({\n              success: true,\n              data: {\n                messageId: `${channel}-msg-123`,\n                channel,\n                status: 'delivered'\n              }\n            })\n          }]\n        });\n\n        const args = { messageId: `${channel}-msg-123`, channel };\n\n        // Act\n        const result = await server['callTool']('get_delivery_status', args, authContext);\n\n        // Assert\n        const data = JSON.parse(result.content[0].text);\n        expect(data.success).toBe(true);\n        expect(data.data.channel).toBe(channel);\n      }\n    });\n  });\n\n  describe('Provider Balance and Status', () => {\n    it('should get provider balance from real providers', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      \n      // Mock the provider balance method\n      server['getProviderBalance'] = jest.fn().mockResolvedValue({\n        content: [{\n          type: \"text\",\n          text: JSON.stringify({\n            success: true,\n            data: {\n              provider: 'africastalking',\n              balance: 150.75,\n              currency: 'USD',\n              lastUpdated: new Date().toISOString(),\n              threshold: 10.0,\n              status: 'active',\n              usageStats: {\n                thisMonth: 45.25,\n                lastMonth: 38.90,\n                averageMonthly: 42.15\n              }\n            }\n          })\n        }]\n      });\n\n      const args = { provider: 'africastalking' };\n\n      // Act\n      const result = await server['callTool']('get_provider_balance', args, authContext);\n\n      // Assert\n      const data = JSON.parse(result.content[0].text);\n      expect(data.success).toBe(true);\n      expect(data.data.provider).toBe('africastalking');\n      expect(data.data.balance).toBe(150.75);\n      expect(data.data.currency).toBe('USD');\n      expect(data.data.status).toBe('active');\n      expect(data.data.usageStats).toBeDefined();\n    });\n\n    it('should check balance for different provider types', async () => {\n      // Test different providers\n      const providers = ['africastalking', 'twilio', 'email', 'whatsapp'];\n      \n      for (const provider of providers) {\n        // Arrange\n        const authContext = testUtils.createMockAuthContext();\n        server['getProviderBalance'] = jest.fn().mockResolvedValue({\n          content: [{\n            type: \"text\",\n            text: JSON.stringify({\n              success: true,\n              data: {\n                provider,\n                balance: 100.0,\n                status: 'active'\n              }\n            })\n          }]\n        });\n\n        const args = { provider };\n\n        // Act\n        const result = await server['callTool']('get_provider_balance', args, authContext);\n\n        // Assert\n        const data = JSON.parse(result.content[0].text);\n        expect(data.success).toBe(true);\n        expect(data.data.provider).toBe(provider);\n      }\n    });\n  });\n\n  describe('Message Validation', () => {\n    it('should validate messages before sending', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      \n      // Mock the message validation method\n      server['validateMessage'] = jest.fn().mockResolvedValue({\n        content: [{\n          type: \"text\",\n          text: JSON.stringify({\n            success: true,\n            data: {\n              valid: true,\n              channel: 'email',\n              to: 'valid@example.com',\n              contentLength: 25,\n              estimatedCost: 0.001,\n              recommendations: [\n                'Email format is valid',\n                'Content length is appropriate'\n              ],\n              warnings: [],\n              errors: []\n            }\n          })\n        }]\n      });\n\n      const args = {\n        channel: 'email',\n        to: 'valid@example.com',\n        content: 'This is a test message.'\n      };\n\n      // Act\n      const result = await server['callTool']('validate_message', args, authContext);\n\n      // Assert\n      const data = JSON.parse(result.content[0].text);\n      expect(data.success).toBe(true);\n      expect(data.data.valid).toBe(true);\n      expect(data.data.channel).toBe('email');\n      expect(data.data.recommendations).toContain('Email format is valid');\n      expect(data.data.errors).toHaveLength(0);\n    });\n\n    it('should identify validation errors for different channels', async () => {\n      // Test validation for each channel\n      const testCases = [\n        {\n          channel: 'email',\n          to: 'invalid-email',\n          content: 'Test',\n          expectedError: 'Invalid email format'\n        },\n        {\n          channel: 'sms',\n          to: '12345',\n          content: 'Test',\n          expectedError: 'Invalid phone number format'\n        },\n        {\n          channel: 'sms',\n          to: '+1234567890',\n          content: 'A'.repeat(161),\n          expectedError: 'Content exceeds SMS length limit'\n        }\n      ];\n\n      for (const testCase of testCases) {\n        // Arrange\n        const authContext = testUtils.createMockAuthContext();\n        server['validateMessage'] = jest.fn().mockResolvedValue({\n          content: [{\n            type: \"text\",\n            text: JSON.stringify({\n              success: true,\n              data: {\n                valid: false,\n                channel: testCase.channel,\n                errors: [testCase.expectedError]\n              }\n            })\n          }]\n        });\n\n        const args = {\n          channel: testCase.channel,\n          to: testCase.to,\n          content: testCase.content\n        };\n\n        // Act\n        const result = await server['callTool']('validate_message', args, authContext);\n\n        // Assert\n        const data = JSON.parse(result.content[0].text);\n        expect(data.success).toBe(true);\n        expect(data.data.valid).toBe(false);\n        expect(data.data.errors).toContain(testCase.expectedError);\n      }\n    });\n  });\n\n  describe('Resource URI Validation', () => {\n    it('should throw error for unknown resource paths', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const invalidUri = 'services://unknown-service';\n\n      // Act & Assert\n      await expect(\n        server['readResource'](invalidUri, authContext)\n      ).rejects.toThrow(MCPValidationError);\n    });\n  });\n\n  describe('Tool Validation', () => {\n    it('should throw error for unknown tools', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n\n      // Act & Assert\n      await expect(\n        server['callTool']('unknown_tool', {}, authContext)\n      ).rejects.toThrow(MCPValidationError);\n    });\n  });\n\n  describe('Service Health and Status', () => {\n    it('should check service provider status and connectivity', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      \n      // Mock service info methods\n      server['getEmailServiceInfo'] = jest.fn().mockResolvedValue({\n        uri: \"services://email\",\n        mimeType: \"application/json\",\n        text: JSON.stringify({\n          provider: 'sendgrid',\n          status: 'active',\n          lastCheck: new Date().toISOString(),\n          connectivity: true,\n          quotaUsed: 1250,\n          quotaLimit: 10000,\n          avgDeliveryTime: 2.3\n        })\n      });\n\n      const uri = 'services://email';\n\n      // Act\n      const result = await server['readResource'](uri, authContext);\n\n      // Assert\n      const data = JSON.parse(result.text);\n      expect(data.provider).toBe('sendgrid');\n      expect(data.status).toBe('active');\n      expect(data.connectivity).toBe(true);\n      expect(data.quotaUsed).toBe(1250);\n      expect(data.quotaLimit).toBe(10000);\n    });\n  });\n\n  describe('Performance and Rate Limiting', () => {\n    it('should handle concurrent message sending efficiently', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const emailResult = createMockEmailResult();\n      server['sendEmailWithRealService'] = jest.fn().mockResolvedValue(emailResult);\n\n      const emailPromises = Array.from({ length: 10 }, (_, i) => \n        server['callTool']('send_email', {\n          to: `user${i}@example.com`,\n          subject: `Test Email ${i}`,\n          content: `Content for email ${i}`\n        }, authContext)\n      );\n\n      // Act\n      const startTime = performance.now();\n      const results = await Promise.all(emailPromises);\n      const endTime = performance.now();\n      const duration = endTime - startTime;\n\n      // Assert\n      expect(duration).toBeLessThan(1000); // Should complete quickly\n      expect(results).toHaveLength(10);\n      results.forEach(result => {\n        const data = JSON.parse(result.content[0].text);\n        expect(data.success).toBe(true);\n      });\n    });\n\n    it('should track message costs and usage', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const smsResult = createMockSMSResult({ cost: 0.05 });\n      server['sendSMSWithRealService'] = jest.fn().mockResolvedValue(smsResult);\n\n      const args = {\n        to: '+234812345678',\n        content: 'Test SMS'\n      };\n\n      // Act\n      const result = await server['callTool']('send_sms', args, authContext);\n\n      // Assert\n      const data = JSON.parse(result.content[0].text);\n      expect(data.success).toBe(true);\n      expect(data.meta.cost).toBe(0.05);\n      expect(data.meta.channel).toBe('sms');\n    });\n  });\n\n  describe('Security and Permissions', () => {\n    it('should enforce permissions for message sending', async () => {\n      // Arrange\n      const limitedUserContext = testUtils.createMockAuthContext({\n        role: 'USER',\n        permissions: ['read:own:basic'] // No write permissions\n      });\n\n      const args = {\n        to: 'test@example.com',\n        subject: 'Test',\n        content: 'Test'\n      };\n\n      // Act\n      const tools = await server['listTools'](limitedUserContext);\n      \n      // Assert - Should not have send tools\n      expect(tools.map(t => t.name)).not.toContain('send_email');\n      expect(tools.map(t => t.name)).not.toContain('send_sms');\n      expect(tools.map(t => t.name)).not.toContain('send_whatsapp');\n    });\n\n    it('should sanitize sensitive information in logs', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const emailResult = createMockEmailResult();\n      server['sendEmailWithRealService'] = jest.fn().mockResolvedValue(emailResult);\n\n      const args = {\n        to: 'sensitive@example.com',\n        subject: 'Sensitive Subject with API Key: sk-1234567890',\n        content: 'Content with password: secret123'\n      };\n\n      // Act\n      await server['callTool']('send_email', args, authContext);\n\n      // Assert - Should log truncated subject, not full content\n      expect(logger.info).toHaveBeenCalledWith(\n        'MCP External Services: Sending email',\n        expect.objectContaining({\n          to: 'sensitive@example.com',\n          subject: 'Sensitive Subject with API Key: sk-1234567890'.substring(0, 50)\n        })\n      );\n      \n      // Should not log full content with sensitive data\n      expect(logger.info).not.toHaveBeenCalledWith(\n        expect.anything(),\n        expect.objectContaining({\n          content: expect.stringContaining('secret123')\n        })\n      );\n    });\n\n    it('should validate organization isolation for service usage', async () => {\n      // Arrange\n      const userContext = testUtils.createMockAuthContext({ organizationId: 'org-123' });\n      const emailResult = createMockEmailResult();\n      server['sendEmailWithRealService'] = jest.fn().mockResolvedValue(emailResult);\n\n      const args = {\n        to: 'test@example.com',\n        subject: 'Test',\n        content: 'Test'\n      };\n\n      // Act\n      await server['callTool']('send_email', args, userContext);\n\n      // Assert - Should include organization ID in service call\n      expect(server['sendEmailWithRealService']).toHaveBeenCalledWith(\n        expect.objectContaining({\n          organizationId: 'org-123',\n          userId: userContext.userId\n        })\n      );\n    });\n  });\n\n  describe('Integration Testing', () => {\n    it('should handle complete multi-channel messaging workflow', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      \n      // Setup service results\n      const emailResult = createMockEmailResult();\n      const smsResult = createMockSMSResult();\n      const whatsappResult = createMockWhatsAppResult();\n      \n      server['sendEmailWithRealService'] = jest.fn().mockResolvedValue(emailResult);\n      server['sendSMSWithRealService'] = jest.fn().mockResolvedValue(smsResult);\n      server['sendWhatsAppWithRealService'] = jest.fn().mockResolvedValue(whatsappResult);\n\n      // Act - Send messages through all channels\n      const emailResponse = await server['callTool']('send_email', {\n        to: 'user@example.com',\n        subject: 'Welcome!',\n        content: 'Welcome to our service'\n      }, authContext);\n\n      const smsResponse = await server['callTool']('send_sms', {\n        to: '+234812345678',\n        content: 'Welcome SMS'\n      }, authContext);\n\n      const whatsappResponse = await server['callTool']('send_whatsapp', {\n        to: '+234812345678',\n        content: 'Welcome WhatsApp'\n      }, authContext);\n\n      // Assert - All channels succeeded\n      [emailResponse, smsResponse, whatsappResponse].forEach(response => {\n        const data = JSON.parse(response.content[0].text);\n        expect(data.success).toBe(true);\n        expect(data.data.messageId).toBeDefined();\n      });\n\n      // Verify all services were called\n      expect(server['sendEmailWithRealService']).toHaveBeenCalled();\n      expect(server['sendSMSWithRealService']).toHaveBeenCalled();\n      expect(server['sendWhatsAppWithRealService']).toHaveBeenCalled();\n    });\n  });\n});"],"names":["jest","mock","prisma","mockPrismaClient","redisCache","mockRedisClient","CACHE_KEYS","API_RATE_LIMIT","key","enterpriseAuditLogger","mockAuditLogger","logger","info","fn","error","warn","debug","sendTrackedEmail","sendSMS","smsService","getBalance","getDeliveryStatus","sendWhatsAppMessage","mockSendTrackedEmail","mockSendSMS","mockSendWhatsAppMessage","mockSMSService","createMockEmailResult","overrides","success","messageId","provider","deliveredAt","Date","toISOString","cost","createMockSMSResult","delivered","createMockWhatsAppResult","status","describe","server","config","beforeEach","resetAllMocks","setupDefaultMocks","name","version","port","enabled","authentication","required","methods","rateLimit","maxRequests","windowMs","fallback","timeout","validation","strict","sanitizeOutput","ExternalServicesMCPServer","mockClear","afterEach","it","userContext","testUtils","createMockAuthContext","role","permissions","resources","expect","toHaveLength","map","r","uri","toEqual","tools","t","emailTool","find","inputSchema","properties","to","format","toBe","smsTool","pattern","content","maxLength","authContext","emailResult","mockResolvedValue","args","subject","templateId","personalization","company","result","type","data","JSON","parse","text","meta","channel","timestamp","toBeDefined","toHaveBeenCalledWith","organizationId","userId","objectContaining","isError","mockRejectedValue","Error","details","any","smsResult","contentLength","longMessage","repeat","whatsappResult","templateParams","mediaUrl","templateUsed","hasMedia","stringify","attempts","statusHistory","now","channels","balance","currency","lastUpdated","threshold","usageStats","thisMonth","lastMonth","averageMonthly","providers","valid","estimatedCost","recommendations","warnings","errors","toContain","testCases","expectedError","testCase","invalidUri","rejects","toThrow","MCPValidationError","mimeType","lastCheck","connectivity","quotaUsed","quotaLimit","avgDeliveryTime","emailPromises","Array","from","length","_","i","startTime","performance","results","Promise","all","endTime","duration","toBeLessThan","forEach","limitedUserContext","not","substring","anything","stringContaining","emailResponse","smsResponse","whatsappResponse","response","toHaveBeenCalled"],"mappings":"AAAA;;;;;;;;;;;;;;;;;CAiBC;AAgBD,qCAAqC;AACrCA,KAAKC,IAAI,CAAC,uBAAuB,IAAO,CAAA;QACtCC,QAAQC,0BAAgB;IAC1B,CAAA;AAEAH,KAAKC,IAAI,CAAC,gCAAgC,IAAO,CAAA;QAC/CG,YAAYC,yBAAe;QAC3BC,YAAY;YACVC,gBAAgB,CAACC,MAAgB,CAAC,WAAW,EAAEA,KAAK;QACtD;IACF,CAAA;AAEAR,KAAKC,IAAI,CAAC,2CAA2C,IAAO,CAAA;QAC1DQ,uBAAuBC,yBAAe;IACxC,CAAA;AAEAV,KAAKC,IAAI,CAAC,oBAAoB,IAAO,CAAA;QACnCU,QAAQ;YACNC,MAAMZ,KAAKa,EAAE;YACbC,OAAOd,KAAKa,EAAE;YACdE,MAAMf,KAAKa,EAAE;YACbG,OAAOhB,KAAKa,EAAE;QAChB;IACF,CAAA;AAEA,qCAAqC;AACrCb,KAAKC,IAAI,CAAC,2BAA2B,IAAO,CAAA;QAC1CgB,kBAAkBjB,KAAKa,EAAE;IAC3B,CAAA;AAEAb,KAAKC,IAAI,CAAC,yBAAyB,IAAO,CAAA;QACxCiB,SAASlB,KAAKa,EAAE;QAChBM,YAAY;YACVC,YAAYpB,KAAKa,EAAE;YACnBQ,mBAAmBrB,KAAKa,EAAE;QAC5B;IACF,CAAA;AAEAb,KAAKC,IAAI,CAAC,8BAA8B,IAAO,CAAA;QAC7CqB,qBAAqBtB,KAAKa,EAAE;IAC9B,CAAA;;;;wCAtD0C;0BAE6B;0BAUhE;8BA4C0B;4BACG;iCACA;wBACb;AAEvB,MAAMU,uBAAuBN,8BAAgB;AAC7C,MAAMO,cAAcN,mBAAO;AAC3B,MAAMO,0BAA0BH,oCAAmB;AACnD,MAAMI,iBAAiBP,sBAAU;AAEjC,4CAA4C;AAC5C,MAAMQ,wBAAwB,CAACC,YAAqB,CAAA;QAClDC,SAAS;QACTC,WAAW;QACXC,UAAU;QACVC,aAAa,IAAIC,OAAOC,WAAW;QACnCC,MAAM;QACN,GAAGP,SAAS;IACd,CAAA;AAEA,MAAMQ,sBAAsB,CAACR,YAAqB,CAAA;QAChDC,SAAS;QACTC,WAAW;QACXC,UAAU;QACVI,MAAM;QACNE,WAAW;QACX,GAAGT,SAAS;IACd,CAAA;AAEA,MAAMU,2BAA2B,CAACV,YAAqB,CAAA;QACrDC,SAAS;QACTC,WAAW;QACXC,UAAU;QACVQ,QAAQ;QACR,GAAGX,SAAS;IACd,CAAA;AAEAY,SAAS,gCAAgC;IACvC,IAAIC;IACJ,IAAIC;IAEJC,WAAW;QACTC,IAAAA,uBAAa;QACbC,IAAAA,2BAAiB;QAEjBH,SAAS;YACPI,MAAM;YACNC,SAAS;YACTC,MAAM;YACNC,SAAS;YACTC,gBAAgB;gBAAEC,UAAU;gBAAMC,SAAS;oBAAC;iBAAM;YAAC;YACnDC,WAAW;gBAAEJ,SAAS;gBAAMK,aAAa;gBAAKC,UAAU;YAAM;YAC9DC,UAAU;gBAAEP,SAAS;gBAAMQ,SAAS;YAAK;YACzCC,YAAY;gBAAEC,QAAQ;gBAAMC,gBAAgB;YAAK;QACnD;QAEAnB,SAAS,IAAIoB,iDAAyB,CAACnB;QAEvC,+BAA+B;QAC/BnB,qBAAqBuC,SAAS;QAC9BtC,YAAYsC,SAAS;QACrBrC,wBAAwBqC,SAAS;QACjCpC,eAAeN,UAAU,CAAC0C,SAAS;QACnCpC,eAAeL,iBAAiB,CAACyC,SAAS;IAC5C;IAEAC,UAAU;QACRnB,IAAAA,uBAAa;IACf;IAEAJ,SAAS,oBAAoB;QAC3BwB,GAAG,4EAA4E;YAC7E,UAAU;YACV,MAAMC,cAAcC,UAAUC,qBAAqB,CAAC;gBAClDC,MAAM;gBACNC,aAAa;oBAAC;iBAAY;YAC5B;YAEA,MAAM;YACN,MAAMC,YAAY,MAAM7B,MAAM,CAAC,gBAAgB,CAACwB;YAEhD,SAAS;YACTM,OAAOD,WAAWE,YAAY,CAAC;YAC/BD,OAAOD,UAAUG,GAAG,CAACC,CAAAA,IAAKA,EAAEC,GAAG,GAAGC,OAAO,CAAC;gBACxC;gBACA;gBACA;gBACA;gBACA;aACD;QACH;QAEAZ,GAAG,qEAAqE;YACtE,UAAU;YACV,MAAMC,cAAcC,UAAUC,qBAAqB,CAAC;gBAClDC,MAAM;gBACNC,aAAa;oBAAC;iBAAiB;YACjC;YAEA,MAAM;YACN,MAAMC,YAAY,MAAM7B,MAAM,CAAC,gBAAgB,CAACwB;YAEhD,SAAS;YACTM,OAAOD,WAAWE,YAAY,CAAC;YAC/BD,OAAOD,UAAUG,GAAG,CAACC,CAAAA,IAAKA,EAAEC,GAAG,GAAGC,OAAO,CAAC;gBACxC;gBACA;aACD;QACH;IACF;IAEApC,SAAS,gBAAgB;QACvBwB,GAAG,gEAAgE;YACjE,UAAU;YACV,MAAMC,cAAcC,UAAUC,qBAAqB,CAAC;gBAClDC,MAAM;gBACNC,aAAa;oBAAC;iBAAY;YAC5B;YAEA,MAAM;YACN,MAAMQ,QAAQ,MAAMpC,MAAM,CAAC,YAAY,CAACwB;YAExC,SAAS;YACTM,OAAOM,OAAOL,YAAY,CAAC;YAC3BD,OAAOM,MAAMJ,GAAG,CAACK,CAAAA,IAAKA,EAAEhC,IAAI,GAAG8B,OAAO,CAAC;gBACrC;gBACA;gBACA;gBACA;gBACA;gBACA;aACD;YAED,sBAAsB;YACtB,MAAMG,YAAYF,MAAMG,IAAI,CAACF,CAAAA,IAAKA,EAAEhC,IAAI,KAAK;YAC7CyB,OAAOQ,WAAWE,YAAYC,WAAWC,GAAGC,QAAQC,IAAI,CAAC;YACzDd,OAAOQ,WAAWE,YAAY9B,UAAUyB,OAAO,CAAC;gBAAC;gBAAM;gBAAW;aAAU;YAE5E,MAAMU,UAAUT,MAAMG,IAAI,CAACF,CAAAA,IAAKA,EAAEhC,IAAI,KAAK;YAC3CyB,OAAOe,SAASL,YAAYC,WAAWC,GAAGI,SAASF,IAAI,CAAC;YACxDd,OAAOe,SAASL,YAAYC,WAAWM,QAAQC,WAAWJ,IAAI,CAAC;QACjE;QAEArB,GAAG,iEAAiE;YAClE,UAAU;YACV,MAAMC,cAAcC,UAAUC,qBAAqB,CAAC;gBAClDC,MAAM;gBACNC,aAAa;oBAAC;iBAAiB;YACjC;YAEA,MAAM;YACN,MAAMQ,QAAQ,MAAMpC,MAAM,CAAC,YAAY,CAACwB;YAExC,SAAS;YACTM,OAAOM,OAAOL,YAAY,CAAC;YAC3BD,OAAOM,MAAMJ,GAAG,CAACK,CAAAA,IAAKA,EAAEhC,IAAI,GAAG8B,OAAO,CAAC;gBACrC;gBACA;gBACA;aACD;QACH;IACF;IAEApC,SAAS,6BAA6B;QACpCwB,GAAG,gEAAgE;YACjE,UAAU;YACV,MAAM0B,cAAcxB,UAAUC,qBAAqB;YACnD,MAAMwB,cAAchE;YAEpB,qCAAqC;YACrCc,MAAM,CAAC,2BAA2B,GAAGzC,KAAKa,EAAE,GAAG+E,iBAAiB,CAACD;YAEjE,MAAME,OAAO;gBACXV,IAAI;gBACJW,SAAS;gBACTN,SAAS;gBACTO,YAAY;gBACZC,iBAAiB;oBAAElD,MAAM;oBAAYmD,SAAS;gBAAY;YAC5D;YAEA,MAAM;YACN,MAAMC,SAAS,MAAMzD,MAAM,CAAC,WAAW,CAAC,cAAcoD,MAAMH;YAE5D,SAAS;YACTnB,OAAO2B,OAAOV,OAAO,CAAC,EAAE,CAACW,IAAI,EAAEd,IAAI,CAAC;YACpC,MAAMe,OAAOC,KAAKC,KAAK,CAACJ,OAAOV,OAAO,CAAC,EAAE,CAACe,IAAI;YAC9ChC,OAAO6B,KAAKvE,OAAO,EAAEwD,IAAI,CAAC;YAC1Bd,OAAO6B,KAAKA,IAAI,CAACtE,SAAS,EAAEuD,IAAI,CAAC;YACjCd,OAAO6B,KAAKA,IAAI,CAACrE,QAAQ,EAAEsD,IAAI,CAAC;YAChCd,OAAO6B,KAAKI,IAAI,CAACC,OAAO,EAAEpB,IAAI,CAAC;YAC/Bd,OAAO6B,KAAKI,IAAI,CAACE,SAAS,EAAEC,WAAW;YAEvC,oDAAoD;YACpDpC,OAAO9B,MAAM,CAAC,2BAA2B,EAAEmE,oBAAoB,CAAC;gBAC9DzB,IAAI;gBACJW,SAAS;gBACTN,SAAS;gBACTO,YAAY;gBACZC,iBAAiB;oBAAElD,MAAM;oBAAYmD,SAAS;gBAAY;gBAC1DY,gBAAgBnB,YAAYmB,cAAc;gBAC1CC,QAAQpB,YAAYoB,MAAM;YAC5B;YAEA,iBAAiB;YACjBvC,OAAO5D,cAAM,CAACC,IAAI,EAAEgG,oBAAoB,CACtC,wCACArC,OAAOwC,gBAAgB,CAAC;gBACtB5B,IAAI;gBACJW,SAAS;gBACTC,YAAY;gBACZe,QAAQpB,YAAYoB,MAAM;YAC5B;QAEJ;QAEA9C,GAAG,wCAAwC;YACzC,UAAU;YACV,MAAM0B,cAAcxB,UAAUC,qBAAqB;YACnD,MAAM0B,OAAO;gBACXV,IAAI;gBACJW,SAAS;gBACTN,SAAS;YACX;YAEA,MAAM;YACN,MAAMU,SAAS,MAAMzD,MAAM,CAAC,WAAW,CAAC,cAAcoD,MAAMH;YAE5D,SAAS;YACTnB,OAAO2B,OAAOc,OAAO,EAAE3B,IAAI,CAAC;YAC5B,MAAMe,OAAOC,KAAKC,KAAK,CAACJ,OAAOV,OAAO,CAAC,EAAE,CAACe,IAAI;YAC9ChC,OAAO6B,KAAKvE,OAAO,EAAEwD,IAAI,CAAC;YAC1Bd,OAAO6B,KAAKtF,KAAK,EAAEuE,IAAI,CAAC;YACxBd,OAAO6B,KAAKjB,EAAE,EAAEE,IAAI,CAAC;QACvB;QAEArB,GAAG,mDAAmD;YACpD,UAAU;YACV,MAAM0B,cAAcxB,UAAUC,qBAAqB;YACnD1B,MAAM,CAAC,2BAA2B,GAAGzC,KAAKa,EAAE,GAAGoG,iBAAiB,CAAC,IAAIC,MAAM;YAE3E,MAAMrB,OAAO;gBACXV,IAAI;gBACJW,SAAS;gBACTN,SAAS;YACX;YAEA,MAAM;YACN,MAAMU,SAAS,MAAMzD,MAAM,CAAC,WAAW,CAAC,cAAcoD,MAAMH;YAE5D,SAAS;YACTnB,OAAO2B,OAAOc,OAAO,EAAE3B,IAAI,CAAC;YAC5B,MAAMe,OAAOC,KAAKC,KAAK,CAACJ,OAAOV,OAAO,CAAC,EAAE,CAACe,IAAI;YAC9ChC,OAAO6B,KAAKvE,OAAO,EAAEwD,IAAI,CAAC;YAC1Bd,OAAO6B,KAAKtF,KAAK,EAAEuE,IAAI,CAAC;YACxBd,OAAO6B,KAAKe,OAAO,EAAE9B,IAAI,CAAC;YAE1B,uBAAuB;YACvBd,OAAO5D,cAAM,CAACG,KAAK,EAAE8F,oBAAoB,CACvC,+CACArC,OAAO6C,GAAG,CAACF;QAEf;IACF;IAEA1E,SAAS,2BAA2B;QAClCwB,GAAG,oEAAoE;YACrE,UAAU;YACV,MAAM0B,cAAcxB,UAAUC,qBAAqB;YACnD,MAAMkD,YAAYjF;YAElB,mCAAmC;YACnCK,MAAM,CAAC,yBAAyB,GAAGzC,KAAKa,EAAE,GAAG+E,iBAAiB,CAACyB;YAE/D,MAAMxB,OAAO;gBACXV,IAAI;gBACJK,SAAS;gBACTzD,UAAU;gBACVgE,YAAY;YACd;YAEA,MAAM;YACN,MAAMG,SAAS,MAAMzD,MAAM,CAAC,WAAW,CAAC,YAAYoD,MAAMH;YAE1D,SAAS;YACTnB,OAAO2B,OAAOV,OAAO,CAAC,EAAE,CAACW,IAAI,EAAEd,IAAI,CAAC;YACpC,MAAMe,OAAOC,KAAKC,KAAK,CAACJ,OAAOV,OAAO,CAAC,EAAE,CAACe,IAAI;YAC9ChC,OAAO6B,KAAKvE,OAAO,EAAEwD,IAAI,CAAC;YAC1Bd,OAAO6B,KAAKA,IAAI,CAACtE,SAAS,EAAEuD,IAAI,CAAC;YACjCd,OAAO6B,KAAKA,IAAI,CAACrE,QAAQ,EAAEsD,IAAI,CAAC;YAChCd,OAAO6B,KAAKI,IAAI,CAACC,OAAO,EAAEpB,IAAI,CAAC;YAC/Bd,OAAO6B,KAAKI,IAAI,CAACrE,IAAI,EAAEkD,IAAI,CAAC;YAE5B,oDAAoD;YACpDd,OAAO9B,MAAM,CAAC,yBAAyB,EAAEmE,oBAAoB,CAAC;gBAC5DzB,IAAI;gBACJK,SAAS;gBACTO,YAAY;gBACZhE,UAAU;gBACV8E,gBAAgBnB,YAAYmB,cAAc;gBAC1CC,QAAQpB,YAAYoB,MAAM;YAC5B;YAEA,iBAAiB;YACjBvC,OAAO5D,cAAM,CAACC,IAAI,EAAEgG,oBAAoB,CACtC,sCACArC,OAAOwC,gBAAgB,CAAC;gBACtB5B,IAAI;gBACJmC,eAAe;gBACfvF,UAAU;gBACV+E,QAAQpB,YAAYoB,MAAM;YAC5B;QAEJ;QAEA9C,GAAG,+CAA+C;YAChD,UAAU;YACV,MAAM0B,cAAcxB,UAAUC,qBAAqB;YACnD,MAAM0B,OAAO;gBACXV,IAAI;gBACJK,SAAS;YACX;YAEA,MAAM;YACN,MAAMU,SAAS,MAAMzD,MAAM,CAAC,WAAW,CAAC,YAAYoD,MAAMH;YAE1D,SAAS;YACTnB,OAAO2B,OAAOc,OAAO,EAAE3B,IAAI,CAAC;YAC5B,MAAMe,OAAOC,KAAKC,KAAK,CAACJ,OAAOV,OAAO,CAAC,EAAE,CAACe,IAAI;YAC9ChC,OAAO6B,KAAKvE,OAAO,EAAEwD,IAAI,CAAC;YAC1Bd,OAAO6B,KAAKtF,KAAK,EAAEuE,IAAI,CAAC;YACxBd,OAAO6B,KAAKjB,EAAE,EAAEE,IAAI,CAAC;QACvB;QAEArB,GAAG,sCAAsC;YACvC,UAAU;YACV,MAAM0B,cAAcxB,UAAUC,qBAAqB;YACnD,MAAMoD,cAAc,IAAIC,MAAM,CAAC,MAAM,8BAA8B;YACnE,MAAM3B,OAAO;gBACXV,IAAI;gBACJK,SAAS+B;YACX;YAEA,MAAM;YACN,MAAMrB,SAAS,MAAMzD,MAAM,CAAC,WAAW,CAAC,YAAYoD,MAAMH;YAE1D,SAAS;YACTnB,OAAO2B,OAAOc,OAAO,EAAE3B,IAAI,CAAC;YAC5B,MAAMe,OAAOC,KAAKC,KAAK,CAACJ,OAAOV,OAAO,CAAC,EAAE,CAACe,IAAI;YAC9ChC,OAAO6B,KAAKvE,OAAO,EAAEwD,IAAI,CAAC;YAC1Bd,OAAO6B,KAAKtF,KAAK,EAAEuE,IAAI,CAAC;YACxBd,OAAO6B,KAAKkB,aAAa,EAAEjC,IAAI,CAAC;YAChCd,OAAO6B,KAAKX,SAAS,EAAEJ,IAAI,CAAC;QAC9B;QAEArB,GAAG,yDAAyD;YAC1D,UAAU;YACV,MAAM0B,cAAcxB,UAAUC,qBAAqB;YACnD,MAAMkD,YAAYjF,oBAAoB;gBAAEL,UAAU;YAAS;YAC3DU,MAAM,CAAC,yBAAyB,GAAGzC,KAAKa,EAAE,GAAG+E,iBAAiB,CAACyB;YAE/D,MAAMxB,OAAO;gBACXV,IAAI;gBACJK,SAAS;YAEX;YAEA,MAAM;YACN,MAAMU,SAAS,MAAMzD,MAAM,CAAC,WAAW,CAAC,YAAYoD,MAAMH;YAE1D,SAAS;YACT,MAAMU,OAAOC,KAAKC,KAAK,CAACJ,OAAOV,OAAO,CAAC,EAAE,CAACe,IAAI;YAC9ChC,OAAO6B,KAAKvE,OAAO,EAAEwD,IAAI,CAAC;YAC1Bd,OAAO6B,KAAKA,IAAI,CAACrE,QAAQ,EAAEsD,IAAI,CAAC,WAAW,yBAAyB;YAEpEd,OAAO9B,MAAM,CAAC,yBAAyB,EAAEmE,oBAAoB,CAC3DrC,OAAOwC,gBAAgB,CAAC;gBACtBhF,UAAU;YACZ;QAEJ;IACF;IAEAS,SAAS,gCAAgC;QACvCwB,GAAG,8DAA8D;YAC/D,UAAU;YACV,MAAM0B,cAAcxB,UAAUC,qBAAqB;YACnD,MAAMsD,iBAAiBnF;YAEvB,wCAAwC;YACxCG,MAAM,CAAC,8BAA8B,GAAGzC,KAAKa,EAAE,GAAG+E,iBAAiB,CAAC6B;YAEpE,MAAM5B,OAAO;gBACXV,IAAI;gBACJK,SAAS;gBACTO,YAAY;gBACZ2B,gBAAgB;oBAAC;oBAAY;iBAAU;gBACvCC,UAAU;YACZ;YAEA,MAAM;YACN,MAAMzB,SAAS,MAAMzD,MAAM,CAAC,WAAW,CAAC,iBAAiBoD,MAAMH;YAE/D,SAAS;YACTnB,OAAO2B,OAAOV,OAAO,CAAC,EAAE,CAACW,IAAI,EAAEd,IAAI,CAAC;YACpC,MAAMe,OAAOC,KAAKC,KAAK,CAACJ,OAAOV,OAAO,CAAC,EAAE,CAACe,IAAI;YAC9ChC,OAAO6B,KAAKvE,OAAO,EAAEwD,IAAI,CAAC;YAC1Bd,OAAO6B,KAAKA,IAAI,CAACtE,SAAS,EAAEuD,IAAI,CAAC;YACjCd,OAAO6B,KAAKA,IAAI,CAACrE,QAAQ,EAAEsD,IAAI,CAAC;YAChCd,OAAO6B,KAAKI,IAAI,CAACC,OAAO,EAAEpB,IAAI,CAAC;YAC/Bd,OAAO6B,KAAKI,IAAI,CAACoB,YAAY,EAAEvC,IAAI,CAAC;YAEpC,oDAAoD;YACpDd,OAAO9B,MAAM,CAAC,8BAA8B,EAAEmE,oBAAoB,CAAC;gBACjEzB,IAAI;gBACJK,SAAS;gBACTO,YAAY;gBACZ2B,gBAAgB;oBAAC;oBAAY;iBAAU;gBACvCC,UAAU;gBACVd,gBAAgBnB,YAAYmB,cAAc;gBAC1CC,QAAQpB,YAAYoB,MAAM;YAC5B;YAEA,iBAAiB;YACjBvC,OAAO5D,cAAM,CAACC,IAAI,EAAEgG,oBAAoB,CACtC,2CACArC,OAAOwC,gBAAgB,CAAC;gBACtB5B,IAAI;gBACJmC,eAAe;gBACfvB,YAAY;gBACZ8B,UAAU;gBACVf,QAAQpB,YAAYoB,MAAM;YAC5B;QAEJ;QAEA9C,GAAG,gDAAgD;YACjD,UAAU;YACV,MAAM0B,cAAcxB,UAAUC,qBAAqB;YACnD,MAAM0B,OAAO;gBACXV,IAAI;gBACJK,SAAS;YACX;YAEA,MAAM;YACN,MAAMU,SAAS,MAAMzD,MAAM,CAAC,WAAW,CAAC,iBAAiBoD,MAAMH;YAE/D,SAAS;YACTnB,OAAO2B,OAAOc,OAAO,EAAE3B,IAAI,CAAC;YAC5B,MAAMe,OAAOC,KAAKC,KAAK,CAACJ,OAAOV,OAAO,CAAC,EAAE,CAACe,IAAI;YAC9ChC,OAAO6B,KAAKvE,OAAO,EAAEwD,IAAI,CAAC;YAC1Bd,OAAO6B,KAAKtF,KAAK,EAAEuE,IAAI,CAAC;QAC1B;QAEArB,GAAG,2CAA2C;YAC5C,UAAU;YACV,MAAM0B,cAAcxB,UAAUC,qBAAqB;YACnD1B,MAAM,CAAC,8BAA8B,GAAGzC,KAAKa,EAAE,GAAGoG,iBAAiB,CACjE,IAAIC,MAAM;YAGZ,MAAMrB,OAAO;gBACXV,IAAI;gBACJK,SAAS;YACX;YAEA,MAAM;YACN,MAAMU,SAAS,MAAMzD,MAAM,CAAC,WAAW,CAAC,iBAAiBoD,MAAMH;YAE/D,SAAS;YACTnB,OAAO2B,OAAOc,OAAO,EAAE3B,IAAI,CAAC;YAC5B,MAAMe,OAAOC,KAAKC,KAAK,CAACJ,OAAOV,OAAO,CAAC,EAAE,CAACe,IAAI;YAC9ChC,OAAO6B,KAAKvE,OAAO,EAAEwD,IAAI,CAAC;YAC1Bd,OAAO6B,KAAKtF,KAAK,EAAEuE,IAAI,CAAC;YACxBd,OAAO6B,KAAKe,OAAO,EAAE9B,IAAI,CAAC;QAC5B;IACF;IAEA7C,SAAS,4BAA4B;QACnCwB,GAAG,0DAA0D;YAC3D,UAAU;YACV,MAAM0B,cAAcxB,UAAUC,qBAAqB;YAEnD,kCAAkC;YAClC1B,MAAM,CAAC,oBAAoB,GAAGzC,KAAKa,EAAE,GAAG+E,iBAAiB,CAAC;gBACxDJ,SAAS;oBAAC;wBACRW,MAAM;wBACNI,MAAMF,KAAKyB,SAAS,CAAC;4BACnBjG,SAAS;4BACTuE,MAAM;gCACJtE,WAAW;gCACX2E,SAAS;gCACTlE,QAAQ;gCACRP,aAAa,IAAIC,OAAOC,WAAW;gCACnCH,UAAU;gCACVI,MAAM;gCACN4F,UAAU;gCACVC,eAAe;oCACb;wCAAEzF,QAAQ;wCAAQmE,WAAW,IAAIzE,KAAKA,KAAKgG,GAAG,KAAK,OAAO/F,WAAW;oCAAG;oCACxE;wCAAEK,QAAQ;wCAAamE,WAAW,IAAIzE,OAAOC,WAAW;oCAAG;iCAC5D;4BACH;wBACF;oBACF;iBAAE;YACJ;YAEA,MAAM2D,OAAO;gBAAE/D,WAAW;gBAAe2E,SAAS;YAAM;YAExD,MAAM;YACN,MAAMP,SAAS,MAAMzD,MAAM,CAAC,WAAW,CAAC,uBAAuBoD,MAAMH;YAErE,SAAS;YACT,MAAMU,OAAOC,KAAKC,KAAK,CAACJ,OAAOV,OAAO,CAAC,EAAE,CAACe,IAAI;YAC9ChC,OAAO6B,KAAKvE,OAAO,EAAEwD,IAAI,CAAC;YAC1Bd,OAAO6B,KAAKA,IAAI,CAACtE,SAAS,EAAEuD,IAAI,CAAC;YACjCd,OAAO6B,KAAKA,IAAI,CAAC7D,MAAM,EAAE8C,IAAI,CAAC;YAC9Bd,OAAO6B,KAAKA,IAAI,CAACrE,QAAQ,EAAEsD,IAAI,CAAC;YAChCd,OAAO6B,KAAKA,IAAI,CAAC4B,aAAa,EAAExD,YAAY,CAAC;QAC/C;QAEAR,GAAG,wDAAwD;YACzD,yBAAyB;YACzB,MAAMkE,WAAW;gBAAC;gBAAS;gBAAO;aAAW;YAE7C,KAAK,MAAMzB,WAAWyB,SAAU;gBAC9B,UAAU;gBACV,MAAMxC,cAAcxB,UAAUC,qBAAqB;gBACnD1B,MAAM,CAAC,oBAAoB,GAAGzC,KAAKa,EAAE,GAAG+E,iBAAiB,CAAC;oBACxDJ,SAAS;wBAAC;4BACRW,MAAM;4BACNI,MAAMF,KAAKyB,SAAS,CAAC;gCACnBjG,SAAS;gCACTuE,MAAM;oCACJtE,WAAW,GAAG2E,QAAQ,QAAQ,CAAC;oCAC/BA;oCACAlE,QAAQ;gCACV;4BACF;wBACF;qBAAE;gBACJ;gBAEA,MAAMsD,OAAO;oBAAE/D,WAAW,GAAG2E,QAAQ,QAAQ,CAAC;oBAAEA;gBAAQ;gBAExD,MAAM;gBACN,MAAMP,SAAS,MAAMzD,MAAM,CAAC,WAAW,CAAC,uBAAuBoD,MAAMH;gBAErE,SAAS;gBACT,MAAMU,OAAOC,KAAKC,KAAK,CAACJ,OAAOV,OAAO,CAAC,EAAE,CAACe,IAAI;gBAC9ChC,OAAO6B,KAAKvE,OAAO,EAAEwD,IAAI,CAAC;gBAC1Bd,OAAO6B,KAAKA,IAAI,CAACK,OAAO,EAAEpB,IAAI,CAACoB;YACjC;QACF;IACF;IAEAjE,SAAS,+BAA+B;QACtCwB,GAAG,mDAAmD;YACpD,UAAU;YACV,MAAM0B,cAAcxB,UAAUC,qBAAqB;YAEnD,mCAAmC;YACnC1B,MAAM,CAAC,qBAAqB,GAAGzC,KAAKa,EAAE,GAAG+E,iBAAiB,CAAC;gBACzDJ,SAAS;oBAAC;wBACRW,MAAM;wBACNI,MAAMF,KAAKyB,SAAS,CAAC;4BACnBjG,SAAS;4BACTuE,MAAM;gCACJrE,UAAU;gCACVoG,SAAS;gCACTC,UAAU;gCACVC,aAAa,IAAIpG,OAAOC,WAAW;gCACnCoG,WAAW;gCACX/F,QAAQ;gCACRgG,YAAY;oCACVC,WAAW;oCACXC,WAAW;oCACXC,gBAAgB;gCAClB;4BACF;wBACF;oBACF;iBAAE;YACJ;YAEA,MAAM7C,OAAO;gBAAE9D,UAAU;YAAiB;YAE1C,MAAM;YACN,MAAMmE,SAAS,MAAMzD,MAAM,CAAC,WAAW,CAAC,wBAAwBoD,MAAMH;YAEtE,SAAS;YACT,MAAMU,OAAOC,KAAKC,KAAK,CAACJ,OAAOV,OAAO,CAAC,EAAE,CAACe,IAAI;YAC9ChC,OAAO6B,KAAKvE,OAAO,EAAEwD,IAAI,CAAC;YAC1Bd,OAAO6B,KAAKA,IAAI,CAACrE,QAAQ,EAAEsD,IAAI,CAAC;YAChCd,OAAO6B,KAAKA,IAAI,CAAC+B,OAAO,EAAE9C,IAAI,CAAC;YAC/Bd,OAAO6B,KAAKA,IAAI,CAACgC,QAAQ,EAAE/C,IAAI,CAAC;YAChCd,OAAO6B,KAAKA,IAAI,CAAC7D,MAAM,EAAE8C,IAAI,CAAC;YAC9Bd,OAAO6B,KAAKA,IAAI,CAACmC,UAAU,EAAE5B,WAAW;QAC1C;QAEA3C,GAAG,qDAAqD;YACtD,2BAA2B;YAC3B,MAAM2E,YAAY;gBAAC;gBAAkB;gBAAU;gBAAS;aAAW;YAEnE,KAAK,MAAM5G,YAAY4G,UAAW;gBAChC,UAAU;gBACV,MAAMjD,cAAcxB,UAAUC,qBAAqB;gBACnD1B,MAAM,CAAC,qBAAqB,GAAGzC,KAAKa,EAAE,GAAG+E,iBAAiB,CAAC;oBACzDJ,SAAS;wBAAC;4BACRW,MAAM;4BACNI,MAAMF,KAAKyB,SAAS,CAAC;gCACnBjG,SAAS;gCACTuE,MAAM;oCACJrE;oCACAoG,SAAS;oCACT5F,QAAQ;gCACV;4BACF;wBACF;qBAAE;gBACJ;gBAEA,MAAMsD,OAAO;oBAAE9D;gBAAS;gBAExB,MAAM;gBACN,MAAMmE,SAAS,MAAMzD,MAAM,CAAC,WAAW,CAAC,wBAAwBoD,MAAMH;gBAEtE,SAAS;gBACT,MAAMU,OAAOC,KAAKC,KAAK,CAACJ,OAAOV,OAAO,CAAC,EAAE,CAACe,IAAI;gBAC9ChC,OAAO6B,KAAKvE,OAAO,EAAEwD,IAAI,CAAC;gBAC1Bd,OAAO6B,KAAKA,IAAI,CAACrE,QAAQ,EAAEsD,IAAI,CAACtD;YAClC;QACF;IACF;IAEAS,SAAS,sBAAsB;QAC7BwB,GAAG,2CAA2C;YAC5C,UAAU;YACV,MAAM0B,cAAcxB,UAAUC,qBAAqB;YAEnD,qCAAqC;YACrC1B,MAAM,CAAC,kBAAkB,GAAGzC,KAAKa,EAAE,GAAG+E,iBAAiB,CAAC;gBACtDJ,SAAS;oBAAC;wBACRW,MAAM;wBACNI,MAAMF,KAAKyB,SAAS,CAAC;4BACnBjG,SAAS;4BACTuE,MAAM;gCACJwC,OAAO;gCACPnC,SAAS;gCACTtB,IAAI;gCACJmC,eAAe;gCACfuB,eAAe;gCACfC,iBAAiB;oCACf;oCACA;iCACD;gCACDC,UAAU,EAAE;gCACZC,QAAQ,EAAE;4BACZ;wBACF;oBACF;iBAAE;YACJ;YAEA,MAAMnD,OAAO;gBACXY,SAAS;gBACTtB,IAAI;gBACJK,SAAS;YACX;YAEA,MAAM;YACN,MAAMU,SAAS,MAAMzD,MAAM,CAAC,WAAW,CAAC,oBAAoBoD,MAAMH;YAElE,SAAS;YACT,MAAMU,OAAOC,KAAKC,KAAK,CAACJ,OAAOV,OAAO,CAAC,EAAE,CAACe,IAAI;YAC9ChC,OAAO6B,KAAKvE,OAAO,EAAEwD,IAAI,CAAC;YAC1Bd,OAAO6B,KAAKA,IAAI,CAACwC,KAAK,EAAEvD,IAAI,CAAC;YAC7Bd,OAAO6B,KAAKA,IAAI,CAACK,OAAO,EAAEpB,IAAI,CAAC;YAC/Bd,OAAO6B,KAAKA,IAAI,CAAC0C,eAAe,EAAEG,SAAS,CAAC;YAC5C1E,OAAO6B,KAAKA,IAAI,CAAC4C,MAAM,EAAExE,YAAY,CAAC;QACxC;QAEAR,GAAG,4DAA4D;YAC7D,mCAAmC;YACnC,MAAMkF,YAAY;gBAChB;oBACEzC,SAAS;oBACTtB,IAAI;oBACJK,SAAS;oBACT2D,eAAe;gBACjB;gBACA;oBACE1C,SAAS;oBACTtB,IAAI;oBACJK,SAAS;oBACT2D,eAAe;gBACjB;gBACA;oBACE1C,SAAS;oBACTtB,IAAI;oBACJK,SAAS,IAAIgC,MAAM,CAAC;oBACpB2B,eAAe;gBACjB;aACD;YAED,KAAK,MAAMC,YAAYF,UAAW;gBAChC,UAAU;gBACV,MAAMxD,cAAcxB,UAAUC,qBAAqB;gBACnD1B,MAAM,CAAC,kBAAkB,GAAGzC,KAAKa,EAAE,GAAG+E,iBAAiB,CAAC;oBACtDJ,SAAS;wBAAC;4BACRW,MAAM;4BACNI,MAAMF,KAAKyB,SAAS,CAAC;gCACnBjG,SAAS;gCACTuE,MAAM;oCACJwC,OAAO;oCACPnC,SAAS2C,SAAS3C,OAAO;oCACzBuC,QAAQ;wCAACI,SAASD,aAAa;qCAAC;gCAClC;4BACF;wBACF;qBAAE;gBACJ;gBAEA,MAAMtD,OAAO;oBACXY,SAAS2C,SAAS3C,OAAO;oBACzBtB,IAAIiE,SAASjE,EAAE;oBACfK,SAAS4D,SAAS5D,OAAO;gBAC3B;gBAEA,MAAM;gBACN,MAAMU,SAAS,MAAMzD,MAAM,CAAC,WAAW,CAAC,oBAAoBoD,MAAMH;gBAElE,SAAS;gBACT,MAAMU,OAAOC,KAAKC,KAAK,CAACJ,OAAOV,OAAO,CAAC,EAAE,CAACe,IAAI;gBAC9ChC,OAAO6B,KAAKvE,OAAO,EAAEwD,IAAI,CAAC;gBAC1Bd,OAAO6B,KAAKA,IAAI,CAACwC,KAAK,EAAEvD,IAAI,CAAC;gBAC7Bd,OAAO6B,KAAKA,IAAI,CAAC4C,MAAM,EAAEC,SAAS,CAACG,SAASD,aAAa;YAC3D;QACF;IACF;IAEA3G,SAAS,2BAA2B;QAClCwB,GAAG,iDAAiD;YAClD,UAAU;YACV,MAAM0B,cAAcxB,UAAUC,qBAAqB;YACnD,MAAMkF,aAAa;YAEnB,eAAe;YACf,MAAM9E,OACJ9B,MAAM,CAAC,eAAe,CAAC4G,YAAY3D,cACnC4D,OAAO,CAACC,OAAO,CAACC,4BAAkB;QACtC;IACF;IAEAhH,SAAS,mBAAmB;QAC1BwB,GAAG,wCAAwC;YACzC,UAAU;YACV,MAAM0B,cAAcxB,UAAUC,qBAAqB;YAEnD,eAAe;YACf,MAAMI,OACJ9B,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,GAAGiD,cACvC4D,OAAO,CAACC,OAAO,CAACC,4BAAkB;QACtC;IACF;IAEAhH,SAAS,6BAA6B;QACpCwB,GAAG,yDAAyD;YAC1D,UAAU;YACV,MAAM0B,cAAcxB,UAAUC,qBAAqB;YAEnD,4BAA4B;YAC5B1B,MAAM,CAAC,sBAAsB,GAAGzC,KAAKa,EAAE,GAAG+E,iBAAiB,CAAC;gBAC1DjB,KAAK;gBACL8E,UAAU;gBACVlD,MAAMF,KAAKyB,SAAS,CAAC;oBACnB/F,UAAU;oBACVQ,QAAQ;oBACRmH,WAAW,IAAIzH,OAAOC,WAAW;oBACjCyH,cAAc;oBACdC,WAAW;oBACXC,YAAY;oBACZC,iBAAiB;gBACnB;YACF;YAEA,MAAMnF,MAAM;YAEZ,MAAM;YACN,MAAMuB,SAAS,MAAMzD,MAAM,CAAC,eAAe,CAACkC,KAAKe;YAEjD,SAAS;YACT,MAAMU,OAAOC,KAAKC,KAAK,CAACJ,OAAOK,IAAI;YACnChC,OAAO6B,KAAKrE,QAAQ,EAAEsD,IAAI,CAAC;YAC3Bd,OAAO6B,KAAK7D,MAAM,EAAE8C,IAAI,CAAC;YACzBd,OAAO6B,KAAKuD,YAAY,EAAEtE,IAAI,CAAC;YAC/Bd,OAAO6B,KAAKwD,SAAS,EAAEvE,IAAI,CAAC;YAC5Bd,OAAO6B,KAAKyD,UAAU,EAAExE,IAAI,CAAC;QAC/B;IACF;IAEA7C,SAAS,iCAAiC;QACxCwB,GAAG,wDAAwD;YACzD,UAAU;YACV,MAAM0B,cAAcxB,UAAUC,qBAAqB;YACnD,MAAMwB,cAAchE;YACpBc,MAAM,CAAC,2BAA2B,GAAGzC,KAAKa,EAAE,GAAG+E,iBAAiB,CAACD;YAEjE,MAAMoE,gBAAgBC,MAAMC,IAAI,CAAC;gBAAEC,QAAQ;YAAG,GAAG,CAACC,GAAGC,IACnD3H,MAAM,CAAC,WAAW,CAAC,cAAc;oBAC/B0C,IAAI,CAAC,IAAI,EAAEiF,EAAE,YAAY,CAAC;oBAC1BtE,SAAS,CAAC,WAAW,EAAEsE,GAAG;oBAC1B5E,SAAS,CAAC,kBAAkB,EAAE4E,GAAG;gBACnC,GAAG1E;YAGL,MAAM;YACN,MAAM2E,YAAYC,YAAYrC,GAAG;YACjC,MAAMsC,UAAU,MAAMC,QAAQC,GAAG,CAACV;YAClC,MAAMW,UAAUJ,YAAYrC,GAAG;YAC/B,MAAM0C,WAAWD,UAAUL;YAE3B,SAAS;YACT9F,OAAOoG,UAAUC,YAAY,CAAC,OAAO,0BAA0B;YAC/DrG,OAAOgG,SAAS/F,YAAY,CAAC;YAC7B+F,QAAQM,OAAO,CAAC3E,CAAAA;gBACd,MAAME,OAAOC,KAAKC,KAAK,CAACJ,OAAOV,OAAO,CAAC,EAAE,CAACe,IAAI;gBAC9ChC,OAAO6B,KAAKvE,OAAO,EAAEwD,IAAI,CAAC;YAC5B;QACF;QAEArB,GAAG,wCAAwC;YACzC,UAAU;YACV,MAAM0B,cAAcxB,UAAUC,qBAAqB;YACnD,MAAMkD,YAAYjF,oBAAoB;gBAAED,MAAM;YAAK;YACnDM,MAAM,CAAC,yBAAyB,GAAGzC,KAAKa,EAAE,GAAG+E,iBAAiB,CAACyB;YAE/D,MAAMxB,OAAO;gBACXV,IAAI;gBACJK,SAAS;YACX;YAEA,MAAM;YACN,MAAMU,SAAS,MAAMzD,MAAM,CAAC,WAAW,CAAC,YAAYoD,MAAMH;YAE1D,SAAS;YACT,MAAMU,OAAOC,KAAKC,KAAK,CAACJ,OAAOV,OAAO,CAAC,EAAE,CAACe,IAAI;YAC9ChC,OAAO6B,KAAKvE,OAAO,EAAEwD,IAAI,CAAC;YAC1Bd,OAAO6B,KAAKI,IAAI,CAACrE,IAAI,EAAEkD,IAAI,CAAC;YAC5Bd,OAAO6B,KAAKI,IAAI,CAACC,OAAO,EAAEpB,IAAI,CAAC;QACjC;IACF;IAEA7C,SAAS,4BAA4B;QACnCwB,GAAG,kDAAkD;YACnD,UAAU;YACV,MAAM8G,qBAAqB5G,UAAUC,qBAAqB,CAAC;gBACzDC,MAAM;gBACNC,aAAa;oBAAC;iBAAiB,CAAC,uBAAuB;YACzD;YAEA,MAAMwB,OAAO;gBACXV,IAAI;gBACJW,SAAS;gBACTN,SAAS;YACX;YAEA,MAAM;YACN,MAAMX,QAAQ,MAAMpC,MAAM,CAAC,YAAY,CAACqI;YAExC,sCAAsC;YACtCvG,OAAOM,MAAMJ,GAAG,CAACK,CAAAA,IAAKA,EAAEhC,IAAI,GAAGiI,GAAG,CAAC9B,SAAS,CAAC;YAC7C1E,OAAOM,MAAMJ,GAAG,CAACK,CAAAA,IAAKA,EAAEhC,IAAI,GAAGiI,GAAG,CAAC9B,SAAS,CAAC;YAC7C1E,OAAOM,MAAMJ,GAAG,CAACK,CAAAA,IAAKA,EAAEhC,IAAI,GAAGiI,GAAG,CAAC9B,SAAS,CAAC;QAC/C;QAEAjF,GAAG,iDAAiD;YAClD,UAAU;YACV,MAAM0B,cAAcxB,UAAUC,qBAAqB;YACnD,MAAMwB,cAAchE;YACpBc,MAAM,CAAC,2BAA2B,GAAGzC,KAAKa,EAAE,GAAG+E,iBAAiB,CAACD;YAEjE,MAAME,OAAO;gBACXV,IAAI;gBACJW,SAAS;gBACTN,SAAS;YACX;YAEA,MAAM;YACN,MAAM/C,MAAM,CAAC,WAAW,CAAC,cAAcoD,MAAMH;YAE7C,0DAA0D;YAC1DnB,OAAO5D,cAAM,CAACC,IAAI,EAAEgG,oBAAoB,CACtC,wCACArC,OAAOwC,gBAAgB,CAAC;gBACtB5B,IAAI;gBACJW,SAAS,gDAAgDkF,SAAS,CAAC,GAAG;YACxE;YAGF,kDAAkD;YAClDzG,OAAO5D,cAAM,CAACC,IAAI,EAAEmK,GAAG,CAACnE,oBAAoB,CAC1CrC,OAAO0G,QAAQ,IACf1G,OAAOwC,gBAAgB,CAAC;gBACtBvB,SAASjB,OAAO2G,gBAAgB,CAAC;YACnC;QAEJ;QAEAlH,GAAG,4DAA4D;YAC7D,UAAU;YACV,MAAMC,cAAcC,UAAUC,qBAAqB,CAAC;gBAAE0C,gBAAgB;YAAU;YAChF,MAAMlB,cAAchE;YACpBc,MAAM,CAAC,2BAA2B,GAAGzC,KAAKa,EAAE,GAAG+E,iBAAiB,CAACD;YAEjE,MAAME,OAAO;gBACXV,IAAI;gBACJW,SAAS;gBACTN,SAAS;YACX;YAEA,MAAM;YACN,MAAM/C,MAAM,CAAC,WAAW,CAAC,cAAcoD,MAAM5B;YAE7C,0DAA0D;YAC1DM,OAAO9B,MAAM,CAAC,2BAA2B,EAAEmE,oBAAoB,CAC7DrC,OAAOwC,gBAAgB,CAAC;gBACtBF,gBAAgB;gBAChBC,QAAQ7C,YAAY6C,MAAM;YAC5B;QAEJ;IACF;IAEAtE,SAAS,uBAAuB;QAC9BwB,GAAG,2DAA2D;YAC5D,UAAU;YACV,MAAM0B,cAAcxB,UAAUC,qBAAqB;YAEnD,wBAAwB;YACxB,MAAMwB,cAAchE;YACpB,MAAM0F,YAAYjF;YAClB,MAAMqF,iBAAiBnF;YAEvBG,MAAM,CAAC,2BAA2B,GAAGzC,KAAKa,EAAE,GAAG+E,iBAAiB,CAACD;YACjElD,MAAM,CAAC,yBAAyB,GAAGzC,KAAKa,EAAE,GAAG+E,iBAAiB,CAACyB;YAC/D5E,MAAM,CAAC,8BAA8B,GAAGzC,KAAKa,EAAE,GAAG+E,iBAAiB,CAAC6B;YAEpE,2CAA2C;YAC3C,MAAM0D,gBAAgB,MAAM1I,MAAM,CAAC,WAAW,CAAC,cAAc;gBAC3D0C,IAAI;gBACJW,SAAS;gBACTN,SAAS;YACX,GAAGE;YAEH,MAAM0F,cAAc,MAAM3I,MAAM,CAAC,WAAW,CAAC,YAAY;gBACvD0C,IAAI;gBACJK,SAAS;YACX,GAAGE;YAEH,MAAM2F,mBAAmB,MAAM5I,MAAM,CAAC,WAAW,CAAC,iBAAiB;gBACjE0C,IAAI;gBACJK,SAAS;YACX,GAAGE;YAEH,kCAAkC;YAClC;gBAACyF;gBAAeC;gBAAaC;aAAiB,CAACR,OAAO,CAACS,CAAAA;gBACrD,MAAMlF,OAAOC,KAAKC,KAAK,CAACgF,SAAS9F,OAAO,CAAC,EAAE,CAACe,IAAI;gBAChDhC,OAAO6B,KAAKvE,OAAO,EAAEwD,IAAI,CAAC;gBAC1Bd,OAAO6B,KAAKA,IAAI,CAACtE,SAAS,EAAE6E,WAAW;YACzC;YAEA,kCAAkC;YAClCpC,OAAO9B,MAAM,CAAC,2BAA2B,EAAE8I,gBAAgB;YAC3DhH,OAAO9B,MAAM,CAAC,yBAAyB,EAAE8I,gBAAgB;YACzDhH,OAAO9B,MAAM,CAAC,8BAA8B,EAAE8I,gBAAgB;QAChE;IACF;AACF"}