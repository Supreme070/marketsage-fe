{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/__tests__/hooks/useMCPLeadPulse.test.ts"],"sourcesContent":["import { renderHook, act } from '@testing-library/react';\nimport { useMCPLeadPulse } from '../../hooks/useMCPLeadPulse';\nimport { createMockMCPData, PERFORMANCE_THRESHOLDS } from '../utils/test-utils';\n\n// Mock the data provider\njest.mock('../../lib/leadpulse/mcp-data-provider', () => ({\n  MCPDataProvider: {\n    getInstance: jest.fn(() => ({\n      connect: jest.fn().mockResolvedValue(true),\n      disconnect: jest.fn(),\n      isConnected: jest.fn(() => true),\n      fetchVisitorLocations: jest.fn().mockResolvedValue([]),\n      fetchVisitorJourneys: jest.fn().mockResolvedValue([]),\n      fetchInsights: jest.fn().mockResolvedValue([]),\n      fetchSegments: jest.fn().mockResolvedValue([]),\n      fetchAnalyticsOverview: jest.fn().mockResolvedValue({}),\n    })),\n  },\n}));\n\n// Mock the fallback data provider\njest.mock('../../lib/leadpulse/dataProvider', () => ({\n  generateFallbackData: jest.fn(() => createMockMCPData()),\n}));\n\ndescribe('useMCPLeadPulse Hook', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    jest.clearAllTimers();\n    jest.useFakeTimers();\n  });\n\n  afterEach(() => {\n    jest.runOnlyPendingTimers();\n    jest.useRealTimers();\n  });\n\n  describe('Initialization', () => {\n    it('initializes with default values', () => {\n      const { result } = renderHook(() => useMCPLeadPulse());\n\n      expect(result.current.isLoading).toBe(true);\n      expect(result.current.error).toBe(null);\n      expect(result.current.mcpEnabled).toBe(true);\n      expect(result.current.mcpConnected).toBe(false);\n      expect(result.current.dataSource).toBe('fallback');\n      expect(result.current.visitorLocations).toEqual([]);\n      expect(result.current.visitorJourneys).toEqual([]);\n      expect(result.current.insights).toEqual([]);\n      expect(result.current.segments).toEqual([]);\n    });\n\n    it('accepts custom configuration', () => {\n      const config = {\n        timeRange: '7d' as const,\n        refreshInterval: 30000,\n        enableRealtime: true,\n        autoRefresh: false,\n        maxVisitors: 100,\n      };\n\n      renderHook(() => useMCPLeadPulse(config));\n\n      // Configuration should be applied internally\n      expect(jest.fn()).toHaveBeenCalledTimes(0); // No external calls expected during init\n    });\n  });\n\n  describe('Data Fetching', () => {\n    it('fetches data on mount', async () => {\n      const { result, waitForNextUpdate } = renderHook(() => useMCPLeadPulse());\n\n      // Initial state should be loading\n      expect(result.current.isLoading).toBe(true);\n\n      // Wait for data to load\n      await act(async () => {\n        jest.advanceTimersByTime(1000);\n      });\n\n      // Should no longer be loading\n      expect(result.current.isLoading).toBe(false);\n    });\n\n    it('handles MCP connection success', async () => {\n      const { result } = renderHook(() => useMCPLeadPulse({\n        enableRealtime: false,\n      }));\n\n      await act(async () => {\n        jest.advanceTimersByTime(2000);\n      });\n\n      // Should eventually connect to MCP\n      expect(result.current.mcpEnabled).toBe(true);\n    });\n\n    it('falls back to demo data when MCP fails', async () => {\n      // Mock MCP failure\n      const mockMCPProvider = require('../../lib/leadpulse/mcp-data-provider').MCPDataProvider;\n      mockMCPProvider.getInstance().connect.mockRejectedValue(new Error('Connection failed'));\n\n      const { result } = renderHook(() => useMCPLeadPulse());\n\n      await act(async () => {\n        jest.advanceTimersByTime(5000);\n      });\n\n      expect(result.current.dataSource).toBe('fallback');\n      expect(result.current.isLoading).toBe(false);\n    });\n  });\n\n  describe('Auto Refresh', () => {\n    it('refreshes data at specified intervals', async () => {\n      const { result } = renderHook(() => useMCPLeadPulse({\n        refreshInterval: 60000,\n        autoRefresh: true,\n      }));\n\n      // Initial fetch\n      await act(async () => {\n        jest.advanceTimersByTime(1000);\n      });\n\n      expect(result.current.isLoading).toBe(false);\n\n      // Advance time to trigger refresh\n      await act(async () => {\n        jest.advanceTimersByTime(60000);\n      });\n\n      // Should have triggered a refresh\n      expect(result.current.isLoading).toBe(false); // Should complete quickly in mock\n    });\n\n    it('does not refresh when autoRefresh is disabled', async () => {\n      const { result } = renderHook(() => useMCPLeadPulse({\n        refreshInterval: 60000,\n        autoRefresh: false,\n      }));\n\n      await act(async () => {\n        jest.advanceTimersByTime(1000);\n      });\n\n      const initialData = result.current.visitorLocations;\n\n      // Advance time beyond refresh interval\n      await act(async () => {\n        jest.advanceTimersByTime(120000);\n      });\n\n      // Data should not have changed\n      expect(result.current.visitorLocations).toBe(initialData);\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('handles fetch errors gracefully', async () => {\n      const mockMCPProvider = require('../../lib/leadpulse/mcp-data-provider').MCPDataProvider;\n      mockMCPProvider.getInstance().fetchVisitorLocations.mockRejectedValue(\n        new Error('Fetch failed')\n      );\n\n      const { result } = renderHook(() => useMCPLeadPulse());\n\n      await act(async () => {\n        jest.advanceTimersByTime(2000);\n      });\n\n      expect(result.current.error).toBeTruthy();\n      expect(result.current.isLoading).toBe(false);\n    });\n\n    it('retries failed requests', async () => {\n      const mockMCPProvider = require('../../lib/leadpulse/mcp-data-provider').MCPDataProvider;\n      const fetchMock = mockMCPProvider.getInstance().fetchVisitorLocations;\n      \n      // Fail first two attempts, succeed on third\n      fetchMock\n        .mockRejectedValueOnce(new Error('Fail 1'))\n        .mockRejectedValueOnce(new Error('Fail 2'))\n        .mockResolvedValue([]);\n\n      const { result } = renderHook(() => useMCPLeadPulse());\n\n      await act(async () => {\n        jest.advanceTimersByTime(10000); // Allow time for retries\n      });\n\n      expect(fetchMock).toHaveBeenCalledTimes(3);\n      expect(result.current.error).toBe(null);\n    });\n  });\n\n  describe('Performance', () => {\n    it('manages memory efficiently', async () => {\n      const { result, unmount } = renderHook(() => useMCPLeadPulse({\n        refreshInterval: 1000,\n        autoRefresh: true,\n      }));\n\n      await act(async () => {\n        jest.advanceTimersByTime(5000);\n      });\n\n      // Unmount should clean up timers\n      unmount();\n\n      // No more timer calls should occur\n      const timerCount = jest.getTimerCount();\n      expect(timerCount).toBe(0);\n    });\n\n    it('debounces rapid configuration changes', async () => {\n      const { result, rerender } = renderHook(\n        ({ config }) => useMCPLeadPulse(config),\n        {\n          initialProps: { config: { timeRange: '24h' as const } }\n        }\n      );\n\n      // Rapidly change configuration\n      rerender({ config: { timeRange: '7d' as const } });\n      rerender({ config: { timeRange: '30d' as const } });\n      rerender({ config: { timeRange: '24h' as const } });\n\n      await act(async () => {\n        jest.advanceTimersByTime(1000);\n      });\n\n      // Should handle changes without issues\n      expect(result.current.isLoading).toBe(false);\n    });\n  });\n\n  describe('Data Filtering and Processing', () => {\n    it('respects maxVisitors configuration', async () => {\n      const { result } = renderHook(() => useMCPLeadPulse({\n        maxVisitors: 10,\n      }));\n\n      await act(async () => {\n        jest.advanceTimersByTime(2000);\n      });\n\n      expect(result.current.visitorJourneys.length).toBeLessThanOrEqual(10);\n    });\n\n    it('filters data by time range', async () => {\n      const { result } = renderHook(() => useMCPLeadPulse({\n        timeRange: '24h',\n      }));\n\n      await act(async () => {\n        jest.advanceTimersByTime(2000);\n      });\n\n      // All data should be within the specified time range\n      // Note: This would require actual time-based filtering in the implementation\n      expect(result.current.visitorJourneys).toBeDefined();\n    });\n  });\n\n  describe('Real-time Features', () => {\n    it('enables real-time updates when configured', async () => {\n      const { result } = renderHook(() => useMCPLeadPulse({\n        enableRealtime: true,\n      }));\n\n      await act(async () => {\n        jest.advanceTimersByTime(2000);\n      });\n\n      // Real-time should be enabled\n      expect(result.current.mcpEnabled).toBe(true);\n    });\n\n    it('handles real-time connection failures', async () => {\n      const mockMCPProvider = require('../../lib/leadpulse/mcp-data-provider').MCPDataProvider;\n      mockMCPProvider.getInstance().connect.mockRejectedValue(new Error('WebSocket failed'));\n\n      const { result } = renderHook(() => useMCPLeadPulse({\n        enableRealtime: true,\n      }));\n\n      await act(async () => {\n        jest.advanceTimersByTime(5000);\n      });\n\n      expect(result.current.mcpConnected).toBe(false);\n      expect(result.current.dataSource).toBe('fallback');\n    });\n  });\n\n  describe('Cleanup', () => {\n    it('cleans up resources on unmount', async () => {\n      const { result, unmount } = renderHook(() => useMCPLeadPulse({\n        refreshInterval: 1000,\n        enableRealtime: true,\n      }));\n\n      await act(async () => {\n        jest.advanceTimersByTime(2000);\n      });\n\n      const mockMCPProvider = require('../../lib/leadpulse/mcp-data-provider').MCPDataProvider;\n      const disconnectSpy = mockMCPProvider.getInstance().disconnect;\n\n      unmount();\n\n      expect(disconnectSpy).toHaveBeenCalled();\n      expect(jest.getTimerCount()).toBe(0);\n    });\n  });\n\n  describe('Configuration Validation', () => {\n    it('handles invalid refresh intervals', () => {\n      const { result } = renderHook(() => useMCPLeadPulse({\n        refreshInterval: -1000, // Invalid\n      }));\n\n      // Should use default or minimum value\n      expect(result.current.isLoading).toBe(true);\n    });\n\n    it('handles invalid time ranges', () => {\n      const { result } = renderHook(() => useMCPLeadPulse({\n        timeRange: 'invalid' as any,\n      }));\n\n      // Should handle gracefully\n      expect(result.current.isLoading).toBe(true);\n    });\n  });\n});"],"names":["jest","mock","MCPDataProvider","getInstance","fn","connect","mockResolvedValue","disconnect","isConnected","fetchVisitorLocations","fetchVisitorJourneys","fetchInsights","fetchSegments","fetchAnalyticsOverview","generateFallbackData","createMockMCPData","describe","beforeEach","clearAllMocks","clearAllTimers","useFakeTimers","afterEach","runOnlyPendingTimers","useRealTimers","it","result","renderHook","useMCPLeadPulse","expect","current","isLoading","toBe","error","mcpEnabled","mcpConnected","dataSource","visitorLocations","toEqual","visitorJourneys","insights","segments","config","timeRange","refreshInterval","enableRealtime","autoRefresh","maxVisitors","toHaveBeenCalledTimes","waitForNextUpdate","act","advanceTimersByTime","mockMCPProvider","require","mockRejectedValue","Error","initialData","toBeTruthy","fetchMock","mockRejectedValueOnce","unmount","timerCount","getTimerCount","rerender","initialProps","length","toBeLessThanOrEqual","toBeDefined","disconnectSpy","toHaveBeenCalled"],"mappings":"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"}