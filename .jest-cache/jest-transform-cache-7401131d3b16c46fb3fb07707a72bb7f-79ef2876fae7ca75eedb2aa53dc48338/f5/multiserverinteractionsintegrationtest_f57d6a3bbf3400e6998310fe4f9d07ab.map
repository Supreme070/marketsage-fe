{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/__tests__/integration/mcp/multi-server-interactions.integration.test.ts"],"sourcesContent":["/**\n * Multi-Server MCP Interactions Integration Tests\n * \n * These tests verify how different MCP servers work together, data flow between servers,\n * and cross-server data validation.\n */\n\nimport { describe, beforeAll, afterAll, beforeEach, test, expect } from '@jest/jest';\nimport { CampaignAnalyticsMCPServer } from '../../../mcp/servers/campaign-analytics-server';\nimport { CustomerDataMCPServer } from '../../../mcp/servers/customer-data-server';\nimport { LeadPulseMCPServer } from '../../../mcp/servers/leadpulse-server';\nimport { MonitoringMCPServer } from '../../../mcp/servers/monitoring-server';\nimport { \n  TestDatabaseManager, \n  testPrisma, \n  PerformanceTracker,\n  testConfig\n} from './setup';\nimport { MCPAuthContext } from '../../../mcp/types/mcp-types';\n\ndescribe('Multi-Server MCP Interactions Integration Tests', () => {\n  let campaignServer: CampaignAnalyticsMCPServer;\n  let customerServer: CustomerDataMCPServer;\n  let leadpulseServer: LeadPulseMCPServer;\n  let monitoringServer: MonitoringMCPServer;\n  let dbManager: TestDatabaseManager;\n  let performanceTracker: PerformanceTracker;\n  let authContext: MCPAuthContext;\n\n  beforeAll(async () => {\n    dbManager = TestDatabaseManager.getInstance();\n    await dbManager.setup();\n    \n    performanceTracker = new PerformanceTracker();\n    \n    // Initialize all MCP servers\n    campaignServer = new CampaignAnalyticsMCPServer({ rateLimiting: { enabled: false } });\n    customerServer = new CustomerDataMCPServer({ rateLimiting: { enabled: false } });\n    leadpulseServer = new LeadPulseMCPServer({ rateLimiting: { enabled: false } });\n    monitoringServer = new MonitoringMCPServer({ rateLimiting: { enabled: false } });\n    \n    authContext = {\n      organizationId: 'test-org-1',\n      userId: 'test-user-1',\n      role: 'ADMIN',\n      permissions: [\n        'read:campaigns', 'read:analytics', 'read:customers', \n        'read:predictions', 'read:visitors', 'read:monitoring', 'read:metrics'\n      ]\n    };\n  }, testConfig.timeouts.database);\n\n  afterAll(async () => {\n    await dbManager.teardown();\n  });\n\n  beforeEach(() => {\n    performanceTracker.reset();\n  });\n\n  describe('Cross-Server Data Consistency', () => {\n    test('should ensure customer data consistency across campaign and customer servers', async () => {\n      performanceTracker.start();\n      \n      // Get campaign analytics\n      const campaignResult = await campaignServer.readResource(\n        'campaign://analytics',\n        { organizationId: 'test-org-1' },\n        authContext\n      );\n      \n      // Get customer segments\n      const customerResult = await customerServer.readResource(\n        'customer://segments',\n        { organizationId: 'test-org-1' },\n        authContext\n      );\n      \n      const duration = performanceTracker.measure('crossServerConsistency');\n      \n      expect(campaignResult.success).toBe(true);\n      expect(customerResult.success).toBe(true);\n      \n      const campaignData = campaignResult.data;\n      const customerData = customerResult.data;\n      \n      // Both should reference the same organization\n      expect(campaignData.summary.organizationId || 'test-org-1').toBe('test-org-1');\n      expect(customerData.summary.organizationId || 'test-org-1').toBe('test-org-1');\n      \n      // Cross-validate data points\n      if (campaignData.summary.totalRecipients && customerData.summary.totalCustomers) {\n        // Campaign recipients should not exceed total customers\n        expect(campaignData.summary.totalRecipients).toBeLessThanOrEqual(\n          customerData.summary.totalCustomers * 1.1 // Allow 10% variance for test data\n        );\n      }\n      \n      expect(duration).toBeLessThan(testConfig.performance.maxResponseTime * 2);\n      console.log(`✅ Cross-server data consistency verified in ${duration}ms`);\n    });\n\n    test('should correlate visitor sessions with customer predictions', async () => {\n      performanceTracker.start();\n      \n      // Get visitor analytics\n      const visitorResult = await leadpulseServer.readResource(\n        'leadpulse://analytics',\n        { organizationId: 'test-org-1' },\n        authContext\n      );\n      \n      // Get customer predictions\n      const customerResult = await customerServer.readResource(\n        'customer://behavioral-insights',\n        { organizationId: 'test-org-1' },\n        authContext\n      );\n      \n      const duration = performanceTracker.measure('visitorCustomerCorrelation');\n      \n      expect(visitorResult.success).toBe(true);\n      expect(customerResult.success).toBe(true);\n      \n      const visitorData = visitorResult.data;\n      const customerData = customerResult.data;\n      \n      // Verify mobile usage correlation\n      const visitorMobilePercentage = (visitorData.deviceBreakdown.mobile / \n        (visitorData.deviceBreakdown.mobile + visitorData.deviceBreakdown.desktop + visitorData.deviceBreakdown.tablet)) * 100;\n      \n      const customerMobilePreference = customerData.behaviorPatterns.mobileUsage;\n      \n      // Mobile usage should be correlated (within reasonable variance)\n      const mobileUsageDifference = Math.abs(visitorMobilePercentage - customerMobilePreference);\n      expect(mobileUsageDifference).toBeLessThan(20); // Allow 20% variance\n      \n      expect(duration).toBeLessThan(testConfig.performance.maxResponseTime * 2);\n      console.log(`✅ Visitor-customer correlation verified in ${duration}ms`);\n    });\n\n    test('should validate campaign performance against customer engagement', async () => {\n      performanceTracker.start();\n      \n      // Get campaign performance\n      const campaignResult = await campaignServer.readResource(\n        'campaign://performance',\n        { organizationId: 'test-org-1' },\n        authContext\n      );\n      \n      // Get customer engagement trends\n      const engagementResult = await customerServer.readResource(\n        'customer://engagement-trends',\n        { organizationId: 'test-org-1' },\n        authContext\n      );\n      \n      const duration = performanceTracker.measure('campaignEngagementValidation');\n      \n      expect(campaignResult.success).toBe(true);\n      expect(engagementResult.success).toBe(true);\n      \n      const campaignData = campaignResult.data;\n      const engagementData = engagementResult.data;\n      \n      // High campaign performance should correlate with high customer engagement\n      if (campaignData.overallPerformance && engagementData.overallTrend) {\n        const avgCampaignPerformance = (\n          campaignData.overallPerformance.avgOpenRate +\n          campaignData.overallPerformance.avgClickRate +\n          campaignData.overallPerformance.avgConversionRate\n        ) / 3;\n        \n        const avgEngagementScore = engagementData.overallTrend.currentScore;\n        \n        // Should be positively correlated (within reasonable bounds)\n        if (avgCampaignPerformance > 10) { // If campaigns are performing well\n          expect(avgEngagementScore).toBeGreaterThan(40); // Engagement should be decent\n        }\n      }\n      \n      expect(duration).toBeLessThan(testConfig.performance.maxResponseTime * 2);\n      console.log(`✅ Campaign-engagement validation completed in ${duration}ms`);\n    });\n  });\n\n  describe('Unified Analytics Dashboard Simulation', () => {\n    test('should simulate unified dashboard data retrieval', async () => {\n      performanceTracker.start();\n      \n      // Simulate dashboard loading all key metrics simultaneously\n      const promises = [\n        campaignServer.readResource('campaign://analytics', { organizationId: 'test-org-1' }, authContext),\n        customerServer.readResource('customer://segments', { organizationId: 'test-org-1' }, authContext),\n        leadpulseServer.readResource('leadpulse://analytics', { organizationId: 'test-org-1' }, authContext),\n        monitoringServer.readResource('monitoring://system-health', { organizationId: 'test-org-1' }, authContext)\n      ];\n      \n      const results = await Promise.all(promises);\n      const duration = performanceTracker.measure('unifiedDashboard');\n      \n      // Verify all requests succeeded\n      for (const result of results) {\n        expect(result.success).toBe(true);\n        expect(result.data).toBeDefined();\n      }\n      \n      const [campaignData, customerData, visitorData, monitoringData] = results.map(r => r.data);\n      \n      // Create unified dashboard object\n      const unifiedDashboard = {\n        timestamp: new Date(),\n        organization: 'test-org-1',\n        campaigns: {\n          totalCampaigns: campaignData.summary.totalCampaigns,\n          avgOpenRate: campaignData.summary.avgOpenRate,\n          avgClickRate: campaignData.summary.avgClickRate,\n          totalRevenue: campaignData.summary.totalRevenue\n        },\n        customers: {\n          totalCustomers: customerData.summary.totalCustomers,\n          segments: customerData.segments.length,\n          atRiskCount: customerData.segments.find(s => s.name === 'At Risk')?.count || 0,\n          avgLifetimeValue: customerData.summary.avgLifetimeValue\n        },\n        visitors: {\n          totalSessions: visitorData.summary.totalSessions,\n          bounceRate: visitorData.summary.bounceRate,\n          avgEngagement: visitorData.summary.avgEngagementScore,\n          conversionRate: visitorData.summary.conversionRate\n        },\n        system: {\n          healthScore: monitoringData.overallHealth.score,\n          activeAlerts: monitoringData.alerts.length,\n          responseTime: monitoringData.metrics.responseTime,\n          uptime: monitoringData.metrics.uptime\n        }\n      };\n      \n      // Verify unified dashboard completeness\n      expect(unifiedDashboard.campaigns.totalCampaigns).toBeGreaterThanOrEqual(0);\n      expect(unifiedDashboard.customers.totalCustomers).toBeGreaterThanOrEqual(0);\n      expect(unifiedDashboard.visitors.totalSessions).toBeGreaterThanOrEqual(0);\n      expect(unifiedDashboard.system.healthScore).toBeGreaterThanOrEqual(0);\n      expect(unifiedDashboard.system.healthScore).toBeLessThanOrEqual(100);\n      \n      expect(duration).toBeLessThan(testConfig.performance.maxResponseTime * 4);\n      console.log(`✅ Unified dashboard simulation completed in ${duration}ms`);\n      console.log('📊 Dashboard Summary:', {\n        campaigns: unifiedDashboard.campaigns.totalCampaigns,\n        customers: unifiedDashboard.customers.totalCustomers,\n        sessions: unifiedDashboard.visitors.totalSessions,\n        health: `${unifiedDashboard.system.healthScore}%`\n      });\n    });\n\n    test('should handle cross-server error propagation gracefully', async () => {\n      performanceTracker.start();\n      \n      // Test with invalid organization ID to trigger errors\n      const invalidAuthContext = {\n        ...authContext,\n        organizationId: 'invalid-org-id'\n      };\n      \n      const promises = [\n        campaignServer.readResource('campaign://analytics', { organizationId: 'invalid-org-id' }, invalidAuthContext),\n        customerServer.readResource('customer://segments', { organizationId: 'invalid-org-id' }, invalidAuthContext),\n        leadpulseServer.readResource('leadpulse://analytics', { organizationId: 'invalid-org-id' }, invalidAuthContext),\n        monitoringServer.readResource('monitoring://system-health', { organizationId: 'invalid-org-id' }, invalidAuthContext)\n      ];\n      \n      const results = await Promise.all(promises.map(p => p.catch(e => ({ success: false, error: e.message }))));\n      const duration = performanceTracker.measure('errorPropagation');\n      \n      // All servers should handle invalid org gracefully (return empty data, not errors)\n      for (const result of results) {\n        // Should either succeed with empty data or fail gracefully\n        if (result.success) {\n          expect(result.data).toBeDefined();\n        } else {\n          expect(result.error).toBeDefined();\n        }\n      }\n      \n      expect(duration).toBeLessThan(testConfig.performance.maxResponseTime * 4);\n      console.log(`✅ Error propagation handled gracefully in ${duration}ms`);\n    });\n  });\n\n  describe('Data Flow and Integration Patterns', () => {\n    test('should validate campaign-to-customer journey tracking', async () => {\n      performanceTracker.start();\n      \n      // Get campaign performance by channel\n      const campaignResult = await campaignServer.readResource(\n        'campaign://performance',\n        {\n          organizationId: 'test-org-1',\n          groupBy: 'campaignType'\n        },\n        authContext\n      );\n      \n      // Get customer channel preferences\n      const customerResult = await customerServer.readResource(\n        'customer://behavioral-insights',\n        { organizationId: 'test-org-1' },\n        authContext\n      );\n      \n      const duration = performanceTracker.measure('campaignCustomerJourney');\n      \n      expect(campaignResult.success).toBe(true);\n      expect(customerResult.success).toBe(true);\n      \n      const campaignData = campaignResult.data;\n      const customerData = customerResult.data;\n      \n      // Map campaign performance to customer preferences\n      const channelMapping = {\n        EMAIL: 'emailEffectiveness',\n        SMS: 'smsEngagement', \n        WHATSAPP: 'whatsappPreference'\n      };\n      \n      for (const campaignGroup of campaignData.groups) {\n        const customerPref = channelMapping[campaignGroup.campaignType as keyof typeof channelMapping];\n        if (customerPref && customerData.channelPreferences[customerPref]) {\n          // High performing campaigns should correlate with high customer preference\n          const campaignPerformance = campaignGroup.metrics.avgConversionRate;\n          const customerPreference = customerData.channelPreferences[customerPref];\n          \n          console.log(`Channel ${campaignGroup.campaignType}: Performance ${campaignPerformance}%, Preference ${customerPreference}%`);\n          \n          // Basic correlation check (high performance should mean decent preference)\n          if (campaignPerformance > 5) {\n            expect(customerPreference).toBeGreaterThan(30);\n          }\n        }\n      }\n      \n      expect(duration).toBeLessThan(testConfig.performance.maxResponseTime * 2);\n      console.log(`✅ Campaign-customer journey validation completed in ${duration}ms`);\n    });\n\n    test('should track visitor-to-customer conversion attribution', async () => {\n      performanceTracker.start();\n      \n      // Get visitor conversion funnel\n      const visitorResult = await leadpulseServer.readResource(\n        'leadpulse://conversion-funnel',\n        {\n          organizationId: 'test-org-1',\n          funnelType: 'sales'\n        },\n        authContext\n      );\n      \n      // Get customer acquisition data\n      const customerResult = await customerServer.readResource(\n        'customer://segments',\n        {\n          organizationId: 'test-org-1'\n        },\n        authContext\n      );\n      \n      const duration = performanceTracker.measure('visitorCustomerConversion');\n      \n      expect(visitorResult.success).toBe(true);\n      expect(customerResult.success).toBe(true);\n      \n      const visitorData = visitorResult.data;\n      const customerData = customerResult.data;\n      \n      // Verify conversion logic\n      const finalStageVisitors = visitorData.stages[visitorData.stages.length - 1]?.visitors || 0;\n      const newCustomers = customerData.segments.find(s => s.name === 'New Customers')?.count || 0;\n      \n      // Final stage visitors should correlate with new customers (allowing for test data variance)\n      if (finalStageVisitors > 0 && newCustomers > 0) {\n        const conversionRatio = newCustomers / finalStageVisitors;\n        expect(conversionRatio).toBeGreaterThan(0.1); // At least 10% attribution\n        expect(conversionRatio).toBeLessThan(10); // Reasonable upper bound\n      }\n      \n      expect(duration).toBeLessThan(testConfig.performance.maxResponseTime * 2);\n      console.log(`✅ Visitor-customer conversion attribution validated in ${duration}ms`);\n    });\n\n    test('should correlate monitoring metrics with business performance', async () => {\n      performanceTracker.start();\n      \n      // Get business metrics from monitoring\n      const monitoringResult = await monitoringServer.readResource(\n        'monitoring://business-metrics',\n        { organizationId: 'test-org-1' },\n        authContext\n      );\n      \n      // Get campaign performance metrics\n      const campaignResult = await campaignServer.readResource(\n        'campaign://analytics',\n        { organizationId: 'test-org-1' },\n        authContext\n      );\n      \n      const duration = performanceTracker.measure('monitoringBusinessCorrelation');\n      \n      expect(monitoringResult.success).toBe(true);\n      expect(campaignResult.success).toBe(true);\n      \n      const monitoringData = monitoringResult.data;\n      const campaignData = campaignResult.data;\n      \n      // Cross-validate business metrics\n      expect(monitoringData.kpis.totalCampaigns).toBe(campaignData.summary.totalCampaigns);\n      \n      // Revenue correlation\n      if (monitoringData.revenue.totalRevenue && campaignData.summary.totalRevenue) {\n        const monitoringRevenue = monitoringData.revenue.totalRevenue;\n        const campaignRevenue = campaignData.summary.totalRevenue;\n        \n        // Campaign revenue should be part of total revenue (or close for test data)\n        expect(campaignRevenue).toBeLessThanOrEqual(monitoringRevenue * 1.1);\n      }\n      \n      expect(duration).toBeLessThan(testConfig.performance.maxResponseTime * 2);\n      console.log(`✅ Monitoring-business correlation validated in ${duration}ms`);\n    });\n  });\n\n  describe('Performance Under Load', () => {\n    test('should handle concurrent multi-server operations', async () => {\n      const concurrentOperations = 3;\n      const operationsPerServer = 2;\n      \n      performanceTracker.start();\n      \n      const allPromises = [];\n      \n      for (let i = 0; i < concurrentOperations; i++) {\n        // Campaign server operations\n        allPromises.push(\n          campaignServer.readResource('campaign://analytics', { organizationId: 'test-org-1' }, authContext),\n          campaignServer.readResource('campaign://performance', { organizationId: 'test-org-1' }, authContext)\n        );\n        \n        // Customer server operations  \n        allPromises.push(\n          customerServer.readResource('customer://segments', { organizationId: 'test-org-1' }, authContext),\n          customerServer.readResource('customer://at-risk', { organizationId: 'test-org-1', riskThreshold: 70 }, authContext)\n        );\n        \n        // LeadPulse server operations\n        allPromises.push(\n          leadpulseServer.readResource('leadpulse://analytics', { organizationId: 'test-org-1' }, authContext),\n          leadpulseServer.readResource('leadpulse://live-sessions', { organizationId: 'test-org-1' }, authContext)\n        );\n        \n        // Monitoring server operations\n        allPromises.push(\n          monitoringServer.readResource('monitoring://system-health', { organizationId: 'test-org-1' }, authContext),\n          monitoringServer.readResource('monitoring://business-metrics', { organizationId: 'test-org-1' }, authContext)\n        );\n      }\n      \n      const results = await Promise.all(allPromises);\n      const duration = performanceTracker.measure('concurrentMultiServer');\n      \n      // Verify all operations succeeded\n      for (const result of results) {\n        expect(result.success).toBe(true);\n        expect(result.data).toBeDefined();\n      }\n      \n      const totalOperations = concurrentOperations * 4 * operationsPerServer;\n      expect(duration).toBeLessThan(testConfig.performance.maxResponseTime * 6);\n      console.log(`✅ Handled ${totalOperations} concurrent operations across all servers in ${duration}ms`);\n    });\n\n    test('should measure cross-server data consistency under load', async () => {\n      const iterations = 5;\n      const consistencyChecks = [];\n      \n      for (let i = 0; i < iterations; i++) {\n        performanceTracker.start();\n        \n        // Get data from multiple servers simultaneously\n        const [campaignResult, customerResult, monitoringResult] = await Promise.all([\n          campaignServer.readResource('campaign://analytics', { organizationId: 'test-org-1' }, authContext),\n          customerServer.readResource('customer://segments', { organizationId: 'test-org-1' }, authContext),\n          monitoringServer.readResource('monitoring://business-metrics', { organizationId: 'test-org-1' }, authContext)\n        ]);\n        \n        const duration = performanceTracker.measure(`consistency_check_${i}`);\n        \n        // Verify consistency\n        const campaignCount = campaignResult.data.summary.totalCampaigns;\n        const monitoringCampaignCount = monitoringResult.data.kpis.totalCampaigns;\n        \n        consistencyChecks.push({\n          iteration: i + 1,\n          campaignCount,\n          monitoringCampaignCount,\n          consistent: campaignCount === monitoringCampaignCount,\n          duration\n        });\n        \n        expect(campaignCount).toBe(monitoringCampaignCount);\n      }\n      \n      const allConsistent = consistencyChecks.every(check => check.consistent);\n      expect(allConsistent).toBe(true);\n      \n      console.log(`✅ Consistency maintained across ${iterations} iterations under load`);\n    });\n  });\n\n  afterAll(() => {\n    const stats = performanceTracker.getAllStats();\n    console.log('\\n📊 Multi-Server Integration Performance Summary:');\n    for (const [operation, operationStats] of Object.entries(stats)) {\n      console.log(`  ${operation}: avg ${operationStats.avg}ms, min ${operationStats.min}ms, max ${operationStats.max}ms`);\n    }\n  });\n});\n"],"names":["describe","campaignServer","customerServer","leadpulseServer","monitoringServer","dbManager","performanceTracker","authContext","beforeAll","TestDatabaseManager","getInstance","setup","PerformanceTracker","CampaignAnalyticsMCPServer","rateLimiting","enabled","CustomerDataMCPServer","LeadPulseMCPServer","MonitoringMCPServer","organizationId","userId","role","permissions","testConfig","timeouts","database","afterAll","teardown","beforeEach","reset","test","start","campaignResult","readResource","customerResult","duration","measure","expect","success","toBe","campaignData","data","customerData","summary","totalRecipients","totalCustomers","toBeLessThanOrEqual","toBeLessThan","performance","maxResponseTime","console","log","visitorResult","visitorData","visitorMobilePercentage","deviceBreakdown","mobile","desktop","tablet","customerMobilePreference","behaviorPatterns","mobileUsage","mobileUsageDifference","Math","abs","engagementResult","engagementData","overallPerformance","overallTrend","avgCampaignPerformance","avgOpenRate","avgClickRate","avgConversionRate","avgEngagementScore","currentScore","toBeGreaterThan","promises","results","Promise","all","result","toBeDefined","monitoringData","map","r","unifiedDashboard","timestamp","Date","organization","campaigns","totalCampaigns","totalRevenue","customers","segments","length","atRiskCount","find","s","name","count","avgLifetimeValue","visitors","totalSessions","bounceRate","avgEngagement","conversionRate","system","healthScore","overallHealth","score","activeAlerts","alerts","responseTime","metrics","uptime","toBeGreaterThanOrEqual","sessions","health","invalidAuthContext","p","catch","e","error","message","groupBy","channelMapping","EMAIL","SMS","WHATSAPP","campaignGroup","groups","customerPref","campaignType","channelPreferences","campaignPerformance","customerPreference","funnelType","finalStageVisitors","stages","newCustomers","conversionRatio","monitoringResult","kpis","revenue","monitoringRevenue","campaignRevenue","concurrentOperations","operationsPerServer","allPromises","i","push","riskThreshold","totalOperations","iterations","consistencyChecks","campaignCount","monitoringCampaignCount","iteration","consistent","allConsistent","every","check","stats","getAllStats","operation","operationStats","Object","entries","avg","min","max"],"mappings":"AAAA;;;;;CAKC;;;;sBAEuE;yCAC7B;oCACL;iCACH;kCACC;uBAM7B;AAGPA,IAAAA,cAAQ,EAAC,mDAAmD;IAC1D,IAAIC;IACJ,IAAIC;IACJ,IAAIC;IACJ,IAAIC;IACJ,IAAIC;IACJ,IAAIC;IACJ,IAAIC;IAEJC,IAAAA,eAAS,EAAC;QACRH,YAAYI,0BAAmB,CAACC,WAAW;QAC3C,MAAML,UAAUM,KAAK;QAErBL,qBAAqB,IAAIM,yBAAkB;QAE3C,6BAA6B;QAC7BX,iBAAiB,IAAIY,mDAA0B,CAAC;YAAEC,cAAc;gBAAEC,SAAS;YAAM;QAAE;QACnFb,iBAAiB,IAAIc,yCAAqB,CAAC;YAAEF,cAAc;gBAAEC,SAAS;YAAM;QAAE;QAC9EZ,kBAAkB,IAAIc,mCAAkB,CAAC;YAAEH,cAAc;gBAAEC,SAAS;YAAM;QAAE;QAC5EX,mBAAmB,IAAIc,qCAAmB,CAAC;YAAEJ,cAAc;gBAAEC,SAAS;YAAM;QAAE;QAE9ER,cAAc;YACZY,gBAAgB;YAChBC,QAAQ;YACRC,MAAM;YACNC,aAAa;gBACX;gBAAkB;gBAAkB;gBACpC;gBAAoB;gBAAiB;gBAAmB;aACzD;QACH;IACF,GAAGC,iBAAU,CAACC,QAAQ,CAACC,QAAQ;IAE/BC,IAAAA,cAAQ,EAAC;QACP,MAAMrB,UAAUsB,QAAQ;IAC1B;IAEAC,IAAAA,gBAAU,EAAC;QACTtB,mBAAmBuB,KAAK;IAC1B;IAEA7B,IAAAA,cAAQ,EAAC,iCAAiC;QACxC8B,IAAAA,UAAI,EAAC,gFAAgF;YACnFxB,mBAAmByB,KAAK;YAExB,yBAAyB;YACzB,MAAMC,iBAAiB,MAAM/B,eAAegC,YAAY,CACtD,wBACA;gBAAEd,gBAAgB;YAAa,GAC/BZ;YAGF,wBAAwB;YACxB,MAAM2B,iBAAiB,MAAMhC,eAAe+B,YAAY,CACtD,uBACA;gBAAEd,gBAAgB;YAAa,GAC/BZ;YAGF,MAAM4B,WAAW7B,mBAAmB8B,OAAO,CAAC;YAE5CC,IAAAA,YAAM,EAACL,eAAeM,OAAO,EAAEC,IAAI,CAAC;YACpCF,IAAAA,YAAM,EAACH,eAAeI,OAAO,EAAEC,IAAI,CAAC;YAEpC,MAAMC,eAAeR,eAAeS,IAAI;YACxC,MAAMC,eAAeR,eAAeO,IAAI;YAExC,8CAA8C;YAC9CJ,IAAAA,YAAM,EAACG,aAAaG,OAAO,CAACxB,cAAc,IAAI,cAAcoB,IAAI,CAAC;YACjEF,IAAAA,YAAM,EAACK,aAAaC,OAAO,CAACxB,cAAc,IAAI,cAAcoB,IAAI,CAAC;YAEjE,6BAA6B;YAC7B,IAAIC,aAAaG,OAAO,CAACC,eAAe,IAAIF,aAAaC,OAAO,CAACE,cAAc,EAAE;gBAC/E,wDAAwD;gBACxDR,IAAAA,YAAM,EAACG,aAAaG,OAAO,CAACC,eAAe,EAAEE,mBAAmB,CAC9DJ,aAAaC,OAAO,CAACE,cAAc,GAAG,IAAI,mCAAmC;;YAEjF;YAEAR,IAAAA,YAAM,EAACF,UAAUY,YAAY,CAACxB,iBAAU,CAACyB,WAAW,CAACC,eAAe,GAAG;YACvEC,QAAQC,GAAG,CAAC,CAAC,4CAA4C,EAAEhB,SAAS,EAAE,CAAC;QACzE;QAEAL,IAAAA,UAAI,EAAC,+DAA+D;YAClExB,mBAAmByB,KAAK;YAExB,wBAAwB;YACxB,MAAMqB,gBAAgB,MAAMjD,gBAAgB8B,YAAY,CACtD,yBACA;gBAAEd,gBAAgB;YAAa,GAC/BZ;YAGF,2BAA2B;YAC3B,MAAM2B,iBAAiB,MAAMhC,eAAe+B,YAAY,CACtD,kCACA;gBAAEd,gBAAgB;YAAa,GAC/BZ;YAGF,MAAM4B,WAAW7B,mBAAmB8B,OAAO,CAAC;YAE5CC,IAAAA,YAAM,EAACe,cAAcd,OAAO,EAAEC,IAAI,CAAC;YACnCF,IAAAA,YAAM,EAACH,eAAeI,OAAO,EAAEC,IAAI,CAAC;YAEpC,MAAMc,cAAcD,cAAcX,IAAI;YACtC,MAAMC,eAAeR,eAAeO,IAAI;YAExC,kCAAkC;YAClC,MAAMa,0BAA0B,AAACD,YAAYE,eAAe,CAACC,MAAM,GAChEH,CAAAA,YAAYE,eAAe,CAACC,MAAM,GAAGH,YAAYE,eAAe,CAACE,OAAO,GAAGJ,YAAYE,eAAe,CAACG,MAAM,AAAD,IAAM;YAErH,MAAMC,2BAA2BjB,aAAakB,gBAAgB,CAACC,WAAW;YAE1E,iEAAiE;YACjE,MAAMC,wBAAwBC,KAAKC,GAAG,CAACV,0BAA0BK;YACjEtB,IAAAA,YAAM,EAACyB,uBAAuBf,YAAY,CAAC,KAAK,qBAAqB;YAErEV,IAAAA,YAAM,EAACF,UAAUY,YAAY,CAACxB,iBAAU,CAACyB,WAAW,CAACC,eAAe,GAAG;YACvEC,QAAQC,GAAG,CAAC,CAAC,2CAA2C,EAAEhB,SAAS,EAAE,CAAC;QACxE;QAEAL,IAAAA,UAAI,EAAC,oEAAoE;YACvExB,mBAAmByB,KAAK;YAExB,2BAA2B;YAC3B,MAAMC,iBAAiB,MAAM/B,eAAegC,YAAY,CACtD,0BACA;gBAAEd,gBAAgB;YAAa,GAC/BZ;YAGF,iCAAiC;YACjC,MAAM0D,mBAAmB,MAAM/D,eAAe+B,YAAY,CACxD,gCACA;gBAAEd,gBAAgB;YAAa,GAC/BZ;YAGF,MAAM4B,WAAW7B,mBAAmB8B,OAAO,CAAC;YAE5CC,IAAAA,YAAM,EAACL,eAAeM,OAAO,EAAEC,IAAI,CAAC;YACpCF,IAAAA,YAAM,EAAC4B,iBAAiB3B,OAAO,EAAEC,IAAI,CAAC;YAEtC,MAAMC,eAAeR,eAAeS,IAAI;YACxC,MAAMyB,iBAAiBD,iBAAiBxB,IAAI;YAE5C,2EAA2E;YAC3E,IAAID,aAAa2B,kBAAkB,IAAID,eAAeE,YAAY,EAAE;gBAClE,MAAMC,yBAAyB,AAC7B7B,CAAAA,aAAa2B,kBAAkB,CAACG,WAAW,GAC3C9B,aAAa2B,kBAAkB,CAACI,YAAY,GAC5C/B,aAAa2B,kBAAkB,CAACK,iBAAiB,AAAD,IAC9C;gBAEJ,MAAMC,qBAAqBP,eAAeE,YAAY,CAACM,YAAY;gBAEnE,6DAA6D;gBAC7D,IAAIL,yBAAyB,IAAI;oBAC/BhC,IAAAA,YAAM,EAACoC,oBAAoBE,eAAe,CAAC,KAAK,8BAA8B;gBAChF;YACF;YAEAtC,IAAAA,YAAM,EAACF,UAAUY,YAAY,CAACxB,iBAAU,CAACyB,WAAW,CAACC,eAAe,GAAG;YACvEC,QAAQC,GAAG,CAAC,CAAC,8CAA8C,EAAEhB,SAAS,EAAE,CAAC;QAC3E;IACF;IAEAnC,IAAAA,cAAQ,EAAC,0CAA0C;QACjD8B,IAAAA,UAAI,EAAC,oDAAoD;YACvDxB,mBAAmByB,KAAK;YAExB,4DAA4D;YAC5D,MAAM6C,WAAW;gBACf3E,eAAegC,YAAY,CAAC,wBAAwB;oBAAEd,gBAAgB;gBAAa,GAAGZ;gBACtFL,eAAe+B,YAAY,CAAC,uBAAuB;oBAAEd,gBAAgB;gBAAa,GAAGZ;gBACrFJ,gBAAgB8B,YAAY,CAAC,yBAAyB;oBAAEd,gBAAgB;gBAAa,GAAGZ;gBACxFH,iBAAiB6B,YAAY,CAAC,8BAA8B;oBAAEd,gBAAgB;gBAAa,GAAGZ;aAC/F;YAED,MAAMsE,UAAU,MAAMC,QAAQC,GAAG,CAACH;YAClC,MAAMzC,WAAW7B,mBAAmB8B,OAAO,CAAC;YAE5C,gCAAgC;YAChC,KAAK,MAAM4C,UAAUH,QAAS;gBAC5BxC,IAAAA,YAAM,EAAC2C,OAAO1C,OAAO,EAAEC,IAAI,CAAC;gBAC5BF,IAAAA,YAAM,EAAC2C,OAAOvC,IAAI,EAAEwC,WAAW;YACjC;YAEA,MAAM,CAACzC,cAAcE,cAAcW,aAAa6B,eAAe,GAAGL,QAAQM,GAAG,CAACC,CAAAA,IAAKA,EAAE3C,IAAI;YAEzF,kCAAkC;YAClC,MAAM4C,mBAAmB;gBACvBC,WAAW,IAAIC;gBACfC,cAAc;gBACdC,WAAW;oBACTC,gBAAgBlD,aAAaG,OAAO,CAAC+C,cAAc;oBACnDpB,aAAa9B,aAAaG,OAAO,CAAC2B,WAAW;oBAC7CC,cAAc/B,aAAaG,OAAO,CAAC4B,YAAY;oBAC/CoB,cAAcnD,aAAaG,OAAO,CAACgD,YAAY;gBACjD;gBACAC,WAAW;oBACT/C,gBAAgBH,aAAaC,OAAO,CAACE,cAAc;oBACnDgD,UAAUnD,aAAamD,QAAQ,CAACC,MAAM;oBACtCC,aAAarD,aAAamD,QAAQ,CAACG,IAAI,CAACC,CAAAA,IAAKA,EAAEC,IAAI,KAAK,YAAYC,SAAS;oBAC7EC,kBAAkB1D,aAAaC,OAAO,CAACyD,gBAAgB;gBACzD;gBACAC,UAAU;oBACRC,eAAejD,YAAYV,OAAO,CAAC2D,aAAa;oBAChDC,YAAYlD,YAAYV,OAAO,CAAC4D,UAAU;oBAC1CC,eAAenD,YAAYV,OAAO,CAAC8B,kBAAkB;oBACrDgC,gBAAgBpD,YAAYV,OAAO,CAAC8D,cAAc;gBACpD;gBACAC,QAAQ;oBACNC,aAAazB,eAAe0B,aAAa,CAACC,KAAK;oBAC/CC,cAAc5B,eAAe6B,MAAM,CAACjB,MAAM;oBAC1CkB,cAAc9B,eAAe+B,OAAO,CAACD,YAAY;oBACjDE,QAAQhC,eAAe+B,OAAO,CAACC,MAAM;gBACvC;YACF;YAEA,wCAAwC;YACxC7E,IAAAA,YAAM,EAACgD,iBAAiBI,SAAS,CAACC,cAAc,EAAEyB,sBAAsB,CAAC;YACzE9E,IAAAA,YAAM,EAACgD,iBAAiBO,SAAS,CAAC/C,cAAc,EAAEsE,sBAAsB,CAAC;YACzE9E,IAAAA,YAAM,EAACgD,iBAAiBgB,QAAQ,CAACC,aAAa,EAAEa,sBAAsB,CAAC;YACvE9E,IAAAA,YAAM,EAACgD,iBAAiBqB,MAAM,CAACC,WAAW,EAAEQ,sBAAsB,CAAC;YACnE9E,IAAAA,YAAM,EAACgD,iBAAiBqB,MAAM,CAACC,WAAW,EAAE7D,mBAAmB,CAAC;YAEhET,IAAAA,YAAM,EAACF,UAAUY,YAAY,CAACxB,iBAAU,CAACyB,WAAW,CAACC,eAAe,GAAG;YACvEC,QAAQC,GAAG,CAAC,CAAC,4CAA4C,EAAEhB,SAAS,EAAE,CAAC;YACvEe,QAAQC,GAAG,CAAC,yBAAyB;gBACnCsC,WAAWJ,iBAAiBI,SAAS,CAACC,cAAc;gBACpDE,WAAWP,iBAAiBO,SAAS,CAAC/C,cAAc;gBACpDuE,UAAU/B,iBAAiBgB,QAAQ,CAACC,aAAa;gBACjDe,QAAQ,GAAGhC,iBAAiBqB,MAAM,CAACC,WAAW,CAAC,CAAC,CAAC;YACnD;QACF;QAEA7E,IAAAA,UAAI,EAAC,2DAA2D;YAC9DxB,mBAAmByB,KAAK;YAExB,sDAAsD;YACtD,MAAMuF,qBAAqB;gBACzB,GAAG/G,WAAW;gBACdY,gBAAgB;YAClB;YAEA,MAAMyD,WAAW;gBACf3E,eAAegC,YAAY,CAAC,wBAAwB;oBAAEd,gBAAgB;gBAAiB,GAAGmG;gBAC1FpH,eAAe+B,YAAY,CAAC,uBAAuB;oBAAEd,gBAAgB;gBAAiB,GAAGmG;gBACzFnH,gBAAgB8B,YAAY,CAAC,yBAAyB;oBAAEd,gBAAgB;gBAAiB,GAAGmG;gBAC5FlH,iBAAiB6B,YAAY,CAAC,8BAA8B;oBAAEd,gBAAgB;gBAAiB,GAAGmG;aACnG;YAED,MAAMzC,UAAU,MAAMC,QAAQC,GAAG,CAACH,SAASO,GAAG,CAACoC,CAAAA,IAAKA,EAAEC,KAAK,CAACC,CAAAA,IAAM,CAAA;wBAAEnF,SAAS;wBAAOoF,OAAOD,EAAEE,OAAO;oBAAC,CAAA;YACrG,MAAMxF,WAAW7B,mBAAmB8B,OAAO,CAAC;YAE5C,mFAAmF;YACnF,KAAK,MAAM4C,UAAUH,QAAS;gBAC5B,2DAA2D;gBAC3D,IAAIG,OAAO1C,OAAO,EAAE;oBAClBD,IAAAA,YAAM,EAAC2C,OAAOvC,IAAI,EAAEwC,WAAW;gBACjC,OAAO;oBACL5C,IAAAA,YAAM,EAAC2C,OAAO0C,KAAK,EAAEzC,WAAW;gBAClC;YACF;YAEA5C,IAAAA,YAAM,EAACF,UAAUY,YAAY,CAACxB,iBAAU,CAACyB,WAAW,CAACC,eAAe,GAAG;YACvEC,QAAQC,GAAG,CAAC,CAAC,0CAA0C,EAAEhB,SAAS,EAAE,CAAC;QACvE;IACF;IAEAnC,IAAAA,cAAQ,EAAC,sCAAsC;QAC7C8B,IAAAA,UAAI,EAAC,yDAAyD;YAC5DxB,mBAAmByB,KAAK;YAExB,sCAAsC;YACtC,MAAMC,iBAAiB,MAAM/B,eAAegC,YAAY,CACtD,0BACA;gBACEd,gBAAgB;gBAChByG,SAAS;YACX,GACArH;YAGF,mCAAmC;YACnC,MAAM2B,iBAAiB,MAAMhC,eAAe+B,YAAY,CACtD,kCACA;gBAAEd,gBAAgB;YAAa,GAC/BZ;YAGF,MAAM4B,WAAW7B,mBAAmB8B,OAAO,CAAC;YAE5CC,IAAAA,YAAM,EAACL,eAAeM,OAAO,EAAEC,IAAI,CAAC;YACpCF,IAAAA,YAAM,EAACH,eAAeI,OAAO,EAAEC,IAAI,CAAC;YAEpC,MAAMC,eAAeR,eAAeS,IAAI;YACxC,MAAMC,eAAeR,eAAeO,IAAI;YAExC,mDAAmD;YACnD,MAAMoF,iBAAiB;gBACrBC,OAAO;gBACPC,KAAK;gBACLC,UAAU;YACZ;YAEA,KAAK,MAAMC,iBAAiBzF,aAAa0F,MAAM,CAAE;gBAC/C,MAAMC,eAAeN,cAAc,CAACI,cAAcG,YAAY,CAAgC;gBAC9F,IAAID,gBAAgBzF,aAAa2F,kBAAkB,CAACF,aAAa,EAAE;oBACjE,2EAA2E;oBAC3E,MAAMG,sBAAsBL,cAAchB,OAAO,CAACzC,iBAAiB;oBACnE,MAAM+D,qBAAqB7F,aAAa2F,kBAAkB,CAACF,aAAa;oBAExEjF,QAAQC,GAAG,CAAC,CAAC,QAAQ,EAAE8E,cAAcG,YAAY,CAAC,cAAc,EAAEE,oBAAoB,cAAc,EAAEC,mBAAmB,CAAC,CAAC;oBAE3H,2EAA2E;oBAC3E,IAAID,sBAAsB,GAAG;wBAC3BjG,IAAAA,YAAM,EAACkG,oBAAoB5D,eAAe,CAAC;oBAC7C;gBACF;YACF;YAEAtC,IAAAA,YAAM,EAACF,UAAUY,YAAY,CAACxB,iBAAU,CAACyB,WAAW,CAACC,eAAe,GAAG;YACvEC,QAAQC,GAAG,CAAC,CAAC,oDAAoD,EAAEhB,SAAS,EAAE,CAAC;QACjF;QAEAL,IAAAA,UAAI,EAAC,2DAA2D;YAC9DxB,mBAAmByB,KAAK;YAExB,gCAAgC;YAChC,MAAMqB,gBAAgB,MAAMjD,gBAAgB8B,YAAY,CACtD,iCACA;gBACEd,gBAAgB;gBAChBqH,YAAY;YACd,GACAjI;YAGF,gCAAgC;YAChC,MAAM2B,iBAAiB,MAAMhC,eAAe+B,YAAY,CACtD,uBACA;gBACEd,gBAAgB;YAClB,GACAZ;YAGF,MAAM4B,WAAW7B,mBAAmB8B,OAAO,CAAC;YAE5CC,IAAAA,YAAM,EAACe,cAAcd,OAAO,EAAEC,IAAI,CAAC;YACnCF,IAAAA,YAAM,EAACH,eAAeI,OAAO,EAAEC,IAAI,CAAC;YAEpC,MAAMc,cAAcD,cAAcX,IAAI;YACtC,MAAMC,eAAeR,eAAeO,IAAI;YAExC,0BAA0B;YAC1B,MAAMgG,qBAAqBpF,YAAYqF,MAAM,CAACrF,YAAYqF,MAAM,CAAC5C,MAAM,GAAG,EAAE,EAAEO,YAAY;YAC1F,MAAMsC,eAAejG,aAAamD,QAAQ,CAACG,IAAI,CAACC,CAAAA,IAAKA,EAAEC,IAAI,KAAK,kBAAkBC,SAAS;YAE3F,6FAA6F;YAC7F,IAAIsC,qBAAqB,KAAKE,eAAe,GAAG;gBAC9C,MAAMC,kBAAkBD,eAAeF;gBACvCpG,IAAAA,YAAM,EAACuG,iBAAiBjE,eAAe,CAAC,MAAM,2BAA2B;gBACzEtC,IAAAA,YAAM,EAACuG,iBAAiB7F,YAAY,CAAC,KAAK,yBAAyB;YACrE;YAEAV,IAAAA,YAAM,EAACF,UAAUY,YAAY,CAACxB,iBAAU,CAACyB,WAAW,CAACC,eAAe,GAAG;YACvEC,QAAQC,GAAG,CAAC,CAAC,uDAAuD,EAAEhB,SAAS,EAAE,CAAC;QACpF;QAEAL,IAAAA,UAAI,EAAC,iEAAiE;YACpExB,mBAAmByB,KAAK;YAExB,uCAAuC;YACvC,MAAM8G,mBAAmB,MAAMzI,iBAAiB6B,YAAY,CAC1D,iCACA;gBAAEd,gBAAgB;YAAa,GAC/BZ;YAGF,mCAAmC;YACnC,MAAMyB,iBAAiB,MAAM/B,eAAegC,YAAY,CACtD,wBACA;gBAAEd,gBAAgB;YAAa,GAC/BZ;YAGF,MAAM4B,WAAW7B,mBAAmB8B,OAAO,CAAC;YAE5CC,IAAAA,YAAM,EAACwG,iBAAiBvG,OAAO,EAAEC,IAAI,CAAC;YACtCF,IAAAA,YAAM,EAACL,eAAeM,OAAO,EAAEC,IAAI,CAAC;YAEpC,MAAM2C,iBAAiB2D,iBAAiBpG,IAAI;YAC5C,MAAMD,eAAeR,eAAeS,IAAI;YAExC,kCAAkC;YAClCJ,IAAAA,YAAM,EAAC6C,eAAe4D,IAAI,CAACpD,cAAc,EAAEnD,IAAI,CAACC,aAAaG,OAAO,CAAC+C,cAAc;YAEnF,sBAAsB;YACtB,IAAIR,eAAe6D,OAAO,CAACpD,YAAY,IAAInD,aAAaG,OAAO,CAACgD,YAAY,EAAE;gBAC5E,MAAMqD,oBAAoB9D,eAAe6D,OAAO,CAACpD,YAAY;gBAC7D,MAAMsD,kBAAkBzG,aAAaG,OAAO,CAACgD,YAAY;gBAEzD,4EAA4E;gBAC5EtD,IAAAA,YAAM,EAAC4G,iBAAiBnG,mBAAmB,CAACkG,oBAAoB;YAClE;YAEA3G,IAAAA,YAAM,EAACF,UAAUY,YAAY,CAACxB,iBAAU,CAACyB,WAAW,CAACC,eAAe,GAAG;YACvEC,QAAQC,GAAG,CAAC,CAAC,+CAA+C,EAAEhB,SAAS,EAAE,CAAC;QAC5E;IACF;IAEAnC,IAAAA,cAAQ,EAAC,0BAA0B;QACjC8B,IAAAA,UAAI,EAAC,oDAAoD;YACvD,MAAMoH,uBAAuB;YAC7B,MAAMC,sBAAsB;YAE5B7I,mBAAmByB,KAAK;YAExB,MAAMqH,cAAc,EAAE;YAEtB,IAAK,IAAIC,IAAI,GAAGA,IAAIH,sBAAsBG,IAAK;gBAC7C,6BAA6B;gBAC7BD,YAAYE,IAAI,CACdrJ,eAAegC,YAAY,CAAC,wBAAwB;oBAAEd,gBAAgB;gBAAa,GAAGZ,cACtFN,eAAegC,YAAY,CAAC,0BAA0B;oBAAEd,gBAAgB;gBAAa,GAAGZ;gBAG1F,+BAA+B;gBAC/B6I,YAAYE,IAAI,CACdpJ,eAAe+B,YAAY,CAAC,uBAAuB;oBAAEd,gBAAgB;gBAAa,GAAGZ,cACrFL,eAAe+B,YAAY,CAAC,sBAAsB;oBAAEd,gBAAgB;oBAAcoI,eAAe;gBAAG,GAAGhJ;gBAGzG,8BAA8B;gBAC9B6I,YAAYE,IAAI,CACdnJ,gBAAgB8B,YAAY,CAAC,yBAAyB;oBAAEd,gBAAgB;gBAAa,GAAGZ,cACxFJ,gBAAgB8B,YAAY,CAAC,6BAA6B;oBAAEd,gBAAgB;gBAAa,GAAGZ;gBAG9F,+BAA+B;gBAC/B6I,YAAYE,IAAI,CACdlJ,iBAAiB6B,YAAY,CAAC,8BAA8B;oBAAEd,gBAAgB;gBAAa,GAAGZ,cAC9FH,iBAAiB6B,YAAY,CAAC,iCAAiC;oBAAEd,gBAAgB;gBAAa,GAAGZ;YAErG;YAEA,MAAMsE,UAAU,MAAMC,QAAQC,GAAG,CAACqE;YAClC,MAAMjH,WAAW7B,mBAAmB8B,OAAO,CAAC;YAE5C,kCAAkC;YAClC,KAAK,MAAM4C,UAAUH,QAAS;gBAC5BxC,IAAAA,YAAM,EAAC2C,OAAO1C,OAAO,EAAEC,IAAI,CAAC;gBAC5BF,IAAAA,YAAM,EAAC2C,OAAOvC,IAAI,EAAEwC,WAAW;YACjC;YAEA,MAAMuE,kBAAkBN,uBAAuB,IAAIC;YACnD9G,IAAAA,YAAM,EAACF,UAAUY,YAAY,CAACxB,iBAAU,CAACyB,WAAW,CAACC,eAAe,GAAG;YACvEC,QAAQC,GAAG,CAAC,CAAC,UAAU,EAAEqG,gBAAgB,6CAA6C,EAAErH,SAAS,EAAE,CAAC;QACtG;QAEAL,IAAAA,UAAI,EAAC,2DAA2D;YAC9D,MAAM2H,aAAa;YACnB,MAAMC,oBAAoB,EAAE;YAE5B,IAAK,IAAIL,IAAI,GAAGA,IAAII,YAAYJ,IAAK;gBACnC/I,mBAAmByB,KAAK;gBAExB,gDAAgD;gBAChD,MAAM,CAACC,gBAAgBE,gBAAgB2G,iBAAiB,GAAG,MAAM/D,QAAQC,GAAG,CAAC;oBAC3E9E,eAAegC,YAAY,CAAC,wBAAwB;wBAAEd,gBAAgB;oBAAa,GAAGZ;oBACtFL,eAAe+B,YAAY,CAAC,uBAAuB;wBAAEd,gBAAgB;oBAAa,GAAGZ;oBACrFH,iBAAiB6B,YAAY,CAAC,iCAAiC;wBAAEd,gBAAgB;oBAAa,GAAGZ;iBAClG;gBAED,MAAM4B,WAAW7B,mBAAmB8B,OAAO,CAAC,CAAC,kBAAkB,EAAEiH,GAAG;gBAEpE,qBAAqB;gBACrB,MAAMM,gBAAgB3H,eAAeS,IAAI,CAACE,OAAO,CAAC+C,cAAc;gBAChE,MAAMkE,0BAA0Bf,iBAAiBpG,IAAI,CAACqG,IAAI,CAACpD,cAAc;gBAEzEgE,kBAAkBJ,IAAI,CAAC;oBACrBO,WAAWR,IAAI;oBACfM;oBACAC;oBACAE,YAAYH,kBAAkBC;oBAC9BzH;gBACF;gBAEAE,IAAAA,YAAM,EAACsH,eAAepH,IAAI,CAACqH;YAC7B;YAEA,MAAMG,gBAAgBL,kBAAkBM,KAAK,CAACC,CAAAA,QAASA,MAAMH,UAAU;YACvEzH,IAAAA,YAAM,EAAC0H,eAAexH,IAAI,CAAC;YAE3BW,QAAQC,GAAG,CAAC,CAAC,gCAAgC,EAAEsG,WAAW,sBAAsB,CAAC;QACnF;IACF;IAEA/H,IAAAA,cAAQ,EAAC;QACP,MAAMwI,QAAQ5J,mBAAmB6J,WAAW;QAC5CjH,QAAQC,GAAG,CAAC;QACZ,KAAK,MAAM,CAACiH,WAAWC,eAAe,IAAIC,OAAOC,OAAO,CAACL,OAAQ;YAC/DhH,QAAQC,GAAG,CAAC,CAAC,EAAE,EAAEiH,UAAU,MAAM,EAAEC,eAAeG,GAAG,CAAC,QAAQ,EAAEH,eAAeI,GAAG,CAAC,QAAQ,EAAEJ,eAAeK,GAAG,CAAC,EAAE,CAAC;QACrH;IACF;AACF"}