05fe41a02398684ac949a676fb982c85
/**
 * Database Transaction Manager
 * ===========================
 * Ensures data consistency and handles rollbacks for multi-step operations
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    TransactionManager: function() {
        return TransactionManager;
    },
    withTransaction: function() {
        return withTransaction;
    }
});
const _logger = require("../logger");
const _prisma = /*#__PURE__*/ _interop_require_default(require("../db/prisma"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
class TransactionManager {
    static{
        this.activeTransactions = new Map();
    }
    static{
        this.transactionSteps = new Map();
    }
    static{
        this.rollbackHandlers = new Map();
    }
    /**
   * Start a new transaction
   */ static async startTransaction(userId, operationId, description, timeoutMs = 30000) {
        const transactionId = `tx_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        const context = {
            id: transactionId,
            userId,
            operationId,
            startTime: Date.now(),
            timeout: timeoutMs,
            description
        };
        this.activeTransactions.set(transactionId, context);
        this.transactionSteps.set(transactionId, []);
        this.rollbackHandlers.set(transactionId, []);
        _logger.logger.info('Transaction started', {
            transactionId,
            userId,
            operationId,
            description,
            timeout: timeoutMs
        });
        // Set timeout for automatic rollback
        setTimeout(()=>{
            this.handleTimeout(transactionId);
        }, timeoutMs);
        return transactionId;
    }
    /**
   * Execute a step within a transaction
   */ static async executeStep(transactionId, stepId, operation, entity, executeFn, rollbackFn) {
        const context = this.activeTransactions.get(transactionId);
        if (!context) {
            throw new Error(`Transaction ${transactionId} not found`);
        }
        const step = {
            id: stepId,
            operation,
            entity,
            data: {},
            executed: false
        };
        try {
            _logger.logger.info('Transaction step starting', {
                transactionId,
                stepId,
                operation,
                entity
            });
            // Execute the operation within a Prisma transaction
            const result = await _prisma.default.$transaction(async (tx)=>{
                const stepResult = await executeFn(tx);
                // Store rollback data if needed
                step.rollbackData = stepResult;
                step.executed = true;
                step.executedAt = Date.now();
                return stepResult;
            });
            // Add step to transaction
            const steps = this.transactionSteps.get(transactionId) || [];
            steps.push(step);
            this.transactionSteps.set(transactionId, steps);
            // Add rollback handler if provided
            if (rollbackFn) {
                const handlers = this.rollbackHandlers.get(transactionId) || [];
                handlers.push(rollbackFn);
                this.rollbackHandlers.set(transactionId, handlers);
            }
            _logger.logger.info('Transaction step completed', {
                transactionId,
                stepId,
                operation,
                entity,
                executionTime: Date.now() - (step.executedAt || 0)
            });
            return result;
        } catch (error) {
            step.error = error instanceof Error ? error.message : String(error);
            step.executed = false;
            // Add failed step to transaction
            const steps = this.transactionSteps.get(transactionId) || [];
            steps.push(step);
            this.transactionSteps.set(transactionId, steps);
            _logger.logger.error('Transaction step failed', {
                transactionId,
                stepId,
                operation,
                entity,
                error: step.error
            });
            throw error;
        }
    }
    /**
   * Commit a transaction
   */ static async commitTransaction(transactionId) {
        const context = this.activeTransactions.get(transactionId);
        const steps = this.transactionSteps.get(transactionId) || [];
        if (!context) {
            throw new Error(`Transaction ${transactionId} not found`);
        }
        try {
            _logger.logger.info('Transaction committing', {
                transactionId,
                stepsCompleted: steps.filter((s)=>s.executed).length,
                totalSteps: steps.length
            });
            // Clean up transaction data
            this.activeTransactions.delete(transactionId);
            this.transactionSteps.delete(transactionId);
            this.rollbackHandlers.delete(transactionId);
            const result = {
                success: true,
                transactionId,
                stepsCompleted: steps.filter((s)=>s.executed).length,
                totalSteps: steps.length,
                results: steps.map((s)=>s.rollbackData)
            };
            _logger.logger.info('Transaction committed successfully', {
                transactionId,
                stepsCompleted: result.stepsCompleted,
                totalSteps: result.totalSteps,
                executionTime: Date.now() - context.startTime
            });
            return result;
        } catch (error) {
            _logger.logger.error('Transaction commit failed', {
                transactionId,
                error: error instanceof Error ? error.message : String(error)
            });
            // Attempt rollback on commit failure
            await this.rollbackTransaction(transactionId);
            throw error;
        }
    }
    /**
   * Rollback a transaction
   */ static async rollbackTransaction(transactionId) {
        const context = this.activeTransactions.get(transactionId);
        const steps = this.transactionSteps.get(transactionId) || [];
        const rollbackHandlers = this.rollbackHandlers.get(transactionId) || [];
        if (!context) {
            throw new Error(`Transaction ${transactionId} not found`);
        }
        _logger.logger.warn('Transaction rollback started', {
            transactionId,
            stepsToRollback: steps.filter((s)=>s.executed).length,
            totalSteps: steps.length
        });
        const rollbackErrors = [];
        try {
            // Execute rollback handlers in reverse order
            for(let i = rollbackHandlers.length - 1; i >= 0; i--){
                try {
                    await rollbackHandlers[i]();
                } catch (error) {
                    const errorMessage = error instanceof Error ? error.message : String(error);
                    rollbackErrors.push(errorMessage);
                    _logger.logger.error('Rollback handler failed', {
                        transactionId,
                        handlerIndex: i,
                        error: errorMessage
                    });
                }
            }
            // Rollback executed steps in reverse order
            const executedSteps = steps.filter((s)=>s.executed).reverse();
            for (const step of executedSteps){
                try {
                    await this.rollbackStep(transactionId, step);
                } catch (error) {
                    const errorMessage = error instanceof Error ? error.message : String(error);
                    rollbackErrors.push(errorMessage);
                    _logger.logger.error('Step rollback failed', {
                        transactionId,
                        stepId: step.id,
                        error: errorMessage
                    });
                }
            }
            // Clean up transaction data
            this.activeTransactions.delete(transactionId);
            this.transactionSteps.delete(transactionId);
            this.rollbackHandlers.delete(transactionId);
            const result = {
                success: rollbackErrors.length === 0,
                transactionId,
                stepsCompleted: steps.filter((s)=>s.executed).length,
                totalSteps: steps.length,
                rollbackPerformed: true,
                error: rollbackErrors.length > 0 ? rollbackErrors.join('; ') : undefined
            };
            _logger.logger.info('Transaction rollback completed', {
                transactionId,
                success: result.success,
                rollbackErrors: rollbackErrors.length,
                executionTime: Date.now() - context.startTime
            });
            return result;
        } catch (error) {
            _logger.logger.error('Transaction rollback failed', {
                transactionId,
                error: error instanceof Error ? error.message : String(error)
            });
            throw error;
        }
    }
    /**
   * Rollback a specific step
   */ static async rollbackStep(transactionId, step) {
        _logger.logger.info('Rolling back step', {
            transactionId,
            stepId: step.id,
            operation: step.operation,
            entity: step.entity
        });
        try {
            // Implement rollback logic based on operation type
            switch(step.operation){
                case 'CREATE':
                    await this.rollbackCreate(step);
                    break;
                case 'UPDATE':
                    await this.rollbackUpdate(step);
                    break;
                case 'DELETE':
                    await this.rollbackDelete(step);
                    break;
                default:
                    _logger.logger.warn('No rollback handler for operation', {
                        transactionId,
                        stepId: step.id,
                        operation: step.operation
                    });
            }
        } catch (error) {
            _logger.logger.error('Step rollback failed', {
                transactionId,
                stepId: step.id,
                error: error instanceof Error ? error.message : String(error)
            });
            throw error;
        }
    }
    /**
   * Rollback create operation
   */ static async rollbackCreate(step) {
        const { entity, rollbackData } = step;
        if (!rollbackData || !rollbackData.id) {
            _logger.logger.warn('No rollback data available for create operation', {
                stepId: step.id,
                entity
            });
            return;
        }
        try {
            switch(entity){
                case 'USER':
                    await _prisma.default.user.delete({
                        where: {
                            id: rollbackData.id
                        }
                    });
                    break;
                case 'CONTACT':
                    await _prisma.default.contact.delete({
                        where: {
                            id: rollbackData.id
                        }
                    });
                    break;
                case 'ORGANIZATION':
                    await _prisma.default.organization.delete({
                        where: {
                            id: rollbackData.id
                        }
                    });
                    break;
                case 'CAMPAIGN':
                    await _prisma.default.emailCampaign.delete({
                        where: {
                            id: rollbackData.id
                        }
                    });
                    break;
                case 'TASK':
                    await _prisma.default.task.delete({
                        where: {
                            id: rollbackData.id
                        }
                    });
                    break;
                default:
                    _logger.logger.warn('No rollback handler for entity', {
                        entity
                    });
            }
        } catch (error) {
            _logger.logger.error('Rollback create failed', {
                stepId: step.id,
                entity,
                id: rollbackData.id,
                error: error instanceof Error ? error.message : String(error)
            });
            throw error;
        }
    }
    /**
   * Rollback update operation
   */ static async rollbackUpdate(step) {
        const { entity, rollbackData } = step;
        if (!rollbackData || !rollbackData.id || !rollbackData.previousData) {
            _logger.logger.warn('No rollback data available for update operation', {
                stepId: step.id,
                entity
            });
            return;
        }
        try {
            const { id, previousData } = rollbackData;
            switch(entity){
                case 'USER':
                    await _prisma.default.user.update({
                        where: {
                            id
                        },
                        data: previousData
                    });
                    break;
                case 'CONTACT':
                    await _prisma.default.contact.update({
                        where: {
                            id
                        },
                        data: previousData
                    });
                    break;
                case 'ORGANIZATION':
                    await _prisma.default.organization.update({
                        where: {
                            id
                        },
                        data: previousData
                    });
                    break;
                case 'CAMPAIGN':
                    await _prisma.default.emailCampaign.update({
                        where: {
                            id
                        },
                        data: previousData
                    });
                    break;
                case 'TASK':
                    await _prisma.default.task.update({
                        where: {
                            id
                        },
                        data: previousData
                    });
                    break;
                default:
                    _logger.logger.warn('No rollback handler for entity', {
                        entity
                    });
            }
        } catch (error) {
            _logger.logger.error('Rollback update failed', {
                stepId: step.id,
                entity,
                error: error instanceof Error ? error.message : String(error)
            });
            throw error;
        }
    }
    /**
   * Rollback delete operation
   */ static async rollbackDelete(step) {
        const { entity, rollbackData } = step;
        if (!rollbackData || !rollbackData.deletedData) {
            _logger.logger.warn('No rollback data available for delete operation', {
                stepId: step.id,
                entity
            });
            return;
        }
        try {
            const { deletedData } = rollbackData;
            switch(entity){
                case 'USER':
                    await _prisma.default.user.create({
                        data: deletedData
                    });
                    break;
                case 'CONTACT':
                    await _prisma.default.contact.create({
                        data: deletedData
                    });
                    break;
                case 'ORGANIZATION':
                    await _prisma.default.organization.create({
                        data: deletedData
                    });
                    break;
                case 'CAMPAIGN':
                    await _prisma.default.emailCampaign.create({
                        data: deletedData
                    });
                    break;
                case 'TASK':
                    await _prisma.default.task.create({
                        data: deletedData
                    });
                    break;
                default:
                    _logger.logger.warn('No rollback handler for entity', {
                        entity
                    });
            }
        } catch (error) {
            _logger.logger.error('Rollback delete failed', {
                stepId: step.id,
                entity,
                error: error instanceof Error ? error.message : String(error)
            });
            throw error;
        }
    }
    /**
   * Handle transaction timeout
   */ static async handleTimeout(transactionId) {
        const context = this.activeTransactions.get(transactionId);
        if (!context) {
            return; // Transaction already completed
        }
        _logger.logger.warn('Transaction timeout', {
            transactionId,
            timeout: context.timeout,
            executionTime: Date.now() - context.startTime
        });
        try {
            await this.rollbackTransaction(transactionId);
        } catch (error) {
            _logger.logger.error('Transaction timeout rollback failed', {
                transactionId,
                error: error instanceof Error ? error.message : String(error)
            });
        }
    }
    /**
   * Get transaction status
   */ static getTransactionStatus(transactionId) {
        const context = this.activeTransactions.get(transactionId);
        const steps = this.transactionSteps.get(transactionId) || [];
        return {
            exists: !!context,
            context,
            steps,
            stepsCompleted: steps.filter((s)=>s.executed).length,
            totalSteps: steps.length
        };
    }
    /**
   * Clean up expired transactions
   */ static cleanup() {
        const now = Date.now();
        const expired = [];
        for (const [transactionId, context] of this.activeTransactions){
            if (now - context.startTime > context.timeout) {
                expired.push(transactionId);
            }
        }
        for (const transactionId of expired){
            this.handleTimeout(transactionId);
        }
        _logger.logger.info('Transaction cleanup completed', {
            expiredTransactions: expired.length
        });
    }
}
async function withTransaction(userId, operationId, description, operationFn) {
    const transactionId = await TransactionManager.startTransaction(userId, operationId, description);
    try {
        const result = await operationFn(transactionId);
        await TransactionManager.commitTransaction(transactionId);
        return result;
    } catch (error) {
        await TransactionManager.rollbackTransaction(transactionId);
        throw error;
    }
}
// Schedule cleanup every 5 minutes
setInterval(()=>{
    TransactionManager.cleanup();
}, 5 * 60 * 1000);

//# sourceMappingURL=data:application/json;base64,