{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/lib/security/transaction-manager.ts"],"sourcesContent":["/**\n * Database Transaction Manager\n * ===========================\n * Ensures data consistency and handles rollbacks for multi-step operations\n */\n\nimport { PrismaClient } from '@prisma/client';\nimport { logger } from '@/lib/logger';\nimport prisma from '@/lib/db/prisma';\n\nexport interface TransactionContext {\n  id: string;\n  userId: string;\n  operationId: string;\n  startTime: number;\n  timeout: number;\n  description?: string;\n}\n\nexport interface TransactionStep {\n  id: string;\n  operation: string;\n  entity: string;\n  data: any;\n  rollbackData?: any;\n  executed: boolean;\n  executedAt?: number;\n  error?: string;\n}\n\nexport interface TransactionResult {\n  success: boolean;\n  transactionId: string;\n  stepsCompleted: number;\n  totalSteps: number;\n  error?: string;\n  rollbackPerformed?: boolean;\n  results?: any[];\n}\n\nexport class TransactionManager {\n  private static activeTransactions = new Map<string, TransactionContext>();\n  private static transactionSteps = new Map<string, TransactionStep[]>();\n  private static rollbackHandlers = new Map<string, (() => Promise<void>)[]>();\n\n  /**\n   * Start a new transaction\n   */\n  static async startTransaction(\n    userId: string,\n    operationId: string,\n    description?: string,\n    timeoutMs = 30000\n  ): Promise<string> {\n    const transactionId = `tx_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    const context: TransactionContext = {\n      id: transactionId,\n      userId,\n      operationId,\n      startTime: Date.now(),\n      timeout: timeoutMs,\n      description\n    };\n\n    this.activeTransactions.set(transactionId, context);\n    this.transactionSteps.set(transactionId, []);\n    this.rollbackHandlers.set(transactionId, []);\n\n    logger.info('Transaction started', {\n      transactionId,\n      userId,\n      operationId,\n      description,\n      timeout: timeoutMs\n    });\n\n    // Set timeout for automatic rollback\n    setTimeout(() => {\n      this.handleTimeout(transactionId);\n    }, timeoutMs);\n\n    return transactionId;\n  }\n\n  /**\n   * Execute a step within a transaction\n   */\n  static async executeStep<T>(\n    transactionId: string,\n    stepId: string,\n    operation: string,\n    entity: string,\n    executeFn: (tx: any) => Promise<T>,\n    rollbackFn?: () => Promise<void>\n  ): Promise<T> {\n    const context = this.activeTransactions.get(transactionId);\n    if (!context) {\n      throw new Error(`Transaction ${transactionId} not found`);\n    }\n\n    const step: TransactionStep = {\n      id: stepId,\n      operation,\n      entity,\n      data: {},\n      executed: false\n    };\n\n    try {\n      logger.info('Transaction step starting', {\n        transactionId,\n        stepId,\n        operation,\n        entity\n      });\n\n      // Execute the operation within a Prisma transaction\n      const result = await prisma.$transaction(async (tx) => {\n        const stepResult = await executeFn(tx);\n        \n        // Store rollback data if needed\n        step.rollbackData = stepResult;\n        step.executed = true;\n        step.executedAt = Date.now();\n        \n        return stepResult;\n      });\n\n      // Add step to transaction\n      const steps = this.transactionSteps.get(transactionId) || [];\n      steps.push(step);\n      this.transactionSteps.set(transactionId, steps);\n\n      // Add rollback handler if provided\n      if (rollbackFn) {\n        const handlers = this.rollbackHandlers.get(transactionId) || [];\n        handlers.push(rollbackFn);\n        this.rollbackHandlers.set(transactionId, handlers);\n      }\n\n      logger.info('Transaction step completed', {\n        transactionId,\n        stepId,\n        operation,\n        entity,\n        executionTime: Date.now() - (step.executedAt || 0)\n      });\n\n      return result;\n\n    } catch (error) {\n      step.error = error instanceof Error ? error.message : String(error);\n      step.executed = false;\n\n      // Add failed step to transaction\n      const steps = this.transactionSteps.get(transactionId) || [];\n      steps.push(step);\n      this.transactionSteps.set(transactionId, steps);\n\n      logger.error('Transaction step failed', {\n        transactionId,\n        stepId,\n        operation,\n        entity,\n        error: step.error\n      });\n\n      throw error;\n    }\n  }\n\n  /**\n   * Commit a transaction\n   */\n  static async commitTransaction(transactionId: string): Promise<TransactionResult> {\n    const context = this.activeTransactions.get(transactionId);\n    const steps = this.transactionSteps.get(transactionId) || [];\n\n    if (!context) {\n      throw new Error(`Transaction ${transactionId} not found`);\n    }\n\n    try {\n      logger.info('Transaction committing', {\n        transactionId,\n        stepsCompleted: steps.filter(s => s.executed).length,\n        totalSteps: steps.length\n      });\n\n      // Clean up transaction data\n      this.activeTransactions.delete(transactionId);\n      this.transactionSteps.delete(transactionId);\n      this.rollbackHandlers.delete(transactionId);\n\n      const result: TransactionResult = {\n        success: true,\n        transactionId,\n        stepsCompleted: steps.filter(s => s.executed).length,\n        totalSteps: steps.length,\n        results: steps.map(s => s.rollbackData)\n      };\n\n      logger.info('Transaction committed successfully', {\n        transactionId,\n        stepsCompleted: result.stepsCompleted,\n        totalSteps: result.totalSteps,\n        executionTime: Date.now() - context.startTime\n      });\n\n      return result;\n\n    } catch (error) {\n      logger.error('Transaction commit failed', {\n        transactionId,\n        error: error instanceof Error ? error.message : String(error)\n      });\n\n      // Attempt rollback on commit failure\n      await this.rollbackTransaction(transactionId);\n\n      throw error;\n    }\n  }\n\n  /**\n   * Rollback a transaction\n   */\n  static async rollbackTransaction(transactionId: string): Promise<TransactionResult> {\n    const context = this.activeTransactions.get(transactionId);\n    const steps = this.transactionSteps.get(transactionId) || [];\n    const rollbackHandlers = this.rollbackHandlers.get(transactionId) || [];\n\n    if (!context) {\n      throw new Error(`Transaction ${transactionId} not found`);\n    }\n\n    logger.warn('Transaction rollback started', {\n      transactionId,\n      stepsToRollback: steps.filter(s => s.executed).length,\n      totalSteps: steps.length\n    });\n\n    const rollbackErrors: string[] = [];\n\n    try {\n      // Execute rollback handlers in reverse order\n      for (let i = rollbackHandlers.length - 1; i >= 0; i--) {\n        try {\n          await rollbackHandlers[i]();\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : String(error);\n          rollbackErrors.push(errorMessage);\n          logger.error('Rollback handler failed', {\n            transactionId,\n            handlerIndex: i,\n            error: errorMessage\n          });\n        }\n      }\n\n      // Rollback executed steps in reverse order\n      const executedSteps = steps.filter(s => s.executed).reverse();\n      for (const step of executedSteps) {\n        try {\n          await this.rollbackStep(transactionId, step);\n        } catch (error) {\n          const errorMessage = error instanceof Error ? error.message : String(error);\n          rollbackErrors.push(errorMessage);\n          logger.error('Step rollback failed', {\n            transactionId,\n            stepId: step.id,\n            error: errorMessage\n          });\n        }\n      }\n\n      // Clean up transaction data\n      this.activeTransactions.delete(transactionId);\n      this.transactionSteps.delete(transactionId);\n      this.rollbackHandlers.delete(transactionId);\n\n      const result: TransactionResult = {\n        success: rollbackErrors.length === 0,\n        transactionId,\n        stepsCompleted: steps.filter(s => s.executed).length,\n        totalSteps: steps.length,\n        rollbackPerformed: true,\n        error: rollbackErrors.length > 0 ? rollbackErrors.join('; ') : undefined\n      };\n\n      logger.info('Transaction rollback completed', {\n        transactionId,\n        success: result.success,\n        rollbackErrors: rollbackErrors.length,\n        executionTime: Date.now() - context.startTime\n      });\n\n      return result;\n\n    } catch (error) {\n      logger.error('Transaction rollback failed', {\n        transactionId,\n        error: error instanceof Error ? error.message : String(error)\n      });\n\n      throw error;\n    }\n  }\n\n  /**\n   * Rollback a specific step\n   */\n  private static async rollbackStep(transactionId: string, step: TransactionStep): Promise<void> {\n    logger.info('Rolling back step', {\n      transactionId,\n      stepId: step.id,\n      operation: step.operation,\n      entity: step.entity\n    });\n\n    try {\n      // Implement rollback logic based on operation type\n      switch (step.operation) {\n        case 'CREATE':\n          await this.rollbackCreate(step);\n          break;\n        case 'UPDATE':\n          await this.rollbackUpdate(step);\n          break;\n        case 'DELETE':\n          await this.rollbackDelete(step);\n          break;\n        default:\n          logger.warn('No rollback handler for operation', {\n            transactionId,\n            stepId: step.id,\n            operation: step.operation\n          });\n      }\n    } catch (error) {\n      logger.error('Step rollback failed', {\n        transactionId,\n        stepId: step.id,\n        error: error instanceof Error ? error.message : String(error)\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Rollback create operation\n   */\n  private static async rollbackCreate(step: TransactionStep): Promise<void> {\n    const { entity, rollbackData } = step;\n    \n    if (!rollbackData || !rollbackData.id) {\n      logger.warn('No rollback data available for create operation', {\n        stepId: step.id,\n        entity\n      });\n      return;\n    }\n\n    try {\n      switch (entity) {\n        case 'USER':\n          await prisma.user.delete({ where: { id: rollbackData.id } });\n          break;\n        case 'CONTACT':\n          await prisma.contact.delete({ where: { id: rollbackData.id } });\n          break;\n        case 'ORGANIZATION':\n          await prisma.organization.delete({ where: { id: rollbackData.id } });\n          break;\n        case 'CAMPAIGN':\n          await prisma.emailCampaign.delete({ where: { id: rollbackData.id } });\n          break;\n        case 'TASK':\n          await prisma.task.delete({ where: { id: rollbackData.id } });\n          break;\n        default:\n          logger.warn('No rollback handler for entity', { entity });\n      }\n    } catch (error) {\n      logger.error('Rollback create failed', {\n        stepId: step.id,\n        entity,\n        id: rollbackData.id,\n        error: error instanceof Error ? error.message : String(error)\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Rollback update operation\n   */\n  private static async rollbackUpdate(step: TransactionStep): Promise<void> {\n    const { entity, rollbackData } = step;\n    \n    if (!rollbackData || !rollbackData.id || !rollbackData.previousData) {\n      logger.warn('No rollback data available for update operation', {\n        stepId: step.id,\n        entity\n      });\n      return;\n    }\n\n    try {\n      const { id, previousData } = rollbackData;\n      \n      switch (entity) {\n        case 'USER':\n          await prisma.user.update({ where: { id }, data: previousData });\n          break;\n        case 'CONTACT':\n          await prisma.contact.update({ where: { id }, data: previousData });\n          break;\n        case 'ORGANIZATION':\n          await prisma.organization.update({ where: { id }, data: previousData });\n          break;\n        case 'CAMPAIGN':\n          await prisma.emailCampaign.update({ where: { id }, data: previousData });\n          break;\n        case 'TASK':\n          await prisma.task.update({ where: { id }, data: previousData });\n          break;\n        default:\n          logger.warn('No rollback handler for entity', { entity });\n      }\n    } catch (error) {\n      logger.error('Rollback update failed', {\n        stepId: step.id,\n        entity,\n        error: error instanceof Error ? error.message : String(error)\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Rollback delete operation\n   */\n  private static async rollbackDelete(step: TransactionStep): Promise<void> {\n    const { entity, rollbackData } = step;\n    \n    if (!rollbackData || !rollbackData.deletedData) {\n      logger.warn('No rollback data available for delete operation', {\n        stepId: step.id,\n        entity\n      });\n      return;\n    }\n\n    try {\n      const { deletedData } = rollbackData;\n      \n      switch (entity) {\n        case 'USER':\n          await prisma.user.create({ data: deletedData });\n          break;\n        case 'CONTACT':\n          await prisma.contact.create({ data: deletedData });\n          break;\n        case 'ORGANIZATION':\n          await prisma.organization.create({ data: deletedData });\n          break;\n        case 'CAMPAIGN':\n          await prisma.emailCampaign.create({ data: deletedData });\n          break;\n        case 'TASK':\n          await prisma.task.create({ data: deletedData });\n          break;\n        default:\n          logger.warn('No rollback handler for entity', { entity });\n      }\n    } catch (error) {\n      logger.error('Rollback delete failed', {\n        stepId: step.id,\n        entity,\n        error: error instanceof Error ? error.message : String(error)\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Handle transaction timeout\n   */\n  private static async handleTimeout(transactionId: string): Promise<void> {\n    const context = this.activeTransactions.get(transactionId);\n    \n    if (!context) {\n      return; // Transaction already completed\n    }\n\n    logger.warn('Transaction timeout', {\n      transactionId,\n      timeout: context.timeout,\n      executionTime: Date.now() - context.startTime\n    });\n\n    try {\n      await this.rollbackTransaction(transactionId);\n    } catch (error) {\n      logger.error('Transaction timeout rollback failed', {\n        transactionId,\n        error: error instanceof Error ? error.message : String(error)\n      });\n    }\n  }\n\n  /**\n   * Get transaction status\n   */\n  static getTransactionStatus(transactionId: string): {\n    exists: boolean;\n    context?: TransactionContext;\n    steps?: TransactionStep[];\n    stepsCompleted: number;\n    totalSteps: number;\n  } {\n    const context = this.activeTransactions.get(transactionId);\n    const steps = this.transactionSteps.get(transactionId) || [];\n    \n    return {\n      exists: !!context,\n      context,\n      steps,\n      stepsCompleted: steps.filter(s => s.executed).length,\n      totalSteps: steps.length\n    };\n  }\n\n  /**\n   * Clean up expired transactions\n   */\n  static cleanup(): void {\n    const now = Date.now();\n    const expired: string[] = [];\n\n    for (const [transactionId, context] of this.activeTransactions) {\n      if (now - context.startTime > context.timeout) {\n        expired.push(transactionId);\n      }\n    }\n\n    for (const transactionId of expired) {\n      this.handleTimeout(transactionId);\n    }\n\n    logger.info('Transaction cleanup completed', {\n      expiredTransactions: expired.length\n    });\n  }\n}\n\n// Export helper functions\nexport async function withTransaction<T>(\n  userId: string,\n  operationId: string,\n  description: string,\n  operationFn: (transactionId: string) => Promise<T>\n): Promise<T> {\n  const transactionId = await TransactionManager.startTransaction(\n    userId,\n    operationId,\n    description\n  );\n\n  try {\n    const result = await operationFn(transactionId);\n    await TransactionManager.commitTransaction(transactionId);\n    return result;\n  } catch (error) {\n    await TransactionManager.rollbackTransaction(transactionId);\n    throw error;\n  }\n}\n\n// Schedule cleanup every 5 minutes\nsetInterval(() => {\n  TransactionManager.cleanup();\n}, 5 * 60 * 1000);"],"names":["TransactionManager","withTransaction","activeTransactions","Map","transactionSteps","rollbackHandlers","startTransaction","userId","operationId","description","timeoutMs","transactionId","Date","now","Math","random","toString","substr","context","id","startTime","timeout","set","logger","info","setTimeout","handleTimeout","executeStep","stepId","operation","entity","executeFn","rollbackFn","get","Error","step","data","executed","result","prisma","$transaction","tx","stepResult","rollbackData","executedAt","steps","push","handlers","executionTime","error","message","String","commitTransaction","stepsCompleted","filter","s","length","totalSteps","delete","success","results","map","rollbackTransaction","warn","stepsToRollback","rollbackErrors","i","errorMessage","handlerIndex","executedSteps","reverse","rollbackStep","rollbackPerformed","join","undefined","rollbackCreate","rollbackUpdate","rollbackDelete","user","where","contact","organization","emailCampaign","task","previousData","update","deletedData","create","getTransactionStatus","exists","cleanup","expired","expiredTransactions","operationFn","setInterval"],"mappings":"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"}