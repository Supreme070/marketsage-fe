{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/lib/whatsapp-service.ts"],"sourcesContent":["/**\n * WhatsApp Service\n * \n * This module provides WhatsApp messaging functionality through the API client.\n * It supports text messages, templates, media, interactive messages, and location sharing.\n */\n\nimport { apiClient } from '@/lib/api';\nimport type {\n  WhatsAppResult,\n  WhatsAppTemplate,\n  WhatsAppMediaMessage,\n  WhatsAppInteractiveMessage,\n} from '@/lib/api/types/communications';\nimport { logger } from '@/lib/logger';\n\n// Re-export types from API client for backward compatibility\nexport type {\n  WhatsAppResult,\n  WhatsAppTemplate,\n  WhatsAppMediaMessage,\n  WhatsAppInteractiveMessage,\n} from '@/lib/api/types/communications';\n\nexport class WhatsAppService {\n  /**\n   * Send a text message via WhatsApp Business API\n   */\n  async sendTextMessage(\n    to: string,\n    message: string,\n    organizationId?: string\n  ): Promise<WhatsAppResult> {\n    try {\n      return await apiClient.communications.sendWhatsAppMessage(\n        to,\n        message,\n        organizationId\n      );\n    } catch (error) {\n      logger.error('WhatsApp sending error:', error);\n      return {\n        success: false,\n        error: {\n          message: error instanceof Error ? error.message : 'WhatsApp sending failed',\n        },\n      };\n    }\n  }\n\n  /**\n   * Send a template message via WhatsApp Business API\n   */\n  async sendTemplateMessage(\n    to: string,\n    template: WhatsAppTemplate,\n    organizationId?: string\n  ): Promise<WhatsAppResult> {\n    try {\n      return await apiClient.communications.sendWhatsAppTemplate(\n        to,\n        template,\n        organizationId\n      );\n    } catch (error) {\n      logger.error('WhatsApp template sending error:', error);\n      return {\n        success: false,\n        error: {\n          message: error instanceof Error ? error.message : 'WhatsApp template sending failed',\n        },\n      };\n    }\n  }\n\n  /**\n   * Send a media message (image, document, audio, video)\n   */\n  async sendMediaMessage(\n    to: string,\n    media: WhatsAppMediaMessage,\n    organizationId?: string\n  ): Promise<WhatsAppResult> {\n    try {\n      return await apiClient.communications.sendWhatsAppMedia(\n        to,\n        media,\n        organizationId\n      );\n    } catch (error) {\n      logger.error('WhatsApp media message error:', error);\n      return {\n        success: false,\n        error: {\n          message: error instanceof Error ? error.message : 'WhatsApp media message failed',\n        },\n      };\n    }\n  }\n\n  /**\n   * Send an interactive message (buttons or list)\n   */\n  async sendInteractiveMessage(\n    to: string,\n    interactive: WhatsAppInteractiveMessage,\n    organizationId?: string\n  ): Promise<WhatsAppResult> {\n    try {\n      return await apiClient.communications.sendWhatsAppInteractive(\n        to,\n        interactive,\n        organizationId\n      );\n    } catch (error) {\n      logger.error('WhatsApp interactive message error:', error);\n      return {\n        success: false,\n        error: {\n          message: error instanceof Error ? error.message : 'WhatsApp interactive message failed',\n        },\n      };\n    }\n  }\n\n  /**\n   * Send a location message\n   */\n  async sendLocationMessage(\n    to: string,\n    latitude: number,\n    longitude: number,\n    name?: string,\n    address?: string,\n    organizationId?: string\n  ): Promise<WhatsAppResult> {\n    try {\n      return await apiClient.communications.sendWhatsAppLocation(\n        to,\n        latitude,\n        longitude,\n        name,\n        address,\n        organizationId\n      );\n    } catch (error) {\n      logger.error('WhatsApp location message error:', error);\n      return {\n        success: false,\n        error: {\n          message: error instanceof Error ? error.message : 'WhatsApp location message failed',\n        },\n      };\n    }\n  }\n\n  /**\n   * Upload media to WhatsApp for use in messages\n   */\n  async uploadMedia(\n    fileUrl: string,\n    type: 'image' | 'document' | 'audio' | 'video',\n    organizationId?: string\n  ): Promise<{ success: boolean; mediaId?: string; error?: any }> {\n    try {\n      return await apiClient.communications.uploadWhatsAppMedia(\n        fileUrl,\n        type,\n        organizationId\n      );\n    } catch (error) {\n      logger.error('WhatsApp media upload error:', error);\n      return {\n        success: false,\n        error: {\n          message: error instanceof Error ? error.message : 'Media upload failed',\n        },\n      };\n    }\n  }\n\n  /**\n   * Get media URL from media ID\n   */\n  async getMediaUrl(\n    mediaId: string,\n    organizationId?: string\n  ): Promise<{ success: boolean; url?: string; error?: any }> {\n    try {\n      return await apiClient.communications.getWhatsAppMediaUrl(\n        mediaId,\n        organizationId\n      );\n    } catch (error) {\n      logger.error('WhatsApp get media URL error:', error);\n      return {\n        success: false,\n        error: {\n          message: error instanceof Error ? error.message : 'Failed to get media URL',\n        },\n      };\n    }\n  }\n\n  /**\n   * Enhanced phone number validation for WhatsApp Business API\n   * Supports multiple African countries as per WhatsApp international format requirements\n   */\n  validatePhoneNumber(phoneNumber: string): boolean {\n    try {\n      return apiClient.communications.validateWhatsAppNumber(phoneNumber);\n    } catch (error) {\n      logger.error('WhatsApp phone validation error:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Test organization WhatsApp configuration\n   */\n  async testOrganizationWhatsApp(\n    organizationId: string,\n    testPhoneNumber: string,\n    testMessage?: string\n  ): Promise<WhatsAppResult> {\n    try {\n      return await apiClient.communications.testWhatsAppConfiguration(\n        organizationId,\n        testPhoneNumber,\n        testMessage\n      );\n    } catch (error) {\n      logger.error('WhatsApp test configuration error:', error);\n      return {\n        success: false,\n        error: {\n          message: error instanceof Error ? error.message : 'WhatsApp test failed',\n        },\n      };\n    }\n  }\n\n  /**\n   * Check if WhatsApp Business API is properly configured\n   * This now checks through the API client\n   */\n  async isConfigured(organizationId?: string): Promise<boolean> {\n    try {\n      if (organizationId) {\n        // Test with a dummy message to see if provider is configured\n        const testResult = await this.testOrganizationWhatsApp(\n          organizationId,\n          '+1234567890', // dummy number\n          'test'\n        );\n        return testResult.success || testResult.error?.code !== 'PROVIDER_NOT_CONFIGURED';\n      }\n      \n      // For global configuration, try a basic API call\n      return true; // Assume API is available if we can make calls\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * Clear organization provider cache (handled by API now)\n   */\n  clearOrganizationCache(organizationId: string): void {\n    // Cache management is now handled by the API client\n    logger.info(`WhatsApp cache cleared for organization ${organizationId}`);\n  }\n}\n\n// Export a singleton instance\nexport const whatsappService = new WhatsAppService();\n\n// Legacy function for backward compatibility\nexport async function sendWhatsAppMessage(\n  phoneNumber: string,\n  message: string,\n  organizationId?: string\n): Promise<WhatsAppResult> {\n  return whatsappService.sendTextMessage(phoneNumber, message, organizationId);\n}"],"names":["WhatsAppService","sendWhatsAppMessage","whatsappService","sendTextMessage","to","message","organizationId","apiClient","communications","error","logger","success","Error","sendTemplateMessage","template","sendWhatsAppTemplate","sendMediaMessage","media","sendWhatsAppMedia","sendInteractiveMessage","interactive","sendWhatsAppInteractive","sendLocationMessage","latitude","longitude","name","address","sendWhatsAppLocation","uploadMedia","fileUrl","type","uploadWhatsAppMedia","getMediaUrl","mediaId","getWhatsAppMediaUrl","validatePhoneNumber","phoneNumber","validateWhatsAppNumber","testOrganizationWhatsApp","testPhoneNumber","testMessage","testWhatsAppConfiguration","isConfigured","testResult","code","clearOrganizationCache","info"],"mappings":"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"}