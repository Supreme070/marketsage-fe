8eec08c6117ccf5354c6bf38865cc8c3
/**
 * WhatsApp Service
 * 
 * This module provides WhatsApp messaging functionality through the API client.
 * It supports text messages, templates, media, interactive messages, and location sharing.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    WhatsAppService: function() {
        return WhatsAppService;
    },
    sendWhatsAppMessage: function() {
        return sendWhatsAppMessage;
    },
    whatsappService: function() {
        return whatsappService;
    }
});
const _api = require("./api");
const _logger = require("./logger");
class WhatsAppService {
    /**
   * Send a text message via WhatsApp Business API
   */ async sendTextMessage(to, message, organizationId) {
        try {
            return await _api.apiClient.communications.sendWhatsAppMessage(to, message, organizationId);
        } catch (error) {
            _logger.logger.error('WhatsApp sending error:', error);
            return {
                success: false,
                error: {
                    message: error instanceof Error ? error.message : 'WhatsApp sending failed'
                }
            };
        }
    }
    /**
   * Send a template message via WhatsApp Business API
   */ async sendTemplateMessage(to, template, organizationId) {
        try {
            return await _api.apiClient.communications.sendWhatsAppTemplate(to, template, organizationId);
        } catch (error) {
            _logger.logger.error('WhatsApp template sending error:', error);
            return {
                success: false,
                error: {
                    message: error instanceof Error ? error.message : 'WhatsApp template sending failed'
                }
            };
        }
    }
    /**
   * Send a media message (image, document, audio, video)
   */ async sendMediaMessage(to, media, organizationId) {
        try {
            return await _api.apiClient.communications.sendWhatsAppMedia(to, media, organizationId);
        } catch (error) {
            _logger.logger.error('WhatsApp media message error:', error);
            return {
                success: false,
                error: {
                    message: error instanceof Error ? error.message : 'WhatsApp media message failed'
                }
            };
        }
    }
    /**
   * Send an interactive message (buttons or list)
   */ async sendInteractiveMessage(to, interactive, organizationId) {
        try {
            return await _api.apiClient.communications.sendWhatsAppInteractive(to, interactive, organizationId);
        } catch (error) {
            _logger.logger.error('WhatsApp interactive message error:', error);
            return {
                success: false,
                error: {
                    message: error instanceof Error ? error.message : 'WhatsApp interactive message failed'
                }
            };
        }
    }
    /**
   * Send a location message
   */ async sendLocationMessage(to, latitude, longitude, name, address, organizationId) {
        try {
            return await _api.apiClient.communications.sendWhatsAppLocation(to, latitude, longitude, name, address, organizationId);
        } catch (error) {
            _logger.logger.error('WhatsApp location message error:', error);
            return {
                success: false,
                error: {
                    message: error instanceof Error ? error.message : 'WhatsApp location message failed'
                }
            };
        }
    }
    /**
   * Upload media to WhatsApp for use in messages
   */ async uploadMedia(fileUrl, type, organizationId) {
        try {
            return await _api.apiClient.communications.uploadWhatsAppMedia(fileUrl, type, organizationId);
        } catch (error) {
            _logger.logger.error('WhatsApp media upload error:', error);
            return {
                success: false,
                error: {
                    message: error instanceof Error ? error.message : 'Media upload failed'
                }
            };
        }
    }
    /**
   * Get media URL from media ID
   */ async getMediaUrl(mediaId, organizationId) {
        try {
            return await _api.apiClient.communications.getWhatsAppMediaUrl(mediaId, organizationId);
        } catch (error) {
            _logger.logger.error('WhatsApp get media URL error:', error);
            return {
                success: false,
                error: {
                    message: error instanceof Error ? error.message : 'Failed to get media URL'
                }
            };
        }
    }
    /**
   * Enhanced phone number validation for WhatsApp Business API
   * Supports multiple African countries as per WhatsApp international format requirements
   */ validatePhoneNumber(phoneNumber) {
        try {
            return _api.apiClient.communications.validateWhatsAppNumber(phoneNumber);
        } catch (error) {
            _logger.logger.error('WhatsApp phone validation error:', error);
            return false;
        }
    }
    /**
   * Test organization WhatsApp configuration
   */ async testOrganizationWhatsApp(organizationId, testPhoneNumber, testMessage) {
        try {
            return await _api.apiClient.communications.testWhatsAppConfiguration(organizationId, testPhoneNumber, testMessage);
        } catch (error) {
            _logger.logger.error('WhatsApp test configuration error:', error);
            return {
                success: false,
                error: {
                    message: error instanceof Error ? error.message : 'WhatsApp test failed'
                }
            };
        }
    }
    /**
   * Check if WhatsApp Business API is properly configured
   * This now checks through the API client
   */ async isConfigured(organizationId) {
        try {
            if (organizationId) {
                // Test with a dummy message to see if provider is configured
                const testResult = await this.testOrganizationWhatsApp(organizationId, '+1234567890', 'test');
                return testResult.success || testResult.error?.code !== 'PROVIDER_NOT_CONFIGURED';
            }
            // For global configuration, try a basic API call
            return true; // Assume API is available if we can make calls
        } catch (error) {
            return false;
        }
    }
    /**
   * Clear organization provider cache (handled by API now)
   */ clearOrganizationCache(organizationId) {
        // Cache management is now handled by the API client
        _logger.logger.info(`WhatsApp cache cleared for organization ${organizationId}`);
    }
}
const whatsappService = new WhatsAppService();
async function sendWhatsAppMessage(phoneNumber, message, organizationId) {
    return whatsappService.sendTextMessage(phoneNumber, message, organizationId);
}

//# sourceMappingURL=data:application/json;base64,