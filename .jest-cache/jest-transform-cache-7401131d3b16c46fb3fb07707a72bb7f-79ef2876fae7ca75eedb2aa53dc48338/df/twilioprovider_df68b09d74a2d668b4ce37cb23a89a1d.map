{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/lib/sms-providers/twilio-provider.ts"],"sourcesContent":["import { BaseSMSProvider, type SMSResult } from './base-provider';\n\n// Twilio SMS provider for global SMS delivery\nexport class TwilioSMSProvider extends BaseSMSProvider {\n  name = 'Twilio';\n  \n  private accountSid: string;\n  private authToken: string;\n  private fromNumber: string;\n\n  constructor(config?: { accountSid?: string; authToken?: string; fromNumber?: string }) {\n    super();\n    // Use provided config or fall back to environment variables\n    this.accountSid = config?.accountSid || process.env.TWILIO_ACCOUNT_SID || '';\n    this.authToken = config?.authToken || process.env.TWILIO_AUTH_TOKEN || '';\n    this.fromNumber = config?.fromNumber || process.env.TWILIO_FROM_NUMBER || process.env.TWILIO_PHONE_NUMBER || '';\n  }\n\n  async sendSMS(phoneNumber: string, message: string): Promise<SMSResult> {\n    try {\n      // Validate phone number format\n      if (!this.validatePhoneNumber(phoneNumber)) {\n        return {\n          success: false,\n          error: {\n            message: `Invalid phone number format: ${phoneNumber}`,\n            code: 'INVALID_PHONE_NUMBER'\n          }\n        };\n      }\n\n      // If not configured, fall back to mock behavior for development\n      if (!this.isConfigured()) {\n        console.log(`[MOCK Twilio] Would send to ${phoneNumber}: ${message}`);\n        return {\n          success: true,\n          messageId: `mock_twilio_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        };\n      }\n\n      // Format phone number for Twilio (ensure E.164 format)\n      const formattedPhone = this.formatPhoneNumber(phoneNumber);\n\n      const requestBody = new URLSearchParams({\n        To: formattedPhone,\n        From: this.fromNumber,\n        Body: message\n      });\n\n      // Twilio uses Basic Auth with AccountSid as username and AuthToken as password\n      const credentials = Buffer.from(`${this.accountSid}:${this.authToken}`).toString('base64');\n\n      const response = await fetch(`https://api.twilio.com/2010-04-01/Accounts/${this.accountSid}/Messages.json`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Basic ${credentials}`,\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: requestBody\n      });\n\n      const responseData = await response.json();\n\n      if (!response.ok) {\n        throw new Error(responseData.message || `Twilio API error: ${response.status}`);\n      }\n\n      // Twilio returns the message SID on success\n      if (responseData.sid) {\n        return {\n          success: true,\n          messageId: responseData.sid,\n        };\n      } else {\n        return {\n          success: false,\n          error: {\n            message: responseData.error_message || 'Unknown error from Twilio',\n            code: responseData.error_code || 'TWILIO_ERROR'\n          }\n        };\n      }\n\n    } catch (error) {\n      console.error('Twilio SMS error:', error);\n      \n      return {\n        success: false,\n        error: {\n          message: error instanceof Error ? error.message : 'Twilio SMS sending failed',\n          code: 'TWILIO_API_ERROR'\n        },\n      };\n    }\n  }\n\n  isConfigured(): boolean {\n    return !!(this.accountSid && this.authToken && this.fromNumber);\n  }\n\n  // Override phone validation to support US numbers in addition to African numbers\n  validatePhoneNumber(phoneNumber: string): boolean {\n    if (!phoneNumber || typeof phoneNumber !== 'string') {\n      return false;\n    }\n    \n    const cleanPhoneNumber = phoneNumber.replace(/\\D/g, '');\n    \n    // Check if it's a valid length (typically 10-15 digits)\n    if (cleanPhoneNumber.length < 10 || cleanPhoneNumber.length > 15) {\n      return false;\n    }\n    \n    // Support US numbers (country code 1)\n    if (cleanPhoneNumber.startsWith('1') && cleanPhoneNumber.length === 11) {\n      return true;\n    }\n    \n    // Support US numbers without country code (10 digits)\n    if (cleanPhoneNumber.length === 10 && !cleanPhoneNumber.startsWith('0')) {\n      return true;\n    }\n    \n    // Fall back to base validation for African numbers\n    return super.validatePhoneNumber(phoneNumber);\n  }\n\n  private formatPhoneNumber(phoneNumber: string): string {\n    const cleanPhoneNumber = phoneNumber.replace(/\\D/g, '');\n    \n    // If already has country code, return with +\n    if (cleanPhoneNumber.startsWith('234') || cleanPhoneNumber.startsWith('254') || \n        cleanPhoneNumber.startsWith('27') || cleanPhoneNumber.startsWith('233') ||\n        cleanPhoneNumber.startsWith('1')) {\n      return '+' + cleanPhoneNumber;\n    }\n    \n    // Handle US numbers (10 digits, likely US)\n    if (cleanPhoneNumber.length === 10 && !cleanPhoneNumber.startsWith('0')) {\n      // Check if it looks like a US number pattern\n      const firstDigit = cleanPhoneNumber.charAt(0);\n      if (firstDigit >= '2' && firstDigit <= '9') {\n        return '+1' + cleanPhoneNumber;\n      }\n    }\n    \n    // Default to Nigerian country code for local numbers\n    if (cleanPhoneNumber.startsWith('0')) {\n      return '+234' + cleanPhoneNumber.substring(1);\n    }\n    \n    if (cleanPhoneNumber.length === 10) {\n      return '+234' + cleanPhoneNumber;\n    }\n    \n    return '+' + cleanPhoneNumber;\n  }\n}"],"names":["TwilioSMSProvider","BaseSMSProvider","constructor","config","name","accountSid","process","env","TWILIO_ACCOUNT_SID","authToken","TWILIO_AUTH_TOKEN","fromNumber","TWILIO_FROM_NUMBER","TWILIO_PHONE_NUMBER","sendSMS","phoneNumber","message","validatePhoneNumber","success","error","code","isConfigured","console","log","messageId","Date","now","Math","random","toString","substr","formattedPhone","formatPhoneNumber","requestBody","URLSearchParams","To","From","Body","credentials","Buffer","from","response","fetch","method","headers","body","responseData","json","ok","Error","status","sid","error_message","error_code","cleanPhoneNumber","replace","length","startsWith","firstDigit","charAt","substring"],"mappings":";;;;+BAGaA;;;eAAAA;;;8BAHmC;AAGzC,MAAMA,0BAA0BC,6BAAe;IAOpDC,YAAYC,MAAyE,CAAE;QACrF,KAAK,SAPPC,OAAO;QAQL,4DAA4D;QAC5D,IAAI,CAACC,UAAU,GAAGF,QAAQE,cAAcC,QAAQC,GAAG,CAACC,kBAAkB,IAAI;QAC1E,IAAI,CAACC,SAAS,GAAGN,QAAQM,aAAaH,QAAQC,GAAG,CAACG,iBAAiB,IAAI;QACvE,IAAI,CAACC,UAAU,GAAGR,QAAQQ,cAAcL,QAAQC,GAAG,CAACK,kBAAkB,IAAIN,QAAQC,GAAG,CAACM,mBAAmB,IAAI;IAC/G;IAEA,MAAMC,QAAQC,WAAmB,EAAEC,OAAe,EAAsB;QACtE,IAAI;YACF,+BAA+B;YAC/B,IAAI,CAAC,IAAI,CAACC,mBAAmB,CAACF,cAAc;gBAC1C,OAAO;oBACLG,SAAS;oBACTC,OAAO;wBACLH,SAAS,CAAC,6BAA6B,EAAED,aAAa;wBACtDK,MAAM;oBACR;gBACF;YACF;YAEA,gEAAgE;YAChE,IAAI,CAAC,IAAI,CAACC,YAAY,IAAI;gBACxBC,QAAQC,GAAG,CAAC,CAAC,4BAA4B,EAAER,YAAY,EAAE,EAAEC,SAAS;gBACpE,OAAO;oBACLE,SAAS;oBACTM,WAAW,CAAC,YAAY,EAAEC,KAAKC,GAAG,GAAG,CAAC,EAAEC,KAAKC,MAAM,GAAGC,QAAQ,CAAC,IAAIC,MAAM,CAAC,GAAG,IAAI;gBACnF;YACF;YAEA,uDAAuD;YACvD,MAAMC,iBAAiB,IAAI,CAACC,iBAAiB,CAACjB;YAE9C,MAAMkB,cAAc,IAAIC,gBAAgB;gBACtCC,IAAIJ;gBACJK,MAAM,IAAI,CAACzB,UAAU;gBACrB0B,MAAMrB;YACR;YAEA,+EAA+E;YAC/E,MAAMsB,cAAcC,OAAOC,IAAI,CAAC,GAAG,IAAI,CAACnC,UAAU,CAAC,CAAC,EAAE,IAAI,CAACI,SAAS,EAAE,EAAEoB,QAAQ,CAAC;YAEjF,MAAMY,WAAW,MAAMC,MAAM,CAAC,2CAA2C,EAAE,IAAI,CAACrC,UAAU,CAAC,cAAc,CAAC,EAAE;gBAC1GsC,QAAQ;gBACRC,SAAS;oBACP,iBAAiB,CAAC,MAAM,EAAEN,aAAa;oBACvC,gBAAgB;gBAClB;gBACAO,MAAMZ;YACR;YAEA,MAAMa,eAAe,MAAML,SAASM,IAAI;YAExC,IAAI,CAACN,SAASO,EAAE,EAAE;gBAChB,MAAM,IAAIC,MAAMH,aAAa9B,OAAO,IAAI,CAAC,kBAAkB,EAAEyB,SAASS,MAAM,EAAE;YAChF;YAEA,4CAA4C;YAC5C,IAAIJ,aAAaK,GAAG,EAAE;gBACpB,OAAO;oBACLjC,SAAS;oBACTM,WAAWsB,aAAaK,GAAG;gBAC7B;YACF,OAAO;gBACL,OAAO;oBACLjC,SAAS;oBACTC,OAAO;wBACLH,SAAS8B,aAAaM,aAAa,IAAI;wBACvChC,MAAM0B,aAAaO,UAAU,IAAI;oBACnC;gBACF;YACF;QAEF,EAAE,OAAOlC,OAAO;YACdG,QAAQH,KAAK,CAAC,qBAAqBA;YAEnC,OAAO;gBACLD,SAAS;gBACTC,OAAO;oBACLH,SAASG,iBAAiB8B,QAAQ9B,MAAMH,OAAO,GAAG;oBAClDI,MAAM;gBACR;YACF;QACF;IACF;IAEAC,eAAwB;QACtB,OAAO,CAAC,CAAE,CAAA,IAAI,CAAChB,UAAU,IAAI,IAAI,CAACI,SAAS,IAAI,IAAI,CAACE,UAAU,AAAD;IAC/D;IAEA,iFAAiF;IACjFM,oBAAoBF,WAAmB,EAAW;QAChD,IAAI,CAACA,eAAe,OAAOA,gBAAgB,UAAU;YACnD,OAAO;QACT;QAEA,MAAMuC,mBAAmBvC,YAAYwC,OAAO,CAAC,OAAO;QAEpD,wDAAwD;QACxD,IAAID,iBAAiBE,MAAM,GAAG,MAAMF,iBAAiBE,MAAM,GAAG,IAAI;YAChE,OAAO;QACT;QAEA,sCAAsC;QACtC,IAAIF,iBAAiBG,UAAU,CAAC,QAAQH,iBAAiBE,MAAM,KAAK,IAAI;YACtE,OAAO;QACT;QAEA,sDAAsD;QACtD,IAAIF,iBAAiBE,MAAM,KAAK,MAAM,CAACF,iBAAiBG,UAAU,CAAC,MAAM;YACvE,OAAO;QACT;QAEA,mDAAmD;QACnD,OAAO,KAAK,CAACxC,oBAAoBF;IACnC;IAEQiB,kBAAkBjB,WAAmB,EAAU;QACrD,MAAMuC,mBAAmBvC,YAAYwC,OAAO,CAAC,OAAO;QAEpD,6CAA6C;QAC7C,IAAID,iBAAiBG,UAAU,CAAC,UAAUH,iBAAiBG,UAAU,CAAC,UAClEH,iBAAiBG,UAAU,CAAC,SAASH,iBAAiBG,UAAU,CAAC,UACjEH,iBAAiBG,UAAU,CAAC,MAAM;YACpC,OAAO,MAAMH;QACf;QAEA,2CAA2C;QAC3C,IAAIA,iBAAiBE,MAAM,KAAK,MAAM,CAACF,iBAAiBG,UAAU,CAAC,MAAM;YACvE,6CAA6C;YAC7C,MAAMC,aAAaJ,iBAAiBK,MAAM,CAAC;YAC3C,IAAID,cAAc,OAAOA,cAAc,KAAK;gBAC1C,OAAO,OAAOJ;YAChB;QACF;QAEA,qDAAqD;QACrD,IAAIA,iBAAiBG,UAAU,CAAC,MAAM;YACpC,OAAO,SAASH,iBAAiBM,SAAS,CAAC;QAC7C;QAEA,IAAIN,iBAAiBE,MAAM,KAAK,IAAI;YAClC,OAAO,SAASF;QAClB;QAEA,OAAO,MAAMA;IACf;AACF"}