{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/lib/leadpulse/integrations/crm-connectors.ts"],"sourcesContent":["/**\n * LeadPulse CRM Integration Connectors\n * \n * Provides seamless integration with major CRM platforms:\n * - Salesforce\n * - HubSpot\n * - Pipedrive\n * - Zoho CRM\n */\n\nimport { logger } from '@/lib/logger';\nimport { leadPulseCache } from '@/lib/cache/leadpulse-cache';\nimport { leadPulseErrorHandler, LeadPulseErrorType } from '../error-handler';\nimport prisma from '@/lib/db/prisma';\n\n// CRM Integration Types\nexport interface CRMContact {\n  id?: string;\n  email: string;\n  firstName?: string;\n  lastName?: string;\n  company?: string;\n  phone?: string;\n  jobTitle?: string;\n  website?: string;\n  address?: string;\n  city?: string;\n  state?: string;\n  country?: string;\n  postalCode?: string;\n  leadSource?: string;\n  leadScore?: number;\n  customFields?: Record<string, any>;\n}\n\nexport interface CRMDeal {\n  id?: string;\n  contactId: string;\n  title: string;\n  amount?: number;\n  stage: string;\n  closeDate?: Date;\n  probability?: number;\n  description?: string;\n  customFields?: Record<string, any>;\n}\n\nexport interface CRMActivity {\n  id?: string;\n  contactId: string;\n  type: 'EMAIL' | 'CALL' | 'MEETING' | 'NOTE' | 'TASK';\n  subject: string;\n  description?: string;\n  dueDate?: Date;\n  completed?: boolean;\n}\n\nexport interface CRMIntegrationConfig {\n  platform: 'salesforce' | 'hubspot' | 'pipedrive' | 'zoho';\n  credentials: {\n    clientId?: string;\n    clientSecret?: string;\n    accessToken?: string;\n    refreshToken?: string;\n    apiKey?: string;\n    domain?: string;\n    instanceUrl?: string;\n  };\n  mappings: {\n    leadSource?: string;\n    customFieldMappings?: Record<string, string>;\n  };\n  syncSettings: {\n    autoSync: boolean;\n    syncInterval: number; // minutes\n    syncDirection: 'bidirectional' | 'to_crm' | 'from_crm';\n    conflictResolution: 'leadpulse_wins' | 'crm_wins' | 'manual';\n  };\n}\n\n// Base CRM Connector Class\nexport abstract class CRMConnector {\n  protected config: CRMIntegrationConfig;\n  protected rateLimitDelay = 1000; // 1 second between API calls\n\n  constructor(config: CRMIntegrationConfig) {\n    this.config = config;\n  }\n\n  abstract authenticate(): Promise<boolean>;\n  abstract createContact(contact: CRMContact): Promise<{ success: boolean; id?: string; error?: string }>;\n  abstract updateContact(id: string, contact: Partial<CRMContact>): Promise<{ success: boolean; error?: string }>;\n  abstract getContact(id: string): Promise<{ success: boolean; contact?: CRMContact; error?: string }>;\n  abstract searchContacts(email: string): Promise<{ success: boolean; contacts?: CRMContact[]; error?: string }>;\n  abstract createDeal(deal: CRMDeal): Promise<{ success: boolean; id?: string; error?: string }>;\n  abstract createActivity(activity: CRMActivity): Promise<{ success: boolean; id?: string; error?: string }>;\n  abstract testConnection(): Promise<{ success: boolean; error?: string }>;\n\n  // Rate limiting helper\n  protected async delay(): Promise<void> {\n    await new Promise(resolve => setTimeout(resolve, this.rateLimitDelay));\n  }\n\n  // Error handling wrapper\n  protected async withErrorHandling<T>(\n    operation: () => Promise<T>,\n    context: { operation: string; contactId?: string }\n  ): Promise<T> {\n    try {\n      return await operation();\n    } catch (error) {\n      await leadPulseErrorHandler.handleError(\n        error,\n        {\n          endpoint: `crm_${this.config.platform}`,\n          additionalData: context\n        },\n        LeadPulseErrorType.EXTERNAL_API_ERROR\n      );\n      throw error;\n    }\n  }\n}\n\n// Salesforce Connector\nexport class SalesforceConnector extends CRMConnector {\n  private baseUrl: string;\n\n  constructor(config: CRMIntegrationConfig) {\n    super(config);\n    this.baseUrl = config.credentials.instanceUrl || 'https://login.salesforce.com';\n    this.rateLimitDelay = 200; // Salesforce has higher rate limits\n  }\n\n  async authenticate(): Promise<boolean> {\n    return this.withErrorHandling(async () => {\n      const response = await fetch(`${this.baseUrl}/services/oauth2/token`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: new URLSearchParams({\n          grant_type: 'refresh_token',\n          client_id: this.config.credentials.clientId!,\n          client_secret: this.config.credentials.clientSecret!,\n          refresh_token: this.config.credentials.refreshToken!,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Salesforce auth failed: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      this.config.credentials.accessToken = data.access_token;\n      this.baseUrl = data.instance_url;\n\n      logger.info('Salesforce authentication successful');\n      return true;\n    }, { operation: 'authenticate' });\n  }\n\n  async createContact(contact: CRMContact): Promise<{ success: boolean; id?: string; error?: string }> {\n    return this.withErrorHandling(async () => {\n      const salesforceContact = {\n        FirstName: contact.firstName,\n        LastName: contact.lastName || 'Unknown',\n        Email: contact.email,\n        Company: contact.company,\n        Phone: contact.phone,\n        Title: contact.jobTitle,\n        MailingStreet: contact.address,\n        MailingCity: contact.city,\n        MailingState: contact.state,\n        MailingCountry: contact.country,\n        MailingPostalCode: contact.postalCode,\n        LeadSource: contact.leadSource || this.config.mappings.leadSource || 'LeadPulse',\n        Lead_Score__c: contact.leadScore, // Custom field\n      };\n\n      const response = await fetch(`${this.baseUrl}/services/data/v58.0/sobjects/Contact`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.config.credentials.accessToken}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(salesforceContact),\n      });\n\n      await this.delay();\n\n      if (!response.ok) {\n        const error = await response.text();\n        return { success: false, error: `Salesforce API error: ${error}` };\n      }\n\n      const result = await response.json();\n      logger.info(`Salesforce contact created: ${result.id}`);\n      \n      return { success: true, id: result.id };\n    }, { operation: 'createContact', contactId: contact.email });\n  }\n\n  async updateContact(id: string, contact: Partial<CRMContact>): Promise<{ success: boolean; error?: string }> {\n    return this.withErrorHandling(async () => {\n      const updates: any = {};\n      if (contact.firstName) updates.FirstName = contact.firstName;\n      if (contact.lastName) updates.LastName = contact.lastName;\n      if (contact.email) updates.Email = contact.email;\n      if (contact.company) updates.Company = contact.company;\n      if (contact.phone) updates.Phone = contact.phone;\n      if (contact.leadScore) updates.Lead_Score__c = contact.leadScore;\n\n      const response = await fetch(`${this.baseUrl}/services/data/v58.0/sobjects/Contact/${id}`, {\n        method: 'PATCH',\n        headers: {\n          'Authorization': `Bearer ${this.config.credentials.accessToken}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(updates),\n      });\n\n      await this.delay();\n\n      if (!response.ok) {\n        const error = await response.text();\n        return { success: false, error: `Salesforce update error: ${error}` };\n      }\n\n      return { success: true };\n    }, { operation: 'updateContact', contactId: id });\n  }\n\n  async getContact(id: string): Promise<{ success: boolean; contact?: CRMContact; error?: string }> {\n    return this.withErrorHandling(async () => {\n      const response = await fetch(\n        `${this.baseUrl}/services/data/v58.0/sobjects/Contact/${id}?fields=Id,FirstName,LastName,Email,Company,Phone,Title,MailingStreet,MailingCity,MailingState,MailingCountry,MailingPostalCode,LeadSource,Lead_Score__c`,\n        {\n          headers: {\n            'Authorization': `Bearer ${this.config.credentials.accessToken}`,\n          },\n        }\n      );\n\n      await this.delay();\n\n      if (!response.ok) {\n        const error = await response.text();\n        return { success: false, error: `Salesforce get error: ${error}` };\n      }\n\n      const data = await response.json();\n      const contact: CRMContact = {\n        id: data.Id,\n        firstName: data.FirstName,\n        lastName: data.LastName,\n        email: data.Email,\n        company: data.Company,\n        phone: data.Phone,\n        jobTitle: data.Title,\n        address: data.MailingStreet,\n        city: data.MailingCity,\n        state: data.MailingState,\n        country: data.MailingCountry,\n        postalCode: data.MailingPostalCode,\n        leadSource: data.LeadSource,\n        leadScore: data.Lead_Score__c,\n      };\n\n      return { success: true, contact };\n    }, { operation: 'getContact', contactId: id });\n  }\n\n  async searchContacts(email: string): Promise<{ success: boolean; contacts?: CRMContact[]; error?: string }> {\n    return this.withErrorHandling(async () => {\n      const query = `SELECT Id,FirstName,LastName,Email,Company,Phone,Title,LeadSource,Lead_Score__c FROM Contact WHERE Email = '${email}'`;\n      const encodedQuery = encodeURIComponent(query);\n      \n      const response = await fetch(`${this.baseUrl}/services/data/v58.0/query?q=${encodedQuery}`, {\n        headers: {\n          'Authorization': `Bearer ${this.config.credentials.accessToken}`,\n        },\n      });\n\n      await this.delay();\n\n      if (!response.ok) {\n        const error = await response.text();\n        return { success: false, error: `Salesforce search error: ${error}` };\n      }\n\n      const data = await response.json();\n      const contacts: CRMContact[] = data.records.map((record: any) => ({\n        id: record.Id,\n        firstName: record.FirstName,\n        lastName: record.LastName,\n        email: record.Email,\n        company: record.Company,\n        phone: record.Phone,\n        jobTitle: record.Title,\n        leadSource: record.LeadSource,\n        leadScore: record.Lead_Score__c,\n      }));\n\n      return { success: true, contacts };\n    }, { operation: 'searchContacts', contactId: email });\n  }\n\n  async createDeal(deal: CRMDeal): Promise<{ success: boolean; id?: string; error?: string }> {\n    return this.withErrorHandling(async () => {\n      const opportunity = {\n        Name: deal.title,\n        ContactId: deal.contactId,\n        Amount: deal.amount,\n        StageName: deal.stage,\n        CloseDate: deal.closeDate?.toISOString().split('T')[0] || new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n        Probability: deal.probability || 50,\n        Description: deal.description,\n        LeadSource: 'LeadPulse',\n      };\n\n      const response = await fetch(`${this.baseUrl}/services/data/v58.0/sobjects/Opportunity`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.config.credentials.accessToken}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(opportunity),\n      });\n\n      await this.delay();\n\n      if (!response.ok) {\n        const error = await response.text();\n        return { success: false, error: `Salesforce opportunity error: ${error}` };\n      }\n\n      const result = await response.json();\n      return { success: true, id: result.id };\n    }, { operation: 'createDeal', contactId: deal.contactId });\n  }\n\n  async createActivity(activity: CRMActivity): Promise<{ success: boolean; id?: string; error?: string }> {\n    return this.withErrorHandling(async () => {\n      const task = {\n        WhoId: activity.contactId,\n        Subject: activity.subject,\n        Description: activity.description,\n        ActivityDate: activity.dueDate?.toISOString().split('T')[0],\n        Status: activity.completed ? 'Completed' : 'Not Started',\n        Type: activity.type,\n        Priority: 'Normal',\n      };\n\n      const response = await fetch(`${this.baseUrl}/services/data/v58.0/sobjects/Task`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.config.credentials.accessToken}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(task),\n      });\n\n      await this.delay();\n\n      if (!response.ok) {\n        const error = await response.text();\n        return { success: false, error: `Salesforce task error: ${error}` };\n      }\n\n      const result = await response.json();\n      return { success: true, id: result.id };\n    }, { operation: 'createActivity', contactId: activity.contactId });\n  }\n\n  async testConnection(): Promise<{ success: boolean; error?: string }> {\n    return this.withErrorHandling(async () => {\n      const response = await fetch(`${this.baseUrl}/services/data/v58.0/limits`, {\n        headers: {\n          'Authorization': `Bearer ${this.config.credentials.accessToken}`,\n        },\n      });\n\n      if (!response.ok) {\n        return { success: false, error: `Connection test failed: ${response.statusText}` };\n      }\n\n      return { success: true };\n    }, { operation: 'testConnection' });\n  }\n}\n\n// HubSpot Connector\nexport class HubSpotConnector extends CRMConnector {\n  private baseUrl = 'https://api.hubapi.com';\n\n  constructor(config: CRMIntegrationConfig) {\n    super(config);\n    this.rateLimitDelay = 100; // HubSpot has good rate limits\n  }\n\n  async authenticate(): Promise<boolean> {\n    // HubSpot uses API key or OAuth, for simplicity using API key\n    return this.config.credentials.apiKey ? true : false;\n  }\n\n  async createContact(contact: CRMContact): Promise<{ success: boolean; id?: string; error?: string }> {\n    return this.withErrorHandling(async () => {\n      const hubspotContact = {\n        properties: {\n          email: contact.email,\n          firstname: contact.firstName,\n          lastname: contact.lastName || 'Unknown',\n          company: contact.company,\n          phone: contact.phone,\n          jobtitle: contact.jobTitle,\n          address: contact.address,\n          city: contact.city,\n          state: contact.state,\n          country: contact.country,\n          zip: contact.postalCode,\n          hs_lead_source: contact.leadSource || this.config.mappings.leadSource || 'LeadPulse',\n          hubspotscore: contact.leadScore,\n        },\n      };\n\n      const response = await fetch(`${this.baseUrl}/crm/v3/objects/contacts`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.config.credentials.apiKey}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(hubspotContact),\n      });\n\n      await this.delay();\n\n      if (!response.ok) {\n        const error = await response.text();\n        return { success: false, error: `HubSpot API error: ${error}` };\n      }\n\n      const result = await response.json();\n      logger.info(`HubSpot contact created: ${result.id}`);\n      \n      return { success: true, id: result.id };\n    }, { operation: 'createContact', contactId: contact.email });\n  }\n\n  async updateContact(id: string, contact: Partial<CRMContact>): Promise<{ success: boolean; error?: string }> {\n    return this.withErrorHandling(async () => {\n      const properties: any = {};\n      if (contact.firstName) properties.firstname = contact.firstName;\n      if (contact.lastName) properties.lastname = contact.lastName;\n      if (contact.email) properties.email = contact.email;\n      if (contact.company) properties.company = contact.company;\n      if (contact.phone) properties.phone = contact.phone;\n      if (contact.leadScore) properties.hubspotscore = contact.leadScore;\n\n      const response = await fetch(`${this.baseUrl}/crm/v3/objects/contacts/${id}`, {\n        method: 'PATCH',\n        headers: {\n          'Authorization': `Bearer ${this.config.credentials.apiKey}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ properties }),\n      });\n\n      await this.delay();\n\n      if (!response.ok) {\n        const error = await response.text();\n        return { success: false, error: `HubSpot update error: ${error}` };\n      }\n\n      return { success: true };\n    }, { operation: 'updateContact', contactId: id });\n  }\n\n  async getContact(id: string): Promise<{ success: boolean; contact?: CRMContact; error?: string }> {\n    return this.withErrorHandling(async () => {\n      const properties = [\n        'email', 'firstname', 'lastname', 'company', 'phone', 'jobtitle',\n        'address', 'city', 'state', 'country', 'zip', 'hs_lead_source', 'hubspotscore'\n      ].join(',');\n\n      const response = await fetch(\n        `${this.baseUrl}/crm/v3/objects/contacts/${id}?properties=${properties}`,\n        {\n          headers: {\n            'Authorization': `Bearer ${this.config.credentials.apiKey}`,\n          },\n        }\n      );\n\n      await this.delay();\n\n      if (!response.ok) {\n        const error = await response.text();\n        return { success: false, error: `HubSpot get error: ${error}` };\n      }\n\n      const data = await response.json();\n      const props = data.properties;\n      \n      const contact: CRMContact = {\n        id: data.id,\n        firstName: props.firstname,\n        lastName: props.lastname,\n        email: props.email,\n        company: props.company,\n        phone: props.phone,\n        jobTitle: props.jobtitle,\n        address: props.address,\n        city: props.city,\n        state: props.state,\n        country: props.country,\n        postalCode: props.zip,\n        leadSource: props.hs_lead_source,\n        leadScore: props.hubspotscore,\n      };\n\n      return { success: true, contact };\n    }, { operation: 'getContact', contactId: id });\n  }\n\n  async searchContacts(email: string): Promise<{ success: boolean; contacts?: CRMContact[]; error?: string }> {\n    return this.withErrorHandling(async () => {\n      const searchRequest = {\n        filterGroups: [\n          {\n            filters: [\n              {\n                propertyName: 'email',\n                operator: 'EQ',\n                value: email,\n              },\n            ],\n          },\n        ],\n        properties: ['email', 'firstname', 'lastname', 'company', 'phone', 'jobtitle', 'hs_lead_source', 'hubspotscore'],\n      };\n\n      const response = await fetch(`${this.baseUrl}/crm/v3/objects/contacts/search`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.config.credentials.apiKey}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(searchRequest),\n      });\n\n      await this.delay();\n\n      if (!response.ok) {\n        const error = await response.text();\n        return { success: false, error: `HubSpot search error: ${error}` };\n      }\n\n      const data = await response.json();\n      const contacts: CRMContact[] = data.results.map((result: any) => {\n        const props = result.properties;\n        return {\n          id: result.id,\n          firstName: props.firstname,\n          lastName: props.lastname,\n          email: props.email,\n          company: props.company,\n          phone: props.phone,\n          jobTitle: props.jobtitle,\n          leadSource: props.hs_lead_source,\n          leadScore: props.hubspotscore,\n        };\n      });\n\n      return { success: true, contacts };\n    }, { operation: 'searchContacts', contactId: email });\n  }\n\n  async createDeal(deal: CRMDeal): Promise<{ success: boolean; id?: string; error?: string }> {\n    return this.withErrorHandling(async () => {\n      const hubspotDeal = {\n        properties: {\n          dealname: deal.title,\n          amount: deal.amount?.toString(),\n          dealstage: deal.stage,\n          closedate: deal.closeDate?.toISOString(),\n          hubspot_owner_id: deal.contactId,\n          pipeline: 'default',\n          dealtype: 'newbusiness',\n        },\n        associations: [\n          {\n            to: { id: deal.contactId },\n            types: [\n              {\n                associationCategory: 'HUBSPOT_DEFINED',\n                associationTypeId: 3, // Deal to Contact association\n              },\n            ],\n          },\n        ],\n      };\n\n      const response = await fetch(`${this.baseUrl}/crm/v3/objects/deals`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.config.credentials.apiKey}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(hubspotDeal),\n      });\n\n      await this.delay();\n\n      if (!response.ok) {\n        const error = await response.text();\n        return { success: false, error: `HubSpot deal error: ${error}` };\n      }\n\n      const result = await response.json();\n      return { success: true, id: result.id };\n    }, { operation: 'createDeal', contactId: deal.contactId });\n  }\n\n  async createActivity(activity: CRMActivity): Promise<{ success: boolean; id?: string; error?: string }> {\n    return this.withErrorHandling(async () => {\n      const hubspotActivity = {\n        properties: {\n          hs_task_subject: activity.subject,\n          hs_task_body: activity.description,\n          hs_task_status: activity.completed ? 'COMPLETED' : 'NOT_STARTED',\n          hs_task_priority: 'MEDIUM',\n          hs_task_type: activity.type,\n          hs_timestamp: activity.dueDate?.toISOString(),\n        },\n        associations: [\n          {\n            to: { id: activity.contactId },\n            types: [\n              {\n                associationCategory: 'HUBSPOT_DEFINED',\n                associationTypeId: 204, // Task to Contact association\n              },\n            ],\n          },\n        ],\n      };\n\n      const response = await fetch(`${this.baseUrl}/crm/v3/objects/tasks`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.config.credentials.apiKey}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(hubspotActivity),\n      });\n\n      await this.delay();\n\n      if (!response.ok) {\n        const error = await response.text();\n        return { success: false, error: `HubSpot activity error: ${error}` };\n      }\n\n      const result = await response.json();\n      return { success: true, id: result.id };\n    }, { operation: 'createActivity', contactId: activity.contactId });\n  }\n\n  async testConnection(): Promise<{ success: boolean; error?: string }> {\n    return this.withErrorHandling(async () => {\n      const response = await fetch(`${this.baseUrl}/crm/v3/objects/contacts?limit=1`, {\n        headers: {\n          'Authorization': `Bearer ${this.config.credentials.apiKey}`,\n        },\n      });\n\n      if (!response.ok) {\n        return { success: false, error: `Connection test failed: ${response.statusText}` };\n      }\n\n      return { success: true };\n    }, { operation: 'testConnection' });\n  }\n}\n\n// CRM Integration Manager\nexport class CRMIntegrationManager {\n  private connectors: Map<string, CRMConnector> = new Map();\n\n  async addIntegration(userId: string, config: CRMIntegrationConfig): Promise<{ success: boolean; error?: string }> {\n    try {\n      let connector: CRMConnector;\n\n      switch (config.platform) {\n        case 'salesforce':\n          connector = new SalesforceConnector(config);\n          break;\n        case 'hubspot':\n          connector = new HubSpotConnector(config);\n          break;\n        default:\n          return { success: false, error: `Unsupported CRM platform: ${config.platform}` };\n      }\n\n      // Test authentication\n      const authResult = await connector.authenticate();\n      if (!authResult) {\n        return { success: false, error: 'Authentication failed' };\n      }\n\n      // Test connection\n      const testResult = await connector.testConnection();\n      if (!testResult.success) {\n        return { success: false, error: testResult.error };\n      }\n\n      // Store configuration (encrypted)\n      await prisma.user.update({\n        where: { id: userId },\n        data: {\n          crmIntegrations: {\n            [config.platform]: {\n              ...config,\n              credentials: '***encrypted***', // In production, encrypt the credentials\n              connectedAt: new Date().toISOString(),\n              status: 'active',\n            },\n          },\n        },\n      });\n\n      this.connectors.set(`${userId}-${config.platform}`, connector);\n\n      logger.info(`CRM integration added: ${config.platform} for user ${userId}`);\n      return { success: true };\n\n    } catch (error) {\n      logger.error('Error adding CRM integration:', error);\n      return { success: false, error: 'Failed to add CRM integration' };\n    }\n  }\n\n  async syncContact(userId: string, platform: string, contact: CRMContact): Promise<{ success: boolean; crmId?: string; error?: string }> {\n    try {\n      const connector = this.connectors.get(`${userId}-${platform}`);\n      if (!connector) {\n        return { success: false, error: 'CRM integration not found' };\n      }\n\n      // Check if contact already exists\n      const searchResult = await connector.searchContacts(contact.email);\n      if (!searchResult.success) {\n        return { success: false, error: searchResult.error };\n      }\n\n      if (searchResult.contacts && searchResult.contacts.length > 0) {\n        // Update existing contact\n        const existingContact = searchResult.contacts[0];\n        const updateResult = await connector.updateContact(existingContact.id!, contact);\n        return { \n          success: updateResult.success, \n          crmId: existingContact.id,\n          error: updateResult.error \n        };\n      } else {\n        // Create new contact\n        const createResult = await connector.createContact(contact);\n        return createResult;\n      }\n\n    } catch (error) {\n      logger.error('Error syncing contact to CRM:', error);\n      return { success: false, error: 'Failed to sync contact' };\n    }\n  }\n\n  async createDealFromLeadPulse(\n    userId: string, \n    platform: string, \n    visitorId: string, \n    dealData: Partial<CRMDeal>\n  ): Promise<{ success: boolean; dealId?: string; error?: string }> {\n    try {\n      const connector = this.connectors.get(`${userId}-${platform}`);\n      if (!connector) {\n        return { success: false, error: 'CRM integration not found' };\n      }\n\n      // Get visitor data\n      const visitor = await prisma.leadPulseVisitor.findUnique({\n        where: { id: visitorId },\n        include: { touchpoints: true }\n      });\n\n      if (!visitor || !visitor.contactId) {\n        return { success: false, error: 'Visitor not found or not converted to contact' };\n      }\n\n      // Get contact data\n      const contact = await prisma.contact.findUnique({\n        where: { id: visitor.contactId }\n      });\n\n      if (!contact) {\n        return { success: false, error: 'Contact not found' };\n      }\n\n      // Sync contact to CRM first\n      const contactSync = await this.syncContact(userId, platform, {\n        email: contact.email,\n        firstName: contact.firstName || undefined,\n        lastName: contact.lastName || undefined,\n        company: contact.company || undefined,\n        phone: contact.phone || undefined,\n        leadScore: visitor.score || undefined,\n        leadSource: 'LeadPulse',\n      });\n\n      if (!contactSync.success || !contactSync.crmId) {\n        return { success: false, error: 'Failed to sync contact to CRM' };\n      }\n\n      // Create deal\n      const deal: CRMDeal = {\n        contactId: contactSync.crmId,\n        title: dealData.title || `LeadPulse Opportunity - ${contact.firstName} ${contact.lastName}`,\n        amount: dealData.amount,\n        stage: dealData.stage || 'Qualified',\n        closeDate: dealData.closeDate || new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),\n        probability: dealData.probability || Math.min(visitor.score || 50, 90),\n        description: `Generated from LeadPulse visitor ${visitorId}. Engagement score: ${visitor.score}. ${visitor.touchpoints.length} touchpoints recorded.`,\n      };\n\n      const result = await connector.createDeal(deal);\n      \n      if (result.success) {\n        // Log the deal creation\n        await prisma.leadPulseAuditLog.create({\n          data: {\n            userId,\n            action: 'CREATE',\n            resource: 'crm_deal',\n            resourceId: result.id!,\n            details: { visitorId, platform, dealData },\n          },\n        });\n      }\n\n      return result;\n\n    } catch (error) {\n      logger.error('Error creating CRM deal:', error);\n      return { success: false, error: 'Failed to create deal' };\n    }\n  }\n\n  getConnector(userId: string, platform: string): CRMConnector | undefined {\n    return this.connectors.get(`${userId}-${platform}`);\n  }\n}\n\n// Export singleton instance\nexport const crmIntegrationManager = new CRMIntegrationManager();"],"names":["CRMConnector","CRMIntegrationManager","HubSpotConnector","SalesforceConnector","crmIntegrationManager","constructor","config","rateLimitDelay","delay","Promise","resolve","setTimeout","withErrorHandling","operation","context","error","leadPulseErrorHandler","handleError","endpoint","platform","additionalData","LeadPulseErrorType","EXTERNAL_API_ERROR","baseUrl","credentials","instanceUrl","authenticate","response","fetch","method","headers","body","URLSearchParams","grant_type","client_id","clientId","client_secret","clientSecret","refresh_token","refreshToken","ok","Error","statusText","data","json","accessToken","access_token","instance_url","logger","info","createContact","contact","salesforceContact","FirstName","firstName","LastName","lastName","Email","email","Company","company","Phone","phone","Title","jobTitle","MailingStreet","address","MailingCity","city","MailingState","state","MailingCountry","country","MailingPostalCode","postalCode","LeadSource","leadSource","mappings","Lead_Score__c","leadScore","JSON","stringify","text","success","result","id","contactId","updateContact","updates","getContact","Id","searchContacts","query","encodedQuery","encodeURIComponent","contacts","records","map","record","createDeal","deal","opportunity","Name","title","ContactId","Amount","amount","StageName","stage","CloseDate","closeDate","toISOString","split","Date","now","Probability","probability","Description","description","createActivity","activity","task","WhoId","Subject","subject","ActivityDate","dueDate","Status","completed","Type","type","Priority","testConnection","apiKey","hubspotContact","properties","firstname","lastname","jobtitle","zip","hs_lead_source","hubspotscore","join","props","searchRequest","filterGroups","filters","propertyName","operator","value","results","hubspotDeal","dealname","toString","dealstage","closedate","hubspot_owner_id","pipeline","dealtype","associations","to","types","associationCategory","associationTypeId","hubspotActivity","hs_task_subject","hs_task_body","hs_task_status","hs_task_priority","hs_task_type","hs_timestamp","addIntegration","userId","connector","authResult","testResult","prisma","user","update","where","crmIntegrations","connectedAt","status","connectors","set","syncContact","get","searchResult","length","existingContact","updateResult","crmId","createResult","createDealFromLeadPulse","visitorId","dealData","visitor","leadPulseVisitor","findUnique","include","touchpoints","contactSync","undefined","score","Math","min","leadPulseAuditLog","create","action","resource","resourceId","details","getConnector","Map"],"mappings":"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"}