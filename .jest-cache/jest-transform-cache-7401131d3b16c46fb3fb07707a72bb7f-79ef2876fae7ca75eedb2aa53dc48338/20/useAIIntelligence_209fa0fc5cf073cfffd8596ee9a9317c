097e6b8e44fe9c9ffe2eea1b5e72da9d
/**
 * AI Intelligence CRUD Hooks
 * ==========================
 * Complete CRUD operations for all AI Intelligence sections
 */ 'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    useAIIntelligenceOverview: function() {
        return useAIIntelligenceOverview;
    },
    useAITools: function() {
        return useAITools;
    },
    useChatHistory: function() {
        return useChatHistory;
    },
    useContentAnalysis: function() {
        return useContentAnalysis;
    },
    useCustomerSegments: function() {
        return useCustomerSegments;
    }
});
const _react = require("react");
const _sonner = require("sonner");
// Generic CRUD hook
function useAICRUD(type, userId = 'default') {
    const [data, setData] = (0, _react.useState)([]);
    const [loading, setLoading] = (0, _react.useState)(false);
    const [error, setError] = (0, _react.useState)(null);
    // Fetch records
    const fetchData = (0, _react.useCallback)(async (limit = 10)=>{
        setLoading(true);
        setError(null);
        try {
            const response = await fetch(`/api/ai/intelligence?type=${type}&userId=${userId}&limit=${limit}`);
            if (!response.ok) throw new Error('Failed to fetch data');
            const result = await response.json();
            setData(result.data || []);
        } catch (err) {
            const errorMsg = err instanceof Error ? err.message : 'Unknown error';
            setError(errorMsg);
            _sonner.toast.error(`Failed to load ${type} data`);
        } finally{
            setLoading(false);
        }
    }, [
        type,
        userId
    ]);
    // Create record
    const create = (0, _react.useCallback)(async (newRecord)=>{
        setLoading(true);
        try {
            const response = await fetch('/api/ai/intelligence', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    type,
                    data: newRecord,
                    userId
                })
            });
            if (!response.ok) throw new Error('Failed to create record');
            const result = await response.json();
            setData((prev)=>[
                    result.data,
                    ...prev
                ]);
            _sonner.toast.success(result.message);
            return result.data;
        } catch (err) {
            const errorMsg = err instanceof Error ? err.message : 'Unknown error';
            setError(errorMsg);
            _sonner.toast.error(`Failed to create ${type}`);
            throw err;
        } finally{
            setLoading(false);
        }
    }, [
        type,
        userId
    ]);
    // Update record
    const update = (0, _react.useCallback)(async (id, updates)=>{
        setLoading(true);
        try {
            const response = await fetch('/api/ai/intelligence', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    id,
                    type,
                    data: updates,
                    userId
                })
            });
            if (!response.ok) throw new Error('Failed to update record');
            const result = await response.json();
            setData((prev)=>prev.map((item)=>item.id === id ? result.data : item));
            _sonner.toast.success(result.message);
            return result.data;
        } catch (err) {
            const errorMsg = err instanceof Error ? err.message : 'Unknown error';
            setError(errorMsg);
            _sonner.toast.error(`Failed to update ${type}`);
            throw err;
        } finally{
            setLoading(false);
        }
    }, [
        type,
        userId
    ]);
    // Delete record
    const remove = (0, _react.useCallback)(async (id)=>{
        setLoading(true);
        try {
            const response = await fetch(`/api/ai/intelligence?id=${id}&type=${type}&userId=${userId}`, {
                method: 'DELETE'
            });
            if (!response.ok) throw new Error('Failed to delete record');
            const result = await response.json();
            setData((prev)=>prev.filter((item)=>item.id !== id));
            _sonner.toast.success(result.message);
        } catch (err) {
            const errorMsg = err instanceof Error ? err.message : 'Unknown error';
            setError(errorMsg);
            _sonner.toast.error(`Failed to delete ${type}`);
            throw err;
        } finally{
            setLoading(false);
        }
    }, [
        type,
        userId
    ]);
    return {
        data,
        loading,
        error,
        fetchData,
        create,
        update,
        remove,
        refresh: fetchData
    };
}
function useContentAnalysis(userId) {
    const crud = useAICRUD('content', userId);
    // Auto-fetch on mount
    (0, _react.useEffect)(()=>{
        crud.fetchData();
    }, [
        crud.fetchData
    ]);
    // Content-specific methods
    const analyzeAndSave = (0, _react.useCallback)(async (title, content)=>{
        // First analyze the content using Supreme-AI
        const analysisResponse = await fetch('/api/ai/supreme-v3', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                type: 'content',
                userId,
                content
            })
        });
        if (!analysisResponse.ok) throw new Error('Analysis failed');
        const analysis = await analysisResponse.json();
        // Then save the analysis
        return crud.create({
            title,
            content,
            supremeScore: analysis.supremeScore || 0,
            sentiment: analysis.data?.sentiment || 0,
            readability: analysis.data?.readability || 0,
            engagement: analysis.data?.engagement || 0,
            analysis: analysis.data || {},
            tags: analysis.data?.categories || []
        });
    }, [
        crud.create,
        userId
    ]);
    return {
        ...crud,
        analyzeAndSave,
        analyses: crud.data
    };
}
function useCustomerSegments(userId) {
    const crud = useAICRUD('customer', userId);
    (0, _react.useEffect)(()=>{
        crud.fetchData();
    }, [
        crud.fetchData
    ]);
    // Customer-specific methods
    const createSegmentFromAnalysis = (0, _react.useCallback)(async (name, description, customers)=>{
        // First analyze customers using Supreme-AI
        const analysisResponse = await fetch('/api/ai/supreme-v3', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                type: 'customer',
                userId,
                customers
            })
        });
        if (!analysisResponse.ok) throw new Error('Customer analysis failed');
        const analysis = await analysisResponse.json();
        // Create segment from analysis
        return crud.create({
            name,
            description,
            criteria: analysis.data?.segmentCriteria || {},
            customerCount: customers.length,
            churnRisk: analysis.data?.averageChurnRisk || 0,
            lifetimeValue: analysis.data?.totalLifetimeValue || 0,
            tags: analysis.data?.tags || []
        });
    }, [
        crud.create,
        userId
    ]);
    return {
        ...crud,
        createSegmentFromAnalysis,
        segments: crud.data
    };
}
function useChatHistory(userId) {
    const crud = useAICRUD('chat', userId);
    (0, _react.useEffect)(()=>{
        crud.fetchData(50); // Load more chat history
    }, [
        crud.fetchData
    ]);
    // Chat-specific methods
    const saveChat = (0, _react.useCallback)(async (question, answer, context, confidence, sessionId)=>{
        return crud.create({
            userId: userId || 'default',
            question,
            answer,
            context,
            confidence,
            sessionId
        });
    }, [
        crud.create,
        userId
    ]);
    const clearHistory = (0, _react.useCallback)(async ()=>{
        const deletePromises = crud.data.map((chat)=>chat.id ? crud.remove(chat.id) : Promise.resolve());
        await Promise.all(deletePromises);
    }, [
        crud.data,
        crud.remove
    ]);
    return {
        ...crud,
        saveChat,
        clearHistory,
        chats: crud.data
    };
}
function useAITools(userId) {
    const crud = useAICRUD('tool', userId);
    (0, _react.useEffect)(()=>{
        crud.fetchData();
    }, [
        crud.fetchData
    ]);
    // Tool-specific methods
    const createTool = (0, _react.useCallback)(async (name, description, category, config = {}, isPublic = false)=>{
        return crud.create({
            name,
            description,
            category,
            config,
            isPublic,
            usage: {
                count: 0,
                lastUsed: null
            }
        });
    }, [
        crud.create
    ]);
    const useTool = (0, _react.useCallback)(async (toolId)=>{
        const tool = crud.data.find((t)=>t.id === toolId);
        if (!tool) throw new Error('Tool not found');
        const newUsage = {
            ...tool.usage,
            count: (tool.usage?.count || 0) + 1,
            lastUsed: new Date().toISOString()
        };
        return crud.update(toolId, {
            usage: newUsage
        });
    }, [
        crud.data,
        crud.update
    ]);
    return {
        ...crud,
        createTool,
        useTool,
        tools: crud.data
    };
}
function useAIIntelligenceOverview(userId, timeRange = 'all') {
    const [overview, setOverview] = (0, _react.useState)({
        counts: {
            contentCount: 0,
            customerCount: 0,
            chatCount: 0,
            toolCount: 0
        },
        trends: {
            contentGrowth: 0,
            customerGrowth: 0,
            chatGrowth: 0,
            toolGrowth: 0
        },
        aiInsights: [],
        dataSource: 'hybrid',
        confidence: 0,
        lastUpdated: '',
        recent: []
    });
    const [loading, setLoading] = (0, _react.useState)(false);
    const fetchOverview = (0, _react.useCallback)(async ()=>{
        setLoading(true);
        try {
            const params = new URLSearchParams();
            if (userId) params.append('userId', userId);
            params.append('timeRange', timeRange);
            const response = await fetch(`/api/ai/intelligence?${params}`);
            if (!response.ok) {
                throw new Error('Failed to fetch AI Intelligence overview');
            }
            const result = await response.json();
            if (result.success) {
                setOverview({
                    ...result.data,
                    recent: result.data.recent || []
                });
                _sonner.toast.success('AI Intelligence data loaded successfully');
            } else {
                throw new Error(result.error || 'Failed to load data');
            }
        } catch (error) {
            console.error('AI Intelligence fetch error:', error);
            _sonner.toast.error('Failed to load AI Intelligence overview');
            // Fallback to demo data
            setOverview({
                counts: {
                    contentCount: 5,
                    customerCount: 5,
                    chatCount: 12,
                    toolCount: 8
                },
                trends: {
                    contentGrowth: 12.0,
                    customerGrowth: 8.0,
                    chatGrowth: 24.0,
                    toolGrowth: 16.0
                },
                aiInsights: [
                    {
                        type: 'insight',
                        priority: 'medium',
                        title: 'Nigeria Market Dominance',
                        description: '60% of customers are from Nigeria. Consider expanding to other West African markets.',
                        actionable: true,
                        confidence: 0.85
                    }
                ],
                dataSource: 'demo',
                confidence: 0.75,
                lastUpdated: new Date().toISOString(),
                recent: []
            });
        } finally{
            setLoading(false);
        }
    }, [
        userId,
        timeRange
    ]);
    (0, _react.useEffect)(()=>{
        fetchOverview();
    }, [
        fetchOverview
    ]);
    return {
        overview,
        loading,
        refresh: fetchOverview
    };
}

//# sourceMappingURL=data:application/json;base64,