{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/lib/email-providers/base-provider.ts"],"sourcesContent":["// Base email provider interface for extensibility\nexport interface EmailResult {\n  success: boolean;\n  messageId?: string;\n  error?: {\n    message: string;\n    code?: string;\n  };\n}\n\nexport interface EmailOptions {\n  to: string | string[];\n  from: string;\n  fromName?: string;\n  subject: string;\n  html: string;\n  text?: string;\n  replyTo?: string;\n  attachments?: EmailAttachment[];\n  metadata?: Record<string, any>;\n}\n\nexport interface EmailAttachment {\n  filename: string;\n  content: Buffer | string;\n  contentType?: string;\n}\n\nexport interface EmailStats {\n  sent: number;\n  delivered: number;\n  bounced: number;\n  opened: number;\n  clicked: number;\n  unsubscribed: number;\n  complained: number;\n}\n\nexport interface DomainVerification {\n  verified: boolean;\n  spfRecord?: string;\n  dkimRecord?: string;\n  dmarcRecord?: string;\n  mxRecord?: string;\n  status: 'verified' | 'pending' | 'failed';\n}\n\nexport interface EmailProvider {\n  name: string;\n  sendEmail(options: EmailOptions): Promise<EmailResult>;\n  validateConfig(): boolean;\n  getStats?(period?: { start: Date; end: Date }): Promise<EmailStats>;\n  verifyDomain?(domain: string): Promise<DomainVerification>;\n  setupWebhook?(url: string): Promise<void>;\n}\n\nexport abstract class BaseEmailProvider implements EmailProvider {\n  abstract name: string;\n  \n  abstract sendEmail(options: EmailOptions): Promise<EmailResult>;\n  \n  abstract validateConfig(): boolean;\n\n  // Enhanced email validation for various formats\n  validateEmail(email: string): boolean {\n    if (!email || typeof email !== 'string') {\n      return false;\n    }\n    \n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n\n  // Validate multiple emails\n  validateEmails(emails: string | string[]): boolean {\n    const emailArray = Array.isArray(emails) ? emails : [emails];\n    return emailArray.every(email => this.validateEmail(email));\n  }\n\n  // Sanitize email content\n  sanitizeContent(content: string): string {\n    if (!content) return '';\n    \n    // Remove potentially harmful scripts and tags\n    return content\n      .replace(/<script[^>]*>.*?<\\/script>/gis, '')\n      .replace(/<iframe[^>]*>.*?<\\/iframe>/gis, '')\n      .replace(/<object[^>]*>.*?<\\/object>/gis, '')\n      .replace(/<embed[^>]*>.*?<\\/embed>/gis, '')\n      .replace(/javascript:/gi, '')\n      .replace(/on\\w+\\s*=/gi, '');\n  }\n\n  // Generate plain text from HTML\n  generatePlainText(html: string): string {\n    return html\n      .replace(/<style[^>]*>.*?<\\/style>/gis, '')\n      .replace(/<script[^>]*>.*?<\\/script>/gis, '')\n      .replace(/<[^>]+>/g, '')\n      .replace(/&nbsp;/g, ' ')\n      .replace(/&amp;/g, '&')\n      .replace(/&lt;/g, '<')\n      .replace(/&gt;/g, '>')\n      .replace(/&quot;/g, '\"')\n      .replace(/&#39;/g, \"'\")\n      .replace(/\\s+/g, ' ')\n      .trim();\n  }\n\n  // Add unsubscribe link if missing\n  addUnsubscribeLink(html: string, email: string): string {\n    if (html.includes('unsubscribe')) {\n      return html;\n    }\n\n    const unsubscribeFooter = `\n    <div style=\"margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; font-size: 11px; color: #999; text-align: center;\">\n      <p>You received this email because you are subscribed to our communications. \n      <a href=\"mailto:unsubscribe@marketsage.africa?subject=Unsubscribe&body=Please unsubscribe ${encodeURIComponent(email)}\" style=\"color: #666;\">Unsubscribe</a> | \n      <a href=\"mailto:support@marketsage.africa\" style=\"color: #666;\">Contact Support</a></p>\n    </div>\n    `;\n\n    if (html.includes('</body>')) {\n      return html.replace('</body>', unsubscribeFooter + '</body>');\n    } else {\n      return html + unsubscribeFooter;\n    }\n  }\n\n  // Basic stats implementation (can be overridden)\n  async getStats(period?: { start: Date; end: Date }): Promise<EmailStats> {\n    return {\n      sent: 0,\n      delivered: 0,\n      bounced: 0,\n      opened: 0,\n      clicked: 0,\n      unsubscribed: 0,\n      complained: 0,\n    };\n  }\n}"],"names":["BaseEmailProvider","validateEmail","email","emailRegex","test","validateEmails","emails","emailArray","Array","isArray","every","sanitizeContent","content","replace","generatePlainText","html","trim","addUnsubscribeLink","includes","unsubscribeFooter","encodeURIComponent","getStats","period","sent","delivered","bounced","opened","clicked","unsubscribed","complained"],"mappings":"AAAA,kDAAkD;;;;;+BAwD5BA;;;eAAAA;;;AAAf,MAAeA;IAOpB,gDAAgD;IAChDC,cAAcC,KAAa,EAAW;QACpC,IAAI,CAACA,SAAS,OAAOA,UAAU,UAAU;YACvC,OAAO;QACT;QAEA,MAAMC,aAAa;QACnB,OAAOA,WAAWC,IAAI,CAACF;IACzB;IAEA,2BAA2B;IAC3BG,eAAeC,MAAyB,EAAW;QACjD,MAAMC,aAAaC,MAAMC,OAAO,CAACH,UAAUA,SAAS;YAACA;SAAO;QAC5D,OAAOC,WAAWG,KAAK,CAACR,CAAAA,QAAS,IAAI,CAACD,aAAa,CAACC;IACtD;IAEA,yBAAyB;IACzBS,gBAAgBC,OAAe,EAAU;QACvC,IAAI,CAACA,SAAS,OAAO;QAErB,8CAA8C;QAC9C,OAAOA,QACJC,OAAO,CAAC,iCAAiC,IACzCA,OAAO,CAAC,iCAAiC,IACzCA,OAAO,CAAC,iCAAiC,IACzCA,OAAO,CAAC,+BAA+B,IACvCA,OAAO,CAAC,iBAAiB,IACzBA,OAAO,CAAC,eAAe;IAC5B;IAEA,gCAAgC;IAChCC,kBAAkBC,IAAY,EAAU;QACtC,OAAOA,KACJF,OAAO,CAAC,+BAA+B,IACvCA,OAAO,CAAC,iCAAiC,IACzCA,OAAO,CAAC,YAAY,IACpBA,OAAO,CAAC,WAAW,KACnBA,OAAO,CAAC,UAAU,KAClBA,OAAO,CAAC,SAAS,KACjBA,OAAO,CAAC,SAAS,KACjBA,OAAO,CAAC,WAAW,KACnBA,OAAO,CAAC,UAAU,KAClBA,OAAO,CAAC,QAAQ,KAChBG,IAAI;IACT;IAEA,kCAAkC;IAClCC,mBAAmBF,IAAY,EAAEb,KAAa,EAAU;QACtD,IAAIa,KAAKG,QAAQ,CAAC,gBAAgB;YAChC,OAAOH;QACT;QAEA,MAAMI,oBAAoB,CAAC;;;gGAGiE,EAAEC,mBAAmBlB,OAAO;;;IAGxH,CAAC;QAED,IAAIa,KAAKG,QAAQ,CAAC,YAAY;YAC5B,OAAOH,KAAKF,OAAO,CAAC,WAAWM,oBAAoB;QACrD,OAAO;YACL,OAAOJ,OAAOI;QAChB;IACF;IAEA,iDAAiD;IACjD,MAAME,SAASC,MAAmC,EAAuB;QACvE,OAAO;YACLC,MAAM;YACNC,WAAW;YACXC,SAAS;YACTC,QAAQ;YACRC,SAAS;YACTC,cAAc;YACdC,YAAY;QACd;IACF;AACF"}