{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/components/leadpulse/AIIntelligenceDashboard.tsx"],"sourcesContent":["/**\n * LeadPulse AI Intelligence Dashboard\n * \n * Advanced AI-powered business intelligence interface\n */\n\n'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Progress } from '@/components/ui/progress';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { \n  Brain,\n  TrendingUp,\n  TrendingDown,\n  Zap,\n  Target,\n  Users,\n  AlertTriangle,\n  Lightbulb,\n  BarChart3,\n  Activity,\n  Eye,\n  Filter,\n  RefreshCw,\n  Sparkles,\n  ArrowRight,\n  CheckCircle2\n} from 'lucide-react';\nimport { useSupremeAI } from '@/hooks/useSupremeAI';\nimport { useAIIntelligenceOverview } from '@/hooks/useAIIntelligence';\nimport { useSession } from 'next-auth/react';\nimport { toast } from 'sonner';\n\ninterface AIInsight {\n  id: string;\n  type: 'PERFORMANCE' | 'OPPORTUNITY' | 'PREDICTION' | 'OPTIMIZATION' | 'ALERT';\n  title: string;\n  description: string;\n  importance: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';\n  confidence: number;\n  actionable: boolean;\n  recommendations: string[];\n  metrics?: Record<string, any>;\n  createdAt: string;\n}\n\ninterface VisitorProfile {\n  id: string;\n  behaviorPattern: string;\n  engagementLevel: 'LOW' | 'MEDIUM' | 'HIGH' | 'VERY_HIGH';\n  conversionProbability: number;\n  recommendedActions: string[];\n  segments: string[];\n  riskFactors: string[];\n}\n\ninterface IntelligenceData {\n  insights: AIInsight[];\n  predictions: any[];\n  recommendations: string[];\n  score: number;\n  generatedAt: string;\n}\n\nexport function AIIntelligenceDashboard() {\n  const { data: session } = useSession();\n  const [intelligenceData, setIntelligenceData] = useState<IntelligenceData | null>(null);\n  const [visitorProfiles, setVisitorProfiles] = useState<VisitorProfile[]>([]);\n  const [timeRange, setTimeRange] = useState('30d');\n  const [activeTab, setActiveTab] = useState('overview');\n  const [refreshing, setRefreshing] = useState(false);\n  \n  // Use existing hooks\n  const { overview, loading: overviewLoading, refresh: refreshOverview } = useAIIntelligenceOverview(\n    session?.user?.id,\n    timeRange as '24h' | '7d' | '30d' | 'all'\n  );\n  \n  const loading = overviewLoading;\n\n  // Fetch LeadPulse-specific data using Supreme AI\n  const fetchLeadPulseData = async () => {\n    if (!session?.user?.id) return;\n    \n    try {\n      setRefreshing(true);\n      \n      const [intelligenceRes, visitorsRes] = await Promise.all([\n        fetch(`/api/leadpulse/ai/intelligence?type=overview&timeRange=${timeRange}`),\n        fetch(`/api/leadpulse/ai/intelligence?type=visitor-behavior`)\n      ]);\n\n      if (intelligenceRes.ok && visitorsRes.ok) {\n        const intelligenceData = await intelligenceRes.json();\n        const visitorsData = await visitorsRes.json();\n        \n        setIntelligenceData(intelligenceData.intelligence);\n        setVisitorProfiles(visitorsData.visitorProfiles || []);\n      }\n    } catch (error) {\n      console.error('Error fetching LeadPulse AI intelligence:', error);\n      toast.error('Failed to load LeadPulse AI data');\n    } finally {\n      setRefreshing(false);\n    }\n  };\n\n  useEffect(() => {\n    if (session?.user?.id) {\n      fetchLeadPulseData();\n    }\n  }, [timeRange, session?.user?.id]);\n\n  const refreshData = async () => {\n    await Promise.all([\n      refreshOverview(),\n      fetchLeadPulseData()\n    ]);\n  };\n\n  const getInsightIcon = (type: string) => {\n    switch (type) {\n      case 'PERFORMANCE': return <BarChart3 className=\"w-4 h-4\" />;\n      case 'OPPORTUNITY': return <Lightbulb className=\"w-4 h-4\" />;\n      case 'PREDICTION': return <TrendingUp className=\"w-4 h-4\" />;\n      case 'OPTIMIZATION': return <Target className=\"w-4 h-4\" />;\n      case 'ALERT': return <AlertTriangle className=\"w-4 h-4\" />;\n      default: return <Brain className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getImportanceColor = (importance: string) => {\n    switch (importance) {\n      case 'CRITICAL': return 'destructive';\n      case 'HIGH': return 'secondary';\n      case 'MEDIUM': return 'outline';\n      default: return 'outline';\n    }\n  };\n\n  const getEngagementColor = (level: string) => {\n    switch (level) {\n      case 'VERY_HIGH': return 'text-green-600';\n      case 'HIGH': return 'text-blue-600';\n      case 'MEDIUM': return 'text-yellow-600';\n      default: return 'text-gray-600';\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-bold\">AI Intelligence</h2>\n            <p className=\"text-gray-600\">Loading AI-powered insights...</p>\n          </div>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          {[...Array(3)].map((_, i) => (\n            <Card key={i}>\n              <CardHeader>\n                <div className=\"h-4 bg-gray-200 rounded animate-pulse\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-8 bg-gray-200 rounded animate-pulse mb-2\" />\n                <div className=\"h-3 bg-gray-200 rounded animate-pulse\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  // Merge data from both sources - AI Intelligence Overview and LeadPulse specific data\n  const mergedIntelligenceData = intelligenceData || {\n    insights: overview.aiInsights.map(insight => ({\n      id: `ai-${Date.now()}-${Math.random()}`,\n      type: insight.type.toUpperCase() as 'PERFORMANCE' | 'OPPORTUNITY' | 'PREDICTION' | 'OPTIMIZATION' | 'ALERT',\n      title: insight.title,\n      description: insight.description,\n      importance: insight.priority.toUpperCase() as 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL',\n      confidence: insight.confidence * 100,\n      actionable: insight.actionable,\n      recommendations: [insight.description],\n      createdAt: new Date().toISOString()\n    })),\n    predictions: [],\n    recommendations: ['Leverage Supreme AI v3 for enhanced insights', 'Integrate RAG engine for knowledge-grounded analysis'],\n    score: overview.confidence * 100,\n    generatedAt: overview.lastUpdated\n  };\n\n  if (!mergedIntelligenceData && !loading) {\n    return (\n      <Card>\n        <CardContent className=\"p-8 text-center\">\n          <Brain className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold mb-2\">AI Intelligence Unavailable</h3>\n          <p className=\"text-gray-600 mb-4\">\n            Unable to load AI insights. Please try again later.\n          </p>\n          <Button onClick={refreshData}>\n            <RefreshCw className=\"w-4 h-4 mr-2\" />\n            Retry\n          </Button>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n        <div>\n          <h2 className=\"text-2xl font-bold flex items-center gap-2\">\n            <Brain className=\"w-6 h-6 text-purple-600\" />\n            AI Intelligence\n          </h2>\n          <p className=\"text-gray-600\">\n            AI-powered insights to optimize your business performance\n          </p>\n        </div>\n        \n        <div className=\"flex items-center space-x-4\">\n          <Select value={timeRange} onValueChange={setTimeRange}>\n            <SelectTrigger className=\"w-36\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"7d\">Last 7 days</SelectItem>\n              <SelectItem value=\"30d\">Last 30 days</SelectItem>\n              <SelectItem value=\"90d\">Last 90 days</SelectItem>\n            </SelectContent>\n          </Select>\n          \n          <Button \n            variant=\"outline\" \n            onClick={refreshData}\n            disabled={refreshing}\n          >\n            <RefreshCw className={`w-4 h-4 mr-2 ${refreshing ? 'animate-spin' : ''}`} />\n            Refresh\n          </Button>\n        </div>\n      </div>\n\n      {/* Intelligence Score */}\n      <Card className=\"bg-gradient-to-r from-purple-50 to-blue-50 dark:from-purple-950/20 dark:to-blue-950/20\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Sparkles className=\"w-5 h-5 text-purple-600\" />\n            Intelligence Score\n          </CardTitle>\n          <CardDescription>\n            Overall business intelligence health score\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-sm font-medium\">Current Score</span>\n                <span className=\"text-2xl font-bold text-purple-600\">\n                  {Math.round(mergedIntelligenceData?.score || overview.confidence * 100)}/100\n                </span>\n              </div>\n              <Progress \n                value={mergedIntelligenceData?.score || overview.confidence * 100} \n                className=\"h-3\"\n              />\n            </div>\n            <div className=\"text-right\">\n              <div className=\"text-sm text-gray-600\">\n                {(mergedIntelligenceData?.score || overview.confidence * 100) >= 80 ? 'Excellent' :\n                 (mergedIntelligenceData?.score || overview.confidence * 100) >= 60 ? 'Good' :\n                 (mergedIntelligenceData?.score || overview.confidence * 100) >= 40 ? 'Fair' : 'Needs Improvement'}\n              </div>\n              <div className=\"text-xs text-gray-500\">\n                {mergedIntelligenceData?.insights?.length || overview.aiInsights.length} insights found\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Tabs for different views */}\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"insights\">Insights</TabsTrigger>\n          <TabsTrigger value=\"visitors\">Visitors</TabsTrigger>\n          <TabsTrigger value=\"predictions\">Predictions</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          {/* Quick Stats */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center gap-2\">\n                  <AlertTriangle className=\"w-4 h-4 text-red-500\" />\n                  <span className=\"text-sm font-medium\">Critical Issues</span>\n                </div>\n                <div className=\"text-2xl font-bold text-red-600\">\n                  {mergedIntelligenceData?.insights?.filter(i => i.importance === 'CRITICAL').length || 0}\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center gap-2\">\n                  <Lightbulb className=\"w-4 h-4 text-yellow-500\" />\n                  <span className=\"text-sm font-medium\">Opportunities</span>\n                </div>\n                <div className=\"text-2xl font-bold text-yellow-600\">\n                  {mergedIntelligenceData?.insights?.filter(i => i.type === 'OPPORTUNITY').length || 0}\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center gap-2\">\n                  <Users className=\"w-4 h-4 text-blue-500\" />\n                  <span className=\"text-sm font-medium\">High-Value Visitors</span>\n                </div>\n                <div className=\"text-2xl font-bold text-blue-600\">\n                  {visitorProfiles.filter(v => v.conversionProbability > 0.7).length}\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center gap-2\">\n                  <CheckCircle2 className=\"w-4 h-4 text-green-500\" />\n                  <span className=\"text-sm font-medium\">Actionable Items</span>\n                </div>\n                <div className=\"text-2xl font-bold text-green-600\">\n                  {mergedIntelligenceData?.insights?.filter(i => i.actionable).length || 0}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Top Recommendations */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Top AI Recommendations</CardTitle>\n              <CardDescription>\n                Prioritized actions to improve your performance\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {(mergedIntelligenceData?.recommendations || []).slice(0, 5).map((recommendation, index) => (\n                  <div key={index} className=\"flex items-start gap-3 p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                    <div className=\"flex-shrink-0 w-6 h-6 bg-purple-100 dark:bg-purple-900 rounded-full flex items-center justify-center text-purple-600 text-sm font-medium\">\n                      {index + 1}\n                    </div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm\">{recommendation}</p>\n                    </div>\n                    <Button size=\"sm\" variant=\"outline\">\n                      <ArrowRight className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"insights\" className=\"space-y-4\">\n          {(mergedIntelligenceData?.insights || []).map((insight) => (\n            <Card key={insight.id} className=\"relative\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    {getInsightIcon(insight.type)}\n                    <CardTitle className=\"text-lg\">{insight.title}</CardTitle>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Badge variant={getImportanceColor(insight.importance) as any}>\n                      {insight.importance}\n                    </Badge>\n                    <Badge variant=\"outline\">\n                      {insight.confidence}% confidence\n                    </Badge>\n                  </div>\n                </div>\n                <CardDescription>{insight.description}</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {insight.recommendations.length > 0 && (\n                  <div className=\"space-y-2\">\n                    <h4 className=\"font-medium text-sm\">Recommendations:</h4>\n                    <ul className=\"space-y-1\">\n                      {insight.recommendations.map((rec, index) => (\n                        <li key={index} className=\"text-sm text-gray-600 flex items-start gap-2\">\n                          <ArrowRight className=\"w-3 h-3 mt-0.5 flex-shrink-0\" />\n                          {rec}\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                )}\n                \n                {insight.metrics && (\n                  <div className=\"mt-4 p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                    <h4 className=\"font-medium text-sm mb-2\">Metrics:</h4>\n                    <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                      {Object.entries(insight.metrics).map(([key, value]) => (\n                        <div key={key} className=\"flex justify-between\">\n                          <span className=\"text-gray-600\">{key}:</span>\n                          <span className=\"font-medium\">{String(value)}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          ))}\n        </TabsContent>\n\n        <TabsContent value=\"visitors\" className=\"space-y-4\">\n          <div className=\"grid gap-4\">\n            {visitorProfiles.slice(0, 10).map((visitor) => (\n              <Card key={visitor.id}>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"w-10 h-10 bg-gradient-to-br from-blue-100 to-purple-100 rounded-full flex items-center justify-center\">\n                        <Users className=\"w-5 h-5 text-blue-600\" />\n                      </div>\n                      <div>\n                        <div className=\"font-medium\">Visitor {visitor.id.slice(-8)}</div>\n                        <div className=\"text-sm text-gray-600\">{visitor.behaviorPattern}</div>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className={`text-sm font-medium ${getEngagementColor(visitor.engagementLevel)}`}>\n                        {visitor.engagementLevel} Engagement\n                      </div>\n                      <div className=\"text-lg font-bold text-purple-600\">\n                        {(visitor.conversionProbability * 100).toFixed(1)}%\n                      </div>\n                      <div className=\"text-xs text-gray-500\">Conversion Probability</div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <div>\n                      <div className=\"text-sm font-medium mb-1\">Segments:</div>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {visitor.segments.map((segment, index) => (\n                          <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                            {segment}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <div className=\"text-sm font-medium mb-1\">Recommended Actions:</div>\n                      <ul className=\"text-sm text-gray-600 space-y-1\">\n                        {visitor.recommendedActions.slice(0, 2).map((action, index) => (\n                          <li key={index} className=\"flex items-start gap-1\">\n                            <ArrowRight className=\"w-3 h-3 mt-0.5 flex-shrink-0\" />\n                            {action}\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"predictions\" className=\"space-y-4\">\n          <div className=\"grid gap-4\">\n            {(mergedIntelligenceData?.predictions || []).map((prediction, index) => (\n              <Card key={index}>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"w-10 h-10 bg-gradient-to-br from-green-100 to-blue-100 rounded-full flex items-center justify-center\">\n                        <TrendingUp className=\"w-5 h-5 text-green-600\" />\n                      </div>\n                      <div>\n                        <div className=\"font-medium\">{prediction.metric}</div>\n                        <div className=\"text-sm text-gray-600\">{prediction.timeframe} forecast</div>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"text-2xl font-bold text-green-600\">\n                        {typeof prediction.prediction === 'number' \n                          ? prediction.prediction.toLocaleString()\n                          : prediction.prediction\n                        }\n                      </div>\n                      <div className=\"text-xs text-gray-500\">\n                        {prediction.confidence}% confidence\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center gap-2\">\n                    <Badge \n                      variant={prediction.trend === 'INCREASING' ? 'default' : \n                              prediction.trend === 'DECREASING' ? 'destructive' : 'outline'}\n                    >\n                      {prediction.trend === 'INCREASING' && <TrendingUp className=\"w-3 h-3 mr-1\" />}\n                      {prediction.trend === 'DECREASING' && <TrendingDown className=\"w-3 h-3 mr-1\" />}\n                      {prediction.trend}\n                    </Badge>\n                    <span className=\"text-sm text-gray-600\">trend</span>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}"],"names":["AIIntelligenceDashboard","data","session","useSession","intelligenceData","setIntelligenceData","useState","visitorProfiles","setVisitorProfiles","timeRange","setTimeRange","activeTab","setActiveTab","refreshing","setRefreshing","overview","loading","overviewLoading","refresh","refreshOverview","useAIIntelligenceOverview","user","id","fetchLeadPulseData","intelligenceRes","visitorsRes","Promise","all","fetch","ok","json","visitorsData","intelligence","error","console","toast","useEffect","refreshData","getInsightIcon","type","BarChart3","className","Lightbulb","TrendingUp","Target","AlertTriangle","Brain","getImportanceColor","importance","getEngagementColor","level","div","h2","p","Array","map","_","i","Card","CardHeader","CardContent","mergedIntelligenceData","insights","aiInsights","insight","Date","now","Math","random","toUpperCase","title","description","priority","confidence","actionable","recommendations","createdAt","toISOString","predictions","score","generatedAt","lastUpdated","h3","Button","onClick","RefreshCw","Select","value","onValueChange","SelectTrigger","SelectValue","SelectContent","SelectItem","variant","disabled","CardTitle","Sparkles","CardDescription","span","round","Progress","length","Tabs","TabsList","TabsTrigger","TabsContent","filter","Users","v","conversionProbability","CheckCircle2","slice","recommendation","index","size","ArrowRight","Badge","h4","ul","rec","li","metrics","Object","entries","key","String","visitor","behaviorPattern","engagementLevel","toFixed","segments","segment","recommendedActions","action","prediction","metric","timeframe","toLocaleString","trend","TrendingDown"],"mappings":"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"}