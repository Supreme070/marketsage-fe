{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/lib/ai/multi-agent-coordinator.ts"],"sourcesContent":["/**\n * Multi-Agent AI Coordination System\n * =================================\n * Enables autonomous AI agents to collaborate, communicate, and coordinate tasks\n * Builds upon existing AI engines by converting them into collaborative agents\n */\n\nimport { logger } from '@/lib/logger';\nimport { trace } from '@opentelemetry/api';\nimport { EventEmitter } from 'events';\n\nexport interface AIAgent {\n  id: string;\n  name: string;\n  type: AgentType;\n  status: AgentStatus;\n  capabilities: string[];\n  specialization: string[];\n  currentTasks: AgentTask[];\n  performance: AgentPerformance;\n  communicationChannels: string[];\n  collaborationPreferences: CollaborationPreference;\n  lastHeartbeat: Date;\n  createdAt: Date;\n}\n\nexport enum AgentType {\n  ANALYTICS = 'analytics',           // Data analysis and insights\n  EXECUTION = 'execution',          // Task execution and automation\n  STRATEGY = 'strategy',            // Strategic planning and decisions\n  LEARNING = 'learning',            // ML training and optimization\n  COMMUNICATION = 'communication',   // User interaction and coordination\n  INTEGRATION = 'integration',      // System integration and monitoring\n  CONTENT = 'content',              // Content generation and analysis\n  PREDICTIVE = 'predictive'         // Forecasting and prediction\n}\n\nexport enum AgentStatus {\n  ACTIVE = 'active',\n  IDLE = 'idle',\n  BUSY = 'busy',\n  OFFLINE = 'offline',\n  ERROR = 'error',\n  COLLABORATING = 'collaborating'\n}\n\nexport interface AgentTask {\n  id: string;\n  type: string;\n  description: string;\n  priority: 'low' | 'medium' | 'high' | 'critical';\n  status: 'pending' | 'in_progress' | 'completed' | 'failed' | 'delegated';\n  assignedBy: string;\n  collaborators: string[];\n  startedAt: Date;\n  deadline?: Date;\n  dependencies: string[];\n  results?: any;\n  error?: string;\n}\n\nexport interface AgentPerformance {\n  tasksCompleted: number;\n  tasksSuccessful: number;\n  averageResponseTime: number;\n  collaborationScore: number; // 0-1\n  specialtyEfficiency: number; // 0-1\n  lastUpdate: Date;\n}\n\nexport interface CollaborationPreference {\n  preferredPartners: string[];\n  communicationStyle: 'direct' | 'consensus' | 'hierarchical';\n  conflictResolution: 'negotiate' | 'escalate' | 'compromise';\n  knowledgeSharing: boolean;\n  autonomyLevel: 'low' | 'medium' | 'high';\n}\n\nexport interface AgentMessage {\n  id: string;\n  from: string;\n  to: string | 'broadcast';\n  type: MessageType;\n  content: any;\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  timestamp: Date;\n  requiresResponse: boolean;\n  responseDeadline?: Date;\n  conversationId?: string;\n}\n\nexport enum MessageType {\n  TASK_REQUEST = 'task_request',\n  TASK_RESPONSE = 'task_response',\n  COLLABORATION_INVITE = 'collaboration_invite',\n  KNOWLEDGE_SHARE = 'knowledge_share',\n  STATUS_UPDATE = 'status_update',\n  CONFLICT_RESOLUTION = 'conflict_resolution',\n  COORDINATION_REQUEST = 'coordination_request',\n  HEARTBEAT = 'heartbeat',\n  EMERGENCY = 'emergency'\n}\n\nexport interface CollaborationSession {\n  id: string;\n  participants: string[];\n  coordinator: string;\n  objective: string;\n  type: 'consensus' | 'delegation' | 'parallel' | 'sequential';\n  status: 'planning' | 'active' | 'completed' | 'failed';\n  tasks: AgentTask[];\n  decisions: CollaborativeDecision[];\n  startedAt: Date;\n  completedAt?: Date;\n  results?: any;\n}\n\nexport interface CollaborativeDecision {\n  id: string;\n  sessionId: string;\n  question: string;\n  options: Array<{\n    id: string;\n    description: string;\n    proposedBy: string;\n    votes: string[];\n    score: number;\n  }>;\n  consensus: string | null;\n  decisionMethod: 'majority' | 'unanimous' | 'weighted' | 'expert';\n  timestamp: Date;\n  rationale?: string;\n}\n\nclass MultiAgentCoordinator extends EventEmitter {\n  private agents = new Map<string, AIAgent>();\n  private messageQueue: AgentMessage[] = [];\n  private activeSessions = new Map<string, CollaborationSession>();\n  private messageHistory = new Map<string, AgentMessage[]>();\n  private agentConnections = new Map<string, Set<string>>();\n\n  constructor() {\n    super();\n    this.initializeAgentNetwork();\n    this.startCoordinationServices();\n  }\n\n  /**\n   * Initialize the multi-agent network by converting existing AI engines\n   */\n  private initializeAgentNetwork(): void {\n    const coreAgents: Partial<AIAgent>[] = [\n      {\n        name: 'Supreme Analytics Agent',\n        type: AgentType.ANALYTICS,\n        capabilities: ['data_analysis', 'insights_generation', 'pattern_recognition', 'statistical_analysis'],\n        specialization: ['customer_analytics', 'campaign_performance', 'market_intelligence'],\n        collaborationPreferences: {\n          preferredPartners: ['strategy', 'predictive'],\n          communicationStyle: 'consensus',\n          conflictResolution: 'negotiate',\n          knowledgeSharing: true,\n          autonomyLevel: 'high'\n        }\n      },\n      {\n        name: 'Intelligent Execution Agent',\n        type: AgentType.EXECUTION,\n        capabilities: ['task_execution', 'workflow_automation', 'system_integration', 'api_orchestration'],\n        specialization: ['campaign_execution', 'contact_management', 'workflow_processing'],\n        collaborationPreferences: {\n          preferredPartners: ['strategy', 'communication'],\n          communicationStyle: 'hierarchical',\n          conflictResolution: 'escalate',\n          knowledgeSharing: true,\n          autonomyLevel: 'medium'\n        }\n      },\n      {\n        name: 'Strategic Planning Agent',\n        type: AgentType.STRATEGY,\n        capabilities: ['strategic_planning', 'decision_support', 'goal_optimization', 'resource_allocation'],\n        specialization: ['business_strategy', 'market_expansion', 'growth_planning'],\n        collaborationPreferences: {\n          preferredPartners: ['analytics', 'predictive', 'execution'],\n          communicationStyle: 'consensus',\n          conflictResolution: 'compromise',\n          knowledgeSharing: true,\n          autonomyLevel: 'high'\n        }\n      },\n      {\n        name: 'ML Learning Agent',\n        type: AgentType.LEARNING,\n        capabilities: ['model_training', 'hyperparameter_tuning', 'feature_engineering', 'model_optimization'],\n        specialization: ['predictive_models', 'behavioral_analysis', 'automation_optimization'],\n        collaborationPreferences: {\n          preferredPartners: ['analytics', 'predictive'],\n          communicationStyle: 'direct',\n          conflictResolution: 'negotiate',\n          knowledgeSharing: true,\n          autonomyLevel: 'high'\n        }\n      },\n      {\n        name: 'Communication Coordinator Agent',\n        type: AgentType.COMMUNICATION,\n        capabilities: ['user_interaction', 'intent_analysis', 'response_generation', 'conversation_management'],\n        specialization: ['natural_language', 'user_support', 'system_coordination'],\n        collaborationPreferences: {\n          preferredPartners: ['execution', 'strategy'],\n          communicationStyle: 'direct',\n          conflictResolution: 'compromise',\n          knowledgeSharing: true,\n          autonomyLevel: 'medium'\n        }\n      },\n      {\n        name: 'Integration Monitoring Agent',\n        type: AgentType.INTEGRATION,\n        capabilities: ['system_monitoring', 'health_checking', 'integration_testing', 'self_healing'],\n        specialization: ['system_health', 'integration_management', 'failure_recovery'],\n        collaborationPreferences: {\n          preferredPartners: ['execution', 'learning'],\n          communicationStyle: 'direct',\n          conflictResolution: 'escalate',\n          knowledgeSharing: true,\n          autonomyLevel: 'medium'\n        }\n      },\n      {\n        name: 'Content Intelligence Agent',\n        type: AgentType.CONTENT,\n        capabilities: ['content_analysis', 'sentiment_analysis', 'content_generation', 'optimization'],\n        specialization: ['marketing_content', 'cultural_intelligence', 'personalization'],\n        collaborationPreferences: {\n          preferredPartners: ['analytics', 'communication'],\n          communicationStyle: 'consensus',\n          conflictResolution: 'compromise',\n          knowledgeSharing: true,\n          autonomyLevel: 'medium'\n        }\n      },\n      {\n        name: 'Predictive Forecasting Agent',\n        type: AgentType.PREDICTIVE,\n        capabilities: ['forecasting', 'trend_analysis', 'risk_assessment', 'scenario_planning'],\n        specialization: ['market_forecasting', 'customer_behavior', 'business_metrics'],\n        collaborationPreferences: {\n          preferredPartners: ['analytics', 'strategy', 'learning'],\n          communicationStyle: 'consensus',\n          conflictResolution: 'negotiate',\n          knowledgeSharing: true,\n          autonomyLevel: 'high'\n        }\n      }\n    ];\n\n    coreAgents.forEach(agentData => {\n      const agent: AIAgent = {\n        id: `agent_${agentData.type}_${Date.now()}`,\n        status: AgentStatus.ACTIVE,\n        currentTasks: [],\n        performance: {\n          tasksCompleted: 0,\n          tasksSuccessful: 0,\n          averageResponseTime: 0,\n          collaborationScore: 0.8,\n          specialtyEfficiency: 0.9,\n          lastUpdate: new Date()\n        },\n        communicationChannels: ['direct_message', 'broadcast', 'collaboration_session'],\n        lastHeartbeat: new Date(),\n        createdAt: new Date(),\n        ...agentData\n      } as AIAgent;\n\n      this.agents.set(agent.id, agent);\n      this.agentConnections.set(agent.id, new Set());\n    });\n\n    logger.info('Multi-agent network initialized', {\n      agentsCount: this.agents.size,\n      agentTypes: Array.from(new Set(Array.from(this.agents.values()).map(a => a.type)))\n    });\n  }\n\n  /**\n   * Start coordination services for agent communication and collaboration\n   */\n  private startCoordinationServices(): void {\n    // Message processing service\n    setInterval(() => {\n      this.processMessageQueue();\n    }, 1000); // Process messages every second\n\n    // Agent health monitoring\n    setInterval(() => {\n      this.monitorAgentHealth();\n    }, 30000); // Check health every 30 seconds\n\n    // Collaboration session management\n    setInterval(() => {\n      this.manageCollaborationSessions();\n    }, 5000); // Manage sessions every 5 seconds\n\n    // Performance optimization\n    setInterval(() => {\n      this.optimizeAgentPerformance();\n    }, 60000); // Optimize every minute\n\n    logger.info('Multi-agent coordination services started');\n  }\n\n  /**\n   * Create a collaborative task that requires multiple agents\n   */\n  async createCollaborativeTask(params: {\n    objective: string;\n    requiredCapabilities: string[];\n    priority: 'low' | 'medium' | 'high' | 'critical';\n    deadline?: Date;\n    coordinatorId?: string;\n    collaborationType: 'consensus' | 'delegation' | 'parallel' | 'sequential';\n  }): Promise<CollaborationSession> {\n    const tracer = trace.getTracer('multi-agent-coordination');\n    \n    return tracer.startActiveSpan('create-collaborative-task', async (span) => {\n      try {\n        span.setAttributes({\n          'collaboration.objective': params.objective,\n          'collaboration.type': params.collaborationType,\n          'collaboration.priority': params.priority,\n          'collaboration.capabilities': params.requiredCapabilities.join(',')\n        });\n\n        // Select appropriate agents based on capabilities\n        const selectedAgents = this.selectAgentsForTask(params.requiredCapabilities);\n        \n        if (selectedAgents.length === 0) {\n          throw new Error('No suitable agents found for the required capabilities');\n        }\n\n        // Determine coordinator\n        const coordinator = params.coordinatorId || \n          this.selectCoordinator(selectedAgents, params.collaborationType);\n\n        // Create collaboration session\n        const session: CollaborationSession = {\n          id: `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n          participants: selectedAgents.map(a => a.id),\n          coordinator,\n          objective: params.objective,\n          type: params.collaborationType,\n          status: 'planning',\n          tasks: [],\n          decisions: [],\n          startedAt: new Date()\n        };\n\n        this.activeSessions.set(session.id, session);\n\n        // Notify participating agents\n        await this.initiateCollaboration(session, selectedAgents);\n\n        span.setAttributes({\n          'collaboration.session.id': session.id,\n          'collaboration.participants.count': selectedAgents.length,\n          'collaboration.coordinator': coordinator\n        });\n\n        logger.info('Collaborative task created', {\n          sessionId: session.id,\n          objective: params.objective,\n          participantsCount: selectedAgents.length,\n          collaborationType: params.collaborationType\n        });\n\n        return session;\n\n      } catch (error) {\n        span.setStatus({ code: 2, message: String(error) });\n        throw error;\n      } finally {\n        span.end();\n      }\n    });\n  }\n\n  /**\n   * Select agents based on required capabilities\n   */\n  private selectAgentsForTask(requiredCapabilities: string[]): AIAgent[] {\n    const availableAgents = Array.from(this.agents.values())\n      .filter(agent => agent.status === AgentStatus.ACTIVE || agent.status === AgentStatus.IDLE);\n\n    const selectedAgents: AIAgent[] = [];\n    const requiredCaps = new Set(requiredCapabilities);\n\n    // Find agents that match required capabilities\n    for (const agent of availableAgents) {\n      const agentCaps = new Set([...agent.capabilities, ...agent.specialization]);\n      const matchedCaps = [...requiredCaps].filter(cap => agentCaps.has(cap));\n      \n      if (matchedCaps.length > 0) {\n        selectedAgents.push(agent);\n        // Remove matched capabilities from required set\n        matchedCaps.forEach(cap => requiredCaps.delete(cap));\n      }\n\n      // If all capabilities are covered, we can stop\n      if (requiredCaps.size === 0) break;\n    }\n\n    return selectedAgents;\n  }\n\n  /**\n   * Select coordinator for collaboration session\n   */\n  private selectCoordinator(agents: AIAgent[], collaborationType: string): string {\n    switch (collaborationType) {\n      case 'consensus':\n        // Select agent with highest collaboration score\n        return agents.reduce((best, current) => \n          current.performance.collaborationScore > best.performance.collaborationScore ? current : best\n        ).id;\n      \n      case 'hierarchical':\n      case 'delegation':\n        // Prefer strategy or communication agents for coordination\n        const coordinatorTypes = [AgentType.STRATEGY, AgentType.COMMUNICATION, AgentType.EXECUTION];\n        for (const type of coordinatorTypes) {\n          const coordinator = agents.find(a => a.type === type);\n          if (coordinator) return coordinator.id;\n        }\n        return agents[0].id;\n      \n      default:\n        return agents[0].id;\n    }\n  }\n\n  /**\n   * Initiate collaboration between agents\n   */\n  private async initiateCollaboration(session: CollaborationSession, agents: AIAgent[]): Promise<void> {\n    // Send collaboration invitation to all participants\n    for (const agent of agents) {\n      const message: AgentMessage = {\n        id: `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        from: 'coordinator',\n        to: agent.id,\n        type: MessageType.COLLABORATION_INVITE,\n        content: {\n          sessionId: session.id,\n          objective: session.objective,\n          participants: session.participants,\n          type: session.type,\n          role: agent.id === session.coordinator ? 'coordinator' : 'participant'\n        },\n        priority: 'high',\n        timestamp: new Date(),\n        requiresResponse: true,\n        responseDeadline: new Date(Date.now() + 5 * 60 * 1000) // 5 minutes\n      };\n\n      await this.sendMessage(message);\n    }\n\n    // Update agent statuses\n    agents.forEach(agent => {\n      agent.status = AgentStatus.COLLABORATING;\n    });\n  }\n\n  /**\n   * Send message between agents\n   */\n  async sendMessage(message: AgentMessage): Promise<void> {\n    this.messageQueue.push(message);\n    \n    // Store in conversation history\n    const conversationKey = message.conversationId || `${message.from}_${message.to}`;\n    if (!this.messageHistory.has(conversationKey)) {\n      this.messageHistory.set(conversationKey, []);\n    }\n    this.messageHistory.get(conversationKey)!.push(message);\n\n    // Emit event for real-time processing\n    this.emit('message', message);\n\n    logger.debug('Message queued for delivery', {\n      messageId: message.id,\n      from: message.from,\n      to: message.to,\n      type: message.type\n    });\n  }\n\n  /**\n   * Process message queue\n   */\n  private async processMessageQueue(): Promise<void> {\n    while (this.messageQueue.length > 0) {\n      const message = this.messageQueue.shift()!;\n      \n      try {\n        await this.deliverMessage(message);\n      } catch (error) {\n        logger.error('Message delivery failed', {\n          messageId: message.id,\n          error: error instanceof Error ? error.message : String(error)\n        });\n      }\n    }\n  }\n\n  /**\n   * Deliver message to target agent\n   */\n  private async deliverMessage(message: AgentMessage): Promise<void> {\n    if (message.to === 'broadcast') {\n      // Broadcast to all active agents\n      for (const agent of this.agents.values()) {\n        if (agent.status !== AgentStatus.OFFLINE) {\n          await this.processAgentMessage(agent, message);\n        }\n      }\n    } else {\n      // Direct message to specific agent\n      const targetAgent = this.agents.get(message.to);\n      if (targetAgent) {\n        await this.processAgentMessage(targetAgent, message);\n      }\n    }\n  }\n\n  /**\n   * Process message for specific agent\n   */\n  private async processAgentMessage(agent: AIAgent, message: AgentMessage): Promise<void> {\n    switch (message.type) {\n      case MessageType.TASK_REQUEST:\n        await this.handleTaskRequest(agent, message);\n        break;\n      \n      case MessageType.COLLABORATION_INVITE:\n        await this.handleCollaborationInvite(agent, message);\n        break;\n      \n      case MessageType.KNOWLEDGE_SHARE:\n        await this.handleKnowledgeShare(agent, message);\n        break;\n      \n      case MessageType.STATUS_UPDATE:\n        await this.handleStatusUpdate(agent, message);\n        break;\n      \n      default:\n        logger.debug('Unhandled message type', {\n          agentId: agent.id,\n          messageType: message.type\n        });\n    }\n  }\n\n  /**\n   * Handle task request message\n   */\n  private async handleTaskRequest(agent: AIAgent, message: AgentMessage): Promise<void> {\n    const task: AgentTask = {\n      id: `task_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      type: message.content.taskType,\n      description: message.content.description,\n      priority: message.content.priority || 'medium',\n      status: 'pending',\n      assignedBy: message.from,\n      collaborators: [],\n      startedAt: new Date(),\n      deadline: message.content.deadline ? new Date(message.content.deadline) : undefined,\n      dependencies: message.content.dependencies || []\n    };\n\n    agent.currentTasks.push(task);\n\n    // Send response\n    await this.sendMessage({\n      id: `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      from: agent.id,\n      to: message.from,\n      type: MessageType.TASK_RESPONSE,\n      content: {\n        taskId: task.id,\n        accepted: true,\n        estimatedCompletion: new Date(Date.now() + 30 * 60 * 1000) // 30 minutes\n      },\n      priority: message.priority,\n      timestamp: new Date(),\n      requiresResponse: false,\n      conversationId: message.conversationId\n    });\n  }\n\n  /**\n   * Handle collaboration invitation\n   */\n  private async handleCollaborationInvite(agent: AIAgent, message: AgentMessage): Promise<void> {\n    const sessionId = message.content.sessionId;\n    const session = this.activeSessions.get(sessionId);\n    \n    if (session) {\n      // Agent accepts collaboration\n      agent.status = AgentStatus.COLLABORATING;\n      \n      // Send acceptance response\n      await this.sendMessage({\n        id: `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        from: agent.id,\n        to: message.from,\n        type: MessageType.TASK_RESPONSE,\n        content: {\n          sessionId,\n          accepted: true,\n          capabilities: agent.capabilities,\n          availability: 'immediate'\n        },\n        priority: 'high',\n        timestamp: new Date(),\n        requiresResponse: false,\n        conversationId: message.conversationId\n      });\n    }\n  }\n\n  /**\n   * Handle knowledge sharing\n   */\n  private async handleKnowledgeShare(agent: AIAgent, message: AgentMessage): Promise<void> {\n    // Process shared knowledge and update agent's knowledge base\n    logger.info('Knowledge shared between agents', {\n      fromAgent: message.from,\n      toAgent: agent.id,\n      knowledgeType: message.content.type\n    });\n  }\n\n  /**\n   * Handle status updates\n   */\n  private async handleStatusUpdate(agent: AIAgent, message: AgentMessage): Promise<void> {\n    const update = message.content;\n    \n    if (update.status) {\n      agent.status = update.status;\n    }\n    \n    if (update.performance) {\n      Object.assign(agent.performance, update.performance);\n    }\n\n    agent.lastHeartbeat = new Date();\n  }\n\n  /**\n   * Monitor agent health and connectivity\n   */\n  private monitorAgentHealth(): void {\n    const now = new Date();\n    const healthThreshold = 60000; // 1 minute\n\n    for (const agent of this.agents.values()) {\n      const timeSinceHeartbeat = now.getTime() - agent.lastHeartbeat.getTime();\n      \n      if (timeSinceHeartbeat > healthThreshold && agent.status !== AgentStatus.OFFLINE) {\n        logger.warn('Agent appears to be offline', {\n          agentId: agent.id,\n          agentName: agent.name,\n          timeSinceHeartbeat\n        });\n        \n        agent.status = AgentStatus.OFFLINE;\n        this.emit('agentOffline', agent);\n      }\n    }\n  }\n\n  /**\n   * Manage active collaboration sessions\n   */\n  private manageCollaborationSessions(): void {\n    for (const session of this.activeSessions.values()) {\n      if (session.status === 'active') {\n        // Check if session should be completed\n        const allTasksCompleted = session.tasks.every(task => \n          task.status === 'completed' || task.status === 'failed'\n        );\n        \n        if (allTasksCompleted) {\n          session.status = 'completed';\n          session.completedAt = new Date();\n          \n          // Notify participants\n          this.notifySessionCompletion(session);\n        }\n      }\n    }\n  }\n\n  /**\n   * Notify agents of session completion\n   */\n  private async notifySessionCompletion(session: CollaborationSession): Promise<void> {\n    for (const participantId of session.participants) {\n      const agent = this.agents.get(participantId);\n      if (agent) {\n        agent.status = AgentStatus.ACTIVE;\n        \n        await this.sendMessage({\n          id: `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n          from: 'coordinator',\n          to: participantId,\n          type: MessageType.STATUS_UPDATE,\n          content: {\n            sessionId: session.id,\n            status: 'completed',\n            results: session.results\n          },\n          priority: 'medium',\n          timestamp: new Date(),\n          requiresResponse: false\n        });\n      }\n    }\n  }\n\n  /**\n   * Optimize agent performance based on collaboration history\n   */\n  private optimizeAgentPerformance(): void {\n    for (const agent of this.agents.values()) {\n      // Update collaboration score based on recent performance\n      const recentTasks = agent.currentTasks.filter(task => \n        task.startedAt > new Date(Date.now() - 24 * 60 * 60 * 1000) // Last 24 hours\n      );\n      \n      if (recentTasks.length > 0) {\n        const successRate = recentTasks.filter(task => task.status === 'completed').length / recentTasks.length;\n        agent.performance.collaborationScore = (agent.performance.collaborationScore * 0.8) + (successRate * 0.2);\n        agent.performance.tasksCompleted += recentTasks.filter(task => task.status === 'completed').length;\n        agent.performance.lastUpdate = new Date();\n      }\n    }\n  }\n\n  /**\n   * Public API methods\n   */\n  async requestAgentCollaboration(params: {\n    requiredCapabilities: string[];\n    objective: string;\n    priority: 'low' | 'medium' | 'high' | 'critical';\n    requesterId: string;\n  }): Promise<CollaborationSession> {\n    return this.createCollaborativeTask({\n      objective: params.objective,\n      requiredCapabilities: params.requiredCapabilities,\n      priority: params.priority,\n      collaborationType: 'consensus'\n    });\n  }\n\n  async getAgentStatus(agentId?: string): Promise<AIAgent | AIAgent[]> {\n    if (agentId) {\n      const agent = this.agents.get(agentId);\n      if (!agent) throw new Error(`Agent not found: ${agentId}`);\n      return agent;\n    }\n    \n    return Array.from(this.agents.values());\n  }\n\n  async getActiveCollaborations(): Promise<CollaborationSession[]> {\n    return Array.from(this.activeSessions.values())\n      .filter(session => session.status === 'active' || session.status === 'planning');\n  }\n\n  async getAgentPerformance(): Promise<Record<string, AgentPerformance>> {\n    const performance: Record<string, AgentPerformance> = {};\n    \n    for (const [id, agent] of this.agents.entries()) {\n      performance[agent.name] = agent.performance;\n    }\n    \n    return performance;\n  }\n\n  async delegateTaskToAgents(params: {\n    task: string;\n    requiredCapabilities: string[];\n    priority: 'low' | 'medium' | 'high' | 'critical';\n    deadline?: Date;\n  }): Promise<string> {\n    const session = await this.createCollaborativeTask({\n      objective: params.task,\n      requiredCapabilities: params.requiredCapabilities,\n      priority: params.priority,\n      deadline: params.deadline,\n      collaborationType: 'delegation'\n    });\n\n    return session.id;\n  }\n}\n\n// Export singleton instance\nexport const multiAgentCoordinator = new MultiAgentCoordinator();\n\n// Convenience functions\nexport async function createAgentCollaboration(params: {\n  objective: string;\n  capabilities: string[];\n  priority?: 'low' | 'medium' | 'high' | 'critical';\n}): Promise<CollaborationSession> {\n  return multiAgentCoordinator.requestAgentCollaboration({\n    requiredCapabilities: params.capabilities,\n    objective: params.objective,\n    priority: params.priority || 'medium',\n    requesterId: 'system'\n  });\n}\n\nexport async function getMultiAgentStatus(): Promise<{\n  agents: AIAgent[];\n  activeCollaborations: CollaborationSession[];\n  performance: Record<string, AgentPerformance>;\n}> {\n  const [agents, collaborations, performance] = await Promise.all([\n    multiAgentCoordinator.getAgentStatus() as Promise<AIAgent[]>,\n    multiAgentCoordinator.getActiveCollaborations(),\n    multiAgentCoordinator.getAgentPerformance()\n  ]);\n\n  return { agents, activeCollaborations: collaborations, performance };\n}"],"names":["AgentStatus","AgentType","MessageType","createAgentCollaboration","getMultiAgentStatus","multiAgentCoordinator","MultiAgentCoordinator","EventEmitter","constructor","agents","Map","messageQueue","activeSessions","messageHistory","agentConnections","initializeAgentNetwork","startCoordinationServices","coreAgents","name","type","capabilities","specialization","collaborationPreferences","preferredPartners","communicationStyle","conflictResolution","knowledgeSharing","autonomyLevel","forEach","agentData","agent","id","Date","now","status","currentTasks","performance","tasksCompleted","tasksSuccessful","averageResponseTime","collaborationScore","specialtyEfficiency","lastUpdate","communicationChannels","lastHeartbeat","createdAt","set","Set","logger","info","agentsCount","size","agentTypes","Array","from","values","map","a","setInterval","processMessageQueue","monitorAgentHealth","manageCollaborationSessions","optimizeAgentPerformance","createCollaborativeTask","params","tracer","trace","getTracer","startActiveSpan","span","setAttributes","objective","collaborationType","priority","requiredCapabilities","join","selectedAgents","selectAgentsForTask","length","Error","coordinator","coordinatorId","selectCoordinator","session","Math","random","toString","substr","participants","tasks","decisions","startedAt","initiateCollaboration","sessionId","participantsCount","error","setStatus","code","message","String","end","availableAgents","filter","requiredCaps","agentCaps","matchedCaps","cap","has","push","delete","reduce","best","current","coordinatorTypes","find","to","content","role","timestamp","requiresResponse","responseDeadline","sendMessage","conversationKey","conversationId","get","emit","debug","messageId","shift","deliverMessage","processAgentMessage","targetAgent","handleTaskRequest","handleCollaborationInvite","handleKnowledgeShare","handleStatusUpdate","agentId","messageType","task","taskType","description","assignedBy","collaborators","deadline","undefined","dependencies","taskId","accepted","estimatedCompletion","availability","fromAgent","toAgent","knowledgeType","update","Object","assign","healthThreshold","timeSinceHeartbeat","getTime","warn","agentName","allTasksCompleted","every","completedAt","notifySessionCompletion","participantId","results","recentTasks","successRate","requestAgentCollaboration","getAgentStatus","getActiveCollaborations","getAgentPerformance","entries","delegateTaskToAgents","requesterId","collaborations","Promise","all","activeCollaborations"],"mappings":"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"}