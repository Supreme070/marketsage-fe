{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/__tests__/setup.ts"],"sourcesContent":["/**\n * Jest Test Setup for MarketSage MCP Tests\n * \n * This file configures Jest for testing MCP servers with proper mocking\n * and database setup while ensuring real data connections are tested.\n */\n\nimport '@testing-library/jest-dom';\n\n// Environment setup for tests\nprocess.env.NODE_ENV = 'test';\nprocess.env.NEXTAUTH_SECRET = 'test-secret-for-mcp-jwt-validation';\nprocess.env.DATABASE_URL = 'postgresql://test:test@localhost:5432/marketsage_test';\nprocess.env.REDIS_URL = 'redis://localhost:6379/1';\n\n// Mock console.error to reduce noise in tests but keep warnings for debugging\nconst originalError = console.error;\nbeforeAll(() => {\n  console.error = (...args: any[]) => {\n    if (\n      typeof args[0] === 'string' &&\n      (args[0].includes('Warning') ||\n       args[0].includes('React') ||\n       args[0].includes('jsdom'))\n    ) {\n      return;\n    }\n    originalError.call(console, ...args);\n  };\n});\n\nafterAll(() => {\n  console.error = originalError;\n});\n\n// Global test timeout for MCP tests (they can be slower due to database/Redis operations)\njest.setTimeout(30000);\n\n// Performance monitoring for tests\nglobal.performance = global.performance || {\n  now: () => Date.now()\n};\n\n// Mock WebSocket for tests that don't need real-time connections\nglobal.WebSocket = jest.fn().mockImplementation(() => ({\n  send: jest.fn(),\n  close: jest.fn(),\n  addEventListener: jest.fn(),\n  removeEventListener: jest.fn(),\n  readyState: 1,\n  CONNECTING: 0,\n  OPEN: 1,\n  CLOSING: 2,\n  CLOSED: 3\n})) as any;\n\n// Mock fetch for external API calls in tests\nglobal.fetch = jest.fn();\n\n// Setup test utilities\nglobal.testUtils = {\n  generateTestToken: (userId: string = 'test-user', organizationId: string = 'test-org') => {\n    const jwt = require('jsonwebtoken');\n    return jwt.sign(\n      { \n        id: userId, \n        organizationId,\n        jti: `session_${Date.now()}`,\n        iat: Math.floor(Date.now() / 1000),\n        exp: Math.floor(Date.now() / 1000) + 3600 // 1 hour\n      },\n      process.env.NEXTAUTH_SECRET\n    );\n  },\n  \n  createMockRequest: (authToken?: string, meta?: any) => ({\n    meta: {\n      sessionToken: authToken,\n      ...meta\n    },\n    headers: authToken ? { authorization: `Bearer ${authToken}` } : {},\n    params: {}\n  }),\n  \n  createMockAuthContext: (overrides?: any) => ({\n    userId: 'test-user-123',\n    organizationId: 'test-org-456',\n    role: 'USER',\n    permissions: ['read:own:contacts', 'write:own:contacts'],\n    sessionId: 'test-session',\n    ...overrides\n  }),\n  \n  delay: (ms: number) => new Promise(resolve => setTimeout(resolve, ms))\n};\n\n// Global types for test utilities\ndeclare global {\n  namespace NodeJS {\n    interface Global {\n      testUtils: {\n        generateTestToken: (userId?: string, organizationId?: string) => string;\n        createMockRequest: (authToken?: string, meta?: any) => any;\n        createMockAuthContext: (overrides?: any) => any;\n        delay: (ms: number) => Promise<void>;\n      };\n    }\n  }\n  \n  var testUtils: {\n    generateTestToken: (userId?: string, organizationId?: string) => string;\n    createMockRequest: (authToken?: string, meta?: any) => any;\n    createMockAuthContext: (overrides?: any) => any;\n    delay: (ms: number) => Promise<void>;\n  };\n}"],"names":["process","env","NODE_ENV","NEXTAUTH_SECRET","DATABASE_URL","REDIS_URL","originalError","console","error","beforeAll","args","includes","call","afterAll","jest","setTimeout","global","performance","now","Date","WebSocket","fn","mockImplementation","send","close","addEventListener","removeEventListener","readyState","CONNECTING","OPEN","CLOSING","CLOSED","fetch","testUtils","generateTestToken","userId","organizationId","jwt","require","sign","id","jti","iat","Math","floor","exp","createMockRequest","authToken","meta","sessionToken","headers","authorization","params","createMockAuthContext","overrides","role","permissions","sessionId","delay","ms","Promise","resolve"],"mappings":"AAAA;;;;;CAKC;;;;QAEM;AAEP,8BAA8B;AAC9BA,QAAQC,GAAG,CAACC,QAAQ,GAAG;AACvBF,QAAQC,GAAG,CAACE,eAAe,GAAG;AAC9BH,QAAQC,GAAG,CAACG,YAAY,GAAG;AAC3BJ,QAAQC,GAAG,CAACI,SAAS,GAAG;AAExB,8EAA8E;AAC9E,MAAMC,gBAAgBC,QAAQC,KAAK;AACnCC,UAAU;IACRF,QAAQC,KAAK,GAAG,CAAC,GAAGE;QAClB,IACE,OAAOA,IAAI,CAAC,EAAE,KAAK,YAClBA,CAAAA,IAAI,CAAC,EAAE,CAACC,QAAQ,CAAC,cACjBD,IAAI,CAAC,EAAE,CAACC,QAAQ,CAAC,YACjBD,IAAI,CAAC,EAAE,CAACC,QAAQ,CAAC,QAAO,GACzB;YACA;QACF;QACAL,cAAcM,IAAI,CAACL,YAAYG;IACjC;AACF;AAEAG,SAAS;IACPN,QAAQC,KAAK,GAAGF;AAClB;AAEA,0FAA0F;AAC1FQ,KAAKC,UAAU,CAAC;AAEhB,mCAAmC;AACnCC,OAAOC,WAAW,GAAGD,OAAOC,WAAW,IAAI;IACzCC,KAAK,IAAMC,KAAKD,GAAG;AACrB;AAEA,iEAAiE;AACjEF,OAAOI,SAAS,GAAGN,KAAKO,EAAE,GAAGC,kBAAkB,CAAC,IAAO,CAAA;QACrDC,MAAMT,KAAKO,EAAE;QACbG,OAAOV,KAAKO,EAAE;QACdI,kBAAkBX,KAAKO,EAAE;QACzBK,qBAAqBZ,KAAKO,EAAE;QAC5BM,YAAY;QACZC,YAAY;QACZC,MAAM;QACNC,SAAS;QACTC,QAAQ;IACV,CAAA;AAEA,6CAA6C;AAC7Cf,OAAOgB,KAAK,GAAGlB,KAAKO,EAAE;AAEtB,uBAAuB;AACvBL,OAAOiB,SAAS,GAAG;IACjBC,mBAAmB,CAACC,SAAiB,WAAW,EAAEC,iBAAyB,UAAU;QACnF,MAAMC,MAAMC,QAAQ;QACpB,OAAOD,IAAIE,IAAI,CACb;YACEC,IAAIL;YACJC;YACAK,KAAK,CAAC,QAAQ,EAAEtB,KAAKD,GAAG,IAAI;YAC5BwB,KAAKC,KAAKC,KAAK,CAACzB,KAAKD,GAAG,KAAK;YAC7B2B,KAAKF,KAAKC,KAAK,CAACzB,KAAKD,GAAG,KAAK,QAAQ,KAAK,SAAS;QACrD,GACAlB,QAAQC,GAAG,CAACE,eAAe;IAE/B;IAEA2C,mBAAmB,CAACC,WAAoBC,OAAgB,CAAA;YACtDA,MAAM;gBACJC,cAAcF;gBACd,GAAGC,IAAI;YACT;YACAE,SAASH,YAAY;gBAAEI,eAAe,CAAC,OAAO,EAAEJ,WAAW;YAAC,IAAI,CAAC;YACjEK,QAAQ,CAAC;QACX,CAAA;IAEAC,uBAAuB,CAACC,YAAqB,CAAA;YAC3CnB,QAAQ;YACRC,gBAAgB;YAChBmB,MAAM;YACNC,aAAa;gBAAC;gBAAqB;aAAqB;YACxDC,WAAW;YACX,GAAGH,SAAS;QACd,CAAA;IAEAI,OAAO,CAACC,KAAe,IAAIC,QAAQC,CAAAA,UAAW9C,WAAW8C,SAASF;AACpE"}