{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/lib/ai/intelligent-reporting-engine.ts"],"sourcesContent":["/**\n * Intelligent Reporting Engine\n * ============================\n * AI-powered reporting system that understands natural language requests\n * and generates comprehensive reports with PDF/Excel exports\n */\n\nimport { logger } from '@/lib/logger';\nimport { \n  EnterpriseExportManager, \n  type ExportRequest, \n  type ExportColumn, \n  type ExportJob \n} from '@/lib/export/enterprise-export';\nimport { intelligentIntentAnalyzer } from './intelligent-intent-analyzer';\nimport { AuthorizationService, Permission } from '@/lib/security/authorization';\n\nexport interface ReportRequest {\n  query: string;\n  userId: string;\n  userRole: string;\n  organizationId: string;\n  options?: {\n    format?: 'CSV' | 'Excel' | 'PDF' | 'JSON';\n    includeCharts?: boolean;\n    schedule?: {\n      frequency: 'daily' | 'weekly' | 'monthly';\n      recipients: string[];\n    };\n  };\n}\n\nexport interface ReportResult {\n  success: boolean;\n  message: string;\n  reportId?: string;\n  downloadUrl?: string;\n  estimatedRows?: number;\n  format?: string;\n  error?: string;\n  suggestions?: string[];\n}\n\nexport interface IntelligentReportDefinition {\n  title: string;\n  dataSource: string;\n  columns: ExportColumn[];\n  filters: Record<string, any>;\n  format: 'CSV' | 'Excel' | 'PDF' | 'JSON';\n  purpose: string;\n  includeCharts: boolean;\n  chartTypes?: string[];\n}\n\nclass IntelligentReportingEngine {\n  private exportManager: EnterpriseExportManager;\n\n  constructor() {\n    this.exportManager = EnterpriseExportManager.getInstance();\n  }\n\n  /**\n   * Generate report from natural language query\n   */\n  async generateReport(request: ReportRequest): Promise<ReportResult> {\n    try {\n      logger.info('AI report generation requested', {\n        query: request.query.substring(0, 100),\n        userId: request.userId,\n        organizationId: request.organizationId\n      });\n\n      // Analyze user intent to understand what report they want\n      const intent = await intelligentIntentAnalyzer.analyzeIntent(request.query);\n      \n      if (intent.confidence < 0.7) {\n        return {\n          success: false,\n          message: 'I need more specific information to generate your report.',\n          suggestions: this.getReportSuggestions(request.query)\n        };\n      }\n\n      // Convert natural language to report definition\n      const reportDef = await this.parseReportQuery(request.query, intent, request);\n      \n      if (!reportDef) {\n        return {\n          success: false,\n          message: 'I couldn\\'t understand what type of report you want to generate.',\n          suggestions: this.getReportSuggestions(request.query)\n        };\n      }\n\n      // Validate permissions\n      const hasPermission = await this.validateReportPermissions(reportDef, request);\n      if (!hasPermission.allowed) {\n        return {\n          success: false,\n          message: hasPermission.reason || 'Insufficient permissions to generate this report.',\n          error: 'permission_denied'\n        };\n      }\n\n      // Create export request\n      const exportRequest: ExportRequest = {\n        dataSource: reportDef.dataSource,\n        columns: reportDef.columns,\n        filters: { ...reportDef.filters, organizationId: request.organizationId },\n        options: {\n          format: reportDef.format,\n          filename: this.generateReportFilename(reportDef.title, reportDef.format),\n          includeHeaders: true,\n          includeMetadata: true,\n          includeTimestamp: true,\n          compliance: {\n            includeAuditTrail: true,\n            redactSensitiveData: true,\n            encryptionLevel: 'standard'\n          }\n        },\n        requestedBy: {\n          userId: request.userId,\n          userName: 'AI User', // Will be populated from user lookup\n          role: request.userRole,\n          tenantId: request.organizationId\n        },\n        purpose: `AI-generated report: ${reportDef.purpose}`,\n        estimatedRows: await this.estimateReportSize(reportDef)\n      };\n\n      // Generate the report\n      const exportJob = await this.exportManager.createExportJob(exportRequest);\n\n      // Schedule if requested\n      if (request.options?.schedule) {\n        await this.scheduleReport(exportJob, request.options.schedule);\n      }\n\n      return {\n        success: true,\n        message: `ðŸ“Š Report \"${reportDef.title}\" is being generated! You'll receive it in ${reportDef.format} format.`,\n        reportId: exportJob.id,\n        estimatedRows: exportRequest.estimatedRows,\n        format: reportDef.format\n      };\n\n    } catch (error) {\n      logger.error('AI report generation failed', {\n        error: error instanceof Error ? error.message : String(error),\n        query: request.query,\n        userId: request.userId\n      });\n\n      return {\n        success: false,\n        message: 'I encountered an error while generating your report. Please try again.',\n        error: error instanceof Error ? error.message : 'Unknown error',\n        suggestions: [\n          'Try rephrasing your request',\n          'Be more specific about the data you want',\n          'Check if you have permission to access this data'\n        ]\n      };\n    }\n  }\n\n  /**\n   * Parse natural language query into report definition\n   */\n  private async parseReportQuery(\n    query: string, \n    intent: any, \n    request: ReportRequest\n  ): Promise<IntelligentReportDefinition | null> {\n    const lowerQuery = query.toLowerCase();\n    \n    // Determine data source\n    const dataSource = this.detectDataSource(lowerQuery);\n    if (!dataSource) return null;\n\n    // Determine report format\n    const format = this.detectReportFormat(lowerQuery, request.options?.format);\n    \n    // Generate appropriate columns based on data source and query\n    const columns = this.generateReportColumns(dataSource, lowerQuery);\n    \n    // Extract filters from query\n    const filters = this.extractFilters(lowerQuery, intent);\n    \n    // Generate report title\n    const title = this.generateReportTitle(dataSource, lowerQuery);\n    \n    // Determine purpose\n    const purpose = this.extractReportPurpose(lowerQuery, intent);\n\n    // Check if charts are requested\n    const includeCharts = this.shouldIncludeCharts(lowerQuery, format);\n\n    return {\n      title,\n      dataSource,\n      columns,\n      filters,\n      format,\n      purpose,\n      includeCharts,\n      chartTypes: includeCharts ? this.suggestChartTypes(dataSource, columns) : undefined\n    };\n  }\n\n  /**\n   * Detect data source from natural language\n   */\n  private detectDataSource(query: string): string | null {\n    const dataSources = {\n      'contacts': ['contact', 'customer', 'lead', 'subscriber', 'user', 'people'],\n      'campaigns': ['campaign', 'email', 'sms', 'whatsapp', 'marketing', 'newsletter'],\n      'analytics': ['analytics', 'metrics', 'performance', 'stats', 'data', 'tracking'],\n      'workflows': ['workflow', 'automation', 'process', 'journey', 'funnel'],\n      'transactions': ['transaction', 'payment', 'revenue', 'money', 'financial', 'billing']\n    };\n\n    for (const [source, keywords] of Object.entries(dataSources)) {\n      if (keywords.some(keyword => query.includes(keyword))) {\n        return source;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Detect desired report format\n   */\n  private detectReportFormat(query: string, defaultFormat?: string): 'CSV' | 'Excel' | 'PDF' | 'JSON' {\n    if (query.includes('pdf')) return 'PDF';\n    if (query.includes('excel') || query.includes('xlsx') || query.includes('spreadsheet')) return 'Excel';\n    if (query.includes('csv')) return 'CSV';\n    if (query.includes('json')) return 'JSON';\n    \n    return defaultFormat as any || 'Excel'; // Default to Excel for business reports\n  }\n\n  /**\n   * Generate appropriate columns for the report\n   */\n  private generateReportColumns(dataSource: string, query: string): ExportColumn[] {\n    const columnSets = {\n      contacts: [\n        { key: 'firstName', label: 'First Name', type: 'string' as const },\n        { key: 'lastName', label: 'Last Name', type: 'string' as const },\n        { key: 'email', label: 'Email', type: 'string' as const },\n        { key: 'phone', label: 'Phone', type: 'string' as const },\n        { key: 'company', label: 'Company', type: 'string' as const },\n        { key: 'isActive', label: 'Active', type: 'boolean' as const },\n        { key: 'tags', label: 'Tags', type: 'string' as const },\n        { key: 'createdAt', label: 'Created Date', type: 'date' as const }\n      ],\n      campaigns: [\n        { key: 'name', label: 'Campaign Name', type: 'string' as const },\n        { key: 'type', label: 'Type', type: 'string' as const },\n        { key: 'status', label: 'Status', type: 'string' as const },\n        { key: 'sentCount', label: 'Sent', type: 'number' as const },\n        { key: 'openRate', label: 'Open Rate', type: 'percentage' as const },\n        { key: 'clickRate', label: 'Click Rate', type: 'percentage' as const },\n        { key: 'createdAt', label: 'Created Date', type: 'date' as const }\n      ],\n      analytics: [\n        { key: 'entity', label: 'Entity', type: 'string' as const },\n        { key: 'event', label: 'Event', type: 'string' as const },\n        { key: 'value', label: 'Value', type: 'number' as const },\n        { key: 'timestamp', label: 'Timestamp', type: 'date' as const }\n      ],\n      workflows: [\n        { key: 'name', label: 'Workflow Name', type: 'string' as const },\n        { key: 'status', label: 'Status', type: 'string' as const },\n        { key: 'nodeCount', label: 'Nodes', type: 'number' as const },\n        { key: 'executionCount', label: 'Executions', type: 'number' as const },\n        { key: 'successfulExecutions', label: 'Successful', type: 'number' as const },\n        { key: 'createdAt', label: 'Created Date', type: 'date' as const }\n      ],\n      transactions: [\n        { key: 'id', label: 'Transaction ID', type: 'string' as const },\n        { key: 'amount', label: 'Amount', type: 'currency' as const },\n        { key: 'status', label: 'Status', type: 'string' as const },\n        { key: 'date', label: 'Date', type: 'date' as const }\n      ]\n    };\n\n    return columnSets[dataSource as keyof typeof columnSets] || [];\n  }\n\n  /**\n   * Extract filters from natural language query\n   */\n  private extractFilters(query: string, intent: any): Record<string, any> {\n    const filters: Record<string, any> = {};\n\n    // Date range filters\n    if (query.includes('last week')) {\n      const lastWeek = new Date();\n      lastWeek.setDate(lastWeek.getDate() - 7);\n      filters.createdAfter = lastWeek.toISOString();\n    } else if (query.includes('last month')) {\n      const lastMonth = new Date();\n      lastMonth.setMonth(lastMonth.getMonth() - 1);\n      filters.createdAfter = lastMonth.toISOString();\n    } else if (query.includes('this year')) {\n      const thisYear = new Date(new Date().getFullYear(), 0, 1);\n      filters.createdAfter = thisYear.toISOString();\n    }\n\n    // Status filters\n    if (query.includes('active')) {\n      filters.isActive = true;\n    } else if (query.includes('inactive')) {\n      filters.isActive = false;\n    }\n\n    // Limit filters\n    const limitMatch = query.match(/(\\d+)\\s*(top|first|limit)/i);\n    if (limitMatch) {\n      filters.limit = Number.parseInt(limitMatch[1]);\n    }\n\n    return filters;\n  }\n\n  /**\n   * Generate report title\n   */\n  private generateReportTitle(dataSource: string, query: string): string {\n    const now = new Date().toLocaleDateString();\n    \n    if (query.includes('performance')) {\n      return `${dataSource.charAt(0).toUpperCase() + dataSource.slice(1)} Performance Report - ${now}`;\n    } else if (query.includes('summary')) {\n      return `${dataSource.charAt(0).toUpperCase() + dataSource.slice(1)} Summary Report - ${now}`;\n    } else if (query.includes('export')) {\n      return `${dataSource.charAt(0).toUpperCase() + dataSource.slice(1)} Export - ${now}`;\n    } else {\n      return `${dataSource.charAt(0).toUpperCase() + dataSource.slice(1)} Report - ${now}`;\n    }\n  }\n\n  /**\n   * Extract report purpose\n   */\n  private extractReportPurpose(query: string, intent: any): string {\n    if (query.includes('audit')) return 'Audit and compliance review';\n    if (query.includes('analysis')) return 'Data analysis and insights';\n    if (query.includes('performance')) return 'Performance monitoring and optimization';\n    if (query.includes('backup') || query.includes('export')) return 'Data backup and export';\n    return 'Business intelligence and reporting';\n  }\n\n  /**\n   * Determine if charts should be included\n   */\n  private shouldIncludeCharts(query: string, format: string): boolean {\n    if (format === 'CSV' || format === 'JSON') return false;\n    return query.includes('chart') || query.includes('graph') || query.includes('visual');\n  }\n\n  /**\n   * Suggest chart types based on data\n   */\n  private suggestChartTypes(dataSource: string, columns: ExportColumn[]): string[] {\n    const chartTypes: string[] = [];\n    \n    const hasDateColumn = columns.some(col => col.type === 'date');\n    const hasNumberColumns = columns.filter(col => col.type === 'number' || col.type === 'currency').length;\n    \n    if (hasDateColumn && hasNumberColumns > 0) {\n      chartTypes.push('line', 'area');\n    }\n    \n    if (hasNumberColumns > 0) {\n      chartTypes.push('bar', 'pie');\n    }\n    \n    return chartTypes.length > 0 ? chartTypes : ['bar'];\n  }\n\n  /**\n   * Validate user permissions for report\n   */\n  private async validateReportPermissions(\n    reportDef: IntelligentReportDefinition, \n    request: ReportRequest\n  ): Promise<{ allowed: boolean; reason?: string }> {\n    // Check data source permissions\n    const dataSourcePermissions = {\n      'contacts': Permission.VIEW_CONTACT,\n      'campaigns': Permission.VIEW_CAMPAIGN,\n      'analytics': Permission.VIEW_ANALYTICS,\n      'workflows': Permission.VIEW_WORKFLOW,\n      'transactions': Permission.VIEW_FINANCIAL_DATA\n    };\n\n    const requiredPermission = dataSourcePermissions[reportDef.dataSource as keyof typeof dataSourcePermissions];\n    \n    if (requiredPermission) {\n      const hasPermission = AuthorizationService.hasPermission(\n        request.userRole as any,\n        requiredPermission\n      );\n\n      if (!hasPermission) {\n        return {\n          allowed: false,\n          reason: `You don't have permission to access ${reportDef.dataSource} data`\n        };\n      }\n    }\n\n    return { allowed: true };\n  }\n\n  /**\n   * Estimate report size\n   */\n  private async estimateReportSize(reportDef: IntelligentReportDefinition): Promise<number> {\n    // Simple estimation based on data source\n    const estimates = {\n      'contacts': 5000,\n      'campaigns': 500,\n      'analytics': 10000,\n      'workflows': 200,\n      'transactions': 1000\n    };\n\n    return estimates[reportDef.dataSource as keyof typeof estimates] || 1000;\n  }\n\n  /**\n   * Generate appropriate filename\n   */\n  private generateReportFilename(title: string, format: string): string {\n    const sanitized = title.replace(/[^a-zA-Z0-9\\s-]/g, '').replace(/\\s+/g, '_');\n    const timestamp = new Date().toISOString().split('T')[0];\n    return `${sanitized}_${timestamp}.${format.toLowerCase()}`;\n  }\n\n  /**\n   * Schedule recurring report\n   */\n  private async scheduleReport(exportJob: ExportJob, schedule: any): Promise<void> {\n    logger.info('Scheduling recurring report', {\n      reportId: exportJob.id,\n      frequency: schedule.frequency,\n      recipients: schedule.recipients\n    });\n    \n    // In production, this would integrate with a job scheduler like Bull or similar\n    // For now, just log the scheduling request\n  }\n\n  /**\n   * Get report suggestions for unclear queries\n   */\n  private getReportSuggestions(query: string): string[] {\n    const suggestions = [\n      'Try: \"Generate a contacts report in Excel format\"',\n      'Try: \"Export campaign performance data as PDF\"',\n      'Try: \"Create analytics summary for last month\"',\n      'Try: \"Generate workflow report with charts\"'\n    ];\n\n    // Add specific suggestions based on query content\n    if (query.includes('contact')) {\n      suggestions.unshift('Try: \"Export all active contacts to Excel\"');\n    } else if (query.includes('campaign')) {\n      suggestions.unshift('Try: \"Generate campaign performance report as PDF\"');\n    }\n\n    return suggestions.slice(0, 3);\n  }\n\n  /**\n   * Get available report types\n   */\n  getAvailableReportTypes(): Array<{ type: string; description: string; formats: string[] }> {\n    return [\n      {\n        type: 'contacts',\n        description: 'Contact and customer data reports',\n        formats: ['CSV', 'Excel', 'PDF']\n      },\n      {\n        type: 'campaigns',\n        description: 'Marketing campaign performance reports',\n        formats: ['Excel', 'PDF', 'CSV']\n      },\n      {\n        type: 'analytics',\n        description: 'Analytics and metrics reports',\n        formats: ['Excel', 'PDF', 'JSON']\n      },\n      {\n        type: 'workflows',\n        description: 'Workflow and automation reports',\n        formats: ['Excel', 'PDF', 'CSV']\n      }\n    ];\n  }\n}\n\n// Export singleton instance\nexport const intelligentReportingEngine = new IntelligentReportingEngine();\n\n// Convenience functions\nexport async function generateAIReport(request: ReportRequest): Promise<ReportResult> {\n  return intelligentReportingEngine.generateReport(request);\n}\n\nexport function getAvailableReportTypes() {\n  return intelligentReportingEngine.getAvailableReportTypes();\n}"],"names":["generateAIReport","getAvailableReportTypes","intelligentReportingEngine","IntelligentReportingEngine","constructor","exportManager","EnterpriseExportManager","getInstance","generateReport","request","logger","info","query","substring","userId","organizationId","intent","intelligentIntentAnalyzer","analyzeIntent","confidence","success","message","suggestions","getReportSuggestions","reportDef","parseReportQuery","hasPermission","validateReportPermissions","allowed","reason","error","exportRequest","dataSource","columns","filters","options","format","filename","generateReportFilename","title","includeHeaders","includeMetadata","includeTimestamp","compliance","includeAuditTrail","redactSensitiveData","encryptionLevel","requestedBy","userName","role","userRole","tenantId","purpose","estimatedRows","estimateReportSize","exportJob","createExportJob","schedule","scheduleReport","reportId","id","Error","String","lowerQuery","toLowerCase","detectDataSource","detectReportFormat","generateReportColumns","extractFilters","generateReportTitle","extractReportPurpose","includeCharts","shouldIncludeCharts","chartTypes","suggestChartTypes","undefined","dataSources","source","keywords","Object","entries","some","keyword","includes","defaultFormat","columnSets","contacts","key","label","type","campaigns","analytics","workflows","transactions","lastWeek","Date","setDate","getDate","createdAfter","toISOString","lastMonth","setMonth","getMonth","thisYear","getFullYear","isActive","limitMatch","match","limit","Number","parseInt","now","toLocaleDateString","charAt","toUpperCase","slice","hasDateColumn","col","hasNumberColumns","filter","length","push","dataSourcePermissions","Permission","VIEW_CONTACT","VIEW_CAMPAIGN","VIEW_ANALYTICS","VIEW_WORKFLOW","VIEW_FINANCIAL_DATA","requiredPermission","AuthorizationService","estimates","sanitized","replace","timestamp","split","frequency","recipients","unshift","description","formats"],"mappings":"AAAA;;;;;CAKC;;;;;;;;;;;IA4fqBA,gBAAgB;eAAhBA;;IAINC,uBAAuB;eAAvBA;;IAPHC,0BAA0B;eAA1BA;;;wBAvfU;kCAMhB;2CACmC;+BACO;AAuCjD,MAAMC;IAGJC,aAAc;QACZ,IAAI,CAACC,aAAa,GAAGC,yCAAuB,CAACC,WAAW;IAC1D;IAEA;;GAEC,GACD,MAAMC,eAAeC,OAAsB,EAAyB;QAClE,IAAI;YACFC,cAAM,CAACC,IAAI,CAAC,kCAAkC;gBAC5CC,OAAOH,QAAQG,KAAK,CAACC,SAAS,CAAC,GAAG;gBAClCC,QAAQL,QAAQK,MAAM;gBACtBC,gBAAgBN,QAAQM,cAAc;YACxC;YAEA,0DAA0D;YAC1D,MAAMC,SAAS,MAAMC,oDAAyB,CAACC,aAAa,CAACT,QAAQG,KAAK;YAE1E,IAAII,OAAOG,UAAU,GAAG,KAAK;gBAC3B,OAAO;oBACLC,SAAS;oBACTC,SAAS;oBACTC,aAAa,IAAI,CAACC,oBAAoB,CAACd,QAAQG,KAAK;gBACtD;YACF;YAEA,gDAAgD;YAChD,MAAMY,YAAY,MAAM,IAAI,CAACC,gBAAgB,CAAChB,QAAQG,KAAK,EAAEI,QAAQP;YAErE,IAAI,CAACe,WAAW;gBACd,OAAO;oBACLJ,SAAS;oBACTC,SAAS;oBACTC,aAAa,IAAI,CAACC,oBAAoB,CAACd,QAAQG,KAAK;gBACtD;YACF;YAEA,uBAAuB;YACvB,MAAMc,gBAAgB,MAAM,IAAI,CAACC,yBAAyB,CAACH,WAAWf;YACtE,IAAI,CAACiB,cAAcE,OAAO,EAAE;gBAC1B,OAAO;oBACLR,SAAS;oBACTC,SAASK,cAAcG,MAAM,IAAI;oBACjCC,OAAO;gBACT;YACF;YAEA,wBAAwB;YACxB,MAAMC,gBAA+B;gBACnCC,YAAYR,UAAUQ,UAAU;gBAChCC,SAAST,UAAUS,OAAO;gBAC1BC,SAAS;oBAAE,GAAGV,UAAUU,OAAO;oBAAEnB,gBAAgBN,QAAQM,cAAc;gBAAC;gBACxEoB,SAAS;oBACPC,QAAQZ,UAAUY,MAAM;oBACxBC,UAAU,IAAI,CAACC,sBAAsB,CAACd,UAAUe,KAAK,EAAEf,UAAUY,MAAM;oBACvEI,gBAAgB;oBAChBC,iBAAiB;oBACjBC,kBAAkB;oBAClBC,YAAY;wBACVC,mBAAmB;wBACnBC,qBAAqB;wBACrBC,iBAAiB;oBACnB;gBACF;gBACAC,aAAa;oBACXjC,QAAQL,QAAQK,MAAM;oBACtBkC,UAAU;oBACVC,MAAMxC,QAAQyC,QAAQ;oBACtBC,UAAU1C,QAAQM,cAAc;gBAClC;gBACAqC,SAAS,CAAC,qBAAqB,EAAE5B,UAAU4B,OAAO,EAAE;gBACpDC,eAAe,MAAM,IAAI,CAACC,kBAAkB,CAAC9B;YAC/C;YAEA,sBAAsB;YACtB,MAAM+B,YAAY,MAAM,IAAI,CAAClD,aAAa,CAACmD,eAAe,CAACzB;YAE3D,wBAAwB;YACxB,IAAItB,QAAQ0B,OAAO,EAAEsB,UAAU;gBAC7B,MAAM,IAAI,CAACC,cAAc,CAACH,WAAW9C,QAAQ0B,OAAO,CAACsB,QAAQ;YAC/D;YAEA,OAAO;gBACLrC,SAAS;gBACTC,SAAS,CAAC,WAAW,EAAEG,UAAUe,KAAK,CAAC,2CAA2C,EAAEf,UAAUY,MAAM,CAAC,QAAQ,CAAC;gBAC9GuB,UAAUJ,UAAUK,EAAE;gBACtBP,eAAetB,cAAcsB,aAAa;gBAC1CjB,QAAQZ,UAAUY,MAAM;YAC1B;QAEF,EAAE,OAAON,OAAO;YACdpB,cAAM,CAACoB,KAAK,CAAC,+BAA+B;gBAC1CA,OAAOA,iBAAiB+B,QAAQ/B,MAAMT,OAAO,GAAGyC,OAAOhC;gBACvDlB,OAAOH,QAAQG,KAAK;gBACpBE,QAAQL,QAAQK,MAAM;YACxB;YAEA,OAAO;gBACLM,SAAS;gBACTC,SAAS;gBACTS,OAAOA,iBAAiB+B,QAAQ/B,MAAMT,OAAO,GAAG;gBAChDC,aAAa;oBACX;oBACA;oBACA;iBACD;YACH;QACF;IACF;IAEA;;GAEC,GACD,MAAcG,iBACZb,KAAa,EACbI,MAAW,EACXP,OAAsB,EACuB;QAC7C,MAAMsD,aAAanD,MAAMoD,WAAW;QAEpC,wBAAwB;QACxB,MAAMhC,aAAa,IAAI,CAACiC,gBAAgB,CAACF;QACzC,IAAI,CAAC/B,YAAY,OAAO;QAExB,0BAA0B;QAC1B,MAAMI,SAAS,IAAI,CAAC8B,kBAAkB,CAACH,YAAYtD,QAAQ0B,OAAO,EAAEC;QAEpE,8DAA8D;QAC9D,MAAMH,UAAU,IAAI,CAACkC,qBAAqB,CAACnC,YAAY+B;QAEvD,6BAA6B;QAC7B,MAAM7B,UAAU,IAAI,CAACkC,cAAc,CAACL,YAAY/C;QAEhD,wBAAwB;QACxB,MAAMuB,QAAQ,IAAI,CAAC8B,mBAAmB,CAACrC,YAAY+B;QAEnD,oBAAoB;QACpB,MAAMX,UAAU,IAAI,CAACkB,oBAAoB,CAACP,YAAY/C;QAEtD,gCAAgC;QAChC,MAAMuD,gBAAgB,IAAI,CAACC,mBAAmB,CAACT,YAAY3B;QAE3D,OAAO;YACLG;YACAP;YACAC;YACAC;YACAE;YACAgB;YACAmB;YACAE,YAAYF,gBAAgB,IAAI,CAACG,iBAAiB,CAAC1C,YAAYC,WAAW0C;QAC5E;IACF;IAEA;;GAEC,GACD,AAAQV,iBAAiBrD,KAAa,EAAiB;QACrD,MAAMgE,cAAc;YAClB,YAAY;gBAAC;gBAAW;gBAAY;gBAAQ;gBAAc;gBAAQ;aAAS;YAC3E,aAAa;gBAAC;gBAAY;gBAAS;gBAAO;gBAAY;gBAAa;aAAa;YAChF,aAAa;gBAAC;gBAAa;gBAAW;gBAAe;gBAAS;gBAAQ;aAAW;YACjF,aAAa;gBAAC;gBAAY;gBAAc;gBAAW;gBAAW;aAAS;YACvE,gBAAgB;gBAAC;gBAAe;gBAAW;gBAAW;gBAAS;gBAAa;aAAU;QACxF;QAEA,KAAK,MAAM,CAACC,QAAQC,SAAS,IAAIC,OAAOC,OAAO,CAACJ,aAAc;YAC5D,IAAIE,SAASG,IAAI,CAACC,CAAAA,UAAWtE,MAAMuE,QAAQ,CAACD,WAAW;gBACrD,OAAOL;YACT;QACF;QAEA,OAAO;IACT;IAEA;;GAEC,GACD,AAAQX,mBAAmBtD,KAAa,EAAEwE,aAAsB,EAAoC;QAClG,IAAIxE,MAAMuE,QAAQ,CAAC,QAAQ,OAAO;QAClC,IAAIvE,MAAMuE,QAAQ,CAAC,YAAYvE,MAAMuE,QAAQ,CAAC,WAAWvE,MAAMuE,QAAQ,CAAC,gBAAgB,OAAO;QAC/F,IAAIvE,MAAMuE,QAAQ,CAAC,QAAQ,OAAO;QAClC,IAAIvE,MAAMuE,QAAQ,CAAC,SAAS,OAAO;QAEnC,OAAOC,iBAAwB,SAAS,wCAAwC;IAClF;IAEA;;GAEC,GACD,AAAQjB,sBAAsBnC,UAAkB,EAAEpB,KAAa,EAAkB;QAC/E,MAAMyE,aAAa;YACjBC,UAAU;gBACR;oBAAEC,KAAK;oBAAaC,OAAO;oBAAcC,MAAM;gBAAkB;gBACjE;oBAAEF,KAAK;oBAAYC,OAAO;oBAAaC,MAAM;gBAAkB;gBAC/D;oBAAEF,KAAK;oBAASC,OAAO;oBAASC,MAAM;gBAAkB;gBACxD;oBAAEF,KAAK;oBAASC,OAAO;oBAASC,MAAM;gBAAkB;gBACxD;oBAAEF,KAAK;oBAAWC,OAAO;oBAAWC,MAAM;gBAAkB;gBAC5D;oBAAEF,KAAK;oBAAYC,OAAO;oBAAUC,MAAM;gBAAmB;gBAC7D;oBAAEF,KAAK;oBAAQC,OAAO;oBAAQC,MAAM;gBAAkB;gBACtD;oBAAEF,KAAK;oBAAaC,OAAO;oBAAgBC,MAAM;gBAAgB;aAClE;YACDC,WAAW;gBACT;oBAAEH,KAAK;oBAAQC,OAAO;oBAAiBC,MAAM;gBAAkB;gBAC/D;oBAAEF,KAAK;oBAAQC,OAAO;oBAAQC,MAAM;gBAAkB;gBACtD;oBAAEF,KAAK;oBAAUC,OAAO;oBAAUC,MAAM;gBAAkB;gBAC1D;oBAAEF,KAAK;oBAAaC,OAAO;oBAAQC,MAAM;gBAAkB;gBAC3D;oBAAEF,KAAK;oBAAYC,OAAO;oBAAaC,MAAM;gBAAsB;gBACnE;oBAAEF,KAAK;oBAAaC,OAAO;oBAAcC,MAAM;gBAAsB;gBACrE;oBAAEF,KAAK;oBAAaC,OAAO;oBAAgBC,MAAM;gBAAgB;aAClE;YACDE,WAAW;gBACT;oBAAEJ,KAAK;oBAAUC,OAAO;oBAAUC,MAAM;gBAAkB;gBAC1D;oBAAEF,KAAK;oBAASC,OAAO;oBAASC,MAAM;gBAAkB;gBACxD;oBAAEF,KAAK;oBAASC,OAAO;oBAASC,MAAM;gBAAkB;gBACxD;oBAAEF,KAAK;oBAAaC,OAAO;oBAAaC,MAAM;gBAAgB;aAC/D;YACDG,WAAW;gBACT;oBAAEL,KAAK;oBAAQC,OAAO;oBAAiBC,MAAM;gBAAkB;gBAC/D;oBAAEF,KAAK;oBAAUC,OAAO;oBAAUC,MAAM;gBAAkB;gBAC1D;oBAAEF,KAAK;oBAAaC,OAAO;oBAASC,MAAM;gBAAkB;gBAC5D;oBAAEF,KAAK;oBAAkBC,OAAO;oBAAcC,MAAM;gBAAkB;gBACtE;oBAAEF,KAAK;oBAAwBC,OAAO;oBAAcC,MAAM;gBAAkB;gBAC5E;oBAAEF,KAAK;oBAAaC,OAAO;oBAAgBC,MAAM;gBAAgB;aAClE;YACDI,cAAc;gBACZ;oBAAEN,KAAK;oBAAMC,OAAO;oBAAkBC,MAAM;gBAAkB;gBAC9D;oBAAEF,KAAK;oBAAUC,OAAO;oBAAUC,MAAM;gBAAoB;gBAC5D;oBAAEF,KAAK;oBAAUC,OAAO;oBAAUC,MAAM;gBAAkB;gBAC1D;oBAAEF,KAAK;oBAAQC,OAAO;oBAAQC,MAAM;gBAAgB;aACrD;QACH;QAEA,OAAOJ,UAAU,CAACrD,WAAsC,IAAI,EAAE;IAChE;IAEA;;GAEC,GACD,AAAQoC,eAAexD,KAAa,EAAEI,MAAW,EAAuB;QACtE,MAAMkB,UAA+B,CAAC;QAEtC,qBAAqB;QACrB,IAAItB,MAAMuE,QAAQ,CAAC,cAAc;YAC/B,MAAMW,WAAW,IAAIC;YACrBD,SAASE,OAAO,CAACF,SAASG,OAAO,KAAK;YACtC/D,QAAQgE,YAAY,GAAGJ,SAASK,WAAW;QAC7C,OAAO,IAAIvF,MAAMuE,QAAQ,CAAC,eAAe;YACvC,MAAMiB,YAAY,IAAIL;YACtBK,UAAUC,QAAQ,CAACD,UAAUE,QAAQ,KAAK;YAC1CpE,QAAQgE,YAAY,GAAGE,UAAUD,WAAW;QAC9C,OAAO,IAAIvF,MAAMuE,QAAQ,CAAC,cAAc;YACtC,MAAMoB,WAAW,IAAIR,KAAK,IAAIA,OAAOS,WAAW,IAAI,GAAG;YACvDtE,QAAQgE,YAAY,GAAGK,SAASJ,WAAW;QAC7C;QAEA,iBAAiB;QACjB,IAAIvF,MAAMuE,QAAQ,CAAC,WAAW;YAC5BjD,QAAQuE,QAAQ,GAAG;QACrB,OAAO,IAAI7F,MAAMuE,QAAQ,CAAC,aAAa;YACrCjD,QAAQuE,QAAQ,GAAG;QACrB;QAEA,gBAAgB;QAChB,MAAMC,aAAa9F,MAAM+F,KAAK,CAAC;QAC/B,IAAID,YAAY;YACdxE,QAAQ0E,KAAK,GAAGC,OAAOC,QAAQ,CAACJ,UAAU,CAAC,EAAE;QAC/C;QAEA,OAAOxE;IACT;IAEA;;GAEC,GACD,AAAQmC,oBAAoBrC,UAAkB,EAAEpB,KAAa,EAAU;QACrE,MAAMmG,MAAM,IAAIhB,OAAOiB,kBAAkB;QAEzC,IAAIpG,MAAMuE,QAAQ,CAAC,gBAAgB;YACjC,OAAO,GAAGnD,WAAWiF,MAAM,CAAC,GAAGC,WAAW,KAAKlF,WAAWmF,KAAK,CAAC,GAAG,sBAAsB,EAAEJ,KAAK;QAClG,OAAO,IAAInG,MAAMuE,QAAQ,CAAC,YAAY;YACpC,OAAO,GAAGnD,WAAWiF,MAAM,CAAC,GAAGC,WAAW,KAAKlF,WAAWmF,KAAK,CAAC,GAAG,kBAAkB,EAAEJ,KAAK;QAC9F,OAAO,IAAInG,MAAMuE,QAAQ,CAAC,WAAW;YACnC,OAAO,GAAGnD,WAAWiF,MAAM,CAAC,GAAGC,WAAW,KAAKlF,WAAWmF,KAAK,CAAC,GAAG,UAAU,EAAEJ,KAAK;QACtF,OAAO;YACL,OAAO,GAAG/E,WAAWiF,MAAM,CAAC,GAAGC,WAAW,KAAKlF,WAAWmF,KAAK,CAAC,GAAG,UAAU,EAAEJ,KAAK;QACtF;IACF;IAEA;;GAEC,GACD,AAAQzC,qBAAqB1D,KAAa,EAAEI,MAAW,EAAU;QAC/D,IAAIJ,MAAMuE,QAAQ,CAAC,UAAU,OAAO;QACpC,IAAIvE,MAAMuE,QAAQ,CAAC,aAAa,OAAO;QACvC,IAAIvE,MAAMuE,QAAQ,CAAC,gBAAgB,OAAO;QAC1C,IAAIvE,MAAMuE,QAAQ,CAAC,aAAavE,MAAMuE,QAAQ,CAAC,WAAW,OAAO;QACjE,OAAO;IACT;IAEA;;GAEC,GACD,AAAQX,oBAAoB5D,KAAa,EAAEwB,MAAc,EAAW;QAClE,IAAIA,WAAW,SAASA,WAAW,QAAQ,OAAO;QAClD,OAAOxB,MAAMuE,QAAQ,CAAC,YAAYvE,MAAMuE,QAAQ,CAAC,YAAYvE,MAAMuE,QAAQ,CAAC;IAC9E;IAEA;;GAEC,GACD,AAAQT,kBAAkB1C,UAAkB,EAAEC,OAAuB,EAAY;QAC/E,MAAMwC,aAAuB,EAAE;QAE/B,MAAM2C,gBAAgBnF,QAAQgD,IAAI,CAACoC,CAAAA,MAAOA,IAAI5B,IAAI,KAAK;QACvD,MAAM6B,mBAAmBrF,QAAQsF,MAAM,CAACF,CAAAA,MAAOA,IAAI5B,IAAI,KAAK,YAAY4B,IAAI5B,IAAI,KAAK,YAAY+B,MAAM;QAEvG,IAAIJ,iBAAiBE,mBAAmB,GAAG;YACzC7C,WAAWgD,IAAI,CAAC,QAAQ;QAC1B;QAEA,IAAIH,mBAAmB,GAAG;YACxB7C,WAAWgD,IAAI,CAAC,OAAO;QACzB;QAEA,OAAOhD,WAAW+C,MAAM,GAAG,IAAI/C,aAAa;YAAC;SAAM;IACrD;IAEA;;GAEC,GACD,MAAc9C,0BACZH,SAAsC,EACtCf,OAAsB,EAC0B;QAChD,gCAAgC;QAChC,MAAMiH,wBAAwB;YAC5B,YAAYC,yBAAU,CAACC,YAAY;YACnC,aAAaD,yBAAU,CAACE,aAAa;YACrC,aAAaF,yBAAU,CAACG,cAAc;YACtC,aAAaH,yBAAU,CAACI,aAAa;YACrC,gBAAgBJ,yBAAU,CAACK,mBAAmB;QAChD;QAEA,MAAMC,qBAAqBP,qBAAqB,CAAClG,UAAUQ,UAAU,CAAuC;QAE5G,IAAIiG,oBAAoB;YACtB,MAAMvG,gBAAgBwG,mCAAoB,CAACxG,aAAa,CACtDjB,QAAQyC,QAAQ,EAChB+E;YAGF,IAAI,CAACvG,eAAe;gBAClB,OAAO;oBACLE,SAAS;oBACTC,QAAQ,CAAC,oCAAoC,EAAEL,UAAUQ,UAAU,CAAC,KAAK,CAAC;gBAC5E;YACF;QACF;QAEA,OAAO;YAAEJ,SAAS;QAAK;IACzB;IAEA;;GAEC,GACD,MAAc0B,mBAAmB9B,SAAsC,EAAmB;QACxF,yCAAyC;QACzC,MAAM2G,YAAY;YAChB,YAAY;YACZ,aAAa;YACb,aAAa;YACb,aAAa;YACb,gBAAgB;QAClB;QAEA,OAAOA,SAAS,CAAC3G,UAAUQ,UAAU,CAA2B,IAAI;IACtE;IAEA;;GAEC,GACD,AAAQM,uBAAuBC,KAAa,EAAEH,MAAc,EAAU;QACpE,MAAMgG,YAAY7F,MAAM8F,OAAO,CAAC,oBAAoB,IAAIA,OAAO,CAAC,QAAQ;QACxE,MAAMC,YAAY,IAAIvC,OAAOI,WAAW,GAAGoC,KAAK,CAAC,IAAI,CAAC,EAAE;QACxD,OAAO,GAAGH,UAAU,CAAC,EAAEE,UAAU,CAAC,EAAElG,OAAO4B,WAAW,IAAI;IAC5D;IAEA;;GAEC,GACD,MAAcN,eAAeH,SAAoB,EAAEE,QAAa,EAAiB;QAC/E/C,cAAM,CAACC,IAAI,CAAC,+BAA+B;YACzCgD,UAAUJ,UAAUK,EAAE;YACtB4E,WAAW/E,SAAS+E,SAAS;YAC7BC,YAAYhF,SAASgF,UAAU;QACjC;IAEA,gFAAgF;IAChF,2CAA2C;IAC7C;IAEA;;GAEC,GACD,AAAQlH,qBAAqBX,KAAa,EAAY;QACpD,MAAMU,cAAc;YAClB;YACA;YACA;YACA;SACD;QAED,kDAAkD;QAClD,IAAIV,MAAMuE,QAAQ,CAAC,YAAY;YAC7B7D,YAAYoH,OAAO,CAAC;QACtB,OAAO,IAAI9H,MAAMuE,QAAQ,CAAC,aAAa;YACrC7D,YAAYoH,OAAO,CAAC;QACtB;QAEA,OAAOpH,YAAY6F,KAAK,CAAC,GAAG;IAC9B;IAEA;;GAEC,GACDlH,0BAA2F;QACzF,OAAO;YACL;gBACEwF,MAAM;gBACNkD,aAAa;gBACbC,SAAS;oBAAC;oBAAO;oBAAS;iBAAM;YAClC;YACA;gBACEnD,MAAM;gBACNkD,aAAa;gBACbC,SAAS;oBAAC;oBAAS;oBAAO;iBAAM;YAClC;YACA;gBACEnD,MAAM;gBACNkD,aAAa;gBACbC,SAAS;oBAAC;oBAAS;oBAAO;iBAAO;YACnC;YACA;gBACEnD,MAAM;gBACNkD,aAAa;gBACbC,SAAS;oBAAC;oBAAS;oBAAO;iBAAM;YAClC;SACD;IACH;AACF;AAGO,MAAM1I,6BAA6B,IAAIC;AAGvC,eAAeH,iBAAiBS,OAAsB;IAC3D,OAAOP,2BAA2BM,cAAc,CAACC;AACnD;AAEO,SAASR;IACd,OAAOC,2BAA2BD,uBAAuB;AAC3D"}