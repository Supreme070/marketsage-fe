6cd425792811fed91d64e1818fce1c37
/**
 * Autonomous Compliance Monitoring System
 * ======================================
 * AI-powered compliance monitoring specifically designed for African fintech markets
 * Builds upon existing GDPR compliance, audit logging, and security infrastructure
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    AutonomousComplianceMonitor: function() {
        return AutonomousComplianceMonitor;
    },
    autonomousComplianceMonitor: function() {
        return autonomousComplianceMonitor;
    }
});
const _logger = require("../logger");
const _api = require("@opentelemetry/api");
const _events = require("events");
const _prisma = /*#__PURE__*/ _interop_require_default(require("../db/prisma"));
const _enterpriseauditlogger = require("../audit/enterprise-audit-logger");
const _securitymonitor = require("../security/security-monitor");
const _multiagentcoordinator = require("../ai/multi-agent-coordinator");
const _strategicdecisionengine = require("../ai/strategic-decision-engine");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
class AutonomousComplianceMonitor extends _events.EventEmitter {
    constructor(){
        super(), this.frameworks = new Map(), this.violations = new Map(), this.activeChecks = new Map(), this.complianceScore = 100, this.lastAssessment = new Date(), this.monitoringInterval = null;
        this.initializeComplianceMonitoring();
    }
    /**
   * Initialize autonomous compliance monitoring
   */ async initializeComplianceMonitoring() {
        try {
            _logger.logger.info('Initializing autonomous compliance monitoring...');
            // Load African regulatory frameworks
            await this.loadAfricanComplianceFrameworks();
            // Connect to existing systems
            this.connectToExistingComplianceSystems();
            // Start continuous monitoring
            this.startContinuousMonitoring();
            // Schedule regular assessments
            this.scheduleRegularAssessments();
            _logger.logger.info('Autonomous compliance monitoring initialized successfully');
        } catch (error) {
            _logger.logger.error('Failed to initialize autonomous compliance monitoring', {
                error: error instanceof Error ? error.message : String(error)
            });
            throw error;
        }
    }
    /**
   * Load compliance frameworks for African markets
   */ async loadAfricanComplianceFrameworks() {
        // Nigeria - NDPR Framework
        const nigeriaFramework = {
            id: 'nigeria_ndpr',
            name: 'Nigeria Data Protection Regulation (NDPR)',
            country: 'Nigeria',
            type: 'data_protection',
            enabled: true,
            riskLevel: 'high',
            lastAssessment: new Date(),
            nextAssessment: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000),
            regulations: [
                {
                    id: 'ndpr_2019',
                    name: 'Nigeria Data Protection Regulation 2019',
                    description: 'NITDA regulation for protection of personal data',
                    requirements: [
                        {
                            id: 'ndpr_consent',
                            title: 'Lawful Basis for Processing',
                            description: 'Must have lawful basis (consent, contract, legal obligation, vital interests, public task, legitimate interests)',
                            category: 'consent_management',
                            mandatory: true,
                            riskLevel: 'high',
                            autoCheckable: true,
                            frequency: 'continuous',
                            checkFunction: 'checkConsentCompliance',
                            evidence: [
                                'consent_records',
                                'privacy_policies'
                            ]
                        },
                        {
                            id: 'ndpr_dpo',
                            title: 'Data Protection Officer',
                            description: 'Must appoint Data Protection Officer for high-risk processing',
                            category: 'documentation',
                            mandatory: true,
                            riskLevel: 'medium',
                            autoCheckable: false,
                            frequency: 'annually',
                            evidence: [
                                'dpo_appointment',
                                'dpo_training_records'
                            ]
                        },
                        {
                            id: 'ndpr_breach_notification',
                            title: 'Data Breach Notification',
                            description: 'Must notify NITDA within 72 hours of becoming aware of a breach',
                            category: 'incident_response',
                            mandatory: true,
                            riskLevel: 'critical',
                            autoCheckable: true,
                            frequency: 'continuous',
                            checkFunction: 'checkBreachNotificationCompliance',
                            evidence: [
                                'incident_logs',
                                'notification_records'
                            ]
                        }
                    ],
                    penalties: [
                        {
                            type: 'fine',
                            maxAmount: 10000000,
                            currency: 'NGN',
                            description: 'Administrative fines up to â‚¦10 million or 2% of annual gross revenue'
                        }
                    ],
                    deadlines: [
                        {
                            id: 'ndpr_annual_audit',
                            title: 'Annual Data Protection Audit',
                            date: new Date(new Date().getFullYear() + 1, 0, 31),
                            description: 'Submit annual data protection compliance audit to NITDA',
                            severity: 'high',
                            recurring: true,
                            intervalDays: 365
                        }
                    ],
                    applicability: {
                        businessTypes: [
                            'fintech',
                            'telecommunications',
                            'e-commerce'
                        ],
                        dataTypes: [
                            'personal_data',
                            'financial_data',
                            'communication_data'
                        ],
                        userCountThresholds: {
                            min: 1000
                        }
                    }
                }
            ]
        };
        // South Africa - POPIA Framework
        const southAfricaFramework = {
            id: 'south_africa_popia',
            name: 'Protection of Personal Information Act (POPIA)',
            country: 'South Africa',
            type: 'data_protection',
            enabled: true,
            riskLevel: 'high',
            lastAssessment: new Date(),
            nextAssessment: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000),
            regulations: [
                {
                    id: 'popia_2020',
                    name: 'Protection of Personal Information Act 2020',
                    description: 'South African data protection legislation',
                    requirements: [
                        {
                            id: 'popia_lawfulness',
                            title: 'Lawfulness of Processing',
                            description: 'Personal information must be processed lawfully and in a reasonable manner',
                            category: 'data_handling',
                            mandatory: true,
                            riskLevel: 'high',
                            autoCheckable: true,
                            frequency: 'continuous',
                            checkFunction: 'checkLawfulnessCompliance',
                            evidence: [
                                'processing_records',
                                'legal_basis_documentation'
                            ]
                        },
                        {
                            id: 'popia_io_registration',
                            title: 'Information Officer Registration',
                            description: 'Must register Information Officer with Information Regulator',
                            category: 'documentation',
                            mandatory: true,
                            riskLevel: 'medium',
                            autoCheckable: false,
                            frequency: 'annually',
                            evidence: [
                                'io_registration',
                                'io_contact_details'
                            ]
                        },
                        {
                            id: 'popia_data_subject_rights',
                            title: 'Data Subject Rights',
                            description: 'Must facilitate data subject access, correction, and deletion rights',
                            category: 'data_handling',
                            mandatory: true,
                            riskLevel: 'high',
                            autoCheckable: true,
                            frequency: 'continuous',
                            checkFunction: 'checkDataSubjectRights',
                            evidence: [
                                'access_request_logs',
                                'deletion_logs'
                            ]
                        }
                    ],
                    penalties: [
                        {
                            type: 'fine',
                            maxAmount: 10000000,
                            currency: 'ZAR',
                            description: 'Administrative fines up to R10 million or imprisonment up to 10 years'
                        }
                    ],
                    deadlines: [
                        {
                            id: 'popia_impact_assessment',
                            title: 'Privacy Impact Assessment',
                            date: new Date(Date.now() + 180 * 24 * 60 * 60 * 1000),
                            description: 'Conduct privacy impact assessment for high-risk processing',
                            severity: 'high',
                            recurring: false
                        }
                    ],
                    applicability: {
                        businessTypes: [
                            'all'
                        ],
                        dataTypes: [
                            'personal_information'
                        ],
                        userCountThresholds: {
                            min: 1
                        }
                    }
                }
            ]
        };
        // Kenya - Data Protection Act Framework
        const kenyaFramework = {
            id: 'kenya_dpa',
            name: 'Kenya Data Protection Act',
            country: 'Kenya',
            type: 'data_protection',
            enabled: true,
            riskLevel: 'medium',
            lastAssessment: new Date(),
            nextAssessment: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000),
            regulations: [
                {
                    id: 'kenya_dpa_2019',
                    name: 'Data Protection Act 2019',
                    description: 'Kenya data protection legislation',
                    requirements: [
                        {
                            id: 'kenya_dpo_appointment',
                            title: 'Data Protection Officer Appointment',
                            description: 'Must appoint qualified Data Protection Officer',
                            category: 'documentation',
                            mandatory: true,
                            riskLevel: 'medium',
                            autoCheckable: false,
                            frequency: 'annually',
                            evidence: [
                                'dpo_certificate',
                                'dpo_appointment_letter'
                            ]
                        },
                        {
                            id: 'kenya_data_controller_registration',
                            title: 'Data Controller Registration',
                            description: 'Must register as data controller with Office of Data Protection Commissioner',
                            category: 'documentation',
                            mandatory: true,
                            riskLevel: 'high',
                            autoCheckable: false,
                            frequency: 'annually',
                            evidence: [
                                'registration_certificate',
                                'annual_returns'
                            ]
                        }
                    ],
                    penalties: [
                        {
                            type: 'fine',
                            maxAmount: 5000000,
                            currency: 'KES',
                            description: 'Fines up to KES 5 million or imprisonment up to 10 years'
                        }
                    ],
                    deadlines: [
                        {
                            id: 'kenya_annual_return',
                            title: 'Annual Data Protection Return',
                            date: new Date(new Date().getFullYear() + 1, 2, 31),
                            description: 'Submit annual return to Office of Data Protection Commissioner',
                            severity: 'medium',
                            recurring: true,
                            intervalDays: 365
                        }
                    ],
                    applicability: {
                        businessTypes: [
                            'data_controllers',
                            'data_processors'
                        ],
                        dataTypes: [
                            'personal_data'
                        ],
                        userCountThresholds: {
                            min: 1
                        }
                    }
                }
            ]
        };
        // Add frameworks to monitoring
        this.frameworks.set(nigeriaFramework.id, nigeriaFramework);
        this.frameworks.set(southAfricaFramework.id, southAfricaFramework);
        this.frameworks.set(kenyaFramework.id, kenyaFramework);
        _logger.logger.info('Loaded African compliance frameworks', {
            frameworkCount: this.frameworks.size,
            countries: [
                'Nigeria',
                'South Africa',
                'Kenya'
            ]
        });
    }
    /**
   * Connect to existing compliance systems
   */ connectToExistingComplianceSystems() {
        // Listen to security monitor for compliance-relevant events
        _securitymonitor.securityMonitor.on('securityEvent', (event)=>{
            this.handleSecurityEvent(event);
        });
        // Listen to audit logger for compliance violations
        _enterpriseauditlogger.enterpriseAuditLogger.on('audit_event', (event)=>{
            this.handleAuditEvent(event);
        });
        // Connect to strategic decision engine
        _strategicdecisionengine.strategicDecisionEngine.on('compliance_decision_needed', (decision)=>{
            this.handleComplianceDecision(decision);
        });
        _logger.logger.info('Connected to existing compliance systems');
    }
    /**
   * Start continuous compliance monitoring
   */ startContinuousMonitoring() {
        this.monitoringInterval = setInterval(async ()=>{
            await this.performContinuousChecks();
        }, 300000); // Every 5 minutes
        _logger.logger.info('Started continuous compliance monitoring');
    }
    /**
   * Schedule regular compliance assessments
   */ scheduleRegularAssessments() {
        // Daily compliance check
        setInterval(async ()=>{
            await this.performDailyComplianceCheck();
        }, 24 * 60 * 60 * 1000); // Daily
        // Weekly compliance report
        setInterval(async ()=>{
            await this.generateWeeklyComplianceReport();
        }, 7 * 24 * 60 * 60 * 1000); // Weekly
        // Monthly comprehensive assessment
        setInterval(async ()=>{
            await this.performMonthlyAssessment();
        }, 30 * 24 * 60 * 60 * 1000); // Monthly
        _logger.logger.info('Scheduled regular compliance assessments');
    }
    /**
   * Perform continuous compliance checks
   */ async performContinuousChecks() {
        try {
            for (const framework of this.frameworks.values()){
                if (!framework.enabled) continue;
                for (const regulation of framework.regulations){
                    for (const requirement of regulation.requirements){
                        if (requirement.frequency === 'continuous' && requirement.autoCheckable) {
                            await this.checkRequirementCompliance(framework.id, regulation.id, requirement);
                        }
                    }
                }
            }
        } catch (error) {
            _logger.logger.error('Continuous compliance check failed', {
                error: error instanceof Error ? error.message : String(error)
            });
        }
    }
    /**
   * Check specific requirement compliance
   */ async checkRequirementCompliance(frameworkId, regulationId, requirement) {
        const tracer = _api.trace.getTracer('compliance-monitor');
        return tracer.startActiveSpan('check-requirement-compliance', async (span)=>{
            try {
                span.setAttributes({
                    'compliance.framework': frameworkId,
                    'compliance.regulation': regulationId,
                    'compliance.requirement': requirement.id
                });
                let isCompliant = true;
                const evidence = [];
                // Execute specific compliance checks based on requirement
                switch(requirement.checkFunction){
                    case 'checkConsentCompliance':
                        isCompliant = await this.checkConsentCompliance(evidence);
                        break;
                    case 'checkBreachNotificationCompliance':
                        isCompliant = await this.checkBreachNotificationCompliance(evidence);
                        break;
                    case 'checkLawfulnessCompliance':
                        isCompliant = await this.checkLawfulnessCompliance(evidence);
                        break;
                    case 'checkDataSubjectRights':
                        isCompliant = await this.checkDataSubjectRights(evidence);
                        break;
                    default:
                        // Generic compliance check
                        isCompliant = await this.performGenericComplianceCheck(requirement, evidence);
                }
                if (!isCompliant) {
                    await this.recordComplianceViolation(frameworkId, regulationId, requirement, evidence);
                }
                span.setAttributes({
                    'compliance.compliant': isCompliant,
                    'compliance.evidence_count': evidence.length
                });
                return isCompliant;
            } catch (error) {
                span.setStatus({
                    code: 2,
                    message: String(error)
                });
                _logger.logger.error('Requirement compliance check failed', {
                    frameworkId,
                    regulationId,
                    requirementId: requirement.id,
                    error: error instanceof Error ? error.message : String(error)
                });
                return false;
            } finally{
                span.end();
            }
        });
    }
    /**
   * Specific compliance check implementations
   */ async checkConsentCompliance(evidence) {
        try {
            // Check consent records in database
            const recentContacts = await _prisma.default.contact.findMany({
                where: {
                    createdAt: {
                        gte: new Date(Date.now() - 24 * 60 * 60 * 1000) // Last 24 hours
                    }
                },
                take: 100
            });
            // Check for proper consent documentation
            let hasValidConsent = true;
            for (const contact of recentContacts){
                if (!contact.consentGiven) {
                    hasValidConsent = false;
                    evidence.push({
                        type: 'database_record',
                        source: 'contacts',
                        data: {
                            contactId: contact.id,
                            consentGiven: contact.consentGiven
                        },
                        timestamp: new Date(),
                        hash: this.generateEvidenceHash(contact.id)
                    });
                }
            }
            return hasValidConsent;
        } catch (error) {
            _logger.logger.error('Consent compliance check failed', {
                error
            });
            return false;
        }
    }
    async checkBreachNotificationCompliance(evidence) {
        try {
            // Check if there are any unnotified security incidents
            const recentIncidents = await this.getRecentSecurityIncidents();
            for (const incident of recentIncidents){
                const timeSinceIncident = Date.now() - incident.timestamp.getTime();
                const hoursElapsed = timeSinceIncident / (1000 * 60 * 60);
                if (hoursElapsed > 72 && !incident.notified) {
                    evidence.push({
                        type: 'log_entry',
                        source: 'security_incidents',
                        data: incident,
                        timestamp: new Date(),
                        hash: this.generateEvidenceHash(incident.id)
                    });
                    return false;
                }
            }
            return true;
        } catch (error) {
            _logger.logger.error('Breach notification compliance check failed', {
                error
            });
            return false;
        }
    }
    async checkLawfulnessCompliance(evidence) {
        try {
            // Check for lawful basis documentation
            const dataProcessingActivities = await this.getDataProcessingActivities();
            for (const activity of dataProcessingActivities){
                if (!activity.lawfulBasis || !activity.purpose) {
                    evidence.push({
                        type: 'database_record',
                        source: 'data_processing',
                        data: activity,
                        timestamp: new Date(),
                        hash: this.generateEvidenceHash(activity.id)
                    });
                    return false;
                }
            }
            return true;
        } catch (error) {
            _logger.logger.error('Lawfulness compliance check failed', {
                error
            });
            return false;
        }
    }
    async checkDataSubjectRights(evidence) {
        try {
            // Check if data subject rights are being honored within required timeframes
            const pendingRequests = await this.getPendingDataSubjectRequests();
            for (const request of pendingRequests){
                const daysSinceRequest = (Date.now() - request.createdAt.getTime()) / (1000 * 60 * 60 * 24);
                if (daysSinceRequest > 30) {
                    evidence.push({
                        type: 'database_record',
                        source: 'data_subject_requests',
                        data: request,
                        timestamp: new Date(),
                        hash: this.generateEvidenceHash(request.id)
                    });
                    return false;
                }
            }
            return true;
        } catch (error) {
            _logger.logger.error('Data subject rights check failed', {
                error
            });
            return false;
        }
    }
    async performGenericComplianceCheck(requirement, evidence) {
        // Generic compliance check - can be extended based on requirement type
        _logger.logger.info('Performing generic compliance check', {
            requirementId: requirement.id,
            category: requirement.category
        });
        // For now, assume compliance (would implement specific checks)
        return true;
    }
    /**
   * Record compliance violation
   */ async recordComplianceViolation(frameworkId, regulationId, requirement, evidence) {
        const violation = {
            id: `violation_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
            frameworkId,
            regulationId,
            requirementId: requirement.id,
            severity: requirement.riskLevel,
            status: 'detected',
            description: `Compliance violation detected for requirement: ${requirement.title}`,
            detectedAt: new Date(),
            evidence,
            remediation: this.generateRemediationActions(requirement),
            resolved: false
        };
        this.violations.set(violation.id, violation);
        // Log to audit system
        await _enterpriseauditlogger.enterpriseAuditLogger.logAuditEvent({
            eventType: 'COMPLIANCE_VIOLATION',
            userId: 'system',
            userRole: 'SYSTEM',
            action: 'compliance_violation_detected',
            resource: `requirement:${requirement.id}`,
            details: {
                violationId: violation.id,
                framework: frameworkId,
                regulation: regulationId,
                severity: violation.severity
            },
            ipAddress: '127.0.0.1',
            userAgent: 'AutonomousComplianceMonitor',
            complianceMetadata: {
                gdprRelevant: false,
                hipaaRelevant: false,
                pciRelevant: requirement.category === 'security',
                retentionPeriodYears: 7
            }
        });
        // Emit violation event
        this.emit('compliance_violation', {
            violation,
            framework: this.frameworks.get(frameworkId),
            autoRemediation: violation.remediation.some((r)=>r.autoExecutable)
        });
        // Trigger autonomous remediation if available
        if (violation.remediation.some((r)=>r.autoExecutable)) {
            await this.triggerAutonomousRemediation(violation);
        }
        _logger.logger.warn('Compliance violation recorded', {
            violationId: violation.id,
            framework: frameworkId,
            requirement: requirement.id,
            severity: violation.severity
        });
    }
    /**
   * Generate remediation actions
   */ generateRemediationActions(requirement) {
        const remediations = [];
        switch(requirement.category){
            case 'consent_management':
                remediations.push({
                    id: `remediation_${Date.now()}_1`,
                    action: 'Update consent collection process to ensure valid consent',
                    priority: 'high',
                    autoExecutable: false,
                    estimatedEffort: '2-4 hours',
                    estimatedCost: 5000,
                    status: 'pending'
                });
                break;
            case 'incident_response':
                remediations.push({
                    id: `remediation_${Date.now()}_2`,
                    action: 'Implement automated breach notification system',
                    priority: 'critical',
                    autoExecutable: true,
                    estimatedEffort: '1-2 days',
                    estimatedCost: 15000,
                    status: 'pending'
                });
                break;
            case 'data_handling':
                remediations.push({
                    id: `remediation_${Date.now()}_3`,
                    action: 'Review and update data processing documentation',
                    priority: 'medium',
                    autoExecutable: false,
                    estimatedEffort: '4-8 hours',
                    estimatedCost: 8000,
                    status: 'pending'
                });
                break;
        }
        return remediations;
    }
    /**
   * Trigger autonomous remediation
   */ async triggerAutonomousRemediation(violation) {
        try {
            const autoRemediations = violation.remediation.filter((r)=>r.autoExecutable);
            for (const remediation of autoRemediations){
                // Request agent assistance for remediation
                await _multiagentcoordinator.multiAgentCoordinator.requestAgentCollaboration({
                    requiredCapabilities: [
                        'compliance',
                        'security'
                    ],
                    objective: `Execute autonomous remediation: ${remediation.action}`,
                    priority: remediation.priority === 'critical' ? 'critical' : 'medium',
                    requesterId: 'compliance_monitor',
                    context: {
                        violationId: violation.id,
                        remediationId: remediation.id,
                        framework: violation.frameworkId
                    }
                });
                remediation.status = 'in_progress';
                _logger.logger.info('Triggered autonomous remediation', {
                    violationId: violation.id,
                    remediationId: remediation.id,
                    action: remediation.action
                });
            }
        } catch (error) {
            _logger.logger.error('Autonomous remediation failed', {
                violationId: violation.id,
                error: error instanceof Error ? error.message : String(error)
            });
        }
    }
    // Helper methods
    async getRecentSecurityIncidents() {
        // Integration with existing security monitor
        return [];
    }
    async getDataProcessingActivities() {
        // Get data processing activities from existing systems
        return [];
    }
    async getPendingDataSubjectRequests() {
        // Get pending data subject requests
        return [];
    }
    generateEvidenceHash(data) {
        // Generate hash for evidence integrity
        return Buffer.from(data).toString('base64');
    }
    async performDailyComplianceCheck() {
        _logger.logger.info('Performing daily compliance check');
    // Implementation for daily checks
    }
    async generateWeeklyComplianceReport() {
        _logger.logger.info('Generating weekly compliance report');
    // Implementation for weekly reports
    }
    async performMonthlyAssessment() {
        _logger.logger.info('Performing monthly compliance assessment');
    // Implementation for monthly assessments
    }
    // Event handlers
    handleSecurityEvent(event) {
        // Handle security events that may affect compliance
        _logger.logger.info('Processing security event for compliance implications', {
            eventType: event.type,
            severity: event.severity
        });
    }
    handleAuditEvent(event) {
        // Handle audit events for compliance monitoring
        _logger.logger.info('Processing audit event for compliance monitoring', {
            eventType: event.eventType
        });
    }
    handleComplianceDecision(decision) {
        // Handle compliance-related strategic decisions
        _logger.logger.info('Processing compliance decision', {
            decisionType: decision.type
        });
    }
    /**
   * Public API methods
   */ async getComplianceFrameworks() {
        return Array.from(this.frameworks.values());
    }
    async getActiveViolations() {
        return Array.from(this.violations.values()).filter((v)=>!v.resolved);
    }
    async getComplianceScore() {
        return this.complianceScore;
    }
    async generateComplianceReport(frameworkId) {
        const violations = frameworkId ? Array.from(this.violations.values()).filter((v)=>v.frameworkId === frameworkId) : Array.from(this.violations.values());
        const activeViolations = violations.filter((v)=>!v.resolved);
        const resolvedViolations = violations.filter((v)=>v.resolved);
        return {
            id: `report_${Date.now()}`,
            frameworkId: frameworkId || 'all',
            reportType: 'assessment',
            period: {
                start: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000),
                end: new Date()
            },
            overallScore: this.complianceScore,
            compliance: {
                compliant: resolvedViolations.length,
                nonCompliant: activeViolations.length,
                partiallyCompliant: 0,
                notApplicable: 0
            },
            violations: activeViolations,
            recommendations: this.generateComplianceRecommendations(activeViolations),
            generatedAt: new Date(),
            generatedBy: 'system'
        };
    }
    generateComplianceRecommendations(violations) {
        const recommendations = [];
        if (violations.some((v)=>v.severity === 'critical')) {
            recommendations.push({
                priority: 'critical',
                category: 'immediate_action',
                title: 'Address Critical Compliance Violations',
                description: 'Critical compliance violations require immediate attention to avoid penalties',
                estimatedImpact: 90,
                estimatedEffort: '1-3 days',
                estimatedCost: 50000,
                autoImplementable: false
            });
        }
        return recommendations;
    }
    /**
   * Cleanup and destroy
   */ destroy() {
        if (this.monitoringInterval) {
            clearInterval(this.monitoringInterval);
            this.monitoringInterval = null;
        }
        for (const timeout of this.activeChecks.values()){
            clearTimeout(timeout);
        }
        this.activeChecks.clear();
        this.removeAllListeners();
        _logger.logger.info('Autonomous compliance monitor destroyed');
    }
}
const autonomousComplianceMonitor = new AutonomousComplianceMonitor();

//# sourceMappingURL=data:application/json;base64,