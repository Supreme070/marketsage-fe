{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/lib/messaging/unified-messaging-service.ts"],"sourcesContent":["/**\n * Unified Messaging Service\n * \n * Handles both customer-managed and platform-managed messaging across all channels\n */\n\nimport prisma from '@/lib/db/prisma';\nimport { smsService } from '@/lib/sms-providers/sms-service';\nimport { emailService } from '@/lib/email-providers/email-service';\nimport { whatsappService } from '@/lib/whatsapp-service';\nimport { MasterAccountManager, masterAccountsConfig } from '@/lib/config/master-accounts';\nimport { providerOptimizationEngine } from '@/lib/messaging/provider-optimization-engine';\nimport { logger } from '@/lib/logger';\n\nexport interface UnifiedMessageResult {\n  success: boolean;\n  messageId?: string;\n  provider?: string;\n  cost?: number;\n  credits?: number;\n  error?: {\n    message: string;\n    code?: string;\n  };\n}\n\nexport interface MessageRequest {\n  to: string;\n  content: string;\n  channel: 'sms' | 'email' | 'whatsapp';\n  organizationId: string;\n  campaignId?: string;\n  contactId?: string;\n  metadata?: Record<string, any>;\n}\n\nexport interface OrganizationMessagingConfig {\n  messagingModel: 'customer_managed' | 'platform_managed';\n  creditBalance: number;\n  autoTopUp: boolean;\n  autoTopUpAmount: number;\n  autoTopUpThreshold: number;\n  preferredProviders: {\n    sms?: string;\n    email?: string;\n    whatsapp?: string;\n  };\n  region: string;\n}\n\nexport class UnifiedMessagingService {\n  \n  /**\n   * Send a message through the unified service\n   */\n  async sendMessage(request: MessageRequest): Promise<UnifiedMessageResult> {\n    try {\n      // Get organization's messaging configuration\n      const orgConfig = await this.getOrganizationConfig(request.organizationId);\n      \n      if (orgConfig.messagingModel === 'customer_managed') {\n        return await this.sendViaCustomerManagedAPI(request);\n      } else {\n        return await this.sendViaPlatformManagedAPI(request, orgConfig);\n      }\n    } catch (error) {\n      logger.error('Unified messaging service error:', error);\n      return {\n        success: false,\n        error: {\n          message: error instanceof Error ? error.message : 'Unknown error',\n          code: 'UNIFIED_MESSAGING_ERROR'\n        }\n      };\n    }\n  }\n  \n  /**\n   * Send message using customer's own API credentials\n   */\n  private async sendViaCustomerManagedAPI(request: MessageRequest): Promise<UnifiedMessageResult> {\n    const { channel, to, content, organizationId } = request;\n    \n    switch (channel) {\n      case 'sms':\n        const smsResult = await smsService.sendSMS(to, content, organizationId);\n        return {\n          success: smsResult.success,\n          messageId: smsResult.messageId,\n          provider: smsService.getProviderName(),\n          cost: 0, // Customer pays provider directly\n          credits: 0,\n          error: smsResult.error\n        };\n        \n      case 'email':\n        const emailResult = await emailService.sendEmail(organizationId, {\n          to: to,\n          from: 'noreply@marketsage.africa',\n          subject: 'Message from MarketSage',\n          html: content,\n          text: content.replace(/<[^>]*>/g, '') // Strip HTML for text version\n        });\n        return {\n          success: emailResult.success,\n          messageId: emailResult.messageId,\n          provider: (emailResult as any).provider || 'email',\n          cost: 0, // Customer pays provider directly\n          credits: 0,\n          error: emailResult.error\n        };\n        \n      case 'whatsapp':\n        const whatsappResult = await whatsappService.sendTextMessage(to, content, organizationId);\n        return {\n          success: whatsappResult.success,\n          messageId: whatsappResult.messageId,\n          provider: 'whatsapp-business',\n          cost: 0, // Customer pays provider directly\n          credits: 0,\n          error: whatsappResult.error\n        };\n        \n      default:\n        return {\n          success: false,\n          error: { message: 'Unsupported channel', code: 'UNSUPPORTED_CHANNEL' }\n        };\n    }\n  }\n  \n  /**\n   * Send message using platform's master API accounts\n   */\n  private async sendViaPlatformManagedAPI(\n    request: MessageRequest,\n    orgConfig: OrganizationMessagingConfig\n  ): Promise<UnifiedMessageResult> {\n    const { channel, to, content, organizationId } = request;\n    \n    // Check if organization has enough credits\n    const creditCost = await this.calculateCreditCost(channel, 1, orgConfig.region);\n    \n    if (orgConfig.creditBalance < creditCost) {\n      // Try auto top-up if enabled\n      if (orgConfig.autoTopUp && orgConfig.creditBalance < orgConfig.autoTopUpThreshold) {\n        const topUpSuccess = await this.autoTopUpCredits(organizationId, orgConfig.autoTopUpAmount);\n        if (!topUpSuccess) {\n          return {\n            success: false,\n            error: {\n              message: 'Insufficient credits and auto top-up failed',\n              code: 'INSUFFICIENT_CREDITS'\n            }\n          };\n        }\n      } else {\n        return {\n          success: false,\n          error: {\n            message: 'Insufficient credits',\n            code: 'INSUFFICIENT_CREDITS'\n          }\n        };\n      }\n    }\n    \n    // Use provider optimization engine to get the best provider\n    let masterAccount;\n    try {\n      const optimization = await providerOptimizationEngine.optimizeProvider({\n        channel,\n        messageCount: 1,\n        region: orgConfig.region,\n        priority: 'balanced',\n        organizationId\n      });\n      \n      // Get the master account for the recommended provider\n      const channelAccounts = masterAccountsConfig[channel];\n      const recommendedProvider = channelAccounts[optimization.recommendedProvider as keyof typeof channelAccounts];\n      \n      if (recommendedProvider?.isActive) {\n        masterAccount = recommendedProvider;\n      } else {\n        // Fallback to default selection\n        masterAccount = MasterAccountManager.getBestMasterAccount(channel, orgConfig.region);\n      }\n    } catch (error) {\n      logger.warn('Provider optimization failed, using fallback:', error);\n      masterAccount = MasterAccountManager.getBestMasterAccount(channel, orgConfig.region);\n    }\n    \n    if (!masterAccount) {\n      return {\n        success: false,\n        error: {\n          message: 'No master account available for this channel',\n          code: 'NO_MASTER_ACCOUNT'\n        }\n      };\n    }\n    \n    // Send the message\n    const result = await this.sendViaMasterAccount(masterAccount, request);\n    \n    if (result.success) {\n      // Deduct credits from organization\n      await this.deductCredits(organizationId, creditCost);\n      \n      // Log usage for analytics\n      await this.logUsage(organizationId, channel, 1, creditCost, masterAccount.provider);\n      \n      return {\n        ...result,\n        cost: creditCost,\n        credits: creditCost\n      };\n    }\n    \n    return result;\n  }\n  \n\n  /**\n   * Decrypt sensitive data\n   */\n  private decrypt(encryptedText: string): string {\n    try {\n      const crypto = require('crypto');\n      const key = process.env.ENCRYPTION_KEY || 'default-key-for-development';\n      const decipher = crypto.createDecipher('aes-256-cbc', key);\n      let decrypted = decipher.update(encryptedText, 'hex', 'utf8');\n      decrypted += decipher.final('utf8');\n      return decrypted;\n    } catch (error) {\n      logger.error('Decryption failed:', error);\n      return encryptedText; // Return as-is if decryption fails\n    }\n  }\n\n  /**\n   * Send message using a specific master account\n   */\n  private async sendViaMasterAccount(\n    masterAccount: any,\n    request: MessageRequest\n  ): Promise<UnifiedMessageResult> {\n    const { channel, to, content } = request;\n    \n    try {\n      switch (channel) {\n        case 'sms':\n          return await this.sendSMSViaMaster(masterAccount, to, content);\n          \n        case 'email':\n          return await this.sendEmailViaMaster(masterAccount, to, content);\n          \n        case 'whatsapp':\n          return await this.sendWhatsAppViaMaster(masterAccount, to, content);\n          \n        default:\n          return {\n            success: false,\n            error: { message: 'Unsupported channel', code: 'UNSUPPORTED_CHANNEL' }\n          };\n      }\n    } catch (error) {\n      logger.error(`Master account send error (${masterAccount.provider}):`, error);\n      return {\n        success: false,\n        error: {\n          message: error instanceof Error ? error.message : 'Master account send failed',\n          code: 'MASTER_ACCOUNT_ERROR'\n        }\n      };\n    }\n  }\n  \n  /**\n   * Send SMS via master account\n   */\n  private async sendSMSViaMaster(masterAccount: any, to: string, content: string): Promise<UnifiedMessageResult> {\n    const { provider } = masterAccount;\n    \n    switch (provider) {\n      case 'twilio':\n        const TwilioSMSProvider = (await import('@/lib/sms-providers/twilio-provider')).TwilioSMSProvider;\n        const twilioProvider = new TwilioSMSProvider({\n          accountSid: masterAccount.accountId,\n          authToken: masterAccount.apiKey,\n          fromNumber: masterAccount.fromNumber\n        });\n        \n        const result = await twilioProvider.sendSMS(to, content);\n        return {\n          success: result.success,\n          messageId: result.messageId,\n          provider: 'twilio',\n          error: result.error\n        };\n        \n      case 'africas-talking':\n        // TODO: Implement Africa's Talking master account\n        return {\n          success: false,\n          error: { message: 'Africa\\'s Talking master account not implemented', code: 'NOT_IMPLEMENTED' }\n        };\n        \n      case 'termii':\n        // TODO: Implement Termii master account\n        return {\n          success: false,\n          error: { message: 'Termii master account not implemented', code: 'NOT_IMPLEMENTED' }\n        };\n        \n      default:\n        return {\n          success: false,\n          error: { message: 'Unsupported SMS provider', code: 'UNSUPPORTED_PROVIDER' }\n        };\n    }\n  }\n  \n  /**\n   * Send email via master account\n   */\n  private async sendEmailViaMaster(masterAccount: any, to: string, content: string): Promise<UnifiedMessageResult> {\n    const { provider } = masterAccount;\n    \n    try {\n      const { createMasterEmailProvider } = await import('@/lib/email-providers');\n      \n      const emailProvider = createMasterEmailProvider(provider, {\n        apiKey: masterAccount.apiKey,\n        domain: masterAccount.domain,\n        fromEmail: masterAccount.fromEmail,\n      });\n\n      const result = await emailProvider.sendEmail({\n        to,\n        from: masterAccount.fromEmail || 'noreply@marketsage.africa',\n        subject: 'MarketSage Notification',\n        html: content,\n        text: content.replace(/<[^>]*>/g, ''), // Strip HTML for text version\n      });\n\n      return {\n        success: result.success,\n        messageId: result.messageId,\n        provider,\n        error: result.error,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: {\n          message: error instanceof Error ? error.message : 'Email send failed',\n          code: 'EMAIL_SEND_ERROR',\n        },\n      };\n    }\n  }\n  \n  /**\n   * Send WhatsApp via master account\n   */\n  private async sendWhatsAppViaMaster(masterAccount: any, to: string, content: string): Promise<UnifiedMessageResult> {\n    const { provider } = masterAccount;\n    \n    try {\n      switch (provider) {\n        case 'twilio-whatsapp':\n          // Use Twilio WhatsApp API\n          const twilioResponse = await fetch(`https://api.twilio.com/2010-04-01/Accounts/${masterAccount.accountId}/Messages.json`, {\n            method: 'POST',\n            headers: {\n              'Authorization': `Basic ${Buffer.from(`${masterAccount.accountId}:${masterAccount.apiKey}`).toString('base64')}`,\n              'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: new URLSearchParams({\n              From: `whatsapp:${masterAccount.fromNumber}`,\n              To: `whatsapp:${to}`,\n              Body: content,\n            }),\n          });\n\n          if (twilioResponse.ok) {\n            const data = await twilioResponse.json();\n            return {\n              success: true,\n              messageId: data.sid,\n              provider: 'twilio-whatsapp',\n            };\n          } else {\n            const error = await twilioResponse.json();\n            return {\n              success: false,\n              error: { message: error.message || 'Twilio WhatsApp send failed', code: 'TWILIO_ERROR' }\n            };\n          }\n\n        case 'whatsapp-business':\n          // Use WhatsApp Business API directly\n          const cleanPhoneNumber = to.replace(/\\D/g, '');\n          const formattedPhoneNumber = cleanPhoneNumber.startsWith('234') \n            ? cleanPhoneNumber \n            : '234' + cleanPhoneNumber.replace(/^0/, '');\n\n          const waResponse = await fetch(`https://graph.facebook.com/v21.0/${masterAccount.fromNumber}/messages`, {\n            method: 'POST',\n            headers: {\n              'Authorization': `Bearer ${masterAccount.apiKey}`,\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n              messaging_product: 'whatsapp',\n              to: formattedPhoneNumber,\n              type: 'text',\n              text: {\n                body: content\n              }\n            }),\n          });\n\n          if (waResponse.ok) {\n            const data = await waResponse.json();\n            return {\n              success: true,\n              messageId: data.messages[0]?.id,\n              provider: 'whatsapp-business',\n            };\n          } else {\n            const error = await waResponse.json();\n            return {\n              success: false,\n              error: { message: error.error?.message || 'WhatsApp Business send failed', code: 'WHATSAPP_ERROR' }\n            };\n          }\n\n        default:\n          return {\n            success: false,\n            error: { message: 'Unsupported WhatsApp provider', code: 'UNSUPPORTED_PROVIDER' }\n          };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: {\n          message: error instanceof Error ? error.message : 'WhatsApp send failed',\n          code: 'WHATSAPP_SEND_ERROR'\n        }\n      };\n    }\n  }\n  \n  /**\n   * Get organization's messaging configuration\n   */\n  private async getOrganizationConfig(organizationId: string): Promise<OrganizationMessagingConfig> {\n    const org = await prisma.organization.findUnique({\n      where: { id: organizationId },\n      select: {\n        messagingModel: true,\n        creditBalance: true,\n        autoTopUp: true,\n        autoTopUpAmount: true,\n        autoTopUpThreshold: true,\n        preferredProviders: true,\n        region: true\n      }\n    });\n    \n    if (!org) {\n      throw new Error('Organization not found');\n    }\n    \n    return {\n      messagingModel: org.messagingModel as 'customer_managed' | 'platform_managed' || 'customer_managed',\n      creditBalance: org.creditBalance || 0,\n      autoTopUp: org.autoTopUp || false,\n      autoTopUpAmount: org.autoTopUpAmount || 100,\n      autoTopUpThreshold: org.autoTopUpThreshold || 10,\n      preferredProviders: org.preferredProviders ? JSON.parse(org.preferredProviders) : {},\n      region: org.region || 'us'\n    };\n  }\n  \n  /**\n   * Calculate credit cost for a message\n   */\n  private async calculateCreditCost(channel: 'sms' | 'email' | 'whatsapp', messageCount: number, region: string): Promise<number> {\n    const { cost } = MasterAccountManager.calculateCost(channel, messageCount, region);\n    \n    // Apply markup for reselling\n    const markup = channel === 'sms' ? 2.5 : channel === 'email' ? 3.0 : 2.0;\n    \n    return cost * markup;\n  }\n  \n  /**\n   * Deduct credits from organization\n   */\n  private async deductCredits(organizationId: string, credits: number): Promise<void> {\n    await prisma.organization.update({\n      where: { id: organizationId },\n      data: {\n        creditBalance: {\n          decrement: credits\n        }\n      }\n    });\n  }\n  \n  /**\n   * Auto top-up credits for organization\n   */\n  private async autoTopUpCredits(organizationId: string, amount: number): Promise<boolean> {\n    try {\n      // Get organization with user email for payment\n      const org = await prisma.organization.findUnique({\n        where: { id: organizationId },\n        include: {\n          users: {\n            where: { role: { in: ['ADMIN', 'SUPER_ADMIN'] } },\n            take: 1\n          }\n        }\n      });\n\n      if (!org || !org.users.length) {\n        logger.error('No admin user found for auto top-up');\n        return false;\n      }\n\n      const adminUser = org.users[0];\n      \n      // For auto top-up, we'll create a transaction record for manual processing\n      // In a production system, you'd want to use saved payment methods\n      const reference = `auto_topup_${organizationId}_${Date.now()}`;\n      \n      await prisma.creditTransaction.create({\n        data: {\n          organizationId,\n          type: 'purchase',\n          amount,\n          description: `Auto top-up - $${amount}`,\n          paymentMethod: 'auto_topup',\n          paymentId: reference,\n          status: 'completed', // For now, auto-approve\n          metadata: {\n            autoTopUp: true,\n            triggerDate: new Date().toISOString(),\n            adminUserId: adminUser.id,\n          },\n        },\n      });\n\n      // Update organization credit balance\n      await prisma.organization.update({\n        where: { id: organizationId },\n        data: {\n          creditBalance: {\n            increment: amount\n          }\n        }\n      });\n      \n      logger.info(`Auto top-up successful for organization ${organizationId}: $${amount}`);\n      return true;\n    } catch (error) {\n      logger.error('Auto top-up failed:', error);\n      return false;\n    }\n  }\n  \n  /**\n   * Log usage for analytics\n   */\n  private async logUsage(\n    organizationId: string,\n    channel: string,\n    messageCount: number,\n    credits: number,\n    provider: string\n  ): Promise<void> {\n    try {\n      await prisma.messagingUsage.create({\n        data: {\n          organizationId,\n          channel,\n          messageCount,\n          credits,\n          provider,\n          timestamp: new Date()\n        }\n      });\n    } catch (error) {\n      logger.error('Usage logging failed:', error);\n    }\n  }\n  \n  /**\n   * Get organization's credit balance\n   */\n  async getCreditBalance(organizationId: string): Promise<number> {\n    const org = await prisma.organization.findUnique({\n      where: { id: organizationId },\n      select: { creditBalance: true }\n    });\n    \n    return org?.creditBalance || 0;\n  }\n  \n  /**\n   * Get usage analytics for organization\n   */\n  async getUsageAnalytics(organizationId: string, startDate: Date, endDate: Date) {\n    const usage = await prisma.messagingUsage.findMany({\n      where: {\n        organizationId,\n        timestamp: {\n          gte: startDate,\n          lte: endDate\n        }\n      },\n      orderBy: { timestamp: 'desc' }\n    });\n    \n    const summary = usage.reduce((acc, item) => {\n      const key = item.channel;\n      if (!acc[key]) {\n        acc[key] = { messages: 0, credits: 0 };\n      }\n      acc[key].messages += item.messageCount;\n      acc[key].credits += item.credits;\n      return acc;\n    }, {} as Record<string, { messages: number; credits: number }>);\n    \n    return { usage, summary };\n  }\n  \n  /**\n   * Switch organization's messaging model\n   */\n  async switchMessagingModel(\n    organizationId: string,\n    newModel: 'customer_managed' | 'platform_managed'\n  ): Promise<void> {\n    await prisma.organization.update({\n      where: { id: organizationId },\n      data: { messagingModel: newModel }\n    });\n  }\n  \n  /**\n   * Bulk send messages\n   */\n  async bulkSendMessages(requests: MessageRequest[]): Promise<UnifiedMessageResult[]> {\n    const results: UnifiedMessageResult[] = [];\n    \n    // Process in batches to avoid overwhelming the system\n    const batchSize = 10;\n    for (let i = 0; i < requests.length; i += batchSize) {\n      const batch = requests.slice(i, i + batchSize);\n      const batchResults = await Promise.all(\n        batch.map(request => this.sendMessage(request))\n      );\n      results.push(...batchResults);\n    }\n    \n    return results;\n  }\n}\n\n// Export singleton instance\nexport const unifiedMessagingService = new UnifiedMessagingService();"],"names":["UnifiedMessagingService","unifiedMessagingService","sendMessage","request","orgConfig","getOrganizationConfig","organizationId","messagingModel","sendViaCustomerManagedAPI","sendViaPlatformManagedAPI","error","logger","success","message","Error","code","channel","to","content","smsResult","smsService","sendSMS","messageId","provider","getProviderName","cost","credits","emailResult","emailService","sendEmail","from","subject","html","text","replace","whatsappResult","whatsappService","sendTextMessage","creditCost","calculateCreditCost","region","creditBalance","autoTopUp","autoTopUpThreshold","topUpSuccess","autoTopUpCredits","autoTopUpAmount","masterAccount","optimization","providerOptimizationEngine","optimizeProvider","messageCount","priority","channelAccounts","masterAccountsConfig","recommendedProvider","isActive","MasterAccountManager","getBestMasterAccount","warn","result","sendViaMasterAccount","deductCredits","logUsage","decrypt","encryptedText","crypto","require","key","process","env","ENCRYPTION_KEY","decipher","createDecipher","decrypted","update","final","sendSMSViaMaster","sendEmailViaMaster","sendWhatsAppViaMaster","TwilioSMSProvider","twilioProvider","accountSid","accountId","authToken","apiKey","fromNumber","createMasterEmailProvider","emailProvider","domain","fromEmail","twilioResponse","fetch","method","headers","Buffer","toString","body","URLSearchParams","From","To","Body","ok","data","json","sid","cleanPhoneNumber","formattedPhoneNumber","startsWith","waResponse","JSON","stringify","messaging_product","type","messages","id","org","prisma","organization","findUnique","where","select","preferredProviders","parse","calculateCost","markup","decrement","amount","include","users","role","in","take","length","adminUser","reference","Date","now","creditTransaction","create","description","paymentMethod","paymentId","status","metadata","triggerDate","toISOString","adminUserId","increment","info","messagingUsage","timestamp","getCreditBalance","getUsageAnalytics","startDate","endDate","usage","findMany","gte","lte","orderBy","summary","reduce","acc","item","switchMessagingModel","newModel","bulkSendMessages","requests","results","batchSize","i","batch","slice","batchResults","Promise","all","map","push"],"mappings":"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"}