{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/lib/compliance/autonomous-compliance-monitor.ts"],"sourcesContent":["/**\n * Autonomous Compliance Monitoring System\n * ======================================\n * AI-powered compliance monitoring specifically designed for African fintech markets\n * Builds upon existing GDPR compliance, audit logging, and security infrastructure\n */\n\nimport { logger } from '@/lib/logger';\nimport { trace } from '@opentelemetry/api';\nimport { EventEmitter } from 'events';\nimport prisma from '@/lib/db/prisma';\nimport { enterpriseAuditLogger } from '@/lib/audit/enterprise-audit-logger';\nimport { securityMonitor } from '@/lib/security/security-monitor';\nimport { multiAgentCoordinator } from '@/lib/ai/multi-agent-coordinator';\nimport { strategicDecisionEngine } from '@/lib/ai/strategic-decision-engine';\n\nexport interface ComplianceFramework {\n  id: string;\n  name: string;\n  country: 'Nigeria' | 'South Africa' | 'Kenya' | 'Ghana' | 'Zimbabwe' | 'Uganda' | 'Tanzania' | 'Rwanda';\n  type: 'data_protection' | 'financial_services' | 'telecommunications' | 'consumer_protection' | 'anti_money_laundering';\n  regulations: ComplianceRegulation[];\n  enabled: boolean;\n  riskLevel: 'low' | 'medium' | 'high' | 'critical';\n  lastAssessment: Date;\n  nextAssessment: Date;\n}\n\nexport interface ComplianceRegulation {\n  id: string;\n  name: string;\n  description: string;\n  requirements: ComplianceRequirement[];\n  penalties: CompliancePenalty[];\n  deadlines: ComplianceDeadline[];\n  applicability: RegulationApplicability;\n}\n\nexport interface ComplianceRequirement {\n  id: string;\n  title: string;\n  description: string;\n  category: 'data_handling' | 'consent_management' | 'reporting' | 'security' | 'documentation' | 'training' | 'incident_response';\n  mandatory: boolean;\n  riskLevel: 'low' | 'medium' | 'high' | 'critical';\n  autoCheckable: boolean;\n  frequency: 'continuous' | 'daily' | 'weekly' | 'monthly' | 'quarterly' | 'annually';\n  checkFunction?: string;\n  evidence: string[];\n}\n\nexport interface CompliancePenalty {\n  type: 'fine' | 'suspension' | 'revocation' | 'criminal';\n  maxAmount?: number;\n  currency: 'NGN' | 'ZAR' | 'KES' | 'GHS' | 'USD';\n  description: string;\n}\n\nexport interface ComplianceDeadline {\n  id: string;\n  title: string;\n  date: Date;\n  description: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  recurring: boolean;\n  intervalDays?: number;\n}\n\nexport interface RegulationApplicability {\n  businessTypes: string[];\n  dataTypes: string[];\n  transactionThresholds?: {\n    daily?: number;\n    monthly?: number;\n    annual?: number;\n  };\n  userCountThresholds?: {\n    min?: number;\n    max?: number;\n  };\n}\n\nexport interface ComplianceViolation {\n  id: string;\n  frameworkId: string;\n  regulationId: string;\n  requirementId: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  status: 'detected' | 'investigating' | 'remediated' | 'false_positive' | 'accepted_risk';\n  description: string;\n  detectedAt: Date;\n  evidence: ComplianceEvidence[];\n  remediation: ComplianceRemediation[];\n  assignedTo?: string;\n  dueDate?: Date;\n  resolved?: boolean;\n  resolvedAt?: Date;\n  cost?: number;\n}\n\nexport interface ComplianceEvidence {\n  type: 'log_entry' | 'database_record' | 'document' | 'screenshot' | 'audit_trail';\n  source: string;\n  data: any;\n  timestamp: Date;\n  hash: string;\n}\n\nexport interface ComplianceRemediation {\n  id: string;\n  action: string;\n  priority: 'low' | 'medium' | 'high' | 'critical';\n  autoExecutable: boolean;\n  estimatedEffort: string;\n  estimatedCost?: number;\n  deadline?: Date;\n  status: 'pending' | 'in_progress' | 'completed' | 'failed';\n  assignedTo?: string;\n  completedAt?: Date;\n}\n\nexport interface ComplianceReport {\n  id: string;\n  frameworkId: string;\n  reportType: 'assessment' | 'violation' | 'remediation' | 'dashboard' | 'audit';\n  period: {\n    start: Date;\n    end: Date;\n  };\n  overallScore: number; // 0-100\n  compliance: {\n    compliant: number;\n    nonCompliant: number;\n    partiallyCompliant: number;\n    notApplicable: number;\n  };\n  violations: ComplianceViolation[];\n  recommendations: ComplianceRecommendation[];\n  generatedAt: Date;\n  generatedBy: 'system' | 'user' | 'scheduled';\n}\n\nexport interface ComplianceRecommendation {\n  priority: 'low' | 'medium' | 'high' | 'critical';\n  category: string;\n  title: string;\n  description: string;\n  estimatedImpact: number;\n  estimatedEffort: string;\n  estimatedCost?: number;\n  autoImplementable: boolean;\n}\n\nexport interface AfricanMarketCompliance {\n  // Nigeria - NDPR (Nigeria Data Protection Regulation)\n  nigeria: {\n    ndpr: boolean;\n    nitda: boolean; // National Information Technology Development Agency\n    cbn: boolean; // Central Bank of Nigeria guidelines\n    ncc: boolean; // Nigerian Communications Commission\n  };\n  \n  // South Africa - POPIA (Protection of Personal Information Act)\n  southAfrica: {\n    popia: boolean;\n    pci: boolean; // Payment Card Industry\n    sarb: boolean; // South African Reserve Bank\n    icasa: boolean; // Independent Communications Authority\n  };\n  \n  // Kenya - Data Protection Act\n  kenya: {\n    dpa: boolean; // Data Protection Act 2019\n    cbk: boolean; // Central Bank of Kenya\n    ca: boolean; // Communications Authority\n  };\n  \n  // Ghana - Data Protection Act\n  ghana: {\n    dpa: boolean; // Data Protection Act 2012\n    bog: boolean; // Bank of Ghana\n    nca: boolean; // National Communications Authority\n  };\n}\n\nclass AutonomousComplianceMonitor extends EventEmitter {\n  private frameworks: Map<string, ComplianceFramework> = new Map();\n  private violations: Map<string, ComplianceViolation> = new Map();\n  private activeChecks: Map<string, NodeJS.Timeout> = new Map();\n  private complianceScore = 100;\n  private lastAssessment: Date = new Date();\n  private monitoringInterval: NodeJS.Timeout | null = null;\n\n  constructor() {\n    super();\n    this.initializeComplianceMonitoring();\n  }\n\n  /**\n   * Initialize autonomous compliance monitoring\n   */\n  private async initializeComplianceMonitoring() {\n    try {\n      logger.info('Initializing autonomous compliance monitoring...');\n\n      // Load African regulatory frameworks\n      await this.loadAfricanComplianceFrameworks();\n\n      // Connect to existing systems\n      this.connectToExistingComplianceSystems();\n\n      // Start continuous monitoring\n      this.startContinuousMonitoring();\n\n      // Schedule regular assessments\n      this.scheduleRegularAssessments();\n\n      logger.info('Autonomous compliance monitoring initialized successfully');\n\n    } catch (error) {\n      logger.error('Failed to initialize autonomous compliance monitoring', {\n        error: error instanceof Error ? error.message : String(error)\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Load compliance frameworks for African markets\n   */\n  private async loadAfricanComplianceFrameworks() {\n    // Nigeria - NDPR Framework\n    const nigeriaFramework: ComplianceFramework = {\n      id: 'nigeria_ndpr',\n      name: 'Nigeria Data Protection Regulation (NDPR)',\n      country: 'Nigeria',\n      type: 'data_protection',\n      enabled: true,\n      riskLevel: 'high',\n      lastAssessment: new Date(),\n      nextAssessment: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000), // 90 days\n      regulations: [\n        {\n          id: 'ndpr_2019',\n          name: 'Nigeria Data Protection Regulation 2019',\n          description: 'NITDA regulation for protection of personal data',\n          requirements: [\n            {\n              id: 'ndpr_consent',\n              title: 'Lawful Basis for Processing',\n              description: 'Must have lawful basis (consent, contract, legal obligation, vital interests, public task, legitimate interests)',\n              category: 'consent_management',\n              mandatory: true,\n              riskLevel: 'high',\n              autoCheckable: true,\n              frequency: 'continuous',\n              checkFunction: 'checkConsentCompliance',\n              evidence: ['consent_records', 'privacy_policies']\n            },\n            {\n              id: 'ndpr_dpo',\n              title: 'Data Protection Officer',\n              description: 'Must appoint Data Protection Officer for high-risk processing',\n              category: 'documentation',\n              mandatory: true,\n              riskLevel: 'medium',\n              autoCheckable: false,\n              frequency: 'annually',\n              evidence: ['dpo_appointment', 'dpo_training_records']\n            },\n            {\n              id: 'ndpr_breach_notification',\n              title: 'Data Breach Notification',\n              description: 'Must notify NITDA within 72 hours of becoming aware of a breach',\n              category: 'incident_response',\n              mandatory: true,\n              riskLevel: 'critical',\n              autoCheckable: true,\n              frequency: 'continuous',\n              checkFunction: 'checkBreachNotificationCompliance',\n              evidence: ['incident_logs', 'notification_records']\n            }\n          ],\n          penalties: [\n            {\n              type: 'fine',\n              maxAmount: 10000000, // ₦10 million\n              currency: 'NGN',\n              description: 'Administrative fines up to ₦10 million or 2% of annual gross revenue'\n            }\n          ],\n          deadlines: [\n            {\n              id: 'ndpr_annual_audit',\n              title: 'Annual Data Protection Audit',\n              date: new Date(new Date().getFullYear() + 1, 0, 31), // January 31st\n              description: 'Submit annual data protection compliance audit to NITDA',\n              severity: 'high',\n              recurring: true,\n              intervalDays: 365\n            }\n          ],\n          applicability: {\n            businessTypes: ['fintech', 'telecommunications', 'e-commerce'],\n            dataTypes: ['personal_data', 'financial_data', 'communication_data'],\n            userCountThresholds: { min: 1000 }\n          }\n        }\n      ]\n    };\n\n    // South Africa - POPIA Framework\n    const southAfricaFramework: ComplianceFramework = {\n      id: 'south_africa_popia',\n      name: 'Protection of Personal Information Act (POPIA)',\n      country: 'South Africa',\n      type: 'data_protection',\n      enabled: true,\n      riskLevel: 'high',\n      lastAssessment: new Date(),\n      nextAssessment: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000),\n      regulations: [\n        {\n          id: 'popia_2020',\n          name: 'Protection of Personal Information Act 2020',\n          description: 'South African data protection legislation',\n          requirements: [\n            {\n              id: 'popia_lawfulness',\n              title: 'Lawfulness of Processing',\n              description: 'Personal information must be processed lawfully and in a reasonable manner',\n              category: 'data_handling',\n              mandatory: true,\n              riskLevel: 'high',\n              autoCheckable: true,\n              frequency: 'continuous',\n              checkFunction: 'checkLawfulnessCompliance',\n              evidence: ['processing_records', 'legal_basis_documentation']\n            },\n            {\n              id: 'popia_io_registration',\n              title: 'Information Officer Registration',\n              description: 'Must register Information Officer with Information Regulator',\n              category: 'documentation',\n              mandatory: true,\n              riskLevel: 'medium',\n              autoCheckable: false,\n              frequency: 'annually',\n              evidence: ['io_registration', 'io_contact_details']\n            },\n            {\n              id: 'popia_data_subject_rights',\n              title: 'Data Subject Rights',\n              description: 'Must facilitate data subject access, correction, and deletion rights',\n              category: 'data_handling',\n              mandatory: true,\n              riskLevel: 'high',\n              autoCheckable: true,\n              frequency: 'continuous',\n              checkFunction: 'checkDataSubjectRights',\n              evidence: ['access_request_logs', 'deletion_logs']\n            }\n          ],\n          penalties: [\n            {\n              type: 'fine',\n              maxAmount: 10000000, // R10 million\n              currency: 'ZAR',\n              description: 'Administrative fines up to R10 million or imprisonment up to 10 years'\n            }\n          ],\n          deadlines: [\n            {\n              id: 'popia_impact_assessment',\n              title: 'Privacy Impact Assessment',\n              date: new Date(Date.now() + 180 * 24 * 60 * 60 * 1000), // 180 days\n              description: 'Conduct privacy impact assessment for high-risk processing',\n              severity: 'high',\n              recurring: false\n            }\n          ],\n          applicability: {\n            businessTypes: ['all'],\n            dataTypes: ['personal_information'],\n            userCountThresholds: { min: 1 }\n          }\n        }\n      ]\n    };\n\n    // Kenya - Data Protection Act Framework\n    const kenyaFramework: ComplianceFramework = {\n      id: 'kenya_dpa',\n      name: 'Kenya Data Protection Act',\n      country: 'Kenya',\n      type: 'data_protection',\n      enabled: true,\n      riskLevel: 'medium',\n      lastAssessment: new Date(),\n      nextAssessment: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000),\n      regulations: [\n        {\n          id: 'kenya_dpa_2019',\n          name: 'Data Protection Act 2019',\n          description: 'Kenya data protection legislation',\n          requirements: [\n            {\n              id: 'kenya_dpo_appointment',\n              title: 'Data Protection Officer Appointment',\n              description: 'Must appoint qualified Data Protection Officer',\n              category: 'documentation',\n              mandatory: true,\n              riskLevel: 'medium',\n              autoCheckable: false,\n              frequency: 'annually',\n              evidence: ['dpo_certificate', 'dpo_appointment_letter']\n            },\n            {\n              id: 'kenya_data_controller_registration',\n              title: 'Data Controller Registration',\n              description: 'Must register as data controller with Office of Data Protection Commissioner',\n              category: 'documentation',\n              mandatory: true,\n              riskLevel: 'high',\n              autoCheckable: false,\n              frequency: 'annually',\n              evidence: ['registration_certificate', 'annual_returns']\n            }\n          ],\n          penalties: [\n            {\n              type: 'fine',\n              maxAmount: 5000000, // KES 5 million\n              currency: 'KES',\n              description: 'Fines up to KES 5 million or imprisonment up to 10 years'\n            }\n          ],\n          deadlines: [\n            {\n              id: 'kenya_annual_return',\n              title: 'Annual Data Protection Return',\n              date: new Date(new Date().getFullYear() + 1, 2, 31), // March 31st\n              description: 'Submit annual return to Office of Data Protection Commissioner',\n              severity: 'medium',\n              recurring: true,\n              intervalDays: 365\n            }\n          ],\n          applicability: {\n            businessTypes: ['data_controllers', 'data_processors'],\n            dataTypes: ['personal_data'],\n            userCountThresholds: { min: 1 }\n          }\n        }\n      ]\n    };\n\n    // Add frameworks to monitoring\n    this.frameworks.set(nigeriaFramework.id, nigeriaFramework);\n    this.frameworks.set(southAfricaFramework.id, southAfricaFramework);\n    this.frameworks.set(kenyaFramework.id, kenyaFramework);\n\n    logger.info('Loaded African compliance frameworks', {\n      frameworkCount: this.frameworks.size,\n      countries: ['Nigeria', 'South Africa', 'Kenya']\n    });\n  }\n\n  /**\n   * Connect to existing compliance systems\n   */\n  private connectToExistingComplianceSystems() {\n    // Listen to security monitor for compliance-relevant events\n    securityMonitor.on('securityEvent', (event) => {\n      this.handleSecurityEvent(event);\n    });\n\n    // Listen to audit logger for compliance violations\n    enterpriseAuditLogger.on('audit_event', (event) => {\n      this.handleAuditEvent(event);\n    });\n\n    // Connect to strategic decision engine\n    strategicDecisionEngine.on('compliance_decision_needed', (decision) => {\n      this.handleComplianceDecision(decision);\n    });\n\n    logger.info('Connected to existing compliance systems');\n  }\n\n  /**\n   * Start continuous compliance monitoring\n   */\n  private startContinuousMonitoring() {\n    this.monitoringInterval = setInterval(async () => {\n      await this.performContinuousChecks();\n    }, 300000); // Every 5 minutes\n\n    logger.info('Started continuous compliance monitoring');\n  }\n\n  /**\n   * Schedule regular compliance assessments\n   */\n  private scheduleRegularAssessments() {\n    // Daily compliance check\n    setInterval(async () => {\n      await this.performDailyComplianceCheck();\n    }, 24 * 60 * 60 * 1000); // Daily\n\n    // Weekly compliance report\n    setInterval(async () => {\n      await this.generateWeeklyComplianceReport();\n    }, 7 * 24 * 60 * 60 * 1000); // Weekly\n\n    // Monthly comprehensive assessment\n    setInterval(async () => {\n      await this.performMonthlyAssessment();\n    }, 30 * 24 * 60 * 60 * 1000); // Monthly\n\n    logger.info('Scheduled regular compliance assessments');\n  }\n\n  /**\n   * Perform continuous compliance checks\n   */\n  private async performContinuousChecks() {\n    try {\n      for (const framework of this.frameworks.values()) {\n        if (!framework.enabled) continue;\n\n        for (const regulation of framework.regulations) {\n          for (const requirement of regulation.requirements) {\n            if (requirement.frequency === 'continuous' && requirement.autoCheckable) {\n              await this.checkRequirementCompliance(framework.id, regulation.id, requirement);\n            }\n          }\n        }\n      }\n    } catch (error) {\n      logger.error('Continuous compliance check failed', {\n        error: error instanceof Error ? error.message : String(error)\n      });\n    }\n  }\n\n  /**\n   * Check specific requirement compliance\n   */\n  private async checkRequirementCompliance(\n    frameworkId: string, \n    regulationId: string, \n    requirement: ComplianceRequirement\n  ): Promise<boolean> {\n    const tracer = trace.getTracer('compliance-monitor');\n    \n    return tracer.startActiveSpan('check-requirement-compliance', async (span) => {\n      try {\n        span.setAttributes({\n          'compliance.framework': frameworkId,\n          'compliance.regulation': regulationId,\n          'compliance.requirement': requirement.id\n        });\n\n        let isCompliant = true;\n        const evidence: ComplianceEvidence[] = [];\n\n        // Execute specific compliance checks based on requirement\n        switch (requirement.checkFunction) {\n          case 'checkConsentCompliance':\n            isCompliant = await this.checkConsentCompliance(evidence);\n            break;\n          case 'checkBreachNotificationCompliance':\n            isCompliant = await this.checkBreachNotificationCompliance(evidence);\n            break;\n          case 'checkLawfulnessCompliance':\n            isCompliant = await this.checkLawfulnessCompliance(evidence);\n            break;\n          case 'checkDataSubjectRights':\n            isCompliant = await this.checkDataSubjectRights(evidence);\n            break;\n          default:\n            // Generic compliance check\n            isCompliant = await this.performGenericComplianceCheck(requirement, evidence);\n        }\n\n        if (!isCompliant) {\n          await this.recordComplianceViolation(frameworkId, regulationId, requirement, evidence);\n        }\n\n        span.setAttributes({\n          'compliance.compliant': isCompliant,\n          'compliance.evidence_count': evidence.length\n        });\n\n        return isCompliant;\n\n      } catch (error) {\n        span.setStatus({ code: 2, message: String(error) });\n        logger.error('Requirement compliance check failed', {\n          frameworkId,\n          regulationId,\n          requirementId: requirement.id,\n          error: error instanceof Error ? error.message : String(error)\n        });\n        return false;\n      } finally {\n        span.end();\n      }\n    });\n  }\n\n  /**\n   * Specific compliance check implementations\n   */\n  private async checkConsentCompliance(evidence: ComplianceEvidence[]): Promise<boolean> {\n    try {\n      // Check consent records in database\n      const recentContacts = await prisma.contact.findMany({\n        where: {\n          createdAt: {\n            gte: new Date(Date.now() - 24 * 60 * 60 * 1000) // Last 24 hours\n          }\n        },\n        take: 100\n      });\n\n      // Check for proper consent documentation\n      let hasValidConsent = true;\n      for (const contact of recentContacts) {\n        if (!contact.consentGiven) {\n          hasValidConsent = false;\n          evidence.push({\n            type: 'database_record',\n            source: 'contacts',\n            data: { contactId: contact.id, consentGiven: contact.consentGiven },\n            timestamp: new Date(),\n            hash: this.generateEvidenceHash(contact.id)\n          });\n        }\n      }\n\n      return hasValidConsent;\n    } catch (error) {\n      logger.error('Consent compliance check failed', { error });\n      return false;\n    }\n  }\n\n  private async checkBreachNotificationCompliance(evidence: ComplianceEvidence[]): Promise<boolean> {\n    try {\n      // Check if there are any unnotified security incidents\n      const recentIncidents = await this.getRecentSecurityIncidents();\n      \n      for (const incident of recentIncidents) {\n        const timeSinceIncident = Date.now() - incident.timestamp.getTime();\n        const hoursElapsed = timeSinceIncident / (1000 * 60 * 60);\n        \n        if (hoursElapsed > 72 && !incident.notified) {\n          evidence.push({\n            type: 'log_entry',\n            source: 'security_incidents',\n            data: incident,\n            timestamp: new Date(),\n            hash: this.generateEvidenceHash(incident.id)\n          });\n          return false;\n        }\n      }\n\n      return true;\n    } catch (error) {\n      logger.error('Breach notification compliance check failed', { error });\n      return false;\n    }\n  }\n\n  private async checkLawfulnessCompliance(evidence: ComplianceEvidence[]): Promise<boolean> {\n    try {\n      // Check for lawful basis documentation\n      const dataProcessingActivities = await this.getDataProcessingActivities();\n      \n      for (const activity of dataProcessingActivities) {\n        if (!activity.lawfulBasis || !activity.purpose) {\n          evidence.push({\n            type: 'database_record',\n            source: 'data_processing',\n            data: activity,\n            timestamp: new Date(),\n            hash: this.generateEvidenceHash(activity.id)\n          });\n          return false;\n        }\n      }\n\n      return true;\n    } catch (error) {\n      logger.error('Lawfulness compliance check failed', { error });\n      return false;\n    }\n  }\n\n  private async checkDataSubjectRights(evidence: ComplianceEvidence[]): Promise<boolean> {\n    try {\n      // Check if data subject rights are being honored within required timeframes\n      const pendingRequests = await this.getPendingDataSubjectRequests();\n      \n      for (const request of pendingRequests) {\n        const daysSinceRequest = (Date.now() - request.createdAt.getTime()) / (1000 * 60 * 60 * 24);\n        \n        if (daysSinceRequest > 30) { // 30 days is common requirement\n          evidence.push({\n            type: 'database_record',\n            source: 'data_subject_requests',\n            data: request,\n            timestamp: new Date(),\n            hash: this.generateEvidenceHash(request.id)\n          });\n          return false;\n        }\n      }\n\n      return true;\n    } catch (error) {\n      logger.error('Data subject rights check failed', { error });\n      return false;\n    }\n  }\n\n  private async performGenericComplianceCheck(requirement: ComplianceRequirement, evidence: ComplianceEvidence[]): Promise<boolean> {\n    // Generic compliance check - can be extended based on requirement type\n    logger.info('Performing generic compliance check', {\n      requirementId: requirement.id,\n      category: requirement.category\n    });\n    \n    // For now, assume compliance (would implement specific checks)\n    return true;\n  }\n\n  /**\n   * Record compliance violation\n   */\n  private async recordComplianceViolation(\n    frameworkId: string,\n    regulationId: string,\n    requirement: ComplianceRequirement,\n    evidence: ComplianceEvidence[]\n  ) {\n    const violation: ComplianceViolation = {\n      id: `violation_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      frameworkId,\n      regulationId,\n      requirementId: requirement.id,\n      severity: requirement.riskLevel,\n      status: 'detected',\n      description: `Compliance violation detected for requirement: ${requirement.title}`,\n      detectedAt: new Date(),\n      evidence,\n      remediation: this.generateRemediationActions(requirement),\n      resolved: false\n    };\n\n    this.violations.set(violation.id, violation);\n\n    // Log to audit system\n    await enterpriseAuditLogger.logAuditEvent({\n      eventType: 'COMPLIANCE_VIOLATION',\n      userId: 'system',\n      userRole: 'SYSTEM',\n      action: 'compliance_violation_detected',\n      resource: `requirement:${requirement.id}`,\n      details: {\n        violationId: violation.id,\n        framework: frameworkId,\n        regulation: regulationId,\n        severity: violation.severity\n      },\n      ipAddress: '127.0.0.1',\n      userAgent: 'AutonomousComplianceMonitor',\n      complianceMetadata: {\n        gdprRelevant: false,\n        hipaaRelevant: false,\n        pciRelevant: requirement.category === 'security',\n        retentionPeriodYears: 7\n      }\n    });\n\n    // Emit violation event\n    this.emit('compliance_violation', {\n      violation,\n      framework: this.frameworks.get(frameworkId),\n      autoRemediation: violation.remediation.some(r => r.autoExecutable)\n    });\n\n    // Trigger autonomous remediation if available\n    if (violation.remediation.some(r => r.autoExecutable)) {\n      await this.triggerAutonomousRemediation(violation);\n    }\n\n    logger.warn('Compliance violation recorded', {\n      violationId: violation.id,\n      framework: frameworkId,\n      requirement: requirement.id,\n      severity: violation.severity\n    });\n  }\n\n  /**\n   * Generate remediation actions\n   */\n  private generateRemediationActions(requirement: ComplianceRequirement): ComplianceRemediation[] {\n    const remediations: ComplianceRemediation[] = [];\n\n    switch (requirement.category) {\n      case 'consent_management':\n        remediations.push({\n          id: `remediation_${Date.now()}_1`,\n          action: 'Update consent collection process to ensure valid consent',\n          priority: 'high',\n          autoExecutable: false,\n          estimatedEffort: '2-4 hours',\n          estimatedCost: 5000,\n          status: 'pending'\n        });\n        break;\n\n      case 'incident_response':\n        remediations.push({\n          id: `remediation_${Date.now()}_2`,\n          action: 'Implement automated breach notification system',\n          priority: 'critical',\n          autoExecutable: true,\n          estimatedEffort: '1-2 days',\n          estimatedCost: 15000,\n          status: 'pending'\n        });\n        break;\n\n      case 'data_handling':\n        remediations.push({\n          id: `remediation_${Date.now()}_3`,\n          action: 'Review and update data processing documentation',\n          priority: 'medium',\n          autoExecutable: false,\n          estimatedEffort: '4-8 hours',\n          estimatedCost: 8000,\n          status: 'pending'\n        });\n        break;\n    }\n\n    return remediations;\n  }\n\n  /**\n   * Trigger autonomous remediation\n   */\n  private async triggerAutonomousRemediation(violation: ComplianceViolation) {\n    try {\n      const autoRemediations = violation.remediation.filter(r => r.autoExecutable);\n      \n      for (const remediation of autoRemediations) {\n        // Request agent assistance for remediation\n        await multiAgentCoordinator.requestAgentCollaboration({\n          requiredCapabilities: ['compliance', 'security'],\n          objective: `Execute autonomous remediation: ${remediation.action}`,\n          priority: remediation.priority === 'critical' ? 'critical' : 'medium',\n          requesterId: 'compliance_monitor',\n          context: {\n            violationId: violation.id,\n            remediationId: remediation.id,\n            framework: violation.frameworkId\n          }\n        });\n\n        remediation.status = 'in_progress';\n        \n        logger.info('Triggered autonomous remediation', {\n          violationId: violation.id,\n          remediationId: remediation.id,\n          action: remediation.action\n        });\n      }\n    } catch (error) {\n      logger.error('Autonomous remediation failed', {\n        violationId: violation.id,\n        error: error instanceof Error ? error.message : String(error)\n      });\n    }\n  }\n\n  // Helper methods\n  private async getRecentSecurityIncidents(): Promise<any[]> {\n    // Integration with existing security monitor\n    return [];\n  }\n\n  private async getDataProcessingActivities(): Promise<any[]> {\n    // Get data processing activities from existing systems\n    return [];\n  }\n\n  private async getPendingDataSubjectRequests(): Promise<any[]> {\n    // Get pending data subject requests\n    return [];\n  }\n\n  private generateEvidenceHash(data: string): string {\n    // Generate hash for evidence integrity\n    return Buffer.from(data).toString('base64');\n  }\n\n  private async performDailyComplianceCheck() {\n    logger.info('Performing daily compliance check');\n    // Implementation for daily checks\n  }\n\n  private async generateWeeklyComplianceReport() {\n    logger.info('Generating weekly compliance report');\n    // Implementation for weekly reports\n  }\n\n  private async performMonthlyAssessment() {\n    logger.info('Performing monthly compliance assessment');\n    // Implementation for monthly assessments\n  }\n\n  // Event handlers\n  private handleSecurityEvent(event: any) {\n    // Handle security events that may affect compliance\n    logger.info('Processing security event for compliance implications', {\n      eventType: event.type,\n      severity: event.severity\n    });\n  }\n\n  private handleAuditEvent(event: any) {\n    // Handle audit events for compliance monitoring\n    logger.info('Processing audit event for compliance monitoring', {\n      eventType: event.eventType\n    });\n  }\n\n  private handleComplianceDecision(decision: any) {\n    // Handle compliance-related strategic decisions\n    logger.info('Processing compliance decision', {\n      decisionType: decision.type\n    });\n  }\n\n  /**\n   * Public API methods\n   */\n  async getComplianceFrameworks(): Promise<ComplianceFramework[]> {\n    return Array.from(this.frameworks.values());\n  }\n\n  async getActiveViolations(): Promise<ComplianceViolation[]> {\n    return Array.from(this.violations.values()).filter(v => !v.resolved);\n  }\n\n  async getComplianceScore(): Promise<number> {\n    return this.complianceScore;\n  }\n\n  async generateComplianceReport(frameworkId?: string): Promise<ComplianceReport> {\n    const violations = frameworkId \n      ? Array.from(this.violations.values()).filter(v => v.frameworkId === frameworkId)\n      : Array.from(this.violations.values());\n\n    const activeViolations = violations.filter(v => !v.resolved);\n    const resolvedViolations = violations.filter(v => v.resolved);\n\n    return {\n      id: `report_${Date.now()}`,\n      frameworkId: frameworkId || 'all',\n      reportType: 'assessment',\n      period: {\n        start: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), // Last 30 days\n        end: new Date()\n      },\n      overallScore: this.complianceScore,\n      compliance: {\n        compliant: resolvedViolations.length,\n        nonCompliant: activeViolations.length,\n        partiallyCompliant: 0,\n        notApplicable: 0\n      },\n      violations: activeViolations,\n      recommendations: this.generateComplianceRecommendations(activeViolations),\n      generatedAt: new Date(),\n      generatedBy: 'system'\n    };\n  }\n\n  private generateComplianceRecommendations(violations: ComplianceViolation[]): ComplianceRecommendation[] {\n    const recommendations: ComplianceRecommendation[] = [];\n\n    if (violations.some(v => v.severity === 'critical')) {\n      recommendations.push({\n        priority: 'critical',\n        category: 'immediate_action',\n        title: 'Address Critical Compliance Violations',\n        description: 'Critical compliance violations require immediate attention to avoid penalties',\n        estimatedImpact: 90,\n        estimatedEffort: '1-3 days',\n        estimatedCost: 50000,\n        autoImplementable: false\n      });\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * Cleanup and destroy\n   */\n  destroy() {\n    if (this.monitoringInterval) {\n      clearInterval(this.monitoringInterval);\n      this.monitoringInterval = null;\n    }\n    \n    for (const timeout of this.activeChecks.values()) {\n      clearTimeout(timeout);\n    }\n    this.activeChecks.clear();\n    \n    this.removeAllListeners();\n    logger.info('Autonomous compliance monitor destroyed');\n  }\n}\n\n// Export singleton instance\nexport const autonomousComplianceMonitor = new AutonomousComplianceMonitor();\n\n// Export types and class\nexport { AutonomousComplianceMonitor };"],"names":["AutonomousComplianceMonitor","autonomousComplianceMonitor","EventEmitter","constructor","frameworks","Map","violations","activeChecks","complianceScore","lastAssessment","Date","monitoringInterval","initializeComplianceMonitoring","logger","info","loadAfricanComplianceFrameworks","connectToExistingComplianceSystems","startContinuousMonitoring","scheduleRegularAssessments","error","Error","message","String","nigeriaFramework","id","name","country","type","enabled","riskLevel","nextAssessment","now","regulations","description","requirements","title","category","mandatory","autoCheckable","frequency","checkFunction","evidence","penalties","maxAmount","currency","deadlines","date","getFullYear","severity","recurring","intervalDays","applicability","businessTypes","dataTypes","userCountThresholds","min","southAfricaFramework","kenyaFramework","set","frameworkCount","size","countries","securityMonitor","on","event","handleSecurityEvent","enterpriseAuditLogger","handleAuditEvent","strategicDecisionEngine","decision","handleComplianceDecision","setInterval","performContinuousChecks","performDailyComplianceCheck","generateWeeklyComplianceReport","performMonthlyAssessment","framework","values","regulation","requirement","checkRequirementCompliance","frameworkId","regulationId","tracer","trace","getTracer","startActiveSpan","span","setAttributes","isCompliant","checkConsentCompliance","checkBreachNotificationCompliance","checkLawfulnessCompliance","checkDataSubjectRights","performGenericComplianceCheck","recordComplianceViolation","length","setStatus","code","requirementId","end","recentContacts","prisma","contact","findMany","where","createdAt","gte","take","hasValidConsent","consentGiven","push","source","data","contactId","timestamp","hash","generateEvidenceHash","recentIncidents","getRecentSecurityIncidents","incident","timeSinceIncident","getTime","hoursElapsed","notified","dataProcessingActivities","getDataProcessingActivities","activity","lawfulBasis","purpose","pendingRequests","getPendingDataSubjectRequests","request","daysSinceRequest","violation","Math","random","toString","substr","status","detectedAt","remediation","generateRemediationActions","resolved","logAuditEvent","eventType","userId","userRole","action","resource","details","violationId","ipAddress","userAgent","complianceMetadata","gdprRelevant","hipaaRelevant","pciRelevant","retentionPeriodYears","emit","get","autoRemediation","some","r","autoExecutable","triggerAutonomousRemediation","warn","remediations","priority","estimatedEffort","estimatedCost","autoRemediations","filter","multiAgentCoordinator","requestAgentCollaboration","requiredCapabilities","objective","requesterId","context","remediationId","Buffer","from","decisionType","getComplianceFrameworks","Array","getActiveViolations","v","getComplianceScore","generateComplianceReport","activeViolations","resolvedViolations","reportType","period","start","overallScore","compliance","compliant","nonCompliant","partiallyCompliant","notApplicable","recommendations","generateComplianceRecommendations","generatedAt","generatedBy","estimatedImpact","autoImplementable","destroy","clearInterval","timeout","clearTimeout","clear","removeAllListeners"],"mappings":"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"}