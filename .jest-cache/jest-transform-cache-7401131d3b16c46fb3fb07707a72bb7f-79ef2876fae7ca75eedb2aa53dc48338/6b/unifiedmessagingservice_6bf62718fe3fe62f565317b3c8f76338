f27c18796727758039278f3e0a9df04a
/**
 * Unified Messaging Service
 * 
 * Handles both customer-managed and platform-managed messaging across all channels
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    UnifiedMessagingService: function() {
        return UnifiedMessagingService;
    },
    unifiedMessagingService: function() {
        return unifiedMessagingService;
    }
});
const _prisma = /*#__PURE__*/ _interop_require_default(require("../db/prisma"));
const _smsservice = require("../sms-providers/sms-service");
const _emailservice = require("../email-providers/email-service");
const _whatsappservice = require("../whatsapp-service");
const _masteraccounts = require("../config/master-accounts");
const _provideroptimizationengine = require("./provider-optimization-engine");
const _logger = require("../logger");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
class UnifiedMessagingService {
    /**
   * Send a message through the unified service
   */ async sendMessage(request) {
        try {
            // Get organization's messaging configuration
            const orgConfig = await this.getOrganizationConfig(request.organizationId);
            if (orgConfig.messagingModel === 'customer_managed') {
                return await this.sendViaCustomerManagedAPI(request);
            } else {
                return await this.sendViaPlatformManagedAPI(request, orgConfig);
            }
        } catch (error) {
            _logger.logger.error('Unified messaging service error:', error);
            return {
                success: false,
                error: {
                    message: error instanceof Error ? error.message : 'Unknown error',
                    code: 'UNIFIED_MESSAGING_ERROR'
                }
            };
        }
    }
    /**
   * Send message using customer's own API credentials
   */ async sendViaCustomerManagedAPI(request) {
        const { channel, to, content, organizationId } = request;
        switch(channel){
            case 'sms':
                const smsResult = await _smsservice.smsService.sendSMS(to, content, organizationId);
                return {
                    success: smsResult.success,
                    messageId: smsResult.messageId,
                    provider: _smsservice.smsService.getProviderName(),
                    cost: 0,
                    credits: 0,
                    error: smsResult.error
                };
            case 'email':
                const emailResult = await _emailservice.emailService.sendEmail(organizationId, {
                    to: to,
                    from: 'noreply@marketsage.africa',
                    subject: 'Message from MarketSage',
                    html: content,
                    text: content.replace(/<[^>]*>/g, '') // Strip HTML for text version
                });
                return {
                    success: emailResult.success,
                    messageId: emailResult.messageId,
                    provider: emailResult.provider || 'email',
                    cost: 0,
                    credits: 0,
                    error: emailResult.error
                };
            case 'whatsapp':
                const whatsappResult = await _whatsappservice.whatsappService.sendTextMessage(to, content, organizationId);
                return {
                    success: whatsappResult.success,
                    messageId: whatsappResult.messageId,
                    provider: 'whatsapp-business',
                    cost: 0,
                    credits: 0,
                    error: whatsappResult.error
                };
            default:
                return {
                    success: false,
                    error: {
                        message: 'Unsupported channel',
                        code: 'UNSUPPORTED_CHANNEL'
                    }
                };
        }
    }
    /**
   * Send message using platform's master API accounts
   */ async sendViaPlatformManagedAPI(request, orgConfig) {
        const { channel, to, content, organizationId } = request;
        // Check if organization has enough credits
        const creditCost = await this.calculateCreditCost(channel, 1, orgConfig.region);
        if (orgConfig.creditBalance < creditCost) {
            // Try auto top-up if enabled
            if (orgConfig.autoTopUp && orgConfig.creditBalance < orgConfig.autoTopUpThreshold) {
                const topUpSuccess = await this.autoTopUpCredits(organizationId, orgConfig.autoTopUpAmount);
                if (!topUpSuccess) {
                    return {
                        success: false,
                        error: {
                            message: 'Insufficient credits and auto top-up failed',
                            code: 'INSUFFICIENT_CREDITS'
                        }
                    };
                }
            } else {
                return {
                    success: false,
                    error: {
                        message: 'Insufficient credits',
                        code: 'INSUFFICIENT_CREDITS'
                    }
                };
            }
        }
        // Use provider optimization engine to get the best provider
        let masterAccount;
        try {
            const optimization = await _provideroptimizationengine.providerOptimizationEngine.optimizeProvider({
                channel,
                messageCount: 1,
                region: orgConfig.region,
                priority: 'balanced',
                organizationId
            });
            // Get the master account for the recommended provider
            const channelAccounts = _masteraccounts.masterAccountsConfig[channel];
            const recommendedProvider = channelAccounts[optimization.recommendedProvider];
            if (recommendedProvider?.isActive) {
                masterAccount = recommendedProvider;
            } else {
                // Fallback to default selection
                masterAccount = _masteraccounts.MasterAccountManager.getBestMasterAccount(channel, orgConfig.region);
            }
        } catch (error) {
            _logger.logger.warn('Provider optimization failed, using fallback:', error);
            masterAccount = _masteraccounts.MasterAccountManager.getBestMasterAccount(channel, orgConfig.region);
        }
        if (!masterAccount) {
            return {
                success: false,
                error: {
                    message: 'No master account available for this channel',
                    code: 'NO_MASTER_ACCOUNT'
                }
            };
        }
        // Send the message
        const result = await this.sendViaMasterAccount(masterAccount, request);
        if (result.success) {
            // Deduct credits from organization
            await this.deductCredits(organizationId, creditCost);
            // Log usage for analytics
            await this.logUsage(organizationId, channel, 1, creditCost, masterAccount.provider);
            return {
                ...result,
                cost: creditCost,
                credits: creditCost
            };
        }
        return result;
    }
    /**
   * Decrypt sensitive data
   */ decrypt(encryptedText) {
        try {
            const crypto = require('crypto');
            const key = process.env.ENCRYPTION_KEY || 'default-key-for-development';
            const decipher = crypto.createDecipher('aes-256-cbc', key);
            let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
            decrypted += decipher.final('utf8');
            return decrypted;
        } catch (error) {
            _logger.logger.error('Decryption failed:', error);
            return encryptedText; // Return as-is if decryption fails
        }
    }
    /**
   * Send message using a specific master account
   */ async sendViaMasterAccount(masterAccount, request) {
        const { channel, to, content } = request;
        try {
            switch(channel){
                case 'sms':
                    return await this.sendSMSViaMaster(masterAccount, to, content);
                case 'email':
                    return await this.sendEmailViaMaster(masterAccount, to, content);
                case 'whatsapp':
                    return await this.sendWhatsAppViaMaster(masterAccount, to, content);
                default:
                    return {
                        success: false,
                        error: {
                            message: 'Unsupported channel',
                            code: 'UNSUPPORTED_CHANNEL'
                        }
                    };
            }
        } catch (error) {
            _logger.logger.error(`Master account send error (${masterAccount.provider}):`, error);
            return {
                success: false,
                error: {
                    message: error instanceof Error ? error.message : 'Master account send failed',
                    code: 'MASTER_ACCOUNT_ERROR'
                }
            };
        }
    }
    /**
   * Send SMS via master account
   */ async sendSMSViaMaster(masterAccount, to, content) {
        const { provider } = masterAccount;
        switch(provider){
            case 'twilio':
                const TwilioSMSProvider = (await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../sms-providers/twilio-provider")))).TwilioSMSProvider;
                const twilioProvider = new TwilioSMSProvider({
                    accountSid: masterAccount.accountId,
                    authToken: masterAccount.apiKey,
                    fromNumber: masterAccount.fromNumber
                });
                const result = await twilioProvider.sendSMS(to, content);
                return {
                    success: result.success,
                    messageId: result.messageId,
                    provider: 'twilio',
                    error: result.error
                };
            case 'africas-talking':
                // TODO: Implement Africa's Talking master account
                return {
                    success: false,
                    error: {
                        message: 'Africa\'s Talking master account not implemented',
                        code: 'NOT_IMPLEMENTED'
                    }
                };
            case 'termii':
                // TODO: Implement Termii master account
                return {
                    success: false,
                    error: {
                        message: 'Termii master account not implemented',
                        code: 'NOT_IMPLEMENTED'
                    }
                };
            default:
                return {
                    success: false,
                    error: {
                        message: 'Unsupported SMS provider',
                        code: 'UNSUPPORTED_PROVIDER'
                    }
                };
        }
    }
    /**
   * Send email via master account
   */ async sendEmailViaMaster(masterAccount, to, content) {
        const { provider } = masterAccount;
        try {
            const { createMasterEmailProvider } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../email-providers")));
            const emailProvider = createMasterEmailProvider(provider, {
                apiKey: masterAccount.apiKey,
                domain: masterAccount.domain,
                fromEmail: masterAccount.fromEmail
            });
            const result = await emailProvider.sendEmail({
                to,
                from: masterAccount.fromEmail || 'noreply@marketsage.africa',
                subject: 'MarketSage Notification',
                html: content,
                text: content.replace(/<[^>]*>/g, '')
            });
            return {
                success: result.success,
                messageId: result.messageId,
                provider,
                error: result.error
            };
        } catch (error) {
            return {
                success: false,
                error: {
                    message: error instanceof Error ? error.message : 'Email send failed',
                    code: 'EMAIL_SEND_ERROR'
                }
            };
        }
    }
    /**
   * Send WhatsApp via master account
   */ async sendWhatsAppViaMaster(masterAccount, to, content) {
        const { provider } = masterAccount;
        try {
            switch(provider){
                case 'twilio-whatsapp':
                    // Use Twilio WhatsApp API
                    const twilioResponse = await fetch(`https://api.twilio.com/2010-04-01/Accounts/${masterAccount.accountId}/Messages.json`, {
                        method: 'POST',
                        headers: {
                            'Authorization': `Basic ${Buffer.from(`${masterAccount.accountId}:${masterAccount.apiKey}`).toString('base64')}`,
                            'Content-Type': 'application/x-www-form-urlencoded'
                        },
                        body: new URLSearchParams({
                            From: `whatsapp:${masterAccount.fromNumber}`,
                            To: `whatsapp:${to}`,
                            Body: content
                        })
                    });
                    if (twilioResponse.ok) {
                        const data = await twilioResponse.json();
                        return {
                            success: true,
                            messageId: data.sid,
                            provider: 'twilio-whatsapp'
                        };
                    } else {
                        const error = await twilioResponse.json();
                        return {
                            success: false,
                            error: {
                                message: error.message || 'Twilio WhatsApp send failed',
                                code: 'TWILIO_ERROR'
                            }
                        };
                    }
                case 'whatsapp-business':
                    // Use WhatsApp Business API directly
                    const cleanPhoneNumber = to.replace(/\D/g, '');
                    const formattedPhoneNumber = cleanPhoneNumber.startsWith('234') ? cleanPhoneNumber : '234' + cleanPhoneNumber.replace(/^0/, '');
                    const waResponse = await fetch(`https://graph.facebook.com/v21.0/${masterAccount.fromNumber}/messages`, {
                        method: 'POST',
                        headers: {
                            'Authorization': `Bearer ${masterAccount.apiKey}`,
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            messaging_product: 'whatsapp',
                            to: formattedPhoneNumber,
                            type: 'text',
                            text: {
                                body: content
                            }
                        })
                    });
                    if (waResponse.ok) {
                        const data = await waResponse.json();
                        return {
                            success: true,
                            messageId: data.messages[0]?.id,
                            provider: 'whatsapp-business'
                        };
                    } else {
                        const error = await waResponse.json();
                        return {
                            success: false,
                            error: {
                                message: error.error?.message || 'WhatsApp Business send failed',
                                code: 'WHATSAPP_ERROR'
                            }
                        };
                    }
                default:
                    return {
                        success: false,
                        error: {
                            message: 'Unsupported WhatsApp provider',
                            code: 'UNSUPPORTED_PROVIDER'
                        }
                    };
            }
        } catch (error) {
            return {
                success: false,
                error: {
                    message: error instanceof Error ? error.message : 'WhatsApp send failed',
                    code: 'WHATSAPP_SEND_ERROR'
                }
            };
        }
    }
    /**
   * Get organization's messaging configuration
   */ async getOrganizationConfig(organizationId) {
        const org = await _prisma.default.organization.findUnique({
            where: {
                id: organizationId
            },
            select: {
                messagingModel: true,
                creditBalance: true,
                autoTopUp: true,
                autoTopUpAmount: true,
                autoTopUpThreshold: true,
                preferredProviders: true,
                region: true
            }
        });
        if (!org) {
            throw new Error('Organization not found');
        }
        return {
            messagingModel: org.messagingModel || 'customer_managed',
            creditBalance: org.creditBalance || 0,
            autoTopUp: org.autoTopUp || false,
            autoTopUpAmount: org.autoTopUpAmount || 100,
            autoTopUpThreshold: org.autoTopUpThreshold || 10,
            preferredProviders: org.preferredProviders ? JSON.parse(org.preferredProviders) : {},
            region: org.region || 'us'
        };
    }
    /**
   * Calculate credit cost for a message
   */ async calculateCreditCost(channel, messageCount, region) {
        const { cost } = _masteraccounts.MasterAccountManager.calculateCost(channel, messageCount, region);
        // Apply markup for reselling
        const markup = channel === 'sms' ? 2.5 : channel === 'email' ? 3.0 : 2.0;
        return cost * markup;
    }
    /**
   * Deduct credits from organization
   */ async deductCredits(organizationId, credits) {
        await _prisma.default.organization.update({
            where: {
                id: organizationId
            },
            data: {
                creditBalance: {
                    decrement: credits
                }
            }
        });
    }
    /**
   * Auto top-up credits for organization
   */ async autoTopUpCredits(organizationId, amount) {
        try {
            // Get organization with user email for payment
            const org = await _prisma.default.organization.findUnique({
                where: {
                    id: organizationId
                },
                include: {
                    users: {
                        where: {
                            role: {
                                in: [
                                    'ADMIN',
                                    'SUPER_ADMIN'
                                ]
                            }
                        },
                        take: 1
                    }
                }
            });
            if (!org || !org.users.length) {
                _logger.logger.error('No admin user found for auto top-up');
                return false;
            }
            const adminUser = org.users[0];
            // For auto top-up, we'll create a transaction record for manual processing
            // In a production system, you'd want to use saved payment methods
            const reference = `auto_topup_${organizationId}_${Date.now()}`;
            await _prisma.default.creditTransaction.create({
                data: {
                    organizationId,
                    type: 'purchase',
                    amount,
                    description: `Auto top-up - $${amount}`,
                    paymentMethod: 'auto_topup',
                    paymentId: reference,
                    status: 'completed',
                    metadata: {
                        autoTopUp: true,
                        triggerDate: new Date().toISOString(),
                        adminUserId: adminUser.id
                    }
                }
            });
            // Update organization credit balance
            await _prisma.default.organization.update({
                where: {
                    id: organizationId
                },
                data: {
                    creditBalance: {
                        increment: amount
                    }
                }
            });
            _logger.logger.info(`Auto top-up successful for organization ${organizationId}: $${amount}`);
            return true;
        } catch (error) {
            _logger.logger.error('Auto top-up failed:', error);
            return false;
        }
    }
    /**
   * Log usage for analytics
   */ async logUsage(organizationId, channel, messageCount, credits, provider) {
        try {
            await _prisma.default.messagingUsage.create({
                data: {
                    organizationId,
                    channel,
                    messageCount,
                    credits,
                    provider,
                    timestamp: new Date()
                }
            });
        } catch (error) {
            _logger.logger.error('Usage logging failed:', error);
        }
    }
    /**
   * Get organization's credit balance
   */ async getCreditBalance(organizationId) {
        const org = await _prisma.default.organization.findUnique({
            where: {
                id: organizationId
            },
            select: {
                creditBalance: true
            }
        });
        return org?.creditBalance || 0;
    }
    /**
   * Get usage analytics for organization
   */ async getUsageAnalytics(organizationId, startDate, endDate) {
        const usage = await _prisma.default.messagingUsage.findMany({
            where: {
                organizationId,
                timestamp: {
                    gte: startDate,
                    lte: endDate
                }
            },
            orderBy: {
                timestamp: 'desc'
            }
        });
        const summary = usage.reduce((acc, item)=>{
            const key = item.channel;
            if (!acc[key]) {
                acc[key] = {
                    messages: 0,
                    credits: 0
                };
            }
            acc[key].messages += item.messageCount;
            acc[key].credits += item.credits;
            return acc;
        }, {});
        return {
            usage,
            summary
        };
    }
    /**
   * Switch organization's messaging model
   */ async switchMessagingModel(organizationId, newModel) {
        await _prisma.default.organization.update({
            where: {
                id: organizationId
            },
            data: {
                messagingModel: newModel
            }
        });
    }
    /**
   * Bulk send messages
   */ async bulkSendMessages(requests) {
        const results = [];
        // Process in batches to avoid overwhelming the system
        const batchSize = 10;
        for(let i = 0; i < requests.length; i += batchSize){
            const batch = requests.slice(i, i + batchSize);
            const batchResults = await Promise.all(batch.map((request)=>this.sendMessage(request)));
            results.push(...batchResults);
        }
        return results;
    }
}
const unifiedMessagingService = new UnifiedMessagingService();

//# sourceMappingURL=data:application/json;base64,