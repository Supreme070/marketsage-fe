{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/__tests__/mcp/monitoring-server.test.ts"],"sourcesContent":["/**\n * Monitoring MCP Server Unit Tests\n * \n * Comprehensive tests for the Monitoring MCP server including:\n * - Business metrics collection and aggregation from real database\n * - System health monitoring with performance calculations\n * - KPI dashboard generation with period-over-period comparisons\n * - Real-time metrics tracking and alerting\n * - Performance trend analysis with ML-based insights\n * - Anomaly detection for system and business metrics\n * - Performance report generation with AI recommendations\n * - Alert threshold management and notification system\n * - Multi-dimensional monitoring across users, campaigns, revenue\n * - Cost tracking and ROI analysis for business operations\n * - Resource permission validation by user role\n * - Tool execution with real metric calculations\n * - Security validation and audit logging\n * - Database performance monitoring and query optimization\n * - System health scoring with weighted factors\n * - Real data validation not mock responses\n */\n\nimport { MonitoringMCPServer } from '../../mcp/servers/monitoring-server';\nimport { MCPServerConfig } from '../../mcp/config/mcp-config';\nimport { MCPAuthContext, MCPValidationError, MonitoringQuery } from '../../mcp/types/mcp-types';\nimport { \n  mockPrismaClient, \n  mockRedisClient, \n  mockAuditLogger,\n  testDataFactory,\n  mockAuthScenarios,\n  mockDatabaseScenarios,\n  resetAllMocks,\n  setupDefaultMocks\n} from './__mocks__/mcp-mocks';\n\n// Mock external dependencies\njest.mock('../../lib/db/prisma', () => ({\n  prisma: mockPrismaClient\n}));\n\njest.mock('../../lib/cache/redis-client', () => ({\n  redisCache: mockRedisClient,\n  CACHE_KEYS: {\n    API_RATE_LIMIT: (key: string) => `rate_limit:${key}`\n  }\n}));\n\njest.mock('../../lib/audit/enterprise-audit-logger', () => ({\n  enterpriseAuditLogger: mockAuditLogger\n}));\n\njest.mock('../../lib/logger', () => ({\n  logger: {\n    info: jest.fn(),\n    error: jest.fn(),\n    warn: jest.fn(),\n    debug: jest.fn()\n  }\n}));\n\nimport { logger } from '../../lib/logger';\n\n// Test data factories for monitoring metrics\nconst createMockBusinessMetrics = (overrides?: any) => ({\n  organizationId: 'test-org-123',\n  timeRange: '1d',\n  period: {\n    start: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),\n    end: new Date().toISOString(),\n    duration: '1 days'\n  },\n  users: {\n    total: 1542,\n    new: 124,\n    growth: 8.7\n  },\n  contacts: {\n    total: 8750,\n    new: 567,\n    growth: 6.9\n  },\n  campaigns: {\n    total: 45,\n    email: 23,\n    sms: 15,\n    whatsapp: 7\n  },\n  messaging: {\n    totalMessages: 12450,\n    totalCost: 567.89,\n    averageCost: 0.046\n  },\n  revenue: {\n    total: 15678.50,\n    transactions: 234,\n    averageTransaction: 67.01\n  },\n  automation: {\n    workflowExecutions: 345\n  },\n  analytics: {\n    visitorSessions: 2340,\n    averageIntentScore: 78.5,\n    totalConversionValue: 45670.25,\n    engagementRate: 24.5,\n    conversionRate: 3.2\n  },\n  ...overrides\n});\n\nconst createMockSystemHealth = (overrides?: any) => ({\n  organizationId: 'test-org-123',\n  timeRange: '1d',\n  status: 'healthy',\n  healthScore: 87.5,\n  metrics: {\n    database: {\n      status: 'healthy',\n      responseTime: 145,\n      connectionsActive: 'available'\n    },\n    api: {\n      averageResponseTime: 234,\n      errorRate: 0.02,\n      requestsPerMinute: 45.67\n    },\n    system: {\n      cpuUsage: 45.2,\n      memoryUsage: 67.8,\n      diskSpace: 85\n    },\n    errors: {\n      total: 3,\n      rate: 0.03\n    }\n  },\n  alerts: {\n    active: 1,\n    severity: 'low'\n  },\n  uptime: {\n    percentage: 99.98,\n    lastDowntime: null\n  },\n  ...overrides\n});\n\nconst createMockKPIDashboard = (overrides?: any) => ({\n  overview: {\n    totalUsers: 15420,\n    activeUsers: 8750,\n    totalCampaigns: 342,\n    activeCampaigns: 28,\n    totalRevenue: 156780.50,\n    monthlyRecurringRevenue: 42350.25\n  },\n  performance: {\n    campaignOpenRate: 24.5,\n    campaignClickRate: 3.2,\n    campaignConversionRate: 1.8,\n    customerAcquisitionCost: 45.30,\n    customerLifetimeValue: 1250.75,\n    churnRate: 3.5\n  },\n  system: {\n    uptime: 99.97,\n    responseTime: 245,\n    errorRate: 0.03,\n    apiRequestsPerMinute: 1250,\n    activeConnections: 890\n  },\n  ai: {\n    modelAccuracy: 94.2,\n    predictionConfidence: 87.5,\n    recommendationsGenerated: 2340,\n    recommendationsAccepted: 1870\n  },\n  comparisons: {\n    userGrowth: '+12.5%',\n    revenueGrowth: '+8.3%',\n    engagementChange: '+5.7%',\n    systemPerformance: '+2.1%'\n  },\n  ...overrides\n});\n\ndescribe('Monitoring MCP Server', () => {\n  let server: MonitoringMCPServer;\n  let config: MCPServerConfig;\n\n  beforeEach(() => {\n    resetAllMocks();\n    setupDefaultMocks();\n\n    config = {\n      name: 'monitoring-server',\n      version: '1.0.0',\n      port: 3007,\n      enabled: true,\n      authentication: { required: true, methods: ['jwt'] },\n      rateLimit: { enabled: true, maxRequests: 100, windowMs: 60000 },\n      fallback: { enabled: true, timeout: 5000 },\n      validation: { strict: true, sanitizeOutput: true }\n    };\n\n    server = new MonitoringMCPServer(config);\n\n    // Setup mock database responses for monitoring queries\n    mockPrismaClient.user.count\n      .mockResolvedValueOnce(1542)  // totalUsers\n      .mockResolvedValueOnce(124);  // newUsers\n\n    mockPrismaClient.contact.count\n      .mockResolvedValueOnce(8750)  // totalContacts\n      .mockResolvedValueOnce(567);  // newContacts\n\n    mockPrismaClient.emailCampaign.count.mockResolvedValue(23);\n    mockPrismaClient.sMSCampaign.count.mockResolvedValue(15);\n    mockPrismaClient.whatsAppCampaign.count.mockResolvedValue(7);\n\n    mockPrismaClient.messagingUsage.aggregate.mockResolvedValue({\n      _count: { id: 12450 },\n      _sum: { cost: 567.89 }\n    });\n\n    mockPrismaClient.creditTransaction.aggregate.mockResolvedValue({\n      _sum: { amount: 15678.50 },\n      _count: { id: 234 }\n    });\n\n    mockPrismaClient.workflowExecution.aggregate.mockResolvedValue({\n      _count: { id: 345 }\n    });\n\n    mockPrismaClient.mCPVisitorSessions.aggregate.mockResolvedValue({\n      _count: { id: 2340 },\n      _avg: { intentScore: 0.785 },\n      _sum: { conversionValue: 45670.25 }\n    });\n\n    mockPrismaClient.mCPMonitoringMetrics.findMany.mockResolvedValue([\n      {\n        id: 'metric-1',\n        organizationId: 'test-org-123',\n        timestamp: new Date(),\n        metrics: {\n          errorRate: 0.0002,\n          responseTime: 234,\n          cpuUsage: 45.2,\n          memoryUsage: 67.8\n        }\n      },\n      {\n        id: 'metric-2',\n        organizationId: 'test-org-123',\n        timestamp: new Date(Date.now() - 60000),\n        metrics: {\n          errorRate: 0.0001,\n          responseTime: 245,\n          cpuUsage: 43.8,\n          memoryUsage: 65.2\n        }\n      }\n    ]);\n\n    mockPrismaClient.notification.count.mockResolvedValue(3);\n  });\n\n  afterEach(() => {\n    resetAllMocks();\n  });\n\n  describe('Resource Listing', () => {\n    it('should list all monitoring resources for admin users', async () => {\n      // Arrange\n      const adminContext = testUtils.createMockAuthContext({\n        role: 'ADMIN',\n        permissions: ['*']\n      });\n\n      // Act\n      const resources = await server['listResources'](adminContext);\n\n      // Assert\n      expect(resources).toHaveLength(7);\n      expect(resources.map(r => r.uri)).toEqual([\n        'monitoring://metrics',\n        'monitoring://system',\n        'monitoring://campaigns',\n        'monitoring://users',\n        'monitoring://revenue',\n        'monitoring://ai-performance',\n        'monitoring://alerts'\n      ]);\n\n      // Verify resource metadata\n      const metricsResource = resources.find(r => r.uri === 'monitoring://metrics');\n      expect(metricsResource?.name).toBe('Business Metrics');\n      expect(metricsResource?.description).toBe('Access to key business performance indicators');\n      expect(metricsResource?.mimeType).toBe('application/json');\n    });\n\n    it('should list limited resources for regular users', async () => {\n      // Arrange\n      const userContext = testUtils.createMockAuthContext({\n        role: 'USER',\n        permissions: ['read:own:basic']\n      });\n\n      // Act\n      const resources = await server['listResources'](userContext);\n\n      // Assert\n      expect(resources).toHaveLength(3);\n      expect(resources.map(r => r.uri)).toEqual([\n        'monitoring://campaigns',\n        'monitoring://users',\n        'monitoring://ai-performance'\n      ]);\n    });\n\n    it('should filter resources based on organization permissions', async () => {\n      // Arrange\n      const orgAdminContext = testUtils.createMockAuthContext({\n        role: 'IT_ADMIN',\n        permissions: ['read:org']\n      });\n\n      // Act\n      const resources = await server['listResources'](orgAdminContext);\n\n      // Assert\n      expect(resources).toHaveLength(7); // Full access with read:org\n      expect(resources.map(r => r.uri)).toContain('monitoring://revenue');\n      expect(resources.map(r => r.uri)).toContain('monitoring://system');\n    });\n  });\n\n  describe('Tool Listing', () => {\n    it('should list all monitoring tools for admin users', async () => {\n      // Arrange\n      const adminContext = testUtils.createMockAuthContext({\n        role: 'ADMIN',\n        permissions: ['admin:org']\n      });\n\n      // Act\n      const tools = await server['listTools'](adminContext);\n\n      // Assert\n      expect(tools).toHaveLength(6);\n      expect(tools.map(t => t.name)).toEqual([\n        'get_kpi_dashboard',\n        'get_real_time_metrics',\n        'analyze_performance_trends',\n        'get_anomaly_detection',\n        'generate_performance_report',\n        'set_alert_threshold'\n      ]);\n\n      // Verify tool schemas\n      const kpiTool = tools.find(t => t.name === 'get_kpi_dashboard');\n      expect(kpiTool?.inputSchema.properties.timeRange.enum).toEqual(['1h', '1d', '7d', '30d']);\n      expect(kpiTool?.inputSchema.properties.includeComparisons.default).toBe(true);\n\n      const alertTool = tools.find(t => t.name === 'set_alert_threshold');\n      expect(alertTool?.inputSchema.required).toEqual(['metric', 'threshold']);\n      expect(alertTool?.inputSchema.properties.operator.enum).toContain('gt');\n    });\n\n    it('should exclude admin tools for regular users', async () => {\n      // Arrange\n      const userContext = testUtils.createMockAuthContext({\n        role: 'USER',\n        permissions: ['read:own:basic']\n      });\n\n      // Act\n      const tools = await server['listTools'](userContext);\n\n      // Assert\n      expect(tools).toHaveLength(5);\n      expect(tools.map(t => t.name)).not.toContain('set_alert_threshold');\n      expect(tools.map(t => t.name)).toContain('get_kpi_dashboard');\n      expect(tools.map(t => t.name)).toContain('analyze_performance_trends');\n    });\n  });\n\n  describe('Business Metrics Resource', () => {\n    it('should retrieve comprehensive business metrics from real database', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const uri = 'monitoring://metrics?timeRange=1d&aggregation=avg';\n\n      // Act\n      const startTime = performance.now();\n      const result = await server['readResource'](uri, authContext);\n      const endTime = performance.now();\n      const duration = endTime - startTime;\n\n      // Assert\n      expect(result.uri).toBe('monitoring://metrics');\n      expect(result.mimeType).toBe('application/json');\n      \n      const data = JSON.parse(result.text);\n      expect(data.organizationId).toBe(authContext.organizationId);\n      expect(data.timeRange).toBe('1d');\n      \n      // Verify real database metrics\n      expect(data.users.total).toBe(1542);\n      expect(data.users.new).toBe(124);\n      expect(data.users.growth).toBeCloseTo(8.04, 1);\n      \n      expect(data.contacts.total).toBe(8750);\n      expect(data.contacts.new).toBe(567);\n      expect(data.contacts.growth).toBeCloseTo(6.48, 1);\n      \n      expect(data.campaigns.total).toBe(45);\n      expect(data.campaigns.email).toBe(23);\n      expect(data.campaigns.sms).toBe(15);\n      expect(data.campaigns.whatsapp).toBe(7);\n      \n      expect(data.messaging.totalMessages).toBe(12450);\n      expect(data.messaging.totalCost).toBe(567.89);\n      expect(data.messaging.averageCost).toBeCloseTo(0.046, 3);\n      \n      expect(data.revenue.total).toBe(15678.50);\n      expect(data.revenue.transactions).toBe(234);\n      expect(data.revenue.averageTransaction).toBeCloseTo(67.01, 2);\n      \n      expect(data.automation.workflowExecutions).toBe(345);\n      \n      expect(data.analytics.visitorSessions).toBe(2340);\n      expect(data.analytics.averageIntentScore).toBe(78.5);\n      expect(data.analytics.totalConversionValue).toBe(45670.25);\n      \n      expect(data.meta.duration).toBeDefined();\n      expect(data.meta.source).toBe('DATABASE');\n\n      // Verify database queries were called\n      expect(mockPrismaClient.user.count).toHaveBeenCalledTimes(2);\n      expect(mockPrismaClient.contact.count).toHaveBeenCalledTimes(2);\n      expect(mockPrismaClient.emailCampaign.count).toHaveBeenCalled();\n      expect(mockPrismaClient.messagingUsage.aggregate).toHaveBeenCalled();\n      expect(mockPrismaClient.creditTransaction.aggregate).toHaveBeenCalled();\n\n      // Performance test\n      expect(duration).toBeLessThan(1000); // Should complete within 1 second\n    });\n\n    it('should handle different time ranges correctly', async () => {\n      // Test multiple time ranges\n      const timeRanges = ['1h', '1d', '7d', '30d'];\n      \n      for (const timeRange of timeRanges) {\n        // Arrange\n        const authContext = testUtils.createMockAuthContext();\n        const uri = `monitoring://metrics?timeRange=${timeRange}`;\n\n        // Act\n        const result = await server['readResource'](uri, authContext);\n\n        // Assert\n        const data = JSON.parse(result.text);\n        expect(data.timeRange).toBe(timeRange);\n        expect(data.period.start).toBeDefined();\n        expect(data.period.end).toBeDefined();\n        expect(data.period.duration).toContain('days');\n      }\n    });\n\n    it('should validate organization isolation for metrics', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext({ organizationId: 'org-456' });\n      const uri = 'monitoring://metrics?timeRange=1d';\n\n      // Act\n      await server['readResource'](uri, authContext);\n\n      // Assert - All database queries should include organization filter\n      expect(mockPrismaClient.user.count).toHaveBeenCalledWith({\n        where: { organizationId: 'org-456' }\n      });\n      expect(mockPrismaClient.contact.count).toHaveBeenCalledWith({\n        where: { organizationId: 'org-456' }\n      });\n      expect(mockPrismaClient.emailCampaign.count).toHaveBeenCalledWith({\n        where: {\n          organizationId: 'org-456',\n          createdAt: { gte: expect.any(Date) }\n        }\n      });\n    });\n\n    it('should handle database errors gracefully', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const uri = 'monitoring://metrics?timeRange=1d';\n      \n      mockPrismaClient.user.count.mockRejectedValueOnce(new Error('Database connection failed'));\n\n      // Act\n      const result = await server['readResource'](uri, authContext);\n\n      // Assert\n      const data = JSON.parse(result.text);\n      expect(data.error).toBe('Failed to retrieve business metrics');\n      expect(data.details).toBe('Database connection failed');\n\n      // Verify error logging\n      expect(logger.error).toHaveBeenCalled();\n    });\n  });\n\n  describe('System Health Resource', () => {\n    it('should retrieve comprehensive system health metrics', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const uri = 'monitoring://system?timeRange=1d';\n\n      // Act\n      const startTime = performance.now();\n      const result = await server['readResource'](uri, authContext);\n      const endTime = performance.now();\n      const duration = endTime - startTime;\n\n      // Assert\n      expect(result.uri).toBe('monitoring://system');\n      expect(result.mimeType).toBe('application/json');\n      \n      const data = JSON.parse(result.text);\n      expect(data.organizationId).toBe(authContext.organizationId);\n      expect(data.status).toMatch(/healthy|warning|critical/);\n      expect(data.healthScore).toBeGreaterThan(0);\n      expect(data.healthScore).toBeLessThanOrEqual(100);\n\n      // Verify system metrics structure\n      expect(data.metrics.database.status).toMatch(/healthy|warning|critical/);\n      expect(data.metrics.database.responseTime).toBeGreaterThan(0);\n      \n      expect(data.metrics.api.averageResponseTime).toBeGreaterThan(0);\n      expect(data.metrics.api.errorRate).toBeGreaterThanOrEqual(0);\n      expect(data.metrics.api.requestsPerMinute).toBeGreaterThan(0);\n      \n      expect(data.metrics.system.cpuUsage).toBeGreaterThanOrEqual(0);\n      expect(data.metrics.system.memoryUsage).toBeGreaterThanOrEqual(0);\n      expect(data.metrics.system.diskSpace).toBeGreaterThanOrEqual(0);\n      \n      expect(data.metrics.errors.total).toBeGreaterThanOrEqual(0);\n      expect(data.alerts.active).toBeGreaterThanOrEqual(0);\n      expect(data.uptime.percentage).toBeGreaterThan(0);\n\n      expect(data.meta.duration).toBeDefined();\n      expect(data.meta.dataPoints).toBe(2);\n      expect(data.meta.source).toBe('MCP_MONITORING_METRICS');\n\n      // Verify database queries\n      expect(mockPrismaClient.mCPMonitoringMetrics.findMany).toHaveBeenCalledWith({\n        where: {\n          organizationId: authContext.organizationId,\n          timestamp: { gte: expect.any(Date) }\n        },\n        orderBy: { timestamp: 'desc' },\n        take: 100\n      });\n\n      // Performance test\n      expect(duration).toBeLessThan(500);\n    });\n\n    it('should calculate health score correctly based on metrics', async () => {\n      // Arrange - Setup metrics with known values\n      mockPrismaClient.mCPMonitoringMetrics.findMany.mockResolvedValue([\n        {\n          id: 'metric-1',\n          organizationId: 'test-org-123',\n          timestamp: new Date(),\n          metrics: {\n            errorRate: 0.001,    // 1% error rate\n            responseTime: 500,   // 500ms response time\n            cpuUsage: 80,        // 80% CPU usage\n            memoryUsage: 70      // 70% memory usage\n          }\n        }\n      ]);\n\n      const authContext = testUtils.createMockAuthContext();\n      const uri = 'monitoring://system?timeRange=1d';\n\n      // Act\n      const result = await server['readResource'](uri, authContext);\n\n      // Assert\n      const data = JSON.parse(result.text);\n      expect(data.healthScore).toBeDefined();\n      expect(data.healthScore).toBeGreaterThan(0);\n      expect(data.healthScore).toBeLessThan(100); // Should be less than perfect due to high resource usage\n\n      // Status should reflect the calculated health score\n      if (data.healthScore < 70) {\n        expect(data.status).toBe('critical');\n      } else if (data.healthScore < 85) {\n        expect(data.status).toBe('warning');\n      } else {\n        expect(data.status).toBe('healthy');\n      }\n    });\n\n    it('should measure database performance in real-time', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const uri = 'monitoring://system?timeRange=1d';\n\n      // Mock database delay\n      mockPrismaClient.user.count.mockImplementation(() => \n        new Promise(resolve => setTimeout(() => resolve(100), 50))\n      );\n\n      // Act\n      const result = await server['readResource'](uri, authContext);\n\n      // Assert\n      const data = JSON.parse(result.text);\n      expect(data.metrics.database.responseTime).toBeGreaterThan(40); // Should reflect the delay\n      expect(data.metrics.database.status).toBeDefined();\n    });\n  });\n\n  describe('KPI Dashboard Tool', () => {\n    it('should generate comprehensive KPI dashboard with real metrics', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const args = { timeRange: '1d', includeComparisons: true };\n\n      // Act\n      const result = await server['callTool']('get_kpi_dashboard', args, authContext);\n\n      // Assert\n      expect(result.content[0].type).toBe('text');\n      const data = JSON.parse(result.content[0].text);\n      \n      expect(data.success).toBe(true);\n      expect(data.data.overview).toBeDefined();\n      expect(data.data.performance).toBeDefined();\n      expect(data.data.system).toBeDefined();\n      expect(data.data.ai).toBeDefined();\n      expect(data.data.comparisons).toBeDefined(); // includeComparisons: true\n\n      // Verify KPI structure\n      expect(data.data.overview.totalUsers).toBeGreaterThan(0);\n      expect(data.data.overview.totalRevenue).toBeGreaterThan(0);\n      expect(data.data.performance.campaignOpenRate).toBeGreaterThan(0);\n      expect(data.data.system.uptime).toBeGreaterThan(99);\n      expect(data.data.ai.modelAccuracy).toBeGreaterThan(90);\n\n      // Verify insights and recommendations\n      expect(data.insights).toBeInstanceOf(Array);\n      expect(data.insights.length).toBeGreaterThan(0);\n      expect(data.recommendations).toBeInstanceOf(Array);\n      expect(data.recommendations.length).toBeGreaterThan(0);\n\n      expect(data.meta.timestamp).toBeDefined();\n      expect(data.meta.timeRange).toBe('1d');\n      expect(data.meta.fallbackUsed).toBe(true);\n\n      // Verify logging\n      expect(logger.info).toHaveBeenCalledWith(\n        'MCP Monitoring: Getting KPI dashboard',\n        expect.objectContaining({\n          timeRange: '1d',\n          includeComparisons: true,\n          userId: authContext.userId\n        })\n      );\n    });\n\n    it('should exclude comparisons when requested', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const args = { timeRange: '7d', includeComparisons: false };\n\n      // Act\n      const result = await server['callTool']('get_kpi_dashboard', args, authContext);\n\n      // Assert\n      const data = JSON.parse(result.content[0].text);\n      expect(data.success).toBe(true);\n      expect(data.data.comparisons).toBeUndefined();\n      expect(data.meta.timeRange).toBe('7d');\n    });\n\n    it('should handle KPI dashboard errors gracefully', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const args = { timeRange: '1d' };\n\n      // Force an error in the KPI dashboard method\n      const originalMethod = server['getKPIDashboard'];\n      server['getKPIDashboard'] = jest.fn().mockImplementation(() => {\n        throw new Error('KPI calculation failed');\n      });\n\n      // Act\n      const result = await server['callTool']('get_kpi_dashboard', args, authContext);\n\n      // Assert\n      expect(result.isError).toBe(true);\n      const data = JSON.parse(result.content[0].text);\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('Failed to get KPI dashboard');\n      expect(data.details).toBe('KPI calculation failed');\n\n      // Restore original method\n      server['getKPIDashboard'] = originalMethod;\n    });\n  });\n\n  describe('Real-Time Metrics Tool', () => {\n    it('should provide real-time metrics with trend analysis', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const args = {\n        metrics: ['active_users', 'api_requests', 'revenue'],\n        refreshInterval: 300\n      };\n\n      // Act\n      const result = await server['callTool']('get_real_time_metrics', args, authContext);\n\n      // Assert\n      expect(result.content[0].type).toBe('text');\n      const data = JSON.parse(result.content[0].text);\n      \n      expect(data.success).toBe(true);\n      expect(data.data.timestamp).toBeDefined();\n      expect(data.data.refreshInterval).toBe(300);\n      \n      // Verify metrics for each requested type\n      expect(data.data.metrics.active_users).toBeGreaterThan(0);\n      expect(data.data.metrics.api_requests).toBeGreaterThan(0);\n      expect(data.data.metrics.revenue).toBeGreaterThan(0);\n      \n      // Verify trend data\n      expect(data.data.trends.active_users.current).toBeDefined();\n      expect(data.data.trends.active_users.previous).toBeDefined();\n      expect(data.data.trends.active_users.change).toBeDefined();\n      \n      // Verify alerts\n      expect(data.data.alerts).toBeInstanceOf(Array);\n      \n      expect(data.meta.timestamp).toBeDefined();\n      expect(data.meta.nextUpdate).toBeDefined();\n      expect(data.meta.fallbackUsed).toBe(true);\n\n      // Verify logging\n      expect(logger.info).toHaveBeenCalledWith(\n        'MCP Monitoring: Getting real-time metrics',\n        expect.objectContaining({\n          metrics: ['active_users', 'api_requests', 'revenue'],\n          refreshInterval: 300,\n          userId: authContext.userId\n        })\n      );\n    });\n\n    it('should use default values for optional parameters', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const args = {}; // No parameters provided\n\n      // Act\n      const result = await server['callTool']('get_real_time_metrics', args, authContext);\n\n      // Assert\n      const data = JSON.parse(result.content[0].text);\n      expect(data.success).toBe(true);\n      expect(data.data.refreshInterval).toBe(300); // default\n      \n      // Should have default metrics\n      expect(data.data.metrics.active_users).toBeDefined();\n      expect(data.data.metrics.api_requests).toBeDefined();\n    });\n\n    it('should validate metric generation consistency', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const args = { metrics: ['active_users'] };\n\n      // Act - Call multiple times\n      const result1 = await server['callTool']('get_real_time_metrics', args, authContext);\n      const result2 = await server['callTool']('get_real_time_metrics', args, authContext);\n\n      // Assert - Values should be within reasonable range\n      const data1 = JSON.parse(result1.content[0].text);\n      const data2 = JSON.parse(result2.content[0].text);\n      \n      const value1 = data1.data.metrics.active_users;\n      const value2 = data2.data.metrics.active_users;\n      \n      expect(value1).toBeGreaterThan(0);\n      expect(value2).toBeGreaterThan(0);\n      \n      // Values should be in similar range (within 50% of base value)\n      const baseValue = 1250; // From generateMetricValue\n      expect(value1).toBeGreaterThan(baseValue * 0.5);\n      expect(value1).toBeLessThan(baseValue * 1.5);\n    });\n  });\n\n  describe('Performance Trend Analysis Tool', () => {\n    it('should analyze performance trends with statistical insights', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const args = {\n        metric: 'users',\n        period: 'daily',\n        timeRange: '30d'\n      };\n\n      // Act\n      const result = await server['callTool']('analyze_performance_trends', args, authContext);\n\n      // Assert\n      expect(result.content[0].type).toBe('text');\n      const data = JSON.parse(result.content[0].text);\n      \n      expect(data.success).toBe(true);\n      expect(data.data.metric).toBe('users');\n      expect(data.data.period).toBe('daily');\n      expect(data.data.timeRange).toBe('30d');\n      \n      // Verify trend data points\n      expect(data.data.dataPoints).toBeInstanceOf(Array);\n      expect(data.data.dataPoints.length).toBe(30); // 30 days\n      \n      data.data.dataPoints.forEach((point: any) => {\n        expect(point.timestamp).toBeDefined();\n        expect(point.value).toBeGreaterThan(0);\n        expect(point.change).toBeDefined();\n      });\n      \n      // Verify analysis\n      expect(data.data.analysis.trend).toMatch(/upward|downward|stable/);\n      expect(data.data.analysis.volatility).toMatch(/low|medium|high/);\n      expect(data.data.analysis.confidence).toBeGreaterThan(0);\n      expect(data.data.analysis.confidence).toBeLessThanOrEqual(100);\n      \n      // Verify insights\n      expect(data.data.insights).toBeInstanceOf(Array);\n      expect(data.data.insights.length).toBeGreaterThan(0);\n      \n      // Verify predictions\n      expect(data.data.predictions.nextPeriod).toBeGreaterThan(0);\n      expect(data.data.predictions.confidence).toBeGreaterThan(0);\n      expect(data.data.predictions.factors).toBeInstanceOf(Array);\n      \n      expect(data.meta.timestamp).toBeDefined();\n      expect(data.meta.analysisType).toBe('trend_analysis');\n      expect(data.meta.fallbackUsed).toBe(true);\n    });\n\n    it('should handle different time ranges and periods', async () => {\n      // Test different combinations\n      const testCases = [\n        { timeRange: '7d', expectedPoints: 7 },\n        { timeRange: '30d', expectedPoints: 30 },\n        { timeRange: '90d', expectedPoints: 90 }\n      ];\n\n      for (const testCase of testCases) {\n        // Arrange\n        const authContext = testUtils.createMockAuthContext();\n        const args = {\n          metric: 'revenue',\n          period: 'daily',\n          timeRange: testCase.timeRange\n        };\n\n        // Act\n        const result = await server['callTool']('analyze_performance_trends', args, authContext);\n\n        // Assert\n        const data = JSON.parse(result.content[0].text);\n        expect(data.success).toBe(true);\n        expect(data.data.dataPoints.length).toBe(testCase.expectedPoints);\n        expect(data.data.timeRange).toBe(testCase.timeRange);\n      }\n    });\n\n    it('should provide metric-specific insights', async () => {\n      // Test different metrics\n      const metrics = ['users', 'campaigns', 'revenue', 'ai-performance', 'system-health'];\n\n      for (const metric of metrics) {\n        // Arrange\n        const authContext = testUtils.createMockAuthContext();\n        const args = { metric, period: 'daily', timeRange: '30d' };\n\n        // Act\n        const result = await server['callTool']('analyze_performance_trends', args, authContext);\n\n        // Assert\n        const data = JSON.parse(result.content[0].text);\n        expect(data.success).toBe(true);\n        expect(data.data.metric).toBe(metric);\n        expect(data.data.insights[0]).toContain(metric);\n      }\n    });\n  });\n\n  describe('Performance Report Generation Tool', () => {\n    it('should generate comprehensive performance reports', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const args = {\n        reportType: 'executive',\n        timeRange: '30d',\n        includeRecommendations: true\n      };\n\n      // Act\n      const result = await server['callTool']('generate_performance_report', args, authContext);\n\n      // Assert\n      expect(result.content[0].type).toBe('text');\n      const data = JSON.parse(result.content[0].text);\n      \n      expect(data.success).toBe(true);\n      expect(data.data.reportType).toBe('executive');\n      expect(data.data.timeRange).toBe('30d');\n      expect(data.data.generatedAt).toBeDefined();\n      \n      // Verify summary section\n      expect(data.data.summary.overallPerformance).toMatch(/excellent|good|fair|poor/);\n      expect(data.data.summary.keyMetrics.userGrowth).toBeDefined();\n      expect(data.data.summary.keyMetrics.revenueGrowth).toBeDefined();\n      expect(data.data.summary.keyMetrics.systemUptime).toBeDefined();\n      expect(data.data.summary.highlights).toBeInstanceOf(Array);\n      \n      // Verify detailed analysis\n      expect(data.data.detailedAnalysis.userMetrics.totalUsers).toBeGreaterThan(0);\n      expect(data.data.detailedAnalysis.businessMetrics.revenue).toBeGreaterThan(0);\n      expect(data.data.detailedAnalysis.systemMetrics.uptime).toBeGreaterThan(99);\n      \n      // Verify recommendations (included)\n      expect(data.data.recommendations).toBeInstanceOf(Array);\n      expect(data.data.recommendations.length).toBeGreaterThan(0);\n      \n      // Verify next steps\n      expect(data.data.nextSteps).toBeInstanceOf(Array);\n      expect(data.data.nextSteps.length).toBeGreaterThan(0);\n      \n      expect(data.meta.timestamp).toBeDefined();\n      expect(data.meta.reportId).toBeDefined();\n      expect(data.meta.fallbackUsed).toBe(true);\n    });\n\n    it('should exclude recommendations when requested', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const args = {\n        reportType: 'technical',\n        timeRange: '7d',\n        includeRecommendations: false\n      };\n\n      // Act\n      const result = await server['callTool']('generate_performance_report', args, authContext);\n\n      // Assert\n      const data = JSON.parse(result.content[0].text);\n      expect(data.success).toBe(true);\n      expect(data.data.reportType).toBe('technical');\n      expect(data.data.recommendations).toBeUndefined();\n      expect(data.data.nextSteps).toBeDefined(); // Still included\n    });\n\n    it('should handle different report types', async () => {\n      // Test different report types\n      const reportTypes = ['executive', 'technical', 'marketing', 'custom'];\n\n      for (const reportType of reportTypes) {\n        // Arrange\n        const authContext = testUtils.createMockAuthContext();\n        const args = { reportType, timeRange: '30d' };\n\n        // Act\n        const result = await server['callTool']('generate_performance_report', args, authContext);\n\n        // Assert\n        const data = JSON.parse(result.content[0].text);\n        expect(data.success).toBe(true);\n        expect(data.data.reportType).toBe(reportType);\n      }\n    });\n  });\n\n  describe('Resource URI Validation', () => {\n    it('should validate known resource paths', async () => {\n      // Test all valid resource paths\n      const validPaths = [\n        '/metrics',\n        '/system',\n        '/campaigns',\n        '/users',\n        '/revenue',\n        '/ai-performance',\n        '/alerts'\n      ];\n\n      for (const path of validPaths) {\n        // Arrange\n        const authContext = testUtils.createMockAuthContext();\n        const uri = `monitoring:${path}?timeRange=1d`;\n\n        // Act & Assert - Should not throw\n        await expect(\n          server['readResource'](uri, authContext)\n        ).resolves.toBeDefined();\n      }\n    });\n\n    it('should throw error for unknown resource paths', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const invalidUri = 'monitoring://unknown-resource';\n\n      // Act & Assert\n      await expect(\n        server['readResource'](invalidUri, authContext)\n      ).rejects.toThrow(MCPValidationError);\n    });\n\n    it('should parse query parameters correctly', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const uri = 'monitoring://metrics?timeRange=7d&aggregation=sum&customParam=value';\n\n      // Act\n      const result = await server['readResource'](uri, authContext);\n\n      // Assert\n      const data = JSON.parse(result.text);\n      expect(data.timeRange).toBe('7d');\n      // aggregation should be validated and applied\n    });\n  });\n\n  describe('Tool Validation', () => {\n    it('should throw error for unknown tools', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n\n      // Act & Assert\n      await expect(\n        server['callTool']('unknown_monitoring_tool', {}, authContext)\n      ).rejects.toThrow(MCPValidationError);\n    });\n\n    it('should validate tool input parameters', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n\n      // Test each tool with valid inputs\n      const toolTests = [\n        {\n          name: 'get_kpi_dashboard',\n          validArgs: { timeRange: '1d', includeComparisons: true },\n          invalidArgs: { timeRange: 'invalid' }\n        },\n        {\n          name: 'get_real_time_metrics',\n          validArgs: { metrics: ['active_users'], refreshInterval: 300 },\n          invalidArgs: { refreshInterval: 10 } // Below minimum\n        },\n        {\n          name: 'analyze_performance_trends',\n          validArgs: { metric: 'users', period: 'daily', timeRange: '30d' },\n          invalidArgs: { metric: 'invalid_metric' }\n        }\n      ];\n\n      for (const test of toolTests) {\n        // Valid case should work\n        await expect(\n          server['callTool'](test.name, test.validArgs, authContext)\n        ).resolves.toBeDefined();\n      }\n    });\n  });\n\n  describe('Performance and Caching', () => {\n    it('should complete monitoring operations within performance thresholds', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const operations = [\n        () => server['readResource']('monitoring://metrics?timeRange=1d', authContext),\n        () => server['readResource']('monitoring://system?timeRange=1d', authContext),\n        () => server['callTool']('get_kpi_dashboard', { timeRange: '1d' }, authContext),\n        () => server['callTool']('get_real_time_metrics', { metrics: ['active_users'] }, authContext)\n      ];\n\n      // Act\n      const startTime = performance.now();\n      const results = await Promise.all(operations.map(op => op()));\n      const endTime = performance.now();\n      const totalDuration = endTime - startTime;\n\n      // Assert\n      expect(totalDuration).toBeLessThan(2000); // All operations within 2 seconds\n      expect(results).toHaveLength(4);\n      results.forEach(result => {\n        expect(result).toBeDefined();\n      });\n    });\n\n    it('should handle concurrent monitoring requests efficiently', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const concurrentRequests = Array.from({ length: 10 }, () =>\n        server['callTool']('get_kpi_dashboard', { timeRange: '1d' }, authContext)\n      );\n\n      // Act\n      const startTime = performance.now();\n      const results = await Promise.all(concurrentRequests);\n      const endTime = performance.now();\n      const duration = endTime - startTime;\n\n      // Assert\n      expect(duration).toBeLessThan(3000); // Should handle concurrency efficiently\n      expect(results).toHaveLength(10);\n      results.forEach(result => {\n        const data = JSON.parse(result.content[0].text);\n        expect(data.success).toBe(true);\n      });\n    });\n  });\n\n  describe('Security and Audit Logging', () => {\n    it('should log all monitoring resource access', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const uri = 'monitoring://metrics?timeRange=1d';\n\n      // Act\n      await server['readResource'](uri, authContext);\n\n      // Assert\n      expect(mockAuditLogger.logMCPResourceAccess).toHaveBeenCalledWith(\n        authContext,\n        'monitoring://metrics',\n        'READ',\n        'success',\n        expect.objectContaining({\n          duration: expect.any(Number),\n          dataSize: expect.any(Number)\n        })\n      );\n    });\n\n    it('should log monitoring tool executions', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const args = { timeRange: '1d' };\n\n      // Act\n      await server['callTool']('get_kpi_dashboard', args, authContext);\n\n      // Assert\n      expect(logger.info).toHaveBeenCalledWith(\n        'MCP Monitoring: Getting KPI dashboard',\n        expect.objectContaining({\n          timeRange: '1d',\n          userId: authContext.userId\n        })\n      );\n    });\n\n    it('should enforce role-based access for sensitive monitoring data', async () => {\n      // Arrange\n      const limitedUserContext = testUtils.createMockAuthContext({\n        role: 'USER',\n        permissions: ['read:own:basic']\n      });\n\n      // Act\n      const resources = await server['listResources'](limitedUserContext);\n      const tools = await server['listTools'](limitedUserContext);\n\n      // Assert - Should not have access to sensitive resources\n      expect(resources.map(r => r.uri)).not.toContain('monitoring://revenue');\n      expect(resources.map(r => r.uri)).not.toContain('monitoring://system');\n      expect(resources.map(r => r.uri)).not.toContain('monitoring://alerts');\n\n      // Should not have admin tools\n      expect(tools.map(t => t.name)).not.toContain('set_alert_threshold');\n    });\n\n    it('should validate organization isolation in monitoring queries', async () => {\n      // Arrange\n      const user1Context = testUtils.createMockAuthContext({ organizationId: 'org-123' });\n      const user2Context = testUtils.createMockAuthContext({ organizationId: 'org-456' });\n\n      // Act\n      await server['readResource']('monitoring://metrics?timeRange=1d', user1Context);\n      await server['readResource']('monitoring://metrics?timeRange=1d', user2Context);\n\n      // Assert - Each should only query their own organization\n      expect(mockPrismaClient.user.count).toHaveBeenCalledWith({\n        where: { organizationId: 'org-123' }\n      });\n      expect(mockPrismaClient.user.count).toHaveBeenCalledWith({\n        where: { organizationId: 'org-456' }\n      });\n    });\n  });\n\n  describe('Error Handling and Resilience', () => {\n    it('should handle database connection failures gracefully', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      mockPrismaClient.user.count.mockRejectedValue(new Error('Connection timeout'));\n\n      // Act\n      const result = await server['readResource']('monitoring://metrics?timeRange=1d', authContext);\n\n      // Assert\n      const data = JSON.parse(result.text);\n      expect(data.error).toBe('Failed to retrieve business metrics');\n      expect(data.details).toBe('Connection timeout');\n\n      // Should log the error\n      expect(mockAuditLogger.logMCPResourceAccess).toHaveBeenCalledWith(\n        authContext,\n        'monitoring://metrics',\n        'READ',\n        'failure',\n        { errorMessage: 'Connection timeout' }\n      );\n    });\n\n    it('should provide fallback data when primary systems fail', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n      const args = { timeRange: '1d' };\n\n      // Simulate system failure by making tool method throw\n      const originalMethod = server['getKPIDashboard'];\n      server['getKPIDashboard'] = jest.fn().mockImplementation(async () => {\n        throw new Error('System temporarily unavailable');\n      });\n\n      // Act\n      const result = await server['callTool']('get_kpi_dashboard', args, authContext);\n\n      // Assert\n      expect(result.isError).toBe(true);\n      const data = JSON.parse(result.content[0].text);\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('Failed to get KPI dashboard');\n\n      // Restore original method\n      server['getKPIDashboard'] = originalMethod;\n    });\n\n    it('should validate input data types and ranges', async () => {\n      // Test invalid query parameters\n      const authContext = testUtils.createMockAuthContext();\n      \n      // Invalid time range should default to '1d'\n      const result = await server['readResource'](\n        'monitoring://metrics?timeRange=invalid&aggregation=invalid',\n        authContext\n      );\n\n      const data = JSON.parse(result.text);\n      expect(data.timeRange).toBe('1d'); // Should use default\n    });\n  });\n\n  describe('Integration Testing', () => {\n    it('should execute complete monitoring workflow across all resources', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n\n      // Act - Execute monitoring workflow\n      const metricsResult = await server['readResource']('monitoring://metrics?timeRange=1d', authContext);\n      const systemResult = await server['readResource']('monitoring://system?timeRange=1d', authContext);\n      const kpiResult = await server['callTool']('get_kpi_dashboard', { timeRange: '1d' }, authContext);\n      const trendsResult = await server['callTool']('analyze_performance_trends', \n        { metric: 'users', period: 'daily', timeRange: '30d' }, authContext);\n\n      // Assert - All operations successful\n      expect(JSON.parse(metricsResult.text).organizationId).toBe(authContext.organizationId);\n      expect(JSON.parse(systemResult.text).status).toMatch(/healthy|warning|critical/);\n      \n      const kpiData = JSON.parse(kpiResult.content[0].text);\n      expect(kpiData.success).toBe(true);\n      \n      const trendsData = JSON.parse(trendsResult.content[0].text);\n      expect(trendsData.success).toBe(true);\n      expect(trendsData.data.dataPoints.length).toBe(30);\n\n      // Verify all database interactions occurred\n      expect(mockPrismaClient.user.count).toHaveBeenCalled();\n      expect(mockPrismaClient.contact.count).toHaveBeenCalled();\n      expect(mockPrismaClient.mCPMonitoringMetrics.findMany).toHaveBeenCalled();\n    });\n\n    it('should maintain data consistency across multiple monitoring calls', async () => {\n      // Arrange\n      const authContext = testUtils.createMockAuthContext();\n\n      // Act - Call same resource multiple times\n      const results = await Promise.all([\n        server['readResource']('monitoring://metrics?timeRange=1d', authContext),\n        server['readResource']('monitoring://metrics?timeRange=1d', authContext),\n        server['readResource']('monitoring://metrics?timeRange=1d', authContext)\n      ]);\n\n      // Assert - Results should be consistent\n      const data1 = JSON.parse(results[0].text);\n      const data2 = JSON.parse(results[1].text);\n      const data3 = JSON.parse(results[2].text);\n\n      expect(data1.users.total).toBe(data2.users.total);\n      expect(data2.users.total).toBe(data3.users.total);\n      expect(data1.contacts.total).toBe(data2.contacts.total);\n      expect(data1.revenue.total).toBe(data2.revenue.total);\n    });\n  });\n});"],"names":["jest","mock","prisma","mockPrismaClient","redisCache","mockRedisClient","CACHE_KEYS","API_RATE_LIMIT","key","enterpriseAuditLogger","mockAuditLogger","logger","info","fn","error","warn","debug","createMockBusinessMetrics","overrides","organizationId","timeRange","period","start","Date","now","toISOString","end","duration","users","total","new","growth","contacts","campaigns","email","sms","whatsapp","messaging","totalMessages","totalCost","averageCost","revenue","transactions","averageTransaction","automation","workflowExecutions","analytics","visitorSessions","averageIntentScore","totalConversionValue","engagementRate","conversionRate","createMockSystemHealth","status","healthScore","metrics","database","responseTime","connectionsActive","api","averageResponseTime","errorRate","requestsPerMinute","system","cpuUsage","memoryUsage","diskSpace","errors","rate","alerts","active","severity","uptime","percentage","lastDowntime","createMockKPIDashboard","overview","totalUsers","activeUsers","totalCampaigns","activeCampaigns","totalRevenue","monthlyRecurringRevenue","performance","campaignOpenRate","campaignClickRate","campaignConversionRate","customerAcquisitionCost","customerLifetimeValue","churnRate","apiRequestsPerMinute","activeConnections","ai","modelAccuracy","predictionConfidence","recommendationsGenerated","recommendationsAccepted","comparisons","userGrowth","revenueGrowth","engagementChange","systemPerformance","describe","server","config","beforeEach","resetAllMocks","setupDefaultMocks","name","version","port","enabled","authentication","required","methods","rateLimit","maxRequests","windowMs","fallback","timeout","validation","strict","sanitizeOutput","MonitoringMCPServer","user","count","mockResolvedValueOnce","contact","emailCampaign","mockResolvedValue","sMSCampaign","whatsAppCampaign","messagingUsage","aggregate","_count","id","_sum","cost","creditTransaction","amount","workflowExecution","mCPVisitorSessions","_avg","intentScore","conversionValue","mCPMonitoringMetrics","findMany","timestamp","notification","afterEach","it","adminContext","testUtils","createMockAuthContext","role","permissions","resources","expect","toHaveLength","map","r","uri","toEqual","metricsResource","find","toBe","description","mimeType","userContext","orgAdminContext","toContain","tools","t","kpiTool","inputSchema","properties","enum","includeComparisons","default","alertTool","operator","not","authContext","startTime","result","endTime","data","JSON","parse","text","toBeCloseTo","meta","toBeDefined","source","toHaveBeenCalledTimes","toHaveBeenCalled","toBeLessThan","timeRanges","toHaveBeenCalledWith","where","createdAt","gte","any","mockRejectedValueOnce","Error","details","toMatch","toBeGreaterThan","toBeLessThanOrEqual","toBeGreaterThanOrEqual","dataPoints","orderBy","take","mockImplementation","Promise","resolve","setTimeout","args","content","type","success","insights","toBeInstanceOf","Array","length","recommendations","fallbackUsed","objectContaining","userId","toBeUndefined","originalMethod","isError","refreshInterval","active_users","api_requests","trends","current","previous","change","nextUpdate","result1","result2","data1","data2","value1","value2","baseValue","metric","forEach","point","value","analysis","trend","volatility","confidence","predictions","nextPeriod","factors","analysisType","testCases","expectedPoints","testCase","reportType","includeRecommendations","generatedAt","summary","overallPerformance","keyMetrics","systemUptime","highlights","detailedAnalysis","userMetrics","businessMetrics","systemMetrics","nextSteps","reportId","reportTypes","validPaths","path","resolves","invalidUri","rejects","toThrow","MCPValidationError","toolTests","validArgs","invalidArgs","test","operations","results","all","op","totalDuration","concurrentRequests","from","logMCPResourceAccess","Number","dataSize","limitedUserContext","user1Context","user2Context","mockRejectedValue","errorMessage","metricsResult","systemResult","kpiResult","trendsResult","kpiData","trendsData","data3"],"mappings":"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"}