621b58bd2830a1848d75133f1e3e90f5
/**
 * Integration Test Setup for MCP Servers
 * 
 * This module provides utilities for setting up real database environments
 * for testing MCP servers with actual seeded data.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    PerformanceTracker: function() {
        return PerformanceTracker;
    },
    TestDatabaseManager: function() {
        return TestDatabaseManager;
    },
    default: function() {
        return _default;
    },
    isDockerEnvironment: function() {
        return isDockerEnvironment;
    },
    resetTestData: function() {
        return resetTestData;
    },
    setupIntegrationTests: function() {
        return setupIntegrationTests;
    },
    teardownIntegrationTests: function() {
        return teardownIntegrationTests;
    },
    testConfig: function() {
        return testConfig;
    },
    testPrisma: function() {
        return testPrisma;
    }
});
const _client = require("@prisma/client");
const _dotenv = /*#__PURE__*/ _interop_require_wildcard(require("dotenv"));
const _child_process = require("child_process");
const _path = /*#__PURE__*/ _interop_require_default(require("path"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// Load environment variables
_dotenv.config();
// Test database configuration
const TEST_DATABASE_URL = process.env.TEST_DATABASE_URL || process.env.DATABASE_URL?.replace('/marketsage', '/marketsage_test') || "postgresql://marketsage:marketsage_password@marketsage-db:5432/marketsage_test?schema=public";
const testPrisma = new _client.PrismaClient({
    datasources: {
        db: {
            url: TEST_DATABASE_URL
        }
    }
});
class TestDatabaseManager {
    static getInstance() {
        if (!TestDatabaseManager.instance) {
            TestDatabaseManager.instance = new TestDatabaseManager();
        }
        return TestDatabaseManager.instance;
    }
    /**
   * Setup test database with fresh schema and seed data
   */ async setup() {
        if (this.isSetup) return;
        console.log('üèóÔ∏è  Setting up test database...');
        console.log(`üìä Test Database URL: ${TEST_DATABASE_URL.replace(/\/\/.*@/, '//***:***@')}`);
        try {
            // Ensure test database exists
            await this.ensureTestDatabase();
            // Run migrations
            await this.runMigrations();
            // Seed base data
            await this.seedBaseData();
            // Seed MCP-specific data
            await this.seedMCPData();
            this.isSetup = true;
            console.log('‚úÖ Test database setup complete');
        } catch (error) {
            console.error('‚ùå Test database setup failed:', error);
            throw error;
        }
    }
    /**
   * Clean up test database
   */ async teardown() {
        if (!this.isSetup) return;
        console.log('üßπ Cleaning up test database...');
        try {
            await this.cleanupTestData();
            await testPrisma.$disconnect();
            this.isSetup = false;
            console.log('‚úÖ Test database cleanup complete');
        } catch (error) {
            console.error('‚ùå Test database cleanup failed:', error);
            throw error;
        }
    }
    /**
   * Reset database between tests
   */ async reset() {
        console.log('üîÑ Resetting test database...');
        try {
            await this.cleanupTestData();
            await this.seedBaseData();
            await this.seedMCPData();
            console.log('‚úÖ Test database reset complete');
        } catch (error) {
            console.error('‚ùå Test database reset failed:', error);
            throw error;
        }
    }
    /**
   * Ensure test database exists
   */ async ensureTestDatabase() {
        try {
            // Try to connect to test database
            await testPrisma.$connect();
            console.log('üìä Test database connection verified');
        } catch (error) {
            console.log('üèóÔ∏è  Test database does not exist, attempting to create...');
            // If using Docker, the database should already exist
            // If using local setup, we might need to create it
            try {
                // Try connecting again after a brief delay
                await new Promise((resolve)=>setTimeout(resolve, 2000));
                await testPrisma.$connect();
                console.log('üìä Test database connection established');
            } catch (retryError) {
                console.error('‚ùå Could not connect to test database:', retryError);
                throw new Error('Test database is not available. Please ensure the test database is running.');
            }
        }
    }
    /**
   * Run database migrations
   */ async runMigrations() {
        console.log('üìã Running database migrations...');
        try {
            // Set the test database URL for migration
            const originalUrl = process.env.DATABASE_URL;
            process.env.DATABASE_URL = TEST_DATABASE_URL;
            // Run Prisma migrations
            (0, _child_process.execSync)('npx prisma migrate deploy', {
                stdio: 'inherit',
                cwd: _path.default.resolve(process.cwd())
            });
            // Restore original database URL
            if (originalUrl) {
                process.env.DATABASE_URL = originalUrl;
            }
            console.log('‚úÖ Database migrations completed');
        } catch (error) {
            console.error('‚ùå Migration failed:', error);
            throw error;
        }
    }
    /**
   * Seed base data (organizations, users, contacts, campaigns)
   */ async seedBaseData() {
        console.log('üå± Seeding base test data...');
        try {
            // Seed basic organizations and users
            const testOrg = await testPrisma.organization.create({
                data: {
                    id: 'test-org-1',
                    name: 'Test Organization',
                    plan: 'ENTERPRISE',
                    websiteUrl: 'https://test-org.com',
                    address: 'Lagos, Nigeria'
                }
            });
            const testUser = await testPrisma.user.create({
                data: {
                    id: 'test-user-1',
                    name: 'Test User',
                    email: 'test@test-org.com',
                    role: 'ADMIN',
                    organizationId: testOrg.id
                }
            });
            // Seed test contacts
            await testPrisma.contact.createMany({
                data: [
                    {
                        id: 'test-contact-1',
                        email: 'contact1@test.com',
                        firstName: 'John',
                        lastName: 'Doe',
                        phone: '+234123456789',
                        organizationId: testOrg.id,
                        status: 'ACTIVE'
                    },
                    {
                        id: 'test-contact-2',
                        email: 'contact2@test.com',
                        firstName: 'Jane',
                        lastName: 'Smith',
                        phone: '+234987654321',
                        organizationId: testOrg.id,
                        status: 'ACTIVE'
                    },
                    {
                        id: 'test-contact-3',
                        email: 'contact3@test.com',
                        firstName: 'Bob',
                        lastName: 'Johnson',
                        phone: '+234555666777',
                        organizationId: testOrg.id,
                        status: 'INACTIVE'
                    }
                ]
            });
            // Seed test campaigns
            await testPrisma.emailCampaign.createMany({
                data: [
                    {
                        id: 'test-email-campaign-1',
                        name: 'Welcome Email Series',
                        subject: 'Welcome to Our Platform!',
                        organizationId: testOrg.id,
                        userId: testUser.id,
                        status: 'COMPLETED',
                        scheduledAt: new Date('2024-01-15')
                    },
                    {
                        id: 'test-email-campaign-2',
                        name: 'Product Announcement',
                        subject: 'Exciting New Features!',
                        organizationId: testOrg.id,
                        userId: testUser.id,
                        status: 'COMPLETED',
                        scheduledAt: new Date('2024-01-20')
                    }
                ]
            });
            await testPrisma.sMSCampaign.createMany({
                data: [
                    {
                        id: 'test-sms-campaign-1',
                        name: 'Flash Sale Alert',
                        message: 'Limited time offer - 50% off!',
                        organizationId: testOrg.id,
                        userId: testUser.id,
                        status: 'COMPLETED',
                        scheduledAt: new Date('2024-01-25')
                    }
                ]
            });
            await testPrisma.whatsAppCampaign.createMany({
                data: [
                    {
                        id: 'test-whatsapp-campaign-1',
                        name: 'Customer Support Follow-up',
                        message: 'How was your experience with our support?',
                        organizationId: testOrg.id,
                        userId: testUser.id,
                        status: 'COMPLETED',
                        scheduledAt: new Date('2024-01-30')
                    }
                ]
            });
            console.log('‚úÖ Base test data seeded successfully');
        } catch (error) {
            console.error('‚ùå Base data seeding failed:', error);
            throw error;
        }
    }
    /**
   * Seed MCP-specific test data by running the MCP seed scripts
   */ async seedMCPData() {
        console.log('üîÑ Seeding MCP test data...');
        try {
            // Import and run MCP seed scripts with test database
            const originalUrl = process.env.DATABASE_URL;
            process.env.DATABASE_URL = TEST_DATABASE_URL;
            // Dynamically import seed scripts
            const seedCampaignAnalytics = (await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../../scripts/seed-mcp-campaign-analytics")))).default;
            const seedCustomerPredictions = (await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../../scripts/seed-mcp-customer-predictions")))).default;
            const seedVisitorSessions = (await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../../scripts/seed-mcp-visitor-sessions")))).default;
            const seedMonitoringMetrics = (await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../../scripts/seed-mcp-monitoring-metrics")))).default;
            // Run seed scripts in sequence
            await seedCampaignAnalytics();
            await seedCustomerPredictions();
            await seedVisitorSessions();
            await seedMonitoringMetrics();
            // Restore original database URL
            if (originalUrl) {
                process.env.DATABASE_URL = originalUrl;
            }
            console.log('‚úÖ MCP test data seeded successfully');
        } catch (error) {
            console.error('‚ùå MCP data seeding failed:', error);
            throw error;
        }
    }
    /**
   * Clean up all test data
   */ async cleanupTestData() {
        try {
            // Clean up in reverse dependency order
            await testPrisma.mCPMonitoringMetrics.deleteMany();
            await testPrisma.mCPVisitorSessions.deleteMany();
            await testPrisma.mCPCustomerPredictions.deleteMany();
            await testPrisma.mCPCampaignMetrics.deleteMany();
            await testPrisma.whatsAppCampaign.deleteMany();
            await testPrisma.sMSCampaign.deleteMany();
            await testPrisma.emailCampaign.deleteMany();
            await testPrisma.contact.deleteMany();
            await testPrisma.user.deleteMany();
            await testPrisma.organization.deleteMany();
            console.log('üßπ Test data cleanup completed');
        } catch (error) {
            console.error('‚ùå Test data cleanup failed:', error);
            throw error;
        }
    }
    /**
   * Get test data counts for verification
   */ async getDataCounts() {
        try {
            const counts = {
                organizations: await testPrisma.organization.count(),
                users: await testPrisma.user.count(),
                contacts: await testPrisma.contact.count(),
                emailCampaigns: await testPrisma.emailCampaign.count(),
                smsCampaigns: await testPrisma.sMSCampaign.count(),
                whatsappCampaigns: await testPrisma.whatsAppCampaign.count(),
                mcpCampaignMetrics: await testPrisma.mCPCampaignMetrics.count(),
                mcpCustomerPredictions: await testPrisma.mCPCustomerPredictions.count(),
                mcpVisitorSessions: await testPrisma.mCPVisitorSessions.count(),
                mcpMonitoringMetrics: await testPrisma.mCPMonitoringMetrics.count()
            };
            return counts;
        } catch (error) {
            console.error('‚ùå Error getting data counts:', error);
            throw error;
        }
    }
    constructor(){
        this.isSetup = false;
    }
}
async function setupIntegrationTests() {
    const dbManager = TestDatabaseManager.getInstance();
    await dbManager.setup();
}
async function teardownIntegrationTests() {
    const dbManager = TestDatabaseManager.getInstance();
    await dbManager.teardown();
}
async function resetTestData() {
    const dbManager = TestDatabaseManager.getInstance();
    await dbManager.reset();
}
class PerformanceTracker {
    start() {
        this.startTime = Date.now();
    }
    measure(operation) {
        const duration = Date.now() - this.startTime;
        if (!this.measurements.has(operation)) {
            this.measurements.set(operation, []);
        }
        this.measurements.get(operation).push(duration);
        return duration;
    }
    getStats(operation) {
        const measurements = this.measurements.get(operation) || [];
        if (measurements.length === 0) {
            return {
                avg: 0,
                min: 0,
                max: 0,
                count: 0
            };
        }
        const avg = measurements.reduce((sum, val)=>sum + val, 0) / measurements.length;
        const min = Math.min(...measurements);
        const max = Math.max(...measurements);
        return {
            avg,
            min,
            max,
            count: measurements.length
        };
    }
    getAllStats() {
        const stats = {};
        for (const [operation, _] of this.measurements){
            stats[operation] = this.getStats(operation);
        }
        return stats;
    }
    reset() {
        this.measurements.clear();
    }
    constructor(){
        this.startTime = 0;
        this.measurements = new Map();
    }
}
function isDockerEnvironment() {
    return process.env.DOCKER_ENV === 'true' || process.env.DATABASE_URL?.includes('marketsage-db') || false;
}
const testConfig = {
    database: {
        url: TEST_DATABASE_URL,
        isDocker: isDockerEnvironment()
    },
    timeouts: {
        database: 30000,
        mcp: 10000,
        integration: 60000 // 60 seconds
    },
    performance: {
        maxResponseTime: 2000,
        maxQueryTime: 1000,
        maxConcurrentOperations: 10
    }
};
const _default = {
    TestDatabaseManager,
    setupIntegrationTests,
    teardownIntegrationTests,
    resetTestData,
    PerformanceTracker,
    testPrisma,
    testConfig
};

//# sourceMappingURL=data:application/json;base64,