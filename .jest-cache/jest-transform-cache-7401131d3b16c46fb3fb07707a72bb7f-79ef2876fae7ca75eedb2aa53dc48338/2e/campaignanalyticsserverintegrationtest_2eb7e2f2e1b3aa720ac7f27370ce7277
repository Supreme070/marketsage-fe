0d8838e273883a3b0b835eb38b937ee2
/**
 * Campaign Analytics MCP Server Integration Tests
 * 
 * These tests verify the Campaign Analytics MCP server works correctly with real database data.
 * Tests cover actual database queries, data relationships, and performance.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jest = require("@jest/jest");
const _campaignanalyticsserver = require("../../../mcp/servers/campaign-analytics-server");
const _setup = require("./setup");
(0, _jest.describe)('Campaign Analytics MCP Server Integration Tests', ()=>{
    let server;
    let dbManager;
    let performanceTracker;
    let authContext;
    (0, _jest.beforeAll)(async ()=>{
        // Setup test database with seeded data
        dbManager = _setup.TestDatabaseManager.getInstance();
        await dbManager.setup();
        // Initialize performance tracker
        performanceTracker = new _setup.PerformanceTracker();
        // Create MCP server instance
        server = new _campaignanalyticsserver.CampaignAnalyticsMCPServer({
            rateLimiting: {
                enabled: false // Disable for testing
            }
        });
        // Setup auth context for testing
        authContext = {
            organizationId: 'test-org-1',
            userId: 'test-user-1',
            role: 'ADMIN',
            permissions: [
                'read:campaigns',
                'read:analytics'
            ]
        };
    }, _setup.testConfig.timeouts.database);
    (0, _jest.afterAll)(async ()=>{
        await dbManager.teardown();
    });
    (0, _jest.beforeEach)(async ()=>{
        performanceTracker.reset();
    });
    (0, _jest.describe)('Database Integration', ()=>{
        (0, _jest.test)('should connect to test database and verify seeded data', async ()=>{
            const counts = await dbManager.getDataCounts();
            (0, _jest.expect)(counts.organizations).toBeGreaterThan(0);
            (0, _jest.expect)(counts.emailCampaigns).toBeGreaterThan(0);
            (0, _jest.expect)(counts.smsCampaigns).toBeGreaterThan(0);
            (0, _jest.expect)(counts.whatsappCampaigns).toBeGreaterThan(0);
            (0, _jest.expect)(counts.mcpCampaignMetrics).toBeGreaterThan(0);
            console.log('✅ Verified seeded data counts:', counts);
        });
        (0, _jest.test)('should verify campaign metrics data integrity', async ()=>{
            // Test data relationships and foreign key constraints
            const campaignMetrics = await _setup.testPrisma.mCPCampaignMetrics.findMany({
                include: {
                    organization: true
                }
            });
            (0, _jest.expect)(campaignMetrics.length).toBeGreaterThan(0);
            for (const metric of campaignMetrics){
                // Verify organization relationship
                (0, _jest.expect)(metric.organization).toBeDefined();
                (0, _jest.expect)(metric.organizationId).toBe(metric.organization.id);
                // Verify data integrity
                (0, _jest.expect)(metric.sent).toBeGreaterThanOrEqual(0);
                (0, _jest.expect)(metric.delivered).toBeLessThanOrEqual(metric.sent);
                (0, _jest.expect)(metric.opened).toBeLessThanOrEqual(metric.delivered);
                (0, _jest.expect)(metric.clicked).toBeLessThanOrEqual(metric.opened);
                (0, _jest.expect)(metric.converted).toBeLessThanOrEqual(metric.clicked);
                // Verify rate calculations
                if (metric.delivered > 0) {
                    const expectedOpenRate = metric.opened / metric.delivered * 100;
                    (0, _jest.expect)(Math.abs(metric.openRate - expectedOpenRate)).toBeLessThan(0.1);
                }
                // Verify A/B test data if present
                if (metric.abTestData) {
                    const abTestData = JSON.parse(metric.abTestData);
                    (0, _jest.expect)(abTestData).toHaveProperty('testType');
                    (0, _jest.expect)(abTestData).toHaveProperty('variants');
                    (0, _jest.expect)(abTestData.variants).toBeInstanceOf(Array);
                }
            }
            console.log(`✅ Verified ${campaignMetrics.length} campaign metrics for data integrity`);
        });
    });
    (0, _jest.describe)('MCP Server Operations', ()=>{
        (0, _jest.test)('should list campaign analytics resources', async ()=>{
            performanceTracker.start();
            const resources = await server.listResources(authContext);
            const duration = performanceTracker.measure('listResources');
            (0, _jest.expect)(resources).toBeInstanceOf(Array);
            (0, _jest.expect)(resources.length).toBeGreaterThan(0);
            // Verify resource structure
            for (const resource of resources){
                (0, _jest.expect)(resource).toHaveProperty('uri');
                (0, _jest.expect)(resource).toHaveProperty('name');
                (0, _jest.expect)(resource).toHaveProperty('description');
                (0, _jest.expect)(resource).toHaveProperty('mimeType');
            }
            (0, _jest.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxResponseTime);
            console.log(`✅ Listed ${resources.length} resources in ${duration}ms`);
        });
        (0, _jest.test)('should read campaign analytics with real data', async ()=>{
            performanceTracker.start();
            const result = await server.readResource('campaign://analytics', {
                organizationId: 'test-org-1',
                dateRange: {
                    start: '2024-01-01',
                    end: '2024-12-31'
                }
            }, authContext);
            const duration = performanceTracker.measure('readCampaignAnalytics');
            (0, _jest.expect)(result).toBeDefined();
            (0, _jest.expect)(result.success).toBe(true);
            (0, _jest.expect)(result.data).toBeDefined();
            const data = result.data;
            (0, _jest.expect)(data).toHaveProperty('summary');
            (0, _jest.expect)(data).toHaveProperty('campaigns');
            (0, _jest.expect)(data).toHaveProperty('performance');
            // Verify summary metrics
            (0, _jest.expect)(data.summary.totalCampaigns).toBeGreaterThan(0);
            (0, _jest.expect)(data.summary.totalSent).toBeGreaterThan(0);
            (0, _jest.expect)(data.summary.avgOpenRate).toBeGreaterThanOrEqual(0);
            (0, _jest.expect)(data.summary.avgClickRate).toBeGreaterThanOrEqual(0);
            // Verify campaign data matches database
            const dbCampaigns = await _setup.testPrisma.mCPCampaignMetrics.count({
                where: {
                    organizationId: 'test-org-1'
                }
            });
            (0, _jest.expect)(data.campaigns.length).toBe(dbCampaigns);
            (0, _jest.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxResponseTime);
            console.log(`✅ Read campaign analytics with ${data.campaigns.length} campaigns in ${duration}ms`);
        });
        (0, _jest.test)('should handle complex queries with joins and aggregations', async ()=>{
            performanceTracker.start();
            const result = await server.readResource('campaign://performance', {
                organizationId: 'test-org-1',
                groupBy: 'campaignType',
                metrics: [
                    'openRate',
                    'clickRate',
                    'conversionRate'
                ],
                aggregation: 'avg'
            }, authContext);
            const duration = performanceTracker.measure('complexQuery');
            (0, _jest.expect)(result).toBeDefined();
            (0, _jest.expect)(result.success).toBe(true);
            (0, _jest.expect)(result.data).toBeDefined();
            const data = result.data;
            (0, _jest.expect)(data).toHaveProperty('groups');
            // Verify grouped data
            for (const group of data.groups){
                (0, _jest.expect)(group).toHaveProperty('campaignType');
                (0, _jest.expect)(group).toHaveProperty('metrics');
                (0, _jest.expect)([
                    'EMAIL',
                    'SMS',
                    'WHATSAPP'
                ]).toContain(group.campaignType);
                // Verify aggregated metrics
                (0, _jest.expect)(group.metrics.avgOpenRate).toBeGreaterThanOrEqual(0);
                (0, _jest.expect)(group.metrics.avgClickRate).toBeGreaterThanOrEqual(0);
                (0, _jest.expect)(group.metrics.avgConversionRate).toBeGreaterThanOrEqual(0);
            }
            (0, _jest.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxQueryTime);
            console.log(`✅ Executed complex query with aggregations in ${duration}ms`);
        });
        (0, _jest.test)('should validate A/B test data analysis', async ()=>{
            performanceTracker.start();
            const result = await server.readResource('campaign://ab-tests', {
                organizationId: 'test-org-1'
            }, authContext);
            const duration = performanceTracker.measure('abTestAnalysis');
            (0, _jest.expect)(result).toBeDefined();
            (0, _jest.expect)(result.success).toBe(true);
            const data = result.data;
            (0, _jest.expect)(data).toHaveProperty('abTests');
            // Verify A/B test data structure
            for (const test of data.abTests){
                (0, _jest.expect)(test).toHaveProperty('campaignId');
                (0, _jest.expect)(test).toHaveProperty('testType');
                (0, _jest.expect)(test).toHaveProperty('variants');
                (0, _jest.expect)(test).toHaveProperty('winnerVariant');
                (0, _jest.expect)(test).toHaveProperty('improvementPercent');
                // Verify statistical significance
                (0, _jest.expect)(test.variants.length).toBeGreaterThan(1);
                const winners = test.variants.filter((v)=>v.isWinner);
                (0, _jest.expect)(winners.length).toBe(1);
            }
            (0, _jest.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxResponseTime);
            console.log(`✅ Analyzed ${data.abTests.length} A/B tests in ${duration}ms`);
        });
    });
    (0, _jest.describe)('Performance and Scalability', ()=>{
        (0, _jest.test)('should handle concurrent requests efficiently', async ()=>{
            const concurrentRequests = 5;
            const promises = [];
            performanceTracker.start();
            for(let i = 0; i < concurrentRequests; i++){
                promises.push(server.readResource('campaign://analytics', {
                    organizationId: 'test-org-1'
                }, authContext));
            }
            const results = await Promise.all(promises);
            const duration = performanceTracker.measure('concurrentRequests');
            // Verify all requests succeeded
            for (const result of results){
                (0, _jest.expect)(result.success).toBe(true);
                (0, _jest.expect)(result.data).toBeDefined();
            }
            (0, _jest.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxResponseTime * 2);
            console.log(`✅ Handled ${concurrentRequests} concurrent requests in ${duration}ms`);
        });
        (0, _jest.test)('should validate database query optimization', async ()=>{
            // Test query performance with realistic data volumes
            const startTime = Date.now();
            const result = await _setup.testPrisma.mCPCampaignMetrics.findMany({
                where: {
                    organizationId: 'test-org-1'
                },
                include: {
                    organization: {
                        select: {
                            name: true,
                            plan: true
                        }
                    }
                },
                orderBy: {
                    calculatedAt: 'desc'
                }
            });
            const queryDuration = Date.now() - startTime;
            (0, _jest.expect)(result.length).toBeGreaterThan(0);
            (0, _jest.expect)(queryDuration).toBeLessThan(_setup.testConfig.performance.maxQueryTime);
            console.log(`✅ Query performance: ${result.length} records in ${queryDuration}ms`);
        });
        (0, _jest.test)('should measure end-to-end response times', async ()=>{
            const operations = [
                'campaign://analytics',
                'campaign://performance',
                'campaign://ab-tests'
            ];
            const measurements = [];
            for (const operation of operations){
                performanceTracker.start();
                const result = await server.readResource(operation, {
                    organizationId: 'test-org-1'
                }, authContext);
                const duration = performanceTracker.measure(operation);
                measurements.push({
                    operation,
                    duration,
                    success: result.success
                });
                (0, _jest.expect)(result.success).toBe(true);
                (0, _jest.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxResponseTime);
            }
            console.log('✅ End-to-end performance measurements:', measurements);
        });
    });
    (0, _jest.describe)('Data Consistency and Validation', ()=>{
        (0, _jest.test)('should ensure data consistency across operations', async ()=>{
            // Get analytics summary
            const analyticsResult = await server.readResource('campaign://analytics', {
                organizationId: 'test-org-1'
            }, authContext);
            // Get performance data
            const performanceResult = await server.readResource('campaign://performance', {
                organizationId: 'test-org-1'
            }, authContext);
            (0, _jest.expect)(analyticsResult.success).toBe(true);
            (0, _jest.expect)(performanceResult.success).toBe(true);
            const analytics = analyticsResult.data;
            const performance = performanceResult.data;
            // Verify data consistency
            (0, _jest.expect)(analytics.summary.totalCampaigns).toBe(analytics.campaigns.length);
            // Calculate expected totals from individual campaigns
            const expectedTotalSent = analytics.campaigns.reduce((sum, campaign)=>sum + campaign.sent, 0);
            (0, _jest.expect)(analytics.summary.totalSent).toBe(expectedTotalSent);
            console.log('✅ Data consistency verified across operations');
        });
        (0, _jest.test)('should validate metric calculations against database', async ()=>{
            // Get MCP server calculations
            const serverResult = await server.readResource('campaign://analytics', {
                organizationId: 'test-org-1'
            }, authContext);
            // Get raw database data
            const dbMetrics = await _setup.testPrisma.mCPCampaignMetrics.findMany({
                where: {
                    organizationId: 'test-org-1'
                }
            });
            (0, _jest.expect)(serverResult.success).toBe(true);
            const serverData = serverResult.data;
            // Verify calculations match database
            const dbTotalSent = dbMetrics.reduce((sum, metric)=>sum + metric.sent, 0);
            const dbTotalDelivered = dbMetrics.reduce((sum, metric)=>sum + metric.delivered, 0);
            const dbTotalOpened = dbMetrics.reduce((sum, metric)=>sum + metric.opened, 0);
            (0, _jest.expect)(serverData.summary.totalSent).toBe(dbTotalSent);
            (0, _jest.expect)(serverData.summary.totalDelivered).toBe(dbTotalDelivered);
            (0, _jest.expect)(serverData.summary.totalOpened).toBe(dbTotalOpened);
            // Verify rate calculations
            const expectedAvgOpenRate = dbTotalDelivered > 0 ? dbTotalOpened / dbTotalDelivered * 100 : 0;
            (0, _jest.expect)(Math.abs(serverData.summary.avgOpenRate - expectedAvgOpenRate)).toBeLessThan(0.1);
            console.log('✅ Metric calculations validated against database');
        });
    });
    (0, _jest.describe)('Error Handling and Edge Cases', ()=>{
        (0, _jest.test)('should handle invalid organization ID gracefully', async ()=>{
            const result = await server.readResource('campaign://analytics', {
                organizationId: 'invalid-org-id'
            }, authContext);
            (0, _jest.expect)(result.success).toBe(true);
            (0, _jest.expect)(result.data.campaigns).toHaveLength(0);
            (0, _jest.expect)(result.data.summary.totalCampaigns).toBe(0);
            console.log('✅ Handled invalid organization ID gracefully');
        });
        (0, _jest.test)('should handle empty date ranges appropriately', async ()=>{
            const futureDate = new Date(Date.now() + 365 * 24 * 60 * 60 * 1000);
            const result = await server.readResource('campaign://analytics', {
                organizationId: 'test-org-1',
                dateRange: {
                    start: futureDate.toISOString(),
                    end: futureDate.toISOString()
                }
            }, authContext);
            (0, _jest.expect)(result.success).toBe(true);
            (0, _jest.expect)(result.data.campaigns).toHaveLength(0);
            console.log('✅ Handled empty date range appropriately');
        });
        (0, _jest.test)('should validate authentication and authorization', async ()=>{
            const unauthorizedContext = {
                ...authContext,
                permissions: [
                    'read:contacts'
                ] // Wrong permissions
            };
            try {
                await server.readResource('campaign://analytics', {
                    organizationId: 'test-org-1'
                }, unauthorizedContext);
                // Should not reach here
                (0, _jest.expect)(true).toBe(false);
            } catch (error) {
                (0, _jest.expect)(error.name).toBe('MCPAuthorizationError');
                console.log('✅ Correctly rejected unauthorized access');
            }
        });
    });
    (0, _jest.afterAll)(()=>{
        // Display performance summary
        const stats = performanceTracker.getAllStats();
        console.log('\n📊 Performance Summary:');
        for (const [operation, operationStats] of Object.entries(stats)){
            console.log(`  ${operation}: avg ${operationStats.avg}ms, min ${operationStats.min}ms, max ${operationStats.max}ms (${operationStats.count} calls)`);
        }
    });
});

//# sourceMappingURL=data:application/json;base64,