{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/__tests__/components/error-handling/ErrorBoundaryIntegration.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '../../utils/test-utils';\nimport { useSession } from 'next-auth/react';\nimport { useMCPLeadPulse } from '../../../hooks/useMCPLeadPulse';\nimport { LiveVisitorMap } from '../../../components/leadpulse/LiveVisitorMap';\nimport { CoreAnalyticsDashboard } from '../../../components/leadpulse/CoreAnalyticsDashboard';\nimport { AIIntelligenceDashboard } from '../../../components/leadpulse/AIIntelligenceDashboard';\nimport CustomerIntelligenceDashboard from '../../../components/dashboard/CustomerIntelligenceDashboard';\nimport { \n  createMockMCPData,\n  measureComponentPerformance, \n  checkAccessibility,\n  PERFORMANCE_THRESHOLDS\n} from '../../utils/test-utils';\n\n// Mock dependencies\njest.mock('../../../hooks/useMCPLeadPulse');\njest.mock('next-auth/react');\n\nconst mockUseMCPLeadPulse = useMCPLeadPulse as jest.MockedFunction<typeof useMCPLeadPulse>;\nconst mockUseSession = useSession as jest.MockedFunction<typeof useSession>;\n\n// Error Boundary Component for testing\nclass TestErrorBoundary extends React.Component<\n  { children: React.ReactNode },\n  { hasError: boolean; error: Error | null }\n> {\n  constructor(props: { children: React.ReactNode }) {\n    super(props);\n    this.state = { hasError: false, error: null };\n  }\n\n  static getDerivedStateFromError(error: Error) {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    console.error('Error caught by boundary:', error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div data-testid=\"error-boundary\">\n          <h2>Something went wrong</h2>\n          <p data-testid=\"error-message\">{this.state.error?.message}</p>\n          <button \n            data-testid=\"retry-button\"\n            onClick={() => this.setState({ hasError: false, error: null })}\n          >\n            Retry\n          </button>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\ndescribe('Error Handling and Fallback Scenarios Integration Tests', () => {\n  const mockSession = {\n    user: {\n      id: 'user_123',\n      email: 'test@marketsage.ai',\n      role: 'admin',\n      organizationId: 'org_123'\n    },\n    expires: '2024-12-31'\n  };\n\n  beforeEach(() => {\n    mockUseSession.mockReturnValue({\n      data: mockSession,\n      status: 'authenticated'\n    });\n\n    // Mock console.error to prevent test noise\n    jest.spyOn(console, 'error').mockImplementation(() => {});\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n    jest.restoreAllMocks();\n  });\n\n  describe('MCP Server Connection Failures', () => {\n    it('should handle MCP server unavailable gracefully', async () => {\n      const mcpErrorData = {\n        ...createMockMCPData(),\n        mcpConnected: false,\n        mcpEnabled: false,\n        error: 'MCP server connection failed',\n        dataSource: 'fallback' as const\n      };\n      mockUseMCPLeadPulse.mockReturnValue(mcpErrorData);\n\n      render(<LiveVisitorMap />);\n\n      await waitFor(() => {\n        // Should show MCP connection error\n        expect(screen.getByRole('alert')).toBeInTheDocument();\n        expect(screen.getByText('MCP server connection failed')).toBeInTheDocument();\n        \n        // Should indicate fallback mode\n        expect(screen.getByText('Fallback Mode')).toBeInTheDocument();\n        expect(screen.getByTestId('fallback-indicator')).toBeInTheDocument();\n        \n        // Retry option should be available\n        expect(screen.getByText('Retry Connection')).toBeInTheDocument();\n      });\n    });\n\n    it('should retry MCP connection when requested', async () => {\n      const mockRefresh = jest.fn();\n      const mcpErrorData = {\n        ...createMockMCPData(),\n        mcpConnected: false,\n        error: 'Connection timeout',\n        refresh: mockRefresh\n      };\n      mockUseMCPLeadPulse.mockReturnValue(mcpErrorData);\n\n      render(<CoreAnalyticsDashboard />);\n\n      await waitFor(() => {\n        const retryButton = screen.getByText('Retry Connection');\n        fireEvent.click(retryButton);\n      });\n\n      expect(mockRefresh).toHaveBeenCalledTimes(1);\n    });\n\n    it('should handle partial MCP server failures', async () => {\n      const partialFailureData = {\n        ...createMockMCPData(),\n        visitorLocations: [], // Failed to load locations\n        visitorJourneys: createMockMCPData().visitorJourneys, // Loaded successfully\n        insights: [], // Failed to load insights\n        error: 'Partial data unavailable - some MCP endpoints down',\n        dataSource: 'mcp' as const,\n        mcpConnected: true\n      };\n      mockUseMCPLeadPulse.mockReturnValue(partialFailureData);\n\n      render(<AIIntelligenceDashboard />);\n\n      await waitFor(() => {\n        // Should show partial data warning\n        expect(screen.getByText('Some data unavailable')).toBeInTheDocument();\n        expect(screen.getByText('Partial data unavailable - some MCP endpoints down')).toBeInTheDocument();\n        \n        // Should still show available data\n        expect(screen.getByTestId('available-insights')).toBeInTheDocument();\n        \n        // Should indicate which data is missing\n        expect(screen.getByText('Location data unavailable')).toBeInTheDocument();\n        expect(screen.getByText('Insights temporarily unavailable')).toBeInTheDocument();\n      });\n    });\n\n    it('should handle MCP authentication failures', async () => {\n      const authErrorData = {\n        ...createMockMCPData(),\n        mcpConnected: false,\n        error: 'MCP authentication failed - invalid credentials',\n        dataSource: 'fallback' as const\n      };\n      mockUseMCPLeadPulse.mockReturnValue(authErrorData);\n\n      render(<CustomerIntelligenceDashboard />);\n\n      await waitFor(() => {\n        // Should show authentication error\n        expect(screen.getByText('Authentication Error')).toBeInTheDocument();\n        expect(screen.getByText('MCP authentication failed - invalid credentials')).toBeInTheDocument();\n        \n        // Should suggest re-authentication\n        expect(screen.getByText('Please check your credentials')).toBeInTheDocument();\n        expect(screen.getByText('Reconnect')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Database Connection Failures', () => {\n    it('should handle database connection timeout', async () => {\n      global.fetch = jest.fn().mockRejectedValue(new Error('Database connection timeout'));\n\n      render(<CustomerIntelligenceDashboard />);\n\n      await waitFor(() => {\n        // Should show database error\n        expect(screen.getByRole('alert')).toBeInTheDocument();\n        expect(screen.getByText('Database connection timeout')).toBeInTheDocument();\n        \n        // Should offer retry\n        expect(screen.getByText('Retry')).toBeInTheDocument();\n      });\n    });\n\n    it('should handle database query failures', async () => {\n      global.fetch = jest.fn().mockResolvedValue({\n        ok: false,\n        status: 500,\n        json: () => Promise.resolve({\n          error: 'Database query failed',\n          code: 'QUERY_ERROR'\n        })\n      });\n\n      render(<CoreAnalyticsDashboard />);\n\n      await waitFor(() => {\n        // Should show specific database error\n        expect(screen.getByText('Database query failed')).toBeInTheDocument();\n        expect(screen.getByText('Error Code: QUERY_ERROR')).toBeInTheDocument();\n        \n        // Should show fallback data message\n        expect(screen.getByText('Showing cached data')).toBeInTheDocument();\n      });\n    });\n\n    it('should fall back to cached data when database is unavailable', async () => {\n      global.fetch = jest.fn().mockRejectedValue(new Error('Service unavailable'));\n      \n      const cachedData = {\n        ...createMockMCPData(),\n        cached: true,\n        lastSync: new Date(Date.now() - 600000), // 10 minutes ago\n        dataSource: 'fallback' as const\n      };\n      mockUseMCPLeadPulse.mockReturnValue(cachedData);\n\n      render(<LiveVisitorMap />);\n\n      await waitFor(() => {\n        // Should show cached data indicator\n        expect(screen.getByText('Cached Data')).toBeInTheDocument();\n        expect(screen.getByText('Last updated: 10 minutes ago')).toBeInTheDocument();\n        \n        // Should still display data\n        expect(screen.getByText('Lagos')).toBeInTheDocument();\n        expect(screen.getByText('45')).toBeInTheDocument(); // Visitor count\n      });\n    });\n  });\n\n  describe('Component Error Boundaries', () => {\n    const ThrowError = ({ shouldThrow }: { shouldThrow: boolean }) => {\n      if (shouldThrow) {\n        throw new Error('Component rendering error');\n      }\n      return <div data-testid=\"working-component\">Component working</div>;\n    };\n\n    it('should catch and display component rendering errors', async () => {\n      const { rerender } = render(\n        <TestErrorBoundary>\n          <ThrowError shouldThrow={false} />\n        </TestErrorBoundary>\n      );\n\n      // Initially working\n      expect(screen.getByTestId('working-component')).toBeInTheDocument();\n\n      // Trigger error\n      rerender(\n        <TestErrorBoundary>\n          <ThrowError shouldThrow={true} />\n        </TestErrorBoundary>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByTestId('error-boundary')).toBeInTheDocument();\n        expect(screen.getByText('Something went wrong')).toBeInTheDocument();\n        expect(screen.getByTestId('error-message')).toHaveTextContent('Component rendering error');\n      });\n    });\n\n    it('should allow error recovery through retry', async () => {\n      let shouldThrow = true;\n      const { rerender } = render(\n        <TestErrorBoundary>\n          <ThrowError shouldThrow={shouldThrow} />\n        </TestErrorBoundary>\n      );\n\n      // Error state\n      await waitFor(() => {\n        expect(screen.getByTestId('error-boundary')).toBeInTheDocument();\n      });\n\n      // Fix the error condition\n      shouldThrow = false;\n      \n      // Click retry\n      fireEvent.click(screen.getByTestId('retry-button'));\n\n      // Should recover\n      rerender(\n        <TestErrorBoundary>\n          <ThrowError shouldThrow={shouldThrow} />\n        </TestErrorBoundary>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByTestId('working-component')).toBeInTheDocument();\n      });\n    });\n\n    it('should handle async component errors', async () => {\n      const AsyncErrorComponent = () => {\n        React.useEffect(() => {\n          // Simulate async error\n          setTimeout(() => {\n            throw new Error('Async operation failed');\n          }, 100);\n        }, []);\n        return <div data-testid=\"async-component\">Loading...</div>;\n      };\n\n      render(\n        <TestErrorBoundary>\n          <AsyncErrorComponent />\n        </TestErrorBoundary>\n      );\n\n      await waitFor(() => {\n        expect(screen.getByTestId('error-boundary')).toBeInTheDocument();\n        expect(screen.getByTestId('error-message')).toHaveTextContent('Async operation failed');\n      }, { timeout: 1000 });\n    });\n  });\n\n  describe('Network Connectivity Issues', () => {\n    it('should handle network disconnection gracefully', async () => {\n      // Mock network disconnection\n      Object.defineProperty(navigator, 'onLine', {\n        writable: true,\n        value: false\n      });\n\n      // Trigger online/offline events\n      window.dispatchEvent(new Event('offline'));\n\n      render(<LiveVisitorMap />);\n\n      await waitFor(() => {\n        // Should show offline indicator\n        expect(screen.getByText('No Internet Connection')).toBeInTheDocument();\n        expect(screen.getByText('Offline Mode')).toBeInTheDocument();\n        expect(screen.getByTestId('offline-indicator')).toBeInTheDocument();\n      });\n    });\n\n    it('should restore functionality when network reconnects', async () => {\n      // Start offline\n      Object.defineProperty(navigator, 'onLine', {\n        writable: true,\n        value: false\n      });\n\n      render(<CoreAnalyticsDashboard />);\n\n      await waitFor(() => {\n        expect(screen.getByText('Offline Mode')).toBeInTheDocument();\n      });\n\n      // Simulate reconnection\n      Object.defineProperty(navigator, 'onLine', {\n        writable: true,\n        value: true\n      });\n      window.dispatchEvent(new Event('online'));\n\n      await waitFor(() => {\n        // Should attempt to restore data\n        expect(screen.getByText('Reconnecting...')).toBeInTheDocument();\n        expect(screen.getByText('Syncing data')).toBeInTheDocument();\n      });\n    });\n\n    it('should handle slow network connections', async () => {\n      // Mock slow connection\n      Object.defineProperty(navigator, 'connection', {\n        value: {\n          effectiveType: 'slow-2g',\n          downlink: 0.1,\n          rtt: 2000\n        },\n        configurable: true\n      });\n\n      global.fetch = jest.fn().mockImplementation(() => {\n        return new Promise(resolve => {\n          setTimeout(() => {\n            resolve({\n              ok: true,\n              json: () => Promise.resolve(createMockMCPData())\n            });\n          }, 3000); // 3 second delay\n        });\n      });\n\n      render(<AIIntelligenceDashboard />);\n\n      // Should show slow connection warning\n      expect(screen.getByText('Slow Connection Detected')).toBeInTheDocument();\n      expect(screen.getByText('Loading may take longer')).toBeInTheDocument();\n\n      await waitFor(() => {\n        // Should eventually load\n        expect(screen.getByTestId('ai-dashboard')).toBeInTheDocument();\n      }, { timeout: 5000 });\n    });\n\n    it('should handle request timeouts', async () => {\n      global.fetch = jest.fn().mockImplementation(() => {\n        return new Promise((_, reject) => {\n          setTimeout(() => {\n            reject(new Error('Request timeout'));\n          }, 1000);\n        });\n      });\n\n      render(<CustomerIntelligenceDashboard />);\n\n      await waitFor(() => {\n        // Should show timeout error\n        expect(screen.getByText('Request timeout')).toBeInTheDocument();\n        expect(screen.getByText('Server took too long to respond')).toBeInTheDocument();\n        \n        // Should offer retry\n        expect(screen.getByText('Retry')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Data Validation and Corruption', () => {\n    it('should handle malformed API responses', async () => {\n      global.fetch = jest.fn().mockResolvedValue({\n        ok: true,\n        json: () => Promise.resolve({\n          // Malformed response missing required fields\n          data: {\n            visitors: 'invalid', // Should be array\n            analytics: null, // Should be object\n            timestamp: 'not-a-date' // Invalid date\n          }\n        })\n      });\n\n      render(<CoreAnalyticsDashboard />);\n\n      await waitFor(() => {\n        // Should handle malformed data gracefully\n        expect(screen.getByText('Data validation error')).toBeInTheDocument();\n        expect(screen.getByText('Received invalid data format')).toBeInTheDocument();\n        \n        // Should show empty state\n        expect(screen.getByText('No valid data available')).toBeInTheDocument();\n      });\n    });\n\n    it('should sanitize potentially dangerous data', async () => {\n      const maliciousData = {\n        ...createMockMCPData(),\n        insights: [\n          {\n            id: '1',\n            type: 'xss',\n            message: '<script>alert(\"XSS\")</script>High engagement detected',\n            title: '<img src=x onerror=alert(\"XSS\")>Alert'\n          }\n        ]\n      };\n      mockUseMCPLeadPulse.mockReturnValue(maliciousData);\n\n      render(<AIIntelligenceDashboard />);\n\n      await waitFor(() => {\n        // Should not render dangerous HTML\n        expect(screen.queryByText('<script>')).not.toBeInTheDocument();\n        expect(screen.queryByText('<img')).not.toBeInTheDocument();\n        \n        // Should show sanitized content\n        expect(screen.getByText('High engagement detected')).toBeInTheDocument();\n        expect(screen.getByText('[Unsafe content removed]')).toBeInTheDocument();\n      });\n    });\n\n    it('should handle missing required data fields', async () => {\n      const incompleteData = {\n        visitorLocations: [],\n        visitorJourneys: undefined, // Missing required field\n        insights: null, // Missing required field\n        segments: [],\n        analyticsOverview: {\n          // Missing some required fields\n          activeVisitors: 0,\n          totalVisitors: 0\n          // Missing other required fields\n        },\n        isLoading: false,\n        error: null,\n        dataSource: 'mcp' as const,\n        lastUpdated: null,\n        mcpEnabled: true,\n        mcpConnected: true,\n        refresh: jest.fn(),\n        refreshVisitors: jest.fn(),\n        refreshInsights: jest.fn(),\n        refreshLocations: jest.fn()\n      };\n      mockUseMCPLeadPulse.mockReturnValue(incompleteData);\n\n      render(<LiveVisitorMap />);\n\n      await waitFor(() => {\n        // Should handle missing data gracefully\n        expect(screen.getByText('Some data is unavailable')).toBeInTheDocument();\n        expect(screen.getByText('Partial data loaded')).toBeInTheDocument();\n        \n        // Should show what data is available\n        expect(screen.getByText('0 visitors from 0 countries')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Performance Degradation Handling', () => {\n    it('should handle high memory usage gracefully', async () => {\n      // Mock performance API\n      Object.defineProperty(performance, 'memory', {\n        value: {\n          usedJSHeapSize: 950000000, // ~950MB - high usage\n          totalJSHeapSize: 1000000000, // 1GB limit\n          jsHeapSizeLimit: 1073741824\n        },\n        configurable: true\n      });\n\n      render(<CustomerIntelligenceDashboard />);\n\n      await waitFor(() => {\n        // Should show memory warning\n        expect(screen.getByText('High memory usage detected')).toBeInTheDocument();\n        expect(screen.getByText('Performance mode enabled')).toBeInTheDocument();\n        \n        // Should reduce functionality\n        expect(screen.getByText('Some features disabled')).toBeInTheDocument();\n      });\n    });\n\n    it('should degrade functionality on slow devices', async () => {\n      // Mock slow device\n      Object.defineProperty(navigator, 'deviceMemory', {\n        value: 2, // 2GB RAM - low-end device\n        configurable: true\n      });\n\n      const slowRenderTime = jest.fn().mockReturnValue(250); // Slow rendering\n      jest.spyOn(performance, 'now').mockImplementation(slowRenderTime);\n\n      render(<AIIntelligenceDashboard />);\n\n      await waitFor(() => {\n        // Should enable performance mode\n        expect(screen.getByText('Performance Mode')).toBeInTheDocument();\n        expect(screen.getByText('Reduced animations')).toBeInTheDocument();\n        expect(screen.getByText('Simplified charts')).toBeInTheDocument();\n      });\n    });\n\n    it('should handle large dataset rendering efficiently', async () => {\n      const largeDataset = {\n        ...createMockMCPData(),\n        visitorJourneys: Array.from({ length: 10000 }, (_, i) => ({\n          id: `journey_${i}`,\n          visitorId: `visitor_${i}`,\n          sessionId: `session_${i}`,\n          device: 'mobile',\n          location: 'Lagos, Nigeria',\n          engagementScore: Math.floor(Math.random() * 100),\n          pulseData: [],\n          lastActive: '2 min ago'\n        }))\n      };\n      mockUseMCPLeadPulse.mockReturnValue(largeDataset);\n\n      const renderTime = await measureComponentPerformance(\n        () => render(<CoreAnalyticsDashboard />),\n        'Large dataset rendering'\n      );\n\n      await waitFor(() => {\n        // Should implement virtualization\n        expect(screen.getByTestId('virtualized-list')).toBeInTheDocument();\n        expect(screen.getByText('Showing 50 of 10,000 items')).toBeInTheDocument();\n      });\n\n      // Should still render within reasonable time\n      expect(renderTime).toBeLessThan(PERFORMANCE_THRESHOLDS.COMPONENT_RENDER * 3);\n    });\n  });\n\n  describe('User Permission and Security Errors', () => {\n    it('should handle insufficient permissions gracefully', async () => {\n      mockUseSession.mockReturnValue({\n        data: {\n          ...mockSession,\n          user: {\n            ...mockSession.user,\n            role: 'viewer', // Limited permissions\n            permissions: ['read:basic'] // No advanced permissions\n          }\n        },\n        status: 'authenticated'\n      });\n\n      const restrictedData = {\n        ...createMockMCPData(),\n        error: 'Insufficient permissions to access advanced analytics',\n        mcpEnabled: false\n      };\n      mockUseMCPLeadPulse.mockReturnValue(restrictedData);\n\n      render(<CustomerIntelligenceDashboard />);\n\n      await waitFor(() => {\n        // Should show permission error\n        expect(screen.getByText('Access Restricted')).toBeInTheDocument();\n        expect(screen.getByText('Insufficient permissions to access advanced analytics')).toBeInTheDocument();\n        \n        // Should suggest contacting admin\n        expect(screen.getByText('Contact your administrator')).toBeInTheDocument();\n      });\n    });\n\n    it('should handle session expiration', async () => {\n      mockUseSession.mockReturnValue({\n        data: null,\n        status: 'unauthenticated'\n      });\n\n      render(<LiveVisitorMap />);\n\n      await waitFor(() => {\n        // Should show authentication required\n        expect(screen.getByText('Authentication Required')).toBeInTheDocument();\n        expect(screen.getByText('Please log in to continue')).toBeInTheDocument();\n        expect(screen.getByText('Login')).toBeInTheDocument();\n      });\n    });\n\n    it('should handle security token validation failures', async () => {\n      global.fetch = jest.fn().mockResolvedValue({\n        ok: false,\n        status: 401,\n        json: () => Promise.resolve({\n          error: 'Invalid security token',\n          code: 'TOKEN_INVALID'\n        })\n      });\n\n      render(<AIIntelligenceDashboard />);\n\n      await waitFor(() => {\n        // Should show token error\n        expect(screen.getByText('Security Error')).toBeInTheDocument();\n        expect(screen.getByText('Invalid security token')).toBeInTheDocument();\n        expect(screen.getByText('Please refresh and try again')).toBeInTheDocument();\n      });\n    });\n  });\n});"],"names":["jest","mock","mockUseMCPLeadPulse","useMCPLeadPulse","mockUseSession","useSession","TestErrorBoundary","React","Component","constructor","props","state","hasError","error","getDerivedStateFromError","componentDidCatch","errorInfo","console","render","div","data-testid","h2","p","message","button","onClick","setState","children","describe","mockSession","user","id","email","role","organizationId","expires","beforeEach","mockReturnValue","data","status","spyOn","mockImplementation","afterEach","clearAllMocks","restoreAllMocks","it","mcpErrorData","createMockMCPData","mcpConnected","mcpEnabled","dataSource","LiveVisitorMap","waitFor","expect","screen","getByRole","toBeInTheDocument","getByText","getByTestId","mockRefresh","fn","refresh","CoreAnalyticsDashboard","retryButton","fireEvent","click","toHaveBeenCalledTimes","partialFailureData","visitorLocations","visitorJourneys","insights","AIIntelligenceDashboard","authErrorData","CustomerIntelligenceDashboard","global","fetch","mockRejectedValue","Error","mockResolvedValue","ok","json","Promise","resolve","code","cachedData","cached","lastSync","Date","now","ThrowError","shouldThrow","rerender","toHaveTextContent","AsyncErrorComponent","useEffect","setTimeout","timeout","Object","defineProperty","navigator","writable","value","window","dispatchEvent","Event","effectiveType","downlink","rtt","configurable","_","reject","visitors","analytics","timestamp","maliciousData","type","title","queryByText","not","incompleteData","undefined","segments","analyticsOverview","activeVisitors","totalVisitors","isLoading","lastUpdated","refreshVisitors","refreshInsights","refreshLocations","performance","usedJSHeapSize","totalJSHeapSize","jsHeapSizeLimit","slowRenderTime","largeDataset","Array","from","length","i","visitorId","sessionId","device","location","engagementScore","Math","floor","random","pulseData","lastActive","renderTime","measureComponentPerformance","toBeLessThan","PERFORMANCE_THRESHOLDS","COMPONENT_RENDER","permissions","restrictedData"],"mappings":"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"}