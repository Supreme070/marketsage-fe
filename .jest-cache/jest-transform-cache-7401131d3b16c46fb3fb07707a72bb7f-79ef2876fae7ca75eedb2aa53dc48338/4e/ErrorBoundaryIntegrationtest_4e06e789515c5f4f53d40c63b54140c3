b613c7e130c956e43ade24767656da73
"use strict";
// Mock dependencies
jest.mock('../../../hooks/useMCPLeadPulse');
jest.mock('next-auth/react');
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _testutils = require("../../utils/test-utils");
const _react1 = require("next-auth/react");
const _useMCPLeadPulse = require("../../../hooks/useMCPLeadPulse");
const _LiveVisitorMap = require("../../../components/leadpulse/LiveVisitorMap");
const _CoreAnalyticsDashboard = require("../../../components/leadpulse/CoreAnalyticsDashboard");
const _AIIntelligenceDashboard = require("../../../components/leadpulse/AIIntelligenceDashboard");
const _CustomerIntelligenceDashboard = /*#__PURE__*/ _interop_require_default(require("../../../components/dashboard/CustomerIntelligenceDashboard"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const mockUseMCPLeadPulse = _useMCPLeadPulse.useMCPLeadPulse;
const mockUseSession = _react1.useSession;
// Error Boundary Component for testing
class TestErrorBoundary extends _react.default.Component {
    constructor(props){
        super(props);
        this.state = {
            hasError: false,
            error: null
        };
    }
    static getDerivedStateFromError(error) {
        return {
            hasError: true,
            error
        };
    }
    componentDidCatch(error, errorInfo) {
        console.error('Error caught by boundary:', error, errorInfo);
    }
    render() {
        if (this.state.hasError) {
            return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "error-boundary",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("h2", {
                        children: "Something went wrong"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                        "data-testid": "error-message",
                        children: this.state.error?.message
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        "data-testid": "retry-button",
                        onClick: ()=>this.setState({
                                hasError: false,
                                error: null
                            }),
                        children: "Retry"
                    })
                ]
            });
        }
        return this.props.children;
    }
}
describe('Error Handling and Fallback Scenarios Integration Tests', ()=>{
    const mockSession = {
        user: {
            id: 'user_123',
            email: 'test@marketsage.ai',
            role: 'admin',
            organizationId: 'org_123'
        },
        expires: '2024-12-31'
    };
    beforeEach(()=>{
        mockUseSession.mockReturnValue({
            data: mockSession,
            status: 'authenticated'
        });
        // Mock console.error to prevent test noise
        jest.spyOn(console, 'error').mockImplementation(()=>{});
    });
    afterEach(()=>{
        jest.clearAllMocks();
        jest.restoreAllMocks();
    });
    describe('MCP Server Connection Failures', ()=>{
        it('should handle MCP server unavailable gracefully', async ()=>{
            const mcpErrorData = {
                ...(0, _testutils.createMockMCPData)(),
                mcpConnected: false,
                mcpEnabled: false,
                error: 'MCP server connection failed',
                dataSource: 'fallback'
            };
            mockUseMCPLeadPulse.mockReturnValue(mcpErrorData);
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LiveVisitorMap.LiveVisitorMap, {}));
            await (0, _testutils.waitFor)(()=>{
                // Should show MCP connection error
                expect(_testutils.screen.getByRole('alert')).toBeInTheDocument();
                expect(_testutils.screen.getByText('MCP server connection failed')).toBeInTheDocument();
                // Should indicate fallback mode
                expect(_testutils.screen.getByText('Fallback Mode')).toBeInTheDocument();
                expect(_testutils.screen.getByTestId('fallback-indicator')).toBeInTheDocument();
                // Retry option should be available
                expect(_testutils.screen.getByText('Retry Connection')).toBeInTheDocument();
            });
        });
        it('should retry MCP connection when requested', async ()=>{
            const mockRefresh = jest.fn();
            const mcpErrorData = {
                ...(0, _testutils.createMockMCPData)(),
                mcpConnected: false,
                error: 'Connection timeout',
                refresh: mockRefresh
            };
            mockUseMCPLeadPulse.mockReturnValue(mcpErrorData);
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CoreAnalyticsDashboard.CoreAnalyticsDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                const retryButton = _testutils.screen.getByText('Retry Connection');
                _testutils.fireEvent.click(retryButton);
            });
            expect(mockRefresh).toHaveBeenCalledTimes(1);
        });
        it('should handle partial MCP server failures', async ()=>{
            const partialFailureData = {
                ...(0, _testutils.createMockMCPData)(),
                visitorLocations: [],
                visitorJourneys: (0, _testutils.createMockMCPData)().visitorJourneys,
                insights: [],
                error: 'Partial data unavailable - some MCP endpoints down',
                dataSource: 'mcp',
                mcpConnected: true
            };
            mockUseMCPLeadPulse.mockReturnValue(partialFailureData);
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AIIntelligenceDashboard.AIIntelligenceDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                // Should show partial data warning
                expect(_testutils.screen.getByText('Some data unavailable')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Partial data unavailable - some MCP endpoints down')).toBeInTheDocument();
                // Should still show available data
                expect(_testutils.screen.getByTestId('available-insights')).toBeInTheDocument();
                // Should indicate which data is missing
                expect(_testutils.screen.getByText('Location data unavailable')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Insights temporarily unavailable')).toBeInTheDocument();
            });
        });
        it('should handle MCP authentication failures', async ()=>{
            const authErrorData = {
                ...(0, _testutils.createMockMCPData)(),
                mcpConnected: false,
                error: 'MCP authentication failed - invalid credentials',
                dataSource: 'fallback'
            };
            mockUseMCPLeadPulse.mockReturnValue(authErrorData);
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CustomerIntelligenceDashboard.default, {}));
            await (0, _testutils.waitFor)(()=>{
                // Should show authentication error
                expect(_testutils.screen.getByText('Authentication Error')).toBeInTheDocument();
                expect(_testutils.screen.getByText('MCP authentication failed - invalid credentials')).toBeInTheDocument();
                // Should suggest re-authentication
                expect(_testutils.screen.getByText('Please check your credentials')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Reconnect')).toBeInTheDocument();
            });
        });
    });
    describe('Database Connection Failures', ()=>{
        it('should handle database connection timeout', async ()=>{
            global.fetch = jest.fn().mockRejectedValue(new Error('Database connection timeout'));
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CustomerIntelligenceDashboard.default, {}));
            await (0, _testutils.waitFor)(()=>{
                // Should show database error
                expect(_testutils.screen.getByRole('alert')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Database connection timeout')).toBeInTheDocument();
                // Should offer retry
                expect(_testutils.screen.getByText('Retry')).toBeInTheDocument();
            });
        });
        it('should handle database query failures', async ()=>{
            global.fetch = jest.fn().mockResolvedValue({
                ok: false,
                status: 500,
                json: ()=>Promise.resolve({
                        error: 'Database query failed',
                        code: 'QUERY_ERROR'
                    })
            });
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CoreAnalyticsDashboard.CoreAnalyticsDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                // Should show specific database error
                expect(_testutils.screen.getByText('Database query failed')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Error Code: QUERY_ERROR')).toBeInTheDocument();
                // Should show fallback data message
                expect(_testutils.screen.getByText('Showing cached data')).toBeInTheDocument();
            });
        });
        it('should fall back to cached data when database is unavailable', async ()=>{
            global.fetch = jest.fn().mockRejectedValue(new Error('Service unavailable'));
            const cachedData = {
                ...(0, _testutils.createMockMCPData)(),
                cached: true,
                lastSync: new Date(Date.now() - 600000),
                dataSource: 'fallback'
            };
            mockUseMCPLeadPulse.mockReturnValue(cachedData);
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LiveVisitorMap.LiveVisitorMap, {}));
            await (0, _testutils.waitFor)(()=>{
                // Should show cached data indicator
                expect(_testutils.screen.getByText('Cached Data')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Last updated: 10 minutes ago')).toBeInTheDocument();
                // Should still display data
                expect(_testutils.screen.getByText('Lagos')).toBeInTheDocument();
                expect(_testutils.screen.getByText('45')).toBeInTheDocument(); // Visitor count
            });
        });
    });
    describe('Component Error Boundaries', ()=>{
        const ThrowError = ({ shouldThrow })=>{
            if (shouldThrow) {
                throw new Error('Component rendering error');
            }
            return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "working-component",
                children: "Component working"
            });
        };
        it('should catch and display component rendering errors', async ()=>{
            const { rerender } = (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestErrorBoundary, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                    shouldThrow: false
                })
            }));
            // Initially working
            expect(_testutils.screen.getByTestId('working-component')).toBeInTheDocument();
            // Trigger error
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestErrorBoundary, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                    shouldThrow: true
                })
            }));
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByTestId('error-boundary')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Something went wrong')).toBeInTheDocument();
                expect(_testutils.screen.getByTestId('error-message')).toHaveTextContent('Component rendering error');
            });
        });
        it('should allow error recovery through retry', async ()=>{
            let shouldThrow = true;
            const { rerender } = (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestErrorBoundary, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                    shouldThrow: shouldThrow
                })
            }));
            // Error state
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByTestId('error-boundary')).toBeInTheDocument();
            });
            // Fix the error condition
            shouldThrow = false;
            // Click retry
            _testutils.fireEvent.click(_testutils.screen.getByTestId('retry-button'));
            // Should recover
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestErrorBoundary, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(ThrowError, {
                    shouldThrow: shouldThrow
                })
            }));
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByTestId('working-component')).toBeInTheDocument();
            });
        });
        it('should handle async component errors', async ()=>{
            const AsyncErrorComponent = ()=>{
                _react.default.useEffect(()=>{
                    // Simulate async error
                    setTimeout(()=>{
                        throw new Error('Async operation failed');
                    }, 100);
                }, []);
                return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    "data-testid": "async-component",
                    children: "Loading..."
                });
            };
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestErrorBoundary, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(AsyncErrorComponent, {})
            }));
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByTestId('error-boundary')).toBeInTheDocument();
                expect(_testutils.screen.getByTestId('error-message')).toHaveTextContent('Async operation failed');
            }, {
                timeout: 1000
            });
        });
    });
    describe('Network Connectivity Issues', ()=>{
        it('should handle network disconnection gracefully', async ()=>{
            // Mock network disconnection
            Object.defineProperty(navigator, 'onLine', {
                writable: true,
                value: false
            });
            // Trigger online/offline events
            window.dispatchEvent(new Event('offline'));
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LiveVisitorMap.LiveVisitorMap, {}));
            await (0, _testutils.waitFor)(()=>{
                // Should show offline indicator
                expect(_testutils.screen.getByText('No Internet Connection')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Offline Mode')).toBeInTheDocument();
                expect(_testutils.screen.getByTestId('offline-indicator')).toBeInTheDocument();
            });
        });
        it('should restore functionality when network reconnects', async ()=>{
            // Start offline
            Object.defineProperty(navigator, 'onLine', {
                writable: true,
                value: false
            });
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CoreAnalyticsDashboard.CoreAnalyticsDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByText('Offline Mode')).toBeInTheDocument();
            });
            // Simulate reconnection
            Object.defineProperty(navigator, 'onLine', {
                writable: true,
                value: true
            });
            window.dispatchEvent(new Event('online'));
            await (0, _testutils.waitFor)(()=>{
                // Should attempt to restore data
                expect(_testutils.screen.getByText('Reconnecting...')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Syncing data')).toBeInTheDocument();
            });
        });
        it('should handle slow network connections', async ()=>{
            // Mock slow connection
            Object.defineProperty(navigator, 'connection', {
                value: {
                    effectiveType: 'slow-2g',
                    downlink: 0.1,
                    rtt: 2000
                },
                configurable: true
            });
            global.fetch = jest.fn().mockImplementation(()=>{
                return new Promise((resolve)=>{
                    setTimeout(()=>{
                        resolve({
                            ok: true,
                            json: ()=>Promise.resolve((0, _testutils.createMockMCPData)())
                        });
                    }, 3000); // 3 second delay
                });
            });
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AIIntelligenceDashboard.AIIntelligenceDashboard, {}));
            // Should show slow connection warning
            expect(_testutils.screen.getByText('Slow Connection Detected')).toBeInTheDocument();
            expect(_testutils.screen.getByText('Loading may take longer')).toBeInTheDocument();
            await (0, _testutils.waitFor)(()=>{
                // Should eventually load
                expect(_testutils.screen.getByTestId('ai-dashboard')).toBeInTheDocument();
            }, {
                timeout: 5000
            });
        });
        it('should handle request timeouts', async ()=>{
            global.fetch = jest.fn().mockImplementation(()=>{
                return new Promise((_, reject)=>{
                    setTimeout(()=>{
                        reject(new Error('Request timeout'));
                    }, 1000);
                });
            });
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CustomerIntelligenceDashboard.default, {}));
            await (0, _testutils.waitFor)(()=>{
                // Should show timeout error
                expect(_testutils.screen.getByText('Request timeout')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Server took too long to respond')).toBeInTheDocument();
                // Should offer retry
                expect(_testutils.screen.getByText('Retry')).toBeInTheDocument();
            });
        });
    });
    describe('Data Validation and Corruption', ()=>{
        it('should handle malformed API responses', async ()=>{
            global.fetch = jest.fn().mockResolvedValue({
                ok: true,
                json: ()=>Promise.resolve({
                        // Malformed response missing required fields
                        data: {
                            visitors: 'invalid',
                            analytics: null,
                            timestamp: 'not-a-date' // Invalid date
                        }
                    })
            });
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CoreAnalyticsDashboard.CoreAnalyticsDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                // Should handle malformed data gracefully
                expect(_testutils.screen.getByText('Data validation error')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Received invalid data format')).toBeInTheDocument();
                // Should show empty state
                expect(_testutils.screen.getByText('No valid data available')).toBeInTheDocument();
            });
        });
        it('should sanitize potentially dangerous data', async ()=>{
            const maliciousData = {
                ...(0, _testutils.createMockMCPData)(),
                insights: [
                    {
                        id: '1',
                        type: 'xss',
                        message: '<script>alert("XSS")</script>High engagement detected',
                        title: '<img src=x onerror=alert("XSS")>Alert'
                    }
                ]
            };
            mockUseMCPLeadPulse.mockReturnValue(maliciousData);
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AIIntelligenceDashboard.AIIntelligenceDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                // Should not render dangerous HTML
                expect(_testutils.screen.queryByText('<script>')).not.toBeInTheDocument();
                expect(_testutils.screen.queryByText('<img')).not.toBeInTheDocument();
                // Should show sanitized content
                expect(_testutils.screen.getByText('High engagement detected')).toBeInTheDocument();
                expect(_testutils.screen.getByText('[Unsafe content removed]')).toBeInTheDocument();
            });
        });
        it('should handle missing required data fields', async ()=>{
            const incompleteData = {
                visitorLocations: [],
                visitorJourneys: undefined,
                insights: null,
                segments: [],
                analyticsOverview: {
                    // Missing some required fields
                    activeVisitors: 0,
                    totalVisitors: 0
                },
                isLoading: false,
                error: null,
                dataSource: 'mcp',
                lastUpdated: null,
                mcpEnabled: true,
                mcpConnected: true,
                refresh: jest.fn(),
                refreshVisitors: jest.fn(),
                refreshInsights: jest.fn(),
                refreshLocations: jest.fn()
            };
            mockUseMCPLeadPulse.mockReturnValue(incompleteData);
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LiveVisitorMap.LiveVisitorMap, {}));
            await (0, _testutils.waitFor)(()=>{
                // Should handle missing data gracefully
                expect(_testutils.screen.getByText('Some data is unavailable')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Partial data loaded')).toBeInTheDocument();
                // Should show what data is available
                expect(_testutils.screen.getByText('0 visitors from 0 countries')).toBeInTheDocument();
            });
        });
    });
    describe('Performance Degradation Handling', ()=>{
        it('should handle high memory usage gracefully', async ()=>{
            // Mock performance API
            Object.defineProperty(performance, 'memory', {
                value: {
                    usedJSHeapSize: 950000000,
                    totalJSHeapSize: 1000000000,
                    jsHeapSizeLimit: 1073741824
                },
                configurable: true
            });
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CustomerIntelligenceDashboard.default, {}));
            await (0, _testutils.waitFor)(()=>{
                // Should show memory warning
                expect(_testutils.screen.getByText('High memory usage detected')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Performance mode enabled')).toBeInTheDocument();
                // Should reduce functionality
                expect(_testutils.screen.getByText('Some features disabled')).toBeInTheDocument();
            });
        });
        it('should degrade functionality on slow devices', async ()=>{
            // Mock slow device
            Object.defineProperty(navigator, 'deviceMemory', {
                value: 2,
                configurable: true
            });
            const slowRenderTime = jest.fn().mockReturnValue(250); // Slow rendering
            jest.spyOn(performance, 'now').mockImplementation(slowRenderTime);
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AIIntelligenceDashboard.AIIntelligenceDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                // Should enable performance mode
                expect(_testutils.screen.getByText('Performance Mode')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Reduced animations')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Simplified charts')).toBeInTheDocument();
            });
        });
        it('should handle large dataset rendering efficiently', async ()=>{
            const largeDataset = {
                ...(0, _testutils.createMockMCPData)(),
                visitorJourneys: Array.from({
                    length: 10000
                }, (_, i)=>({
                        id: `journey_${i}`,
                        visitorId: `visitor_${i}`,
                        sessionId: `session_${i}`,
                        device: 'mobile',
                        location: 'Lagos, Nigeria',
                        engagementScore: Math.floor(Math.random() * 100),
                        pulseData: [],
                        lastActive: '2 min ago'
                    }))
            };
            mockUseMCPLeadPulse.mockReturnValue(largeDataset);
            const renderTime = await (0, _testutils.measureComponentPerformance)(()=>(0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CoreAnalyticsDashboard.CoreAnalyticsDashboard, {})), 'Large dataset rendering');
            await (0, _testutils.waitFor)(()=>{
                // Should implement virtualization
                expect(_testutils.screen.getByTestId('virtualized-list')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Showing 50 of 10,000 items')).toBeInTheDocument();
            });
            // Should still render within reasonable time
            expect(renderTime).toBeLessThan(_testutils.PERFORMANCE_THRESHOLDS.COMPONENT_RENDER * 3);
        });
    });
    describe('User Permission and Security Errors', ()=>{
        it('should handle insufficient permissions gracefully', async ()=>{
            mockUseSession.mockReturnValue({
                data: {
                    ...mockSession,
                    user: {
                        ...mockSession.user,
                        role: 'viewer',
                        permissions: [
                            'read:basic'
                        ] // No advanced permissions
                    }
                },
                status: 'authenticated'
            });
            const restrictedData = {
                ...(0, _testutils.createMockMCPData)(),
                error: 'Insufficient permissions to access advanced analytics',
                mcpEnabled: false
            };
            mockUseMCPLeadPulse.mockReturnValue(restrictedData);
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CustomerIntelligenceDashboard.default, {}));
            await (0, _testutils.waitFor)(()=>{
                // Should show permission error
                expect(_testutils.screen.getByText('Access Restricted')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Insufficient permissions to access advanced analytics')).toBeInTheDocument();
                // Should suggest contacting admin
                expect(_testutils.screen.getByText('Contact your administrator')).toBeInTheDocument();
            });
        });
        it('should handle session expiration', async ()=>{
            mockUseSession.mockReturnValue({
                data: null,
                status: 'unauthenticated'
            });
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LiveVisitorMap.LiveVisitorMap, {}));
            await (0, _testutils.waitFor)(()=>{
                // Should show authentication required
                expect(_testutils.screen.getByText('Authentication Required')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Please log in to continue')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Login')).toBeInTheDocument();
            });
        });
        it('should handle security token validation failures', async ()=>{
            global.fetch = jest.fn().mockResolvedValue({
                ok: false,
                status: 401,
                json: ()=>Promise.resolve({
                        error: 'Invalid security token',
                        code: 'TOKEN_INVALID'
                    })
            });
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AIIntelligenceDashboard.AIIntelligenceDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                // Should show token error
                expect(_testutils.screen.getByText('Security Error')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Invalid security token')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Please refresh and try again')).toBeInTheDocument();
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,