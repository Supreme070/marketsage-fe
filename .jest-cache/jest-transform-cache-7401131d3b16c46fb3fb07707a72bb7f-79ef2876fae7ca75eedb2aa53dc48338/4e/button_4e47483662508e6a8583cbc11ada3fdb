317c83266f661aab7c93a91d6a248ec1
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    Button: function() {
        return Button;
    },
    buttonVariants: function() {
        return buttonVariants;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reactslot = require("@radix-ui/react-slot");
const _classvarianceauthority = require("class-variance-authority");
const _utils = require("../../lib/utils");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const buttonVariants = (0, _classvarianceauthority.cva)("inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium ring-offset-background transition-all duration-200 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 active:scale-[0.98]", {
    variants: {
        variant: {
            default: "bg-primary text-primary-foreground hover:bg-primary/90 hover:shadow-md hover:shadow-primary/20",
            destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90 hover:shadow-md hover:shadow-destructive/20",
            outline: "border border-input bg-background hover:bg-accent hover:text-accent-foreground hover:border-accent/50",
            secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/90",
            accent: "bg-accent text-accent-foreground hover:bg-accent/90 hover:shadow-md hover:shadow-accent/20",
            ghost: "hover:bg-accent/10 hover:text-accent-foreground",
            link: "text-primary underline-offset-4 hover:underline",
            cta: "bg-msage-orange text-white hover:bg-msage-orange/90 hover:shadow-lg hover:shadow-msage-orange/20 font-medium",
            purple: "bg-msage-purple text-white hover:bg-msage-purple/90 hover:shadow-lg hover:shadow-msage-purple/20 font-medium",
            purpleOutline: "border border-msage-purple/30 text-msage-purple bg-transparent hover:bg-msage-purple/10 hover:border-msage-purple",
            orangeOutline: "border border-msage-orange/30 text-msage-orange bg-transparent hover:bg-msage-orange/10 hover:border-msage-orange"
        },
        size: {
            default: "h-10 px-4 py-2",
            sm: "h-9 rounded-md px-3 text-xs",
            lg: "h-12 rounded-md px-8 text-base",
            xl: "h-14 rounded-lg px-10 text-lg",
            icon: "h-10 w-10"
        }
    },
    defaultVariants: {
        variant: "default",
        size: "default"
    }
});
const Button = /*#__PURE__*/ _react.forwardRef(({ className, variant, size, asChild = false, isLoading = false, children, ...props }, ref)=>{
    const Comp = asChild ? _reactslot.Slot : "button";
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(Comp, {
        className: (0, _utils.cn)(buttonVariants({
            variant,
            size,
            className
        })),
        disabled: isLoading || props.disabled,
        ref: ref,
        ...props,
        children: isLoading ? /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsxs)("svg", {
                    className: "animate-spin -ml-1 mr-2 h-4 w-4",
                    xmlns: "http://www.w3.org/2000/svg",
                    fill: "none",
                    viewBox: "0 0 24 24",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("circle", {
                            className: "opacity-25",
                            cx: "12",
                            cy: "12",
                            r: "10",
                            stroke: "currentColor",
                            strokeWidth: "4"
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("path", {
                            className: "opacity-75",
                            fill: "currentColor",
                            d: "M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                        })
                    ]
                }),
                children
            ]
        }) : children
    });
});
Button.displayName = "Button";

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zdXByZW1lL0Rlc2t0b3AvbWFya2V0c2FnZS9zcmMvY29tcG9uZW50cy91aS9idXR0b24udHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiXG5pbXBvcnQgeyBTbG90IH0gZnJvbSBcIkByYWRpeC11aS9yZWFjdC1zbG90XCJcbmltcG9ydCB7IGN2YSwgdHlwZSBWYXJpYW50UHJvcHMgfSBmcm9tIFwiY2xhc3MtdmFyaWFuY2UtYXV0aG9yaXR5XCJcblxuaW1wb3J0IHsgY24gfSBmcm9tIFwiQC9saWIvdXRpbHNcIlxuXG5jb25zdCBidXR0b25WYXJpYW50cyA9IGN2YShcbiAgXCJpbmxpbmUtZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgZ2FwLTIgcm91bmRlZC1tZCB0ZXh0LXNtIGZvbnQtbWVkaXVtIHJpbmctb2Zmc2V0LWJhY2tncm91bmQgdHJhbnNpdGlvbi1hbGwgZHVyYXRpb24tMjAwIGZvY3VzLXZpc2libGU6b3V0bGluZS1ub25lIGZvY3VzLXZpc2libGU6cmluZy0yIGZvY3VzLXZpc2libGU6cmluZy1yaW5nIGZvY3VzLXZpc2libGU6cmluZy1vZmZzZXQtMiBkaXNhYmxlZDpwb2ludGVyLWV2ZW50cy1ub25lIGRpc2FibGVkOm9wYWNpdHktNTAgYWN0aXZlOnNjYWxlLVswLjk4XVwiLFxuICB7XG4gICAgdmFyaWFudHM6IHtcbiAgICAgIHZhcmlhbnQ6IHtcbiAgICAgICAgZGVmYXVsdDogXCJiZy1wcmltYXJ5IHRleHQtcHJpbWFyeS1mb3JlZ3JvdW5kIGhvdmVyOmJnLXByaW1hcnkvOTAgaG92ZXI6c2hhZG93LW1kIGhvdmVyOnNoYWRvdy1wcmltYXJ5LzIwXCIsXG4gICAgICAgIGRlc3RydWN0aXZlOlxuICAgICAgICAgIFwiYmctZGVzdHJ1Y3RpdmUgdGV4dC1kZXN0cnVjdGl2ZS1mb3JlZ3JvdW5kIGhvdmVyOmJnLWRlc3RydWN0aXZlLzkwIGhvdmVyOnNoYWRvdy1tZCBob3ZlcjpzaGFkb3ctZGVzdHJ1Y3RpdmUvMjBcIixcbiAgICAgICAgb3V0bGluZTpcbiAgICAgICAgICBcImJvcmRlciBib3JkZXItaW5wdXQgYmctYmFja2dyb3VuZCBob3ZlcjpiZy1hY2NlbnQgaG92ZXI6dGV4dC1hY2NlbnQtZm9yZWdyb3VuZCBob3Zlcjpib3JkZXItYWNjZW50LzUwXCIsXG4gICAgICAgIHNlY29uZGFyeTpcbiAgICAgICAgICBcImJnLXNlY29uZGFyeSB0ZXh0LXNlY29uZGFyeS1mb3JlZ3JvdW5kIGhvdmVyOmJnLXNlY29uZGFyeS85MFwiLFxuICAgICAgICBhY2NlbnQ6IFxuICAgICAgICAgIFwiYmctYWNjZW50IHRleHQtYWNjZW50LWZvcmVncm91bmQgaG92ZXI6YmctYWNjZW50LzkwIGhvdmVyOnNoYWRvdy1tZCBob3ZlcjpzaGFkb3ctYWNjZW50LzIwXCIsXG4gICAgICAgIGdob3N0OiBcImhvdmVyOmJnLWFjY2VudC8xMCBob3Zlcjp0ZXh0LWFjY2VudC1mb3JlZ3JvdW5kXCIsXG4gICAgICAgIGxpbms6IFwidGV4dC1wcmltYXJ5IHVuZGVybGluZS1vZmZzZXQtNCBob3Zlcjp1bmRlcmxpbmVcIixcbiAgICAgICAgY3RhOiBcImJnLW1zYWdlLW9yYW5nZSB0ZXh0LXdoaXRlIGhvdmVyOmJnLW1zYWdlLW9yYW5nZS85MCBob3ZlcjpzaGFkb3ctbGcgaG92ZXI6c2hhZG93LW1zYWdlLW9yYW5nZS8yMCBmb250LW1lZGl1bVwiLFxuICAgICAgICBwdXJwbGU6IFwiYmctbXNhZ2UtcHVycGxlIHRleHQtd2hpdGUgaG92ZXI6YmctbXNhZ2UtcHVycGxlLzkwIGhvdmVyOnNoYWRvdy1sZyBob3ZlcjpzaGFkb3ctbXNhZ2UtcHVycGxlLzIwIGZvbnQtbWVkaXVtXCIsXG4gICAgICAgIHB1cnBsZU91dGxpbmU6IFwiYm9yZGVyIGJvcmRlci1tc2FnZS1wdXJwbGUvMzAgdGV4dC1tc2FnZS1wdXJwbGUgYmctdHJhbnNwYXJlbnQgaG92ZXI6YmctbXNhZ2UtcHVycGxlLzEwIGhvdmVyOmJvcmRlci1tc2FnZS1wdXJwbGVcIixcbiAgICAgICAgb3JhbmdlT3V0bGluZTogXCJib3JkZXIgYm9yZGVyLW1zYWdlLW9yYW5nZS8zMCB0ZXh0LW1zYWdlLW9yYW5nZSBiZy10cmFuc3BhcmVudCBob3ZlcjpiZy1tc2FnZS1vcmFuZ2UvMTAgaG92ZXI6Ym9yZGVyLW1zYWdlLW9yYW5nZVwiLFxuICAgICAgfSxcbiAgICAgIHNpemU6IHtcbiAgICAgICAgZGVmYXVsdDogXCJoLTEwIHB4LTQgcHktMlwiLFxuICAgICAgICBzbTogXCJoLTkgcm91bmRlZC1tZCBweC0zIHRleHQteHNcIixcbiAgICAgICAgbGc6IFwiaC0xMiByb3VuZGVkLW1kIHB4LTggdGV4dC1iYXNlXCIsXG4gICAgICAgIHhsOiBcImgtMTQgcm91bmRlZC1sZyBweC0xMCB0ZXh0LWxnXCIsXG4gICAgICAgIGljb246IFwiaC0xMCB3LTEwXCIsXG4gICAgICB9LFxuICAgIH0sXG4gICAgZGVmYXVsdFZhcmlhbnRzOiB7XG4gICAgICB2YXJpYW50OiBcImRlZmF1bHRcIixcbiAgICAgIHNpemU6IFwiZGVmYXVsdFwiLFxuICAgIH0sXG4gIH1cbilcblxuZXhwb3J0IGludGVyZmFjZSBCdXR0b25Qcm9wc1xuICBleHRlbmRzIFJlYWN0LkJ1dHRvbkhUTUxBdHRyaWJ1dGVzPEhUTUxCdXR0b25FbGVtZW50PixcbiAgICBWYXJpYW50UHJvcHM8dHlwZW9mIGJ1dHRvblZhcmlhbnRzPiB7XG4gIGFzQ2hpbGQ/OiBib29sZWFuXG4gIGlzTG9hZGluZz86IGJvb2xlYW5cbn1cblxuY29uc3QgQnV0dG9uID0gUmVhY3QuZm9yd2FyZFJlZjxIVE1MQnV0dG9uRWxlbWVudCwgQnV0dG9uUHJvcHM+KFxuICAoeyBjbGFzc05hbWUsIHZhcmlhbnQsIHNpemUsIGFzQ2hpbGQgPSBmYWxzZSwgaXNMb2FkaW5nID0gZmFsc2UsIGNoaWxkcmVuLCAuLi5wcm9wcyB9LCByZWYpID0+IHtcbiAgICBjb25zdCBDb21wID0gYXNDaGlsZCA/IFNsb3QgOiBcImJ1dHRvblwiXG4gICAgcmV0dXJuIChcbiAgICAgIDxDb21wXG4gICAgICAgIGNsYXNzTmFtZT17Y24oYnV0dG9uVmFyaWFudHMoeyB2YXJpYW50LCBzaXplLCBjbGFzc05hbWUgfSkpfVxuICAgICAgICBkaXNhYmxlZD17aXNMb2FkaW5nIHx8IHByb3BzLmRpc2FibGVkfVxuICAgICAgICByZWY9e3JlZn1cbiAgICAgICAgey4uLnByb3BzfVxuICAgICAgPlxuICAgICAgICB7aXNMb2FkaW5nID8gKFxuICAgICAgICAgIDw+XG4gICAgICAgICAgICA8c3ZnIGNsYXNzTmFtZT1cImFuaW1hdGUtc3BpbiAtbWwtMSBtci0yIGgtNCB3LTRcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgZmlsbD1cIm5vbmVcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+XG4gICAgICAgICAgICAgIDxjaXJjbGUgY2xhc3NOYW1lPVwib3BhY2l0eS0yNVwiIGN4PVwiMTJcIiBjeT1cIjEyXCIgcj1cIjEwXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlV2lkdGg9XCI0XCI+PC9jaXJjbGU+XG4gICAgICAgICAgICAgIDxwYXRoIGNsYXNzTmFtZT1cIm9wYWNpdHktNzVcIiBmaWxsPVwiY3VycmVudENvbG9yXCIgZD1cIk00IDEyYTggOCAwIDAxOC04VjBDNS4zNzMgMCAwIDUuMzczIDAgMTJoNHptMiA1LjI5MUE3Ljk2MiA3Ljk2MiAwIDAxNCAxMkgwYzAgMy4wNDIgMS4xMzUgNS44MjQgMyA3LjkzOGwzLTIuNjQ3elwiPjwvcGF0aD5cbiAgICAgICAgICAgIDwvc3ZnPlxuICAgICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICAgIDwvPlxuICAgICAgICApIDogKFxuICAgICAgICAgIGNoaWxkcmVuXG4gICAgICAgICl9XG4gICAgICA8L0NvbXA+XG4gICAgKVxuICB9XG4pXG5CdXR0b24uZGlzcGxheU5hbWUgPSBcIkJ1dHRvblwiXG5cbmV4cG9ydCB7IEJ1dHRvbiwgYnV0dG9uVmFyaWFudHMgfVxuIl0sIm5hbWVzIjpbIkJ1dHRvbiIsImJ1dHRvblZhcmlhbnRzIiwiY3ZhIiwidmFyaWFudHMiLCJ2YXJpYW50IiwiZGVmYXVsdCIsImRlc3RydWN0aXZlIiwib3V0bGluZSIsInNlY29uZGFyeSIsImFjY2VudCIsImdob3N0IiwibGluayIsImN0YSIsInB1cnBsZSIsInB1cnBsZU91dGxpbmUiLCJvcmFuZ2VPdXRsaW5lIiwic2l6ZSIsInNtIiwibGciLCJ4bCIsImljb24iLCJkZWZhdWx0VmFyaWFudHMiLCJSZWFjdCIsImZvcndhcmRSZWYiLCJjbGFzc05hbWUiLCJhc0NoaWxkIiwiaXNMb2FkaW5nIiwiY2hpbGRyZW4iLCJwcm9wcyIsInJlZiIsIkNvbXAiLCJTbG90IiwiY24iLCJkaXNhYmxlZCIsInN2ZyIsInhtbG5zIiwiZmlsbCIsInZpZXdCb3giLCJjaXJjbGUiLCJjeCIsImN5IiwiciIsInN0cm9rZSIsInN0cm9rZVdpZHRoIiwicGF0aCIsImQiLCJkaXNwbGF5TmFtZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7SUE0RVNBLE1BQU07ZUFBTkE7O0lBQVFDLGNBQWM7ZUFBZEE7Ozs7K0RBNUVNOzJCQUNGO3dDQUNrQjt1QkFFcEI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVuQixNQUFNQSxpQkFBaUJDLElBQUFBLDJCQUFHLEVBQ3hCLDRTQUNBO0lBQ0VDLFVBQVU7UUFDUkMsU0FBUztZQUNQQyxTQUFTO1lBQ1RDLGFBQ0U7WUFDRkMsU0FDRTtZQUNGQyxXQUNFO1lBQ0ZDLFFBQ0U7WUFDRkMsT0FBTztZQUNQQyxNQUFNO1lBQ05DLEtBQUs7WUFDTEMsUUFBUTtZQUNSQyxlQUFlO1lBQ2ZDLGVBQWU7UUFDakI7UUFDQUMsTUFBTTtZQUNKWCxTQUFTO1lBQ1RZLElBQUk7WUFDSkMsSUFBSTtZQUNKQyxJQUFJO1lBQ0pDLE1BQU07UUFDUjtJQUNGO0lBQ0FDLGlCQUFpQjtRQUNmakIsU0FBUztRQUNUWSxNQUFNO0lBQ1I7QUFDRjtBQVVGLE1BQU1oQix1QkFBU3NCLE9BQU1DLFVBQVUsQ0FDN0IsQ0FBQyxFQUFFQyxTQUFTLEVBQUVwQixPQUFPLEVBQUVZLElBQUksRUFBRVMsVUFBVSxLQUFLLEVBQUVDLFlBQVksS0FBSyxFQUFFQyxRQUFRLEVBQUUsR0FBR0MsT0FBTyxFQUFFQztJQUNyRixNQUFNQyxPQUFPTCxVQUFVTSxlQUFJLEdBQUc7SUFDOUIscUJBQ0UscUJBQUNEO1FBQ0NOLFdBQVdRLElBQUFBLFNBQUUsRUFBQy9CLGVBQWU7WUFBRUc7WUFBU1k7WUFBTVE7UUFBVTtRQUN4RFMsVUFBVVAsYUFBYUUsTUFBTUssUUFBUTtRQUNyQ0osS0FBS0E7UUFDSixHQUFHRCxLQUFLO2tCQUVSRiwwQkFDQzs7OEJBQ0Usc0JBQUNRO29CQUFJVixXQUFVO29CQUFrQ1csT0FBTTtvQkFBNkJDLE1BQUs7b0JBQU9DLFNBQVE7O3NDQUN0RyxxQkFBQ0M7NEJBQU9kLFdBQVU7NEJBQWFlLElBQUc7NEJBQUtDLElBQUc7NEJBQUtDLEdBQUU7NEJBQUtDLFFBQU87NEJBQWVDLGFBQVk7O3NDQUN4RixxQkFBQ0M7NEJBQUtwQixXQUFVOzRCQUFhWSxNQUFLOzRCQUFlUyxHQUFFOzs7O2dCQUVwRGxCOzthQUdIQTs7QUFJUjtBQUVGM0IsT0FBTzhDLFdBQVcsR0FBRyJ9