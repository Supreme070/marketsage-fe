{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/__tests__/e2e/test-runner.ts"],"sourcesContent":["\n\nimport { execSync } from 'child_process';\nimport { DatabaseSeeder } from './database-seeder';\n\n/**\n * E2E Test Runner\n * Coordinates test execution, database setup, and cleanup\n */\n\nclass E2ETestRunner {\n  private seeder: DatabaseSeeder;\n\n  constructor() {\n    this.seeder = new DatabaseSeeder();\n  }\n\n  async runTests() {\n    console.log('🚀 Starting MarketSage E2E Test Suite...\\n');\n\n    try {\n      // Step 1: Environment checks\n      await this.checkEnvironment();\n\n      // Step 2: Database setup\n      await this.setupDatabase();\n\n      // Step 3: Start application\n      await this.startApplication();\n\n      // Step 4: Run tests\n      await this.executeTests();\n\n      console.log('\\n✅ All E2E tests completed successfully!');\n\n    } catch (error) {\n      console.error('\\n❌ E2E tests failed:', error);\n      process.exit(1);\n    } finally {\n      // Cleanup\n      await this.cleanup();\n    }\n  }\n\n  private async checkEnvironment() {\n    console.log('🔍 Checking environment...');\n\n    // Check if required environment variables are set\n    const requiredEnvVars = [\n      'DATABASE_URL',\n      'NEXTAUTH_SECRET',\n      'NEXTAUTH_URL'\n    ];\n\n    for (const envVar of requiredEnvVars) {\n      if (!process.env[envVar]) {\n        throw new Error(`Missing required environment variable: ${envVar}`);\n      }\n    }\n\n    // Check if application is not already running\n    try {\n      const response = await fetch('http://localhost:3000');\n      if (response.ok) {\n        console.log('⚠️  Application already running on port 3000');\n      }\n    } catch {\n      // Application not running, which is expected\n    }\n\n    console.log('✅ Environment check passed');\n  }\n\n  private async setupDatabase() {\n    console.log('🗄️  Setting up test database...');\n\n    try {\n      // Run database migrations\n      execSync('npm run db:migrate', { stdio: 'inherit' });\n\n      // Seed database with test data\n      await this.seeder.seedAll();\n\n      console.log('✅ Database setup completed');\n    } catch (error) {\n      throw new Error(`Database setup failed: ${error}`);\n    }\n  }\n\n  private async startApplication() {\n    console.log('🖥️  Starting application...');\n\n    // Start the application in background\n    const appProcess = execSync('npm run build', { stdio: 'inherit' });\n\n    // Wait for application to be ready\n    let retries = 30;\n    while (retries > 0) {\n      try {\n        const response = await fetch('http://localhost:3000');\n        if (response.ok) {\n          console.log('✅ Application started successfully');\n          return;\n        }\n      } catch {\n        // Still starting up\n      }\n\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      retries--;\n    }\n\n    throw new Error('Application failed to start within 60 seconds');\n  }\n\n  private async executeTests() {\n    console.log('🧪 Executing E2E tests...');\n\n    const testSuites = [\n      'auth-dashboard.test.ts',\n      'campaign-management.test.ts',\n      'contact-management.test.ts',\n      'workflow-automation.test.ts',\n      'analytics-leadpulse.test.ts',\n      'mcp-integration.test.ts',\n      'performance-cross-browser.test.ts'\n    ];\n\n    // Run tests based on command line arguments\n    const args = process.argv.slice(2);\n    const testPattern = args.includes('--test') ? args[args.indexOf('--test') + 1] : undefined;\n    const browser = args.includes('--browser') ? args[args.indexOf('--browser') + 1] : 'chromium';\n    const headed = args.includes('--headed');\n    const debug = args.includes('--debug');\n\n    let playwrightCmd = 'npx playwright test';\n    \n    if (testPattern) {\n      playwrightCmd += ` --grep \"${testPattern}\"`;\n    }\n    \n    playwrightCmd += ` --project=${browser}`;\n    \n    if (headed) {\n      playwrightCmd += ' --headed';\n    }\n    \n    if (debug) {\n      playwrightCmd += ' --debug';\n    }\n\n    // Add timeout for CI environments\n    if (process.env.CI) {\n      playwrightCmd += ' --timeout=60000';\n    }\n\n    try {\n      execSync(playwrightCmd, { stdio: 'inherit' });\n      console.log('✅ E2E tests passed');\n    } catch (error) {\n      throw new Error(`E2E tests failed: ${error}`);\n    }\n  }\n\n  private async cleanup() {\n    console.log('🧹 Cleaning up...');\n\n    try {\n      // Clean up test database\n      await this.seeder.cleanup();\n\n      // Stop application if we started it\n      execSync('pkill -f \"next start\" || true', { stdio: 'ignore' });\n\n      console.log('✅ Cleanup completed');\n    } catch (error) {\n      console.error('⚠️  Cleanup warning:', error);\n    }\n  }\n}\n\n// Command line interface\nif (require.main === module) {\n  const runner = new E2ETestRunner();\n  \n  // Handle process termination\n  process.on('SIGINT', async () => {\n    console.log('\\n⚠️  Test run interrupted');\n    await runner.cleanup();\n    process.exit(0);\n  });\n\n  process.on('SIGTERM', async () => {\n    console.log('\\n⚠️  Test run terminated');\n    await runner.cleanup();\n    process.exit(0);\n  });\n\n  // Run tests\n  runner.runTests().catch((error) => {\n    console.error('Fatal error:', error);\n    process.exit(1);\n  });\n}\n\nexport { E2ETestRunner };"],"names":["E2ETestRunner","constructor","seeder","DatabaseSeeder","runTests","console","log","checkEnvironment","setupDatabase","startApplication","executeTests","error","process","exit","cleanup","requiredEnvVars","envVar","env","Error","response","fetch","ok","execSync","stdio","seedAll","appProcess","retries","Promise","resolve","setTimeout","testSuites","args","argv","slice","testPattern","includes","indexOf","undefined","browser","headed","debug","playwrightCmd","CI","require","main","module","runner","on","catch"],"mappings":"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"}