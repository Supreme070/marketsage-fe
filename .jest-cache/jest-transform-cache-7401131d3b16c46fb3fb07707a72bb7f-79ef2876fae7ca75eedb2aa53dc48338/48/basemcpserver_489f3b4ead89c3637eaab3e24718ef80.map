{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/mcp/servers/base-mcp-server.ts"],"sourcesContent":["/**\n * Base MCP Server for MarketSage\n * \n * This class provides the foundation for all MCP servers with common functionality\n * including authentication, rate limiting, error handling, and fallback mechanisms.\n */\n\nimport { Server } from '@modelcontextprotocol/sdk/server/index';\nimport { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio';\nimport { \n  CallToolRequestSchema,\n  ErrorCode,\n  ListResourcesRequestSchema,\n  ListToolsRequestSchema,\n  McpError,\n  ReadResourceRequestSchema,\n} from '@modelcontextprotocol/sdk/types';\n\nimport { \n  type MCPAuthContext, \n  type MCPAuthResult, \n  MCPError, \n  type MCPServerResponse,\n  MCPAuthenticationError,\n  MCPAuthorizationError,\n  MCPRateLimitError,\n  MCPValidationError\n} from '../types/mcp-types';\n\nimport { type MCPServerConfig } from '../config/mcp-config';\n\nimport { getServerSession } from 'next-auth/next';\nimport { authOptions } from '../../lib/auth';\nimport { prisma } from '../../lib/db/prisma';\nimport { redisCache, CACHE_KEYS, CACHE_TTL } from '../../lib/cache/redis-client';\nimport { enterpriseAuditLogger, type AuditAction, type ResourceType } from '../../lib/audit/enterprise-audit-logger';\nimport jwt from 'jsonwebtoken';\nimport { z } from 'zod';\n\nexport abstract class BaseMCPServer {\n  protected server: Server;\n  protected config: MCPServerConfig;\n\n  // Common validation schemas for MCP operations\n  protected static readonly BaseQuerySchema = z.object({\n    organizationId: z.string().uuid().optional(),\n    limit: z.number().min(1).max(100).default(10),\n    offset: z.number().min(0).default(0),\n    dateFrom: z.string().datetime().optional(),\n    dateTo: z.string().datetime().optional(),\n    search: z.string().max(100).optional()\n  });\n\n  protected static readonly ResourceUriSchema = z.object({\n    uri: z.string().url('Invalid resource URI format')\n  });\n\n  protected static readonly ToolCallSchema = z.object({\n    name: z.string().min(1, 'Tool name is required'),\n    arguments: z.record(z.any()).optional()\n  });\n\n  constructor(config: MCPServerConfig) {\n    this.config = config;\n    this.server = new Server(\n      {\n        name: config.name,\n        version: config.version,\n      },\n      {\n        capabilities: {\n          resources: {},\n          tools: {},\n        },\n      }\n    );\n\n    this.setupBaseHandlers();\n  }\n\n  /**\n   * Setup base handlers for all MCP servers\n   */\n  private setupBaseHandlers(): void {\n    // List resources handler\n    this.server.setRequestHandler(ListResourcesRequestSchema, async (request) => {\n      try {\n        const authResult = await this.authenticate(request);\n        if (!authResult.success) {\n          throw new MCPAuthenticationError(authResult.error || 'Authentication failed');\n        }\n\n        await this.checkRateLimit(authResult.context!.userId);\n        \n        const resources = await this.listResources(authResult.context!);\n        return { resources };\n      } catch (error) {\n        throw this.handleError(error);\n      }\n    });\n\n    // Read resource handler\n    this.server.setRequestHandler(ReadResourceRequestSchema, async (request) => {\n      try {\n        const authResult = await this.authenticate(request);\n        if (!authResult.success) {\n          throw new MCPAuthenticationError(authResult.error || 'Authentication failed');\n        }\n\n        await this.checkRateLimit(authResult.context!.userId);\n        \n        const resourceContent = await this.readResource(request.params.uri, authResult.context!);\n        return { contents: [resourceContent] };\n      } catch (error) {\n        throw this.handleError(error);\n      }\n    });\n\n    // List tools handler\n    this.server.setRequestHandler(ListToolsRequestSchema, async (request) => {\n      try {\n        const authResult = await this.authenticate(request);\n        if (!authResult.success) {\n          throw new MCPAuthenticationError(authResult.error || 'Authentication failed');\n        }\n\n        await this.checkRateLimit(authResult.context!.userId);\n        \n        const tools = await this.listTools(authResult.context!);\n        return { tools };\n      } catch (error) {\n        throw this.handleError(error);\n      }\n    });\n\n    // Call tool handler\n    this.server.setRequestHandler(CallToolRequestSchema, async (request) => {\n      try {\n        const authResult = await this.authenticate(request);\n        if (!authResult.success) {\n          throw new MCPAuthenticationError(authResult.error || 'Authentication failed');\n        }\n\n        await this.checkRateLimit(authResult.context!.userId);\n        \n        const result = await this.callTool(\n          request.params.name,\n          request.params.arguments || {},\n          authResult.context!\n        );\n        \n        return result;\n      } catch (error) {\n        throw this.handleError(error);\n      }\n    });\n  }\n\n  /**\n   * Authenticate the request\n   */\n  private async authenticate(request: any): Promise<MCPAuthResult> {\n    if (!this.config.authentication.required) {\n      return { success: true };\n    }\n\n    try {\n      // Extract session from request headers or context\n      const sessionToken = request.meta?.sessionToken || request.headers?.authorization;\n      \n      if (!sessionToken) {\n        return { success: false, error: 'No authentication token provided' };\n      }\n\n      // Validate session using NextAuth\n      const session = await this.validateSession(sessionToken);\n      \n      if (!session || !session.user) {\n        return { success: false, error: 'Invalid session' };\n      }\n\n      // Create auth context\n      const authContext: MCPAuthContext = {\n        userId: session.user.id,\n        organizationId: session.user.organizationId,\n        role: session.user.role,\n        permissions: this.getRolePermissions(session.user.role),\n        sessionId: session.user.sessionId\n      };\n\n      // Log successful authentication\n      await this.logMCPAuthEvent('success', session.user.id, sessionToken);\n      \n      return { success: true, context: authContext };\n    } catch (error) {\n      // Log failed authentication\n      await this.logMCPAuthEvent('failure', undefined, sessionToken, error instanceof Error ? error.message : 'Unknown error');\n      \n      return { success: false, error: 'Authentication failed' };\n    }\n  }\n\n  /**\n   * Validate session token using NextAuth\n   */\n  private async validateSession(token: string): Promise<any> {\n    try {\n      // Handle different token formats\n      let actualToken = token;\n      \n      // Remove 'Bearer ' prefix if present\n      if (token.startsWith('Bearer ')) {\n        actualToken = token.substring(7);\n      }\n      \n      // For NextAuth JWT, we need to verify the token and extract user info\n      // Since MCP servers run outside HTTP context, we need to manually verify JWT\n      const nextAuthSecret = process.env.NEXTAUTH_SECRET;\n      \n      if (!nextAuthSecret) {\n        console.error('NEXTAUTH_SECRET not configured for MCP session validation');\n        return null;\n      }\n\n      // Verify and decode the JWT token\n      const decoded = jwt.verify(actualToken, nextAuthSecret) as any;\n      \n      if (!decoded || !decoded.id) {\n        return null;\n      }\n\n      // Get user details from database to ensure they still exist and get latest info\n      const user = await prisma.user.findUnique({\n        where: { id: decoded.id },\n        include: {\n          organization: {\n            select: { id: true, name: true }\n          }\n        }\n      });\n\n      if (!user || !user.isActive) {\n        return null;\n      }\n\n      // Update last login timestamp\n      await prisma.user.update({\n        where: { id: user.id },\n        data: { lastLogin: new Date() }\n      });\n\n      return {\n        user: {\n          id: user.id,\n          email: user.email,\n          name: user.name,\n          role: user.role,\n          organizationId: user.organizationId,\n          organization: user.organization,\n          sessionId: decoded.jti || `session_${Date.now()}`, // Use JWT ID or generate one\n          isActive: user.isActive,\n          lastLogin: new Date()\n        }\n      };\n    } catch (error) {\n      console.error('Session validation error:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Get comprehensive role-based permissions aligned with existing User model\n   */\n  private getRolePermissions(role: string): string[] {\n    const permissions: Record<string, string[]> = {\n      USER: [\n        'read:own:contacts',\n        'read:own:campaigns', \n        'read:own:analytics',\n        'read:own:workflows',\n        'read:own:leadpulse',\n        'write:own:contacts',\n        'write:own:campaigns'\n      ],\n      ADMIN: [\n        'read:own:contacts',\n        'read:own:campaigns', \n        'read:own:analytics',\n        'read:own:workflows',\n        'read:own:leadpulse',\n        'write:own:contacts',\n        'write:own:campaigns',\n        'write:own:workflows',\n        'read:org:contacts',\n        'read:org:campaigns',\n        'read:org:analytics',\n        'read:org:leadpulse',\n        'write:org:contacts',\n        'write:org:campaigns',\n        'admin:org:users',\n        'admin:org:settings'\n      ],\n      IT_ADMIN: [\n        'read:own:contacts',\n        'read:own:campaigns', \n        'read:own:analytics',\n        'read:own:workflows',\n        'read:own:leadpulse',\n        'write:own:contacts',\n        'write:own:campaigns',\n        'write:own:workflows',\n        'read:org:contacts',\n        'read:org:campaigns',\n        'read:org:analytics',\n        'read:org:leadpulse',\n        'read:org:workflows',\n        'write:org:contacts',\n        'write:org:campaigns',\n        'write:org:workflows',\n        'admin:org:users',\n        'admin:org:settings',\n        'admin:org:integrations',\n        'admin:org:security',\n        'read:org:monitoring',\n        'write:org:monitoring'\n      ],\n      SUPER_ADMIN: ['*'], // All permissions\n      AI_AGENT: [\n        'read:org:contacts',\n        'read:org:campaigns',\n        'read:org:analytics',\n        'read:org:leadpulse',\n        'read:org:workflows',\n        'write:org:analytics', // AI can update analytics\n        'write:org:predictions', // AI can write predictions\n        'admin:ai:tasks' // AI-specific permissions\n      ]\n    };\n\n    return permissions[role] || ['read:own:basic'];\n  }\n\n  /**\n   * Check if user has specific permission for a resource\n   */\n  protected hasPermission(authContext: MCPAuthContext, permission: string, resourceOrganizationId?: string): boolean {\n    // SUPER_ADMIN has all permissions\n    if (authContext.permissions.includes('*')) {\n      return true;\n    }\n\n    // Check exact permission match\n    if (authContext.permissions.includes(permission)) {\n      return true;\n    }\n\n    // Handle organization-scoped permissions\n    if (permission.includes(':org:') && resourceOrganizationId) {\n      // User must be in the same organization to access org-scoped resources\n      return authContext.organizationId === resourceOrganizationId;\n    }\n\n    // Handle own-scoped permissions\n    if (permission.includes(':own:')) {\n      return true; // If user has :own: permission, they can access their own resources\n    }\n\n    return false;\n  }\n\n  /**\n   * Validate user can access organization data\n   */\n  protected async validateOrganizationAccess(authContext: MCPAuthContext, targetOrganizationId: string): Promise<boolean> {\n    // SUPER_ADMIN can access any organization\n    if (authContext.role === 'SUPER_ADMIN') {\n      return true;\n    }\n\n    // Users can only access their own organization\n    if (authContext.organizationId !== targetOrganizationId) {\n      return false;\n    }\n\n    // Verify organization still exists and user is still a member\n    try {\n      const orgUser = await prisma.user.findFirst({\n        where: {\n          id: authContext.userId,\n          organizationId: targetOrganizationId,\n          isActive: true\n        },\n        select: { id: true }\n      });\n\n      return !!orgUser;\n    } catch (error) {\n      console.error('Organization access validation error:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Filter data based on user permissions and organization access\n   */\n  protected filterDataByPermissions<T extends { organizationId?: string; createdById?: string }>(\n    data: T[], \n    authContext: MCPAuthContext,\n    permission: string\n  ): T[] {\n    // SUPER_ADMIN sees everything\n    if (authContext.permissions.includes('*')) {\n      return data;\n    }\n\n    return data.filter(item => {\n      // Check organization access\n      if (item.organizationId) {\n        if (permission.includes(':org:')) {\n          return this.hasPermission(authContext, permission, item.organizationId);\n        }\n        if (permission.includes(':own:')) {\n          return item.createdById === authContext.userId && \n                 item.organizationId === authContext.organizationId;\n        }\n      }\n\n      // Default to own data only\n      return item.createdById === authContext.userId;\n    });\n  }\n\n  /**\n   * Validate input data using Zod schema with comprehensive error handling\n   */\n  protected validateInput<T>(schema: z.ZodSchema<T>, data: unknown, context: string = 'input'): T {\n    try {\n      return schema.parse(data);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        const formattedErrors = error.errors.map(err => ({\n          path: err.path.join('.'),\n          message: err.message,\n          code: err.code\n        }));\n\n        throw new MCPValidationError(\n          `Invalid ${context}: ${formattedErrors.map(e => `${e.path}: ${e.message}`).join(', ')}`,\n          formattedErrors\n        );\n      }\n      throw new MCPValidationError(`Validation failed for ${context}: ${error}`);\n    }\n  }\n\n  /**\n   * Validate and sanitize query parameters with defaults\n   */\n  protected validateQuery<T extends Record<string, any>>(\n    schema: z.ZodSchema<T>,\n    params: Record<string, any>,\n    authContext: MCPAuthContext\n  ): T {\n    // Apply organization context if not provided and user is not SUPER_ADMIN\n    if (!params.organizationId && authContext.role !== 'SUPER_ADMIN') {\n      params.organizationId = authContext.organizationId;\n    }\n\n    // Validate required permissions for organization access\n    if (params.organizationId && params.organizationId !== authContext.organizationId) {\n      if (!this.hasPermission(authContext, 'read:org:*', params.organizationId)) {\n        throw new MCPAuthorizationError(\n          `Insufficient permissions to access organization ${params.organizationId}`\n        );\n      }\n    }\n\n    return this.validateInput(schema, params, 'query parameters');\n  }\n\n  /**\n   * Validate resource URI with security checks\n   */\n  protected validateResourceUri(uri: string, authContext: MCPAuthContext): string {\n    const validated = this.validateInput(BaseMCPServer.ResourceUriSchema, { uri }, 'resource URI');\n    \n    // Extract organization from URI path if present\n    const orgMatch = uri.match(/\\/organizations\\/([^\\/]+)/);\n    if (orgMatch) {\n      const orgId = orgMatch[1];\n      if (!this.hasPermission(authContext, 'read:org:*', orgId)) {\n        throw new MCPAuthorizationError(\n          `Insufficient permissions to access organization resources for ${orgId}`\n        );\n      }\n    }\n\n    // Additional security checks for sensitive resources\n    const sensitivePatterns = [\n      '/admin/',\n      '/system/',\n      '/internal/',\n      '/secret/',\n      '/config/',\n      '/env'\n    ];\n\n    if (sensitivePatterns.some(pattern => uri.includes(pattern))) {\n      if (!this.hasPermission(authContext, 'admin:org:*')) {\n        throw new MCPAuthorizationError(\n          'Insufficient permissions to access sensitive resources'\n        );\n      }\n    }\n\n    return validated.uri;\n  }\n\n  /**\n   * Validate tool call arguments with permission checks\n   */\n  protected validateToolCall(name: string, args: any, authContext: MCPAuthContext): { name: string; args: any } {\n    const validated = this.validateInput(BaseMCPServer.ToolCallSchema, { name, arguments: args }, 'tool call');\n    \n    // Check tool-specific permissions\n    const toolPermissions: Record<string, string[]> = {\n      'create_campaign': ['write:org:campaigns'],\n      'delete_contact': ['write:org:contacts'],\n      'export_data': ['admin:org:data'],\n      'send_message': ['write:org:messaging'],\n      'update_settings': ['admin:org:settings'],\n      'view_analytics': ['read:org:analytics'],\n      'manage_users': ['admin:org:users']\n    };\n\n    const requiredPermissions = toolPermissions[name] || ['read:own:basic'];\n    \n    for (const permission of requiredPermissions) {\n      if (!this.hasPermission(authContext, permission)) {\n        throw new MCPAuthorizationError(\n          `Insufficient permissions to execute tool '${name}'. Required: ${requiredPermissions.join(', ')}`\n        );\n      }\n    }\n\n    return { name: validated.name, args: validated.arguments || {} };\n  }\n\n  /**\n   * Sanitize data for output to prevent information leakage\n   */\n  protected sanitizeOutput<T extends Record<string, any>>(\n    data: T, \n    authContext: MCPAuthContext,\n    sensitiveFields: string[] = ['password', 'secret', 'token', 'key', 'hash']\n  ): T {\n    if (!data || typeof data !== 'object') {\n      return data;\n    }\n\n    const sanitized = { ...data };\n\n    // Remove sensitive fields for non-admin users\n    if (authContext.role !== 'SUPER_ADMIN') {\n      for (const field of sensitiveFields) {\n        if (field in sanitized) {\n          delete sanitized[field];\n        }\n      }\n    }\n\n    // Recursively sanitize nested objects\n    for (const key in sanitized) {\n      if (sanitized[key] && typeof sanitized[key] === 'object') {\n        if (Array.isArray(sanitized[key])) {\n          sanitized[key] = sanitized[key].map((item: any) => \n            typeof item === 'object' ? this.sanitizeOutput(item, authContext, sensitiveFields) : item\n          );\n        } else {\n          sanitized[key] = this.sanitizeOutput(sanitized[key], authContext, sensitiveFields);\n        }\n      }\n    }\n\n    return sanitized;\n  }\n\n  /**\n   * Validate date range with business rules\n   */\n  protected validateDateRange(dateFrom?: string, dateTo?: string): { dateFrom?: Date; dateTo?: Date } {\n    const result: { dateFrom?: Date; dateTo?: Date } = {};\n\n    if (dateFrom) {\n      result.dateFrom = new Date(dateFrom);\n      if (isNaN(result.dateFrom.getTime())) {\n        throw new MCPValidationError('Invalid dateFrom format. Use ISO 8601 format.');\n      }\n    }\n\n    if (dateTo) {\n      result.dateTo = new Date(dateTo);\n      if (isNaN(result.dateTo.getTime())) {\n        throw new MCPValidationError('Invalid dateTo format. Use ISO 8601 format.');\n      }\n    }\n\n    // Validate date range logic\n    if (result.dateFrom && result.dateTo) {\n      if (result.dateFrom > result.dateTo) {\n        throw new MCPValidationError('dateFrom cannot be later than dateTo');\n      }\n\n      // Limit date range to prevent excessive queries (max 1 year)\n      const maxRange = 365 * 24 * 60 * 60 * 1000; // 1 year in milliseconds\n      if (result.dateTo.getTime() - result.dateFrom.getTime() > maxRange) {\n        throw new MCPValidationError('Date range cannot exceed 1 year');\n      }\n    }\n\n    // Prevent queries too far in the future\n    const now = new Date();\n    const maxFuture = new Date(now.getTime() + 30 * 24 * 60 * 60 * 1000); // 30 days from now\n\n    if (result.dateFrom && result.dateFrom > maxFuture) {\n      throw new MCPValidationError('dateFrom cannot be more than 30 days in the future');\n    }\n\n    if (result.dateTo && result.dateTo > maxFuture) {\n      throw new MCPValidationError('dateTo cannot be more than 30 days in the future');\n    }\n\n    return result;\n  }\n\n  /**\n   * Check rate limits using Redis for persistent, scalable rate limiting\n   */\n  private async checkRateLimit(userId: string): Promise<void> {\n    try {\n      const rateLimitKey = CACHE_KEYS.API_RATE_LIMIT(`${userId}:${this.config.name}`);\n      const windowSeconds = Math.ceil(this.config.rateLimit.windowMs / 1000);\n      \n      // Use Redis to increment counter and set expiration atomically\n      const currentCount = await redisCache.increment(rateLimitKey, 1);\n      \n      if (currentCount === null) {\n        // Redis not available, fall back to allowing the request\n        console.warn('Redis unavailable for rate limiting - allowing request');\n        return;\n      }\n\n      // If this is the first request in the window, set the expiration\n      if (currentCount === 1) {\n        await redisCache.expire(rateLimitKey, windowSeconds);\n      }\n\n      // Check if rate limit exceeded\n      if (currentCount > this.config.rateLimit.maxRequests) {\n        // Get remaining time in the window\n        const ttlKey = `${rateLimitKey}:ttl`;\n        let remainingTime = windowSeconds;\n        \n        try {\n          // Try to get more accurate remaining time\n          const redisClient = (redisCache as any).client;\n          if (redisClient && await redisClient.exists(rateLimitKey)) {\n            remainingTime = await redisClient.ttl(rateLimitKey) || windowSeconds;\n          }\n        } catch (ttlError) {\n          // Use default window time if TTL check fails\n          console.warn('Could not get TTL for rate limit key:', ttlError);\n        }\n\n        // Audit log rate limit violation\n        try {\n          const authContext = await this.getAuthContextForUserId(userId);\n          if (authContext) {\n            await this.logMCPRateLimitEvent(authContext, currentCount, this.config.rateLimit.maxRequests, 'blocked');\n          }\n        } catch (auditError) {\n          console.error('Failed to audit rate limit violation:', auditError);\n        }\n\n        throw new MCPRateLimitError(\n          `Rate limit exceeded. Maximum ${this.config.rateLimit.maxRequests} requests per ${windowSeconds}s. Try again in ${remainingTime} seconds.`\n        );\n      }\n\n      // Log rate limiting activity for monitoring\n      if (currentCount > this.config.rateLimit.maxRequests * 0.8) {\n        console.warn(`Rate limit warning for user ${userId} on ${this.config.name}: ${currentCount}/${this.config.rateLimit.maxRequests} requests`);\n        \n        // Audit log warning when approaching rate limit\n        try {\n          const authContext = await this.getAuthContextForUserId(userId);\n          if (authContext) {\n            await this.logMCPRateLimitEvent(authContext, currentCount, this.config.rateLimit.maxRequests, 'warning');\n          }\n        } catch (auditError) {\n          console.error('Failed to audit rate limit warning:', auditError);\n        }\n      }\n\n    } catch (error) {\n      if (error instanceof MCPRateLimitError) {\n        throw error; // Re-throw rate limit errors\n      }\n      \n      // For other errors (Redis connection issues), log and allow the request\n      console.error('Rate limiting error - allowing request:', error);\n    }\n  }\n\n  /**\n   * Get current rate limiting status for a user (for monitoring/debugging)\n   */\n  protected async getRateLimitStatus(userId: string): Promise<{\n    current: number;\n    limit: number;\n    windowSeconds: number;\n    remainingTime: number;\n    percentageUsed: number;\n  } | null> {\n    try {\n      const rateLimitKey = CACHE_KEYS.API_RATE_LIMIT(`${userId}:${this.config.name}`);\n      const windowSeconds = Math.ceil(this.config.rateLimit.windowMs / 1000);\n      \n      // Get current count\n      const currentCountStr = await redisCache.get<string>(rateLimitKey);\n      const currentCount = currentCountStr ? parseInt(currentCountStr, 10) : 0;\n      \n      // Get remaining time\n      let remainingTime = 0;\n      try {\n        const redisClient = (redisCache as any).client;\n        if (redisClient && await redisClient.exists(rateLimitKey)) {\n          remainingTime = await redisClient.ttl(rateLimitKey) || 0;\n        }\n      } catch (ttlError) {\n        console.warn('Could not get TTL for rate limit status:', ttlError);\n      }\n\n      return {\n        current: currentCount,\n        limit: this.config.rateLimit.maxRequests,\n        windowSeconds,\n        remainingTime,\n        percentageUsed: (currentCount / this.config.rateLimit.maxRequests) * 100\n      };\n    } catch (error) {\n      console.error('Error getting rate limit status:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Log MCP authentication events for security monitoring\n   */\n  protected async logMCPAuthEvent(\n    outcome: 'success' | 'failure',\n    userId?: string,\n    sessionToken?: string,\n    errorMessage?: string,\n    ipAddress?: string,\n    userAgent?: string\n  ): Promise<void> {\n    try {\n      const actorIdentifier = userId || sessionToken?.substring(0, 10) || 'unknown';\n      \n      if (outcome === 'failure') {\n        await enterpriseAuditLogger.logSecurityEvent(\n          'FAILED_LOGIN',\n          actorIdentifier,\n          {\n            riskLevel: 'medium',\n            description: `MCP authentication failed: ${errorMessage || 'Invalid credentials'}`,\n            ipAddress,\n            userAgent,\n            resourceType: 'API_KEY',\n            metadata: {\n              serverName: this.config.name,\n              authMethod: 'session',\n              timestamp: new Date().toISOString()\n            }\n          }\n        );\n      } else {\n        // Log successful authentication\n        await enterpriseAuditLogger.logEvent({\n          eventType: 'AUTHENTICATION',\n          actor: {\n            id: userId || 'mcp-user',\n            type: 'user',\n            identifier: actorIdentifier,\n            ipAddress,\n            userAgent\n          },\n          resource: {\n            type: 'API_KEY',\n            id: this.config.name,\n            organizationId: await this.getOrganizationIdFromUser(userId)\n          },\n          action: 'LOGIN',\n          outcome: 'success',\n          details: {\n            metadata: {\n              serverName: this.config.name,\n              authMethod: 'session'\n            },\n            riskLevel: 'low'\n          },\n          compliance: {\n            dataClassification: 'internal',\n            retentionDays: 365,\n            gdprRelevant: false,\n            hipaaRelevant: false,\n            pciRelevant: false\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Failed to log MCP auth event:', error);\n    }\n  }\n\n  /**\n   * Log MCP resource access for compliance and monitoring\n   */\n  protected async logMCPResourceAccess(\n    authContext: MCPAuthContext,\n    resourceUri: string,\n    action: 'LIST' | 'READ' | 'WRITE',\n    outcome: 'success' | 'failure' | 'partial',\n    details?: {\n      duration?: number;\n      errorMessage?: string;\n      dataSize?: number;\n      riskLevel?: 'low' | 'medium' | 'high' | 'critical';\n    }\n  ): Promise<void> {\n    try {\n      const resourceType = this.mapResourceUriToType(resourceUri);\n      const auditAction = this.mapMCPActionToAuditAction(action);\n      \n      await enterpriseAuditLogger.logEvent({\n        eventType: 'DATA_ACCESS',\n        actor: {\n          id: authContext.userId,\n          type: 'user',\n          identifier: authContext.userId,\n          sessionId: authContext.sessionId\n        },\n        resource: {\n          type: resourceType,\n          id: resourceUri,\n          organizationId: authContext.organizationId\n        },\n        action: auditAction,\n        outcome,\n        details: {\n          duration: details?.duration,\n          errorMessage: details?.errorMessage,\n          metadata: {\n            serverName: this.config.name,\n            resourceUri,\n            dataSize: details?.dataSize,\n            mcpAction: action\n          },\n          riskLevel: details?.riskLevel || this.calculateResourceRiskLevel(resourceType, action)\n        },\n        compliance: {\n          dataClassification: this.classifyMCPResource(resourceType),\n          retentionDays: this.getMCPRetentionPeriod(resourceType),\n          gdprRelevant: this.isGDPRRelevantResource(resourceType),\n          hipaaRelevant: false,\n          pciRelevant: false\n        }\n      });\n    } catch (error) {\n      console.error('Failed to log MCP resource access:', error);\n    }\n  }\n\n  /**\n   * Log MCP tool execution for security and performance monitoring\n   */\n  protected async logMCPToolExecution(\n    authContext: MCPAuthContext,\n    toolName: string,\n    args: any,\n    outcome: 'success' | 'failure' | 'partial',\n    details?: {\n      duration?: number;\n      errorMessage?: string;\n      outputSize?: number;\n      riskLevel?: 'low' | 'medium' | 'high' | 'critical';\n    }\n  ): Promise<void> {\n    try {\n      const riskLevel = details?.riskLevel || this.calculateToolRiskLevel(toolName, args);\n      \n      await enterpriseAuditLogger.logEvent({\n        eventType: 'API_ACCESS',\n        actor: {\n          id: authContext.userId,\n          type: 'user',\n          identifier: authContext.userId,\n          sessionId: authContext.sessionId\n        },\n        resource: {\n          type: 'API_KEY',\n          id: `mcp-tool-${toolName}`,\n          organizationId: authContext.organizationId\n        },\n        action: 'CREATE', // Tool execution is creating/processing\n        outcome,\n        details: {\n          duration: details?.duration,\n          errorMessage: details?.errorMessage,\n          metadata: {\n            serverName: this.config.name,\n            toolName,\n            argumentsHash: this.hashArguments(args),\n            outputSize: details?.outputSize,\n            userRole: authContext.role\n          },\n          riskLevel\n        },\n        compliance: {\n          dataClassification: riskLevel === 'critical' ? 'restricted' : 'internal',\n          retentionDays: 365,\n          gdprRelevant: this.toolProcessesPersonalData(toolName),\n          hipaaRelevant: false,\n          pciRelevant: false\n        }\n      });\n    } catch (error) {\n      console.error('Failed to log MCP tool execution:', error);\n    }\n  }\n\n  /**\n   * Log MCP rate limiting events for security monitoring\n   */\n  protected async logMCPRateLimitEvent(\n    authContext: MCPAuthContext,\n    currentCount: number,\n    limit: number,\n    action: 'warning' | 'blocked'\n  ): Promise<void> {\n    try {\n      if (action === 'blocked') {\n        await enterpriseAuditLogger.logSecurityEvent(\n          'SUSPICIOUS_ACTIVITY',\n          authContext.userId,\n          {\n            riskLevel: 'medium',\n            description: `MCP rate limit exceeded: ${currentCount}/${limit} requests`,\n            resourceType: 'API_KEY',\n            resourceId: this.config.name,\n            metadata: {\n              serverName: this.config.name,\n              currentCount,\n              limit,\n              userRole: authContext.role,\n              organizationId: authContext.organizationId\n            }\n          }\n        );\n      } else {\n        // Warning: approaching rate limit\n        await enterpriseAuditLogger.logEvent({\n          eventType: 'SYSTEM_ADMIN',\n          actor: {\n            id: authContext.userId,\n            type: 'user',\n            identifier: authContext.userId\n          },\n          resource: {\n            type: 'API_KEY',\n            id: this.config.name,\n            organizationId: authContext.organizationId\n          },\n          action: 'READ',\n          outcome: 'success',\n          details: {\n            metadata: {\n              event: 'rate_limit_warning',\n              currentCount,\n              limit,\n              percentageUsed: (currentCount / limit) * 100\n            },\n            riskLevel: 'low'\n          },\n          compliance: {\n            dataClassification: 'internal',\n            retentionDays: 90,\n            gdprRelevant: false,\n            hipaaRelevant: false,\n            pciRelevant: false\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Failed to log MCP rate limit event:', error);\n    }\n  }\n\n  /**\n   * Helper method to get organization ID from user ID\n   */\n  private async getOrganizationIdFromUser(userId?: string): Promise<string> {\n    if (!userId) return 'unknown';\n    \n    try {\n      const user = await prisma.user.findUnique({\n        where: { id: userId },\n        select: { organizationId: true }\n      });\n      return user?.organizationId || 'unknown';\n    } catch (error) {\n      console.error('Failed to get organization ID from user:', error);\n      return 'unknown';\n    }\n  }\n\n  /**\n   * Helper method to get auth context for a user ID (for audit logging)\n   */\n  private async getAuthContextForUserId(userId: string): Promise<MCPAuthContext | null> {\n    try {\n      const user = await prisma.user.findUnique({\n        where: { id: userId },\n        select: {\n          id: true,\n          role: true,\n          organizationId: true\n        }\n      });\n\n      if (!user) return null;\n\n      return {\n        userId: user.id,\n        organizationId: user.organizationId,\n        role: user.role as any,\n        permissions: this.getRolePermissions(user.role),\n        sessionId: `audit_${Date.now()}`\n      };\n    } catch (error) {\n      console.error('Failed to get auth context for user:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Map MCP resource URI to audit resource type\n   */\n  private mapResourceUriToType(resourceUri: string): ResourceType {\n    if (resourceUri.includes('/customers/') || resourceUri.includes('/contacts/')) {\n      return 'CONTACT';\n    }\n    if (resourceUri.includes('/campaigns/')) {\n      return 'CAMPAIGN';\n    }\n    if (resourceUri.includes('/workflows/')) {\n      return 'WORKFLOW';\n    }\n    if (resourceUri.includes('/organizations/')) {\n      return 'ORGANIZATION';\n    }\n    if (resourceUri.includes('/monitoring/') || resourceUri.includes('/metrics/')) {\n      return 'SYSTEM_SETTING';\n    }\n    return 'API_KEY'; // Default for unclassified resources\n  }\n\n  /**\n   * Map MCP action to audit action\n   */\n  private mapMCPActionToAuditAction(mcpAction: 'LIST' | 'READ' | 'WRITE'): AuditAction {\n    switch (mcpAction) {\n      case 'LIST':\n      case 'READ':\n        return 'READ';\n      case 'WRITE':\n        return 'UPDATE';\n      default:\n        return 'READ';\n    }\n  }\n\n  /**\n   * Calculate risk level for resource access\n   */\n  private calculateResourceRiskLevel(\n    resourceType: ResourceType,\n    action: 'LIST' | 'READ' | 'WRITE'\n  ): 'low' | 'medium' | 'high' | 'critical' {\n    const sensitiveResources = ['USER', 'CONTACT', 'ORGANIZATION'];\n    const highRiskActions = ['WRITE'];\n    \n    if (sensitiveResources.includes(resourceType) && highRiskActions.includes(action)) {\n      return 'high';\n    }\n    if (sensitiveResources.includes(resourceType)) {\n      return 'medium';\n    }\n    if (highRiskActions.includes(action)) {\n      return 'medium';\n    }\n    return 'low';\n  }\n\n  /**\n   * Calculate risk level for tool execution\n   */\n  private calculateToolRiskLevel(toolName: string, args: any): 'low' | 'medium' | 'high' | 'critical' {\n    const criticalTools = ['delete_contact', 'delete_campaign', 'export_all_data'];\n    const highRiskTools = ['send_message', 'create_campaign', 'update_settings'];\n    \n    if (criticalTools.includes(toolName)) {\n      return 'critical';\n    }\n    if (highRiskTools.includes(toolName)) {\n      return 'high';\n    }\n    if (toolName.includes('export') || toolName.includes('bulk')) {\n      return 'medium';\n    }\n    return 'low';\n  }\n\n  /**\n   * Classify MCP resource for compliance\n   */\n  private classifyMCPResource(resourceType: ResourceType): 'public' | 'internal' | 'confidential' | 'restricted' {\n    const restrictedTypes = ['USER', 'SYSTEM_SETTING', 'API_KEY'];\n    const confidentialTypes = ['CONTACT', 'ORGANIZATION'];\n    \n    if (restrictedTypes.includes(resourceType)) {\n      return 'restricted';\n    }\n    if (confidentialTypes.includes(resourceType)) {\n      return 'confidential';\n    }\n    return 'internal';\n  }\n\n  /**\n   * Get retention period for MCP resources\n   */\n  private getMCPRetentionPeriod(resourceType: ResourceType): number {\n    // MCP audit events generally have shorter retention than core business data\n    switch (resourceType) {\n      case 'USER':\n      case 'ORGANIZATION':\n        return 1095; // 3 years\n      case 'CONTACT':\n        return 730; // 2 years\n      case 'CAMPAIGN':\n      case 'WORKFLOW':\n        return 365; // 1 year\n      default:\n        return 365; // Default 1 year\n    }\n  }\n\n  /**\n   * Check if resource type is GDPR relevant\n   */\n  private isGDPRRelevantResource(resourceType: ResourceType): boolean {\n    return ['USER', 'CONTACT'].includes(resourceType);\n  }\n\n  /**\n   * Check if tool processes personal data\n   */\n  private toolProcessesPersonalData(toolName: string): boolean {\n    const personalDataTools = [\n      'get_customer_profile',\n      'update_contact',\n      'export_contacts',\n      'segment_customers'\n    ];\n    return personalDataTools.includes(toolName);\n  }\n\n  /**\n   * Hash arguments for logging without exposing sensitive data\n   */\n  private hashArguments(args: any): string {\n    try {\n      const argsString = JSON.stringify(args, Object.keys(args).sort());\n      const crypto = require('crypto');\n      return crypto.createHash('sha256').update(argsString).digest('hex').substring(0, 16);\n    } catch (error) {\n      return 'hash_error';\n    }\n  }\n\n  /**\n   * Handle errors consistently\n   */\n  private handleError(error: unknown): McpError {\n    if (error instanceof MCPAuthenticationError) {\n      return new McpError(ErrorCode.InvalidRequest, error.message);\n    }\n    \n    if (error instanceof MCPAuthorizationError) {\n      return new McpError(ErrorCode.InvalidRequest, error.message);\n    }\n    \n    if (error instanceof MCPRateLimitError) {\n      return new McpError(ErrorCode.InvalidRequest, error.message);\n    }\n    \n    if (error instanceof MCPValidationError) {\n      return new McpError(ErrorCode.InvalidParams, error.message);\n    }\n\n    // Log unexpected errors\n    console.error(`MCP Server Error in ${this.config.name}:`, error);\n    \n    return new McpError(\n      ErrorCode.InternalError,\n      'An internal server error occurred'\n    );\n  }\n\n  /**\n   * Create a fallback response when MCP fails\n   */\n  protected async createFallbackResponse<T>(\n    fallbackFunction: () => Promise<T>,\n    errorMessage: string\n  ): Promise<MCPServerResponse<T>> {\n    if (!this.config.fallback.enabled) {\n      return {\n        success: false,\n        error: {\n          code: 'FALLBACK_DISABLED',\n          message: errorMessage,\n          timestamp: new Date().toISOString()\n        }\n      };\n    }\n\n    try {\n      const data = await fallbackFunction();\n      return {\n        success: true,\n        data,\n        meta: { fallbackUsed: true }\n      };\n    } catch (fallbackError) {\n      return {\n        success: false,\n        error: {\n          code: 'FALLBACK_FAILED',\n          message: `Fallback failed: ${fallbackError}`,\n          timestamp: new Date().toISOString()\n        }\n      };\n    }\n  }\n\n  /**\n   * Start the MCP server\n   */\n  async start(): Promise<void> {\n    if (!this.config.enabled) {\n      console.log(`MCP Server ${this.config.name} is disabled`);\n      return;\n    }\n\n    const transport = new StdioServerTransport();\n    await this.server.connect(transport);\n    \n    console.log(`MCP Server ${this.config.name} started on port ${this.config.port}`);\n  }\n\n  /**\n   * Stop the MCP server\n   */\n  async stop(): Promise<void> {\n    await this.server.close();\n    console.log(`MCP Server ${this.config.name} stopped`);\n  }\n\n  // Abstract methods that must be implemented by subclasses\n  protected abstract listResources(authContext: MCPAuthContext): Promise<any[]>;\n  protected abstract readResource(uri: string, authContext: MCPAuthContext): Promise<any>;\n  protected abstract listTools(authContext: MCPAuthContext): Promise<any[]>;\n  protected abstract callTool(name: string, args: any, authContext: MCPAuthContext): Promise<any>;\n}"],"names":["BaseMCPServer","BaseQuerySchema","z","object","organizationId","string","uuid","optional","limit","number","min","max","default","offset","dateFrom","datetime","dateTo","search","ResourceUriSchema","uri","url","ToolCallSchema","name","arguments","record","any","constructor","config","server","Server","version","capabilities","resources","tools","setupBaseHandlers","setRequestHandler","ListResourcesRequestSchema","request","authResult","authenticate","success","MCPAuthenticationError","error","checkRateLimit","context","userId","listResources","handleError","ReadResourceRequestSchema","resourceContent","readResource","params","contents","ListToolsRequestSchema","listTools","CallToolRequestSchema","result","callTool","authentication","required","sessionToken","meta","headers","authorization","session","validateSession","user","authContext","id","role","permissions","getRolePermissions","sessionId","logMCPAuthEvent","undefined","Error","message","token","actualToken","startsWith","substring","nextAuthSecret","process","env","NEXTAUTH_SECRET","console","decoded","jwt","verify","prisma","findUnique","where","include","organization","select","isActive","update","data","lastLogin","Date","email","jti","now","USER","ADMIN","IT_ADMIN","SUPER_ADMIN","AI_AGENT","hasPermission","permission","resourceOrganizationId","includes","validateOrganizationAccess","targetOrganizationId","orgUser","findFirst","filterDataByPermissions","filter","item","createdById","validateInput","schema","parse","ZodError","formattedErrors","errors","map","err","path","join","code","MCPValidationError","e","validateQuery","MCPAuthorizationError","validateResourceUri","validated","orgMatch","match","orgId","sensitivePatterns","some","pattern","validateToolCall","args","toolPermissions","requiredPermissions","sanitizeOutput","sensitiveFields","sanitized","field","key","Array","isArray","validateDateRange","isNaN","getTime","maxRange","maxFuture","rateLimitKey","CACHE_KEYS","API_RATE_LIMIT","windowSeconds","Math","ceil","rateLimit","windowMs","currentCount","redisCache","increment","warn","expire","maxRequests","ttlKey","remainingTime","redisClient","client","exists","ttl","ttlError","getAuthContextForUserId","logMCPRateLimitEvent","auditError","MCPRateLimitError","getRateLimitStatus","currentCountStr","get","parseInt","current","percentageUsed","outcome","errorMessage","ipAddress","userAgent","actorIdentifier","enterpriseAuditLogger","logSecurityEvent","riskLevel","description","resourceType","metadata","serverName","authMethod","timestamp","toISOString","logEvent","eventType","actor","type","identifier","resource","getOrganizationIdFromUser","action","details","compliance","dataClassification","retentionDays","gdprRelevant","hipaaRelevant","pciRelevant","logMCPResourceAccess","resourceUri","mapResourceUriToType","auditAction","mapMCPActionToAuditAction","duration","dataSize","mcpAction","calculateResourceRiskLevel","classifyMCPResource","getMCPRetentionPeriod","isGDPRRelevantResource","logMCPToolExecution","toolName","calculateToolRiskLevel","argumentsHash","hashArguments","outputSize","userRole","toolProcessesPersonalData","resourceId","event","sensitiveResources","highRiskActions","criticalTools","highRiskTools","restrictedTypes","confidentialTypes","personalDataTools","argsString","JSON","stringify","Object","keys","sort","crypto","require","createHash","digest","McpError","ErrorCode","InvalidRequest","InvalidParams","InternalError","createFallbackResponse","fallbackFunction","fallback","enabled","fallbackUsed","fallbackError","start","log","transport","StdioServerTransport","connect","port","stop","close"],"mappings":"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"}