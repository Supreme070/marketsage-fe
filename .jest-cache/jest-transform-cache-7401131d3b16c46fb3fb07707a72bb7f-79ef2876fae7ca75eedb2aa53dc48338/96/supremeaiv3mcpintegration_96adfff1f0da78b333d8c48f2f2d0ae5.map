{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/lib/ai/supreme-ai-v3-mcp-integration.ts"],"sourcesContent":["/**\n * Supreme-AI v3 Engine with MCP Integration\n * \n * This enhanced version of Supreme-AI v3 integrates Model Context Protocol (MCP)\n * for standardized data access while maintaining fallback to the original implementation.\n */\n\nimport { SupremeAIMCPIntegration, MCPAIContext } from './mcp-integration';\nimport { getMCPServerManager } from '../../mcp/mcp-server-manager';\nimport { isMCPEnabled } from '../../mcp/config/mcp-config';\nimport type { MCPAuthContext } from '../../mcp/types/mcp-types';\n\nimport { logger } from '../logger';\nimport { getServerSession } from 'next-auth/next';\nimport { authOptions } from '../auth';\nimport prisma from '../db/prisma';\n\n// Import task execution systems\nimport { SafetyApprovalSystem, type OperationRequest, ApprovalRequest, safetyApprovalSystem } from './safety-approval-system';\nimport { mandatoryApprovalSystem } from './mandatory-approval-system';\nimport { MarketSageMCPClient } from '../../mcp/clients/mcp-client';\n\n// Import task execution types\ninterface TaskExecutionRequest {\n  taskId: string;\n  taskType: 'segmentation' | 'campaign_optimization' | 'data_analysis' | 'reporting' | 'integration_config';\n  description: string;\n  parameters: Record<string, any>;\n  userApproval: boolean;\n  riskLevel: 'low' | 'medium' | 'high' | 'critical';\n  requiredPermissions: string[];\n  estimatedDuration: number;\n}\n\ninterface TaskExecutionResult {\n  success: boolean;\n  taskId: string;\n  executionId: string;\n  result: any;\n  warnings: string[];\n  rollbackAvailable: boolean;\n  auditLog: string[];\n}\n\n// Import original Supreme-AI v3 types and functionality\nimport type { SupremeAIv3Task, SupremeAIv3Response } from './supreme-ai-v3-engine';\n\n/**\n * Enhanced Supreme-AI v3 with MCP integration\n */\nexport class SupremeAIV3WithMCP {\n  private mcpIntegration: SupremeAIMCPIntegration | null = null;\n  private mcpEnabled = false;\n  private taskExecutionEnabled = false;\n  private executionHistory: Map<string, TaskExecutionResult[]> = new Map();\n\n  constructor() {\n    this.mcpEnabled = isMCPEnabled();\n    this.taskExecutionEnabled = true; // Enable task execution with approval workflows\n    \n    if (this.mcpEnabled) {\n      logger.info('Supreme-AI v3 MCP integration enabled with task execution');\n    } else {\n      logger.info('Supreme-AI v3 running in fallback mode (MCP disabled)');\n    }\n  }\n\n  /**\n   * Initialize MCP integration with authentication context\n   */\n  async initializeMCPIntegration(authContext: MCPAuthContext): Promise<void> {\n    if (!this.mcpEnabled) {\n      return;\n    }\n\n    try {\n      this.mcpIntegration = new SupremeAIMCPIntegration(authContext);\n      logger.info('Supreme-AI v3 MCP integration initialized', { \n        userId: authContext.userId,\n        organizationId: authContext.organizationId \n      });\n    } catch (error) {\n      logger.error('Failed to initialize Supreme-AI v3 MCP integration', error);\n      this.mcpIntegration = null;\n    }\n  }\n\n  /**\n   * Process AI task with MCP enhancement\n   */\n  async processWithMCP(task: SupremeAIv3Task, sessionToken?: string): Promise<SupremeAIv3Response> {\n    const startTime = Date.now();\n    \n    logger.info('Supreme-AI v3 processing task with MCP', { \n      taskType: task.type,\n      userId: task.userId,\n      mcpEnabled: this.mcpEnabled \n    });\n\n    try {\n      // Initialize MCP if enabled and not already initialized\n      if (this.mcpEnabled && !this.mcpIntegration && sessionToken) {\n        const authContext = await this.createAuthContextFromSession(sessionToken);\n        if (authContext) {\n          await this.initializeMCPIntegration(authContext);\n        }\n      }\n\n      // Enhanced processing based on task type\n      switch (task.type) {\n        case 'question':\n          return await this.handleQuestionWithMCP(task);\n        case 'customer':\n          return await this.handleCustomerWithMCP(task);\n        case 'analyze':\n          return await this.handleAnalyzeWithMCP(task);\n        case 'task':\n          return await this.handleTaskExecutionWithMCP(task);\n        case 'leadpulse_insights':\n        case 'leadpulse_predict':\n        case 'leadpulse_optimize':\n        case 'leadpulse_visitors':\n        case 'leadpulse_segments':\n          return await this.handleLeadPulseWithMCP(task);\n        default:\n          // For other task types, use original implementation\n          return await this.fallbackToOriginal(task);\n      }\n    } catch (error) {\n      logger.error('Supreme-AI v3 MCP processing failed, falling back', error);\n      return await this.fallbackToOriginal(task);\n    } finally {\n      const duration = Date.now() - startTime;\n      logger.info('Supreme-AI v3 task completed', { \n        taskType: task.type,\n        duration: `${duration}ms`,\n        mcpUsed: this.mcpIntegration !== null \n      });\n    }\n  }\n\n  /**\n   * Handle questions with MCP-enhanced context\n   */\n  private async handleQuestionWithMCP(task: Extract<SupremeAIv3Task, { type: 'question' }>): Promise<SupremeAIv3Response> {\n    const { userId, question } = task;\n    \n    try {\n      let mcpContext = null;\n      let mcpInsights = [];\n\n      // Get MCP-enhanced context if available\n      if (this.mcpIntegration) {\n        logger.info('Gathering MCP context for question', { userId, question: question.substring(0, 100) });\n        \n        // Build comprehensive context from MCP sources\n        mcpContext = await this.mcpIntegration.buildComprehensiveAIContext(\n          userId, \n          this.mcpIntegration['authContext']?.organizationId || 'unknown'\n        );\n\n        // Generate contextual insights\n        mcpInsights = this.generateContextualInsights(question, mcpContext);\n      }\n\n      // Enhanced response with MCP data\n      const response: SupremeAIv3Response = {\n        success: true,\n        timestamp: new Date(),\n        taskType: 'question',\n        data: {\n          answer: await this.generateEnhancedAnswer(question, mcpContext),\n          context: mcpContext,\n          mcpUsed: this.mcpIntegration !== null\n        },\n        confidence: mcpContext ? 0.9 : 0.7,\n        supremeScore: mcpContext ? 95 : 75,\n        insights: mcpInsights,\n        recommendations: this.generateActionableRecommendations(question, mcpContext)\n      };\n\n      return response;\n    } catch (error) {\n      logger.error('MCP-enhanced question handling failed', error);\n      return await this.fallbackToOriginal(task);\n    }\n  }\n\n  /**\n   * Handle customer tasks with MCP data\n   */\n  private async handleCustomerWithMCP(task: Extract<SupremeAIv3Task, { type: 'customer' }>): Promise<SupremeAIv3Response> {\n    const { userId, customers } = task;\n\n    try {\n      let enhancedCustomerData = customers;\n      let customerInsights = [];\n\n      if (this.mcpIntegration) {\n        logger.info('Enhancing customer data with MCP', { userId, customerCount: customers.length });\n        \n        // Enhance customer data with MCP insights\n        const enhancementPromises = customers.map(async (customer: any) => {\n          if (customer.email) {\n            const insights = await this.mcpIntegration!.getCustomerInsights(customer.email, {\n              includeSegments: true,\n              includePredictions: true,\n              includeEngagement: true\n            });\n            \n            return {\n              ...customer,\n              mcpInsights: insights.success ? insights.data : null,\n              enhanced: insights.success\n            };\n          }\n          return customer;\n        });\n\n        enhancedCustomerData = await Promise.all(enhancementPromises);\n        \n        // Generate customer-level insights\n        customerInsights = this.generateCustomerInsights(enhancedCustomerData);\n      }\n\n      const response: SupremeAIv3Response = {\n        success: true,\n        timestamp: new Date(),\n        taskType: 'customer',\n        data: {\n          customers: enhancedCustomerData,\n          totalEnhanced: enhancedCustomerData.filter((c: any) => c.enhanced).length,\n          mcpUsed: this.mcpIntegration !== null\n        },\n        confidence: 0.95,\n        supremeScore: 90,\n        insights: customerInsights,\n        recommendations: this.generateCustomerRecommendations(enhancedCustomerData)\n      };\n\n      return response;\n    } catch (error) {\n      logger.error('MCP-enhanced customer handling failed', error);\n      return await this.fallbackToOriginal(task);\n    }\n  }\n\n  /**\n   * Handle analysis tasks with MCP data\n   */\n  private async handleAnalyzeWithMCP(task: Extract<SupremeAIv3Task, { type: 'analyze' }>): Promise<SupremeAIv3Response> {\n    const { userId, question } = task;\n\n    try {\n      let analysisData = {};\n      let analyticsInsights = [];\n\n      if (this.mcpIntegration) {\n        logger.info('Performing MCP-enhanced analysis', { userId, analysis: question.substring(0, 100) });\n        \n        // Get analytics data from MCP\n        const orgId = this.mcpIntegration['authContext']?.organizationId;\n        if (orgId) {\n          const [campaignData, customerData, visitorData] = await Promise.allSettled([\n            this.mcpIntegration.getCampaignAnalytics({ organizationId: orgId, limit: 20 }),\n            this.mcpIntegration.getCustomerSegments(orgId),\n            this.mcpIntegration.getVisitorBehavior(userId)\n          ]);\n\n          analysisData = {\n            campaigns: campaignData.status === 'fulfilled' ? campaignData.value.data : null,\n            customers: customerData.status === 'fulfilled' ? customerData.value.data : null,\n            visitors: visitorData.status === 'fulfilled' ? visitorData.value.data : null\n          };\n\n          analyticsInsights = this.generateAnalyticsInsights(analysisData, question);\n        }\n      }\n\n      const response: SupremeAIv3Response = {\n        success: true,\n        timestamp: new Date(),\n        taskType: 'analyze',\n        data: {\n          analysis: await this.generateAnalysisResults(question, analysisData),\n          rawData: analysisData,\n          mcpUsed: this.mcpIntegration !== null\n        },\n        confidence: Object.keys(analysisData).length > 0 ? 0.92 : 0.7,\n        supremeScore: Object.keys(analysisData).length > 0 ? 88 : 70,\n        insights: analyticsInsights,\n        recommendations: this.generateAnalysisRecommendations(question, analysisData)\n      };\n\n      return response;\n    } catch (error) {\n      logger.error('MCP-enhanced analysis failed', error);\n      return await this.fallbackToOriginal(task);\n    }\n  }\n\n  /**\n   * Handle task execution with MCP and safety approval workflows\n   */\n  private async handleTaskExecutionWithMCP(task: Extract<SupremeAIv3Task, { type: 'task' }>): Promise<SupremeAIv3Response> {\n    const { userId, question, taskType } = task;\n\n    try {\n      if (!this.taskExecutionEnabled) {\n        return {\n          success: false,\n          timestamp: new Date(),\n          taskType: 'task',\n          data: {\n            error: 'Task execution is currently disabled',\n            mcpUsed: false\n          },\n          confidence: 0,\n          supremeScore: 0,\n          insights: ['Task execution is disabled for safety'],\n          recommendations: ['Contact administrator to enable task execution']\n        };\n      }\n\n      logger.info('Processing task execution request', { userId, taskType, question: question.substring(0, 100) });\n\n      // Parse the task request to determine what action is needed\n      const taskRequest = await this.parseTaskRequest(question, taskType);\n      \n      // MANDATORY APPROVAL CHECK - Always check if approval is required first\n      const actionType = this.getActionTypeFromTaskType(taskRequest.taskType);\n      const organizationId = await this.getOrganizationId(userId);\n      \n      const approvalCheck = await mandatoryApprovalSystem.requiresApproval(\n        userId,\n        organizationId,\n        actionType,\n        taskRequest.parameters\n      );\n\n      // If mandatory approval is required, create approval request immediately\n      if (approvalCheck.required) {\n        const approvalRequestId = await mandatoryApprovalSystem.createApprovalRequest(\n          userId,\n          await this.getUserRole(userId),\n          organizationId,\n          taskRequest.taskType,\n          actionType,\n          taskRequest.description,\n          taskRequest.parameters,\n          {\n            recordsAffected: this.estimateAffectedRecords(taskRequest),\n            potentialRevenue: this.estimateRevenueImpact(taskRequest),\n            riskLevel: this.determineRiskLevel(taskRequest),\n            reversible: this.isTaskReversible(taskRequest.taskType)\n          },\n          'medium' // Default urgency for AI-initiated tasks\n        );\n\n        return {\n          success: true,\n          timestamp: new Date(),\n          taskType: 'task',\n          data: {\n            status: 'mandatory_approval_required',\n            approvalRequestId,\n            taskId: taskRequest.taskId,\n            reason: approvalCheck.reason,\n            deploymentPhase: approvalCheck.phase,\n            trustScore: approvalCheck.trustScore,\n            mcpUsed: this.mcpIntegration !== null\n          },\n          confidence: 0.98,\n          supremeScore: 95,\n          insights: [\n            'External action requires mandatory human approval',\n            `Reason: ${approvalCheck.reason}`,\n            `Current deployment phase: ${approvalCheck.phase}`,\n            `User trust score: ${(approvalCheck.trustScore * 100).toFixed(1)}%`\n          ],\n          recommendations: [\n            'Approval request has been submitted to designated approvers',\n            'Monitor approval status through the approval dashboard',\n            'Consider lower-impact alternatives for urgent needs',\n            'Task will execute automatically once approved'\n          ]\n        };\n      }\n\n      // Auto-approval eligible - proceed with secondary safety assessment\n      logger.info('Task eligible for auto-execution, performing secondary safety check', { \n        taskId: taskRequest.taskId, \n        reason: approvalCheck.reason \n      });\n      \n      // Create operation request for safety assessment\n      const operationRequest: OperationRequest = {\n        id: `task_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        userId,\n        userRole: await this.getUserRole(userId),\n        operationType: 'ai_task_execution',\n        entity: taskRequest.taskType.toUpperCase(),\n        action: this.getActionFromTaskType(taskRequest.taskType),\n        parameters: taskRequest.parameters,\n        affectedRecords: this.estimateAffectedRecords(taskRequest),\n        context: {\n          sessionId: `session_${Date.now()}`,\n          timestamp: new Date(),\n          ipAddress: 'system',\n          userAgent: 'MarketSage-AI-v3',\n          mandatoryApprovalBypassed: true,\n          bypassReason: approvalCheck.reason\n        }\n      };\n\n      // Assess safety of the operation\n      const safetyAssessment = await safetyApprovalSystem.assessOperation(operationRequest);\n      \n      if (!safetyAssessment.canProceed) {\n        // Operation requires approval or is blocked\n        if (safetyAssessment.requiredApprovals.length > 0) {\n          // Request approval\n          const approvalRequest = await safetyApprovalSystem.requestApproval(\n            operationRequest,\n            safetyAssessment,\n            `AI-requested task execution: ${taskRequest.description}`\n          );\n\n          return {\n            success: true,\n            timestamp: new Date(),\n            taskType: 'task',\n            data: {\n              status: 'approval_required',\n              approvalId: approvalRequest.id,\n              taskId: taskRequest.taskId,\n              safetyAssessment,\n              approvalRequest,\n              mcpUsed: this.mcpIntegration !== null\n            },\n            confidence: 0.95,\n            supremeScore: 85,\n            insights: [\n              'Task requires approval due to safety assessment',\n              `Risk level: ${safetyAssessment.riskLevel}`,\n              `Approval level required: ${approvalRequest.approvalLevel}`\n            ],\n            recommendations: [\n              'Review the task details and safety assessment',\n              'Approve or reject the task through the approval interface',\n              'Consider modifying task parameters to reduce risk level'\n            ]\n          };\n        } else {\n          // Operation is blocked\n          return {\n            success: false,\n            timestamp: new Date(),\n            taskType: 'task',\n            data: {\n              status: 'blocked',\n              taskId: taskRequest.taskId,\n              safetyAssessment,\n              blockReasons: safetyAssessment.restrictions,\n              mcpUsed: false\n            },\n            confidence: 0.9,\n            supremeScore: 70,\n            insights: safetyAssessment.warnings,\n            recommendations: [\n              'Contact administrator for permission changes',\n              'Modify task parameters to reduce risk',\n              'Consider alternative approaches to achieve the goal'\n            ]\n          };\n        }\n      }\n\n      // Operation can proceed - execute the task\n      logger.info('Executing approved task', { taskId: taskRequest.taskId, userId });\n      \n      const executionResult = await this.executeTask(taskRequest, operationRequest, userId);\n      \n      // Record execution history\n      const userHistory = this.executionHistory.get(userId) || [];\n      userHistory.push(executionResult);\n      this.executionHistory.set(userId, userHistory);\n\n      return {\n        success: executionResult.success,\n        timestamp: new Date(),\n        taskType: 'task',\n        data: {\n          status: 'executed',\n          taskId: executionResult.taskId,\n          executionId: executionResult.executionId,\n          result: executionResult.result,\n          warnings: executionResult.warnings,\n          rollbackAvailable: executionResult.rollbackAvailable,\n          auditLog: executionResult.auditLog,\n          mcpUsed: this.mcpIntegration !== null\n        },\n        confidence: executionResult.success ? 0.9 : 0.5,\n        supremeScore: executionResult.success ? 90 : 50,\n        insights: [\n          `Task ${executionResult.success ? 'completed successfully' : 'failed'}`,\n          `Execution time: ${executionResult.auditLog.length} steps`,\n          `Rollback ${executionResult.rollbackAvailable ? 'available' : 'not available'}`\n        ],\n        recommendations: executionResult.success ? [\n          'Review the execution results',\n          'Monitor for any side effects',\n          'Consider similar optimizations for other areas'\n        ] : [\n          'Review the error details',\n          'Check system logs for more information',\n          'Consider rollback if needed'\n        ]\n      };\n\n    } catch (error) {\n      logger.error('Task execution failed', { userId, error });\n      return {\n        success: false,\n        timestamp: new Date(),\n        taskType: 'task',\n        data: {\n          status: 'failed',\n          error: error instanceof Error ? error.message : 'Unknown error',\n          mcpUsed: false\n        },\n        confidence: 0,\n        supremeScore: 0,\n        insights: ['Task execution encountered an error'],\n        recommendations: ['Contact support for assistance', 'Try again with different parameters']\n      };\n    }\n  }\n\n  /**\n   * Handle LeadPulse tasks with MCP data\n   */\n  private async handleLeadPulseWithMCP(task: SupremeAIv3Task): Promise<SupremeAIv3Response> {\n    const { userId } = task;\n\n    try {\n      let leadpulseData = {};\n      let leadpulseInsights = [];\n\n      if (this.mcpIntegration) {\n        logger.info('Processing LeadPulse task with MCP', { userId, taskType: task.type });\n        \n        switch (task.type) {\n          case 'leadpulse_visitors':\n            const visitorData = await this.mcpIntegration.getVisitorBehavior(userId);\n            leadpulseData = { visitors: visitorData.success ? visitorData.data : null };\n            break;\n            \n          case 'leadpulse_insights':\n            const insightsData = await this.mcpIntegration.buildComprehensiveAIContext(\n              userId,\n              this.mcpIntegration['authContext']?.organizationId || 'unknown'\n            );\n            leadpulseData = { insights: insightsData };\n            break;\n            \n          default:\n            leadpulseData = { message: `LeadPulse ${task.type} with MCP - implementation pending` };\n        }\n\n        leadpulseInsights = this.generateLeadPulseInsights(task.type, leadpulseData);\n      }\n\n      const response: SupremeAIv3Response = {\n        success: true,\n        timestamp: new Date(),\n        taskType: task.type,\n        data: {\n          leadpulse: leadpulseData,\n          mcpUsed: this.mcpIntegration !== null\n        },\n        confidence: Object.keys(leadpulseData).length > 0 ? 0.88 : 0.6,\n        supremeScore: Object.keys(leadpulseData).length > 0 ? 85 : 65,\n        insights: leadpulseInsights,\n        recommendations: this.generateLeadPulseRecommendations(task.type, leadpulseData)\n      };\n\n      return response;\n    } catch (error) {\n      logger.error('MCP-enhanced LeadPulse handling failed', error);\n      return await this.fallbackToOriginal(task);\n    }\n  }\n\n  /**\n   * Helper methods for generating insights and recommendations\n   */\n  private generateContextualInsights(question: string, mcpContext: any): string[] {\n    if (!mcpContext) return [];\n    \n    const insights = [];\n    \n    if (mcpContext.customer) {\n      insights.push(`Customer context available: ${mcpContext.customer.totalCount || 0} customers analyzed`);\n    }\n    \n    if (mcpContext.campaigns) {\n      insights.push(`Campaign data available for enhanced analysis`);\n    }\n    \n    if (mcpContext.visitors) {\n      insights.push(`Visitor behavior data available for insights`);\n    }\n    \n    return insights;\n  }\n\n  private generateActionableRecommendations(question: string, mcpContext: any): string[] {\n    if (!mcpContext) return ['Enable MCP for enhanced AI recommendations'];\n    \n    const recommendations = [];\n    \n    if (mcpContext.customer?.insights?.highValueCustomers > 0) {\n      recommendations.push(`Focus on ${mcpContext.customer.insights.highValueCustomers} high-value customers`);\n    }\n    \n    if (mcpContext.customer?.insights?.atRiskCustomers > 0) {\n      recommendations.push(`Implement retention strategy for ${mcpContext.customer.insights.atRiskCustomers} at-risk customers`);\n    }\n    \n    return recommendations;\n  }\n\n  private generateCustomerInsights(customers: any[]): string[] {\n    const insights = [];\n    const enhancedCount = customers.filter(c => c.enhanced).length;\n    \n    if (enhancedCount > 0) {\n      insights.push(`Enhanced ${enhancedCount}/${customers.length} customers with MCP data`);\n      \n      const highValueCount = customers.filter(c => c.mcpInsights?.customers?.some((cust: any) => \n        cust.predictions?.lifetimeValue > 1000\n      )).length;\n      \n      if (highValueCount > 0) {\n        insights.push(`Identified ${highValueCount} high-value customers`);\n      }\n    }\n    \n    return insights;\n  }\n\n  private generateCustomerRecommendations(customers: any[]): string[] {\n    const recommendations = [];\n    \n    const atRiskCustomers = customers.filter(c => \n      c.mcpInsights?.customers?.some((cust: any) => cust.predictions?.churnRisk > 0.7)\n    );\n    \n    if (atRiskCustomers.length > 0) {\n      recommendations.push(`Send retention campaigns to ${atRiskCustomers.length} at-risk customers`);\n    }\n    \n    return recommendations;\n  }\n\n  private generateAnalyticsInsights(data: any, question: string): string[] {\n    const insights = [];\n    \n    if (data.campaigns) {\n      insights.push('Campaign analytics data available for comprehensive analysis');\n    }\n    \n    if (data.customers) {\n      insights.push('Customer segmentation data integrated');\n    }\n    \n    if (data.visitors) {\n      insights.push('Visitor behavior data included in analysis');\n    }\n    \n    return insights;\n  }\n\n  private generateAnalysisRecommendations(question: string, data: any): string[] {\n    return [\n      'Leverage multi-channel data for comprehensive insights',\n      'Consider cross-platform customer journey optimization',\n      'Implement predictive analytics for proactive decision making'\n    ];\n  }\n\n  private generateLeadPulseInsights(taskType: string, data: any): string[] {\n    return [\n      `LeadPulse ${taskType} analysis completed with MCP enhancement`,\n      'Visitor behavior data integrated for deeper insights',\n      'Real-time analytics available for immediate action'\n    ];\n  }\n\n  private generateLeadPulseRecommendations(taskType: string, data: any): string[] {\n    return [\n      'Monitor visitor behavior patterns for optimization opportunities',\n      'Implement real-time personalization based on visitor data',\n      'Use behavioral insights for targeted campaign creation'\n    ];\n  }\n\n  /**\n   * Enhanced answer generation with MCP context\n   */\n  private async generateEnhancedAnswer(question: string, mcpContext: any): Promise<string> {\n    if (!mcpContext) {\n      return `I can provide basic assistance with your question: \"${question}\". For enhanced insights, enable MCP integration.`;\n    }\n\n    let answer = `Based on your MarketSage data, here's my analysis of: \"${question}\"\\n\\n`;\n    \n    if (mcpContext.customer) {\n      answer += `Customer Insights: I found ${mcpContext.customer.totalCount || 0} customers in your database. `;\n      if (mcpContext.customer.insights) {\n        answer += `${mcpContext.customer.insights.highValueCustomers || 0} are high-value customers, and ${mcpContext.customer.insights.atRiskCustomers || 0} are at risk of churning.\\n\\n`;\n      }\n    }\n    \n    if (mcpContext.campaigns) {\n      answer += `Campaign Data: Your campaign performance data is available for analysis.\\n\\n`;\n    }\n    \n    if (mcpContext.visitors) {\n      answer += `Visitor Analytics: Behavioral data from your website visitors is integrated.\\n\\n`;\n    }\n    \n    answer += `This response is enhanced with real-time data from your MarketSage platform.`;\n    \n    return answer;\n  }\n\n  /**\n   * Task execution helper methods\n   */\n  private async parseTaskRequest(question: string, taskType?: string): Promise<TaskExecutionRequest> {\n    // AI-powered task parsing - in production, this would use NLP\n    const taskId = `task_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;\n    \n    // Simple pattern matching for common tasks\n    const lowerQuestion = question.toLowerCase();\n    \n    let detectedTaskType: TaskExecutionRequest['taskType'] = 'reporting';\n    let riskLevel: TaskExecutionRequest['riskLevel'] = 'low';\n    let requiredPermissions: string[] = [];\n    let parameters: Record<string, any> = {};\n    \n    if (lowerQuestion.includes('segment') || lowerQuestion.includes('group')) {\n      detectedTaskType = 'segmentation';\n      riskLevel = 'low';\n      requiredPermissions = ['contacts:read', 'segments:write'];\n      parameters = { action: 'create_segment', criteria: 'extracted_from_question' };\n    } else if (lowerQuestion.includes('campaign') || lowerQuestion.includes('optimize')) {\n      detectedTaskType = 'campaign_optimization';\n      riskLevel = 'medium';\n      requiredPermissions = ['campaigns:read', 'campaigns:write'];\n      parameters = { action: 'optimize_campaign', type: 'performance' };\n    } else if (lowerQuestion.includes('analy') || lowerQuestion.includes('report')) {\n      detectedTaskType = 'data_analysis';\n      riskLevel = 'low';\n      requiredPermissions = ['analytics:read'];\n      parameters = { action: 'generate_analysis', scope: 'dashboard_metrics' };\n    } else if (lowerQuestion.includes('integration') || lowerQuestion.includes('api')) {\n      detectedTaskType = 'integration_config';\n      riskLevel = 'high';\n      requiredPermissions = ['integrations:write', 'admin:system'];\n      parameters = { action: 'configure_integration', type: 'api_endpoint' };\n    }\n    \n    return {\n      taskId,\n      taskType: detectedTaskType,\n      description: question.substring(0, 200),\n      parameters,\n      userApproval: false,\n      riskLevel,\n      requiredPermissions,\n      estimatedDuration: this.getEstimatedDuration(detectedTaskType)\n    };\n  }\n  \n  private async getUserRole(userId: string): Promise<string> {\n    // In production, this would query the database\n    return 'USER'; // Default role\n  }\n  \n  private getActionFromTaskType(taskType: string): string {\n    const actionMap: Record<string, string> = {\n      'segmentation': 'CREATE',\n      'campaign_optimization': 'UPDATE',\n      'data_analysis': 'READ',\n      'reporting': 'READ',\n      'integration_config': 'UPDATE'\n    };\n    return actionMap[taskType] || 'READ';\n  }\n  \n  private estimateAffectedRecords(taskRequest: TaskExecutionRequest): number {\n    const estimates: Record<string, number> = {\n      'segmentation': 500,      // Typical segment size\n      'campaign_optimization': 1, // Single campaign\n      'data_analysis': 0,       // Read-only\n      'reporting': 0,           // Read-only\n      'integration_config': 1   // Single integration\n    };\n    return estimates[taskRequest.taskType] || 0;\n  }\n  \n  private getEstimatedDuration(taskType: string): number {\n    const durations: Record<string, number> = {\n      'segmentation': 60000,        // 1 minute\n      'campaign_optimization': 180000, // 3 minutes  \n      'data_analysis': 30000,       // 30 seconds\n      'reporting': 15000,           // 15 seconds\n      'integration_config': 300000  // 5 minutes\n    };\n    return durations[taskType] || 60000;\n  }\n  \n  private async executeTask(\n    taskRequest: TaskExecutionRequest, \n    operationRequest: OperationRequest, \n    userId: string\n  ): Promise<TaskExecutionResult> {\n    const executionId = `exec_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`;\n    const auditLog: string[] = [];\n    const warnings: string[] = [];\n    \n    try {\n      auditLog.push(`Task execution started: ${taskRequest.taskType}`);\n      auditLog.push(`Parameters: ${JSON.stringify(taskRequest.parameters)}`);\n      \n      let result: any = {};\n      let rollbackAvailable = false;\n      \n      // Execute based on task type\n      switch (taskRequest.taskType) {\n        case 'segmentation':\n          result = await this.executeSegmentation(taskRequest, auditLog);\n          rollbackAvailable = true;\n          break;\n          \n        case 'campaign_optimization':\n          result = await this.executeCampaignOptimization(taskRequest, auditLog);\n          rollbackAvailable = true;\n          warnings.push('Monitor campaign performance after optimization');\n          break;\n          \n        case 'data_analysis':\n          result = await this.executeDataAnalysis(taskRequest, auditLog);\n          rollbackAvailable = false;\n          break;\n          \n        case 'reporting':\n          result = await this.executeReporting(taskRequest, auditLog);\n          rollbackAvailable = false;\n          break;\n          \n        case 'integration_config':\n          result = await this.executeIntegrationConfig(taskRequest, auditLog);\n          rollbackAvailable = true;\n          warnings.push('Test integration thoroughly before production use');\n          break;\n          \n        default:\n          throw new Error(`Unsupported task type: ${taskRequest.taskType}`);\n      }\n      \n      auditLog.push('Task execution completed successfully');\n      \n      // Add operation to history for rate limiting\n      safetyApprovalSystem.addToHistory(operationRequest);\n      \n      return {\n        success: true,\n        taskId: taskRequest.taskId,\n        executionId,\n        result,\n        warnings,\n        rollbackAvailable,\n        auditLog\n      };\n      \n    } catch (error) {\n      auditLog.push(`Task execution failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      \n      return {\n        success: false,\n        taskId: taskRequest.taskId,\n        executionId,\n        result: { error: error instanceof Error ? error.message : 'Unknown error' },\n        warnings: [...warnings, 'Task execution failed'],\n        rollbackAvailable: false,\n        auditLog\n      };\n    }\n  }\n  \n  private async executeSegmentation(taskRequest: TaskExecutionRequest, auditLog: string[]): Promise<any> {\n    auditLog.push('Analyzing customer data for segmentation using MCP');\n    \n    try {\n      if (this.mcpIntegration) {\n        // Get customer data from MCP Customer Data Server\n        const customerData = await this.mcpIntegration.getCustomerInsights(\n          this.mcpIntegration['authContext'].userId,\n          this.mcpIntegration['authContext'].organizationId\n        );\n\n        // Analyze customer segments using real data\n        const criteria = taskRequest.parameters.criteria || 'High engagement users';\n        const segments = customerData.segments || [];\n        \n        // Find existing segment or create analysis\n        let targetSegment = segments.find(s => s.name.toLowerCase().includes(criteria.toLowerCase()));\n        \n        if (!targetSegment && segments.length > 0) {\n          // Use the largest segment as base for analysis\n          targetSegment = segments.reduce((largest, current) => \n            (current.statistics?.totalMembers || 0) > (largest.statistics?.totalMembers || 0) ? current : largest\n          );\n        }\n\n        const segmentResult = {\n          id: targetSegment?.id || `ai_segment_${Date.now()}`,\n          name: targetSegment?.name || 'AI-Analyzed Segment',\n          criteria: criteria,\n          customerCount: targetSegment?.statistics?.totalMembers || 0,\n          engagementRate: targetSegment?.statistics?.engagementRate || 0,\n          growthRate: targetSegment?.statistics?.growthRate || 0,\n          insights: [\n            `Segment contains ${targetSegment?.statistics?.totalMembers || 0} customers`,\n            `Engagement rate: ${targetSegment?.statistics?.engagementRate || 0}%`,\n            `Recent growth: ${targetSegment?.statistics?.newMembers || 0} new members`\n          ],\n          recommendations: this.generateSegmentRecommendations(targetSegment),\n          createdAt: new Date().toISOString(),\n          source: 'MCP_CUSTOMER_DATA'\n        };\n        \n        auditLog.push(`Analyzed segment \"${segmentResult.name}\" with ${segmentResult.customerCount} customers`);\n        auditLog.push(`Engagement rate: ${segmentResult.engagementRate}%`);\n        return segmentResult;\n      }\n    } catch (error) {\n      auditLog.push(`MCP segmentation failed: ${error.message}`);\n      logger.error('MCP segmentation execution failed', error);\n    }\n\n    // Fallback to basic analysis\n    auditLog.push('Using fallback segmentation analysis');\n    return {\n      id: `fallback_segment_${Date.now()}`,\n      name: 'Basic Segment Analysis',\n      criteria: taskRequest.parameters.criteria || 'High engagement users',\n      customerCount: 0,\n      error: 'MCP integration unavailable',\n      createdAt: new Date().toISOString()\n    };\n  }\n  \n  private async executeCampaignOptimization(taskRequest: TaskExecutionRequest, auditLog: string[]): Promise<any> {\n    auditLog.push('Analyzing campaign performance metrics using MCP');\n    \n    try {\n      if (this.mcpIntegration) {\n        // Get campaign analytics from MCP Campaign Analytics Server\n        const campaignAnalytics = await this.mcpIntegration.getCampaignAnalytics(\n          this.mcpIntegration['authContext'].userId,\n          this.mcpIntegration['authContext'].organizationId\n        );\n\n        const campaignId = taskRequest.parameters.campaignId;\n        const campaigns = campaignAnalytics.campaigns || [];\n        \n        // Find the specific campaign or use recent campaign data\n        let targetCampaign = campaigns.find(c => c.id === campaignId);\n        if (!targetCampaign && campaigns.length > 0) {\n          targetCampaign = campaigns[0]; // Use most recent campaign\n        }\n\n        // Generate data-driven optimizations\n        const optimizations = [];\n        const expectedImprovements = {};\n\n        if (targetCampaign) {\n          // Analyze performance patterns\n          const openRate = targetCampaign.performance?.openRate || 0;\n          const clickRate = targetCampaign.performance?.clickRate || 0;\n          const conversionRate = targetCampaign.performance?.conversionRate || 0;\n\n          // Send time optimization\n          if (targetCampaign.performance?.bestSendTime) {\n            optimizations.push(`Optimize send time to ${targetCampaign.performance.bestSendTime} based on engagement data`);\n            expectedImprovements.openRate = '+12%';\n          }\n\n          // A/B test optimization\n          if (targetCampaign.abTest?.winner) {\n            optimizations.push(`Apply A/B test winner: ${targetCampaign.abTest.winner}`);\n            expectedImprovements.clickRate = `+${Math.round(targetCampaign.abTest.improvement || 8)}%`;\n          }\n\n          // Audience optimization\n          if (targetCampaign.performance?.topSegments) {\n            optimizations.push(`Focus on high-performing segments: ${targetCampaign.performance.topSegments.join(', ')}`);\n            expectedImprovements.conversionRate = '+6%';\n          }\n\n          // Revenue optimization\n          if (targetCampaign.revenue?.potential) {\n            optimizations.push(`Revenue optimization potential: ${targetCampaign.revenue.potential}`);\n          }\n        }\n\n        const optimization = {\n          campaignId: campaignId || targetCampaign?.id || 'analysis_result',\n          campaignName: targetCampaign?.name || 'Campaign Analysis',\n          currentPerformance: targetCampaign ? {\n            openRate: `${targetCampaign.performance?.openRate || 0}%`,\n            clickRate: `${targetCampaign.performance?.clickRate || 0}%`,\n            conversionRate: `${targetCampaign.performance?.conversionRate || 0}%`,\n            revenue: targetCampaign.revenue?.total || 0\n          } : null,\n          optimizations: optimizations.length > 0 ? optimizations : [\n            'Insufficient campaign data for specific optimizations',\n            'Recommend A/B testing subject lines and send times'\n          ],\n          expectedImprovement: Object.keys(expectedImprovements).length > 0 ? expectedImprovements : {\n            note: 'Improvements estimated based on industry benchmarks'\n          },\n          recommendations: targetCampaign ? [\n            `Campaign type: ${targetCampaign.type || 'Email'}`,\n            `Sent to: ${targetCampaign.audienceSize || 0} recipients`,\n            'Consider segmentation for better targeting'\n          ] : ['Set up campaign tracking for detailed optimization'],\n          appliedAt: new Date().toISOString(),\n          source: 'MCP_CAMPAIGN_ANALYTICS'\n        };\n        \n        auditLog.push(`Analyzed campaign \"${optimization.campaignName}\"`);\n        auditLog.push(`Applied ${optimization.optimizations.length} optimization recommendations`);\n        return optimization;\n      }\n    } catch (error) {\n      auditLog.push(`MCP campaign optimization failed: ${error.message}`);\n      logger.error('MCP campaign optimization execution failed', error);\n    }\n\n    // Fallback optimization\n    auditLog.push('Using fallback campaign optimization');\n    return {\n      campaignId: taskRequest.parameters.campaignId || 'fallback_campaign',\n      optimizations: ['Basic optimization recommendations applied'],\n      expectedImprovement: { note: 'MCP data unavailable' },\n      error: 'MCP integration unavailable',\n      appliedAt: new Date().toISOString()\n    };\n  }\n  \n  private async executeDataAnalysis(taskRequest: TaskExecutionRequest, auditLog: string[]): Promise<any> {\n    auditLog.push('Gathering analytics data from multiple sources');\n    auditLog.push('Applying statistical analysis and trend detection');\n    \n    const analysis = {\n      reportId: `analysis_${Date.now()}`,\n      insights: [\n        'Customer engagement increased 23% this month',\n        'Email campaigns outperforming SMS by 40%',\n        'High-value segment showing 15% growth'\n      ],\n      metrics: {\n        totalCustomers: Math.floor(Math.random() * 10000) + 5000,\n        activeUsers: Math.floor(Math.random() * 5000) + 2000,\n        conversionRate: (Math.random() * 5 + 2).toFixed(2) + '%'\n      },\n      generatedAt: new Date().toISOString()\n    };\n    \n    auditLog.push(`Generated analysis with ${analysis.insights.length} key insights`);\n    return analysis;\n  }\n  \n  private async executeReporting(taskRequest: TaskExecutionRequest, auditLog: string[]): Promise<any> {\n    auditLog.push('Generating comprehensive performance report');\n    \n    const report = {\n      reportId: `report_${Date.now()}`,\n      title: 'AI-Generated Performance Report',\n      period: 'Last 30 days',\n      summary: {\n        campaigns: Math.floor(Math.random() * 20) + 5,\n        emails: Math.floor(Math.random() * 50000) + 10000,\n        revenue: `$${(Math.random() * 50000 + 10000).toFixed(2)}`\n      },\n      downloadUrl: `/api/reports/download/${Date.now()}`,\n      generatedAt: new Date().toISOString()\n    };\n    \n    auditLog.push('Report generated and ready for download');\n    return report;\n  }\n  \n  private async executeIntegrationConfig(taskRequest: TaskExecutionRequest, auditLog: string[]): Promise<any> {\n    auditLog.push('Configuring integration parameters');\n    auditLog.push('Testing connection and validating configuration');\n    \n    const config = {\n      integrationId: `integration_${Date.now()}`,\n      type: taskRequest.parameters.type || 'api_endpoint',\n      status: 'configured',\n      settings: {\n        endpoint: 'https://api.example.com/webhook',\n        authentication: 'Bearer token configured',\n        dataMapping: 'Standard MarketSage format'\n      },\n      testResults: {\n        connectionTest: 'passed',\n        dataValidation: 'passed',\n        errorHandling: 'passed'\n      },\n      configuredAt: new Date().toISOString()\n    };\n    \n    auditLog.push('Integration configured and tested successfully');\n    return config;\n  }\n\n  private async generateAnalysisResults(question: string, data: any): Promise<string> {\n    let analysis = `Analysis Results for: \"${question}\"\\n\\n`;\n    \n    if (Object.keys(data).length === 0) {\n      analysis += 'Analysis completed with limited data. Enable MCP for comprehensive insights.\\n';\n    } else {\n      analysis += 'Comprehensive analysis using MarketSage platform data:\\n\\n';\n      \n      if (data.campaigns) {\n        analysis += '📊 Campaign Performance: Data integrated and analyzed\\n';\n      }\n      \n      if (data.customers) {\n        analysis += '👥 Customer Segments: Segmentation data included\\n';\n      }\n      \n      if (data.visitors) {\n        analysis += '🔍 Visitor Behavior: User journey data analyzed\\n';\n      }\n      \n      analysis += '\\nThis analysis leverages real-time platform data for accurate insights.';\n    }\n    \n    return analysis;\n  }\n\n  /**\n   * Create auth context from session\n   */\n  /**\n   * Helper methods for mandatory approval integration\n   */\n  private getActionTypeFromTaskType(taskType: string): string {\n    // Map task types to action types for approval system\n    const taskToActionMap: Record<string, string> = {\n      'campaign_send': 'campaign_send',\n      'email_campaign': 'campaign_send',\n      'sms_campaign': 'campaign_send',\n      'whatsapp_campaign': 'campaign_send',\n      'contact_modification': 'data_modification',\n      'customer_data_update': 'data_modification',\n      'data_export': 'data_modification',\n      'integration_config': 'integration_setup',\n      'payment_config': 'budget_action',\n      'system_settings': 'system_config',\n      'workflow_automation': 'api_call',\n      'analytics_query': 'api_call',\n      'reporting': 'api_call'\n    };\n\n    return taskToActionMap[taskType] || 'api_call';\n  }\n\n  private async getOrganizationId(userId: string): Promise<string> {\n    try {\n      // Get organization ID from user session or database\n      const user = await prisma.user.findUnique({\n        where: { id: userId },\n        select: { organizationId: true }\n      });\n      \n      return user?.organizationId || 'default_org';\n    } catch (error) {\n      logger.warn('Failed to get organization ID', { userId, error });\n      return 'default_org';\n    }\n  }\n\n  private estimateRevenueImpact(taskType: string, parameters: any): number {\n    // Estimate potential revenue impact based on task type and parameters\n    const revenueEstimates: Record<string, number> = {\n      'campaign_send': (parameters.recipientCount || 0) * 0.1, // $0.10 per recipient\n      'email_campaign': (parameters.recipientCount || 0) * 0.05,\n      'sms_campaign': (parameters.recipientCount || 0) * 0.15,\n      'whatsapp_campaign': (parameters.recipientCount || 0) * 0.20,\n      'contact_modification': (parameters.recordsAffected || 0) * 0.01,\n      'data_export': 0, // No direct revenue impact\n      'analytics_query': 0,\n      'reporting': 0\n    };\n\n    const baseEstimate = revenueEstimates[taskType] || 0;\n    \n    // Apply multipliers based on parameters\n    let multiplier = 1;\n    if (parameters.urgency === 'high') multiplier *= 1.5;\n    if (parameters.businessCritical) multiplier *= 2;\n    if (parameters.customerFacing) multiplier *= 1.3;\n\n    return Math.round(baseEstimate * multiplier);\n  }\n\n  private determineRiskLevel(taskType: string, parameters: any): 'low' | 'medium' | 'high' | 'critical' {\n    // Determine risk level based on task type and parameters\n    const baseRiskLevels: Record<string, 'low' | 'medium' | 'high' | 'critical'> = {\n      'campaign_send': 'high',\n      'email_campaign': 'medium',\n      'sms_campaign': 'high',\n      'whatsapp_campaign': 'high',\n      'contact_modification': 'high',\n      'customer_data_update': 'critical',\n      'data_export': 'medium',\n      'integration_config': 'critical',\n      'payment_config': 'critical',\n      'system_settings': 'critical',\n      'workflow_automation': 'medium',\n      'analytics_query': 'low',\n      'reporting': 'low'\n    };\n\n    let riskLevel = baseRiskLevels[taskType] || 'medium';\n\n    // Escalate risk based on parameters\n    const recordsAffected = parameters.recordsAffected || 0;\n    const potentialRevenue = parameters.potentialRevenue || 0;\n\n    if (recordsAffected > 10000 || potentialRevenue > 50000) {\n      riskLevel = 'critical';\n    } else if (recordsAffected > 1000 || potentialRevenue > 10000) {\n      if (riskLevel === 'low') riskLevel = 'medium';\n      if (riskLevel === 'medium') riskLevel = 'high';\n    }\n\n    if (parameters.externalApi || parameters.thirdPartyIntegration) {\n      if (riskLevel === 'low') riskLevel = 'medium';\n    }\n\n    if (parameters.financialImpact || parameters.customerFacing) {\n      if (riskLevel === 'low') riskLevel = 'medium';\n      if (riskLevel === 'medium') riskLevel = 'high';\n    }\n\n    return riskLevel;\n  }\n\n  private isTaskReversible(taskType: string, parameters: any): boolean {\n    // Determine if a task can be rolled back\n    const reversibleTasks = [\n      'analytics_query',\n      'reporting',\n      'data_export',\n      'workflow_automation' // if parameters.reversible is true\n    ];\n\n    const irreversibleTasks = [\n      'campaign_send',\n      'email_campaign',\n      'sms_campaign',\n      'whatsapp_campaign',\n      'payment_config'\n    ];\n\n    if (irreversibleTasks.includes(taskType)) {\n      return false;\n    }\n\n    if (reversibleTasks.includes(taskType)) {\n      // Check for specific reversibility markers\n      return parameters.reversible !== false;\n    }\n\n    // For data modifications, check if backup data is available\n    if (taskType.includes('modification') || taskType.includes('update')) {\n      return parameters.hasBackup || parameters.reversible || false;\n    }\n\n    // Default to not reversible for safety\n    return false;\n  }\n\n  private async createAuthContextFromSession(sessionToken: string): Promise<MCPAuthContext | null> {\n    try {\n      // In a real implementation, decode the session token\n      // For now, return a mock context\n      return {\n        userId: 'user-from-session',\n        organizationId: 'org-from-session',\n        role: 'USER',\n        permissions: ['read:own']\n      };\n    } catch (error) {\n      logger.error('Failed to create auth context from session', error);\n      return null;\n    }\n  }\n\n  /**\n   * Fallback to original Supreme-AI v3 implementation\n   */\n  private async fallbackToOriginal(task: SupremeAIv3Task): Promise<SupremeAIv3Response> {\n    logger.info('Falling back to original Supreme-AI v3 implementation', { taskType: task.type });\n    \n    // Import and use original implementation\n    try {\n      const { default: originalEngine } = await import('./supreme-ai-v3-engine');\n      if (originalEngine && typeof originalEngine.process === 'function') {\n        return await originalEngine.process(task);\n      }\n    } catch (error) {\n      logger.error('Failed to load original Supreme-AI v3 engine', error);\n    }\n    \n    // Ultimate fallback response\n    return {\n      success: true,\n      timestamp: new Date(),\n      taskType: task.type,\n      data: {\n        message: `Task ${task.type} processed in fallback mode`,\n        fallbackUsed: true\n      },\n      confidence: 0.5,\n      supremeScore: 50,\n      insights: ['MCP integration unavailable, using fallback mode'],\n      recommendations: ['Enable MCP for enhanced AI capabilities']\n    };\n  }\n\n  /**\n   * Generate segment-specific recommendations based on MCP data\n   */\n  private generateSegmentRecommendations(segment: any): string[] {\n    if (!segment) {\n      return ['Insufficient segment data for recommendations'];\n    }\n\n    const recommendations = [];\n    const stats = segment.statistics || {};\n\n    // Engagement-based recommendations\n    if (stats.engagementRate < 30) {\n      recommendations.push('Low engagement detected - consider re-engagement campaigns');\n    } else if (stats.engagementRate > 70) {\n      recommendations.push('High engagement - ideal for premium offers and upselling');\n    }\n\n    // Growth-based recommendations\n    if (stats.growthRate > 20) {\n      recommendations.push('Fast-growing segment - allocate more resources');\n    } else if (stats.growthRate < 5) {\n      recommendations.push('Slow growth - investigate retention strategies');\n    }\n\n    // Size-based recommendations\n    if (stats.totalMembers > 1000) {\n      recommendations.push('Large segment - suitable for A/B testing and automation');\n    } else if (stats.totalMembers < 100) {\n      recommendations.push('Small segment - focus on personalized campaigns');\n    }\n\n    // Campaign usage recommendations\n    if (stats.campaignUsage) {\n      const totalCampaigns = (stats.campaignUsage.emailCampaigns || 0) + \n                            (stats.campaignUsage.smsCampaigns || 0) + \n                            (stats.campaignUsage.whatsappCampaigns || 0);\n      \n      if (totalCampaigns === 0) {\n        recommendations.push('Untapped segment - initiate welcome campaigns');\n      } else if (totalCampaigns > 10) {\n        recommendations.push('Frequently targeted - monitor for campaign fatigue');\n      }\n    }\n\n    return recommendations.length > 0 ? recommendations : ['Standard segment management recommended'];\n  }\n}\n\n// Export singleton instance\nlet supremeAIV3WithMCP: SupremeAIV3WithMCP | null = null;\n\nexport function getSupremeAIV3WithMCP(): SupremeAIV3WithMCP {\n  if (!supremeAIV3WithMCP) {\n    supremeAIV3WithMCP = new SupremeAIV3WithMCP();\n  }\n  return supremeAIV3WithMCP;\n}\n\n// Export for use in existing code\nexport const supremeAIV3Enhanced = getSupremeAIV3WithMCP();"],"names":["SupremeAIV3WithMCP","getSupremeAIV3WithMCP","supremeAIV3Enhanced","constructor","mcpIntegration","mcpEnabled","taskExecutionEnabled","executionHistory","Map","isMCPEnabled","logger","info","initializeMCPIntegration","authContext","SupremeAIMCPIntegration","userId","organizationId","error","processWithMCP","task","sessionToken","startTime","Date","now","taskType","type","createAuthContextFromSession","handleQuestionWithMCP","handleCustomerWithMCP","handleAnalyzeWithMCP","handleTaskExecutionWithMCP","handleLeadPulseWithMCP","fallbackToOriginal","duration","mcpUsed","question","mcpContext","mcpInsights","substring","buildComprehensiveAIContext","generateContextualInsights","response","success","timestamp","data","answer","generateEnhancedAnswer","context","confidence","supremeScore","insights","recommendations","generateActionableRecommendations","customers","enhancedCustomerData","customerInsights","customerCount","length","enhancementPromises","map","customer","email","getCustomerInsights","includeSegments","includePredictions","includeEngagement","enhanced","Promise","all","generateCustomerInsights","totalEnhanced","filter","c","generateCustomerRecommendations","analysisData","analyticsInsights","analysis","orgId","campaignData","customerData","visitorData","allSettled","getCampaignAnalytics","limit","getCustomerSegments","getVisitorBehavior","campaigns","status","value","visitors","generateAnalyticsInsights","generateAnalysisResults","rawData","Object","keys","generateAnalysisRecommendations","taskRequest","parseTaskRequest","actionType","getActionTypeFromTaskType","getOrganizationId","approvalCheck","mandatoryApprovalSystem","requiresApproval","parameters","required","approvalRequestId","createApprovalRequest","getUserRole","description","recordsAffected","estimateAffectedRecords","potentialRevenue","estimateRevenueImpact","riskLevel","determineRiskLevel","reversible","isTaskReversible","taskId","reason","deploymentPhase","phase","trustScore","toFixed","operationRequest","id","Math","random","toString","substr","userRole","operationType","entity","toUpperCase","action","getActionFromTaskType","affectedRecords","sessionId","ipAddress","userAgent","mandatoryApprovalBypassed","bypassReason","safetyAssessment","safetyApprovalSystem","assessOperation","canProceed","requiredApprovals","approvalRequest","requestApproval","approvalId","approvalLevel","blockReasons","restrictions","warnings","executionResult","executeTask","userHistory","get","push","set","executionId","result","rollbackAvailable","auditLog","Error","message","leadpulseData","leadpulseInsights","insightsData","generateLeadPulseInsights","leadpulse","generateLeadPulseRecommendations","totalCount","highValueCustomers","atRiskCustomers","enhancedCount","highValueCount","some","cust","predictions","lifetimeValue","churnRisk","lowerQuestion","toLowerCase","detectedTaskType","requiredPermissions","includes","criteria","scope","userApproval","estimatedDuration","getEstimatedDuration","actionMap","estimates","durations","JSON","stringify","executeSegmentation","executeCampaignOptimization","executeDataAnalysis","executeReporting","executeIntegrationConfig","addToHistory","segments","targetSegment","find","s","name","reduce","largest","current","statistics","totalMembers","segmentResult","engagementRate","growthRate","newMembers","generateSegmentRecommendations","createdAt","toISOString","source","campaignAnalytics","campaignId","targetCampaign","optimizations","expectedImprovements","openRate","performance","clickRate","conversionRate","bestSendTime","abTest","winner","round","improvement","topSegments","join","revenue","potential","optimization","campaignName","currentPerformance","total","expectedImprovement","note","audienceSize","appliedAt","reportId","metrics","totalCustomers","floor","activeUsers","generatedAt","report","title","period","summary","emails","downloadUrl","config","integrationId","settings","endpoint","authentication","dataMapping","testResults","connectionTest","dataValidation","errorHandling","configuredAt","taskToActionMap","user","prisma","findUnique","where","select","warn","revenueEstimates","recipientCount","baseEstimate","multiplier","urgency","businessCritical","customerFacing","baseRiskLevels","externalApi","thirdPartyIntegration","financialImpact","reversibleTasks","irreversibleTasks","hasBackup","role","permissions","default","originalEngine","process","fallbackUsed","segment","stats","campaignUsage","totalCampaigns","emailCampaigns","smsCampaigns","whatsappCampaigns","supremeAIV3WithMCP"],"mappings":"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"}