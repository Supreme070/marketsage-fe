{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/lib/tests/auth-integration.test.ts"],"sourcesContent":["/**\n * Authentication Integration Tests\n * ===============================\n * \n * Tests to verify that the new API-based authentication system\n * works correctly with NextAuth and the backend API\n */\n\nimport { describe, it, expect, beforeEach, jest } from '@jest/globals';\nimport { apiClient } from '../api-client';\n\n// Mock fetch globally\nglobal.fetch = jest.fn() as jest.MockedFunction<typeof fetch>;\n\ndescribe('Authentication Integration', () => {\n  beforeEach(() => {\n    // Clear all mocks before each test\n    jest.clearAllMocks();\n    // Clear localStorage\n    if (typeof window !== 'undefined') {\n      localStorage.clear();\n    }\n  });\n\n  describe('API Client Authentication', () => {\n    it('should login successfully and store token', async () => {\n      const mockResponse = {\n        success: true,\n        data: {\n          user: {\n            id: 'user-123',\n            email: 'test@example.com',\n            name: 'Test User',\n            role: 'USER'\n          },\n          token: 'mock-jwt-token'\n        },\n        message: 'Login successful'\n      };\n\n      (global.fetch as jest.MockedFunction<typeof fetch>).mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockResponse,\n      } as Response);\n\n      const result = await apiClient.login('test@example.com', 'password123');\n\n      expect(result.success).toBe(true);\n      expect(result.data).toEqual(mockResponse.data);\n      expect(global.fetch).toHaveBeenCalledWith(\n        expect.stringContaining('/auth/login'),\n        expect.objectContaining({\n          method: 'POST',\n          headers: expect.objectContaining({\n            'Content-Type': 'application/json'\n          }),\n          body: JSON.stringify({\n            email: 'test@example.com',\n            password: 'password123'\n          })\n        })\n      );\n    });\n\n    it('should register successfully', async () => {\n      const mockResponse = {\n        success: true,\n        data: {\n          id: 'user-123',\n          email: 'test@example.com',\n          name: 'Test User',\n          role: 'USER'\n        },\n        message: 'User registered successfully'\n      };\n\n      (global.fetch as jest.MockedFunction<typeof fetch>).mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockResponse,\n      } as Response);\n\n      const result = await apiClient.register('test@example.com', 'password123', 'Test User');\n\n      expect(result.success).toBe(true);\n      expect(result.data).toEqual(mockResponse.data);\n      expect(global.fetch).toHaveBeenCalledWith(\n        expect.stringContaining('/auth/register'),\n        expect.objectContaining({\n          method: 'POST',\n          body: JSON.stringify({\n            email: 'test@example.com',\n            password: 'password123',\n            name: 'Test User',\n            company: undefined\n          })\n        })\n      );\n    });\n\n    it('should include auth token in headers when token is set', async () => {\n      const mockToken = 'mock-jwt-token';\n      apiClient.setToken(mockToken);\n\n      const mockResponse = {\n        success: true,\n        data: { id: 'user-123', email: 'test@example.com' },\n        message: 'Profile retrieved successfully'\n      };\n\n      (global.fetch as jest.MockedFunction<typeof fetch>).mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockResponse,\n      } as Response);\n\n      await apiClient.getProfile();\n\n      expect(global.fetch).toHaveBeenCalledWith(\n        expect.stringContaining('/auth/profile'),\n        expect.objectContaining({\n          headers: expect.objectContaining({\n            'Authorization': `Bearer ${mockToken}`\n          })\n        })\n      );\n    });\n\n    it('should handle API errors gracefully', async () => {\n      const mockError = {\n        message: 'Invalid credentials',\n        code: 'UNAUTHORIZED'\n      };\n\n      (global.fetch as jest.MockedFunction<typeof fetch>).mockResolvedValueOnce({\n        ok: false,\n        status: 401,\n        json: async () => mockError,\n      } as Response);\n\n      const result = await apiClient.login('test@example.com', 'wrongpassword');\n\n      expect(result.success).toBe(false);\n      expect(result.error).toEqual(\n        expect.objectContaining({\n          code: '401',\n          message: mockError.message\n        })\n      );\n    });\n\n    it('should handle network errors', async () => {\n      (global.fetch as jest.MockedFunction<typeof fetch>).mockRejectedValueOnce(\n        new Error('Network error')\n      );\n\n      const result = await apiClient.login('test@example.com', 'password123');\n\n      expect(result.success).toBe(false);\n      expect(result.error).toEqual(\n        expect.objectContaining({\n          code: 'NETWORK_ERROR',\n          message: 'Network error'\n        })\n      );\n    });\n  });\n\n  describe('Token Management', () => {\n    it('should set and clear tokens correctly', () => {\n      const mockToken = 'mock-jwt-token';\n      \n      // Mock localStorage\n      const mockLocalStorage = {\n        getItem: jest.fn(),\n        setItem: jest.fn(),\n        removeItem: jest.fn(),\n      };\n      Object.defineProperty(window, 'localStorage', {\n        value: mockLocalStorage,\n        writable: true\n      });\n\n      // Set token\n      apiClient.setToken(mockToken);\n      expect(mockLocalStorage.setItem).toHaveBeenCalledWith('access_token', mockToken);\n\n      // Clear token\n      apiClient.clearToken();\n      expect(mockLocalStorage.removeItem).toHaveBeenCalledWith('access_token');\n    });\n  });\n});\n\nexport {};"],"names":["global","fetch","jest","fn","describe","beforeEach","clearAllMocks","window","localStorage","clear","it","mockResponse","success","data","user","id","email","name","role","token","message","mockResolvedValueOnce","ok","json","result","apiClient","login","expect","toBe","toEqual","toHaveBeenCalledWith","stringContaining","objectContaining","method","headers","body","JSON","stringify","password","register","company","undefined","mockToken","setToken","getProfile","mockError","code","status","error","mockRejectedValueOnce","Error","mockLocalStorage","getItem","setItem","removeItem","Object","defineProperty","value","writable","clearToken"],"mappings":"AAAA;;;;;;CAMC;;;;yBAEsD;2BAC7B;AAE1B,sBAAsB;AACtBA,OAAOC,KAAK,GAAGC,aAAI,CAACC,EAAE;AAEtBC,IAAAA,iBAAQ,EAAC,8BAA8B;IACrCC,IAAAA,mBAAU,EAAC;QACT,mCAAmC;QACnCH,aAAI,CAACI,aAAa;QAClB,qBAAqB;QACrB,IAAI,OAAOC,WAAW,aAAa;YACjCC,aAAaC,KAAK;QACpB;IACF;IAEAL,IAAAA,iBAAQ,EAAC,6BAA6B;QACpCM,IAAAA,WAAE,EAAC,6CAA6C;YAC9C,MAAMC,eAAe;gBACnBC,SAAS;gBACTC,MAAM;oBACJC,MAAM;wBACJC,IAAI;wBACJC,OAAO;wBACPC,MAAM;wBACNC,MAAM;oBACR;oBACAC,OAAO;gBACT;gBACAC,SAAS;YACX;YAECpB,OAAOC,KAAK,CAAuCoB,qBAAqB,CAAC;gBACxEC,IAAI;gBACJC,MAAM,UAAYZ;YACpB;YAEA,MAAMa,SAAS,MAAMC,oBAAS,CAACC,KAAK,CAAC,oBAAoB;YAEzDC,IAAAA,eAAM,EAACH,OAAOZ,OAAO,EAAEgB,IAAI,CAAC;YAC5BD,IAAAA,eAAM,EAACH,OAAOX,IAAI,EAAEgB,OAAO,CAAClB,aAAaE,IAAI;YAC7Cc,IAAAA,eAAM,EAAC3B,OAAOC,KAAK,EAAE6B,oBAAoB,CACvCH,eAAM,CAACI,gBAAgB,CAAC,gBACxBJ,eAAM,CAACK,gBAAgB,CAAC;gBACtBC,QAAQ;gBACRC,SAASP,eAAM,CAACK,gBAAgB,CAAC;oBAC/B,gBAAgB;gBAClB;gBACAG,MAAMC,KAAKC,SAAS,CAAC;oBACnBrB,OAAO;oBACPsB,UAAU;gBACZ;YACF;QAEJ;QAEA5B,IAAAA,WAAE,EAAC,gCAAgC;YACjC,MAAMC,eAAe;gBACnBC,SAAS;gBACTC,MAAM;oBACJE,IAAI;oBACJC,OAAO;oBACPC,MAAM;oBACNC,MAAM;gBACR;gBACAE,SAAS;YACX;YAECpB,OAAOC,KAAK,CAAuCoB,qBAAqB,CAAC;gBACxEC,IAAI;gBACJC,MAAM,UAAYZ;YACpB;YAEA,MAAMa,SAAS,MAAMC,oBAAS,CAACc,QAAQ,CAAC,oBAAoB,eAAe;YAE3EZ,IAAAA,eAAM,EAACH,OAAOZ,OAAO,EAAEgB,IAAI,CAAC;YAC5BD,IAAAA,eAAM,EAACH,OAAOX,IAAI,EAAEgB,OAAO,CAAClB,aAAaE,IAAI;YAC7Cc,IAAAA,eAAM,EAAC3B,OAAOC,KAAK,EAAE6B,oBAAoB,CACvCH,eAAM,CAACI,gBAAgB,CAAC,mBACxBJ,eAAM,CAACK,gBAAgB,CAAC;gBACtBC,QAAQ;gBACRE,MAAMC,KAAKC,SAAS,CAAC;oBACnBrB,OAAO;oBACPsB,UAAU;oBACVrB,MAAM;oBACNuB,SAASC;gBACX;YACF;QAEJ;QAEA/B,IAAAA,WAAE,EAAC,0DAA0D;YAC3D,MAAMgC,YAAY;YAClBjB,oBAAS,CAACkB,QAAQ,CAACD;YAEnB,MAAM/B,eAAe;gBACnBC,SAAS;gBACTC,MAAM;oBAAEE,IAAI;oBAAYC,OAAO;gBAAmB;gBAClDI,SAAS;YACX;YAECpB,OAAOC,KAAK,CAAuCoB,qBAAqB,CAAC;gBACxEC,IAAI;gBACJC,MAAM,UAAYZ;YACpB;YAEA,MAAMc,oBAAS,CAACmB,UAAU;YAE1BjB,IAAAA,eAAM,EAAC3B,OAAOC,KAAK,EAAE6B,oBAAoB,CACvCH,eAAM,CAACI,gBAAgB,CAAC,kBACxBJ,eAAM,CAACK,gBAAgB,CAAC;gBACtBE,SAASP,eAAM,CAACK,gBAAgB,CAAC;oBAC/B,iBAAiB,CAAC,OAAO,EAAEU,WAAW;gBACxC;YACF;QAEJ;QAEAhC,IAAAA,WAAE,EAAC,uCAAuC;YACxC,MAAMmC,YAAY;gBAChBzB,SAAS;gBACT0B,MAAM;YACR;YAEC9C,OAAOC,KAAK,CAAuCoB,qBAAqB,CAAC;gBACxEC,IAAI;gBACJyB,QAAQ;gBACRxB,MAAM,UAAYsB;YACpB;YAEA,MAAMrB,SAAS,MAAMC,oBAAS,CAACC,KAAK,CAAC,oBAAoB;YAEzDC,IAAAA,eAAM,EAACH,OAAOZ,OAAO,EAAEgB,IAAI,CAAC;YAC5BD,IAAAA,eAAM,EAACH,OAAOwB,KAAK,EAAEnB,OAAO,CAC1BF,eAAM,CAACK,gBAAgB,CAAC;gBACtBc,MAAM;gBACN1B,SAASyB,UAAUzB,OAAO;YAC5B;QAEJ;QAEAV,IAAAA,WAAE,EAAC,gCAAgC;YAChCV,OAAOC,KAAK,CAAuCgD,qBAAqB,CACvE,IAAIC,MAAM;YAGZ,MAAM1B,SAAS,MAAMC,oBAAS,CAACC,KAAK,CAAC,oBAAoB;YAEzDC,IAAAA,eAAM,EAACH,OAAOZ,OAAO,EAAEgB,IAAI,CAAC;YAC5BD,IAAAA,eAAM,EAACH,OAAOwB,KAAK,EAAEnB,OAAO,CAC1BF,eAAM,CAACK,gBAAgB,CAAC;gBACtBc,MAAM;gBACN1B,SAAS;YACX;QAEJ;IACF;IAEAhB,IAAAA,iBAAQ,EAAC,oBAAoB;QAC3BM,IAAAA,WAAE,EAAC,yCAAyC;YAC1C,MAAMgC,YAAY;YAElB,oBAAoB;YACpB,MAAMS,mBAAmB;gBACvBC,SAASlD,aAAI,CAACC,EAAE;gBAChBkD,SAASnD,aAAI,CAACC,EAAE;gBAChBmD,YAAYpD,aAAI,CAACC,EAAE;YACrB;YACAoD,OAAOC,cAAc,CAACjD,QAAQ,gBAAgB;gBAC5CkD,OAAON;gBACPO,UAAU;YACZ;YAEA,YAAY;YACZjC,oBAAS,CAACkB,QAAQ,CAACD;YACnBf,IAAAA,eAAM,EAACwB,iBAAiBE,OAAO,EAAEvB,oBAAoB,CAAC,gBAAgBY;YAEtE,cAAc;YACdjB,oBAAS,CAACkC,UAAU;YACpBhC,IAAAA,eAAM,EAACwB,iBAAiBG,UAAU,EAAExB,oBAAoB,CAAC;QAC3D;IACF;AACF"}