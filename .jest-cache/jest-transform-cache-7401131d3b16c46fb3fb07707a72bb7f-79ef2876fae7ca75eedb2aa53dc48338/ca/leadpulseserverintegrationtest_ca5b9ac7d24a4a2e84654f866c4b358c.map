{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/__tests__/integration/mcp/leadpulse-server.integration.test.ts"],"sourcesContent":["/**\n * LeadPulse MCP Server Integration Tests\n * \n * These tests verify the LeadPulse MCP server works correctly with real visitor\n * session data, analytics, and real-time tracking capabilities.\n */\n\nimport { describe, beforeAll, afterAll, beforeEach, test, expect } from '@jest/jest';\nimport { LeadPulseMCPServer } from '../../../mcp/servers/leadpulse-server';\nimport { \n  TestDatabaseManager, \n  testPrisma, \n  PerformanceTracker,\n  testConfig\n} from './setup';\nimport { MCPAuthContext } from '../../../mcp/types/mcp-types';\n\ndescribe('LeadPulse MCP Server Integration Tests', () => {\n  let server: LeadPulseMCPServer;\n  let dbManager: TestDatabaseManager;\n  let performanceTracker: PerformanceTracker;\n  let authContext: MCPAuthContext;\n\n  beforeAll(async () => {\n    dbManager = TestDatabaseManager.getInstance();\n    await dbManager.setup();\n    \n    performanceTracker = new PerformanceTracker();\n    \n    server = new LeadPulseMCPServer({\n      rateLimiting: {\n        enabled: false\n      }\n    });\n    \n    authContext = {\n      organizationId: 'test-org-1',\n      userId: 'test-user-1',\n      role: 'ADMIN',\n      permissions: ['read:visitors', 'read:analytics']\n    };\n  }, testConfig.timeouts.database);\n\n  afterAll(async () => {\n    await dbManager.teardown();\n  });\n\n  beforeEach(() => {\n    performanceTracker.reset();\n  });\n\n  describe('Visitor Sessions Data Integrity', () => {\n    test('should verify visitor session data relationships and structure', async () => {\n      const sessions = await testPrisma.mCPVisitorSessions.findMany({\n        include: {\n          organization: true\n        }\n      });\n\n      expect(sessions.length).toBeGreaterThan(0);\n      \n      for (const session of sessions) {\n        // Verify organization relationship\n        expect(session.organization).toBeDefined();\n        expect(session.organizationId).toBe(session.organization.id);\n        \n        // Verify session data integrity\n        expect(session.sessionId).toBeDefined();\n        expect(session.fingerprint).toBeDefined();\n        expect(session.ipAddress).toBeDefined();\n        expect(session.userAgent).toBeDefined();\n        \n        // Verify device information\n        expect(['mobile', 'desktop', 'tablet']).toContain(session.device);\n        expect(session.browser).toBeDefined();\n        expect(session.os).toBeDefined();\n        \n        // Verify location data\n        expect(session.city).toBeDefined();\n        expect(session.country).toBeDefined();\n        expect(session.region).toBeDefined();\n        expect(session.timezone).toBeDefined();\n        \n        // Verify session metrics\n        expect(session.duration).toBeGreaterThan(0);\n        expect(session.pagesViewed).toBeGreaterThan(0);\n        expect(session.interactions).toBeGreaterThanOrEqual(0);\n        expect(session.engagementScore).toBeGreaterThanOrEqual(0);\n        expect(session.engagementScore).toBeLessThanOrEqual(100);\n        expect(session.conversionValue).toBeGreaterThanOrEqual(0);\n        expect(session.bounceRate).toBeGreaterThanOrEqual(0);\n        expect(session.bounceRate).toBeLessThanOrEqual(1);\n        \n        // Verify traffic source\n        expect(session.trafficSource).toBeDefined();\n        expect(session.trafficMedium).toBeDefined();\n        \n        // Verify page views structure\n        if (session.pageViews) {\n          const pageViews = JSON.parse(session.pageViews as string);\n          expect(Array.isArray(pageViews)).toBe(true);\n          expect(pageViews.length).toBe(session.pagesViewed);\n          \n          for (const pageView of pageViews) {\n            expect(pageView).toHaveProperty('url');\n            expect(pageView).toHaveProperty('title');\n            expect(pageView).toHaveProperty('timestamp');\n            expect(pageView).toHaveProperty('timeOnPage');\n            expect(pageView).toHaveProperty('scrollDepth');\n          }\n        }\n        \n        // Verify journey pattern\n        expect(session.journeyPattern).toBeDefined();\n        const validPatterns = [\n          'mobile_first_explorer', 'business_decision_maker', 'quick_browser',\n          'returning_prospect', 'social_media_referral'\n        ];\n        expect(validPatterns).toContain(session.journeyPattern);\n        \n        // Verify characteristics\n        if (session.characteristics) {\n          const characteristics = JSON.parse(session.characteristics as string);\n          expect(Array.isArray(characteristics)).toBe(true);\n        }\n      }\n      \n      console.log(`✅ Verified ${sessions.length} visitor sessions for data integrity`);\n    });\n\n    test('should validate African market visitor patterns', async () => {\n      const sessions = await testPrisma.mCPVisitorSessions.findMany({\n        where: { organizationId: 'test-org-1' }\n      });\n\n      let mobileCount = 0;\n      let africanCountries = new Set();\n      let whatsappTraffic = 0;\n      \n      for (const session of sessions) {\n        // Count mobile usage (should be high for African market)\n        if (session.device === 'mobile') {\n          mobileCount++;\n        }\n        \n        // Track African countries\n        africanCountries.add(session.country);\n        \n        // Count WhatsApp traffic\n        if (session.trafficSource === 'whatsapp') {\n          whatsappTraffic++;\n        }\n      }\n      \n      const mobilePercentage = (mobileCount / sessions.length) * 100;\n      \n      // Verify African market characteristics\n      expect(mobilePercentage).toBeGreaterThan(70); // High mobile usage\n      expect(africanCountries.size).toBeGreaterThan(0);\n      \n      // Check for African countries in the data\n      const expectedAfricanCountries = ['Nigeria', 'Ghana', 'Kenya', 'South Africa', 'Egypt'];\n      const hasAfricanCountries = expectedAfricanCountries.some(country => \n        africanCountries.has(country)\n      );\n      expect(hasAfricanCountries).toBe(true);\n      \n      console.log(`✅ African market validation: ${mobilePercentage.toFixed(1)}% mobile, ${africanCountries.size} countries`);\n    });\n  });\n\n  describe('Real-time Analytics Operations', () => {\n    test('should retrieve real-time visitor analytics', async () => {\n      performanceTracker.start();\n      \n      const result = await server.readResource(\n        'leadpulse://analytics',\n        {\n          organizationId: 'test-org-1',\n          timeRange: 'last_24_hours'\n        },\n        authContext\n      );\n      \n      const duration = performanceTracker.measure('realtimeAnalytics');\n      \n      expect(result.success).toBe(true);\n      expect(result.data).toBeDefined();\n      \n      const data = result.data;\n      expect(data).toHaveProperty('summary');\n      expect(data).toHaveProperty('sessions');\n      expect(data).toHaveProperty('topPages');\n      expect(data).toHaveProperty('deviceBreakdown');\n      expect(data).toHaveProperty('trafficSources');\n      expect(data).toHaveProperty('conversionFunnel');\n      \n      // Verify summary metrics\n      expect(data.summary.totalSessions).toBeGreaterThan(0);\n      expect(data.summary.totalPageViews).toBeGreaterThan(0);\n      expect(data.summary.avgSessionDuration).toBeGreaterThan(0);\n      expect(data.summary.bounceRate).toBeGreaterThanOrEqual(0);\n      expect(data.summary.bounceRate).toBeLessThanOrEqual(100);\n      \n      // Verify device breakdown\n      expect(data.deviceBreakdown).toHaveProperty('mobile');\n      expect(data.deviceBreakdown).toHaveProperty('desktop');\n      expect(data.deviceBreakdown).toHaveProperty('tablet');\n      \n      // Verify traffic sources\n      expect(Array.isArray(data.trafficSources)).toBe(true);\n      for (const source of data.trafficSources) {\n        expect(source).toHaveProperty('source');\n        expect(source).toHaveProperty('sessions');\n        expect(source).toHaveProperty('percentage');\n      }\n      \n      expect(duration).toBeLessThan(testConfig.performance.maxResponseTime);\n      console.log(`✅ Retrieved real-time analytics with ${data.sessions.length} sessions in ${duration}ms`);\n    });\n\n    test('should analyze visitor journey patterns', async () => {\n      performanceTracker.start();\n      \n      const result = await server.readResource(\n        'leadpulse://journey-analysis',\n        {\n          organizationId: 'test-org-1'\n        },\n        authContext\n      );\n      \n      const duration = performanceTracker.measure('journeyAnalysis');\n      \n      expect(result.success).toBe(true);\n      const data = result.data;\n      \n      expect(data).toHaveProperty('journeyPatterns');\n      expect(data).toHaveProperty('commonPaths');\n      expect(data).toHaveProperty('dropOffPoints');\n      expect(data).toHaveProperty('conversionPaths');\n      \n      // Verify journey patterns\n      expect(Array.isArray(data.journeyPatterns)).toBe(true);\n      for (const pattern of data.journeyPatterns) {\n        expect(pattern).toHaveProperty('type');\n        expect(pattern).toHaveProperty('count');\n        expect(pattern).toHaveProperty('avgEngagement');\n        expect(pattern).toHaveProperty('conversionRate');\n        expect(pattern.count).toBeGreaterThan(0);\n      }\n      \n      // Verify common paths\n      expect(Array.isArray(data.commonPaths)).toBe(true);\n      for (const path of data.commonPaths) {\n        expect(path).toHaveProperty('sequence');\n        expect(path).toHaveProperty('frequency');\n        expect(path).toHaveProperty('avgConversionRate');\n        expect(Array.isArray(path.sequence)).toBe(true);\n      }\n      \n      expect(duration).toBeLessThan(testConfig.performance.maxResponseTime);\n      console.log(`✅ Analyzed ${data.journeyPatterns.length} journey patterns in ${duration}ms`);\n    });\n\n    test('should track conversion funnel performance', async () => {\n      performanceTracker.start();\n      \n      const result = await server.readResource(\n        'leadpulse://conversion-funnel',\n        {\n          organizationId: 'test-org-1',\n          funnelType: 'sales'\n        },\n        authContext\n      );\n      \n      const duration = performanceTracker.measure('conversionFunnel');\n      \n      expect(result.success).toBe(true);\n      const data = result.data;\n      \n      expect(data).toHaveProperty('stages');\n      expect(data).toHaveProperty('overallConversionRate');\n      expect(data).toHaveProperty('dropOffAnalysis');\n      \n      // Verify funnel stages\n      expect(Array.isArray(data.stages)).toBe(true);\n      expect(data.stages.length).toBeGreaterThan(0);\n      \n      let previousVisitors = null;\n      for (const stage of data.stages) {\n        expect(stage).toHaveProperty('name');\n        expect(stage).toHaveProperty('visitors');\n        expect(stage).toHaveProperty('conversionRate');\n        expect(stage).toHaveProperty('dropOffRate');\n        \n        expect(stage.visitors).toBeGreaterThanOrEqual(0);\n        expect(stage.conversionRate).toBeGreaterThanOrEqual(0);\n        expect(stage.conversionRate).toBeLessThanOrEqual(100);\n        \n        // Verify funnel logic (each stage should have fewer or equal visitors)\n        if (previousVisitors !== null) {\n          expect(stage.visitors).toBeLessThanOrEqual(previousVisitors);\n        }\n        previousVisitors = stage.visitors;\n      }\n      \n      expect(duration).toBeLessThan(testConfig.performance.maxResponseTime);\n      console.log(`✅ Analyzed conversion funnel with ${data.stages.length} stages in ${duration}ms`);\n    });\n\n    test('should provide visitor geo-analytics', async () => {\n      performanceTracker.start();\n      \n      const result = await server.readResource(\n        'leadpulse://geo-analytics',\n        {\n          organizationId: 'test-org-1'\n        },\n        authContext\n      );\n      \n      const duration = performanceTracker.measure('geoAnalytics');\n      \n      expect(result.success).toBe(true);\n      const data = result.data;\n      \n      expect(data).toHaveProperty('countries');\n      expect(data).toHaveProperty('cities');\n      expect(data).toHaveProperty('regions');\n      expect(data).toHaveProperty('timezones');\n      \n      // Verify countries data\n      expect(Array.isArray(data.countries)).toBe(true);\n      for (const country of data.countries) {\n        expect(country).toHaveProperty('name');\n        expect(country).toHaveProperty('sessions');\n        expect(country).toHaveProperty('percentage');\n        expect(country).toHaveProperty('avgEngagement');\n        expect(country.sessions).toBeGreaterThan(0);\n      }\n      \n      // Verify cities data\n      expect(Array.isArray(data.cities)).toBe(true);\n      for (const city of data.cities) {\n        expect(city).toHaveProperty('name');\n        expect(city).toHaveProperty('country');\n        expect(city).toHaveProperty('sessions');\n        expect(city.sessions).toBeGreaterThan(0);\n      }\n      \n      expect(duration).toBeLessThan(testConfig.performance.maxResponseTime);\n      console.log(`✅ Analyzed geo-analytics for ${data.countries.length} countries in ${duration}ms`);\n    });\n  });\n\n  describe('Session Tracking and Engagement', () => {\n    test('should track live visitor sessions', async () => {\n      performanceTracker.start();\n      \n      const result = await server.readResource(\n        'leadpulse://live-sessions',\n        {\n          organizationId: 'test-org-1'\n        },\n        authContext\n      );\n      \n      const duration = performanceTracker.measure('liveSessions');\n      \n      expect(result.success).toBe(true);\n      const data = result.data;\n      \n      expect(data).toHaveProperty('activeSessions');\n      expect(data).toHaveProperty('totalActive');\n      expect(data).toHaveProperty('recentActivity');\n      \n      // Verify active sessions structure\n      expect(Array.isArray(data.activeSessions)).toBe(true);\n      for (const session of data.activeSessions) {\n        expect(session).toHaveProperty('sessionId');\n        expect(session).toHaveProperty('startTime');\n        expect(session).toHaveProperty('currentPage');\n        expect(session).toHaveProperty('device');\n        expect(session).toHaveProperty('location');\n        expect(session).toHaveProperty('engagementScore');\n      }\n      \n      expect(duration).toBeLessThan(testConfig.performance.maxResponseTime);\n      console.log(`✅ Tracked ${data.activeSessions.length} live sessions in ${duration}ms`);\n    });\n\n    test('should calculate engagement scoring metrics', async () => {\n      performanceTracker.start();\n      \n      const result = await server.readResource(\n        'leadpulse://engagement-scoring',\n        {\n          organizationId: 'test-org-1',\n          timeRange: 'last_7_days'\n        },\n        authContext\n      );\n      \n      const duration = performanceTracker.measure('engagementScoring');\n      \n      expect(result.success).toBe(true);\n      const data = result.data;\n      \n      expect(data).toHaveProperty('scoringModel');\n      expect(data).toHaveProperty('scoreDistribution');\n      expect(data).toHaveProperty('topEngagedSessions');\n      expect(data).toHaveProperty('engagementFactors');\n      \n      // Verify scoring model\n      const model = data.scoringModel;\n      expect(model).toHaveProperty('timeOnSiteWeight');\n      expect(model).toHaveProperty('pageViewsWeight');\n      expect(model).toHaveProperty('interactionsWeight');\n      expect(model).toHaveProperty('scrollDepthWeight');\n      \n      // Verify score distribution\n      expect(Array.isArray(data.scoreDistribution)).toBe(true);\n      for (const bucket of data.scoreDistribution) {\n        expect(bucket).toHaveProperty('range');\n        expect(bucket).toHaveProperty('count');\n        expect(bucket).toHaveProperty('percentage');\n      }\n      \n      // Verify top engaged sessions\n      expect(Array.isArray(data.topEngagedSessions)).toBe(true);\n      for (const session of data.topEngagedSessions) {\n        expect(session).toHaveProperty('sessionId');\n        expect(session).toHaveProperty('engagementScore');\n        expect(session).toHaveProperty('duration');\n        expect(session).toHaveProperty('interactions');\n        expect(session.engagementScore).toBeGreaterThan(70); // High engagement\n      }\n      \n      expect(duration).toBeLessThan(testConfig.performance.maxResponseTime);\n      console.log(`✅ Calculated engagement scoring in ${duration}ms`);\n    });\n  });\n\n  describe('Performance and Real-time Capabilities', () => {\n    test('should handle high-frequency analytics queries', async () => {\n      const queries = [\n        'leadpulse://analytics',\n        'leadpulse://live-sessions', \n        'leadpulse://geo-analytics',\n        'leadpulse://engagement-scoring'\n      ];\n      \n      performanceTracker.start();\n      \n      const promises = queries.map(query => \n        server.readResource(\n          query,\n          { organizationId: 'test-org-1' },\n          authContext\n        )\n      );\n      \n      const results = await Promise.all(promises);\n      const duration = performanceTracker.measure('highFrequencyQueries');\n      \n      // Verify all queries succeeded\n      for (const result of results) {\n        expect(result.success).toBe(true);\n        expect(result.data).toBeDefined();\n      }\n      \n      expect(duration).toBeLessThan(testConfig.performance.maxResponseTime * 2);\n      console.log(`✅ Handled ${queries.length} high-frequency queries in ${duration}ms`);\n    });\n\n    test('should validate real-time data freshness', async () => {\n      // Get current session data\n      const result = await server.readResource(\n        'leadpulse://analytics',\n        {\n          organizationId: 'test-org-1',\n          timeRange: 'last_1_hour'\n        },\n        authContext\n      );\n      \n      expect(result.success).toBe(true);\n      const data = result.data;\n      \n      // Verify data freshness\n      const now = new Date();\n      const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000);\n      \n      for (const session of data.sessions) {\n        const sessionTime = new Date(session.timestamp);\n        expect(sessionTime.getTime()).toBeGreaterThanOrEqual(oneHourAgo.getTime());\n        expect(sessionTime.getTime()).toBeLessThanOrEqual(now.getTime());\n      }\n      \n      console.log(`✅ Validated real-time data freshness for ${data.sessions.length} sessions`);\n    });\n\n    test('should measure complex analytics query performance', async () => {\n      const startTime = Date.now();\n      \n      // Complex query with multiple joins and aggregations\n      const sessions = await testPrisma.mCPVisitorSessions.groupBy({\n        by: ['journeyPattern', 'device', 'country'],\n        _count: { sessionId: true },\n        _avg: { \n          engagementScore: true,\n          duration: true,\n          conversionValue: true\n        },\n        where: {\n          organizationId: 'test-org-1',\n          sessionStart: {\n            gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) // Last 7 days\n          }\n        },\n        orderBy: {\n          _count: {\n            sessionId: 'desc'\n          }\n        }\n      });\n      \n      const queryDuration = Date.now() - startTime;\n      \n      expect(sessions.length).toBeGreaterThan(0);\n      expect(queryDuration).toBeLessThan(testConfig.performance.maxQueryTime);\n      \n      console.log(`✅ Complex analytics query: ${sessions.length} groups in ${queryDuration}ms`);\n    });\n  });\n\n  describe('Data Quality and Consistency', () => {\n    test('should validate session data consistency across operations', async () => {\n      // Get analytics summary\n      const analyticsResult = await server.readResource(\n        'leadpulse://analytics',\n        { organizationId: 'test-org-1' },\n        authContext\n      );\n      \n      // Get live sessions\n      const liveResult = await server.readResource(\n        'leadpulse://live-sessions',\n        { organizationId: 'test-org-1' },\n        authContext\n      );\n      \n      expect(analyticsResult.success).toBe(true);\n      expect(liveResult.success).toBe(true);\n      \n      const analytics = analyticsResult.data;\n      const live = liveResult.data;\n      \n      // Verify data consistency\n      expect(analytics.summary.totalSessions).toBeGreaterThanOrEqual(live.totalActive);\n      \n      // Live sessions should be subset of all sessions\n      for (const liveSession of live.activeSessions) {\n        expect(liveSession.sessionId).toBeDefined();\n        expect(liveSession.engagementScore).toBeGreaterThanOrEqual(0);\n        expect(liveSession.engagementScore).toBeLessThanOrEqual(100);\n      }\n      \n      console.log('✅ Data consistency validated across analytics and live sessions');\n    });\n\n    test('should ensure engagement score calculations are accurate', async () => {\n      // Get sessions with engagement scores\n      const sessions = await testPrisma.mCPVisitorSessions.findMany({\n        where: { organizationId: 'test-org-1' },\n        take: 10\n      });\n\n      for (const session of sessions) {\n        // Verify engagement score logic\n        let expectedScore = 0;\n        \n        // Base score from page views\n        expectedScore += session.pagesViewed * 5;\n        \n        // Time on site bonus\n        const avgTimePerPage = session.duration / session.pagesViewed;\n        if (avgTimePerPage > 60) expectedScore += 20;\n        else if (avgTimePerPage > 30) expectedScore += 10;\n        \n        // Interaction bonus\n        expectedScore += session.interactions * 5;\n        \n        // Conversion bonus\n        if (session.hasConverted) expectedScore += 30;\n        \n        // The actual score should be in reasonable range of expected\n        const scoreDifference = Math.abs(session.engagementScore - Math.min(100, expectedScore));\n        expect(scoreDifference).toBeLessThan(20); // Allow some variance for additional factors\n      }\n      \n      console.log(`✅ Validated engagement score calculations for ${sessions.length} sessions`);\n    });\n  });\n\n  afterAll(() => {\n    const stats = performanceTracker.getAllStats();\n    console.log('\\n📊 LeadPulse Server Performance Summary:');\n    for (const [operation, operationStats] of Object.entries(stats)) {\n      console.log(`  ${operation}: avg ${operationStats.avg}ms, min ${operationStats.min}ms, max ${operationStats.max}ms`);\n    }\n  });\n});\n"],"names":["describe","server","dbManager","performanceTracker","authContext","beforeAll","TestDatabaseManager","getInstance","setup","PerformanceTracker","LeadPulseMCPServer","rateLimiting","enabled","organizationId","userId","role","permissions","testConfig","timeouts","database","afterAll","teardown","beforeEach","reset","test","sessions","testPrisma","mCPVisitorSessions","findMany","include","organization","expect","length","toBeGreaterThan","session","toBeDefined","toBe","id","sessionId","fingerprint","ipAddress","userAgent","toContain","device","browser","os","city","country","region","timezone","duration","pagesViewed","interactions","toBeGreaterThanOrEqual","engagementScore","toBeLessThanOrEqual","conversionValue","bounceRate","trafficSource","trafficMedium","pageViews","JSON","parse","Array","isArray","pageView","toHaveProperty","journeyPattern","validPatterns","characteristics","console","log","where","mobileCount","africanCountries","Set","whatsappTraffic","add","mobilePercentage","size","expectedAfricanCountries","hasAfricanCountries","some","has","toFixed","start","result","readResource","timeRange","measure","success","data","summary","totalSessions","totalPageViews","avgSessionDuration","deviceBreakdown","trafficSources","source","toBeLessThan","performance","maxResponseTime","journeyPatterns","pattern","count","commonPaths","path","sequence","funnelType","stages","previousVisitors","stage","visitors","conversionRate","countries","cities","activeSessions","model","scoringModel","scoreDistribution","bucket","topEngagedSessions","queries","promises","map","query","results","Promise","all","now","Date","oneHourAgo","getTime","sessionTime","timestamp","startTime","groupBy","by","_count","_avg","sessionStart","gte","orderBy","queryDuration","maxQueryTime","analyticsResult","liveResult","analytics","live","totalActive","liveSession","take","expectedScore","avgTimePerPage","hasConverted","scoreDifference","Math","abs","min","stats","getAllStats","operation","operationStats","Object","entries","avg","max"],"mappings":"AAAA;;;;;CAKC;;;;sBAEuE;iCACrC;uBAM5B;AAGPA,IAAAA,cAAQ,EAAC,0CAA0C;IACjD,IAAIC;IACJ,IAAIC;IACJ,IAAIC;IACJ,IAAIC;IAEJC,IAAAA,eAAS,EAAC;QACRH,YAAYI,0BAAmB,CAACC,WAAW;QAC3C,MAAML,UAAUM,KAAK;QAErBL,qBAAqB,IAAIM,yBAAkB;QAE3CR,SAAS,IAAIS,mCAAkB,CAAC;YAC9BC,cAAc;gBACZC,SAAS;YACX;QACF;QAEAR,cAAc;YACZS,gBAAgB;YAChBC,QAAQ;YACRC,MAAM;YACNC,aAAa;gBAAC;gBAAiB;aAAiB;QAClD;IACF,GAAGC,iBAAU,CAACC,QAAQ,CAACC,QAAQ;IAE/BC,IAAAA,cAAQ,EAAC;QACP,MAAMlB,UAAUmB,QAAQ;IAC1B;IAEAC,IAAAA,gBAAU,EAAC;QACTnB,mBAAmBoB,KAAK;IAC1B;IAEAvB,IAAAA,cAAQ,EAAC,mCAAmC;QAC1CwB,IAAAA,UAAI,EAAC,kEAAkE;YACrE,MAAMC,WAAW,MAAMC,iBAAU,CAACC,kBAAkB,CAACC,QAAQ,CAAC;gBAC5DC,SAAS;oBACPC,cAAc;gBAChB;YACF;YAEAC,IAAAA,YAAM,EAACN,SAASO,MAAM,EAAEC,eAAe,CAAC;YAExC,KAAK,MAAMC,WAAWT,SAAU;gBAC9B,mCAAmC;gBACnCM,IAAAA,YAAM,EAACG,QAAQJ,YAAY,EAAEK,WAAW;gBACxCJ,IAAAA,YAAM,EAACG,QAAQrB,cAAc,EAAEuB,IAAI,CAACF,QAAQJ,YAAY,CAACO,EAAE;gBAE3D,gCAAgC;gBAChCN,IAAAA,YAAM,EAACG,QAAQI,SAAS,EAAEH,WAAW;gBACrCJ,IAAAA,YAAM,EAACG,QAAQK,WAAW,EAAEJ,WAAW;gBACvCJ,IAAAA,YAAM,EAACG,QAAQM,SAAS,EAAEL,WAAW;gBACrCJ,IAAAA,YAAM,EAACG,QAAQO,SAAS,EAAEN,WAAW;gBAErC,4BAA4B;gBAC5BJ,IAAAA,YAAM,EAAC;oBAAC;oBAAU;oBAAW;iBAAS,EAAEW,SAAS,CAACR,QAAQS,MAAM;gBAChEZ,IAAAA,YAAM,EAACG,QAAQU,OAAO,EAAET,WAAW;gBACnCJ,IAAAA,YAAM,EAACG,QAAQW,EAAE,EAAEV,WAAW;gBAE9B,uBAAuB;gBACvBJ,IAAAA,YAAM,EAACG,QAAQY,IAAI,EAAEX,WAAW;gBAChCJ,IAAAA,YAAM,EAACG,QAAQa,OAAO,EAAEZ,WAAW;gBACnCJ,IAAAA,YAAM,EAACG,QAAQc,MAAM,EAAEb,WAAW;gBAClCJ,IAAAA,YAAM,EAACG,QAAQe,QAAQ,EAAEd,WAAW;gBAEpC,yBAAyB;gBACzBJ,IAAAA,YAAM,EAACG,QAAQgB,QAAQ,EAAEjB,eAAe,CAAC;gBACzCF,IAAAA,YAAM,EAACG,QAAQiB,WAAW,EAAElB,eAAe,CAAC;gBAC5CF,IAAAA,YAAM,EAACG,QAAQkB,YAAY,EAAEC,sBAAsB,CAAC;gBACpDtB,IAAAA,YAAM,EAACG,QAAQoB,eAAe,EAAED,sBAAsB,CAAC;gBACvDtB,IAAAA,YAAM,EAACG,QAAQoB,eAAe,EAAEC,mBAAmB,CAAC;gBACpDxB,IAAAA,YAAM,EAACG,QAAQsB,eAAe,EAAEH,sBAAsB,CAAC;gBACvDtB,IAAAA,YAAM,EAACG,QAAQuB,UAAU,EAAEJ,sBAAsB,CAAC;gBAClDtB,IAAAA,YAAM,EAACG,QAAQuB,UAAU,EAAEF,mBAAmB,CAAC;gBAE/C,wBAAwB;gBACxBxB,IAAAA,YAAM,EAACG,QAAQwB,aAAa,EAAEvB,WAAW;gBACzCJ,IAAAA,YAAM,EAACG,QAAQyB,aAAa,EAAExB,WAAW;gBAEzC,8BAA8B;gBAC9B,IAAID,QAAQ0B,SAAS,EAAE;oBACrB,MAAMA,YAAYC,KAAKC,KAAK,CAAC5B,QAAQ0B,SAAS;oBAC9C7B,IAAAA,YAAM,EAACgC,MAAMC,OAAO,CAACJ,YAAYxB,IAAI,CAAC;oBACtCL,IAAAA,YAAM,EAAC6B,UAAU5B,MAAM,EAAEI,IAAI,CAACF,QAAQiB,WAAW;oBAEjD,KAAK,MAAMc,YAAYL,UAAW;wBAChC7B,IAAAA,YAAM,EAACkC,UAAUC,cAAc,CAAC;wBAChCnC,IAAAA,YAAM,EAACkC,UAAUC,cAAc,CAAC;wBAChCnC,IAAAA,YAAM,EAACkC,UAAUC,cAAc,CAAC;wBAChCnC,IAAAA,YAAM,EAACkC,UAAUC,cAAc,CAAC;wBAChCnC,IAAAA,YAAM,EAACkC,UAAUC,cAAc,CAAC;oBAClC;gBACF;gBAEA,yBAAyB;gBACzBnC,IAAAA,YAAM,EAACG,QAAQiC,cAAc,EAAEhC,WAAW;gBAC1C,MAAMiC,gBAAgB;oBACpB;oBAAyB;oBAA2B;oBACpD;oBAAsB;iBACvB;gBACDrC,IAAAA,YAAM,EAACqC,eAAe1B,SAAS,CAACR,QAAQiC,cAAc;gBAEtD,yBAAyB;gBACzB,IAAIjC,QAAQmC,eAAe,EAAE;oBAC3B,MAAMA,kBAAkBR,KAAKC,KAAK,CAAC5B,QAAQmC,eAAe;oBAC1DtC,IAAAA,YAAM,EAACgC,MAAMC,OAAO,CAACK,kBAAkBjC,IAAI,CAAC;gBAC9C;YACF;YAEAkC,QAAQC,GAAG,CAAC,CAAC,WAAW,EAAE9C,SAASO,MAAM,CAAC,oCAAoC,CAAC;QACjF;QAEAR,IAAAA,UAAI,EAAC,mDAAmD;YACtD,MAAMC,WAAW,MAAMC,iBAAU,CAACC,kBAAkB,CAACC,QAAQ,CAAC;gBAC5D4C,OAAO;oBAAE3D,gBAAgB;gBAAa;YACxC;YAEA,IAAI4D,cAAc;YAClB,IAAIC,mBAAmB,IAAIC;YAC3B,IAAIC,kBAAkB;YAEtB,KAAK,MAAM1C,WAAWT,SAAU;gBAC9B,yDAAyD;gBACzD,IAAIS,QAAQS,MAAM,KAAK,UAAU;oBAC/B8B;gBACF;gBAEA,0BAA0B;gBAC1BC,iBAAiBG,GAAG,CAAC3C,QAAQa,OAAO;gBAEpC,yBAAyB;gBACzB,IAAIb,QAAQwB,aAAa,KAAK,YAAY;oBACxCkB;gBACF;YACF;YAEA,MAAME,mBAAmB,AAACL,cAAchD,SAASO,MAAM,GAAI;YAE3D,wCAAwC;YACxCD,IAAAA,YAAM,EAAC+C,kBAAkB7C,eAAe,CAAC,KAAK,oBAAoB;YAClEF,IAAAA,YAAM,EAAC2C,iBAAiBK,IAAI,EAAE9C,eAAe,CAAC;YAE9C,0CAA0C;YAC1C,MAAM+C,2BAA2B;gBAAC;gBAAW;gBAAS;gBAAS;gBAAgB;aAAQ;YACvF,MAAMC,sBAAsBD,yBAAyBE,IAAI,CAACnC,CAAAA,UACxD2B,iBAAiBS,GAAG,CAACpC;YAEvBhB,IAAAA,YAAM,EAACkD,qBAAqB7C,IAAI,CAAC;YAEjCkC,QAAQC,GAAG,CAAC,CAAC,6BAA6B,EAAEO,iBAAiBM,OAAO,CAAC,GAAG,UAAU,EAAEV,iBAAiBK,IAAI,CAAC,UAAU,CAAC;QACvH;IACF;IAEA/E,IAAAA,cAAQ,EAAC,kCAAkC;QACzCwB,IAAAA,UAAI,EAAC,+CAA+C;YAClDrB,mBAAmBkF,KAAK;YAExB,MAAMC,SAAS,MAAMrF,OAAOsF,YAAY,CACtC,yBACA;gBACE1E,gBAAgB;gBAChB2E,WAAW;YACb,GACApF;YAGF,MAAM8C,WAAW/C,mBAAmBsF,OAAO,CAAC;YAE5C1D,IAAAA,YAAM,EAACuD,OAAOI,OAAO,EAAEtD,IAAI,CAAC;YAC5BL,IAAAA,YAAM,EAACuD,OAAOK,IAAI,EAAExD,WAAW;YAE/B,MAAMwD,OAAOL,OAAOK,IAAI;YACxB5D,IAAAA,YAAM,EAAC4D,MAAMzB,cAAc,CAAC;YAC5BnC,IAAAA,YAAM,EAAC4D,MAAMzB,cAAc,CAAC;YAC5BnC,IAAAA,YAAM,EAAC4D,MAAMzB,cAAc,CAAC;YAC5BnC,IAAAA,YAAM,EAAC4D,MAAMzB,cAAc,CAAC;YAC5BnC,IAAAA,YAAM,EAAC4D,MAAMzB,cAAc,CAAC;YAC5BnC,IAAAA,YAAM,EAAC4D,MAAMzB,cAAc,CAAC;YAE5B,yBAAyB;YACzBnC,IAAAA,YAAM,EAAC4D,KAAKC,OAAO,CAACC,aAAa,EAAE5D,eAAe,CAAC;YACnDF,IAAAA,YAAM,EAAC4D,KAAKC,OAAO,CAACE,cAAc,EAAE7D,eAAe,CAAC;YACpDF,IAAAA,YAAM,EAAC4D,KAAKC,OAAO,CAACG,kBAAkB,EAAE9D,eAAe,CAAC;YACxDF,IAAAA,YAAM,EAAC4D,KAAKC,OAAO,CAACnC,UAAU,EAAEJ,sBAAsB,CAAC;YACvDtB,IAAAA,YAAM,EAAC4D,KAAKC,OAAO,CAACnC,UAAU,EAAEF,mBAAmB,CAAC;YAEpD,0BAA0B;YAC1BxB,IAAAA,YAAM,EAAC4D,KAAKK,eAAe,EAAE9B,cAAc,CAAC;YAC5CnC,IAAAA,YAAM,EAAC4D,KAAKK,eAAe,EAAE9B,cAAc,CAAC;YAC5CnC,IAAAA,YAAM,EAAC4D,KAAKK,eAAe,EAAE9B,cAAc,CAAC;YAE5C,yBAAyB;YACzBnC,IAAAA,YAAM,EAACgC,MAAMC,OAAO,CAAC2B,KAAKM,cAAc,GAAG7D,IAAI,CAAC;YAChD,KAAK,MAAM8D,UAAUP,KAAKM,cAAc,CAAE;gBACxClE,IAAAA,YAAM,EAACmE,QAAQhC,cAAc,CAAC;gBAC9BnC,IAAAA,YAAM,EAACmE,QAAQhC,cAAc,CAAC;gBAC9BnC,IAAAA,YAAM,EAACmE,QAAQhC,cAAc,CAAC;YAChC;YAEAnC,IAAAA,YAAM,EAACmB,UAAUiD,YAAY,CAAClF,iBAAU,CAACmF,WAAW,CAACC,eAAe;YACpE/B,QAAQC,GAAG,CAAC,CAAC,qCAAqC,EAAEoB,KAAKlE,QAAQ,CAACO,MAAM,CAAC,aAAa,EAAEkB,SAAS,EAAE,CAAC;QACtG;QAEA1B,IAAAA,UAAI,EAAC,2CAA2C;YAC9CrB,mBAAmBkF,KAAK;YAExB,MAAMC,SAAS,MAAMrF,OAAOsF,YAAY,CACtC,gCACA;gBACE1E,gBAAgB;YAClB,GACAT;YAGF,MAAM8C,WAAW/C,mBAAmBsF,OAAO,CAAC;YAE5C1D,IAAAA,YAAM,EAACuD,OAAOI,OAAO,EAAEtD,IAAI,CAAC;YAC5B,MAAMuD,OAAOL,OAAOK,IAAI;YAExB5D,IAAAA,YAAM,EAAC4D,MAAMzB,cAAc,CAAC;YAC5BnC,IAAAA,YAAM,EAAC4D,MAAMzB,cAAc,CAAC;YAC5BnC,IAAAA,YAAM,EAAC4D,MAAMzB,cAAc,CAAC;YAC5BnC,IAAAA,YAAM,EAAC4D,MAAMzB,cAAc,CAAC;YAE5B,0BAA0B;YAC1BnC,IAAAA,YAAM,EAACgC,MAAMC,OAAO,CAAC2B,KAAKW,eAAe,GAAGlE,IAAI,CAAC;YACjD,KAAK,MAAMmE,WAAWZ,KAAKW,eAAe,CAAE;gBAC1CvE,IAAAA,YAAM,EAACwE,SAASrC,cAAc,CAAC;gBAC/BnC,IAAAA,YAAM,EAACwE,SAASrC,cAAc,CAAC;gBAC/BnC,IAAAA,YAAM,EAACwE,SAASrC,cAAc,CAAC;gBAC/BnC,IAAAA,YAAM,EAACwE,SAASrC,cAAc,CAAC;gBAC/BnC,IAAAA,YAAM,EAACwE,QAAQC,KAAK,EAAEvE,eAAe,CAAC;YACxC;YAEA,sBAAsB;YACtBF,IAAAA,YAAM,EAACgC,MAAMC,OAAO,CAAC2B,KAAKc,WAAW,GAAGrE,IAAI,CAAC;YAC7C,KAAK,MAAMsE,QAAQf,KAAKc,WAAW,CAAE;gBACnC1E,IAAAA,YAAM,EAAC2E,MAAMxC,cAAc,CAAC;gBAC5BnC,IAAAA,YAAM,EAAC2E,MAAMxC,cAAc,CAAC;gBAC5BnC,IAAAA,YAAM,EAAC2E,MAAMxC,cAAc,CAAC;gBAC5BnC,IAAAA,YAAM,EAACgC,MAAMC,OAAO,CAAC0C,KAAKC,QAAQ,GAAGvE,IAAI,CAAC;YAC5C;YAEAL,IAAAA,YAAM,EAACmB,UAAUiD,YAAY,CAAClF,iBAAU,CAACmF,WAAW,CAACC,eAAe;YACpE/B,QAAQC,GAAG,CAAC,CAAC,WAAW,EAAEoB,KAAKW,eAAe,CAACtE,MAAM,CAAC,qBAAqB,EAAEkB,SAAS,EAAE,CAAC;QAC3F;QAEA1B,IAAAA,UAAI,EAAC,8CAA8C;YACjDrB,mBAAmBkF,KAAK;YAExB,MAAMC,SAAS,MAAMrF,OAAOsF,YAAY,CACtC,iCACA;gBACE1E,gBAAgB;gBAChB+F,YAAY;YACd,GACAxG;YAGF,MAAM8C,WAAW/C,mBAAmBsF,OAAO,CAAC;YAE5C1D,IAAAA,YAAM,EAACuD,OAAOI,OAAO,EAAEtD,IAAI,CAAC;YAC5B,MAAMuD,OAAOL,OAAOK,IAAI;YAExB5D,IAAAA,YAAM,EAAC4D,MAAMzB,cAAc,CAAC;YAC5BnC,IAAAA,YAAM,EAAC4D,MAAMzB,cAAc,CAAC;YAC5BnC,IAAAA,YAAM,EAAC4D,MAAMzB,cAAc,CAAC;YAE5B,uBAAuB;YACvBnC,IAAAA,YAAM,EAACgC,MAAMC,OAAO,CAAC2B,KAAKkB,MAAM,GAAGzE,IAAI,CAAC;YACxCL,IAAAA,YAAM,EAAC4D,KAAKkB,MAAM,CAAC7E,MAAM,EAAEC,eAAe,CAAC;YAE3C,IAAI6E,mBAAmB;YACvB,KAAK,MAAMC,SAASpB,KAAKkB,MAAM,CAAE;gBAC/B9E,IAAAA,YAAM,EAACgF,OAAO7C,cAAc,CAAC;gBAC7BnC,IAAAA,YAAM,EAACgF,OAAO7C,cAAc,CAAC;gBAC7BnC,IAAAA,YAAM,EAACgF,OAAO7C,cAAc,CAAC;gBAC7BnC,IAAAA,YAAM,EAACgF,OAAO7C,cAAc,CAAC;gBAE7BnC,IAAAA,YAAM,EAACgF,MAAMC,QAAQ,EAAE3D,sBAAsB,CAAC;gBAC9CtB,IAAAA,YAAM,EAACgF,MAAME,cAAc,EAAE5D,sBAAsB,CAAC;gBACpDtB,IAAAA,YAAM,EAACgF,MAAME,cAAc,EAAE1D,mBAAmB,CAAC;gBAEjD,uEAAuE;gBACvE,IAAIuD,qBAAqB,MAAM;oBAC7B/E,IAAAA,YAAM,EAACgF,MAAMC,QAAQ,EAAEzD,mBAAmB,CAACuD;gBAC7C;gBACAA,mBAAmBC,MAAMC,QAAQ;YACnC;YAEAjF,IAAAA,YAAM,EAACmB,UAAUiD,YAAY,CAAClF,iBAAU,CAACmF,WAAW,CAACC,eAAe;YACpE/B,QAAQC,GAAG,CAAC,CAAC,kCAAkC,EAAEoB,KAAKkB,MAAM,CAAC7E,MAAM,CAAC,WAAW,EAAEkB,SAAS,EAAE,CAAC;QAC/F;QAEA1B,IAAAA,UAAI,EAAC,wCAAwC;YAC3CrB,mBAAmBkF,KAAK;YAExB,MAAMC,SAAS,MAAMrF,OAAOsF,YAAY,CACtC,6BACA;gBACE1E,gBAAgB;YAClB,GACAT;YAGF,MAAM8C,WAAW/C,mBAAmBsF,OAAO,CAAC;YAE5C1D,IAAAA,YAAM,EAACuD,OAAOI,OAAO,EAAEtD,IAAI,CAAC;YAC5B,MAAMuD,OAAOL,OAAOK,IAAI;YAExB5D,IAAAA,YAAM,EAAC4D,MAAMzB,cAAc,CAAC;YAC5BnC,IAAAA,YAAM,EAAC4D,MAAMzB,cAAc,CAAC;YAC5BnC,IAAAA,YAAM,EAAC4D,MAAMzB,cAAc,CAAC;YAC5BnC,IAAAA,YAAM,EAAC4D,MAAMzB,cAAc,CAAC;YAE5B,wBAAwB;YACxBnC,IAAAA,YAAM,EAACgC,MAAMC,OAAO,CAAC2B,KAAKuB,SAAS,GAAG9E,IAAI,CAAC;YAC3C,KAAK,MAAMW,WAAW4C,KAAKuB,SAAS,CAAE;gBACpCnF,IAAAA,YAAM,EAACgB,SAASmB,cAAc,CAAC;gBAC/BnC,IAAAA,YAAM,EAACgB,SAASmB,cAAc,CAAC;gBAC/BnC,IAAAA,YAAM,EAACgB,SAASmB,cAAc,CAAC;gBAC/BnC,IAAAA,YAAM,EAACgB,SAASmB,cAAc,CAAC;gBAC/BnC,IAAAA,YAAM,EAACgB,QAAQtB,QAAQ,EAAEQ,eAAe,CAAC;YAC3C;YAEA,qBAAqB;YACrBF,IAAAA,YAAM,EAACgC,MAAMC,OAAO,CAAC2B,KAAKwB,MAAM,GAAG/E,IAAI,CAAC;YACxC,KAAK,MAAMU,QAAQ6C,KAAKwB,MAAM,CAAE;gBAC9BpF,IAAAA,YAAM,EAACe,MAAMoB,cAAc,CAAC;gBAC5BnC,IAAAA,YAAM,EAACe,MAAMoB,cAAc,CAAC;gBAC5BnC,IAAAA,YAAM,EAACe,MAAMoB,cAAc,CAAC;gBAC5BnC,IAAAA,YAAM,EAACe,KAAKrB,QAAQ,EAAEQ,eAAe,CAAC;YACxC;YAEAF,IAAAA,YAAM,EAACmB,UAAUiD,YAAY,CAAClF,iBAAU,CAACmF,WAAW,CAACC,eAAe;YACpE/B,QAAQC,GAAG,CAAC,CAAC,6BAA6B,EAAEoB,KAAKuB,SAAS,CAAClF,MAAM,CAAC,cAAc,EAAEkB,SAAS,EAAE,CAAC;QAChG;IACF;IAEAlD,IAAAA,cAAQ,EAAC,mCAAmC;QAC1CwB,IAAAA,UAAI,EAAC,sCAAsC;YACzCrB,mBAAmBkF,KAAK;YAExB,MAAMC,SAAS,MAAMrF,OAAOsF,YAAY,CACtC,6BACA;gBACE1E,gBAAgB;YAClB,GACAT;YAGF,MAAM8C,WAAW/C,mBAAmBsF,OAAO,CAAC;YAE5C1D,IAAAA,YAAM,EAACuD,OAAOI,OAAO,EAAEtD,IAAI,CAAC;YAC5B,MAAMuD,OAAOL,OAAOK,IAAI;YAExB5D,IAAAA,YAAM,EAAC4D,MAAMzB,cAAc,CAAC;YAC5BnC,IAAAA,YAAM,EAAC4D,MAAMzB,cAAc,CAAC;YAC5BnC,IAAAA,YAAM,EAAC4D,MAAMzB,cAAc,CAAC;YAE5B,mCAAmC;YACnCnC,IAAAA,YAAM,EAACgC,MAAMC,OAAO,CAAC2B,KAAKyB,cAAc,GAAGhF,IAAI,CAAC;YAChD,KAAK,MAAMF,WAAWyD,KAAKyB,cAAc,CAAE;gBACzCrF,IAAAA,YAAM,EAACG,SAASgC,cAAc,CAAC;gBAC/BnC,IAAAA,YAAM,EAACG,SAASgC,cAAc,CAAC;gBAC/BnC,IAAAA,YAAM,EAACG,SAASgC,cAAc,CAAC;gBAC/BnC,IAAAA,YAAM,EAACG,SAASgC,cAAc,CAAC;gBAC/BnC,IAAAA,YAAM,EAACG,SAASgC,cAAc,CAAC;gBAC/BnC,IAAAA,YAAM,EAACG,SAASgC,cAAc,CAAC;YACjC;YAEAnC,IAAAA,YAAM,EAACmB,UAAUiD,YAAY,CAAClF,iBAAU,CAACmF,WAAW,CAACC,eAAe;YACpE/B,QAAQC,GAAG,CAAC,CAAC,UAAU,EAAEoB,KAAKyB,cAAc,CAACpF,MAAM,CAAC,kBAAkB,EAAEkB,SAAS,EAAE,CAAC;QACtF;QAEA1B,IAAAA,UAAI,EAAC,+CAA+C;YAClDrB,mBAAmBkF,KAAK;YAExB,MAAMC,SAAS,MAAMrF,OAAOsF,YAAY,CACtC,kCACA;gBACE1E,gBAAgB;gBAChB2E,WAAW;YACb,GACApF;YAGF,MAAM8C,WAAW/C,mBAAmBsF,OAAO,CAAC;YAE5C1D,IAAAA,YAAM,EAACuD,OAAOI,OAAO,EAAEtD,IAAI,CAAC;YAC5B,MAAMuD,OAAOL,OAAOK,IAAI;YAExB5D,IAAAA,YAAM,EAAC4D,MAAMzB,cAAc,CAAC;YAC5BnC,IAAAA,YAAM,EAAC4D,MAAMzB,cAAc,CAAC;YAC5BnC,IAAAA,YAAM,EAAC4D,MAAMzB,cAAc,CAAC;YAC5BnC,IAAAA,YAAM,EAAC4D,MAAMzB,cAAc,CAAC;YAE5B,uBAAuB;YACvB,MAAMmD,QAAQ1B,KAAK2B,YAAY;YAC/BvF,IAAAA,YAAM,EAACsF,OAAOnD,cAAc,CAAC;YAC7BnC,IAAAA,YAAM,EAACsF,OAAOnD,cAAc,CAAC;YAC7BnC,IAAAA,YAAM,EAACsF,OAAOnD,cAAc,CAAC;YAC7BnC,IAAAA,YAAM,EAACsF,OAAOnD,cAAc,CAAC;YAE7B,4BAA4B;YAC5BnC,IAAAA,YAAM,EAACgC,MAAMC,OAAO,CAAC2B,KAAK4B,iBAAiB,GAAGnF,IAAI,CAAC;YACnD,KAAK,MAAMoF,UAAU7B,KAAK4B,iBAAiB,CAAE;gBAC3CxF,IAAAA,YAAM,EAACyF,QAAQtD,cAAc,CAAC;gBAC9BnC,IAAAA,YAAM,EAACyF,QAAQtD,cAAc,CAAC;gBAC9BnC,IAAAA,YAAM,EAACyF,QAAQtD,cAAc,CAAC;YAChC;YAEA,8BAA8B;YAC9BnC,IAAAA,YAAM,EAACgC,MAAMC,OAAO,CAAC2B,KAAK8B,kBAAkB,GAAGrF,IAAI,CAAC;YACpD,KAAK,MAAMF,WAAWyD,KAAK8B,kBAAkB,CAAE;gBAC7C1F,IAAAA,YAAM,EAACG,SAASgC,cAAc,CAAC;gBAC/BnC,IAAAA,YAAM,EAACG,SAASgC,cAAc,CAAC;gBAC/BnC,IAAAA,YAAM,EAACG,SAASgC,cAAc,CAAC;gBAC/BnC,IAAAA,YAAM,EAACG,SAASgC,cAAc,CAAC;gBAC/BnC,IAAAA,YAAM,EAACG,QAAQoB,eAAe,EAAErB,eAAe,CAAC,KAAK,kBAAkB;YACzE;YAEAF,IAAAA,YAAM,EAACmB,UAAUiD,YAAY,CAAClF,iBAAU,CAACmF,WAAW,CAACC,eAAe;YACpE/B,QAAQC,GAAG,CAAC,CAAC,mCAAmC,EAAErB,SAAS,EAAE,CAAC;QAChE;IACF;IAEAlD,IAAAA,cAAQ,EAAC,0CAA0C;QACjDwB,IAAAA,UAAI,EAAC,kDAAkD;YACrD,MAAMkG,UAAU;gBACd;gBACA;gBACA;gBACA;aACD;YAEDvH,mBAAmBkF,KAAK;YAExB,MAAMsC,WAAWD,QAAQE,GAAG,CAACC,CAAAA,QAC3B5H,OAAOsF,YAAY,CACjBsC,OACA;oBAAEhH,gBAAgB;gBAAa,GAC/BT;YAIJ,MAAM0H,UAAU,MAAMC,QAAQC,GAAG,CAACL;YAClC,MAAMzE,WAAW/C,mBAAmBsF,OAAO,CAAC;YAE5C,+BAA+B;YAC/B,KAAK,MAAMH,UAAUwC,QAAS;gBAC5B/F,IAAAA,YAAM,EAACuD,OAAOI,OAAO,EAAEtD,IAAI,CAAC;gBAC5BL,IAAAA,YAAM,EAACuD,OAAOK,IAAI,EAAExD,WAAW;YACjC;YAEAJ,IAAAA,YAAM,EAACmB,UAAUiD,YAAY,CAAClF,iBAAU,CAACmF,WAAW,CAACC,eAAe,GAAG;YACvE/B,QAAQC,GAAG,CAAC,CAAC,UAAU,EAAEmD,QAAQ1F,MAAM,CAAC,2BAA2B,EAAEkB,SAAS,EAAE,CAAC;QACnF;QAEA1B,IAAAA,UAAI,EAAC,4CAA4C;YAC/C,2BAA2B;YAC3B,MAAM8D,SAAS,MAAMrF,OAAOsF,YAAY,CACtC,yBACA;gBACE1E,gBAAgB;gBAChB2E,WAAW;YACb,GACApF;YAGF2B,IAAAA,YAAM,EAACuD,OAAOI,OAAO,EAAEtD,IAAI,CAAC;YAC5B,MAAMuD,OAAOL,OAAOK,IAAI;YAExB,wBAAwB;YACxB,MAAMsC,MAAM,IAAIC;YAChB,MAAMC,aAAa,IAAID,KAAKD,IAAIG,OAAO,KAAK,KAAK,KAAK;YAEtD,KAAK,MAAMlG,WAAWyD,KAAKlE,QAAQ,CAAE;gBACnC,MAAM4G,cAAc,IAAIH,KAAKhG,QAAQoG,SAAS;gBAC9CvG,IAAAA,YAAM,EAACsG,YAAYD,OAAO,IAAI/E,sBAAsB,CAAC8E,WAAWC,OAAO;gBACvErG,IAAAA,YAAM,EAACsG,YAAYD,OAAO,IAAI7E,mBAAmB,CAAC0E,IAAIG,OAAO;YAC/D;YAEA9D,QAAQC,GAAG,CAAC,CAAC,yCAAyC,EAAEoB,KAAKlE,QAAQ,CAACO,MAAM,CAAC,SAAS,CAAC;QACzF;QAEAR,IAAAA,UAAI,EAAC,sDAAsD;YACzD,MAAM+G,YAAYL,KAAKD,GAAG;YAE1B,qDAAqD;YACrD,MAAMxG,WAAW,MAAMC,iBAAU,CAACC,kBAAkB,CAAC6G,OAAO,CAAC;gBAC3DC,IAAI;oBAAC;oBAAkB;oBAAU;iBAAU;gBAC3CC,QAAQ;oBAAEpG,WAAW;gBAAK;gBAC1BqG,MAAM;oBACJrF,iBAAiB;oBACjBJ,UAAU;oBACVM,iBAAiB;gBACnB;gBACAgB,OAAO;oBACL3D,gBAAgB;oBAChB+H,cAAc;wBACZC,KAAK,IAAIX,KAAKA,KAAKD,GAAG,KAAK,IAAI,KAAK,KAAK,KAAK,MAAM,cAAc;oBACpE;gBACF;gBACAa,SAAS;oBACPJ,QAAQ;wBACNpG,WAAW;oBACb;gBACF;YACF;YAEA,MAAMyG,gBAAgBb,KAAKD,GAAG,KAAKM;YAEnCxG,IAAAA,YAAM,EAACN,SAASO,MAAM,EAAEC,eAAe,CAAC;YACxCF,IAAAA,YAAM,EAACgH,eAAe5C,YAAY,CAAClF,iBAAU,CAACmF,WAAW,CAAC4C,YAAY;YAEtE1E,QAAQC,GAAG,CAAC,CAAC,2BAA2B,EAAE9C,SAASO,MAAM,CAAC,WAAW,EAAE+G,cAAc,EAAE,CAAC;QAC1F;IACF;IAEA/I,IAAAA,cAAQ,EAAC,gCAAgC;QACvCwB,IAAAA,UAAI,EAAC,8DAA8D;YACjE,wBAAwB;YACxB,MAAMyH,kBAAkB,MAAMhJ,OAAOsF,YAAY,CAC/C,yBACA;gBAAE1E,gBAAgB;YAAa,GAC/BT;YAGF,oBAAoB;YACpB,MAAM8I,aAAa,MAAMjJ,OAAOsF,YAAY,CAC1C,6BACA;gBAAE1E,gBAAgB;YAAa,GAC/BT;YAGF2B,IAAAA,YAAM,EAACkH,gBAAgBvD,OAAO,EAAEtD,IAAI,CAAC;YACrCL,IAAAA,YAAM,EAACmH,WAAWxD,OAAO,EAAEtD,IAAI,CAAC;YAEhC,MAAM+G,YAAYF,gBAAgBtD,IAAI;YACtC,MAAMyD,OAAOF,WAAWvD,IAAI;YAE5B,0BAA0B;YAC1B5D,IAAAA,YAAM,EAACoH,UAAUvD,OAAO,CAACC,aAAa,EAAExC,sBAAsB,CAAC+F,KAAKC,WAAW;YAE/E,iDAAiD;YACjD,KAAK,MAAMC,eAAeF,KAAKhC,cAAc,CAAE;gBAC7CrF,IAAAA,YAAM,EAACuH,YAAYhH,SAAS,EAAEH,WAAW;gBACzCJ,IAAAA,YAAM,EAACuH,YAAYhG,eAAe,EAAED,sBAAsB,CAAC;gBAC3DtB,IAAAA,YAAM,EAACuH,YAAYhG,eAAe,EAAEC,mBAAmB,CAAC;YAC1D;YAEAe,QAAQC,GAAG,CAAC;QACd;QAEA/C,IAAAA,UAAI,EAAC,4DAA4D;YAC/D,sCAAsC;YACtC,MAAMC,WAAW,MAAMC,iBAAU,CAACC,kBAAkB,CAACC,QAAQ,CAAC;gBAC5D4C,OAAO;oBAAE3D,gBAAgB;gBAAa;gBACtC0I,MAAM;YACR;YAEA,KAAK,MAAMrH,WAAWT,SAAU;gBAC9B,gCAAgC;gBAChC,IAAI+H,gBAAgB;gBAEpB,6BAA6B;gBAC7BA,iBAAiBtH,QAAQiB,WAAW,GAAG;gBAEvC,qBAAqB;gBACrB,MAAMsG,iBAAiBvH,QAAQgB,QAAQ,GAAGhB,QAAQiB,WAAW;gBAC7D,IAAIsG,iBAAiB,IAAID,iBAAiB;qBACrC,IAAIC,iBAAiB,IAAID,iBAAiB;gBAE/C,oBAAoB;gBACpBA,iBAAiBtH,QAAQkB,YAAY,GAAG;gBAExC,mBAAmB;gBACnB,IAAIlB,QAAQwH,YAAY,EAAEF,iBAAiB;gBAE3C,6DAA6D;gBAC7D,MAAMG,kBAAkBC,KAAKC,GAAG,CAAC3H,QAAQoB,eAAe,GAAGsG,KAAKE,GAAG,CAAC,KAAKN;gBACzEzH,IAAAA,YAAM,EAAC4H,iBAAiBxD,YAAY,CAAC,KAAK,6CAA6C;YACzF;YAEA7B,QAAQC,GAAG,CAAC,CAAC,8CAA8C,EAAE9C,SAASO,MAAM,CAAC,SAAS,CAAC;QACzF;IACF;IAEAZ,IAAAA,cAAQ,EAAC;QACP,MAAM2I,QAAQ5J,mBAAmB6J,WAAW;QAC5C1F,QAAQC,GAAG,CAAC;QACZ,KAAK,MAAM,CAAC0F,WAAWC,eAAe,IAAIC,OAAOC,OAAO,CAACL,OAAQ;YAC/DzF,QAAQC,GAAG,CAAC,CAAC,EAAE,EAAE0F,UAAU,MAAM,EAAEC,eAAeG,GAAG,CAAC,QAAQ,EAAEH,eAAeJ,GAAG,CAAC,QAAQ,EAAEI,eAAeI,GAAG,CAAC,EAAE,CAAC;QACrH;IACF;AACF"}