2c8cf3fd3f189d7b3b6d28a33a931a14
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    EmailService: function() {
        return EmailService;
    },
    emailService: function() {
        return emailService;
    },
    sendOrganizationEmail: function() {
        return sendOrganizationEmail;
    }
});
const _mailgunprovider = require("./mailgun-provider");
const _sendgridprovider = require("./sendgrid-provider");
const _smtpprovider = require("./smtp-provider");
const _prisma = /*#__PURE__*/ _interop_require_default(require("../db/prisma"));
const _logger = require("../logger");
const _crypto = /*#__PURE__*/ _interop_require_default(require("crypto"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// Encryption utilities
const decrypt = (encryptedText)=>{
    try {
        const key = process.env.ENCRYPTION_KEY || 'default-key-for-development';
        const decipher = _crypto.default.createDecipher('aes-256-cbc', key);
        let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
        decrypted += decipher.final('utf8');
        return decrypted;
    } catch (error) {
        _logger.logger.error('Decryption failed:', error);
        return encryptedText;
    }
};
class EmailService {
    constructor(){
        this.providers = new Map();
        this.organizationProviders = new Map();
        // Register available provider classes
        this.providers.set('mailgun', _mailgunprovider.MailgunEmailProvider);
        this.providers.set('sendgrid', _sendgridprovider.SendGridEmailProvider);
        this.providers.set('smtp', _smtpprovider.SMTPEmailProvider);
    }
    async sendEmail(organizationId, options) {
        try {
            // Get organization-specific provider or fallback to platform default
            const provider = await this.getOrganizationProvider(organizationId);
            if (!provider) {
                _logger.logger.info('No organization provider found, using platform default email provider', {
                    organizationId
                });
                // Use platform default provider from the legacy email service
                const { sendOrganizationEmail } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../email-service")));
                const fallbackResult = await sendOrganizationEmail(organizationId, options);
                return {
                    success: fallbackResult.success,
                    messageId: fallbackResult.messageId,
                    error: fallbackResult.error,
                    provider: 'platform-default'
                };
            }
            // Send email using the provider
            const result = await provider.sendEmail(options);
            // Add provider info to result for tracking
            return {
                ...result,
                provider: provider.name
            };
        } catch (error) {
            _logger.logger.error('Email service error:', {
                error,
                organizationId
            });
            return {
                success: false,
                error: {
                    message: error instanceof Error ? error.message : 'Email sending failed',
                    code: 'EMAIL_SERVICE_ERROR'
                }
            };
        }
    }
    // Get organization-specific email provider
    async getOrganizationProvider(organizationId) {
        try {
            // Check cache first
            const cacheKey = `email_${organizationId}`;
            if (this.organizationProviders.has(cacheKey)) {
                return this.organizationProviders.get(cacheKey) || null;
            }
            // Get from database
            const emailConfig = await _prisma.default.emailProvider.findFirst({
                where: {
                    organizationId,
                    isActive: true
                }
            });
            if (!emailConfig) {
                return null;
            }
            // Create provider instance based on type
            let provider;
            switch(emailConfig.providerType){
                case 'mailgun':
                    if (!emailConfig.apiKey || !emailConfig.domain) {
                        _logger.logger.warn('Mailgun configuration incomplete:', {
                            organizationId
                        });
                        return null;
                    }
                    provider = new _mailgunprovider.MailgunEmailProvider({
                        apiKey: decrypt(emailConfig.apiKey),
                        domain: emailConfig.domain,
                        trackingDomain: emailConfig.trackingDomain || undefined
                    });
                    break;
                case 'sendgrid':
                    if (!emailConfig.apiKey) {
                        _logger.logger.warn('SendGrid configuration incomplete:', {
                            organizationId
                        });
                        return null;
                    }
                    provider = new _sendgridprovider.SendGridEmailProvider({
                        apiKey: decrypt(emailConfig.apiKey),
                        fromEmail: emailConfig.fromEmail,
                        fromName: emailConfig.fromName || undefined,
                        trackingDomain: emailConfig.trackingDomain || undefined
                    });
                    break;
                case 'smtp':
                    if (!emailConfig.smtpHost || !emailConfig.smtpUsername || !emailConfig.smtpPassword) {
                        _logger.logger.warn('SMTP configuration incomplete:', {
                            organizationId
                        });
                        return null;
                    }
                    provider = new _smtpprovider.SMTPEmailProvider({
                        host: emailConfig.smtpHost,
                        port: emailConfig.smtpPort || 587,
                        secure: emailConfig.smtpSecure,
                        username: emailConfig.smtpUsername,
                        password: decrypt(emailConfig.smtpPassword),
                        fromEmail: emailConfig.fromEmail,
                        fromName: emailConfig.fromName || undefined
                    });
                    break;
                default:
                    _logger.logger.warn(`Unsupported email provider type: ${emailConfig.providerType}`);
                    return null;
            }
            // Cache the provider
            this.organizationProviders.set(cacheKey, provider);
            return provider;
        } catch (error) {
            _logger.logger.error('Error getting organization email provider:', {
                error,
                organizationId
            });
            return null;
        }
    }
    // Clear organization provider cache
    clearOrganizationCache(organizationId) {
        const cacheKey = `email_${organizationId}`;
        this.organizationProviders.delete(cacheKey);
    }
    // Test organization email configuration
    async testOrganizationEmail(organizationId, testEmail, subject, message) {
        const provider = await this.getOrganizationProvider(organizationId);
        if (!provider) {
            return {
                success: false,
                error: {
                    message: 'Email provider not configured for this organization',
                    code: 'PROVIDER_NOT_CONFIGURED'
                }
            };
        }
        if (!provider.validateConfig()) {
            return {
                success: false,
                error: {
                    message: 'Email provider configuration is incomplete',
                    code: 'PROVIDER_NOT_CONFIGURED'
                }
            };
        }
        // Get organization info for branding
        const organization = await _prisma.default.organization.findUnique({
            where: {
                id: organizationId
            },
            select: {
                name: true
            }
        });
        const orgName = organization?.name || 'MarketSage';
        // Send test email
        return provider.sendEmail({
            to: testEmail,
            from: 'test@marketsage.africa',
            fromName: `${orgName} Test`,
            subject: subject || `${orgName} Email Provider Test`,
            html: message || `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
          <h2 style="color: #007bff;">Email Provider Test Successful!</h2>
          <p>This is a test email from your ${orgName} email provider configuration.</p>
          <div style="background: #f8f9fa; padding: 15px; border-radius: 5px; margin: 20px 0;">
            <p><strong>Organization:</strong> ${orgName}</p>
            <p><strong>Provider:</strong> ${provider.name}</p>
            <p><strong>Test Time:</strong> ${new Date().toISOString()}</p>
          </div>
          <p>If you received this email, your email provider is configured correctly!</p>
          <hr style="margin: 30px 0; border: 1px solid #eee;">
          <p style="font-size: 12px; color: #666;">
            This test was sent from MarketSage platform.<br>
            <a href="https://marketsage.africa">MarketSage - Smart Marketing Solutions</a>
          </p>
        </div>
      `,
            metadata: {
                test: true,
                organizationId,
                provider: provider.name
            }
        });
    }
    // Get stats for organization's email provider
    async getOrganizationStats(organizationId, period) {
        const provider = await this.getOrganizationProvider(organizationId);
        if (!provider || !provider.getStats) {
            return null;
        }
        try {
            return await provider.getStats(period);
        } catch (error) {
            _logger.logger.error('Error getting email stats:', {
                error,
                organizationId
            });
            return null;
        }
    }
    // Setup webhook for organization's email provider
    async setupOrganizationWebhook(organizationId, webhookUrl) {
        const provider = await this.getOrganizationProvider(organizationId);
        if (!provider || !provider.setupWebhook) {
            return false;
        }
        try {
            await provider.setupWebhook(webhookUrl);
            return true;
        } catch (error) {
            _logger.logger.error('Error setting up webhook:', {
                error,
                organizationId
            });
            return false;
        }
    }
    // Get available provider types
    getAvailableProviders() {
        return Array.from(this.providers.keys());
    }
    // Validate provider configuration before saving
    validateProviderConfig(providerType, config) {
        switch(providerType){
            case 'mailgun':
                return !!(config.apiKey && config.domain);
            case 'sendgrid':
                return !!config.apiKey;
            case 'smtp':
                return !!(config.smtpHost && config.smtpUsername && config.smtpPassword);
            default:
                return false;
        }
    }
}
const emailService = new EmailService();
async function sendOrganizationEmail(organizationId, options) {
    return emailService.sendEmail(organizationId, options);
}

//# sourceMappingURL=data:application/json;base64,