{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/lib/email-providers/email-service.ts"],"sourcesContent":["import type { EmailProvider, EmailOptions, EmailResult, EmailStats } from './base-provider';\nimport { MailgunEmailProvider } from './mailgun-provider';\nimport { SendGridEmailProvider } from './sendgrid-provider';\nimport { SMTPEmailProvider } from './smtp-provider';\nimport prisma from '@/lib/db/prisma';\nimport { logger } from '@/lib/logger';\nimport crypto from 'crypto';\n\n// Email provider types\nexport type EmailProviderType = 'mailgun' | 'sendgrid' | 'smtp' | 'postmark' | 'ses';\n\n// Encryption utilities\nconst decrypt = (encryptedText: string): string => {\n  try {\n    const key = process.env.ENCRYPTION_KEY || 'default-key-for-development';\n    const decipher = crypto.createDecipher('aes-256-cbc', key);\n    let decrypted = decipher.update(encryptedText, 'hex', 'utf8');\n    decrypted += decipher.final('utf8');\n    return decrypted;\n  } catch (error) {\n    logger.error('Decryption failed:', error);\n    return encryptedText;\n  }\n};\n\n// Email service for managing multiple providers per organization\nexport class EmailService {\n  private providers: Map<EmailProviderType, typeof EmailProvider> = new Map();\n  private organizationProviders: Map<string, EmailProvider> = new Map();\n\n  constructor() {\n    // Register available provider classes\n    this.providers.set('mailgun', MailgunEmailProvider as any);\n    this.providers.set('sendgrid', SendGridEmailProvider as any);\n    this.providers.set('smtp', SMTPEmailProvider as any);\n  }\n\n  async sendEmail(\n    organizationId: string, \n    options: EmailOptions\n  ): Promise<EmailResult> {\n    try {\n      // Get organization-specific provider or fallback to platform default\n      const provider = await this.getOrganizationProvider(organizationId);\n      \n      if (!provider) {\n        logger.info('No organization provider found, using platform default email provider', { organizationId });\n        // Use platform default provider from the legacy email service\n        const { sendOrganizationEmail } = await import('@/lib/email-service');\n        const fallbackResult = await sendOrganizationEmail(organizationId, options);\n        return {\n          success: fallbackResult.success,\n          messageId: fallbackResult.messageId,\n          error: fallbackResult.error,\n          provider: 'platform-default'\n        } as EmailResult & { provider: string };\n      }\n\n      // Send email using the provider\n      const result = await provider.sendEmail(options);\n      \n      // Add provider info to result for tracking\n      return {\n        ...result,\n        provider: provider.name\n      } as EmailResult & { provider: string };\n\n    } catch (error) {\n      logger.error('Email service error:', { error, organizationId });\n      return {\n        success: false,\n        error: {\n          message: error instanceof Error ? error.message : 'Email sending failed',\n          code: 'EMAIL_SERVICE_ERROR'\n        }\n      };\n    }\n  }\n\n  // Get organization-specific email provider\n  async getOrganizationProvider(organizationId: string): Promise<EmailProvider | null> {\n    try {\n      // Check cache first\n      const cacheKey = `email_${organizationId}`;\n      if (this.organizationProviders.has(cacheKey)) {\n        return this.organizationProviders.get(cacheKey) || null;\n      }\n\n      // Get from database\n      const emailConfig = await prisma.emailProvider.findFirst({\n        where: {\n          organizationId,\n          isActive: true\n        }\n      });\n\n      if (!emailConfig) {\n        return null;\n      }\n\n      // Create provider instance based on type\n      let provider: EmailProvider;\n      \n      switch (emailConfig.providerType) {\n        case 'mailgun':\n          if (!emailConfig.apiKey || !emailConfig.domain) {\n            logger.warn('Mailgun configuration incomplete:', { organizationId });\n            return null;\n          }\n          provider = new MailgunEmailProvider({\n            apiKey: decrypt(emailConfig.apiKey),\n            domain: emailConfig.domain,\n            trackingDomain: emailConfig.trackingDomain || undefined\n          });\n          break;\n\n        case 'sendgrid':\n          if (!emailConfig.apiKey) {\n            logger.warn('SendGrid configuration incomplete:', { organizationId });\n            return null;\n          }\n          provider = new SendGridEmailProvider({\n            apiKey: decrypt(emailConfig.apiKey),\n            fromEmail: emailConfig.fromEmail,\n            fromName: emailConfig.fromName || undefined,\n            trackingDomain: emailConfig.trackingDomain || undefined\n          });\n          break;\n\n        case 'smtp':\n          if (!emailConfig.smtpHost || !emailConfig.smtpUsername || !emailConfig.smtpPassword) {\n            logger.warn('SMTP configuration incomplete:', { organizationId });\n            return null;\n          }\n          provider = new SMTPEmailProvider({\n            host: emailConfig.smtpHost,\n            port: emailConfig.smtpPort || 587,\n            secure: emailConfig.smtpSecure,\n            username: emailConfig.smtpUsername,\n            password: decrypt(emailConfig.smtpPassword),\n            fromEmail: emailConfig.fromEmail,\n            fromName: emailConfig.fromName || undefined\n          });\n          break;\n\n        default:\n          logger.warn(`Unsupported email provider type: ${emailConfig.providerType}`);\n          return null;\n      }\n\n      // Cache the provider\n      this.organizationProviders.set(cacheKey, provider);\n      \n      return provider;\n    } catch (error) {\n      logger.error('Error getting organization email provider:', { error, organizationId });\n      return null;\n    }\n  }\n\n  // Clear organization provider cache\n  clearOrganizationCache(organizationId: string): void {\n    const cacheKey = `email_${organizationId}`;\n    this.organizationProviders.delete(cacheKey);\n  }\n\n  // Test organization email configuration\n  async testOrganizationEmail(\n    organizationId: string, \n    testEmail: string, \n    subject?: string, \n    message?: string\n  ): Promise<EmailResult> {\n    const provider = await this.getOrganizationProvider(organizationId);\n    \n    if (!provider) {\n      return {\n        success: false,\n        error: {\n          message: 'Email provider not configured for this organization',\n          code: 'PROVIDER_NOT_CONFIGURED'\n        }\n      };\n    }\n\n    if (!provider.validateConfig()) {\n      return {\n        success: false,\n        error: {\n          message: 'Email provider configuration is incomplete',\n          code: 'PROVIDER_NOT_CONFIGURED'\n        }\n      };\n    }\n\n    // Get organization info for branding\n    const organization = await prisma.organization.findUnique({\n      where: { id: organizationId },\n      select: { name: true }\n    });\n\n    const orgName = organization?.name || 'MarketSage';\n\n    // Send test email\n    return provider.sendEmail({\n      to: testEmail,\n      from: 'test@marketsage.africa',\n      fromName: `${orgName} Test`,\n      subject: subject || `${orgName} Email Provider Test`,\n      html: message || `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n          <h2 style=\"color: #007bff;\">Email Provider Test Successful!</h2>\n          <p>This is a test email from your ${orgName} email provider configuration.</p>\n          <div style=\"background: #f8f9fa; padding: 15px; border-radius: 5px; margin: 20px 0;\">\n            <p><strong>Organization:</strong> ${orgName}</p>\n            <p><strong>Provider:</strong> ${provider.name}</p>\n            <p><strong>Test Time:</strong> ${new Date().toISOString()}</p>\n          </div>\n          <p>If you received this email, your email provider is configured correctly!</p>\n          <hr style=\"margin: 30px 0; border: 1px solid #eee;\">\n          <p style=\"font-size: 12px; color: #666;\">\n            This test was sent from MarketSage platform.<br>\n            <a href=\"https://marketsage.africa\">MarketSage - Smart Marketing Solutions</a>\n          </p>\n        </div>\n      `,\n      metadata: {\n        test: true,\n        organizationId,\n        provider: provider.name\n      }\n    });\n  }\n\n  // Get stats for organization's email provider\n  async getOrganizationStats(\n    organizationId: string,\n    period?: { start: Date; end: Date }\n  ): Promise<EmailStats | null> {\n    const provider = await this.getOrganizationProvider(organizationId);\n    \n    if (!provider || !provider.getStats) {\n      return null;\n    }\n\n    try {\n      return await provider.getStats(period);\n    } catch (error) {\n      logger.error('Error getting email stats:', { error, organizationId });\n      return null;\n    }\n  }\n\n  // Setup webhook for organization's email provider\n  async setupOrganizationWebhook(\n    organizationId: string,\n    webhookUrl: string\n  ): Promise<boolean> {\n    const provider = await this.getOrganizationProvider(organizationId);\n    \n    if (!provider || !provider.setupWebhook) {\n      return false;\n    }\n\n    try {\n      await provider.setupWebhook(webhookUrl);\n      return true;\n    } catch (error) {\n      logger.error('Error setting up webhook:', { error, organizationId });\n      return false;\n    }\n  }\n\n  // Get available provider types\n  getAvailableProviders(): EmailProviderType[] {\n    return Array.from(this.providers.keys());\n  }\n\n  // Validate provider configuration before saving\n  validateProviderConfig(providerType: EmailProviderType, config: any): boolean {\n    switch (providerType) {\n      case 'mailgun':\n        return !!(config.apiKey && config.domain);\n      case 'sendgrid':\n        return !!(config.apiKey);\n      case 'smtp':\n        return !!(config.smtpHost && config.smtpUsername && config.smtpPassword);\n      default:\n        return false;\n    }\n  }\n}\n\n// Export singleton instance for global use\nexport const emailService = new EmailService();\n\n// Export legacy function for backward compatibility\nexport async function sendOrganizationEmail(\n  organizationId: string,\n  options: EmailOptions\n): Promise<EmailResult> {\n  return emailService.sendEmail(organizationId, options);\n}"],"names":["EmailService","emailService","sendOrganizationEmail","decrypt","encryptedText","key","process","env","ENCRYPTION_KEY","decipher","crypto","createDecipher","decrypted","update","final","error","logger","constructor","providers","Map","organizationProviders","set","MailgunEmailProvider","SendGridEmailProvider","SMTPEmailProvider","sendEmail","organizationId","options","provider","getOrganizationProvider","info","fallbackResult","success","messageId","result","name","message","Error","code","cacheKey","has","get","emailConfig","prisma","emailProvider","findFirst","where","isActive","providerType","apiKey","domain","warn","trackingDomain","undefined","fromEmail","fromName","smtpHost","smtpUsername","smtpPassword","host","port","smtpPort","secure","smtpSecure","username","password","clearOrganizationCache","delete","testOrganizationEmail","testEmail","subject","validateConfig","organization","findUnique","id","select","orgName","to","from","html","Date","toISOString","metadata","test","getOrganizationStats","period","getStats","setupOrganizationWebhook","webhookUrl","setupWebhook","getAvailableProviders","Array","keys","validateProviderConfig","config"],"mappings":"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"}