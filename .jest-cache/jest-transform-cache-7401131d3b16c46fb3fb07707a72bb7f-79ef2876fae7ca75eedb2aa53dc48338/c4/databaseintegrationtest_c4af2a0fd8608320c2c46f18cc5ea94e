64badfcc992422fa145eddb65e204ad2
/**
 * Database Integration Tests for MCP Servers
 * 
 * Tests real database operations, data integrity, and performance
 * with seeded data across all MCP tables and relationships.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _test = require("@jest/test");
const _setup = require("./setup");
(0, _test.describe)('MCP Database Integration Tests', ()=>{
    let dbManager;
    let performanceTracker;
    (0, _test.beforeAll)(async ()=>{
        dbManager = _setup.TestDatabaseManager.getInstance();
        await dbManager.setup();
        performanceTracker = new _setup.PerformanceTracker();
    }, _setup.testConfig.timeouts.integration);
    (0, _test.afterAll)(async ()=>{
        await dbManager.teardown();
    }, _setup.testConfig.timeouts.database);
    (0, _test.beforeEach)(async ()=>{
        performanceTracker.reset();
    });
    (0, _test.describe)('Data Seeding Verification', ()=>{
        (0, _test.test)('should have seeded all required MCP data', async ()=>{
            const counts = await dbManager.getDataCounts();
            // Verify base data exists
            (0, _test.expect)(counts.organizations).toBeGreaterThan(0);
            (0, _test.expect)(counts.users).toBeGreaterThan(0);
            (0, _test.expect)(counts.contacts).toBeGreaterThan(0);
            (0, _test.expect)(counts.emailCampaigns).toBeGreaterThan(0);
            // Verify MCP data exists
            (0, _test.expect)(counts.mcpCampaignMetrics).toBeGreaterThan(0);
            (0, _test.expect)(counts.mcpCustomerPredictions).toBeGreaterThan(0);
            (0, _test.expect)(counts.mcpVisitorSessions).toBeGreaterThan(0);
            (0, _test.expect)(counts.mcpMonitoringMetrics).toBeGreaterThan(0);
            console.log('📊 Data counts verified:', counts);
        });
        (0, _test.test)('should have proper data relationships', async ()=>{
            // Test campaign metrics relationships
            const campaignMetrics = await _setup.testPrisma.mCPCampaignMetrics.findMany({
                include: {
                    organization: true
                }
            });
            (0, _test.expect)(campaignMetrics.length).toBeGreaterThan(0);
            campaignMetrics.forEach((metric)=>{
                (0, _test.expect)(metric.organization).toBeDefined();
                (0, _test.expect)(metric.organizationId).toBe(metric.organization.id);
                (0, _test.expect)(metric.campaignType).toMatch(/^(EMAIL|SMS|WHATSAPP)$/);
                (0, _test.expect)(metric.sent).toBeGreaterThan(0);
                (0, _test.expect)(metric.delivered).toBeLessThanOrEqual(metric.sent);
                (0, _test.expect)(metric.opened).toBeLessThanOrEqual(metric.delivered);
                (0, _test.expect)(metric.clicked).toBeLessThanOrEqual(metric.opened);
                (0, _test.expect)(metric.converted).toBeLessThanOrEqual(metric.clicked);
            });
        });
        (0, _test.test)('should have valid customer predictions with contact relationships', async ()=>{
            const predictions = await _setup.testPrisma.mCPCustomerPredictions.findMany({
                include: {
                    contact: true,
                    organization: true
                }
            });
            (0, _test.expect)(predictions.length).toBeGreaterThan(0);
            predictions.forEach((prediction)=>{
                (0, _test.expect)(prediction.contact).toBeDefined();
                (0, _test.expect)(prediction.organization).toBeDefined();
                (0, _test.expect)(prediction.contactId).toBe(prediction.contact.id);
                (0, _test.expect)(prediction.organizationId).toBe(prediction.organization.id);
                (0, _test.expect)(prediction.churnRisk).toBeGreaterThanOrEqual(0);
                (0, _test.expect)(prediction.churnRisk).toBeLessThanOrEqual(100);
                (0, _test.expect)(prediction.lifetimeValue).toBeGreaterThan(0);
                (0, _test.expect)(prediction.engagementScore).toBeGreaterThanOrEqual(0);
                (0, _test.expect)(prediction.engagementScore).toBeLessThanOrEqual(100);
                (0, _test.expect)(prediction.segment).toBeTruthy();
                (0, _test.expect)(prediction.preferredChannel).toBeTruthy();
            });
        });
        (0, _test.test)('should have visitor sessions with proper data structure', async ()=>{
            const sessions = await _setup.testPrisma.mCPVisitorSessions.findMany({
                include: {
                    organization: true
                }
            });
            (0, _test.expect)(sessions.length).toBeGreaterThan(0);
            sessions.forEach((session)=>{
                (0, _test.expect)(session.organization).toBeDefined();
                (0, _test.expect)(session.sessionId).toBeTruthy();
                (0, _test.expect)(session.visitorId).toBeTruthy();
                (0, _test.expect)(session.pageViews).toBeGreaterThan(0);
                (0, _test.expect)(session.sessionDuration).toBeGreaterThan(0);
                (0, _test.expect)(session.country).toBeTruthy();
                (0, _test.expect)(session.device).toBeTruthy();
                (0, _test.expect)(session.browser).toBeTruthy();
                // Validate JSON fields
                if (session.events) {
                    (0, _test.expect)(()=>JSON.parse(session.events)).not.toThrow();
                }
                if (session.behaviorData) {
                    (0, _test.expect)(()=>JSON.parse(session.behaviorData)).not.toThrow();
                }
            });
        });
        (0, _test.test)('should have monitoring metrics with time series data', async ()=>{
            const metrics = await _setup.testPrisma.mCPMonitoringMetrics.findMany({
                include: {
                    organization: true
                },
                orderBy: {
                    timestamp: 'desc'
                }
            });
            (0, _test.expect)(metrics.length).toBeGreaterThan(0);
            // Check for different metric types
            const metricTypes = [
                ...new Set(metrics.map((m)=>m.metricType))
            ];
            (0, _test.expect)(metricTypes.length).toBeGreaterThan(1);
            metrics.forEach((metric)=>{
                (0, _test.expect)(metric.organization).toBeDefined();
                (0, _test.expect)(metric.metricType).toBeTruthy();
                (0, _test.expect)(metric.value).toBeGreaterThanOrEqual(0);
                (0, _test.expect)(metric.timestamp).toBeInstanceOf(Date);
                // Validate tags JSON
                if (metric.tags) {
                    (0, _test.expect)(()=>JSON.parse(metric.tags)).not.toThrow();
                }
            });
        });
    });
    (0, _test.describe)('Database Performance Tests', ()=>{
        (0, _test.test)('should query campaign metrics within performance limits', async ()=>{
            performanceTracker.start();
            const campaignMetrics = await _setup.testPrisma.mCPCampaignMetrics.findMany({
                include: {
                    organization: true
                },
                where: {
                    campaignType: 'EMAIL'
                },
                orderBy: {
                    calculatedAt: 'desc'
                },
                take: 50
            });
            const duration = performanceTracker.measure('campaign_metrics_query');
            (0, _test.expect)(campaignMetrics.length).toBeGreaterThan(0);
            (0, _test.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxQueryTime);
            console.log(`📈 Campaign metrics query: ${duration}ms`);
        });
        (0, _test.test)('should aggregate customer predictions efficiently', async ()=>{
            performanceTracker.start();
            const segmentStats = await _setup.testPrisma.mCPCustomerPredictions.groupBy({
                by: [
                    'segment'
                ],
                _count: {
                    segment: true
                },
                _avg: {
                    churnRisk: true,
                    lifetimeValue: true,
                    engagementScore: true
                },
                orderBy: {
                    _count: {
                        segment: 'desc'
                    }
                }
            });
            const duration = performanceTracker.measure('customer_predictions_aggregation');
            (0, _test.expect)(segmentStats.length).toBeGreaterThan(0);
            (0, _test.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxQueryTime);
            console.log(`🧮 Customer predictions aggregation: ${duration}ms`);
            console.log('📊 Segment stats:', segmentStats);
        });
        (0, _test.test)('should handle complex visitor analytics queries', async ()=>{
            performanceTracker.start();
            const visitorAnalytics = await _setup.testPrisma.mCPVisitorSessions.findMany({
                where: {
                    createdAt: {
                        gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) // Last 30 days
                    }
                },
                include: {
                    organization: true
                },
                orderBy: {
                    createdAt: 'desc'
                },
                take: 100
            });
            const duration = performanceTracker.measure('visitor_analytics_query');
            (0, _test.expect)(visitorAnalytics.length).toBeGreaterThan(0);
            (0, _test.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxQueryTime * 2); // Allow more time for complex query
            console.log(`📍 Visitor analytics query: ${duration}ms`);
        });
        (0, _test.test)('should efficiently query monitoring metrics time series', async ()=>{
            performanceTracker.start();
            const timeSeriesMetrics = await _setup.testPrisma.mCPMonitoringMetrics.findMany({
                where: {
                    metricType: 'api_response_time',
                    timestamp: {
                        gte: new Date(Date.now() - 24 * 60 * 60 * 1000) // Last 24 hours
                    }
                },
                orderBy: {
                    timestamp: 'desc'
                },
                take: 1000
            });
            const duration = performanceTracker.measure('monitoring_metrics_time_series');
            (0, _test.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxQueryTime);
            console.log(`⏱️ Monitoring metrics time series: ${duration}ms`);
        });
    });
    (0, _test.describe)('Data Integrity Tests', ()=>{
        (0, _test.test)('should maintain referential integrity across MCP tables', async ()=>{
            // Test campaign metrics -> organizations
            const orphanedCampaignMetrics = await _setup.testPrisma.mCPCampaignMetrics.findMany({
                where: {
                    organization: null
                }
            });
            (0, _test.expect)(orphanedCampaignMetrics.length).toBe(0);
            // Test customer predictions -> contacts and organizations
            const orphanedPredictions = await _setup.testPrisma.mCPCustomerPredictions.findMany({
                where: {
                    OR: [
                        {
                            contact: null
                        },
                        {
                            organization: null
                        }
                    ]
                }
            });
            (0, _test.expect)(orphanedPredictions.length).toBe(0);
            // Test visitor sessions -> organizations
            const orphanedSessions = await _setup.testPrisma.mCPVisitorSessions.findMany({
                where: {
                    organization: null
                }
            });
            (0, _test.expect)(orphanedSessions.length).toBe(0);
        });
        (0, _test.test)('should have valid data ranges and constraints', async ()=>{
            // Test campaign metrics data validity
            const invalidCampaignMetrics = await _setup.testPrisma.mCPCampaignMetrics.findMany({
                where: {
                    OR: [
                        {
                            sent: {
                                lt: 0
                            }
                        },
                        {
                            delivered: {
                                gt: _setup.testPrisma.mCPCampaignMetrics.fields.sent
                            }
                        },
                        {
                            openRate: {
                                lt: 0
                            }
                        },
                        {
                            openRate: {
                                gt: 100
                            }
                        },
                        {
                            clickRate: {
                                lt: 0
                            }
                        },
                        {
                            clickRate: {
                                gt: 100
                            }
                        },
                        {
                            conversionRate: {
                                lt: 0
                            }
                        },
                        {
                            conversionRate: {
                                gt: 100
                            }
                        }
                    ]
                }
            });
            (0, _test.expect)(invalidCampaignMetrics.length).toBe(0);
            // Test customer prediction data validity
            const invalidPredictions = await _setup.testPrisma.mCPCustomerPredictions.findMany({
                where: {
                    OR: [
                        {
                            churnRisk: {
                                lt: 0
                            }
                        },
                        {
                            churnRisk: {
                                gt: 100
                            }
                        },
                        {
                            engagementScore: {
                                lt: 0
                            }
                        },
                        {
                            engagementScore: {
                                gt: 100
                            }
                        },
                        {
                            lifetimeValue: {
                                lt: 0
                            }
                        },
                        {
                            confidenceScore: {
                                lt: 0
                            }
                        },
                        {
                            confidenceScore: {
                                gt: 100
                            }
                        }
                    ]
                }
            });
            (0, _test.expect)(invalidPredictions.length).toBe(0);
        });
        (0, _test.test)('should have properly formatted JSON fields', async ()=>{
            // Test campaign metrics A/B test data
            const campaignMetricsWithAB = await _setup.testPrisma.mCPCampaignMetrics.findMany({
                where: {
                    abTestData: {
                        not: null
                    }
                }
            });
            campaignMetricsWithAB.forEach((metric)=>{
                (0, _test.expect)(()=>{
                    const abTestData = JSON.parse(metric.abTestData);
                    (0, _test.expect)(abTestData).toHaveProperty('testType');
                    (0, _test.expect)(abTestData).toHaveProperty('variants');
                    (0, _test.expect)(Array.isArray(abTestData.variants)).toBe(true);
                }).not.toThrow();
            });
            // Test customer predictions behavioral scores
            const predictionsWithScores = await _setup.testPrisma.mCPCustomerPredictions.findMany({
                where: {
                    behavioralScores: {
                        not: null
                    }
                }
            });
            predictionsWithScores.forEach((prediction)=>{
                (0, _test.expect)(()=>{
                    const scores = JSON.parse(prediction.behavioralScores);
                    (0, _test.expect)(typeof scores).toBe('object');
                    (0, _test.expect)(scores).toHaveProperty('mobileUsage');
                    (0, _test.expect)(scores).toHaveProperty('priceSensitivity');
                }).not.toThrow();
            });
        });
    });
    (0, _test.describe)('Concurrent Access Tests', ()=>{
        (0, _test.test)('should handle concurrent read operations', async ()=>{
            const concurrentQueries = Array.from({
                length: _setup.testConfig.performance.maxConcurrentOperations
            }, async (_, index)=>{
                performanceTracker.start();
                const result = await _setup.testPrisma.mCPCampaignMetrics.findMany({
                    where: {
                        campaignType: index % 2 === 0 ? 'EMAIL' : 'SMS'
                    },
                    take: 10
                });
                const duration = performanceTracker.measure(`concurrent_read_${index}`);
                return {
                    result,
                    duration
                };
            });
            const results = await Promise.all(concurrentQueries);
            results.forEach(({ result, duration }, index)=>{
                (0, _test.expect)(result.length).toBeGreaterThanOrEqual(0);
                (0, _test.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxResponseTime);
                console.log(`🔄 Concurrent read ${index}: ${duration}ms`);
            });
        });
        (0, _test.test)('should handle concurrent write operations', async ()=>{
            const testOrgId = 'test-org-1';
            const concurrentWrites = Array.from({
                length: 5
            }, async (_, index)=>{
                performanceTracker.start();
                const metric = await _setup.testPrisma.mCPMonitoringMetrics.create({
                    data: {
                        organizationId: testOrgId,
                        metricType: `concurrent_test_${index}`,
                        value: Math.random() * 100,
                        timestamp: new Date(),
                        tags: JSON.stringify({
                            test: true,
                            index
                        })
                    }
                });
                const duration = performanceTracker.measure(`concurrent_write_${index}`);
                return {
                    metric,
                    duration
                };
            });
            const results = await Promise.all(concurrentWrites);
            results.forEach(({ metric, duration }, index)=>{
                (0, _test.expect)(metric.id).toBeTruthy();
                (0, _test.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxResponseTime);
                console.log(`✍️ Concurrent write ${index}: ${duration}ms`);
            });
            // Clean up test data
            await _setup.testPrisma.mCPMonitoringMetrics.deleteMany({
                where: {
                    metricType: {
                        startsWith: 'concurrent_test_'
                    }
                }
            });
        });
    });
    (0, _test.describe)('Complex Query Tests', ()=>{
        (0, _test.test)('should execute multi-table joins efficiently', async ()=>{
            performanceTracker.start();
            const complexQuery = await _setup.testPrisma.mCPCustomerPredictions.findMany({
                include: {
                    contact: {
                        select: {
                            firstName: true,
                            lastName: true,
                            email: true,
                            status: true,
                            createdAt: true
                        }
                    },
                    organization: {
                        select: {
                            name: true,
                            plan: true
                        }
                    }
                },
                where: {
                    churnRisk: {
                        gt: 50
                    },
                    lifetimeValue: {
                        gt: 100
                    }
                },
                orderBy: [
                    {
                        churnRisk: 'desc'
                    },
                    {
                        lifetimeValue: 'desc'
                    }
                ],
                take: 20
            });
            const duration = performanceTracker.measure('complex_multi_table_join');
            (0, _test.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxQueryTime * 2);
            console.log(`🔗 Complex multi-table join: ${duration}ms`);
            console.log(`📊 Found ${complexQuery.length} high-risk, high-value customers`);
        });
        (0, _test.test)('should perform analytics aggregations efficiently', async ()=>{
            performanceTracker.start();
            const campaignAnalytics = await _setup.testPrisma.$queryRaw`
        SELECT 
          "campaignType",
          COUNT(*) as campaign_count,
          AVG("openRate") as avg_open_rate,
          AVG("clickRate") as avg_click_rate,
          AVG("conversionRate") as avg_conversion_rate,
          SUM("revenue") as total_revenue,
          AVG("roi") as avg_roi
        FROM "MCPCampaignMetrics"
        GROUP BY "campaignType"
        ORDER BY total_revenue DESC
      `;
            const duration = performanceTracker.measure('analytics_aggregation');
            (0, _test.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxQueryTime);
            (0, _test.expect)(Array.isArray(campaignAnalytics)).toBe(true);
            console.log(`📈 Analytics aggregation: ${duration}ms`);
            console.log('📊 Campaign analytics:', campaignAnalytics);
        });
        (0, _test.test)('should execute time-based queries efficiently', async ()=>{
            performanceTracker.start();
            const timeBasedMetrics = await _setup.testPrisma.mCPMonitoringMetrics.findMany({
                where: {
                    timestamp: {
                        gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),
                        lte: new Date()
                    }
                },
                orderBy: {
                    timestamp: 'desc'
                }
            });
            const duration = performanceTracker.measure('time_based_query');
            (0, _test.expect)(duration).toBeLessThan(_setup.testConfig.performance.maxQueryTime);
            console.log(`⏰ Time-based query: ${duration}ms`);
            console.log(`📊 Found ${timeBasedMetrics.length} monitoring metrics from last 7 days`);
        });
    });
    (0, _test.describe)('Performance Summary', ()=>{
        (0, _test.test)('should report overall performance statistics', async ()=>{
            const allStats = performanceTracker.getAllStats();
            console.log('\n📊 Integration Test Performance Summary:');
            console.log('================================================');
            Object.entries(allStats).forEach(([operation, stats])=>{
                console.log(`${operation}:`);
                console.log(`  Average: ${stats.avg.toFixed(2)}ms`);
                console.log(`  Min: ${stats.min}ms`);
                console.log(`  Max: ${stats.max}ms`);
                console.log(`  Count: ${stats.count}`);
                console.log('');
            });
            // Verify no operation exceeded maximum allowed time
            Object.entries(allStats).forEach(([operation, stats])=>{
                (0, _test.expect)(stats.avg).toBeLessThan(_setup.testConfig.performance.maxResponseTime);
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,