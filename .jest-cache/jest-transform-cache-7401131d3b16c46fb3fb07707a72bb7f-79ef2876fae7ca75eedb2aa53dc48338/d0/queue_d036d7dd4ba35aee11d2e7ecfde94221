315c488b8720fd05114184bb7fc5f27c
/**
 * Queue Management System for MarketSage
 * 
 * Handles job queues for workflows, email, SMS, and other async operations
 * using Bull Queue with Redis backing store.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    QueueManager: function() {
        return QueueManager;
    },
    delayQueue: function() {
        return delayQueue;
    },
    emailQueue: function() {
        return emailQueue;
    },
    smsQueue: function() {
        return smsQueue;
    },
    workflowQueue: function() {
        return workflowQueue;
    }
});
const _bull = /*#__PURE__*/ _interop_require_default(require("bull"));
const _logger = require("./logger");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// Redis configuration for Bull queues
const redisConfig = {
    redis: {
        host: process.env.REDIS_HOST || 'localhost',
        port: Number.parseInt(process.env.REDIS_PORT || '6379'),
        password: process.env.REDIS_PASSWORD,
        db: Number.parseInt(process.env.REDIS_DB || '0'),
        maxRetriesPerRequest: 3,
        retryDelayOnFailover: 100,
        lazyConnect: true
    }
};
// Check if we're in build mode
const isBuildTime = process.env.NEXT_PHASE === 'phase-production-build' || process.env.BUILDING === 'true' || process.argv.includes('build') || process.argv.includes('next') && process.argv.includes('build');
const workflowQueue = isBuildTime ? null : new _bull.default('workflow-execution', redisConfig);
const emailQueue = isBuildTime ? null : new _bull.default('email-sending', redisConfig);
const smsQueue = isBuildTime ? null : new _bull.default('sms-sending', redisConfig);
const delayQueue = isBuildTime ? null : new _bull.default('delayed-jobs', redisConfig);
// Queue configuration
const commonQueueOptions = {
    removeOnComplete: 100,
    removeOnFail: 50,
    attempts: 3,
    backoff: {
        type: 'exponential',
        delay: 2000
    }
};
// Apply settings to all queues (only if they exist)
if (!isBuildTime) {
    [
        workflowQueue,
        emailQueue,
        smsQueue,
        delayQueue
    ].forEach((queue)=>{
        if (queue) {
            queue.setMaxListeners(50); // Increase listener limit
        }
    });
}
// Error handling for all queues
const setupQueueErrorHandling = (queue, name)=>{
    queue.on('error', (error)=>{
        _logger.logger.error(`Queue ${name} error:`, error);
    });
    queue.on('waiting', (jobId)=>{
        _logger.logger.debug(`Job ${jobId} is waiting in ${name} queue`);
    });
    queue.on('active', (job)=>{
        _logger.logger.debug(`Job ${job.id} started in ${name} queue`);
    });
    queue.on('completed', (job, result)=>{
        _logger.logger.debug(`Job ${job.id} completed in ${name} queue`, {
            result
        });
    });
    queue.on('failed', (job, err)=>{
        _logger.logger.error(`Job ${job.id} failed in ${name} queue:`, err);
    });
    queue.on('stalled', (job)=>{
        _logger.logger.warn(`Job ${job.id} stalled in ${name} queue`);
    });
};
// Setup error handling for all queues (only if they exist)
if (!isBuildTime) {
    if (workflowQueue) setupQueueErrorHandling(workflowQueue, 'workflow');
    if (emailQueue) setupQueueErrorHandling(emailQueue, 'email');
    if (smsQueue) setupQueueErrorHandling(smsQueue, 'sms');
    if (delayQueue) setupQueueErrorHandling(delayQueue, 'delay');
}
// Workflow queue processors (only if not in build mode)
if (!isBuildTime && workflowQueue) {
    workflowQueue.process('execute-workflow', async (job)=>{
        const { WorkflowExecutionEngine } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("./workflow/execution-engine")));
        const engine = new WorkflowExecutionEngine();
        const { workflowId, contactId, executionId, stepId, triggerData } = job.data;
        try {
            if (stepId) {
                // Execute specific step
                return await engine.executeWorkflowStep(executionId, stepId);
            } else {
                // Start workflow execution
                return await engine.startWorkflowExecution(workflowId, contactId, triggerData);
            }
        } catch (error) {
            _logger.logger.error('Workflow execution failed:', error);
            throw error;
        }
    });
}
// Email queue processors
if (!isBuildTime && emailQueue) {
    emailQueue.process('send-email', async (job)=>{
        const { sendTrackedEmail } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("./email-service")));
        const { contactId, emailData, trackingData, campaignId } = job.data;
        try {
            return await sendTrackedEmail({
                ...emailData,
                campaignId,
                contactId,
                trackingData
            });
        } catch (error) {
            _logger.logger.error('Email sending failed:', error);
            throw error;
        }
    });
}
// SMS queue processors
if (!isBuildTime && smsQueue) {
    smsQueue.process('send-sms', async (job)=>{
        const { sendSMS } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("./sms-service")));
        const { contactId, smsData, trackingData, campaignId } = job.data;
        try {
            return await sendSMS({
                ...smsData,
                campaignId,
                contactId,
                trackingData
            });
        } catch (error) {
            _logger.logger.error('SMS sending failed:', error);
            throw error;
        }
    });
}
// Delay queue processors
if (!isBuildTime && delayQueue) {
    delayQueue.process('execute-delayed', async (job)=>{
        const { type, originalJobData } = job.data;
        try {
            switch(type){
                case 'workflow':
                    if (!workflowQueue) throw new Error('Workflow queue not available');
                    return await workflowQueue.add('execute-workflow', originalJobData, commonQueueOptions);
                case 'email':
                    if (!emailQueue) throw new Error('Email queue not available');
                    return await emailQueue.add('send-email', originalJobData, commonQueueOptions);
                case 'sms':
                    if (!smsQueue) throw new Error('SMS queue not available');
                    return await smsQueue.add('send-sms', originalJobData, commonQueueOptions);
                default:
                    throw new Error(`Unknown delayed job type: ${type}`);
            }
        } catch (error) {
            _logger.logger.error('Delayed job execution failed:', error);
            throw error;
        }
    });
}
class QueueManager {
    /**
   * Add a workflow execution job
   */ static async addWorkflowJob(data, options = {}) {
        if (!workflowQueue) {
            throw new Error('Workflow queue not available (build mode)');
        }
        try {
            await workflowQueue.add('execute-workflow', data, {
                ...commonQueueOptions,
                ...options
            });
            _logger.logger.info('Workflow job added to queue', {
                workflowId: data.workflowId,
                contactId: data.contactId
            });
        } catch (error) {
            _logger.logger.error('Failed to add workflow job:', error);
            throw error;
        }
    }
    /**
   * Add an email sending job
   */ static async addEmailJob(data, options = {}) {
        if (!emailQueue) {
            throw new Error('Email queue not available (build mode)');
        }
        try {
            await emailQueue.add('send-email', data, {
                ...commonQueueOptions,
                ...options
            });
            _logger.logger.info('Email job added to queue', {
                to: data.emailData.to,
                campaignId: data.campaignId
            });
        } catch (error) {
            _logger.logger.error('Failed to add email job:', error);
            throw error;
        }
    }
    /**
   * Add an SMS sending job
   */ static async addSMSJob(data, options = {}) {
        if (!smsQueue) {
            throw new Error('SMS queue not available (build mode)');
        }
        try {
            await smsQueue.add('send-sms', data, {
                ...commonQueueOptions,
                ...options
            });
            _logger.logger.info('SMS job added to queue', {
                to: data.smsData.to,
                campaignId: data.campaignId
            });
        } catch (error) {
            _logger.logger.error('Failed to add SMS job:', error);
            throw error;
        }
    }
    /**
   * Add a delayed job
   */ static async addDelayedJob(data, options = {}) {
        if (!delayQueue) {
            throw new Error('Delay queue not available (build mode)');
        }
        try {
            const delay = Math.max(0, data.executeAt.getTime() - Date.now());
            await delayQueue.add('execute-delayed', data, {
                ...commonQueueOptions,
                delay,
                ...options
            });
            _logger.logger.info('Delayed job added to queue', {
                type: data.type,
                delay,
                executeAt: data.executeAt
            });
        } catch (error) {
            _logger.logger.error('Failed to add delayed job:', error);
            throw error;
        }
    }
    /**
   * Get queue statistics
   */ static async getQueueStats() {
        if (isBuildTime) {
            return {
                workflow: {
                    active: 0,
                    waiting: 0,
                    completed: 0,
                    failed: 0,
                    delayed: 0
                },
                email: {
                    active: 0,
                    waiting: 0,
                    completed: 0,
                    failed: 0,
                    delayed: 0
                },
                sms: {
                    active: 0,
                    waiting: 0,
                    completed: 0,
                    failed: 0,
                    delayed: 0
                },
                delay: {
                    active: 0,
                    waiting: 0,
                    completed: 0,
                    failed: 0,
                    delayed: 0
                },
                timestamp: new Date()
            };
        }
        try {
            const [workflowStats, emailStats, smsStats, delayStats] = await Promise.all([
                this.getIndividualQueueStats(workflowQueue, 'workflow'),
                this.getIndividualQueueStats(emailQueue, 'email'),
                this.getIndividualQueueStats(smsQueue, 'sms'),
                this.getIndividualQueueStats(delayQueue, 'delay')
            ]);
            return {
                workflow: workflowStats,
                email: emailStats,
                sms: smsStats,
                delay: delayStats,
                timestamp: new Date()
            };
        } catch (error) {
            _logger.logger.error('Failed to get queue stats:', error);
            throw error;
        }
    }
    /**
   * Get statistics for an individual queue
   */ static async getIndividualQueueStats(queue, name) {
        if (!queue) {
            return {
                name,
                waiting: 0,
                active: 0,
                completed: 0,
                failed: 0,
                delayed: 0,
                paused: false
            };
        }
        try {
            const [waiting, active, completed, failed, delayed] = await Promise.all([
                queue.getWaiting(),
                queue.getActive(),
                queue.getCompleted(),
                queue.getFailed(),
                queue.getDelayed()
            ]);
            return {
                name,
                waiting: waiting.length,
                active: active.length,
                completed: completed.length,
                failed: failed.length,
                delayed: delayed.length,
                paused: await queue.isPaused()
            };
        } catch (error) {
            _logger.logger.error(`Failed to get stats for ${name} queue:`, error);
            return {
                name,
                waiting: 0,
                active: 0,
                completed: 0,
                failed: 0,
                delayed: 0,
                paused: false,
                error: true
            };
        }
    }
    /**
   * Pause all queues
   */ static async pauseAllQueues() {
        try {
            await Promise.all([
                workflowQueue.pause(),
                emailQueue.pause(),
                smsQueue.pause(),
                delayQueue.pause()
            ]);
            _logger.logger.info('All queues paused');
        } catch (error) {
            _logger.logger.error('Failed to pause all queues:', error);
            throw error;
        }
    }
    /**
   * Resume all queues
   */ static async resumeAllQueues() {
        try {
            await Promise.all([
                workflowQueue.resume(),
                emailQueue.resume(),
                smsQueue.resume(),
                delayQueue.resume()
            ]);
            _logger.logger.info('All queues resumed');
        } catch (error) {
            _logger.logger.error('Failed to resume all queues:', error);
            throw error;
        }
    }
    /**
   * Clean old jobs from all queues
   */ static async cleanAllQueues(olderThan = 24 * 60 * 60 * 1000) {
        try {
            const cleanPromises = [
                workflowQueue,
                emailQueue,
                smsQueue,
                delayQueue
            ].map(async (queue)=>{
                const [completedCleaned, failedCleaned] = await Promise.all([
                    queue.clean(olderThan, 'completed'),
                    queue.clean(olderThan, 'failed')
                ]);
                return {
                    completed: completedCleaned,
                    failed: failedCleaned
                };
            });
            const results = await Promise.all(cleanPromises);
            _logger.logger.info('Queue cleanup completed', {
                results
            });
        } catch (error) {
            _logger.logger.error('Failed to clean queues:', error);
            throw error;
        }
    }
    /**
   * Gracefully shutdown all queues
   */ static async shutdown() {
        try {
            await Promise.all([
                workflowQueue.close(),
                emailQueue.close(),
                smsQueue.close(),
                delayQueue.close()
            ]);
            _logger.logger.info('All queues shut down gracefully');
        } catch (error) {
            _logger.logger.error('Error during queue shutdown:', error);
            throw error;
        }
    }
}
// Graceful shutdown handling
process.on('SIGTERM', async ()=>{
    _logger.logger.info('SIGTERM received, shutting down queues...');
    await QueueManager.shutdown();
    process.exit(0);
});
process.on('SIGINT', async ()=>{
    _logger.logger.info('SIGINT received, shutting down queues...');
    await QueueManager.shutdown();
    process.exit(0);
});

//# sourceMappingURL=data:application/json;base64,