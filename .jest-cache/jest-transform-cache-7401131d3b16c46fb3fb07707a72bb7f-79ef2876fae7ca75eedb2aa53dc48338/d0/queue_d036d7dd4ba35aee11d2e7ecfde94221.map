{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/lib/queue.ts"],"sourcesContent":["/**\n * Queue Management System for MarketSage\n * \n * Handles job queues for workflows, email, SMS, and other async operations\n * using Bull Queue with Redis backing store.\n */\n\nimport Queue from 'bull';\nimport { redisClient } from '@/lib/cache/redis-client';\nimport { logger } from '@/lib/logger';\n\n// Queue job data interfaces\nexport interface WorkflowJobData {\n  workflowId: string;\n  contactId: string;\n  executionId: string;\n  stepId?: string;\n  triggerData?: Record<string, any>;\n  retryCount?: number;\n}\n\nexport interface EmailJobData {\n  campaignId?: string;\n  contactId: string;\n  templateId?: string;\n  emailData: {\n    to: string;\n    subject: string;\n    html: string;\n    text?: string;\n    from?: string;\n  };\n  trackingData?: Record<string, any>;\n  retryCount?: number;\n}\n\nexport interface SMSJobData {\n  campaignId?: string;\n  contactId: string;\n  templateId?: string;\n  smsData: {\n    to: string;\n    message: string;\n    from?: string;\n  };\n  trackingData?: Record<string, any>;\n  retryCount?: number;\n}\n\nexport interface DelayJobData {\n  type: 'workflow' | 'email' | 'sms';\n  originalJobData: WorkflowJobData | EmailJobData | SMSJobData;\n  delay: number; // milliseconds\n  executeAt: Date;\n}\n\n// Redis configuration for Bull queues\nconst redisConfig = {\n  redis: {\n    host: process.env.REDIS_HOST || 'localhost',\n    port: Number.parseInt(process.env.REDIS_PORT || '6379'),\n    password: process.env.REDIS_PASSWORD,\n    db: Number.parseInt(process.env.REDIS_DB || '0'),\n    maxRetriesPerRequest: 3,\n    retryDelayOnFailover: 100,\n    lazyConnect: true,\n  },\n};\n\n// Check if we're in build mode\nconst isBuildTime = process.env.NEXT_PHASE === 'phase-production-build' || \n  process.env.BUILDING === 'true' ||\n  process.argv.includes('build') ||\n  (process.argv.includes('next') && process.argv.includes('build'));\n\n// Create queues only if not in build mode\nexport const workflowQueue: Queue<WorkflowJobData> | null = isBuildTime ? null : new Queue<WorkflowJobData>('workflow-execution', redisConfig);\nexport const emailQueue: Queue<EmailJobData> | null = isBuildTime ? null : new Queue<EmailJobData>('email-sending', redisConfig);\nexport const smsQueue: Queue<SMSJobData> | null = isBuildTime ? null : new Queue<SMSJobData>('sms-sending', redisConfig);\nexport const delayQueue: Queue<DelayJobData> | null = isBuildTime ? null : new Queue<DelayJobData>('delayed-jobs', redisConfig);\n\n// Queue configuration\nconst commonQueueOptions = {\n  removeOnComplete: 100, // Keep last 100 completed jobs\n  removeOnFail: 50,      // Keep last 50 failed jobs\n  attempts: 3,           // Retry failed jobs 3 times\n  backoff: {\n    type: 'exponential',\n    delay: 2000,\n  },\n};\n\n// Apply settings to all queues (only if they exist)\nif (!isBuildTime) {\n  [workflowQueue, emailQueue, smsQueue, delayQueue].forEach(queue => {\n    if (queue) {\n      queue.setMaxListeners(50); // Increase listener limit\n    }\n  });\n}\n\n// Error handling for all queues\nconst setupQueueErrorHandling = (queue: Queue, name: string) => {\n  queue.on('error', (error) => {\n    logger.error(`Queue ${name} error:`, error);\n  });\n\n  queue.on('waiting', (jobId) => {\n    logger.debug(`Job ${jobId} is waiting in ${name} queue`);\n  });\n\n  queue.on('active', (job) => {\n    logger.debug(`Job ${job.id} started in ${name} queue`);\n  });\n\n  queue.on('completed', (job, result) => {\n    logger.debug(`Job ${job.id} completed in ${name} queue`, { result });\n  });\n\n  queue.on('failed', (job, err) => {\n    logger.error(`Job ${job.id} failed in ${name} queue:`, err);\n  });\n\n  queue.on('stalled', (job) => {\n    logger.warn(`Job ${job.id} stalled in ${name} queue`);\n  });\n};\n\n// Setup error handling for all queues (only if they exist)\nif (!isBuildTime) {\n  if (workflowQueue) setupQueueErrorHandling(workflowQueue, 'workflow');\n  if (emailQueue) setupQueueErrorHandling(emailQueue, 'email');\n  if (smsQueue) setupQueueErrorHandling(smsQueue, 'sms');\n  if (delayQueue) setupQueueErrorHandling(delayQueue, 'delay');\n}\n\n// Workflow queue processors (only if not in build mode)\nif (!isBuildTime && workflowQueue) {\n  workflowQueue.process('execute-workflow', async (job) => {\n  const { WorkflowExecutionEngine } = await import('@/lib/workflow/execution-engine');\n  const engine = new WorkflowExecutionEngine();\n  \n  const { workflowId, contactId, executionId, stepId, triggerData } = job.data;\n  \n  try {\n    if (stepId) {\n      // Execute specific step\n      return await engine.executeWorkflowStep(executionId, stepId);\n    } else {\n      // Start workflow execution\n      return await engine.startWorkflowExecution(workflowId, contactId, triggerData);\n    }\n  } catch (error) {\n    logger.error('Workflow execution failed:', error);\n    throw error;\n  }\n  });\n}\n\n// Email queue processors\nif (!isBuildTime && emailQueue) {\n  emailQueue.process('send-email', async (job) => {\n  const { sendTrackedEmail } = await import('@/lib/email-service');\n  \n  const { contactId, emailData, trackingData, campaignId } = job.data;\n  \n  try {\n    return await sendTrackedEmail({\n      ...emailData,\n      campaignId,\n      contactId,\n      trackingData,\n    });\n  } catch (error) {\n    logger.error('Email sending failed:', error);\n    throw error;\n  }\n  });\n}\n\n// SMS queue processors\nif (!isBuildTime && smsQueue) {\n  smsQueue.process('send-sms', async (job) => {\n  const { sendSMS } = await import('@/lib/sms-service');\n  \n  const { contactId, smsData, trackingData, campaignId } = job.data;\n  \n  try {\n    return await sendSMS({\n      ...smsData,\n      campaignId,\n      contactId,\n      trackingData,\n    });\n  } catch (error) {\n    logger.error('SMS sending failed:', error);\n    throw error;\n  }\n  });\n}\n\n// Delay queue processors\nif (!isBuildTime && delayQueue) {\n  delayQueue.process('execute-delayed', async (job) => {\n  const { type, originalJobData } = job.data;\n  \n  try {\n    switch (type) {\n      case 'workflow':\n        if (!workflowQueue) throw new Error('Workflow queue not available');\n        return await workflowQueue.add('execute-workflow', originalJobData as WorkflowJobData, commonQueueOptions);\n      case 'email':\n        if (!emailQueue) throw new Error('Email queue not available');\n        return await emailQueue.add('send-email', originalJobData as EmailJobData, commonQueueOptions);\n      case 'sms':\n        if (!smsQueue) throw new Error('SMS queue not available');\n        return await smsQueue.add('send-sms', originalJobData as SMSJobData, commonQueueOptions);\n      default:\n        throw new Error(`Unknown delayed job type: ${type}`);\n    }\n  } catch (error) {\n    logger.error('Delayed job execution failed:', error);\n    throw error;\n  }\n  });\n}\n\n// Queue utility functions\nexport class QueueManager {\n  /**\n   * Add a workflow execution job\n   */\n  static async addWorkflowJob(data: WorkflowJobData, options = {}): Promise<void> {\n    if (!workflowQueue) {\n      throw new Error('Workflow queue not available (build mode)');\n    }\n    try {\n      await workflowQueue.add('execute-workflow', data, {\n        ...commonQueueOptions,\n        ...options,\n      });\n      logger.info('Workflow job added to queue', { workflowId: data.workflowId, contactId: data.contactId });\n    } catch (error) {\n      logger.error('Failed to add workflow job:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Add an email sending job\n   */\n  static async addEmailJob(data: EmailJobData, options = {}): Promise<void> {\n    if (!emailQueue) {\n      throw new Error('Email queue not available (build mode)');\n    }\n    try {\n      await emailQueue.add('send-email', data, {\n        ...commonQueueOptions,\n        ...options,\n      });\n      logger.info('Email job added to queue', { to: data.emailData.to, campaignId: data.campaignId });\n    } catch (error) {\n      logger.error('Failed to add email job:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Add an SMS sending job\n   */\n  static async addSMSJob(data: SMSJobData, options = {}): Promise<void> {\n    if (!smsQueue) {\n      throw new Error('SMS queue not available (build mode)');\n    }\n    try {\n      await smsQueue.add('send-sms', data, {\n        ...commonQueueOptions,\n        ...options,\n      });\n      logger.info('SMS job added to queue', { to: data.smsData.to, campaignId: data.campaignId });\n    } catch (error) {\n      logger.error('Failed to add SMS job:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Add a delayed job\n   */\n  static async addDelayedJob(data: DelayJobData, options = {}): Promise<void> {\n    if (!delayQueue) {\n      throw new Error('Delay queue not available (build mode)');\n    }\n    try {\n      const delay = Math.max(0, data.executeAt.getTime() - Date.now());\n      \n      await delayQueue.add('execute-delayed', data, {\n        ...commonQueueOptions,\n        delay,\n        ...options,\n      });\n      logger.info('Delayed job added to queue', { type: data.type, delay, executeAt: data.executeAt });\n    } catch (error) {\n      logger.error('Failed to add delayed job:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get queue statistics\n   */\n  static async getQueueStats() {\n    if (isBuildTime) {\n      return {\n        workflow: { active: 0, waiting: 0, completed: 0, failed: 0, delayed: 0 },\n        email: { active: 0, waiting: 0, completed: 0, failed: 0, delayed: 0 },\n        sms: { active: 0, waiting: 0, completed: 0, failed: 0, delayed: 0 },\n        delay: { active: 0, waiting: 0, completed: 0, failed: 0, delayed: 0 },\n        timestamp: new Date(),\n      };\n    }\n    try {\n      const [workflowStats, emailStats, smsStats, delayStats] = await Promise.all([\n        this.getIndividualQueueStats(workflowQueue, 'workflow'),\n        this.getIndividualQueueStats(emailQueue, 'email'),\n        this.getIndividualQueueStats(smsQueue, 'sms'),\n        this.getIndividualQueueStats(delayQueue, 'delay'),\n      ]);\n\n      return {\n        workflow: workflowStats,\n        email: emailStats,\n        sms: smsStats,\n        delay: delayStats,\n        timestamp: new Date(),\n      };\n    } catch (error) {\n      logger.error('Failed to get queue stats:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get statistics for an individual queue\n   */\n  private static async getIndividualQueueStats(queue: Queue | null, name: string) {\n    if (!queue) {\n      return {\n        name,\n        waiting: 0,\n        active: 0,\n        completed: 0,\n        failed: 0,\n        delayed: 0,\n        paused: false,\n      };\n    }\n    try {\n      const [waiting, active, completed, failed, delayed] = await Promise.all([\n        queue.getWaiting(),\n        queue.getActive(),\n        queue.getCompleted(),\n        queue.getFailed(),\n        queue.getDelayed(),\n      ]);\n\n      return {\n        name,\n        waiting: waiting.length,\n        active: active.length,\n        completed: completed.length,\n        failed: failed.length,\n        delayed: delayed.length,\n        paused: await queue.isPaused(),\n      };\n    } catch (error) {\n      logger.error(`Failed to get stats for ${name} queue:`, error);\n      return {\n        name,\n        waiting: 0,\n        active: 0,\n        completed: 0,\n        failed: 0,\n        delayed: 0,\n        paused: false,\n        error: true,\n      };\n    }\n  }\n\n  /**\n   * Pause all queues\n   */\n  static async pauseAllQueues(): Promise<void> {\n    try {\n      await Promise.all([\n        workflowQueue.pause(),\n        emailQueue.pause(),\n        smsQueue.pause(),\n        delayQueue.pause(),\n      ]);\n      logger.info('All queues paused');\n    } catch (error) {\n      logger.error('Failed to pause all queues:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Resume all queues\n   */\n  static async resumeAllQueues(): Promise<void> {\n    try {\n      await Promise.all([\n        workflowQueue.resume(),\n        emailQueue.resume(),\n        smsQueue.resume(),\n        delayQueue.resume(),\n      ]);\n      logger.info('All queues resumed');\n    } catch (error) {\n      logger.error('Failed to resume all queues:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Clean old jobs from all queues\n   */\n  static async cleanAllQueues(olderThan: number = 24 * 60 * 60 * 1000): Promise<void> {\n    try {\n      const cleanPromises = [workflowQueue, emailQueue, smsQueue, delayQueue].map(async (queue) => {\n        const [completedCleaned, failedCleaned] = await Promise.all([\n          queue.clean(olderThan, 'completed'),\n          queue.clean(olderThan, 'failed'),\n        ]);\n        return { completed: completedCleaned, failed: failedCleaned };\n      });\n\n      const results = await Promise.all(cleanPromises);\n      logger.info('Queue cleanup completed', { results });\n    } catch (error) {\n      logger.error('Failed to clean queues:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Gracefully shutdown all queues\n   */\n  static async shutdown(): Promise<void> {\n    try {\n      await Promise.all([\n        workflowQueue.close(),\n        emailQueue.close(),\n        smsQueue.close(),\n        delayQueue.close(),\n      ]);\n      logger.info('All queues shut down gracefully');\n    } catch (error) {\n      logger.error('Error during queue shutdown:', error);\n      throw error;\n    }\n  }\n}\n\n// Graceful shutdown handling\nprocess.on('SIGTERM', async () => {\n  logger.info('SIGTERM received, shutting down queues...');\n  await QueueManager.shutdown();\n  process.exit(0);\n});\n\nprocess.on('SIGINT', async () => {\n  logger.info('SIGINT received, shutting down queues...');\n  await QueueManager.shutdown();\n  process.exit(0);\n});"],"names":["QueueManager","delayQueue","emailQueue","smsQueue","workflowQueue","redisConfig","redis","host","process","env","REDIS_HOST","port","Number","parseInt","REDIS_PORT","password","REDIS_PASSWORD","db","REDIS_DB","maxRetriesPerRequest","retryDelayOnFailover","lazyConnect","isBuildTime","NEXT_PHASE","BUILDING","argv","includes","Queue","commonQueueOptions","removeOnComplete","removeOnFail","attempts","backoff","type","delay","forEach","queue","setMaxListeners","setupQueueErrorHandling","name","on","error","logger","jobId","debug","job","id","result","err","warn","WorkflowExecutionEngine","engine","workflowId","contactId","executionId","stepId","triggerData","data","executeWorkflowStep","startWorkflowExecution","sendTrackedEmail","emailData","trackingData","campaignId","sendSMS","smsData","originalJobData","Error","add","addWorkflowJob","options","info","addEmailJob","to","addSMSJob","addDelayedJob","Math","max","executeAt","getTime","Date","now","getQueueStats","workflow","active","waiting","completed","failed","delayed","email","sms","timestamp","workflowStats","emailStats","smsStats","delayStats","Promise","all","getIndividualQueueStats","paused","getWaiting","getActive","getCompleted","getFailed","getDelayed","length","isPaused","pauseAllQueues","pause","resumeAllQueues","resume","cleanAllQueues","olderThan","cleanPromises","map","completedCleaned","failedCleaned","clean","results","shutdown","close","exit"],"mappings":"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"}