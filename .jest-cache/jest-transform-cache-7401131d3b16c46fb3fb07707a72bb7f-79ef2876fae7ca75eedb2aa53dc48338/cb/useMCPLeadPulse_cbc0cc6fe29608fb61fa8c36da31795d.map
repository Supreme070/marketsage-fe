{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/hooks/useMCPLeadPulse.ts"],"sourcesContent":["/**\n * MCP-Integrated LeadPulse Hook\n * \n * This hook integrates with MCP servers to provide real-time visitor data\n * while maintaining backward compatibility with fallback mechanisms.\n * \n * Data Sources (in order of preference):\n * 1. 'mcp' - Real data from MCP LeadPulse server\n * 2. 'fallback' - Real data from direct database queries\n * 3. 'demo' - Demo data (removed - now returns empty arrays)\n * \n * Features:\n * - Real visitor segmentation based on actual behavior data\n * - Live insights calculated from visitor patterns\n * - Database fallback when MCP server unavailable\n * - No demo data fallbacks (returns empty/real data only)\n */\n\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport { useSession } from 'next-auth/react';\nimport { \n  getMCPVisitorData,\n  getMCPVisitorInsights,\n  getMCPVisitorLocations,\n  type MCPLeadPulseDataProvider\n} from '@/lib/leadpulse/mcp-data-provider';\nimport type { \n  VisitorLocation, \n  VisitorJourney, \n  InsightItem,\n  VisitorSegment \n} from '@/lib/leadpulse/dataProvider';\nimport { \n  type MCPAuthContext\n} from '../mcp/types/mcp-types';\n\ninterface UseMCPLeadPulseOptions {\n  timeRange?: string;\n  refreshInterval?: number;\n  enableRealtime?: boolean;\n  autoRefresh?: boolean;\n  maxVisitors?: number;\n}\n\ninterface MCPLeadPulseData {\n  // Core data\n  visitorLocations: VisitorLocation[];\n  visitorJourneys: VisitorJourney[];\n  insights: InsightItem[];\n  segments: VisitorSegment[];\n  \n  // Analytics overview\n  analyticsOverview: {\n    activeVisitors: number;\n    totalVisitors: number;\n    conversionRate: number;\n    engagementScore: number;\n    bounceRate: number;\n    averageSessionTime: number;\n  };\n  \n  // State management\n  isLoading: boolean;\n  error: string | null;\n  dataSource: 'mcp' | 'fallback' | 'demo';\n  lastUpdated: Date | null;\n  \n  // MCP specific\n  mcpEnabled: boolean;\n  mcpConnected: boolean;\n  \n  // Methods\n  refresh: () => Promise<void>;\n  refreshVisitors: () => Promise<void>;\n  refreshInsights: () => Promise<void>;\n  refreshLocations: () => Promise<void>;\n}\n\n/**\n * MCP-integrated LeadPulse data hook\n */\nexport function useMCPLeadPulse(options: UseMCPLeadPulseOptions = {}): MCPLeadPulseData {\n  const { data: session } = useSession();\n  const {\n    timeRange = '24h',\n    refreshInterval = 60000, // 60 seconds - Reduced frequency for performance\n    enableRealtime = false, // Disabled by default for stability\n    autoRefresh = true,\n    maxVisitors = 50\n  } = options;\n\n  // State\n  const [visitorLocations, setVisitorLocations] = useState<VisitorLocation[]>([]);\n  const [visitorJourneys, setVisitorJourneys] = useState<VisitorJourney[]>([]);\n  const [insights, setInsights] = useState<InsightItem[]>([]);\n  const [segments, setSegments] = useState<VisitorSegment[]>([]);\n  const [analyticsOverview, setAnalyticsOverview] = useState({\n    activeVisitors: 0,\n    totalVisitors: 0,\n    conversionRate: 0,\n    engagementScore: 0,\n    bounceRate: 0,\n    averageSessionTime: 0\n  });\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [dataSource, setDataSource] = useState<'mcp' | 'fallback' | 'demo'>('fallback');\n  const [lastUpdated, setLastUpdated] = useState<Date | null>(null);\n  const [mcpEnabled, setMcpEnabled] = useState(false);\n  const [mcpConnected, setMcpConnected] = useState(false);\n\n  // Refs for preventing race conditions\n  const isMountedRef = useRef(true);\n  const lastFetchRef = useRef<number>(0);\n  const refreshTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Create MCP auth context from session\n  const createAuthContext = useCallback((): MCPAuthContext | undefined => {\n    if (!session?.user) return undefined;\n    \n    return {\n      userId: session.user.id || '',\n      organizationId: (session.user as any).organizationId || '',\n      permissions: ['read:org', 'read:leadpulse'],\n      role: (session.user as any).role || 'user'\n    };\n  }, [session]);\n\n  /**\n   * Fetch visitor data from MCP\n   */\n  const fetchVisitorData = useCallback(async (force = false) => {\n    if (!isMountedRef.current) return;\n    \n    // Prevent too frequent fetches\n    const now = Date.now();\n    if (!force && now - lastFetchRef.current < 5000) {\n      return;\n    }\n    lastFetchRef.current = now;\n\n    try {\n      setError(null);\n      \n      const authContext = createAuthContext();\n      \n      // Fetch visitor journeys (main visitor data)\n      const journeys = await getMCPVisitorData({\n        limit: maxVisitors,\n        includeLocation: true,\n        includeDevice: true,\n        authContext\n      });\n\n      if (isMountedRef.current) {\n        setVisitorJourneys(journeys);\n        setDataSource(authContext ? 'mcp' : 'fallback');\n        setMcpEnabled(!!authContext);\n        setMcpConnected(!!authContext);\n        \n        // Calculate analytics overview from visitor data\n        const overview = calculateAnalyticsOverview(journeys);\n        setAnalyticsOverview(overview);\n      }\n    } catch (err) {\n      if (isMountedRef.current) {\n        setError(err instanceof Error ? err.message : 'Failed to fetch visitor data');\n        setDataSource('fallback');\n        setMcpConnected(false);\n      }\n    }\n  }, [createAuthContext, maxVisitors]);\n\n  /**\n   * Fetch visitor locations from MCP\n   */\n  const fetchLocations = useCallback(async () => {\n    if (!isMountedRef.current) return;\n\n    try {\n      const authContext = createAuthContext();\n      const locations = await getMCPVisitorLocations(authContext);\n      \n      if (isMountedRef.current) {\n        setVisitorLocations(locations);\n      }\n    } catch (err) {\n      console.error('Failed to fetch visitor locations:', err);\n    }\n  }, [createAuthContext]);\n\n  /**\n   * Fetch insights from MCP\n   */\n  const fetchInsights = useCallback(async () => {\n    if (!isMountedRef.current) return;\n\n    try {\n      const authContext = createAuthContext();\n      const insightsData = await getMCPVisitorInsights(authContext);\n      \n      if (isMountedRef.current) {\n        setInsights(insightsData);\n      }\n    } catch (err) {\n      console.error('Failed to fetch insights:', err);\n    }\n  }, [createAuthContext]);\n\n  /**\n   * Fetch segments from real MCP visitor data\n   */\n  const fetchSegments = useCallback(async () => {\n    if (!isMountedRef.current) return;\n\n    try {\n      const authContext = createAuthContext();\n      \n      // Get visitor data to calculate real segments\n      const visitors = await getMCPVisitorData({\n        limit: 200, // Get more data for accurate segmentation\n        includeLocation: true,\n        includeDevice: true,\n        authContext\n      });\n      \n      if (visitors.length === 0) {\n        // Fallback to empty segments if no data\n        setSegments([]);\n        return;\n      }\n\n      // Calculate real segments from visitor data\n      const totalVisitors = visitors.length;\n      \n      // High Intent: Visitors with engagement score > 70\n      const highIntent = visitors.filter(v => v.engagementScore > 70);\n      \n      // New Visitors: Visitors with only 1-2 pulse data points\n      const newVisitors = visitors.filter(v => v.pulseData.length <= 2);\n      \n      // Returning Visitors: Visitors with multiple sessions indicated by pulse data\n      const returningVisitors = visitors.filter(v => v.pulseData.length > 5);\n      \n      // Mobile Users: Determine from device info in visitor data\n      const mobileUsers = visitors.filter(v => \n        v.device.toLowerCase().includes('mobile') || \n        v.device.toLowerCase().includes('iphone') ||\n        v.device.toLowerCase().includes('android')\n      );\n\n      const realSegments: VisitorSegment[] = [\n        { \n          id: '1', \n          name: 'High Intent', \n          count: highIntent.length, \n          percentage: Math.round((highIntent.length / totalVisitors) * 100), \n          key: 'high_intent' \n        },\n        { \n          id: '2', \n          name: 'New Visitors', \n          count: newVisitors.length, \n          percentage: Math.round((newVisitors.length / totalVisitors) * 100), \n          key: 'new_visitors' \n        },\n        { \n          id: '3', \n          name: 'Returning', \n          count: returningVisitors.length, \n          percentage: Math.round((returningVisitors.length / totalVisitors) * 100), \n          key: 'returning' \n        },\n        { \n          id: '4', \n          name: 'Mobile Users', \n          count: mobileUsers.length, \n          percentage: Math.round((mobileUsers.length / totalVisitors) * 100), \n          key: 'mobile_users' \n        }\n      ];\n      \n      if (isMountedRef.current) {\n        setSegments(realSegments);\n        setDataSource(authContext ? 'mcp' : 'fallback');\n      }\n    } catch (err) {\n      console.error('Failed to fetch segments:', err);\n      // Set empty segments on error instead of demo data\n      if (isMountedRef.current) {\n        setSegments([]);\n        setDataSource('fallback');\n      }\n    }\n  }, [createAuthContext]);\n\n  /**\n   * Refresh all data\n   */\n  const refresh = useCallback(async () => {\n    if (!isMountedRef.current) return;\n    \n    setIsLoading(true);\n    \n    try {\n      await Promise.all([\n        fetchVisitorData(true),\n        fetchLocations(),\n        fetchInsights(),\n        fetchSegments()\n      ]);\n      \n      if (isMountedRef.current) {\n        setLastUpdated(new Date());\n      }\n    } catch (err) {\n      console.error('Failed to refresh data:', err);\n    } finally {\n      if (isMountedRef.current) {\n        setIsLoading(false);\n      }\n    }\n  }, [fetchVisitorData, fetchLocations, fetchInsights, fetchSegments]);\n\n  /**\n   * Individual refresh methods\n   */\n  const refreshVisitors = useCallback(async () => {\n    await fetchVisitorData(true);\n  }, [fetchVisitorData]);\n\n  const refreshInsights = useCallback(async () => {\n    await fetchInsights();\n  }, [fetchInsights]);\n\n  const refreshLocations = useCallback(async () => {\n    await fetchLocations();\n  }, [fetchLocations]);\n\n  // Initial data fetch - Fixed to prevent infinite loops\n  useEffect(() => {\n    if (session !== undefined) { // Wait for session to be determined\n      refresh();\n    }\n  }, [session]); // Removed 'refresh' from dependencies\n\n  // Auto-refresh setup - Fixed to prevent infinite loops\n  useEffect(() => {\n    if (!autoRefresh || !enableRealtime) return;\n\n    const intervalId = setInterval(() => {\n      if (isMountedRef.current) {\n        refresh();\n      }\n    }, refreshInterval);\n\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [autoRefresh, enableRealtime, refreshInterval]); // Removed 'refresh' from dependencies\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      isMountedRef.current = false;\n      if (refreshTimeoutRef.current) {\n        clearTimeout(refreshTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  return {\n    // Core data\n    visitorLocations,\n    visitorJourneys,\n    insights,\n    segments,\n    analyticsOverview,\n    \n    // State\n    isLoading,\n    error,\n    dataSource,\n    lastUpdated,\n    \n    // MCP specific\n    mcpEnabled,\n    mcpConnected,\n    \n    // Methods\n    refresh,\n    refreshVisitors,\n    refreshInsights,\n    refreshLocations\n  };\n}\n\n/**\n * Calculate analytics overview from visitor data\n */\nfunction calculateAnalyticsOverview(journeys: VisitorJourney[]) {\n  if (journeys.length === 0) {\n    return {\n      activeVisitors: 0,\n      totalVisitors: 0,\n      conversionRate: 0,\n      engagementScore: 0,\n      bounceRate: 0,\n      averageSessionTime: 0\n    };\n  }\n\n  const activeVisitors = journeys.filter(v => \n    v.lastActive === 'just now' || v.lastActive.includes('min ago')\n  ).length;\n\n  const totalVisitors = journeys.length;\n  \n  const avgEngagement = journeys.reduce((sum, v) => sum + v.engagementScore, 0) / totalVisitors;\n  \n  // Calculate conversion rate based on pulse data\n  const conversions = journeys.filter(v => \n    v.pulseData.some(p => p.type === 'CONVERSION')\n  ).length;\n  const conversionRate = (conversions / totalVisitors) * 100;\n  \n  // Calculate bounce rate (visitors with only one pulse data point)\n  const bounces = journeys.filter(v => v.pulseData.length <= 1).length;\n  const bounceRate = (bounces / totalVisitors) * 100;\n  \n  // Estimate average session time from pulse data\n  const avgSessionTime = journeys.reduce((sum, v) => {\n    const sessionTime = v.pulseData.reduce((time, p) => time + (p.value || 60), 0);\n    return sum + sessionTime;\n  }, 0) / totalVisitors;\n\n  return {\n    activeVisitors,\n    totalVisitors,\n    conversionRate: Math.round(conversionRate * 10) / 10,\n    engagementScore: Math.round(avgEngagement),\n    bounceRate: Math.round(bounceRate * 10) / 10,\n    averageSessionTime: Math.round(avgSessionTime)\n  };\n}\n\nexport default useMCPLeadPulse;"],"names":["useMCPLeadPulse","options","data","session","useSession","timeRange","refreshInterval","enableRealtime","autoRefresh","maxVisitors","visitorLocations","setVisitorLocations","useState","visitorJourneys","setVisitorJourneys","insights","setInsights","segments","setSegments","analyticsOverview","setAnalyticsOverview","activeVisitors","totalVisitors","conversionRate","engagementScore","bounceRate","averageSessionTime","isLoading","setIsLoading","error","setError","dataSource","setDataSource","lastUpdated","setLastUpdated","mcpEnabled","setMcpEnabled","mcpConnected","setMcpConnected","isMountedRef","useRef","lastFetchRef","refreshTimeoutRef","createAuthContext","useCallback","user","undefined","userId","id","organizationId","permissions","role","fetchVisitorData","force","current","now","Date","authContext","journeys","getMCPVisitorData","limit","includeLocation","includeDevice","overview","calculateAnalyticsOverview","err","Error","message","fetchLocations","locations","getMCPVisitorLocations","console","fetchInsights","insightsData","getMCPVisitorInsights","fetchSegments","visitors","length","highIntent","filter","v","newVisitors","pulseData","returningVisitors","mobileUsers","device","toLowerCase","includes","realSegments","name","count","percentage","Math","round","key","refresh","Promise","all","refreshVisitors","refreshInsights","refreshLocations","useEffect","intervalId","setInterval","clearInterval","clearTimeout","lastActive","avgEngagement","reduce","sum","conversions","some","p","type","bounces","avgSessionTime","sessionTime","time","value"],"mappings":"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"}