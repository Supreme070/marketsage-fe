26828da989d859e80437ef71e36940d1
/**
 * Mock implementations for MCP testing
 * 
 * These mocks simulate database and external service behavior while
 * allowing us to test that the MCP servers are correctly integrating
 * with real data sources.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    enterpriseAuditLogger: function() {
        return mockAuditLogger;
    },
    mockAuditLogger: function() {
        return mockAuditLogger;
    },
    mockAuthScenarios: function() {
        return mockAuthScenarios;
    },
    mockDatabaseScenarios: function() {
        return mockDatabaseScenarios;
    },
    mockNextAuth: function() {
        return mockNextAuth;
    },
    mockPrismaClient: function() {
        return mockPrismaClient;
    },
    mockRateLimitScenarios: function() {
        return mockRateLimitScenarios;
    },
    mockRedisClient: function() {
        return mockRedisClient;
    },
    prisma: function() {
        return mockPrismaClient;
    },
    redisCache: function() {
        return mockRedisClient;
    },
    resetAllMocks: function() {
        return resetAllMocks;
    },
    setupDefaultMocks: function() {
        return setupDefaultMocks;
    },
    testDataFactory: function() {
        return testDataFactory;
    }
});
const _globals = require("@jest/globals");
const mockPrismaClient = {
    user: {
        findUnique: _globals.jest.fn(),
        findFirst: _globals.jest.fn(),
        findMany: _globals.jest.fn(),
        create: _globals.jest.fn(),
        update: _globals.jest.fn(),
        delete: _globals.jest.fn(),
        deleteMany: _globals.jest.fn()
    },
    organization: {
        findUnique: _globals.jest.fn(),
        findMany: _globals.jest.fn(),
        create: _globals.jest.fn(),
        update: _globals.jest.fn(),
        delete: _globals.jest.fn(),
        deleteMany: _globals.jest.fn()
    },
    contact: {
        findUnique: _globals.jest.fn(),
        findMany: _globals.jest.fn(),
        create: _globals.jest.fn(),
        createMany: _globals.jest.fn(),
        update: _globals.jest.fn(),
        delete: _globals.jest.fn(),
        deleteMany: _globals.jest.fn(),
        count: _globals.jest.fn()
    },
    campaign: {
        findUnique: _globals.jest.fn(),
        findMany: _globals.jest.fn(),
        create: _globals.jest.fn(),
        update: _globals.jest.fn(),
        delete: _globals.jest.fn(),
        deleteMany: _globals.jest.fn(),
        count: _globals.jest.fn()
    },
    segment: {
        findUnique: _globals.jest.fn(),
        findMany: _globals.jest.fn(),
        create: _globals.jest.fn(),
        update: _globals.jest.fn(),
        delete: _globals.jest.fn(),
        deleteMany: _globals.jest.fn()
    },
    leadPulseVisitor: {
        findUnique: _globals.jest.fn(),
        findMany: _globals.jest.fn(),
        create: _globals.jest.fn(),
        update: _globals.jest.fn(),
        delete: _globals.jest.fn(),
        deleteMany: _globals.jest.fn(),
        count: _globals.jest.fn()
    },
    leadPulseSession: {
        findMany: _globals.jest.fn(),
        create: _globals.jest.fn(),
        update: _globals.jest.fn(),
        deleteMany: _globals.jest.fn()
    },
    $disconnect: _globals.jest.fn(),
    $connect: _globals.jest.fn(),
    $transaction: _globals.jest.fn()
};
const mockRedisClient = {
    get: _globals.jest.fn(),
    set: _globals.jest.fn(),
    increment: _globals.jest.fn(),
    decrement: _globals.jest.fn(),
    expire: _globals.jest.fn(),
    ttl: _globals.jest.fn(),
    exists: _globals.jest.fn(),
    del: _globals.jest.fn(),
    flushall: _globals.jest.fn(),
    ping: _globals.jest.fn(),
    disconnect: _globals.jest.fn(),
    client: {
        exists: _globals.jest.fn(),
        ttl: _globals.jest.fn()
    }
};
const mockAuditLogger = {
    logEvent: _globals.jest.fn(),
    logSecurityEvent: _globals.jest.fn(),
    logMCPActivity: _globals.jest.fn()
};
const mockNextAuth = {
    getServerSession: _globals.jest.fn(),
    validateSession: _globals.jest.fn()
};
const testDataFactory = {
    createUser: (overrides)=>({
            id: 'user-123',
            email: 'test@example.com',
            name: 'Test User',
            role: 'USER',
            organizationId: 'org-456',
            isActive: true,
            lastLogin: new Date(),
            createdAt: new Date(),
            updatedAt: new Date(),
            organization: {
                id: 'org-456',
                name: 'Test Organization',
                slug: 'test-org',
                plan: 'pro'
            },
            ...overrides
        }),
    createOrganization: (overrides)=>({
            id: 'org-456',
            name: 'Test Organization',
            slug: 'test-org',
            plan: 'pro',
            apiKey: 'test-api-key',
            createdAt: new Date(),
            updatedAt: new Date(),
            ...overrides
        }),
    createContact: (overrides)=>({
            id: 'contact-789',
            email: 'contact@example.com',
            firstName: 'John',
            lastName: 'Doe',
            organizationId: 'org-456',
            createdById: 'user-123',
            tags: [],
            customFields: {},
            lastActivity: new Date(),
            engagementScore: 75,
            createdAt: new Date(),
            updatedAt: new Date(),
            ...overrides
        }),
    createCampaign: (overrides)=>({
            id: 'campaign-101',
            name: 'Test Campaign',
            type: 'EMAIL',
            status: 'ACTIVE',
            organizationId: 'org-456',
            createdById: 'user-123',
            subject: 'Test Subject',
            content: '<p>Test content</p>',
            scheduledAt: new Date(),
            sentAt: null,
            stats: {
                sent: 100,
                delivered: 95,
                opened: 45,
                clicked: 12,
                bounced: 5,
                unsubscribed: 2
            },
            createdAt: new Date(),
            updatedAt: new Date(),
            ...overrides
        }),
    createSegment: (overrides)=>({
            id: 'segment-202',
            name: 'High Engagement Users',
            organizationId: 'org-456',
            description: 'Users with high engagement scores',
            conditions: {
                all: [
                    {
                        field: 'engagement_score',
                        operator: 'gt',
                        value: 70
                    }
                ]
            },
            contactCount: 150,
            createdAt: new Date(),
            updatedAt: new Date(),
            ...overrides
        }),
    createVisitor: (overrides)=>({
            id: 'visitor-303',
            fingerprint: 'fp_abc123',
            organizationId: 'org-456',
            ipAddress: '192.168.1.1',
            userAgent: 'Mozilla/5.0 Test Browser',
            country: 'NG',
            city: 'Lagos',
            source: 'organic',
            firstSeen: new Date(),
            lastSeen: new Date(),
            sessionCount: 3,
            pageViews: 15,
            engagementScore: 65,
            isBot: false,
            ...overrides
        }),
    createSession: (overrides)=>({
            id: 'session-404',
            visitorId: 'visitor-303',
            organizationId: 'org-456',
            startedAt: new Date(),
            endedAt: null,
            duration: 0,
            pageViews: 1,
            events: [],
            referrer: 'https://google.com',
            landingPage: '/home',
            exitPage: null,
            ...overrides
        })
};
const mockRateLimitScenarios = {
    withinLimit: ()=>{
        mockRedisClient.increment.mockResolvedValue(5); // Under limit
        mockRedisClient.ttl.mockResolvedValue(3600); // 1 hour remaining
    },
    approachingLimit: ()=>{
        mockRedisClient.increment.mockResolvedValue(8); // 80% of limit
        mockRedisClient.ttl.mockResolvedValue(1800); // 30 minutes remaining
    },
    exceedsLimit: ()=>{
        mockRedisClient.increment.mockResolvedValue(15); // Over limit of 10
        mockRedisClient.ttl.mockResolvedValue(900); // 15 minutes remaining
    },
    redisUnavailable: ()=>{
        mockRedisClient.increment.mockResolvedValue(null); // Redis error
    }
};
const mockAuthScenarios = {
    validUser: ()=>{
        const user = testDataFactory.createUser();
        mockPrismaClient.user.findUnique.mockResolvedValue(user);
        return user;
    },
    adminUser: ()=>{
        const user = testDataFactory.createUser({
            role: 'ADMIN'
        });
        mockPrismaClient.user.findUnique.mockResolvedValue(user);
        return user;
    },
    superAdminUser: ()=>{
        const user = testDataFactory.createUser({
            role: 'SUPER_ADMIN'
        });
        mockPrismaClient.user.findUnique.mockResolvedValue(user);
        return user;
    },
    inactiveUser: ()=>{
        const user = testDataFactory.createUser({
            isActive: false
        });
        mockPrismaClient.user.findUnique.mockResolvedValue(user);
        return user;
    },
    nonexistentUser: ()=>{
        mockPrismaClient.user.findUnique.mockResolvedValue(null);
    },
    databaseError: ()=>{
        mockPrismaClient.user.findUnique.mockRejectedValue(new Error('Database connection failed'));
    }
};
const mockDatabaseScenarios = {
    fastQuery: (data)=>{
        return new Promise((resolve)=>{
            setTimeout(()=>resolve(data), 10); // 10ms response
        });
    },
    slowQuery: (data)=>{
        return new Promise((resolve)=>{
            setTimeout(()=>resolve(data), 1000); // 1s response
        });
    },
    timeoutQuery: ()=>{
        return new Promise((_, reject)=>{
            setTimeout(()=>reject(new Error('Query timeout')), 5000);
        });
    },
    largeDataset: ()=>{
        return Array.from({
            length: 1000
        }, (_, i)=>testDataFactory.createContact({
                id: `contact-${i}`,
                email: `user${i}@example.com`
            }));
    }
};
const resetAllMocks = ()=>{
    Object.values(mockPrismaClient).forEach((mock)=>{
        if (typeof mock === 'object') {
            Object.values(mock).forEach((method)=>{
                if (_globals.jest.isMockFunction(method)) {
                    method.mockReset();
                }
            });
        }
    });
    Object.values(mockRedisClient).forEach((mock)=>{
        if (_globals.jest.isMockFunction(mock)) {
            mock.mockReset();
        }
    });
    Object.values(mockAuditLogger).forEach((mock)=>{
        if (_globals.jest.isMockFunction(mock)) {
            mock.mockReset();
        }
    });
    Object.values(mockNextAuth).forEach((mock)=>{
        if (_globals.jest.isMockFunction(mock)) {
            mock.mockReset();
        }
    });
};
const setupDefaultMocks = ()=>{
    // Default user lookup
    mockPrismaClient.user.findUnique.mockResolvedValue(testDataFactory.createUser());
    // Default rate limiting
    mockRedisClient.increment.mockResolvedValue(1);
    mockRedisClient.expire.mockResolvedValue(true);
    mockRedisClient.ttl.mockResolvedValue(3600);
    // Default audit logging
    mockAuditLogger.logEvent.mockResolvedValue(undefined);
    mockAuditLogger.logSecurityEvent.mockResolvedValue(undefined);
    // Default database connection
    mockPrismaClient.$disconnect.mockResolvedValue(undefined);
    mockPrismaClient.$connect.mockResolvedValue(undefined);
    // Default Redis connection
    mockRedisClient.ping.mockResolvedValue('PONG');
    mockRedisClient.disconnect.mockResolvedValue(undefined);
};

//# sourceMappingURL=data:application/json;base64,