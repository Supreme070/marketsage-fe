{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/__tests__/mcp/__mocks__/mcp-mocks.ts"],"sourcesContent":["/**\n * Mock implementations for MCP testing\n * \n * These mocks simulate database and external service behavior while\n * allowing us to test that the MCP servers are correctly integrating\n * with real data sources.\n */\n\nimport { jest } from '@jest/globals';\n\n// Mock Prisma client with realistic database interactions\nexport const mockPrismaClient = {\n  user: {\n    findUnique: jest.fn(),\n    findFirst: jest.fn(),\n    findMany: jest.fn(),\n    create: jest.fn(),\n    update: jest.fn(),\n    delete: jest.fn(),\n    deleteMany: jest.fn()\n  },\n  organization: {\n    findUnique: jest.fn(),\n    findMany: jest.fn(),\n    create: jest.fn(),\n    update: jest.fn(),\n    delete: jest.fn(),\n    deleteMany: jest.fn()\n  },\n  contact: {\n    findUnique: jest.fn(),\n    findMany: jest.fn(),\n    create: jest.fn(),\n    createMany: jest.fn(),\n    update: jest.fn(),\n    delete: jest.fn(),\n    deleteMany: jest.fn(),\n    count: jest.fn()\n  },\n  campaign: {\n    findUnique: jest.fn(),\n    findMany: jest.fn(),\n    create: jest.fn(),\n    update: jest.fn(),\n    delete: jest.fn(),\n    deleteMany: jest.fn(),\n    count: jest.fn()\n  },\n  segment: {\n    findUnique: jest.fn(),\n    findMany: jest.fn(),\n    create: jest.fn(),\n    update: jest.fn(),\n    delete: jest.fn(),\n    deleteMany: jest.fn()\n  },\n  leadPulseVisitor: {\n    findUnique: jest.fn(),\n    findMany: jest.fn(),\n    create: jest.fn(),\n    update: jest.fn(),\n    delete: jest.fn(),\n    deleteMany: jest.fn(),\n    count: jest.fn()\n  },\n  leadPulseSession: {\n    findMany: jest.fn(),\n    create: jest.fn(),\n    update: jest.fn(),\n    deleteMany: jest.fn()\n  },\n  $disconnect: jest.fn(),\n  $connect: jest.fn(),\n  $transaction: jest.fn()\n};\n\n// Mock Redis client with rate limiting and caching functionality\nexport const mockRedisClient = {\n  get: jest.fn(),\n  set: jest.fn(),\n  increment: jest.fn(),\n  decrement: jest.fn(),\n  expire: jest.fn(),\n  ttl: jest.fn(),\n  exists: jest.fn(),\n  del: jest.fn(),\n  flushall: jest.fn(),\n  ping: jest.fn(),\n  disconnect: jest.fn(),\n  client: {\n    exists: jest.fn(),\n    ttl: jest.fn()\n  }\n};\n\n// Mock enterprise audit logger\nexport const mockAuditLogger = {\n  logEvent: jest.fn(),\n  logSecurityEvent: jest.fn(),\n  logMCPActivity: jest.fn()\n};\n\n// Mock NextAuth session validation\nexport const mockNextAuth = {\n  getServerSession: jest.fn(),\n  validateSession: jest.fn()\n};\n\n// Test data factories for realistic test scenarios\nexport const testDataFactory = {\n  createUser: (overrides?: any) => ({\n    id: 'user-123',\n    email: 'test@example.com',\n    name: 'Test User',\n    role: 'USER',\n    organizationId: 'org-456',\n    isActive: true,\n    lastLogin: new Date(),\n    createdAt: new Date(),\n    updatedAt: new Date(),\n    organization: {\n      id: 'org-456',\n      name: 'Test Organization',\n      slug: 'test-org',\n      plan: 'pro'\n    },\n    ...overrides\n  }),\n\n  createOrganization: (overrides?: any) => ({\n    id: 'org-456',\n    name: 'Test Organization',\n    slug: 'test-org',\n    plan: 'pro',\n    apiKey: 'test-api-key',\n    createdAt: new Date(),\n    updatedAt: new Date(),\n    ...overrides\n  }),\n\n  createContact: (overrides?: any) => ({\n    id: 'contact-789',\n    email: 'contact@example.com',\n    firstName: 'John',\n    lastName: 'Doe',\n    organizationId: 'org-456',\n    createdById: 'user-123',\n    tags: [],\n    customFields: {},\n    lastActivity: new Date(),\n    engagementScore: 75,\n    createdAt: new Date(),\n    updatedAt: new Date(),\n    ...overrides\n  }),\n\n  createCampaign: (overrides?: any) => ({\n    id: 'campaign-101',\n    name: 'Test Campaign',\n    type: 'EMAIL',\n    status: 'ACTIVE',\n    organizationId: 'org-456',\n    createdById: 'user-123',\n    subject: 'Test Subject',\n    content: '<p>Test content</p>',\n    scheduledAt: new Date(),\n    sentAt: null,\n    stats: {\n      sent: 100,\n      delivered: 95,\n      opened: 45,\n      clicked: 12,\n      bounced: 5,\n      unsubscribed: 2\n    },\n    createdAt: new Date(),\n    updatedAt: new Date(),\n    ...overrides\n  }),\n\n  createSegment: (overrides?: any) => ({\n    id: 'segment-202',\n    name: 'High Engagement Users',\n    organizationId: 'org-456',\n    description: 'Users with high engagement scores',\n    conditions: {\n      all: [\n        { field: 'engagement_score', operator: 'gt', value: 70 }\n      ]\n    },\n    contactCount: 150,\n    createdAt: new Date(),\n    updatedAt: new Date(),\n    ...overrides\n  }),\n\n  createVisitor: (overrides?: any) => ({\n    id: 'visitor-303',\n    fingerprint: 'fp_abc123',\n    organizationId: 'org-456',\n    ipAddress: '192.168.1.1',\n    userAgent: 'Mozilla/5.0 Test Browser',\n    country: 'NG',\n    city: 'Lagos',\n    source: 'organic',\n    firstSeen: new Date(),\n    lastSeen: new Date(),\n    sessionCount: 3,\n    pageViews: 15,\n    engagementScore: 65,\n    isBot: false,\n    ...overrides\n  }),\n\n  createSession: (overrides?: any) => ({\n    id: 'session-404',\n    visitorId: 'visitor-303',\n    organizationId: 'org-456',\n    startedAt: new Date(),\n    endedAt: null,\n    duration: 0,\n    pageViews: 1,\n    events: [],\n    referrer: 'https://google.com',\n    landingPage: '/home',\n    exitPage: null,\n    ...overrides\n  })\n};\n\n// Mock rate limiting scenarios\nexport const mockRateLimitScenarios = {\n  withinLimit: () => {\n    mockRedisClient.increment.mockResolvedValue(5); // Under limit\n    mockRedisClient.ttl.mockResolvedValue(3600); // 1 hour remaining\n  },\n\n  approachingLimit: () => {\n    mockRedisClient.increment.mockResolvedValue(8); // 80% of limit\n    mockRedisClient.ttl.mockResolvedValue(1800); // 30 minutes remaining\n  },\n\n  exceedsLimit: () => {\n    mockRedisClient.increment.mockResolvedValue(15); // Over limit of 10\n    mockRedisClient.ttl.mockResolvedValue(900); // 15 minutes remaining\n  },\n\n  redisUnavailable: () => {\n    mockRedisClient.increment.mockResolvedValue(null); // Redis error\n  }\n};\n\n// Mock authentication scenarios\nexport const mockAuthScenarios = {\n  validUser: () => {\n    const user = testDataFactory.createUser();\n    mockPrismaClient.user.findUnique.mockResolvedValue(user);\n    return user;\n  },\n\n  adminUser: () => {\n    const user = testDataFactory.createUser({ role: 'ADMIN' });\n    mockPrismaClient.user.findUnique.mockResolvedValue(user);\n    return user;\n  },\n\n  superAdminUser: () => {\n    const user = testDataFactory.createUser({ role: 'SUPER_ADMIN' });\n    mockPrismaClient.user.findUnique.mockResolvedValue(user);\n    return user;\n  },\n\n  inactiveUser: () => {\n    const user = testDataFactory.createUser({ isActive: false });\n    mockPrismaClient.user.findUnique.mockResolvedValue(user);\n    return user;\n  },\n\n  nonexistentUser: () => {\n    mockPrismaClient.user.findUnique.mockResolvedValue(null);\n  },\n\n  databaseError: () => {\n    mockPrismaClient.user.findUnique.mockRejectedValue(new Error('Database connection failed'));\n  }\n};\n\n// Mock database query scenarios for performance testing\nexport const mockDatabaseScenarios = {\n  fastQuery: (data: any) => {\n    return new Promise(resolve => {\n      setTimeout(() => resolve(data), 10); // 10ms response\n    });\n  },\n\n  slowQuery: (data: any) => {\n    return new Promise(resolve => {\n      setTimeout(() => resolve(data), 1000); // 1s response\n    });\n  },\n\n  timeoutQuery: () => {\n    return new Promise((_, reject) => {\n      setTimeout(() => reject(new Error('Query timeout')), 5000);\n    });\n  },\n\n  largeDataset: () => {\n    return Array.from({ length: 1000 }, (_, i) => \n      testDataFactory.createContact({ id: `contact-${i}`, email: `user${i}@example.com` })\n    );\n  }\n};\n\n// Reset all mocks helper\nexport const resetAllMocks = () => {\n  Object.values(mockPrismaClient).forEach(mock => {\n    if (typeof mock === 'object') {\n      Object.values(mock).forEach(method => {\n        if (jest.isMockFunction(method)) {\n          method.mockReset();\n        }\n      });\n    }\n  });\n\n  Object.values(mockRedisClient).forEach(mock => {\n    if (jest.isMockFunction(mock)) {\n      mock.mockReset();\n    }\n  });\n\n  Object.values(mockAuditLogger).forEach(mock => {\n    if (jest.isMockFunction(mock)) {\n      mock.mockReset();\n    }\n  });\n\n  Object.values(mockNextAuth).forEach(mock => {\n    if (jest.isMockFunction(mock)) {\n      mock.mockReset();\n    }\n  });\n};\n\n// Helper to setup default successful mocks\nexport const setupDefaultMocks = () => {\n  // Default user lookup\n  mockPrismaClient.user.findUnique.mockResolvedValue(testDataFactory.createUser());\n  \n  // Default rate limiting\n  mockRedisClient.increment.mockResolvedValue(1);\n  mockRedisClient.expire.mockResolvedValue(true);\n  mockRedisClient.ttl.mockResolvedValue(3600);\n  \n  // Default audit logging\n  mockAuditLogger.logEvent.mockResolvedValue(undefined);\n  mockAuditLogger.logSecurityEvent.mockResolvedValue(undefined);\n  \n  // Default database connection\n  mockPrismaClient.$disconnect.mockResolvedValue(undefined);\n  mockPrismaClient.$connect.mockResolvedValue(undefined);\n  \n  // Default Redis connection\n  mockRedisClient.ping.mockResolvedValue('PONG');\n  mockRedisClient.disconnect.mockResolvedValue(undefined);\n};\n\n// Export all mocks\nexport {\n  mockPrismaClient as prisma,\n  mockRedisClient as redisCache,\n  mockAuditLogger as enterpriseAuditLogger,\n  mockNextAuth\n};"],"names":["enterpriseAuditLogger","mockAuditLogger","mockAuthScenarios","mockDatabaseScenarios","mockNextAuth","mockPrismaClient","mockRateLimitScenarios","mockRedisClient","prisma","redisCache","resetAllMocks","setupDefaultMocks","testDataFactory","user","findUnique","jest","fn","findFirst","findMany","create","update","delete","deleteMany","organization","contact","createMany","count","campaign","segment","leadPulseVisitor","leadPulseSession","$disconnect","$connect","$transaction","get","set","increment","decrement","expire","ttl","exists","del","flushall","ping","disconnect","client","logEvent","logSecurityEvent","logMCPActivity","getServerSession","validateSession","createUser","overrides","id","email","name","role","organizationId","isActive","lastLogin","Date","createdAt","updatedAt","slug","plan","createOrganization","apiKey","createContact","firstName","lastName","createdById","tags","customFields","lastActivity","engagementScore","createCampaign","type","status","subject","content","scheduledAt","sentAt","stats","sent","delivered","opened","clicked","bounced","unsubscribed","createSegment","description","conditions","all","field","operator","value","contactCount","createVisitor","fingerprint","ipAddress","userAgent","country","city","source","firstSeen","lastSeen","sessionCount","pageViews","isBot","createSession","visitorId","startedAt","endedAt","duration","events","referrer","landingPage","exitPage","withinLimit","mockResolvedValue","approachingLimit","exceedsLimit","redisUnavailable","validUser","adminUser","superAdminUser","inactiveUser","nonexistentUser","databaseError","mockRejectedValue","Error","fastQuery","data","Promise","resolve","setTimeout","slowQuery","timeoutQuery","_","reject","largeDataset","Array","from","length","i","Object","values","forEach","mock","method","isMockFunction","mockReset","undefined"],"mappings":"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"}