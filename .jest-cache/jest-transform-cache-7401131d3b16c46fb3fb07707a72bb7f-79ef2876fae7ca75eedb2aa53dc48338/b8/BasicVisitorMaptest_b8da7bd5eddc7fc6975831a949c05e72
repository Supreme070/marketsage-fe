013556402c1a1770bb915b72b1eeef2a
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _testutils = require("../../utils/test-utils");
const _BasicVisitorMap = require("../../../components/leadpulse/BasicVisitorMap");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe('BasicVisitorMap', ()=>{
    const mockLocations = [
        (0, _testutils.mockVisitorLocation)({
            city: 'Lagos',
            country: 'Nigeria',
            visitors: 45
        }),
        (0, _testutils.mockVisitorLocation)({
            city: 'Abuja',
            country: 'Nigeria',
            visitors: 32
        }),
        (0, _testutils.mockVisitorLocation)({
            city: 'Kano',
            country: 'Nigeria',
            visitors: 28
        }),
        (0, _testutils.mockVisitorLocation)({
            city: 'Cape Town',
            country: 'South Africa',
            visitors: 25
        }),
        (0, _testutils.mockVisitorLocation)({
            city: 'Nairobi',
            country: 'Kenya',
            visitors: 20
        })
    ];
    describe('Rendering', ()=>{
        it('renders loading state correctly', async ()=>{
            const renderTime = await (0, _testutils.measureComponentPerformance)(()=>(0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BasicVisitorMap.BasicVisitorMap, {
                    locations: [],
                    isLoading: true
                })), 'BasicVisitorMap Loading');
            expect(_testutils.screen.getByText('Loading visitor data...')).toBeInTheDocument();
            expect(renderTime).toBeLessThan(_testutils.PERFORMANCE_THRESHOLDS.COMPONENT_RENDER);
        });
        it('renders visitor map with data', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BasicVisitorMap.BasicVisitorMap, {
                locations: mockLocations
            }));
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByText('Visitor Locations')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Live Visitor Map')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Top Locations')).toBeInTheDocument();
            });
        });
        it('displays correct visitor statistics', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BasicVisitorMap.BasicVisitorMap, {
                locations: mockLocations
            }));
            await (0, _testutils.waitFor)(()=>{
                const totalVisitors = mockLocations.reduce((sum, loc)=>sum + loc.visitors, 0);
                expect(_testutils.screen.getByText(`${totalVisitors} visitors from 3 countries`)).toBeInTheDocument();
            });
        });
        it('shows visitor location dots', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BasicVisitorMap.BasicVisitorMap, {
                locations: mockLocations
            }));
            await (0, _testutils.waitFor)(()=>{
                // Check for visitor dots (should be positioned on the map)
                const visitorDots = document.querySelectorAll('.bg-blue-500.rounded-full.animate-pulse');
                expect(visitorDots.length).toBeGreaterThan(0);
            });
        });
    });
    describe('Data Processing', ()=>{
        it('sorts locations by visitor count', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BasicVisitorMap.BasicVisitorMap, {
                locations: mockLocations
            }));
            await (0, _testutils.waitFor)(()=>{
                const locationItems = _testutils.screen.getAllByText(/\d+/).filter((el)=>el.parentElement?.className.includes('font-medium'));
                // Lagos should be first (45 visitors), then Abuja (32), etc.
                expect(_testutils.screen.getByText('Lagos')).toBeInTheDocument();
                expect(_testutils.screen.getByText('45')).toBeInTheDocument();
            });
        });
        it('calculates unique countries correctly', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BasicVisitorMap.BasicVisitorMap, {
                locations: mockLocations
            }));
            await (0, _testutils.waitFor)(()=>{
                // Should show 3 countries (Nigeria, South Africa, Kenya)
                expect(_testutils.screen.getByText('3')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Countries')).toBeInTheDocument();
            });
        });
        it('displays top 5 locations only', async ()=>{
            const manyLocations = Array.from({
                length: 20
            }, (_, i)=>(0, _testutils.mockVisitorLocation)({
                    city: `City${i}`,
                    visitors: 20 - i
                }));
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BasicVisitorMap.BasicVisitorMap, {
                locations: manyLocations
            }));
            await (0, _testutils.waitFor)(()=>{
                // Should only show 5 location items in the list
                const locationItems = _testutils.screen.getAllByRole('generic').filter((el)=>el.className.includes('flex items-center justify-between py-2'));
                expect(locationItems.length).toBe(5);
            });
        });
    });
    describe('Interactions', ()=>{
        it('shows tooltips on hover', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BasicVisitorMap.BasicVisitorMap, {
                locations: mockLocations
            }));
            await (0, _testutils.waitFor)(()=>{
                const visitorDot = document.querySelector('.group');
                if (visitorDot) {
                    _testutils.fireEvent.mouseEnter(visitorDot);
                    // Tooltip should become visible on hover
                    const tooltip = document.querySelector('.group-hover\\:opacity-100');
                    expect(tooltip).toBeInTheDocument();
                }
            });
        });
        it('displays location details in tooltips', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BasicVisitorMap.BasicVisitorMap, {
                locations: mockLocations
            }));
            await (0, _testutils.waitFor)(()=>{
                // Check for tooltip content
                expect(_testutils.screen.getByText('Hover over dots to see details')).toBeInTheDocument();
            });
        });
    });
    describe('Visual Elements', ()=>{
        it('renders map background', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BasicVisitorMap.BasicVisitorMap, {
                locations: mockLocations
            }));
            await (0, _testutils.waitFor)(()=>{
                const mapBackground = document.querySelector('.bg-gradient-to-br.from-blue-50.to-indigo-50');
                expect(mapBackground).toBeInTheDocument();
            });
        });
        it('displays correct icons', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BasicVisitorMap.BasicVisitorMap, {
                locations: mockLocations
            }));
            await (0, _testutils.waitFor)(()=>{
                // Check for MapPin, Users, and Activity icons
                expect(_testutils.screen.getByText('Visitor Locations')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Top Locations')).toBeInTheDocument();
            });
        });
        it('shows summary statistics', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BasicVisitorMap.BasicVisitorMap, {
                locations: mockLocations
            }));
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByText('Countries')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Cities')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Total Visitors')).toBeInTheDocument();
            });
        });
    });
    describe('Performance', ()=>{
        it('renders within performance threshold', async ()=>{
            const renderTime = await (0, _testutils.measureComponentPerformance)(()=>(0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BasicVisitorMap.BasicVisitorMap, {
                    locations: mockLocations
                })), 'BasicVisitorMap with data');
            expect(renderTime).toBeLessThan(_testutils.PERFORMANCE_THRESHOLDS.COMPONENT_RENDER);
        });
        it('handles large datasets efficiently', async ()=>{
            const largeDataset = Array.from({
                length: 1000
            }, (_, i)=>(0, _testutils.mockVisitorLocation)({
                    city: `City${i}`,
                    visitors: Math.floor(Math.random() * 100)
                }));
            const renderTime = await (0, _testutils.measureComponentPerformance)(()=>(0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BasicVisitorMap.BasicVisitorMap, {
                    locations: largeDataset
                })), 'BasicVisitorMap with large dataset');
            expect(renderTime).toBeLessThan(_testutils.PERFORMANCE_THRESHOLDS.COMPONENT_RENDER * 2);
        });
        it('memoizes processed data', async ()=>{
            const { rerender } = (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BasicVisitorMap.BasicVisitorMap, {
                locations: mockLocations
            }));
            // Re-render with same data
            const startTime = performance.now();
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BasicVisitorMap.BasicVisitorMap, {
                locations: mockLocations
            }));
            const endTime = performance.now();
            // Second render should be faster due to memoization
            expect(endTime - startTime).toBeLessThan(50);
        });
    });
    describe('Accessibility', ()=>{
        it('meets accessibility standards', async ()=>{
            const { container } = (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BasicVisitorMap.BasicVisitorMap, {
                locations: mockLocations
            }));
            await (0, _testutils.waitFor)(()=>{
                (0, _testutils.checkAccessibility)(container);
            });
            // Check for proper semantic structure
            expect(_testutils.screen.getByRole('heading', {
                name: /visitor locations/i
            })).toBeInTheDocument();
        });
        it('provides meaningful text alternatives', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BasicVisitorMap.BasicVisitorMap, {
                locations: mockLocations
            }));
            await (0, _testutils.waitFor)(()=>{
                // Check for descriptive text
                expect(_testutils.screen.getByText('Live Visitor Map')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Hover over dots to see details')).toBeInTheDocument();
            });
        });
    });
    describe('Edge Cases', ()=>{
        it('handles empty locations array', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BasicVisitorMap.BasicVisitorMap, {
                locations: []
            }));
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByText('0 visitors from 0 countries')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Visitor Locations')).toBeInTheDocument();
            });
        });
        it('handles locations with zero visitors', async ()=>{
            const locationsWithZero = [
                (0, _testutils.mockVisitorLocation)({
                    visitors: 0
                }),
                (0, _testutils.mockVisitorLocation)({
                    visitors: 5
                })
            ];
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BasicVisitorMap.BasicVisitorMap, {
                locations: locationsWithZero
            }));
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByText('5 visitors from 1 countries')).toBeInTheDocument();
            });
        });
        it('handles missing location data gracefully', async ()=>{
            const incompleteLocations = [
                {
                    ...(0, _testutils.mockVisitorLocation)(),
                    city: '',
                    country: ''
                },
                (0, _testutils.mockVisitorLocation)()
            ];
            expect(()=>{
                (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BasicVisitorMap.BasicVisitorMap, {
                    locations: incompleteLocations
                }));
            }).not.toThrow();
        });
        it('handles very long city names', async ()=>{
            const locationWithLongName = (0, _testutils.mockVisitorLocation)({
                city: 'This is a very long city name that might cause layout issues',
                visitors: 10
            });
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BasicVisitorMap.BasicVisitorMap, {
                locations: [
                    locationWithLongName
                ]
            }));
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByText('This is a very long city name that might cause layout issues')).toBeInTheDocument();
            });
        });
    });
    describe('Data Visualization', ()=>{
        it('scales visitor dots based on visitor count', async ()=>{
            const locationsWithVariedCounts = [
                (0, _testutils.mockVisitorLocation)({
                    visitors: 100
                }),
                (0, _testutils.mockVisitorLocation)({
                    visitors: 1
                })
            ];
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BasicVisitorMap.BasicVisitorMap, {
                locations: locationsWithVariedCounts
            }));
            await (0, _testutils.waitFor)(()=>{
                const dots = document.querySelectorAll('.bg-blue-500.rounded-full');
                expect(dots.length).toBeGreaterThan(0);
            // Note: In a real implementation, you'd check the computed styles for different sizes
            });
        });
        it('positions dots within map boundaries', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_BasicVisitorMap.BasicVisitorMap, {
                locations: mockLocations
            }));
            await (0, _testutils.waitFor)(()=>{
                const mapContainer = document.querySelector('.relative.bg-gradient-to-br');
                const dots = document.querySelectorAll('.absolute.group');
                expect(mapContainer).toBeInTheDocument();
                expect(dots.length).toBeGreaterThan(0);
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,