{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/__tests__/ai/supreme-ai-mcp-integration.test.ts"],"sourcesContent":["/**\n * Supreme AI v3 MCP Integration Tests\n * \n * These tests verify that the AI decision-making functionality is properly\n * integrated with real MCP data connections instead of using mock data.\n */\n\nimport { SupremeAIV3WithMCP } from '../../lib/ai/supreme-ai-v3-mcp-integration';\nimport { SupremeAIMCPIntegration } from '../../lib/ai/mcp-integration';\nimport { MarketSageMCPClient } from '../../mcp/clients/mcp-client';\nimport prisma from '../../lib/db/prisma';\nimport { logger } from '../../lib/logger';\nimport type { MCPAuthContext } from '../../mcp/types/mcp-types';\nimport type { SupremeAIv3Task } from '../../lib/ai/supreme-ai-v3-engine';\n\n// Mock the logger for cleaner test output\njest.mock('../../lib/logger', () => ({\n  logger: {\n    info: jest.fn(),\n    error: jest.fn(),\n    warn: jest.fn(),\n    debug: jest.fn()\n  }\n}));\n\n// Test data\nconst testAuthContext: MCPAuthContext = {\n  userId: 'test-user-123',\n  organizationId: 'test-org-456',\n  role: 'USER',\n  permissions: ['read:own', 'write:own']\n};\n\ndescribe('Supreme AI v3 MCP Integration', () => {\n  let supremeAI: SupremeAIV3WithMCP;\n  let mcpIntegration: SupremeAIMCPIntegration;\n  let mcpClient: MarketSageMCPClient;\n  \n  beforeAll(async () => {\n    // Clear any existing test data\n    await cleanupTestData();\n    \n    // Create test data in the database\n    await setupTestData();\n  });\n  \n  afterAll(async () => {\n    // Clean up test data\n    await cleanupTestData();\n    \n    // Close database connection\n    await prisma.$disconnect();\n  });\n  \n  beforeEach(() => {\n    // Create new instances for each test\n    supremeAI = new SupremeAIV3WithMCP();\n    mcpIntegration = new SupremeAIMCPIntegration(testAuthContext);\n    mcpClient = new MarketSageMCPClient(testAuthContext);\n    \n    // Clear mock calls\n    jest.clearAllMocks();\n  });\n\n  describe('MCP Data Connection Verification', () => {\n    it('should verify MCP client is connecting to real database', async () => {\n      // Test customer search with real data\n      const searchResult = await mcpClient.searchCustomers('john', {\n        limit: 5,\n        includeSegments: true\n      });\n      \n      expect(searchResult.success).toBe(true);\n      expect(searchResult.fromFallback).toBe(true); // Currently using fallback\n      expect(searchResult.data).toBeDefined();\n      \n      console.log('‚úÖ MCP Customer Search Result:', JSON.stringify(searchResult, null, 2));\n    });\n    \n    it('should verify MCP integration builds real context', async () => {\n      const context = await mcpIntegration.buildComprehensiveAIContext(\n        testAuthContext.userId,\n        testAuthContext.organizationId\n      );\n      \n      expect(context).toBeDefined();\n      expect(context.customer).toBeDefined();\n      expect(context.campaigns).toBeDefined();\n      \n      console.log('‚úÖ MCP Comprehensive Context:', JSON.stringify(context, null, 2));\n    });\n  });\n\n  describe('executeSegmentation with Real Data', () => {\n    it('should use real customer data from MCP for segmentation', async () => {\n      // Initialize AI with MCP\n      await supremeAI.initializeMCPIntegration(testAuthContext);\n      \n      // Create segmentation task\n      const segmentationTask: SupremeAIv3Task = {\n        type: 'task',\n        userId: testAuthContext.userId,\n        question: 'Create a segment for high-engagement customers',\n        taskType: 'segmentation'\n      };\n      \n      // Process the task\n      const result = await supremeAI.processWithMCP(segmentationTask);\n      \n      console.log('\\nüéØ Segmentation Task Result:');\n      console.log('Success:', result.success);\n      console.log('Task Type:', result.taskType);\n      console.log('MCP Used:', result.data?.mcpUsed);\n      console.log('Confidence:', result.confidence);\n      console.log('Supreme Score:', result.supremeScore);\n      console.log('Insights:', result.insights);\n      console.log('Recommendations:', result.recommendations);\n      \n      // Verify the result uses real data\n      expect(result.success).toBe(true);\n      expect(result.taskType).toBe('task');\n      expect(result.confidence).toBeGreaterThan(0.5);\n      \n      // Check if task execution was attempted\n      if (result.data?.status === 'executed' && result.data?.result) {\n        const segmentResult = result.data.result;\n        console.log('\\nüìä Segment Analysis:');\n        console.log('Segment ID:', segmentResult.id);\n        console.log('Customer Count:', segmentResult.customerCount);\n        console.log('Engagement Rate:', segmentResult.engagementRate);\n        console.log('Insights:', segmentResult.insights);\n        console.log('Source:', segmentResult.source);\n        \n        // Verify it's using MCP data\n        expect(segmentResult.source).toBe('MCP_CUSTOMER_DATA');\n        expect(segmentResult.insights).toBeDefined();\n        expect(segmentResult.recommendations).toBeDefined();\n      }\n    });\n    \n    it('should generate data-driven segment recommendations', async () => {\n      await supremeAI.initializeMCPIntegration(testAuthContext);\n      \n      // Test the private method indirectly through segmentation execution\n      const task: SupremeAIv3Task = {\n        type: 'task',\n        userId: testAuthContext.userId,\n        question: 'Analyze customer segments for optimization opportunities',\n        taskType: 'segmentation'\n      };\n      \n      const result = await supremeAI.processWithMCP(task);\n      \n      // Log the actual recommendations generated\n      if (result.data?.result?.recommendations) {\n        console.log('\\nüí° Generated Segment Recommendations:');\n        result.data.result.recommendations.forEach((rec: string, index: number) => {\n          console.log(`${index + 1}. ${rec}`);\n        });\n        \n        // Verify recommendations are data-driven\n        expect(result.data.result.recommendations).toBeInstanceOf(Array);\n        expect(result.data.result.recommendations.length).toBeGreaterThan(0);\n      }\n    });\n  });\n\n  describe('executeCampaignOptimization with Real Data', () => {\n    it('should use real campaign analytics from MCP', async () => {\n      await supremeAI.initializeMCPIntegration(testAuthContext);\n      \n      const campaignTask: SupremeAIv3Task = {\n        type: 'task',\n        userId: testAuthContext.userId,\n        question: 'Optimize our email campaign performance',\n        taskType: 'campaign_optimization'\n      };\n      \n      const result = await supremeAI.processWithMCP(campaignTask);\n      \n      console.log('\\nüìà Campaign Optimization Result:');\n      console.log('Success:', result.success);\n      console.log('MCP Used:', result.data?.mcpUsed);\n      \n      if (result.data?.status === 'executed' && result.data?.result) {\n        const optimization = result.data.result;\n        console.log('\\nüéØ Campaign Optimization Details:');\n        console.log('Campaign ID:', optimization.campaignId);\n        console.log('Current Performance:', optimization.currentPerformance);\n        console.log('Optimizations:', optimization.optimizations);\n        console.log('Expected Improvements:', optimization.expectedImprovement);\n        console.log('Source:', optimization.source);\n        \n        // Verify it's using real MCP data\n        expect(optimization.source).toBe('MCP_CAMPAIGN_ANALYTICS');\n        expect(optimization.optimizations).toBeDefined();\n        expect(optimization.optimizations.length).toBeGreaterThan(0);\n      }\n    });\n    \n    it('should provide performance-based optimization recommendations', async () => {\n      await supremeAI.initializeMCPIntegration(testAuthContext);\n      \n      // Get campaign analytics first\n      const analytics = await mcpIntegration.getCampaignAnalytics({\n        organizationId: testAuthContext.organizationId,\n        limit: 5\n      });\n      \n      console.log('\\nüìä Campaign Analytics Data:');\n      console.log('Success:', analytics.success);\n      console.log('From Fallback:', analytics.fromFallback);\n      console.log('Data:', JSON.stringify(analytics.data, null, 2));\n      \n      // Now test optimization\n      const task: SupremeAIv3Task = {\n        type: 'task',\n        userId: testAuthContext.userId,\n        question: 'Apply A/B test winner and optimize send times',\n        taskType: 'campaign_optimization'\n      };\n      \n      const result = await supremeAI.processWithMCP(task);\n      \n      if (result.data?.result?.optimizations) {\n        console.log('\\nüöÄ Optimization Recommendations:');\n        result.data.result.optimizations.forEach((opt: string, index: number) => {\n          console.log(`${index + 1}. ${opt}`);\n        });\n      }\n    });\n  });\n\n  describe('AI Decision Making with Real Metrics', () => {\n    it('should make decisions based on actual database metrics', async () => {\n      await supremeAI.initializeMCPIntegration(testAuthContext);\n      \n      // Test analysis task with real data\n      const analysisTask: SupremeAIv3Task = {\n        type: 'analyze',\n        userId: testAuthContext.userId,\n        question: 'What are our top performing customer segments?'\n      };\n      \n      const result = await supremeAI.processWithMCP(analysisTask);\n      \n      console.log('\\nüîç Analysis Result with Real Data:');\n      console.log('Success:', result.success);\n      console.log('MCP Used:', result.data?.mcpUsed);\n      console.log('Confidence:', result.confidence);\n      console.log('Supreme Score:', result.supremeScore);\n      \n      if (result.data?.rawData) {\n        console.log('\\nüìä Real Data Sources:');\n        console.log('Has Campaign Data:', !!result.data.rawData.campaigns);\n        console.log('Has Customer Data:', !!result.data.rawData.customers);\n        console.log('Has Visitor Data:', !!result.data.rawData.visitors);\n      }\n      \n      // Verify decisions are data-driven\n      expect(result.confidence).toBeGreaterThan(0.7);\n      expect(result.insights).toBeDefined();\n      expect(result.insights.length).toBeGreaterThan(0);\n    });\n    \n    it('should enhance customer questions with real customer data', async () => {\n      await supremeAI.initializeMCPIntegration(testAuthContext);\n      \n      const customerTask: SupremeAIv3Task = {\n        type: 'customer',\n        userId: testAuthContext.userId,\n        customers: [\n          { email: 'john@example.com', firstName: 'John', lastName: 'Doe' }\n        ]\n      };\n      \n      const result = await supremeAI.processWithMCP(customerTask);\n      \n      console.log('\\nüë• Customer Enhancement Result:');\n      console.log('Success:', result.success);\n      console.log('MCP Used:', result.data?.mcpUsed);\n      console.log('Total Enhanced:', result.data?.totalEnhanced);\n      \n      if (result.data?.customers) {\n        console.log('\\nüìã Enhanced Customer Data:');\n        result.data.customers.forEach((customer: any, index: number) => {\n          console.log(`Customer ${index + 1}:`, {\n            email: customer.email,\n            enhanced: customer.enhanced,\n            hasInsights: !!customer.mcpInsights\n          });\n        });\n      }\n    });\n  });\n\n  describe('Error Handling and Fallback Scenarios', () => {\n    it('should gracefully handle MCP connection failures', async () => {\n      // Test without initialization\n      const task: SupremeAIv3Task = {\n        type: 'analyze',\n        userId: 'invalid-user',\n        question: 'Test error handling'\n      };\n      \n      const result = await supremeAI.processWithMCP(task);\n      \n      console.log('\\n‚ö†Ô∏è Error Handling Result:');\n      console.log('Success:', result.success);\n      console.log('Fallback Used:', result.data?.fallbackUsed);\n      console.log('Insights:', result.insights);\n      \n      expect(result.success).toBe(true); // Should still succeed with fallback\n    });\n    \n    it('should handle missing organization context', async () => {\n      const invalidContext: MCPAuthContext = {\n        userId: 'test-user',\n        organizationId: '', // Invalid\n        role: 'USER',\n        permissions: []\n      };\n      \n      const mcpIntegrationInvalid = new SupremeAIMCPIntegration(invalidContext);\n      const searchResult = await mcpIntegrationInvalid.getCustomerInsights('test', {});\n      \n      console.log('\\n‚ùå Invalid Context Result:');\n      console.log('Success:', searchResult.success);\n      console.log('Error:', searchResult.error);\n      \n      expect(searchResult.success).toBeDefined();\n    });\n  });\n\n  describe('Logging and Data Verification', () => {\n    it('should log all real data being used for AI decisions', async () => {\n      await supremeAI.initializeMCPIntegration(testAuthContext);\n      \n      // Test comprehensive context building\n      const context = await mcpIntegration.buildComprehensiveAIContext(\n        testAuthContext.userId,\n        testAuthContext.organizationId\n      );\n      \n      console.log('\\nüìù Comprehensive MCP Context Log:');\n      console.log('='.repeat(50));\n      \n      if (context.customer) {\n        console.log('\\nüë• Customer Data:');\n        console.log(JSON.stringify(context.customer, null, 2));\n      }\n      \n      if (context.campaigns) {\n        console.log('\\nüìä Campaign Data:');\n        console.log(JSON.stringify(context.campaigns, null, 2));\n      }\n      \n      if (context.visitors) {\n        console.log('\\nüîç Visitor Data:');\n        console.log(JSON.stringify(context.visitors, null, 2));\n      }\n      \n      if (context.monitoring) {\n        console.log('\\nüìà Monitoring Data:');\n        console.log(JSON.stringify(context.monitoring, null, 2));\n      }\n      \n      console.log('\\n' + '='.repeat(50));\n      \n      // Verify logger was called with real data info\n      expect(logger.info).toHaveBeenCalledWith(\n        expect.stringContaining('MCP Integration'),\n        expect.any(Object)\n      );\n    });\n  });\n});\n\n// Helper functions\n\nasync function setupTestData() {\n  console.log('üì¶ Setting up test data...');\n  \n  try {\n    // Create test organization\n    const org = await prisma.organization.create({\n      data: {\n        id: testAuthContext.organizationId,\n        name: 'Test Organization',\n        slug: 'test-org',\n        plan: 'pro',\n        apiKey: 'test-api-key'\n      }\n    });\n    \n    // Create test user\n    const user = await prisma.user.create({\n      data: {\n        id: testAuthContext.userId,\n        email: 'test@example.com',\n        name: 'Test User',\n        organizationId: org.id\n      }\n    });\n    \n    // Create test contacts\n    const contacts = await prisma.contact.createMany({\n      data: [\n        {\n          email: 'john@example.com',\n          firstName: 'John',\n          lastName: 'Doe',\n          organizationId: org.id\n        },\n        {\n          email: 'jane@example.com',\n          firstName: 'Jane',\n          lastName: 'Smith',\n          organizationId: org.id\n        },\n        {\n          email: 'high-value@example.com',\n          firstName: 'High',\n          lastName: 'Value',\n          organizationId: org.id,\n          tags: ['vip', 'high-value']\n        }\n      ]\n    });\n    \n    // Create test segments\n    const segment = await prisma.segment.create({\n      data: {\n        name: 'High Engagement Users',\n        organizationId: org.id,\n        description: 'Users with high engagement scores',\n        conditions: {\n          all: [\n            { field: 'engagement_score', operator: 'gt', value: 70 }\n          ]\n        }\n      }\n    });\n    \n    console.log('‚úÖ Test data created successfully');\n  } catch (error) {\n    console.error('‚ùå Error creating test data:', error);\n  }\n}\n\nasync function cleanupTestData() {\n  console.log('üßπ Cleaning up test data...');\n  \n  try {\n    // Clean up in reverse order of dependencies\n    await prisma.segment.deleteMany({\n      where: { organizationId: testAuthContext.organizationId }\n    });\n    \n    await prisma.contact.deleteMany({\n      where: { organizationId: testAuthContext.organizationId }\n    });\n    \n    await prisma.user.deleteMany({\n      where: { id: testAuthContext.userId }\n    });\n    \n    await prisma.organization.deleteMany({\n      where: { id: testAuthContext.organizationId }\n    });\n    \n    console.log('‚úÖ Test data cleaned up successfully');\n  } catch (error) {\n    console.error('‚ùå Error cleaning up test data:', error);\n  }\n}"],"names":["jest","mock","logger","info","fn","error","warn","debug","testAuthContext","userId","organizationId","role","permissions","describe","supremeAI","mcpIntegration","mcpClient","beforeAll","cleanupTestData","setupTestData","afterAll","prisma","$disconnect","beforeEach","SupremeAIV3WithMCP","SupremeAIMCPIntegration","MarketSageMCPClient","clearAllMocks","it","searchResult","searchCustomers","limit","includeSegments","expect","success","toBe","fromFallback","data","toBeDefined","console","log","JSON","stringify","context","buildComprehensiveAIContext","customer","campaigns","initializeMCPIntegration","segmentationTask","type","question","taskType","result","processWithMCP","mcpUsed","confidence","supremeScore","insights","recommendations","toBeGreaterThan","status","segmentResult","id","customerCount","engagementRate","source","task","forEach","rec","index","toBeInstanceOf","Array","length","campaignTask","optimization","campaignId","currentPerformance","optimizations","expectedImprovement","analytics","getCampaignAnalytics","opt","analysisTask","rawData","customers","visitors","customerTask","email","firstName","lastName","totalEnhanced","enhanced","hasInsights","mcpInsights","fallbackUsed","invalidContext","mcpIntegrationInvalid","getCustomerInsights","repeat","monitoring","toHaveBeenCalledWith","stringContaining","any","Object","org","organization","create","name","slug","plan","apiKey","user","contacts","contact","createMany","tags","segment","description","conditions","all","field","operator","value","deleteMany","where"],"mappings":"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"}