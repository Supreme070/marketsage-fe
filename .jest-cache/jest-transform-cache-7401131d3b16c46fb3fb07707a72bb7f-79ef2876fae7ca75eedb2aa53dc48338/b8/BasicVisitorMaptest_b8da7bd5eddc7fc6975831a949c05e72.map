{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/__tests__/components/leadpulse/BasicVisitorMap.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '../../utils/test-utils';\nimport { BasicVisitorMap } from '../../../components/leadpulse/BasicVisitorMap';\nimport { \n  mockVisitorLocation, \n  measureComponentPerformance, \n  checkAccessibility,\n  PERFORMANCE_THRESHOLDS \n} from '../../utils/test-utils';\n\ndescribe('BasicVisitorMap', () => {\n  const mockLocations = [\n    mockVisitorLocation({ city: 'Lagos', country: 'Nigeria', visitors: 45 }),\n    mockVisitorLocation({ city: 'Abuja', country: 'Nigeria', visitors: 32 }),\n    mockVisitorLocation({ city: 'Kano', country: 'Nigeria', visitors: 28 }),\n    mockVisitorLocation({ city: 'Cape Town', country: 'South Africa', visitors: 25 }),\n    mockVisitorLocation({ city: 'Nairobi', country: 'Kenya', visitors: 20 }),\n  ];\n\n  describe('Rendering', () => {\n    it('renders loading state correctly', async () => {\n      const renderTime = await measureComponentPerformance(\n        () => render(<BasicVisitorMap locations={[]} isLoading={true} />),\n        'BasicVisitorMap Loading'\n      );\n\n      expect(screen.getByText('Loading visitor data...')).toBeInTheDocument();\n      expect(renderTime).toBeLessThan(PERFORMANCE_THRESHOLDS.COMPONENT_RENDER);\n    });\n\n    it('renders visitor map with data', async () => {\n      render(<BasicVisitorMap locations={mockLocations} />);\n\n      await waitFor(() => {\n        expect(screen.getByText('Visitor Locations')).toBeInTheDocument();\n        expect(screen.getByText('Live Visitor Map')).toBeInTheDocument();\n        expect(screen.getByText('Top Locations')).toBeInTheDocument();\n      });\n    });\n\n    it('displays correct visitor statistics', async () => {\n      render(<BasicVisitorMap locations={mockLocations} />);\n\n      await waitFor(() => {\n        const totalVisitors = mockLocations.reduce((sum, loc) => sum + loc.visitors, 0);\n        expect(screen.getByText(`${totalVisitors} visitors from 3 countries`)).toBeInTheDocument();\n      });\n    });\n\n    it('shows visitor location dots', async () => {\n      render(<BasicVisitorMap locations={mockLocations} />);\n\n      await waitFor(() => {\n        // Check for visitor dots (should be positioned on the map)\n        const visitorDots = document.querySelectorAll('.bg-blue-500.rounded-full.animate-pulse');\n        expect(visitorDots.length).toBeGreaterThan(0);\n      });\n    });\n  });\n\n  describe('Data Processing', () => {\n    it('sorts locations by visitor count', async () => {\n      render(<BasicVisitorMap locations={mockLocations} />);\n\n      await waitFor(() => {\n        const locationItems = screen.getAllByText(/\\d+/).filter(el => \n          el.parentElement?.className.includes('font-medium')\n        );\n        \n        // Lagos should be first (45 visitors), then Abuja (32), etc.\n        expect(screen.getByText('Lagos')).toBeInTheDocument();\n        expect(screen.getByText('45')).toBeInTheDocument();\n      });\n    });\n\n    it('calculates unique countries correctly', async () => {\n      render(<BasicVisitorMap locations={mockLocations} />);\n\n      await waitFor(() => {\n        // Should show 3 countries (Nigeria, South Africa, Kenya)\n        expect(screen.getByText('3')).toBeInTheDocument();\n        expect(screen.getByText('Countries')).toBeInTheDocument();\n      });\n    });\n\n    it('displays top 5 locations only', async () => {\n      const manyLocations = Array.from({ length: 20 }, (_, i) => \n        mockVisitorLocation({ \n          city: `City${i}`, \n          visitors: 20 - i \n        })\n      );\n\n      render(<BasicVisitorMap locations={manyLocations} />);\n\n      await waitFor(() => {\n        // Should only show 5 location items in the list\n        const locationItems = screen.getAllByRole('generic').filter(el => \n          el.className.includes('flex items-center justify-between py-2')\n        );\n        expect(locationItems.length).toBe(5);\n      });\n    });\n  });\n\n  describe('Interactions', () => {\n    it('shows tooltips on hover', async () => {\n      render(<BasicVisitorMap locations={mockLocations} />);\n\n      await waitFor(() => {\n        const visitorDot = document.querySelector('.group');\n        if (visitorDot) {\n          fireEvent.mouseEnter(visitorDot);\n          // Tooltip should become visible on hover\n          const tooltip = document.querySelector('.group-hover\\\\:opacity-100');\n          expect(tooltip).toBeInTheDocument();\n        }\n      });\n    });\n\n    it('displays location details in tooltips', async () => {\n      render(<BasicVisitorMap locations={mockLocations} />);\n\n      await waitFor(() => {\n        // Check for tooltip content\n        expect(screen.getByText('Hover over dots to see details')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Visual Elements', () => {\n    it('renders map background', async () => {\n      render(<BasicVisitorMap locations={mockLocations} />);\n\n      await waitFor(() => {\n        const mapBackground = document.querySelector('.bg-gradient-to-br.from-blue-50.to-indigo-50');\n        expect(mapBackground).toBeInTheDocument();\n      });\n    });\n\n    it('displays correct icons', async () => {\n      render(<BasicVisitorMap locations={mockLocations} />);\n\n      await waitFor(() => {\n        // Check for MapPin, Users, and Activity icons\n        expect(screen.getByText('Visitor Locations')).toBeInTheDocument();\n        expect(screen.getByText('Top Locations')).toBeInTheDocument();\n      });\n    });\n\n    it('shows summary statistics', async () => {\n      render(<BasicVisitorMap locations={mockLocations} />);\n\n      await waitFor(() => {\n        expect(screen.getByText('Countries')).toBeInTheDocument();\n        expect(screen.getByText('Cities')).toBeInTheDocument();\n        expect(screen.getByText('Total Visitors')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Performance', () => {\n    it('renders within performance threshold', async () => {\n      const renderTime = await measureComponentPerformance(\n        () => render(<BasicVisitorMap locations={mockLocations} />),\n        'BasicVisitorMap with data'\n      );\n\n      expect(renderTime).toBeLessThan(PERFORMANCE_THRESHOLDS.COMPONENT_RENDER);\n    });\n\n    it('handles large datasets efficiently', async () => {\n      const largeDataset = Array.from({ length: 1000 }, (_, i) => \n        mockVisitorLocation({ \n          city: `City${i}`, \n          visitors: Math.floor(Math.random() * 100) \n        })\n      );\n\n      const renderTime = await measureComponentPerformance(\n        () => render(<BasicVisitorMap locations={largeDataset} />),\n        'BasicVisitorMap with large dataset'\n      );\n\n      expect(renderTime).toBeLessThan(PERFORMANCE_THRESHOLDS.COMPONENT_RENDER * 2);\n    });\n\n    it('memoizes processed data', async () => {\n      const { rerender } = render(<BasicVisitorMap locations={mockLocations} />);\n\n      // Re-render with same data\n      const startTime = performance.now();\n      rerender(<BasicVisitorMap locations={mockLocations} />);\n      const endTime = performance.now();\n\n      // Second render should be faster due to memoization\n      expect(endTime - startTime).toBeLessThan(50);\n    });\n  });\n\n  describe('Accessibility', () => {\n    it('meets accessibility standards', async () => {\n      const { container } = render(<BasicVisitorMap locations={mockLocations} />);\n\n      await waitFor(() => {\n        checkAccessibility(container);\n      });\n\n      // Check for proper semantic structure\n      expect(screen.getByRole('heading', { name: /visitor locations/i })).toBeInTheDocument();\n    });\n\n    it('provides meaningful text alternatives', async () => {\n      render(<BasicVisitorMap locations={mockLocations} />);\n\n      await waitFor(() => {\n        // Check for descriptive text\n        expect(screen.getByText('Live Visitor Map')).toBeInTheDocument();\n        expect(screen.getByText('Hover over dots to see details')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Edge Cases', () => {\n    it('handles empty locations array', async () => {\n      render(<BasicVisitorMap locations={[]} />);\n\n      await waitFor(() => {\n        expect(screen.getByText('0 visitors from 0 countries')).toBeInTheDocument();\n        expect(screen.getByText('Visitor Locations')).toBeInTheDocument();\n      });\n    });\n\n    it('handles locations with zero visitors', async () => {\n      const locationsWithZero = [\n        mockVisitorLocation({ visitors: 0 }),\n        mockVisitorLocation({ visitors: 5 }),\n      ];\n\n      render(<BasicVisitorMap locations={locationsWithZero} />);\n\n      await waitFor(() => {\n        expect(screen.getByText('5 visitors from 1 countries')).toBeInTheDocument();\n      });\n    });\n\n    it('handles missing location data gracefully', async () => {\n      const incompleteLocations = [\n        { ...mockVisitorLocation(), city: '', country: '' },\n        mockVisitorLocation(),\n      ];\n\n      expect(() => {\n        render(<BasicVisitorMap locations={incompleteLocations} />);\n      }).not.toThrow();\n    });\n\n    it('handles very long city names', async () => {\n      const locationWithLongName = mockVisitorLocation({\n        city: 'This is a very long city name that might cause layout issues',\n        visitors: 10,\n      });\n\n      render(<BasicVisitorMap locations={[locationWithLongName]} />);\n\n      await waitFor(() => {\n        expect(screen.getByText('This is a very long city name that might cause layout issues')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Data Visualization', () => {\n    it('scales visitor dots based on visitor count', async () => {\n      const locationsWithVariedCounts = [\n        mockVisitorLocation({ visitors: 100 }),\n        mockVisitorLocation({ visitors: 1 }),\n      ];\n\n      render(<BasicVisitorMap locations={locationsWithVariedCounts} />);\n\n      await waitFor(() => {\n        const dots = document.querySelectorAll('.bg-blue-500.rounded-full');\n        expect(dots.length).toBeGreaterThan(0);\n        // Note: In a real implementation, you'd check the computed styles for different sizes\n      });\n    });\n\n    it('positions dots within map boundaries', async () => {\n      render(<BasicVisitorMap locations={mockLocations} />);\n\n      await waitFor(() => {\n        const mapContainer = document.querySelector('.relative.bg-gradient-to-br');\n        const dots = document.querySelectorAll('.absolute.group');\n        \n        expect(mapContainer).toBeInTheDocument();\n        expect(dots.length).toBeGreaterThan(0);\n      });\n    });\n  });\n});"],"names":["describe","mockLocations","mockVisitorLocation","city","country","visitors","it","renderTime","measureComponentPerformance","render","BasicVisitorMap","locations","isLoading","expect","screen","getByText","toBeInTheDocument","toBeLessThan","PERFORMANCE_THRESHOLDS","COMPONENT_RENDER","waitFor","totalVisitors","reduce","sum","loc","visitorDots","document","querySelectorAll","length","toBeGreaterThan","locationItems","getAllByText","filter","el","parentElement","className","includes","manyLocations","Array","from","_","i","getAllByRole","toBe","visitorDot","querySelector","fireEvent","mouseEnter","tooltip","mapBackground","largeDataset","Math","floor","random","rerender","startTime","performance","now","endTime","container","checkAccessibility","getByRole","name","locationsWithZero","incompleteLocations","not","toThrow","locationWithLongName","locationsWithVariedCounts","dots","mapContainer"],"mappings":"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"}