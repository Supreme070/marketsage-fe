b63498ccae6c1fe6c93ad7c68ef8141d
"use strict";
// Mock dependencies
jest.mock('../../../hooks/useMCPLeadPulse');
jest.mock('next-auth/react');
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _testutils = require("../../utils/test-utils");
const _react1 = require("next-auth/react");
const _useMCPLeadPulse = require("../../../hooks/useMCPLeadPulse");
const _LiveVisitorMap = require("../../../components/leadpulse/LiveVisitorMap");
const _CoreAnalyticsDashboard = require("../../../components/leadpulse/CoreAnalyticsDashboard");
const _AIIntelligenceDashboard = require("../../../components/leadpulse/AIIntelligenceDashboard");
const _CustomerIntelligenceDashboard = /*#__PURE__*/ _interop_require_default(require("../../../components/dashboard/CustomerIntelligenceDashboard"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const mockUseMCPLeadPulse = _useMCPLeadPulse.useMCPLeadPulse;
const mockUseSession = _react1.useSession;
describe('African Market Mobile Compatibility Tests', ()=>{
    const mockSession = {
        user: {
            id: 'user_123',
            email: 'test@marketsage.ng',
            role: 'admin',
            organizationId: 'org_123',
            timezone: 'Africa/Lagos',
            locale: 'en-NG',
            currency: 'NGN'
        },
        expires: '2024-12-31'
    };
    // African-focused mock data
    const africanMockData = {
        ...(0, _testutils.createMockMCPData)(),
        visitorLocations: [
            {
                id: 'loc_1',
                city: 'Lagos',
                country: 'Nigeria',
                visitors: 156,
                latitude: 6.5244,
                longitude: 3.3792
            },
            {
                id: 'loc_2',
                city: 'Abuja',
                country: 'Nigeria',
                visitors: 89,
                latitude: 9.0579,
                longitude: 7.4951
            },
            {
                id: 'loc_3',
                city: 'Kano',
                country: 'Nigeria',
                visitors: 67,
                latitude: 12.0022,
                longitude: 8.5919
            },
            {
                id: 'loc_4',
                city: 'Cape Town',
                country: 'South Africa',
                visitors: 45,
                latitude: -33.9249,
                longitude: 18.4241
            },
            {
                id: 'loc_5',
                city: 'Nairobi',
                country: 'Kenya',
                visitors: 38,
                latitude: -1.2921,
                longitude: 36.8219
            },
            {
                id: 'loc_6',
                city: 'Accra',
                country: 'Ghana',
                visitors: 32,
                latitude: 5.6037,
                longitude: -0.1870
            },
            {
                id: 'loc_7',
                city: 'Cairo',
                country: 'Egypt',
                visitors: 28,
                latitude: 30.0444,
                longitude: 31.2357
            }
        ],
        analytics: {
            currencies: {
                NGN: 450000,
                ZAR: 125000,
                KES: 89000,
                GHS: 45000,
                EGP: 32000
            },
            timezones: {
                'Africa/Lagos': 156,
                'Africa/Johannesburg': 45,
                'Africa/Nairobi': 38
            },
            languages: {
                'en-NG': 245,
                'en-ZA': 67,
                'sw-KE': 23,
                'fr-CI': 18
            },
            devices: {
                mobile: 0.78,
                desktop: 0.18,
                tablet: 0.04
            },
            networks: {
                '2G': 0.12,
                '3G': 0.45,
                '4G': 0.38,
                '5G': 0.05
            }
        }
    };
    beforeEach(()=>{
        mockUseSession.mockReturnValue({
            data: mockSession,
            status: 'authenticated'
        });
        mockUseMCPLeadPulse.mockReturnValue(africanMockData);
        // Mock mobile viewport
        Object.defineProperty(window, 'innerWidth', {
            writable: true,
            configurable: true,
            value: 375
        });
        Object.defineProperty(window, 'innerHeight', {
            writable: true,
            configurable: true,
            value: 667
        });
        // Mock touch device
        Object.defineProperty(navigator, 'maxTouchPoints', {
            value: 5,
            configurable: true
        });
        // Mock Nigerian network conditions
        Object.defineProperty(navigator, 'connection', {
            value: {
                effectiveType: '3g',
                downlink: 1.5,
                rtt: 300,
                saveData: false
            },
            configurable: true
        });
    });
    afterEach(()=>{
        jest.clearAllMocks();
    });
    describe('Mobile Layout Optimization', ()=>{
        it('should render mobile-first responsive layout for LeadPulse', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LiveVisitorMap.LiveVisitorMap, {}));
            await (0, _testutils.waitFor)(()=>{
                const mapContainer = _testutils.screen.getByTestId('visitor-map');
                expect(mapContainer).toHaveClass('mobile-responsive');
                // Check mobile grid layout
                const locationList = _testutils.screen.getByTestId('location-list');
                expect(locationList).toHaveClass('grid-cols-1');
                // Mobile-specific components should be visible
                expect(_testutils.screen.getByTestId('mobile-stats')).toBeInTheDocument();
                expect(_testutils.screen.getByTestId('touch-controls')).toBeInTheDocument();
            });
        });
        it('should optimize dashboard layout for mobile screens', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CoreAnalyticsDashboard.CoreAnalyticsDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                // Metrics should stack vertically on mobile
                const metricsGrid = _testutils.screen.getByTestId('metrics-grid');
                expect(metricsGrid).toHaveClass('grid-cols-1', 'sm:grid-cols-2');
                // Charts should be mobile-optimized
                const charts = _testutils.screen.getAllByTestId(/chart$/);
                charts.forEach((chart)=>{
                    expect(chart).toHaveClass('mobile-chart');
                    expect(chart).toHaveAttribute('data-mobile', 'true');
                });
            });
        });
        it('should provide touch-friendly interactions', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AIIntelligenceDashboard.AIIntelligenceDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                // Buttons should be touch-friendly (minimum 44px)
                const buttons = _testutils.screen.getAllByRole('button');
                buttons.forEach((button)=>{
                    const styles = window.getComputedStyle(button);
                    const minSize = parseInt(styles.minHeight) || parseInt(styles.height);
                    expect(minSize).toBeGreaterThanOrEqual(44);
                });
                // Touch targets should have proper spacing
                const cards = _testutils.screen.getAllByTestId('metric-card');
                cards.forEach((card)=>{
                    expect(card).toHaveClass('touch-friendly');
                });
            });
        });
        it('should hide non-essential elements on small screens', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CustomerIntelligenceDashboard.default, {}));
            await (0, _testutils.waitFor)(()=>{
                // Secondary information should be hidden on mobile
                expect(_testutils.screen.queryByTestId('desktop-sidebar')).not.toBeInTheDocument();
                expect(_testutils.screen.queryByTestId('secondary-metrics')).not.toBeInTheDocument();
                // Essential content should remain visible
                expect(_testutils.screen.getByTestId('primary-metrics')).toBeInTheDocument();
                expect(_testutils.screen.getByTestId('main-dashboard')).toBeInTheDocument();
            });
        });
    });
    describe('African Currency and Localization', ()=>{
        it('should display currencies in Nigerian Naira by default', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CoreAnalyticsDashboard.CoreAnalyticsDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                // Should show NGN currency symbols
                expect(_testutils.screen.getByText(/₦/)).toBeInTheDocument();
                expect(_testutils.screen.getByText('₦450,000')).toBeInTheDocument(); // Revenue in Naira
                // Currency selector should show NGN as default
                const currencySelector = _testutils.screen.getByTestId('currency-selector');
                expect(currencySelector).toHaveValue('NGN');
            });
        });
        it('should support multiple African currencies', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CustomerIntelligenceDashboard.default, {}));
            await (0, _testutils.waitFor)(()=>{
                const currencySelector = _testutils.screen.getByTestId('currency-selector');
                _testutils.fireEvent.change(currencySelector, {
                    target: {
                        value: 'ZAR'
                    }
                });
            });
            await (0, _testutils.waitFor)(()=>{
                // Should convert and display in South African Rand
                expect(_testutils.screen.getByText(/R/)).toBeInTheDocument();
                expect(_testutils.screen.getByText('R125,000')).toBeInTheDocument();
            });
        });
        it('should display timestamps in West Africa Time (WAT)', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LiveVisitorMap.LiveVisitorMap, {}));
            await (0, _testutils.waitFor)(()=>{
                // Should show WAT timezone
                expect(_testutils.screen.getByText(/WAT|GMT\+1/)).toBeInTheDocument();
                // Time should be formatted for Nigerian locale
                const timestamps = _testutils.screen.getAllByTestId('timestamp');
                timestamps.forEach((timestamp)=>{
                    expect(timestamp.textContent).toMatch(/\d{1,2}:\d{2}\s*(AM|PM)\s*WAT/);
                });
            });
        });
        it('should support multiple African languages', async ()=>{
            // Mock Hausa language preference
            Object.defineProperty(navigator, 'languages', {
                value: [
                    'ha',
                    'en-NG',
                    'en'
                ],
                configurable: true
            });
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CoreAnalyticsDashboard.CoreAnalyticsDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                // Should show language selector
                expect(_testutils.screen.getByTestId('language-selector')).toBeInTheDocument();
                // Should support internationalization
                expect(_testutils.screen.getByTestId('i18n-ready')).toBeInTheDocument();
            });
        });
    });
    describe('Network Optimization for African Connections', ()=>{
        it('should optimize for 3G connections', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LiveVisitorMap.LiveVisitorMap, {}));
            await (0, _testutils.waitFor)(()=>{
                // Should show network optimization indicator
                expect(_testutils.screen.getByText('Optimized for 3G')).toBeInTheDocument();
                // Should load essential data first
                expect(_testutils.screen.getByTestId('essential-data')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Loading additional data...')).toBeInTheDocument();
            });
        });
        it('should implement progressive data loading', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CoreAnalyticsDashboard.CoreAnalyticsDashboard, {}));
            // Should show core metrics immediately
            expect(_testutils.screen.getByTestId('core-metrics')).toBeInTheDocument();
            await (0, _testutils.waitFor)(()=>{
                // Secondary data should load progressively
                expect(_testutils.screen.getByTestId('secondary-charts')).toBeInTheDocument();
            }, {
                timeout: 3000
            });
        });
        it('should compress data for low-bandwidth connections', async ()=>{
            // Mock 2G connection
            Object.defineProperty(navigator, 'connection', {
                value: {
                    effectiveType: '2g',
                    downlink: 0.25,
                    rtt: 800,
                    saveData: true
                },
                configurable: true
            });
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AIIntelligenceDashboard.AIIntelligenceDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                // Should show data compression notice
                expect(_testutils.screen.getByText('Data Saver Mode')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Reduced data usage')).toBeInTheDocument();
                // Should load compressed/reduced dataset
                const insights = _testutils.screen.getAllByTestId('ai-insight');
                expect(insights.length).toBeLessThanOrEqual(3); // Limited insights for 2G
            });
        });
        it('should handle offline scenarios gracefully', async ()=>{
            // Mock offline state
            Object.defineProperty(navigator, 'onLine', {
                value: false,
                configurable: true
            });
            const offlineData = {
                ...africanMockData,
                cached: true,
                lastSync: new Date(Date.now() - 300000) // 5 minutes ago
            };
            mockUseMCPLeadPulse.mockReturnValue(offlineData);
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LiveVisitorMap.LiveVisitorMap, {}));
            await (0, _testutils.waitFor)(()=>{
                // Should show offline indicator
                expect(_testutils.screen.getByText('Offline Mode')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Cached Data (5 min ago)')).toBeInTheDocument();
                // Should still show cached data
                expect(_testutils.screen.getByText('Lagos')).toBeInTheDocument();
                expect(_testutils.screen.getByText('156')).toBeInTheDocument();
            });
        });
    });
    describe('African Market Specific Features', ()=>{
        it('should prioritize Nigerian cities in location displays', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LiveVisitorMap.LiveVisitorMap, {}));
            await (0, _testutils.waitFor)(()=>{
                const locationItems = _testutils.screen.getAllByTestId('location-item');
                // Lagos should be first (highest visitor count)
                expect(locationItems[0]).toHaveTextContent('Lagos');
                expect(locationItems[0]).toHaveTextContent('156');
                // Nigerian cities should be grouped at the top
                expect(locationItems[1]).toHaveTextContent('Abuja');
                expect(locationItems[2]).toHaveTextContent('Kano');
            });
        });
        it('should show African business hours awareness', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CoreAnalyticsDashboard.CoreAnalyticsDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                // Should indicate peak business hours for African markets
                expect(_testutils.screen.getByText('Peak Hours: 9 AM - 6 PM WAT')).toBeInTheDocument();
                expect(_testutils.screen.getByTestId('business-hours-indicator')).toBeInTheDocument();
            });
        });
        it('should display mobile money payment preferences', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CustomerIntelligenceDashboard.default, {}));
            await (0, _testutils.waitFor)(()=>{
                // Should show mobile money options
                expect(_testutils.screen.getByText('M-Pesa')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Flutterwave')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Paystack')).toBeInTheDocument();
                // Should prioritize mobile payments
                const paymentMethods = _testutils.screen.getByTestId('payment-methods');
                expect(paymentMethods.textContent).toMatch(/Mobile.*Card/);
            });
        });
        it('should adapt to high mobile usage patterns', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AIIntelligenceDashboard.AIIntelligenceDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                // Should show mobile-first insights
                expect(_testutils.screen.getByText('78% mobile traffic')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Mobile optimization recommended')).toBeInTheDocument();
                // Should prioritize mobile-relevant metrics
                const mobileMetrics = _testutils.screen.getByTestId('mobile-metrics');
                expect(mobileMetrics).toBeInTheDocument();
            });
        });
    });
    describe('Performance on Mobile Devices', ()=>{
        it('should meet mobile performance thresholds', async ()=>{
            const renderTime = await (0, _testutils.measureComponentPerformance)(()=>(0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LiveVisitorMap.LiveVisitorMap, {})), 'LiveVisitorMap on mobile');
            // Mobile should render within stricter thresholds
            expect(renderTime).toBeLessThan(_testutils.PERFORMANCE_THRESHOLDS.COMPONENT_RENDER * 0.8);
        });
        it('should optimize image and asset loading', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CoreAnalyticsDashboard.CoreAnalyticsDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                // Images should be optimized for mobile
                const images = _testutils.screen.getAllByRole('img');
                images.forEach((img)=>{
                    expect(img).toHaveAttribute('loading', 'lazy');
                    expect(img).toHaveAttribute('decoding', 'async');
                });
            });
        });
        it('should implement efficient virtual scrolling for large lists', async ()=>{
            const largeMobileData = {
                ...africanMockData,
                visitorJourneys: Array.from({
                    length: 500
                }, (_, i)=>({
                        id: `journey_${i}`,
                        visitorId: `visitor_${i}`,
                        sessionId: `session_${i}`,
                        device: 'mobile',
                        location: 'Lagos, Nigeria',
                        engagementScore: Math.floor(Math.random() * 100),
                        pulseData: [],
                        lastActive: '2 min ago'
                    }))
            };
            mockUseMCPLeadPulse.mockReturnValue(largeMobileData);
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CoreAnalyticsDashboard.CoreAnalyticsDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                // Should implement virtual scrolling
                const virtualList = _testutils.screen.getByTestId('virtual-list');
                expect(virtualList).toBeInTheDocument();
                // Should only render visible items
                const visibleItems = _testutils.screen.getAllByTestId('journey-item');
                expect(visibleItems.length).toBeLessThanOrEqual(20); // Limited for performance
            });
        });
        it('should minimize JavaScript bundle size for mobile', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CustomerIntelligenceDashboard.default, {}));
            await (0, _testutils.waitFor)(()=>{
                // Should lazy load non-critical components
                expect(_testutils.screen.getByTestId('lazy-loaded-charts')).toBeInTheDocument();
                // Should use code splitting
                expect(_testutils.screen.getByTestId('bundle-optimized')).toBeInTheDocument();
            });
        });
    });
    describe('Accessibility on Mobile', ()=>{
        it('should maintain accessibility on touch devices', async ()=>{
            const { container } = (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LiveVisitorMap.LiveVisitorMap, {}));
            await (0, _testutils.waitFor)(()=>{
                (0, _testutils.checkAccessibility)(container);
            });
            // Touch targets should be accessible
            const buttons = _testutils.screen.getAllByRole('button');
            buttons.forEach((button)=>{
                expect(button).toHaveAttribute('aria-label');
                expect(button).not.toHaveAttribute('aria-hidden', 'true');
            });
        });
        it('should support screen readers on mobile', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CoreAnalyticsDashboard.CoreAnalyticsDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                // Should have proper ARIA labels
                expect(_testutils.screen.getByLabelText('Analytics dashboard')).toBeInTheDocument();
                expect(_testutils.screen.getByRole('main')).toBeInTheDocument();
                // Live regions for dynamic content
                expect(_testutils.screen.getByRole('status')).toBeInTheDocument();
            });
        });
        it('should provide keyboard navigation alternatives', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AIIntelligenceDashboard.AIIntelligenceDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                // Should support keyboard navigation even on touch devices
                const focusableElements = _testutils.screen.getAllByRole('button');
                focusableElements.forEach((element)=>{
                    expect(element).toHaveAttribute('tabIndex');
                });
            });
        });
        it('should scale text appropriately for mobile viewing', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CustomerIntelligenceDashboard.default, {}));
            await (0, _testutils.waitFor)(()=>{
                // Text should be readable on mobile (minimum 16px)
                const textElements = _testutils.screen.getAllByTestId('readable-text');
                textElements.forEach((element)=>{
                    const styles = window.getComputedStyle(element);
                    const fontSize = parseInt(styles.fontSize);
                    expect(fontSize).toBeGreaterThanOrEqual(16);
                });
            });
        });
    });
    describe('Data Usage Optimization', ()=>{
        it('should track and display data usage', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CoreAnalyticsDashboard.CoreAnalyticsDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                // Should show data usage indicator
                expect(_testutils.screen.getByTestId('data-usage')).toBeInTheDocument();
                expect(_testutils.screen.getByText(/Data used:/)).toBeInTheDocument();
            });
        });
        it('should offer data-lite mode for African users', async ()=>{
            // Enable data saver mode
            Object.defineProperty(navigator, 'connection', {
                value: {
                    effectiveType: '3g',
                    saveData: true
                },
                configurable: true
            });
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LiveVisitorMap.LiveVisitorMap, {}));
            await (0, _testutils.waitFor)(()=>{
                // Should automatically enable data-lite mode
                expect(_testutils.screen.getByText('Data-Lite Mode Active')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Reduced animations')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Compressed images')).toBeInTheDocument();
            });
        });
        it('should cache data efficiently for repeat visits', async ()=>{
            const cachedData = {
                ...africanMockData,
                cached: true,
                cacheSize: '2.3 MB',
                lastUpdate: new Date()
            };
            mockUseMCPLeadPulse.mockReturnValue(cachedData);
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AIIntelligenceDashboard.AIIntelligenceDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                // Should show cache status
                expect(_testutils.screen.getByText('Using cached data')).toBeInTheDocument();
                expect(_testutils.screen.getByText('2.3 MB saved')).toBeInTheDocument();
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,