{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/__tests__/components/mobile/AfricanMarketCompatibility.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '../../utils/test-utils';\nimport { useSession } from 'next-auth/react';\nimport { useMCPLeadPulse } from '../../../hooks/useMCPLeadPulse';\nimport { LiveVisitorMap } from '../../../components/leadpulse/LiveVisitorMap';\nimport { CoreAnalyticsDashboard } from '../../../components/leadpulse/CoreAnalyticsDashboard';\nimport { AIIntelligenceDashboard } from '../../../components/leadpulse/AIIntelligenceDashboard';\nimport CustomerIntelligenceDashboard from '../../../components/dashboard/CustomerIntelligenceDashboard';\nimport { \n  createMockMCPData,\n  measureComponentPerformance, \n  checkAccessibility,\n  PERFORMANCE_THRESHOLDS\n} from '../../utils/test-utils';\n\n// Mock dependencies\njest.mock('../../../hooks/useMCPLeadPulse');\njest.mock('next-auth/react');\n\nconst mockUseMCPLeadPulse = useMCPLeadPulse as jest.MockedFunction<typeof useMCPLeadPulse>;\nconst mockUseSession = useSession as jest.MockedFunction<typeof useSession>;\n\ndescribe('African Market Mobile Compatibility Tests', () => {\n  const mockSession = {\n    user: {\n      id: 'user_123',\n      email: 'test@marketsage.ng',\n      role: 'admin',\n      organizationId: 'org_123',\n      timezone: 'Africa/Lagos',\n      locale: 'en-NG',\n      currency: 'NGN'\n    },\n    expires: '2024-12-31'\n  };\n\n  // African-focused mock data\n  const africanMockData = {\n    ...createMockMCPData(),\n    visitorLocations: [\n      { id: 'loc_1', city: 'Lagos', country: 'Nigeria', visitors: 156, latitude: 6.5244, longitude: 3.3792 },\n      { id: 'loc_2', city: 'Abuja', country: 'Nigeria', visitors: 89, latitude: 9.0579, longitude: 7.4951 },\n      { id: 'loc_3', city: 'Kano', country: 'Nigeria', visitors: 67, latitude: 12.0022, longitude: 8.5919 },\n      { id: 'loc_4', city: 'Cape Town', country: 'South Africa', visitors: 45, latitude: -33.9249, longitude: 18.4241 },\n      { id: 'loc_5', city: 'Nairobi', country: 'Kenya', visitors: 38, latitude: -1.2921, longitude: 36.8219 },\n      { id: 'loc_6', city: 'Accra', country: 'Ghana', visitors: 32, latitude: 5.6037, longitude: -0.1870 },\n      { id: 'loc_7', city: 'Cairo', country: 'Egypt', visitors: 28, latitude: 30.0444, longitude: 31.2357 }\n    ],\n    analytics: {\n      currencies: { NGN: 450000, ZAR: 125000, KES: 89000, GHS: 45000, EGP: 32000 },\n      timezones: { 'Africa/Lagos': 156, 'Africa/Johannesburg': 45, 'Africa/Nairobi': 38 },\n      languages: { 'en-NG': 245, 'en-ZA': 67, 'sw-KE': 23, 'fr-CI': 18 },\n      devices: { mobile: 0.78, desktop: 0.18, tablet: 0.04 },\n      networks: { '2G': 0.12, '3G': 0.45, '4G': 0.38, '5G': 0.05 }\n    }\n  };\n\n  beforeEach(() => {\n    mockUseSession.mockReturnValue({\n      data: mockSession,\n      status: 'authenticated'\n    });\n\n    mockUseMCPLeadPulse.mockReturnValue(africanMockData);\n\n    // Mock mobile viewport\n    Object.defineProperty(window, 'innerWidth', {\n      writable: true,\n      configurable: true,\n      value: 375\n    });\n    Object.defineProperty(window, 'innerHeight', {\n      writable: true,\n      configurable: true,\n      value: 667\n    });\n\n    // Mock touch device\n    Object.defineProperty(navigator, 'maxTouchPoints', {\n      value: 5,\n      configurable: true\n    });\n\n    // Mock Nigerian network conditions\n    Object.defineProperty(navigator, 'connection', {\n      value: {\n        effectiveType: '3g',\n        downlink: 1.5,\n        rtt: 300,\n        saveData: false\n      },\n      configurable: true\n    });\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('Mobile Layout Optimization', () => {\n    it('should render mobile-first responsive layout for LeadPulse', async () => {\n      render(<LiveVisitorMap />);\n\n      await waitFor(() => {\n        const mapContainer = screen.getByTestId('visitor-map');\n        expect(mapContainer).toHaveClass('mobile-responsive');\n        \n        // Check mobile grid layout\n        const locationList = screen.getByTestId('location-list');\n        expect(locationList).toHaveClass('grid-cols-1');\n        \n        // Mobile-specific components should be visible\n        expect(screen.getByTestId('mobile-stats')).toBeInTheDocument();\n        expect(screen.getByTestId('touch-controls')).toBeInTheDocument();\n      });\n    });\n\n    it('should optimize dashboard layout for mobile screens', async () => {\n      render(<CoreAnalyticsDashboard />);\n\n      await waitFor(() => {\n        // Metrics should stack vertically on mobile\n        const metricsGrid = screen.getByTestId('metrics-grid');\n        expect(metricsGrid).toHaveClass('grid-cols-1', 'sm:grid-cols-2');\n        \n        // Charts should be mobile-optimized\n        const charts = screen.getAllByTestId(/chart$/);\n        charts.forEach(chart => {\n          expect(chart).toHaveClass('mobile-chart');\n          expect(chart).toHaveAttribute('data-mobile', 'true');\n        });\n      });\n    });\n\n    it('should provide touch-friendly interactions', async () => {\n      render(<AIIntelligenceDashboard />);\n\n      await waitFor(() => {\n        // Buttons should be touch-friendly (minimum 44px)\n        const buttons = screen.getAllByRole('button');\n        buttons.forEach(button => {\n          const styles = window.getComputedStyle(button);\n          const minSize = parseInt(styles.minHeight) || parseInt(styles.height);\n          expect(minSize).toBeGreaterThanOrEqual(44);\n        });\n        \n        // Touch targets should have proper spacing\n        const cards = screen.getAllByTestId('metric-card');\n        cards.forEach(card => {\n          expect(card).toHaveClass('touch-friendly');\n        });\n      });\n    });\n\n    it('should hide non-essential elements on small screens', async () => {\n      render(<CustomerIntelligenceDashboard />);\n\n      await waitFor(() => {\n        // Secondary information should be hidden on mobile\n        expect(screen.queryByTestId('desktop-sidebar')).not.toBeInTheDocument();\n        expect(screen.queryByTestId('secondary-metrics')).not.toBeInTheDocument();\n        \n        // Essential content should remain visible\n        expect(screen.getByTestId('primary-metrics')).toBeInTheDocument();\n        expect(screen.getByTestId('main-dashboard')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('African Currency and Localization', () => {\n    it('should display currencies in Nigerian Naira by default', async () => {\n      render(<CoreAnalyticsDashboard />);\n\n      await waitFor(() => {\n        // Should show NGN currency symbols\n        expect(screen.getByText(/₦/)).toBeInTheDocument();\n        expect(screen.getByText('₦450,000')).toBeInTheDocument(); // Revenue in Naira\n        \n        // Currency selector should show NGN as default\n        const currencySelector = screen.getByTestId('currency-selector');\n        expect(currencySelector).toHaveValue('NGN');\n      });\n    });\n\n    it('should support multiple African currencies', async () => {\n      render(<CustomerIntelligenceDashboard />);\n\n      await waitFor(() => {\n        const currencySelector = screen.getByTestId('currency-selector');\n        fireEvent.change(currencySelector, { target: { value: 'ZAR' } });\n      });\n\n      await waitFor(() => {\n        // Should convert and display in South African Rand\n        expect(screen.getByText(/R/)).toBeInTheDocument();\n        expect(screen.getByText('R125,000')).toBeInTheDocument();\n      });\n    });\n\n    it('should display timestamps in West Africa Time (WAT)', async () => {\n      render(<LiveVisitorMap />);\n\n      await waitFor(() => {\n        // Should show WAT timezone\n        expect(screen.getByText(/WAT|GMT\\+1/)).toBeInTheDocument();\n        \n        // Time should be formatted for Nigerian locale\n        const timestamps = screen.getAllByTestId('timestamp');\n        timestamps.forEach(timestamp => {\n          expect(timestamp.textContent).toMatch(/\\d{1,2}:\\d{2}\\s*(AM|PM)\\s*WAT/);\n        });\n      });\n    });\n\n    it('should support multiple African languages', async () => {\n      // Mock Hausa language preference\n      Object.defineProperty(navigator, 'languages', {\n        value: ['ha', 'en-NG', 'en'],\n        configurable: true\n      });\n\n      render(<CoreAnalyticsDashboard />);\n\n      await waitFor(() => {\n        // Should show language selector\n        expect(screen.getByTestId('language-selector')).toBeInTheDocument();\n        \n        // Should support internationalization\n        expect(screen.getByTestId('i18n-ready')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Network Optimization for African Connections', () => {\n    it('should optimize for 3G connections', async () => {\n      render(<LiveVisitorMap />);\n\n      await waitFor(() => {\n        // Should show network optimization indicator\n        expect(screen.getByText('Optimized for 3G')).toBeInTheDocument();\n        \n        // Should load essential data first\n        expect(screen.getByTestId('essential-data')).toBeInTheDocument();\n        expect(screen.getByText('Loading additional data...')).toBeInTheDocument();\n      });\n    });\n\n    it('should implement progressive data loading', async () => {\n      render(<CoreAnalyticsDashboard />);\n\n      // Should show core metrics immediately\n      expect(screen.getByTestId('core-metrics')).toBeInTheDocument();\n      \n      await waitFor(() => {\n        // Secondary data should load progressively\n        expect(screen.getByTestId('secondary-charts')).toBeInTheDocument();\n      }, { timeout: 3000 });\n    });\n\n    it('should compress data for low-bandwidth connections', async () => {\n      // Mock 2G connection\n      Object.defineProperty(navigator, 'connection', {\n        value: {\n          effectiveType: '2g',\n          downlink: 0.25,\n          rtt: 800,\n          saveData: true\n        },\n        configurable: true\n      });\n\n      render(<AIIntelligenceDashboard />);\n\n      await waitFor(() => {\n        // Should show data compression notice\n        expect(screen.getByText('Data Saver Mode')).toBeInTheDocument();\n        expect(screen.getByText('Reduced data usage')).toBeInTheDocument();\n        \n        // Should load compressed/reduced dataset\n        const insights = screen.getAllByTestId('ai-insight');\n        expect(insights.length).toBeLessThanOrEqual(3); // Limited insights for 2G\n      });\n    });\n\n    it('should handle offline scenarios gracefully', async () => {\n      // Mock offline state\n      Object.defineProperty(navigator, 'onLine', {\n        value: false,\n        configurable: true\n      });\n\n      const offlineData = {\n        ...africanMockData,\n        cached: true,\n        lastSync: new Date(Date.now() - 300000) // 5 minutes ago\n      };\n      mockUseMCPLeadPulse.mockReturnValue(offlineData);\n\n      render(<LiveVisitorMap />);\n\n      await waitFor(() => {\n        // Should show offline indicator\n        expect(screen.getByText('Offline Mode')).toBeInTheDocument();\n        expect(screen.getByText('Cached Data (5 min ago)')).toBeInTheDocument();\n        \n        // Should still show cached data\n        expect(screen.getByText('Lagos')).toBeInTheDocument();\n        expect(screen.getByText('156')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('African Market Specific Features', () => {\n    it('should prioritize Nigerian cities in location displays', async () => {\n      render(<LiveVisitorMap />);\n\n      await waitFor(() => {\n        const locationItems = screen.getAllByTestId('location-item');\n        \n        // Lagos should be first (highest visitor count)\n        expect(locationItems[0]).toHaveTextContent('Lagos');\n        expect(locationItems[0]).toHaveTextContent('156');\n        \n        // Nigerian cities should be grouped at the top\n        expect(locationItems[1]).toHaveTextContent('Abuja');\n        expect(locationItems[2]).toHaveTextContent('Kano');\n      });\n    });\n\n    it('should show African business hours awareness', async () => {\n      render(<CoreAnalyticsDashboard />);\n\n      await waitFor(() => {\n        // Should indicate peak business hours for African markets\n        expect(screen.getByText('Peak Hours: 9 AM - 6 PM WAT')).toBeInTheDocument();\n        expect(screen.getByTestId('business-hours-indicator')).toBeInTheDocument();\n      });\n    });\n\n    it('should display mobile money payment preferences', async () => {\n      render(<CustomerIntelligenceDashboard />);\n\n      await waitFor(() => {\n        // Should show mobile money options\n        expect(screen.getByText('M-Pesa')).toBeInTheDocument();\n        expect(screen.getByText('Flutterwave')).toBeInTheDocument();\n        expect(screen.getByText('Paystack')).toBeInTheDocument();\n        \n        // Should prioritize mobile payments\n        const paymentMethods = screen.getByTestId('payment-methods');\n        expect(paymentMethods.textContent).toMatch(/Mobile.*Card/);\n      });\n    });\n\n    it('should adapt to high mobile usage patterns', async () => {\n      render(<AIIntelligenceDashboard />);\n\n      await waitFor(() => {\n        // Should show mobile-first insights\n        expect(screen.getByText('78% mobile traffic')).toBeInTheDocument();\n        expect(screen.getByText('Mobile optimization recommended')).toBeInTheDocument();\n        \n        // Should prioritize mobile-relevant metrics\n        const mobileMetrics = screen.getByTestId('mobile-metrics');\n        expect(mobileMetrics).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Performance on Mobile Devices', () => {\n    it('should meet mobile performance thresholds', async () => {\n      const renderTime = await measureComponentPerformance(\n        () => render(<LiveVisitorMap />),\n        'LiveVisitorMap on mobile'\n      );\n\n      // Mobile should render within stricter thresholds\n      expect(renderTime).toBeLessThan(PERFORMANCE_THRESHOLDS.COMPONENT_RENDER * 0.8);\n    });\n\n    it('should optimize image and asset loading', async () => {\n      render(<CoreAnalyticsDashboard />);\n\n      await waitFor(() => {\n        // Images should be optimized for mobile\n        const images = screen.getAllByRole('img');\n        images.forEach(img => {\n          expect(img).toHaveAttribute('loading', 'lazy');\n          expect(img).toHaveAttribute('decoding', 'async');\n        });\n      });\n    });\n\n    it('should implement efficient virtual scrolling for large lists', async () => {\n      const largeMobileData = {\n        ...africanMockData,\n        visitorJourneys: Array.from({ length: 500 }, (_, i) => ({\n          id: `journey_${i}`,\n          visitorId: `visitor_${i}`,\n          sessionId: `session_${i}`,\n          device: 'mobile',\n          location: 'Lagos, Nigeria',\n          engagementScore: Math.floor(Math.random() * 100),\n          pulseData: [],\n          lastActive: '2 min ago'\n        }))\n      };\n      mockUseMCPLeadPulse.mockReturnValue(largeMobileData);\n\n      render(<CoreAnalyticsDashboard />);\n\n      await waitFor(() => {\n        // Should implement virtual scrolling\n        const virtualList = screen.getByTestId('virtual-list');\n        expect(virtualList).toBeInTheDocument();\n        \n        // Should only render visible items\n        const visibleItems = screen.getAllByTestId('journey-item');\n        expect(visibleItems.length).toBeLessThanOrEqual(20); // Limited for performance\n      });\n    });\n\n    it('should minimize JavaScript bundle size for mobile', async () => {\n      render(<CustomerIntelligenceDashboard />);\n\n      await waitFor(() => {\n        // Should lazy load non-critical components\n        expect(screen.getByTestId('lazy-loaded-charts')).toBeInTheDocument();\n        \n        // Should use code splitting\n        expect(screen.getByTestId('bundle-optimized')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Accessibility on Mobile', () => {\n    it('should maintain accessibility on touch devices', async () => {\n      const { container } = render(<LiveVisitorMap />);\n\n      await waitFor(() => {\n        checkAccessibility(container);\n      });\n\n      // Touch targets should be accessible\n      const buttons = screen.getAllByRole('button');\n      buttons.forEach(button => {\n        expect(button).toHaveAttribute('aria-label');\n        expect(button).not.toHaveAttribute('aria-hidden', 'true');\n      });\n    });\n\n    it('should support screen readers on mobile', async () => {\n      render(<CoreAnalyticsDashboard />);\n\n      await waitFor(() => {\n        // Should have proper ARIA labels\n        expect(screen.getByLabelText('Analytics dashboard')).toBeInTheDocument();\n        expect(screen.getByRole('main')).toBeInTheDocument();\n        \n        // Live regions for dynamic content\n        expect(screen.getByRole('status')).toBeInTheDocument();\n      });\n    });\n\n    it('should provide keyboard navigation alternatives', async () => {\n      render(<AIIntelligenceDashboard />);\n\n      await waitFor(() => {\n        // Should support keyboard navigation even on touch devices\n        const focusableElements = screen.getAllByRole('button');\n        focusableElements.forEach(element => {\n          expect(element).toHaveAttribute('tabIndex');\n        });\n      });\n    });\n\n    it('should scale text appropriately for mobile viewing', async () => {\n      render(<CustomerIntelligenceDashboard />);\n\n      await waitFor(() => {\n        // Text should be readable on mobile (minimum 16px)\n        const textElements = screen.getAllByTestId('readable-text');\n        textElements.forEach(element => {\n          const styles = window.getComputedStyle(element);\n          const fontSize = parseInt(styles.fontSize);\n          expect(fontSize).toBeGreaterThanOrEqual(16);\n        });\n      });\n    });\n  });\n\n  describe('Data Usage Optimization', () => {\n    it('should track and display data usage', async () => {\n      render(<CoreAnalyticsDashboard />);\n\n      await waitFor(() => {\n        // Should show data usage indicator\n        expect(screen.getByTestId('data-usage')).toBeInTheDocument();\n        expect(screen.getByText(/Data used:/)).toBeInTheDocument();\n      });\n    });\n\n    it('should offer data-lite mode for African users', async () => {\n      // Enable data saver mode\n      Object.defineProperty(navigator, 'connection', {\n        value: {\n          effectiveType: '3g',\n          saveData: true\n        },\n        configurable: true\n      });\n\n      render(<LiveVisitorMap />);\n\n      await waitFor(() => {\n        // Should automatically enable data-lite mode\n        expect(screen.getByText('Data-Lite Mode Active')).toBeInTheDocument();\n        expect(screen.getByText('Reduced animations')).toBeInTheDocument();\n        expect(screen.getByText('Compressed images')).toBeInTheDocument();\n      });\n    });\n\n    it('should cache data efficiently for repeat visits', async () => {\n      const cachedData = {\n        ...africanMockData,\n        cached: true,\n        cacheSize: '2.3 MB',\n        lastUpdate: new Date()\n      };\n      mockUseMCPLeadPulse.mockReturnValue(cachedData);\n\n      render(<AIIntelligenceDashboard />);\n\n      await waitFor(() => {\n        // Should show cache status\n        expect(screen.getByText('Using cached data')).toBeInTheDocument();\n        expect(screen.getByText('2.3 MB saved')).toBeInTheDocument();\n      });\n    });\n  });\n});"],"names":["jest","mock","mockUseMCPLeadPulse","useMCPLeadPulse","mockUseSession","useSession","describe","mockSession","user","id","email","role","organizationId","timezone","locale","currency","expires","africanMockData","createMockMCPData","visitorLocations","city","country","visitors","latitude","longitude","analytics","currencies","NGN","ZAR","KES","GHS","EGP","timezones","languages","devices","mobile","desktop","tablet","networks","beforeEach","mockReturnValue","data","status","Object","defineProperty","window","writable","configurable","value","navigator","effectiveType","downlink","rtt","saveData","afterEach","clearAllMocks","it","render","LiveVisitorMap","waitFor","mapContainer","screen","getByTestId","expect","toHaveClass","locationList","toBeInTheDocument","CoreAnalyticsDashboard","metricsGrid","charts","getAllByTestId","forEach","chart","toHaveAttribute","AIIntelligenceDashboard","buttons","getAllByRole","button","styles","getComputedStyle","minSize","parseInt","minHeight","height","toBeGreaterThanOrEqual","cards","card","CustomerIntelligenceDashboard","queryByTestId","not","getByText","currencySelector","toHaveValue","fireEvent","change","target","timestamps","timestamp","textContent","toMatch","timeout","insights","length","toBeLessThanOrEqual","offlineData","cached","lastSync","Date","now","locationItems","toHaveTextContent","paymentMethods","mobileMetrics","renderTime","measureComponentPerformance","toBeLessThan","PERFORMANCE_THRESHOLDS","COMPONENT_RENDER","images","img","largeMobileData","visitorJourneys","Array","from","_","i","visitorId","sessionId","device","location","engagementScore","Math","floor","random","pulseData","lastActive","virtualList","visibleItems","container","checkAccessibility","getByLabelText","getByRole","focusableElements","element","textElements","fontSize","cachedData","cacheSize","lastUpdate"],"mappings":"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"}