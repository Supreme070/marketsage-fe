{"version":3,"sources":["/Users/supreme/Desktop/marketsage/__tests__/leadpulse/form-builder.test.ts"],"sourcesContent":["/**\n * LeadPulse Form Builder Tests\n * \n * Tests for form creation, submission, and analytics including:\n * - Form CRUD operations\n * - Form field validation and conditional logic\n * - Form submission processing\n * - Analytics and conversion tracking\n */\n\nimport { describe, test, expect, beforeEach, afterEach, jest } from '@jest/globals';\nimport { NextRequest } from 'next/server';\nimport { POST, GET, PUT, DELETE } from '@/app/api/leadpulse/forms/route';\nimport { POST as SubmitForm } from '@/app/api/leadpulse/forms/[formId]/submit/route';\nimport prisma from '@/lib/db/prisma';\nimport { formBuilder, FormFieldType } from '@/lib/leadpulse/formBuilder';\nimport { leadPulseCache } from '@/lib/cache/leadpulse-cache';\n\n// Mock dependencies\njest.mock('@/lib/db/prisma', () => ({\n  leadPulseForm: {\n    create: jest.fn(),\n    findUnique: jest.fn(),\n    findMany: jest.fn(),\n    update: jest.fn(),\n    delete: jest.fn(),\n  },\n  leadPulseFormSubmission: {\n    create: jest.fn(),\n    findMany: jest.fn(),\n    count: jest.fn(),\n  },\n  leadPulseSubmissionData: {\n    create: jest.fn(),\n    createMany: jest.fn(),\n  },\n  leadPulseVisitor: {\n    findUnique: jest.fn(),\n    update: jest.fn(),\n  },\n  contact: {\n    findUnique: jest.fn(),\n    create: jest.fn(),\n    upsert: jest.fn(),\n  },\n}));\n\njest.mock('@/lib/cache/leadpulse-cache', () => ({\n  leadPulseCache: {\n    get: jest.fn(),\n    set: jest.fn(),\n    del: jest.fn(),\n    incrementCounter: jest.fn(),\n  },\n}));\n\njest.mock('next-auth', () => ({\n  getServerSession: jest.fn(() => Promise.resolve({\n    user: { id: 'user123', email: 'test@example.com' }\n  })),\n}));\n\n// Helper function to create NextRequest\nfunction createNextRequest(method: string, url: string, body?: any) {\n  return new NextRequest(url, {\n    method,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: body ? JSON.stringify(body) : undefined,\n  });\n}\n\ndescribe('LeadPulse Form Builder', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('Form Creation (POST /api/leadpulse/forms)', () => {\n    test('should create a new form with valid data', async () => {\n      const formData = {\n        name: 'Contact Form',\n        description: 'Primary contact form for lead capture',\n        fields: [\n          {\n            id: 'name',\n            type: FormFieldType.TEXT,\n            label: 'Full Name',\n            placeholder: 'Enter your full name',\n            required: true,\n            validation: {\n              minLength: 2,\n              maxLength: 100,\n            },\n          },\n          {\n            id: 'email',\n            type: FormFieldType.EMAIL,\n            label: 'Email Address',\n            placeholder: 'Enter your email',\n            required: true,\n            validation: {\n              pattern: '^[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+$',\n            },\n          },\n          {\n            id: 'company',\n            type: FormFieldType.TEXT,\n            label: 'Company',\n            placeholder: 'Your company name',\n            required: false,\n          },\n          {\n            id: 'message',\n            type: FormFieldType.TEXTAREA,\n            label: 'Message',\n            placeholder: 'Tell us about your needs',\n            required: true,\n            validation: {\n              minLength: 10,\n              maxLength: 1000,\n            },\n          },\n        ],\n        styling: {\n          theme: 'light',\n          primaryColor: '#007bff',\n          backgroundColor: '#ffffff',\n          borderRadius: 8,\n        },\n        settings: {\n          successMessage: 'Thank you for your submission!',\n          redirectUrl: 'https://example.com/thank-you',\n          emailNotifications: true,\n          autoResponder: {\n            enabled: true,\n            subject: 'Thank you for contacting us',\n            message: 'We will get back to you soon.',\n          },\n        },\n      };\n\n      const mockForm = {\n        id: 'form_123',\n        name: formData.name,\n        description: formData.description,\n        fields: formData.fields,\n        styling: formData.styling,\n        settings: formData.settings,\n        status: 'active',\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        userId: 'user123',\n      };\n\n      (prisma.leadPulseForm.create as jest.Mock).mockResolvedValue(mockForm);\n\n      const request = createNextRequest('POST', 'http://localhost:3000/api/leadpulse/forms', formData);\n      const response = await POST(request);\n      const responseData = await response.json();\n\n      expect(response.status).toBe(201);\n      expect(responseData.success).toBe(true);\n      expect(responseData.formId).toBe('form_123');\n      expect(responseData.embedCode).toContain('form_123');\n\n      // Verify database call\n      expect(prisma.leadPulseForm.create).toHaveBeenCalledWith({\n        data: expect.objectContaining({\n          name: formData.name,\n          description: formData.description,\n          fields: formData.fields,\n          styling: formData.styling,\n          settings: formData.settings,\n          userId: 'user123',\n          status: 'active',\n        }),\n      });\n    });\n\n    test('should validate required fields', async () => {\n      const invalidForms = [\n        {\n          description: 'missing name',\n          data: {\n            description: 'Test form',\n            fields: [],\n          },\n        },\n        {\n          description: 'empty fields array',\n          data: {\n            name: 'Test Form',\n            description: 'Test form',\n            fields: [],\n          },\n        },\n        {\n          description: 'invalid field type',\n          data: {\n            name: 'Test Form',\n            fields: [\n              {\n                id: 'test',\n                type: 'INVALID_TYPE',\n                label: 'Test',\n                required: true,\n              },\n            ],\n          },\n        },\n        {\n          description: 'missing field label',\n          data: {\n            name: 'Test Form',\n            fields: [\n              {\n                id: 'test',\n                type: FormFieldType.TEXT,\n                required: true,\n              },\n            ],\n          },\n        },\n      ];\n\n      for (const invalidForm of invalidForms) {\n        const request = createNextRequest('POST', 'http://localhost:3000/api/leadpulse/forms', invalidForm.data);\n        const response = await POST(request);\n        const responseData = await response.json();\n\n        expect(response.status).toBe(400);\n        expect(responseData.success).toBe(false);\n        expect(responseData.error).toBeDefined();\n      }\n    });\n\n    test('should generate proper embed code', async () => {\n      const formData = {\n        name: 'Simple Form',\n        fields: [\n          {\n            id: 'email',\n            type: FormFieldType.EMAIL,\n            label: 'Email',\n            required: true,\n          },\n        ],\n      };\n\n      const mockForm = {\n        id: 'form_embed_test',\n        ...formData,\n        userId: 'user123',\n        status: 'active',\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      (prisma.leadPulseForm.create as jest.Mock).mockResolvedValue(mockForm);\n\n      const request = createNextRequest('POST', 'http://localhost:3000/api/leadpulse/forms', formData);\n      const response = await POST(request);\n      const responseData = await response.json();\n\n      expect(responseData.embedCode).toContain('form_embed_test');\n      expect(responseData.embedCode).toContain('<div id=\"leadpulse-form-container\">');\n      expect(responseData.embedCode).toContain('<script>');\n      expect(responseData.embedCode).toContain('leadpulse-form.js');\n    });\n  });\n\n  describe('Form Retrieval (GET /api/leadpulse/forms)', () => {\n    test('should list user forms with filters', async () => {\n      const mockForms = [\n        {\n          id: 'form_1',\n          name: 'Contact Form',\n          description: 'Main contact form',\n          status: 'active',\n          fields: [],\n          createdAt: new Date(),\n          analytics: {\n            totalViews: 150,\n            totalSubmissions: 12,\n            conversionRate: 8.0,\n          },\n        },\n        {\n          id: 'form_2',\n          name: 'Newsletter Signup',\n          description: 'Newsletter subscription',\n          status: 'active',\n          fields: [],\n          createdAt: new Date(),\n          analytics: {\n            totalViews: 300,\n            totalSubmissions: 45,\n            conversionRate: 15.0,\n          },\n        },\n      ];\n\n      (prisma.leadPulseForm.findMany as jest.Mock).mockResolvedValue(mockForms);\n\n      const request = createNextRequest('GET', 'http://localhost:3000/api/leadpulse/forms?status=active');\n      const response = await GET(request);\n      const responseData = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(responseData.success).toBe(true);\n      expect(responseData.forms).toHaveLength(2);\n      expect(responseData.total).toBe(2);\n\n      // Verify database query with filters\n      expect(prisma.leadPulseForm.findMany).toHaveBeenCalledWith({\n        where: {\n          userId: 'user123',\n          status: 'active',\n        },\n        orderBy: { createdAt: 'desc' },\n        include: expect.objectContaining({\n          _count: expect.any(Object),\n        }),\n      });\n    });\n\n    test('should search forms by name', async () => {\n      const request = createNextRequest('GET', 'http://localhost:3000/api/leadpulse/forms?search=contact');\n      await GET(request);\n\n      expect(prisma.leadPulseForm.findMany).toHaveBeenCalledWith({\n        where: {\n          userId: 'user123',\n          OR: [\n            { name: { contains: 'contact', mode: 'insensitive' } },\n            { description: { contains: 'contact', mode: 'insensitive' } },\n          ],\n        },\n        orderBy: { createdAt: 'desc' },\n        include: expect.any(Object),\n      });\n    });\n  });\n\n  describe('Form Updates (PUT /api/leadpulse/forms/{id})', () => {\n    test('should update form successfully', async () => {\n      const formId = 'form_update_test';\n      const updateData = {\n        name: 'Updated Contact Form',\n        description: 'Updated description',\n        fields: [\n          {\n            id: 'name',\n            type: FormFieldType.TEXT,\n            label: 'Full Name',\n            required: true,\n          },\n          {\n            id: 'email',\n            type: FormFieldType.EMAIL,\n            label: 'Email Address',\n            required: true,\n          },\n        ],\n        styling: {\n          theme: 'dark',\n          primaryColor: '#28a745',\n        },\n      };\n\n      const existingForm = {\n        id: formId,\n        name: 'Contact Form',\n        userId: 'user123',\n        status: 'active',\n      };\n\n      const updatedForm = {\n        ...existingForm,\n        ...updateData,\n        updatedAt: new Date(),\n      };\n\n      (prisma.leadPulseForm.findUnique as jest.Mock).mockResolvedValue(existingForm);\n      (prisma.leadPulseForm.update as jest.Mock).mockResolvedValue(updatedForm);\n\n      const request = createNextRequest('PUT', `http://localhost:3000/api/leadpulse/forms/${formId}`, updateData);\n      const response = await PUT(request);\n      const responseData = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(responseData.success).toBe(true);\n\n      // Verify update call\n      expect(prisma.leadPulseForm.update).toHaveBeenCalledWith({\n        where: { id: formId, userId: 'user123' },\n        data: expect.objectContaining({\n          name: updateData.name,\n          description: updateData.description,\n          fields: updateData.fields,\n          styling: updateData.styling,\n        }),\n      });\n\n      // Verify cache invalidation\n      expect(leadPulseCache.del).toHaveBeenCalledWith(`form:${formId}`);\n    });\n\n    test('should not allow updating non-owned forms', async () => {\n      const formId = 'form_not_owned';\n      \n      (prisma.leadPulseForm.findUnique as jest.Mock).mockResolvedValue(null);\n\n      const request = createNextRequest('PUT', `http://localhost:3000/api/leadpulse/forms/${formId}`, {\n        name: 'Hacked Form',\n      });\n      const response = await PUT(request);\n      const responseData = await response.json();\n\n      expect(response.status).toBe(404);\n      expect(responseData.success).toBe(false);\n      expect(responseData.error).toBe('Form not found');\n    });\n  });\n\n  describe('Form Deletion (DELETE /api/leadpulse/forms/{id})', () => {\n    test('should delete form and related data', async () => {\n      const formId = 'form_delete_test';\n      \n      const existingForm = {\n        id: formId,\n        name: 'Form to Delete',\n        userId: 'user123',\n        status: 'active',\n      };\n\n      (prisma.leadPulseForm.findUnique as jest.Mock).mockResolvedValue(existingForm);\n      (prisma.leadPulseForm.delete as jest.Mock).mockResolvedValue(existingForm);\n\n      const request = createNextRequest('DELETE', `http://localhost:3000/api/leadpulse/forms/${formId}`);\n      const response = await DELETE(request);\n      const responseData = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(responseData.success).toBe(true);\n\n      // Verify deletion\n      expect(prisma.leadPulseForm.delete).toHaveBeenCalledWith({\n        where: { id: formId, userId: 'user123' },\n      });\n\n      // Verify cache cleanup\n      expect(leadPulseCache.del).toHaveBeenCalledWith(`form:${formId}`);\n    });\n  });\n\n  describe('Form Submission (POST /api/leadpulse/forms/{formId}/submit)', () => {\n    test('should process valid form submission', async () => {\n      const formId = 'form_submit_test';\n      const submissionData = {\n        data: {\n          name: 'John Doe',\n          email: 'john@example.com',\n          company: 'Example Corp',\n          message: 'I am interested in your services',\n        },\n        metadata: {\n          visitorId: 'visitor_123',\n          fingerprint: 'fp_123456',\n          url: 'https://example.com/contact',\n          userAgent: 'Mozilla/5.0...',\n        },\n      };\n\n      const mockForm = {\n        id: formId,\n        name: 'Contact Form',\n        fields: [\n          {\n            id: 'name',\n            type: FormFieldType.TEXT,\n            label: 'Full Name',\n            required: true,\n            validation: { minLength: 2, maxLength: 100 },\n          },\n          {\n            id: 'email',\n            type: FormFieldType.EMAIL,\n            label: 'Email',\n            required: true,\n          },\n          {\n            id: 'company',\n            type: FormFieldType.TEXT,\n            label: 'Company',\n            required: false,\n          },\n          {\n            id: 'message',\n            type: FormFieldType.TEXTAREA,\n            label: 'Message',\n            required: true,\n            validation: { minLength: 10 },\n          },\n        ],\n        settings: {\n          emailNotifications: true,\n          autoResponder: {\n            enabled: true,\n            subject: 'Thank you',\n            message: 'We received your message',\n          },\n        },\n        status: 'active',\n        userId: 'user123',\n      };\n\n      const mockSubmission = {\n        id: 'submission_123',\n        formId,\n        data: submissionData.data,\n        visitorId: submissionData.metadata.visitorId,\n        submittedAt: new Date(),\n      };\n\n      const mockVisitor = {\n        id: 'visitor_123',\n        score: 45,\n        isConverted: false,\n      };\n\n      (prisma.leadPulseForm.findUnique as jest.Mock).mockResolvedValue(mockForm);\n      (prisma.leadPulseFormSubmission.create as jest.Mock).mockResolvedValue(mockSubmission);\n      (prisma.leadPulseVisitor.findUnique as jest.Mock).mockResolvedValue(mockVisitor);\n      (prisma.leadPulseVisitor.update as jest.Mock).mockResolvedValue({\n        ...mockVisitor,\n        score: 75,\n        isConverted: true,\n      });\n      (prisma.contact.upsert as jest.Mock).mockResolvedValue({\n        id: 'contact_123',\n        email: submissionData.data.email,\n        firstName: 'John',\n        lastName: 'Doe',\n      });\n\n      const request = createNextRequest('POST', `http://localhost:3000/api/leadpulse/forms/${formId}/submit`, submissionData);\n      \n      // Mock the route handler context\n      const context = { params: { formId } };\n      const response = await SubmitForm(request, context);\n      const responseData = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(responseData.success).toBe(true);\n      expect(responseData.submissionId).toBe('submission_123');\n\n      // Verify form submission was created\n      expect(prisma.leadPulseFormSubmission.create).toHaveBeenCalledWith({\n        data: expect.objectContaining({\n          formId,\n          data: submissionData.data,\n          visitorId: submissionData.metadata.visitorId,\n          fingerprint: submissionData.metadata.fingerprint,\n          url: submissionData.metadata.url,\n          userAgent: submissionData.metadata.userAgent,\n        }),\n      });\n\n      // Verify visitor score was updated\n      expect(prisma.leadPulseVisitor.update).toHaveBeenCalledWith({\n        where: { id: 'visitor_123' },\n        data: expect.objectContaining({\n          score: expect.any(Number),\n          isConverted: true,\n        }),\n      });\n\n      // Verify contact was created/updated\n      expect(prisma.contact.upsert).toHaveBeenCalledWith({\n        where: { email: submissionData.data.email },\n        update: expect.any(Object),\n        create: expect.any(Object),\n      });\n    });\n\n    test('should validate form fields', async () => {\n      const formId = 'form_validation_test';\n      const invalidSubmissions = [\n        {\n          description: 'missing required field',\n          data: {\n            data: {\n              name: 'John Doe',\n              // missing required email\n            },\n            metadata: {\n              visitorId: 'visitor_123',\n            },\n          },\n        },\n        {\n          description: 'invalid email format',\n          data: {\n            data: {\n              name: 'John Doe',\n              email: 'invalid-email',\n            },\n            metadata: {\n              visitorId: 'visitor_123',\n            },\n          },\n        },\n        {\n          description: 'text too short',\n          data: {\n            data: {\n              name: 'A', // too short (minLength: 2)\n              email: 'john@example.com',\n            },\n            metadata: {\n              visitorId: 'visitor_123',\n            },\n          },\n        },\n        {\n          description: 'text too long',\n          data: {\n            data: {\n              name: 'A'.repeat(101), // too long (maxLength: 100)\n              email: 'john@example.com',\n            },\n            metadata: {\n              visitorId: 'visitor_123',\n            },\n          },\n        },\n      ];\n\n      const mockForm = {\n        id: formId,\n        fields: [\n          {\n            id: 'name',\n            type: FormFieldType.TEXT,\n            label: 'Name',\n            required: true,\n            validation: { minLength: 2, maxLength: 100 },\n          },\n          {\n            id: 'email',\n            type: FormFieldType.EMAIL,\n            label: 'Email',\n            required: true,\n          },\n        ],\n        status: 'active',\n      };\n\n      (prisma.leadPulseForm.findUnique as jest.Mock).mockResolvedValue(mockForm);\n\n      for (const invalidSubmission of invalidSubmissions) {\n        const request = createNextRequest('POST', `http://localhost:3000/api/leadpulse/forms/${formId}/submit`, invalidSubmission.data);\n        const context = { params: { formId } };\n        const response = await SubmitForm(request, context);\n        const responseData = await response.json();\n\n        expect(response.status).toBe(400);\n        expect(responseData.success).toBe(false);\n        expect(responseData.error).toBeDefined();\n        expect(responseData.validationErrors).toBeDefined();\n      }\n    });\n\n    test('should handle inactive forms', async () => {\n      const formId = 'form_inactive_test';\n      \n      const inactiveForm = {\n        id: formId,\n        name: 'Inactive Form',\n        status: 'archived',\n        fields: [],\n      };\n\n      (prisma.leadPulseForm.findUnique as jest.Mock).mockResolvedValue(inactiveForm);\n\n      const request = createNextRequest('POST', `http://localhost:3000/api/leadpulse/forms/${formId}/submit`, {\n        data: { email: 'test@example.com' },\n        metadata: { visitorId: 'visitor_123' },\n      });\n      \n      const context = { params: { formId } };\n      const response = await SubmitForm(request, context);\n      const responseData = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(responseData.success).toBe(false);\n      expect(responseData.error).toBe('Form is not active');\n    });\n\n    test('should handle non-existent forms', async () => {\n      const formId = 'non_existent_form';\n      \n      (prisma.leadPulseForm.findUnique as jest.Mock).mockResolvedValue(null);\n\n      const request = createNextRequest('POST', `http://localhost:3000/api/leadpulse/forms/${formId}/submit`, {\n        data: { email: 'test@example.com' },\n        metadata: { visitorId: 'visitor_123' },\n      });\n      \n      const context = { params: { formId } };\n      const response = await SubmitForm(request, context);\n      const responseData = await response.json();\n\n      expect(response.status).toBe(404);\n      expect(responseData.success).toBe(false);\n      expect(responseData.error).toBe('Form not found');\n    });\n  });\n\n  describe('Form Analytics', () => {\n    test('should calculate form analytics correctly', async () => {\n      const formId = 'form_analytics_test';\n      \n      // Mock form submission counts\n      (prisma.leadPulseFormSubmission.count as jest.Mock)\n        .mockResolvedValueOnce(25) // total submissions\n        .mockResolvedValueOnce(250); // total views (would be tracked separately)\n\n      const mockSubmissions = [\n        {\n          id: 'sub_1',\n          submittedAt: new Date(),\n          data: { email: 'user1@example.com' },\n        },\n        {\n          id: 'sub_2', \n          submittedAt: new Date(),\n          data: { email: 'user2@example.com' },\n        },\n      ];\n\n      (prisma.leadPulseFormSubmission.findMany as jest.Mock).mockResolvedValue(mockSubmissions);\n\n      // Test form analytics calculation\n      const analytics = await formBuilder.calculateFormAnalytics(formId);\n\n      expect(analytics).toEqual({\n        totalSubmissions: 25,\n        totalViews: expect.any(Number),\n        conversionRate: expect.any(Number),\n        avgCompletionTime: expect.any(Number),\n        recentSubmissions: mockSubmissions,\n      });\n\n      expect(analytics.conversionRate).toBeGreaterThan(0);\n      expect(analytics.conversionRate).toBeLessThanOrEqual(100);\n    });\n\n    test('should track form field dropoff rates', async () => {\n      const formId = 'form_dropoff_test';\n      \n      // Mock submission data for dropoff analysis\n      const mockSubmissions = [\n        { data: { name: 'John', email: 'john@example.com' } }, // Complete\n        { data: { name: 'Jane' } }, // Dropped at email\n        { data: { name: 'Bob', email: 'bob@example.com', company: 'ABC' } }, // Complete with optional\n      ];\n\n      (prisma.leadPulseFormSubmission.findMany as jest.Mock).mockResolvedValue(mockSubmissions);\n\n      const dropoffAnalysis = await formBuilder.analyzeFieldDropoff(formId);\n\n      expect(dropoffAnalysis).toEqual({\n        totalAttempts: 3,\n        fieldDropoffs: [\n          {\n            fieldId: 'name',\n            completionRate: 100, // All 3 filled name\n            dropoffRate: 0,\n          },\n          {\n            fieldId: 'email',\n            completionRate: 66.67, // 2 out of 3 filled email\n            dropoffRate: 33.33,\n          },\n          {\n            fieldId: 'company',\n            completionRate: 33.33, // 1 out of 3 filled company\n            dropoffRate: 66.67,\n          },\n        ],\n      });\n    });\n  });\n\n  describe('Conditional Logic', () => {\n    test('should validate conditional field logic', async () => {\n      const formWithConditionalFields = {\n        id: 'conditional_form',\n        fields: [\n          {\n            id: 'contact_reason',\n            type: FormFieldType.SELECT,\n            label: 'Reason for Contact',\n            required: true,\n            options: [\n              { value: 'sales', label: 'Sales Inquiry' },\n              { value: 'support', label: 'Support Request' },\n              { value: 'other', label: 'Other' },\n            ],\n          },\n          {\n            id: 'budget',\n            type: FormFieldType.SELECT,\n            label: 'Budget Range',\n            required: true,\n            conditionalLogic: {\n              showIf: {\n                field: 'contact_reason',\n                operator: 'equals',\n                value: 'sales',\n              },\n            },\n            options: [\n              { value: '1k-5k', label: '$1,000 - $5,000' },\n              { value: '5k-10k', label: '$5,000 - $10,000' },\n              { value: '10k+', label: '$10,000+' },\n            ],\n          },\n          {\n            id: 'issue_description',\n            type: FormFieldType.TEXTAREA,\n            label: 'Describe Your Issue',\n            required: true,\n            conditionalLogic: {\n              showIf: {\n                field: 'contact_reason',\n                operator: 'equals',\n                value: 'support',\n              },\n            },\n          },\n        ],\n        status: 'active',\n      };\n\n      (prisma.leadPulseForm.findUnique as jest.Mock).mockResolvedValue(formWithConditionalFields);\n\n      // Test sales inquiry submission (should require budget)\n      const salesSubmission = {\n        data: {\n          contact_reason: 'sales',\n          budget: '5k-10k',\n        },\n        metadata: { visitorId: 'visitor_123' },\n      };\n\n      const request1 = createNextRequest('POST', 'http://localhost:3000/api/leadpulse/forms/conditional_form/submit', salesSubmission);\n      const context1 = { params: { formId: 'conditional_form' } };\n      const response1 = await SubmitForm(request1, context1);\n\n      expect(response1.status).toBe(200); // Should succeed\n\n      // Test sales inquiry without budget (should fail)\n      const salesSubmissionNoBudget = {\n        data: {\n          contact_reason: 'sales',\n          // missing budget field\n        },\n        metadata: { visitorId: 'visitor_123' },\n      };\n\n      const request2 = createNextRequest('POST', 'http://localhost:3000/api/leadpulse/forms/conditional_form/submit', salesSubmissionNoBudget);\n      const context2 = { params: { formId: 'conditional_form' } };\n      const response2 = await SubmitForm(request2, context2);\n\n      expect(response2.status).toBe(400); // Should fail validation\n\n      // Test support submission (should require issue_description)\n      const supportSubmission = {\n        data: {\n          contact_reason: 'support',\n          issue_description: 'My account is not working properly',\n        },\n        metadata: { visitorId: 'visitor_123' },\n      };\n\n      const request3 = createNextRequest('POST', 'http://localhost:3000/api/leadpulse/forms/conditional_form/submit', supportSubmission);\n      const context3 = { params: { formId: 'conditional_form' } };\n      const response3 = await SubmitForm(request3, context3);\n\n      expect(response3.status).toBe(200); // Should succeed\n    });\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n});"],"names":["jest","mock","leadPulseForm","create","fn","findUnique","findMany","update","delete","leadPulseFormSubmission","count","leadPulseSubmissionData","createMany","leadPulseVisitor","contact","upsert","leadPulseCache","get","set","del","incrementCounter","getServerSession","Promise","resolve","user","id","email","createNextRequest","method","url","body","NextRequest","headers","JSON","stringify","undefined","describe","beforeEach","clearAllMocks","test","formData","name","description","fields","type","FormFieldType","TEXT","label","placeholder","required","validation","minLength","maxLength","EMAIL","pattern","TEXTAREA","styling","theme","primaryColor","backgroundColor","borderRadius","settings","successMessage","redirectUrl","emailNotifications","autoResponder","enabled","subject","message","mockForm","status","createdAt","Date","updatedAt","userId","prisma","mockResolvedValue","request","response","POST","responseData","json","expect","toBe","success","formId","embedCode","toContain","toHaveBeenCalledWith","data","objectContaining","invalidForms","invalidForm","error","toBeDefined","mockForms","analytics","totalViews","totalSubmissions","conversionRate","GET","forms","toHaveLength","total","where","orderBy","include","_count","any","Object","OR","contains","mode","updateData","existingForm","updatedForm","PUT","DELETE","submissionData","company","metadata","visitorId","fingerprint","userAgent","mockSubmission","submittedAt","mockVisitor","score","isConverted","firstName","lastName","context","params","SubmitForm","submissionId","Number","invalidSubmissions","repeat","invalidSubmission","validationErrors","inactiveForm","mockResolvedValueOnce","mockSubmissions","formBuilder","calculateFormAnalytics","toEqual","avgCompletionTime","recentSubmissions","toBeGreaterThan","toBeLessThanOrEqual","dropoffAnalysis","analyzeFieldDropoff","totalAttempts","fieldDropoffs","fieldId","completionRate","dropoffRate","formWithConditionalFields","SELECT","options","value","conditionalLogic","showIf","field","operator","salesSubmission","contact_reason","budget","request1","context1","response1","salesSubmissionNoBudget","request2","context2","response2","supportSubmission","issue_description","request3","context3","response3","afterEach"],"mappings":"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"}