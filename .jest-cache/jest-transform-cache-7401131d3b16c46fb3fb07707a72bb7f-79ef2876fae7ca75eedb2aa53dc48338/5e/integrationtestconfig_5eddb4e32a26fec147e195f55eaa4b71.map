{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/__tests__/integration-test-config.ts"],"sourcesContent":["/**\n * Integration Test Configuration for MCP Data Integration\n * \n * This configuration file sets up the testing environment for frontend integration tests\n * that use real MCP data connections and database queries.\n */\n\nimport { beforeAll, afterAll, beforeEach, afterEach } from '@jest/globals';\n\n// Test database configuration\nexport const TEST_DATABASE_CONFIG = {\n  host: process.env.TEST_DATABASE_HOST || 'localhost',\n  port: parseInt(process.env.TEST_DATABASE_PORT || '5432'),\n  database: process.env.TEST_DATABASE_NAME || 'marketsage_test',\n  username: process.env.TEST_DATABASE_USER || 'test_user',\n  password: process.env.TEST_DATABASE_PASSWORD || 'test_password'\n};\n\n// MCP server configuration for testing\nexport const TEST_MCP_CONFIG = {\n  servers: {\n    leadpulse: {\n      url: process.env.TEST_MCP_LEADPULSE_URL || 'http://localhost:3001/mcp/leadpulse',\n      enabled: process.env.TEST_MCP_LEADPULSE_ENABLED === 'true'\n    },\n    analytics: {\n      url: process.env.TEST_MCP_ANALYTICS_URL || 'http://localhost:3002/mcp/analytics',\n      enabled: process.env.TEST_MCP_ANALYTICS_ENABLED === 'true'\n    },\n    campaigns: {\n      url: process.env.TEST_MCP_CAMPAIGNS_URL || 'http://localhost:3003/mcp/campaigns',\n      enabled: process.env.TEST_MCP_CAMPAIGNS_ENABLED === 'true'\n    }\n  },\n  timeout: 5000,\n  retries: 3\n};\n\n// Performance thresholds specific to integration tests\nexport const INTEGRATION_PERFORMANCE_THRESHOLDS = {\n  COMPONENT_RENDER_WITH_DATA: 200, // ms - components with real data\n  DATABASE_QUERY: 1000, // ms - database query response time\n  MCP_REQUEST: 500, // ms - MCP server request time\n  FULL_PAGE_LOAD: 3000, // ms - complete page load with all data\n  REAL_TIME_UPDATE: 100 // ms - real-time data update response\n};\n\n// Test data seeds for consistent testing\nexport const TEST_DATA_SEEDS = {\n  visitors: [\n    {\n      id: 'test_visitor_1',\n      sessionId: 'test_session_1',\n      location: 'Lagos, Nigeria',\n      device: 'mobile',\n      engagementScore: 85,\n      timestamp: new Date('2024-07-19T10:00:00Z')\n    },\n    {\n      id: 'test_visitor_2',\n      sessionId: 'test_session_2',\n      location: 'Abuja, Nigeria',\n      device: 'desktop',\n      engagementScore: 92,\n      timestamp: new Date('2024-07-19T10:15:00Z')\n    }\n  ],\n  customers: [\n    {\n      id: 'test_customer_1',\n      email: 'test1@example.ng',\n      name: 'Test Customer 1',\n      segment: 'high_value',\n      clv: 5000,\n      churnRisk: 0.15\n    },\n    {\n      id: 'test_customer_2',\n      email: 'test2@example.ng',\n      name: 'Test Customer 2',\n      segment: 'medium_value',\n      clv: 1500,\n      churnRisk: 0.45\n    }\n  ],\n  campaigns: [\n    {\n      id: 'test_campaign_1',\n      name: 'Test Email Campaign',\n      type: 'email',\n      status: 'active',\n      openRate: 0.25,\n      clickRate: 0.08,\n      conversionRate: 0.04\n    }\n  ]\n};\n\n// Setup functions for integration tests\nexport const setupIntegrationTest = async () => {\n  console.log('Setting up integration test environment...');\n  \n  // Initialize test database\n  await initializeTestDatabase();\n  \n  // Seed test data\n  await seedTestData();\n  \n  // Start mock MCP servers if needed\n  await startMockMCPServers();\n  \n  console.log('Integration test environment ready');\n};\n\nexport const teardownIntegrationTest = async () => {\n  console.log('Tearing down integration test environment...');\n  \n  // Clean up test data\n  await cleanupTestData();\n  \n  // Stop mock MCP servers\n  await stopMockMCPServers();\n  \n  console.log('Integration test environment cleaned up');\n};\n\n// Database utilities for testing\nconst initializeTestDatabase = async () => {\n  // This would initialize the test database schema\n  // In a real implementation, this would use Prisma test database setup\n  console.log('Initializing test database schema...');\n};\n\nconst seedTestData = async () => {\n  // This would seed the test database with consistent test data\n  console.log('Seeding test database with sample data...');\n};\n\nconst cleanupTestData = async () => {\n  // This would clean up test data after tests complete\n  console.log('Cleaning up test database...');\n};\n\n// MCP server utilities for testing\nconst startMockMCPServers = async () => {\n  // This would start mock MCP servers for testing\n  console.log('Starting mock MCP servers for testing...');\n};\n\nconst stopMockMCPServers = async () => {\n  // This would stop mock MCP servers after testing\n  console.log('Stopping mock MCP servers...');\n};\n\n// Test helpers for real data scenarios\nexport const waitForMCPConnection = async (timeout = 5000) => {\n  const start = Date.now();\n  \n  while (Date.now() - start < timeout) {\n    try {\n      // Check if MCP servers are responsive\n      const response = await fetch(`${TEST_MCP_CONFIG.servers.leadpulse.url}/health`);\n      if (response.ok) {\n        return true;\n      }\n    } catch (error) {\n      // Continue waiting\n    }\n    \n    await new Promise(resolve => setTimeout(resolve, 100));\n  }\n  \n  throw new Error('MCP servers did not become available within timeout');\n};\n\nexport const waitForDatabaseReady = async (timeout = 5000) => {\n  // This would wait for test database to be ready\n  return new Promise(resolve => setTimeout(resolve, 100));\n};\n\n// Data validation helpers\nexport const validateMCPResponse = (data: any) => {\n  if (!data) {\n    throw new Error('MCP response is null or undefined');\n  }\n  \n  if (typeof data !== 'object') {\n    throw new Error('MCP response is not an object');\n  }\n  \n  // Add more specific validation based on expected data structure\n  return true;\n};\n\nexport const validateDatabaseData = (data: any) => {\n  // Validate database query results\n  if (!Array.isArray(data) && typeof data !== 'object') {\n    throw new Error('Invalid database data format');\n  }\n  \n  return true;\n};\n\n// Performance monitoring helpers\nexport const measureDatabaseQueryTime = async (queryFunction: () => Promise<any>) => {\n  const start = performance.now();\n  const result = await queryFunction();\n  const end = performance.now();\n  \n  const duration = end - start;\n  console.log(`Database query took ${duration.toFixed(2)}ms`);\n  \n  if (duration > INTEGRATION_PERFORMANCE_THRESHOLDS.DATABASE_QUERY) {\n    console.warn(`Database query exceeded threshold: ${duration}ms > ${INTEGRATION_PERFORMANCE_THRESHOLDS.DATABASE_QUERY}ms`);\n  }\n  \n  return { result, duration };\n};\n\nexport const measureMCPRequestTime = async (requestFunction: () => Promise<any>) => {\n  const start = performance.now();\n  const result = await requestFunction();\n  const end = performance.now();\n  \n  const duration = end - start;\n  console.log(`MCP request took ${duration.toFixed(2)}ms`);\n  \n  if (duration > INTEGRATION_PERFORMANCE_THRESHOLDS.MCP_REQUEST) {\n    console.warn(`MCP request exceeded threshold: ${duration}ms > ${INTEGRATION_PERFORMANCE_THRESHOLDS.MCP_REQUEST}ms`);\n  }\n  \n  return { result, duration };\n};\n\n// Error simulation helpers for testing error handling\nexport const simulateMCPServerDown = () => {\n  global.fetch = jest.fn().mockImplementation((url: string) => {\n    if (url.includes('/mcp/')) {\n      return Promise.reject(new Error('MCP server unavailable'));\n    }\n    return fetch(url);\n  });\n};\n\nexport const simulateDatabaseDown = () => {\n  global.fetch = jest.fn().mockImplementation((url: string) => {\n    if (url.includes('/api/')) {\n      return Promise.reject(new Error('Database connection failed'));\n    }\n    return fetch(url);\n  });\n};\n\nexport const simulateSlowNetwork = (delay = 2000) => {\n  global.fetch = jest.fn().mockImplementation((url: string) => {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve({\n          ok: true,\n          json: () => Promise.resolve({ success: true, data: {} })\n        });\n      }, delay);\n    });\n  });\n};\n\n// African market specific test helpers\nexport const mockAfricanUserContext = () => {\n  // Mock Nigerian user location and preferences\n  Object.defineProperty(navigator, 'language', {\n    value: 'en-NG',\n    configurable: true\n  });\n  \n  Object.defineProperty(navigator, 'languages', {\n    value: ['en-NG', 'ha', 'yo', 'ig', 'en'],\n    configurable: true\n  });\n  \n  // Mock Nigerian timezone\n  jest.spyOn(Intl, 'DateTimeFormat').mockImplementation(() => ({\n    resolvedOptions: () => ({ timeZone: 'Africa/Lagos' })\n  }));\n  \n  // Mock mobile-first context (high mobile usage in Africa)\n  Object.defineProperty(window, 'innerWidth', {\n    value: 375,\n    configurable: true\n  });\n  \n  Object.defineProperty(navigator, 'connection', {\n    value: {\n      effectiveType: '3g',\n      downlink: 1.2,\n      rtt: 400,\n      saveData: false\n    },\n    configurable: true\n  });\n};\n\nexport const mockAfricanNetworkConditions = (effectiveType: '2g' | '3g' | '4g' = '3g') => {\n  const networkConfigs = {\n    '2g': { downlink: 0.25, rtt: 800, saveData: true },\n    '3g': { downlink: 1.5, rtt: 300, saveData: false },\n    '4g': { downlink: 10, rtt: 100, saveData: false }\n  };\n  \n  Object.defineProperty(navigator, 'connection', {\n    value: {\n      effectiveType,\n      ...networkConfigs[effectiveType]\n    },\n    configurable: true\n  });\n};\n\n// Export all configuration for use in tests\nexport default {\n  TEST_DATABASE_CONFIG,\n  TEST_MCP_CONFIG,\n  INTEGRATION_PERFORMANCE_THRESHOLDS,\n  TEST_DATA_SEEDS,\n  setupIntegrationTest,\n  teardownIntegrationTest,\n  waitForMCPConnection,\n  waitForDatabaseReady,\n  validateMCPResponse,\n  validateDatabaseData,\n  measureDatabaseQueryTime,\n  measureMCPRequestTime,\n  simulateMCPServerDown,\n  simulateDatabaseDown,\n  simulateSlowNetwork,\n  mockAfricanUserContext,\n  mockAfricanNetworkConditions\n};"],"names":["INTEGRATION_PERFORMANCE_THRESHOLDS","TEST_DATABASE_CONFIG","TEST_DATA_SEEDS","TEST_MCP_CONFIG","measureDatabaseQueryTime","measureMCPRequestTime","mockAfricanNetworkConditions","mockAfricanUserContext","setupIntegrationTest","simulateDatabaseDown","simulateMCPServerDown","simulateSlowNetwork","teardownIntegrationTest","validateDatabaseData","validateMCPResponse","waitForDatabaseReady","waitForMCPConnection","host","process","env","TEST_DATABASE_HOST","port","parseInt","TEST_DATABASE_PORT","database","TEST_DATABASE_NAME","username","TEST_DATABASE_USER","password","TEST_DATABASE_PASSWORD","servers","leadpulse","url","TEST_MCP_LEADPULSE_URL","enabled","TEST_MCP_LEADPULSE_ENABLED","analytics","TEST_MCP_ANALYTICS_URL","TEST_MCP_ANALYTICS_ENABLED","campaigns","TEST_MCP_CAMPAIGNS_URL","TEST_MCP_CAMPAIGNS_ENABLED","timeout","retries","COMPONENT_RENDER_WITH_DATA","DATABASE_QUERY","MCP_REQUEST","FULL_PAGE_LOAD","REAL_TIME_UPDATE","visitors","id","sessionId","location","device","engagementScore","timestamp","Date","customers","email","name","segment","clv","churnRisk","type","status","openRate","clickRate","conversionRate","console","log","initializeTestDatabase","seedTestData","startMockMCPServers","cleanupTestData","stopMockMCPServers","start","now","response","fetch","ok","error","Promise","resolve","setTimeout","Error","data","Array","isArray","queryFunction","performance","result","end","duration","toFixed","warn","requestFunction","global","jest","fn","mockImplementation","includes","reject","delay","json","success","Object","defineProperty","navigator","value","configurable","spyOn","Intl","resolvedOptions","timeZone","window","effectiveType","downlink","rtt","saveData","networkConfigs"],"mappings":"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"}