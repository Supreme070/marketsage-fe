{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/lib/email-providers/mailgun-provider.ts"],"sourcesContent":["import { BaseEmailProvider, type EmailResult, type EmailOptions, type EmailStats, type DomainVerification } from './base-provider';\nimport { logger } from '@/lib/logger';\n\ninterface MailgunConfig {\n  apiKey: string;\n  domain: string;\n  region?: 'us' | 'eu'; // Mailgun region\n  trackingDomain?: string;\n}\n\nexport class MailgunEmailProvider extends BaseEmailProvider {\n  name = 'Mailgun';\n  \n  private apiKey: string;\n  private domain: string;\n  private region: string;\n  private trackingDomain?: string;\n  private baseUrl: string;\n\n  constructor(config: MailgunConfig) {\n    super();\n    this.apiKey = config.apiKey;\n    this.domain = config.domain;\n    this.region = config.region || 'us';\n    this.trackingDomain = config.trackingDomain;\n    this.baseUrl = this.region === 'eu' \n      ? 'https://api.eu.mailgun.net/v3' \n      : 'https://api.mailgun.net/v3';\n  }\n\n  async sendEmail(options: EmailOptions): Promise<EmailResult> {\n    try {\n      // Validate emails\n      if (!this.validateEmails(options.to)) {\n        return {\n          success: false,\n          error: {\n            message: 'Invalid email address(es)',\n            code: 'INVALID_EMAIL'\n          }\n        };\n      }\n\n      if (!this.validateConfig()) {\n        return {\n          success: false,\n          error: {\n            message: 'Mailgun configuration is incomplete',\n            code: 'INVALID_CONFIG'\n          }\n        };\n      }\n\n      // Prepare recipients\n      const recipients = Array.isArray(options.to) ? options.to.join(',') : options.to;\n\n      // Sanitize content\n      const sanitizedHtml = this.sanitizeContent(options.html);\n      const htmlWithUnsubscribe = this.addUnsubscribeLink(sanitizedHtml, recipients);\n      const plainText = options.text || this.generatePlainText(htmlWithUnsubscribe);\n\n      // Prepare form data\n      const formData = new FormData();\n      formData.append('from', options.fromName \n        ? `${options.fromName} <${options.from}>` \n        : options.from\n      );\n      formData.append('to', recipients);\n      formData.append('subject', options.subject);\n      formData.append('html', htmlWithUnsubscribe);\n      formData.append('text', plainText);\n\n      if (options.replyTo) {\n        formData.append('h:Reply-To', options.replyTo);\n      }\n\n      // Add tracking\n      formData.append('o:tracking', 'true');\n      formData.append('o:tracking-clicks', 'true');\n      formData.append('o:tracking-opens', 'true');\n\n      // Add custom variables for tracking\n      if (options.metadata) {\n        Object.entries(options.metadata).forEach(([key, value]) => {\n          formData.append(`v:${key}`, String(value));\n        });\n      }\n\n      // Add attachments\n      if (options.attachments && options.attachments.length > 0) {\n        options.attachments.forEach((attachment, index) => {\n          const blob = new Blob([attachment.content], { \n            type: attachment.contentType || 'application/octet-stream' \n          });\n          formData.append('attachment', blob, attachment.filename);\n        });\n      }\n\n      // Send email via Mailgun API\n      const response = await fetch(`${this.baseUrl}/${this.domain}/messages`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Basic ${Buffer.from(`api:${this.apiKey}`).toString('base64')}`\n        },\n        body: formData\n      });\n\n      const responseData = await response.json();\n\n      if (!response.ok) {\n        logger.error('Mailgun API error:', { \n          status: response.status, \n          statusText: response.statusText,\n          error: responseData \n        });\n        \n        return {\n          success: false,\n          error: {\n            message: responseData.message || 'Mailgun API request failed',\n            code: 'MAILGUN_API_ERROR'\n          }\n        };\n      }\n\n      logger.info('Email sent successfully via Mailgun', {\n        messageId: responseData.id,\n        to: recipients,\n        subject: options.subject\n      });\n\n      return {\n        success: true,\n        messageId: responseData.id\n      };\n\n    } catch (error) {\n      logger.error('Mailgun sending error:', { error, domain: this.domain });\n      \n      return {\n        success: false,\n        error: {\n          message: error instanceof Error ? error.message : 'Mailgun sending failed',\n          code: 'MAILGUN_ERROR'\n        }\n      };\n    }\n  }\n\n  validateConfig(): boolean {\n    return !!(this.apiKey && this.domain);\n  }\n\n  async getStats(period?: { start: Date; end: Date }): Promise<EmailStats> {\n    try {\n      if (!this.validateConfig()) {\n        return super.getStats(period);\n      }\n\n      const endDate = period?.end || new Date();\n      const startDate = period?.start || new Date(Date.now() - 30 * 24 * 60 * 60 * 1000); // 30 days ago\n\n      const response = await fetch(\n        `${this.baseUrl}/${this.domain}/stats/total?` + \n        `start=${startDate.toISOString().split('T')[0]}&` +\n        `end=${endDate.toISOString().split('T')[0]}&` +\n        `resolution=day&event=*`,\n        {\n          headers: {\n            'Authorization': `Basic ${Buffer.from(`api:${this.apiKey}`).toString('base64')}`\n          }\n        }\n      );\n\n      if (!response.ok) {\n        logger.warn('Failed to fetch Mailgun stats:', { status: response.status });\n        return super.getStats(period);\n      }\n\n      const data = await response.json();\n      const stats = data.stats?.[0] || {};\n\n      return {\n        sent: stats.sent?.total || 0,\n        delivered: stats.delivered?.total || 0,\n        bounced: (stats.bounced?.total || 0) + (stats.dropped?.total || 0),\n        opened: stats.opened?.total || 0,\n        clicked: stats.clicked?.total || 0,\n        unsubscribed: stats.unsubscribed?.total || 0,\n        complained: stats.complained?.total || 0,\n      };\n\n    } catch (error) {\n      logger.error('Error fetching Mailgun stats:', error);\n      return super.getStats(period);\n    }\n  }\n\n  async verifyDomain(domain: string): Promise<DomainVerification> {\n    try {\n      if (!this.validateConfig()) {\n        return {\n          verified: false,\n          status: 'failed'\n        };\n      }\n\n      const response = await fetch(`${this.baseUrl}/domains/${domain}`, {\n        headers: {\n          'Authorization': `Basic ${Buffer.from(`api:${this.apiKey}`).toString('base64')}`\n        }\n      });\n\n      if (!response.ok) {\n        return {\n          verified: false,\n          status: 'failed'\n        };\n      }\n\n      const data = await response.json();\n      const domainData = data.domain;\n\n      return {\n        verified: domainData.state === 'active',\n        spfRecord: domainData.receiving_dns_records?.find((r: any) => r.record_type === 'TXT' && r.name.includes('spf'))?.value,\n        dkimRecord: domainData.sending_dns_records?.find((r: any) => r.record_type === 'TXT' && r.name.includes('dkim'))?.value,\n        status: domainData.state === 'active' ? 'verified' : 'pending'\n      };\n\n    } catch (error) {\n      logger.error('Error verifying Mailgun domain:', error);\n      return {\n        verified: false,\n        status: 'failed'\n      };\n    }\n  }\n\n  async setupWebhook(url: string): Promise<void> {\n    try {\n      if (!this.validateConfig()) {\n        throw new Error('Mailgun configuration is incomplete');\n      }\n\n      // Set up webhooks for various events\n      const events = ['delivered', 'bounced', 'complained', 'unsubscribed', 'clicked', 'opened'];\n      \n      for (const event of events) {\n        const formData = new FormData();\n        formData.append('url', `${url}?event=${event}`);\n\n        const response = await fetch(`${this.baseUrl}/domains/${this.domain}/webhooks/${event}`, {\n          method: 'POST',\n          headers: {\n            'Authorization': `Basic ${Buffer.from(`api:${this.apiKey}`).toString('base64')}`\n          },\n          body: formData\n        });\n\n        if (!response.ok) {\n          logger.warn(`Failed to setup ${event} webhook:`, { status: response.status });\n        } else {\n          logger.info(`Mailgun ${event} webhook configured successfully`);\n        }\n      }\n\n    } catch (error) {\n      logger.error('Error setting up Mailgun webhooks:', error);\n      throw error;\n    }\n  }\n}"],"names":["MailgunEmailProvider","BaseEmailProvider","constructor","config","name","apiKey","domain","region","trackingDomain","baseUrl","sendEmail","options","validateEmails","to","success","error","message","code","validateConfig","recipients","Array","isArray","join","sanitizedHtml","sanitizeContent","html","htmlWithUnsubscribe","addUnsubscribeLink","plainText","text","generatePlainText","formData","FormData","append","fromName","from","subject","replyTo","metadata","Object","entries","forEach","key","value","String","attachments","length","attachment","index","blob","Blob","content","type","contentType","filename","response","fetch","method","headers","Buffer","toString","body","responseData","json","ok","logger","status","statusText","info","messageId","id","Error","getStats","period","endDate","end","Date","startDate","start","now","toISOString","split","warn","data","stats","sent","total","delivered","bounced","dropped","opened","clicked","unsubscribed","complained","verifyDomain","verified","domainData","state","spfRecord","receiving_dns_records","find","r","record_type","includes","dkimRecord","sending_dns_records","setupWebhook","url","events","event"],"mappings":"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"}