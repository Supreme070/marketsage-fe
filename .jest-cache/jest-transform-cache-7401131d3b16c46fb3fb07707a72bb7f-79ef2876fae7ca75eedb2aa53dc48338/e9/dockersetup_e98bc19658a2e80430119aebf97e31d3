c90643f5e2aa610f36473a866e845f15
/**
 * Docker-Specific Setup for MCP Integration Tests
 * 
 * Additional setup steps specifically for Docker environments.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    // Export setup functions
    default: function() {
        return _default;
    },
    dockerPostTestCleanup: function() {
        return dockerPostTestCleanup;
    },
    dockerPreTestSetup: function() {
        return dockerPreTestSetup;
    }
});
const _child_process = require("child_process");
async function dockerPreTestSetup() {
    if (process.env.IS_DOCKER_ENV !== 'true') {
        return; // Skip if not in Docker
    }
    console.log('üê≥ Docker Pre-Test Setup');
    console.log('========================');
    try {
        // Step 1: Verify Docker container health
        console.log('üè• Step 1: Checking container health...');
        // Check available memory
        try {
            const memInfo = (0, _child_process.execSync)('cat /proc/meminfo | grep MemAvailable', {
                encoding: 'utf8'
            });
            const availableMemory = parseInt(memInfo.split(':')[1].trim().split(' ')[0]);
            const availableMemoryMB = Math.round(availableMemory / 1024);
            console.log(`   Available memory: ${availableMemoryMB}MB`);
            if (availableMemoryMB < 100) {
                console.warn('‚ö†Ô∏è  Low memory detected - tests may run slower');
            }
        } catch (error) {
            console.log('   Could not check memory (not critical)');
        }
        // Check disk space
        try {
            const diskInfo = (0, _child_process.execSync)('df -h /', {
                encoding: 'utf8'
            });
            const lines = diskInfo.split('\n');
            if (lines.length > 1) {
                const diskLine = lines[1].split(/\s+/);
                console.log(`   Available disk space: ${diskLine[3]}`);
            }
        } catch (error) {
            console.log('   Could not check disk space (not critical)');
        }
        console.log('‚úÖ Container health check completed');
        // Step 2: Network connectivity test
        console.log('üåê Step 2: Testing network connectivity...');
        // Test database connectivity (already done in global setup, but verify again)
        const dbHost = process.env.DATABASE_URL?.includes('marketsage-db') ? 'marketsage-db' : 'localhost';
        console.log(`   Database host: ${dbHost}`);
        // Verify DNS resolution works
        try {
            (0, _child_process.execSync)(`nslookup ${dbHost}`, {
                stdio: 'pipe',
                timeout: 5000
            });
            console.log(`   DNS resolution for ${dbHost}: ‚úÖ`);
        } catch (error) {
            console.log(`   DNS resolution for ${dbHost}: ‚ö†Ô∏è  (may still work)`);
        }
        console.log('‚úÖ Network connectivity verified');
        // Step 3: Docker-specific environment checks
        console.log('üîß Step 3: Docker environment verification...');
        console.log(`   Container ID: ${process.env.HOSTNAME || 'unknown'}`);
        console.log(`   Working directory: ${process.cwd()}`);
        console.log(`   User: ${process.env.USER || process.env.USERNAME || 'unknown'}`);
        // Check if we're running as root (common in Docker)
        try {
            const userId = (0, _child_process.execSync)('id -u', {
                encoding: 'utf8'
            }).trim();
            console.log(`   User ID: ${userId}`);
        } catch (error) {
            console.log('   Could not determine user ID');
        }
        console.log('‚úÖ Docker environment verified');
        // Step 4: Container resource optimization
        console.log('‚ö° Step 4: Container resource optimization...');
        // Set Docker-specific timeouts
        process.env.DATABASE_TIMEOUT = '45000'; // 45 seconds for Docker
        process.env.MCP_TIMEOUT = '15000'; // 15 seconds for Docker
        // Adjust Node.js settings for container environment
        if (!process.env.NODE_OPTIONS) {
            process.env.NODE_OPTIONS = '--max-old-space-size=1024'; // Limit memory to 1GB
        }
        console.log('   Extended timeouts for Docker environment');
        console.log('   Optimized memory settings');
        console.log('‚úÖ Resource optimization completed');
        console.log('\nüéâ Docker Pre-Test Setup Complete!');
    } catch (error) {
        console.error('üí• Docker setup error:', error);
        // Don't throw - Docker setup issues shouldn't prevent tests from running
        console.warn('‚ö†Ô∏è  Docker setup had issues but continuing with tests');
    }
}
async function dockerPostTestCleanup() {
    if (process.env.IS_DOCKER_ENV !== 'true') {
        return; // Skip if not in Docker
    }
    console.log('üê≥ Docker Post-Test Cleanup');
    console.log('===========================');
    try {
        // Force garbage collection in Docker environment
        if (global.gc) {
            global.gc();
            console.log('‚úÖ Garbage collection triggered');
        }
        // Clear Node.js caches
        if (require.cache) {
            // Don't clear everything, just test-specific modules
            Object.keys(require.cache).forEach((key)=>{
                if (key.includes('__tests__') || key.includes('test')) {
                    delete require.cache[key];
                }
            });
            console.log('‚úÖ Test module cache cleared');
        }
        // Log final memory usage if available
        try {
            const memUsage = process.memoryUsage();
            console.log(`   Memory usage: RSS=${Math.round(memUsage.rss / 1024 / 1024)}MB, Heap=${Math.round(memUsage.heapUsed / 1024 / 1024)}MB`);
        } catch (error) {
            console.log('   Could not get memory usage');
        }
        console.log('‚úÖ Docker cleanup completed');
    } catch (error) {
        console.warn('‚ö†Ô∏è  Docker cleanup had issues:', error);
    // Don't throw - cleanup issues shouldn't fail tests
    }
}
const _default = {
    dockerPreTestSetup,
    dockerPostTestCleanup
};

//# sourceMappingURL=data:application/json;base64,