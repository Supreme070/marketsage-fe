{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/__tests__/integration/mcp/docker-setup.ts"],"sourcesContent":["/**\n * Docker-Specific Setup for MCP Integration Tests\n * \n * Additional setup steps specifically for Docker environments.\n */\n\nimport { execSync } from 'child_process';\n\n/**\n * Docker-specific setup that runs before each test suite in Docker environment\n */\nexport async function dockerPreTestSetup(): Promise<void> {\n  if (process.env.IS_DOCKER_ENV !== 'true') {\n    return; // Skip if not in Docker\n  }\n\n  console.log('üê≥ Docker Pre-Test Setup');\n  console.log('========================');\n\n  try {\n    // Step 1: Verify Docker container health\n    console.log('üè• Step 1: Checking container health...');\n    \n    // Check available memory\n    try {\n      const memInfo = execSync('cat /proc/meminfo | grep MemAvailable', { encoding: 'utf8' });\n      const availableMemory = parseInt(memInfo.split(':')[1].trim().split(' ')[0]);\n      const availableMemoryMB = Math.round(availableMemory / 1024);\n      \n      console.log(`   Available memory: ${availableMemoryMB}MB`);\n      \n      if (availableMemoryMB < 100) {\n        console.warn('‚ö†Ô∏è  Low memory detected - tests may run slower');\n      }\n    } catch (error) {\n      console.log('   Could not check memory (not critical)');\n    }\n\n    // Check disk space\n    try {\n      const diskInfo = execSync('df -h /', { encoding: 'utf8' });\n      const lines = diskInfo.split('\\n');\n      if (lines.length > 1) {\n        const diskLine = lines[1].split(/\\s+/);\n        console.log(`   Available disk space: ${diskLine[3]}`);\n      }\n    } catch (error) {\n      console.log('   Could not check disk space (not critical)');\n    }\n\n    console.log('‚úÖ Container health check completed');\n\n    // Step 2: Network connectivity test\n    console.log('üåê Step 2: Testing network connectivity...');\n    \n    // Test database connectivity (already done in global setup, but verify again)\n    const dbHost = process.env.DATABASE_URL?.includes('marketsage-db') ? 'marketsage-db' : 'localhost';\n    console.log(`   Database host: ${dbHost}`);\n    \n    // Verify DNS resolution works\n    try {\n      execSync(`nslookup ${dbHost}`, { stdio: 'pipe', timeout: 5000 });\n      console.log(`   DNS resolution for ${dbHost}: ‚úÖ`);\n    } catch (error) {\n      console.log(`   DNS resolution for ${dbHost}: ‚ö†Ô∏è  (may still work)`);\n    }\n\n    console.log('‚úÖ Network connectivity verified');\n\n    // Step 3: Docker-specific environment checks\n    console.log('üîß Step 3: Docker environment verification...');\n    \n    console.log(`   Container ID: ${process.env.HOSTNAME || 'unknown'}`);\n    console.log(`   Working directory: ${process.cwd()}`);\n    console.log(`   User: ${process.env.USER || process.env.USERNAME || 'unknown'}`);\n    \n    // Check if we're running as root (common in Docker)\n    try {\n      const userId = execSync('id -u', { encoding: 'utf8' }).trim();\n      console.log(`   User ID: ${userId}`);\n    } catch (error) {\n      console.log('   Could not determine user ID');\n    }\n\n    console.log('‚úÖ Docker environment verified');\n\n    // Step 4: Container resource optimization\n    console.log('‚ö° Step 4: Container resource optimization...');\n    \n    // Set Docker-specific timeouts\n    process.env.DATABASE_TIMEOUT = '45000'; // 45 seconds for Docker\n    process.env.MCP_TIMEOUT = '15000';      // 15 seconds for Docker\n    \n    // Adjust Node.js settings for container environment\n    if (!process.env.NODE_OPTIONS) {\n      process.env.NODE_OPTIONS = '--max-old-space-size=1024'; // Limit memory to 1GB\n    }\n    \n    console.log('   Extended timeouts for Docker environment');\n    console.log('   Optimized memory settings');\n    console.log('‚úÖ Resource optimization completed');\n\n    console.log('\\nüéâ Docker Pre-Test Setup Complete!');\n\n  } catch (error) {\n    console.error('üí• Docker setup error:', error);\n    // Don't throw - Docker setup issues shouldn't prevent tests from running\n    console.warn('‚ö†Ô∏è  Docker setup had issues but continuing with tests');\n  }\n}\n\n/**\n * Docker-specific cleanup that runs after each test suite\n */\nexport async function dockerPostTestCleanup(): Promise<void> {\n  if (process.env.IS_DOCKER_ENV !== 'true') {\n    return; // Skip if not in Docker\n  }\n\n  console.log('üê≥ Docker Post-Test Cleanup');\n  console.log('===========================');\n\n  try {\n    // Force garbage collection in Docker environment\n    if (global.gc) {\n      global.gc();\n      console.log('‚úÖ Garbage collection triggered');\n    }\n\n    // Clear Node.js caches\n    if (require.cache) {\n      // Don't clear everything, just test-specific modules\n      Object.keys(require.cache).forEach(key => {\n        if (key.includes('__tests__') || key.includes('test')) {\n          delete require.cache[key];\n        }\n      });\n      console.log('‚úÖ Test module cache cleared');\n    }\n\n    // Log final memory usage if available\n    try {\n      const memUsage = process.memoryUsage();\n      console.log(`   Memory usage: RSS=${Math.round(memUsage.rss / 1024 / 1024)}MB, Heap=${Math.round(memUsage.heapUsed / 1024 / 1024)}MB`);\n    } catch (error) {\n      console.log('   Could not get memory usage');\n    }\n\n    console.log('‚úÖ Docker cleanup completed');\n\n  } catch (error) {\n    console.warn('‚ö†Ô∏è  Docker cleanup had issues:', error);\n    // Don't throw - cleanup issues shouldn't fail tests\n  }\n}\n\n// Export setup functions\nexport default {\n  dockerPreTestSetup,\n  dockerPostTestCleanup\n};"],"names":["dockerPostTestCleanup","dockerPreTestSetup","process","env","IS_DOCKER_ENV","console","log","memInfo","execSync","encoding","availableMemory","parseInt","split","trim","availableMemoryMB","Math","round","warn","error","diskInfo","lines","length","diskLine","dbHost","DATABASE_URL","includes","stdio","timeout","HOSTNAME","cwd","USER","USERNAME","userId","DATABASE_TIMEOUT","MCP_TIMEOUT","NODE_OPTIONS","global","gc","require","cache","Object","keys","forEach","key","memUsage","memoryUsage","rss","heapUsed"],"mappings":"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"}