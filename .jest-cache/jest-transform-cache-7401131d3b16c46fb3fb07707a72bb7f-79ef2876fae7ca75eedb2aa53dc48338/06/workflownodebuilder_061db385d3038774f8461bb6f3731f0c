6332e3421b164900eb16f538cb3180a8
/**
 * Advanced Workflow Node Builder
 * =============================
 * AI-powered system for creating and managing complex workflow nodes
 * Enables natural language workflow creation with intelligent node connections
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    WorkflowNodeBuilder: function() {
        return WorkflowNodeBuilder;
    },
    WorkflowNodeType: function() {
        return WorkflowNodeType;
    },
    workflowNodeBuilder: function() {
        return workflowNodeBuilder;
    }
});
const _logger = require("../logger");
const _transactionmanager = require("../security/transaction-manager");
const _authorization = require("../security/authorization");
var WorkflowNodeType = /*#__PURE__*/ function(WorkflowNodeType) {
    // Trigger nodes
    WorkflowNodeType["FORM_SUBMISSION"] = "form_submission";
    WorkflowNodeType["TIME_TRIGGER"] = "time_trigger";
    WorkflowNodeType["WEBHOOK"] = "webhook";
    WorkflowNodeType["EMAIL_RECEIVED"] = "email_received";
    WorkflowNodeType["CONTACT_CREATED"] = "contact_created";
    WorkflowNodeType["CONTACT_UPDATED"] = "contact_updated";
    WorkflowNodeType["CAMPAIGN_COMPLETED"] = "campaign_completed";
    // Action nodes
    WorkflowNodeType["SEND_EMAIL"] = "send_email";
    WorkflowNodeType["SEND_SMS"] = "send_sms";
    WorkflowNodeType["SEND_WHATSAPP"] = "send_whatsapp";
    WorkflowNodeType["UPDATE_CONTACT"] = "update_contact";
    WorkflowNodeType["ADD_TO_LIST"] = "add_to_list";
    WorkflowNodeType["REMOVE_FROM_LIST"] = "remove_from_list";
    WorkflowNodeType["CREATE_TASK"] = "create_task";
    WorkflowNodeType["SEND_NOTIFICATION"] = "send_notification";
    WorkflowNodeType["API_CALL"] = "api_call";
    // Logic nodes
    WorkflowNodeType["CONDITION"] = "condition";
    WorkflowNodeType["DELAY"] = "delay";
    WorkflowNodeType["SPLIT"] = "split";
    WorkflowNodeType["MERGE"] = "merge";
    WorkflowNodeType["LOOP"] = "loop";
    WorkflowNodeType["FILTER"] = "filter";
    // Data nodes
    WorkflowNodeType["DATA_TRANSFORM"] = "data_transform";
    WorkflowNodeType["CALCULATE"] = "calculate";
    WorkflowNodeType["LOOKUP"] = "lookup";
    WorkflowNodeType["STORE_DATA"] = "store_data";
    // Integration nodes
    WorkflowNodeType["ZAPIER"] = "zapier";
    WorkflowNodeType["SALESFORCE"] = "salesforce";
    WorkflowNodeType["HUBSPOT"] = "hubspot";
    WorkflowNodeType["SLACK"] = "slack";
    WorkflowNodeType["TEAMS"] = "teams";
    // AI nodes
    WorkflowNodeType["AI_ANALYSIS"] = "ai_analysis";
    WorkflowNodeType["AI_GENERATE_CONTENT"] = "ai_generate_content";
    WorkflowNodeType["AI_SENTIMENT"] = "ai_sentiment";
    WorkflowNodeType["AI_CLASSIFICATION"] = "ai_classification";
    return WorkflowNodeType;
}({});
class WorkflowNodeBuilder {
    constructor(){
        this.nodeTemplates = new Map();
        this.predefinedTemplates = [];
        this.initializeNodeTemplates();
        this.initializePredefinedTemplates();
    }
    /**
   * Build workflow from natural language description
   */ async buildWorkflowFromDescription(request, userId, userRole, organizationId) {
        try {
            // Check permissions
            const canCreateWorkflows = _authorization.AuthorizationService.hasPermission(userRole, _authorization.Permission.CREATE_WORKFLOW);
            if (!canCreateWorkflows) {
                return {
                    success: false,
                    nodes: [],
                    connections: [],
                    variables: [],
                    estimatedComplexity: 'simple',
                    estimatedExecutionTime: 0,
                    suggestions: [],
                    warnings: [],
                    errors: [
                        'Insufficient permissions to create workflows'
                    ]
                };
            }
            _logger.logger.info('Building workflow from description', {
                userId,
                description: request.description.substring(0, 100),
                trigger: request.trigger,
                actionCount: request.actions.length
            });
            // Parse natural language description
            const parsedWorkflow = await this.parseWorkflowDescription(request);
            // Build nodes
            const nodes = await this.buildNodes(parsedWorkflow, request.options);
            // Create connections
            const connections = this.createConnections(nodes, parsedWorkflow, request.options);
            // Extract variables
            const variables = this.extractVariables(parsedWorkflow);
            // Calculate complexity and execution time
            const complexity = this.calculateComplexity(nodes, connections);
            const estimatedTime = this.calculateExecutionTime(nodes);
            // Generate suggestions and warnings
            const suggestions = this.generateSuggestions(nodes, connections);
            const warnings = this.generateWarnings(nodes, connections);
            // Create workflow in database if not preview
            let workflowId;
            if (!request.options.generatePreview) {
                workflowId = await this.createWorkflowInDatabase(request, nodes, connections, variables, userId, organizationId);
            }
            return {
                success: true,
                workflowId,
                nodes,
                connections,
                variables,
                estimatedComplexity: complexity,
                estimatedExecutionTime: estimatedTime,
                suggestions,
                warnings,
                errors: []
            };
        } catch (error) {
            _logger.logger.error('Workflow building failed', {
                error: error instanceof Error ? error.message : String(error),
                userId,
                description: request.description.substring(0, 100)
            });
            return {
                success: false,
                nodes: [],
                connections: [],
                variables: [],
                estimatedComplexity: 'simple',
                estimatedExecutionTime: 0,
                suggestions: [],
                warnings: [],
                errors: [
                    error instanceof Error ? error.message : 'Unknown error'
                ]
            };
        }
    }
    /**
   * Create workflow node from natural language
   */ async createNodeFromDescription(description, nodeType, position) {
        const parsedNode = this.parseNodeDescription(description, nodeType);
        const node = {
            id: `node_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
            type: parsedNode.type,
            name: parsedNode.name,
            description: parsedNode.description,
            position: position || {
                x: 0,
                y: 0
            },
            config: parsedNode.config,
            connections: {
                inputs: [],
                outputs: []
            },
            conditions: parsedNode.conditions,
            metadata: {
                createdAt: new Date(),
                updatedAt: new Date(),
                executionCount: 0,
                averageExecutionTime: 0
            }
        };
        return node;
    }
    /**
   * Get workflow templates by category
   */ getWorkflowTemplates(category) {
        if (category) {
            return this.predefinedTemplates.filter((template)=>template.category.toLowerCase() === category.toLowerCase());
        }
        return this.predefinedTemplates;
    }
    /**
   * Clone and customize template
   */ async customizeTemplate(templateId, customizations, userId, organizationId) {
        const template = this.predefinedTemplates.find((t)=>t.id === templateId);
        if (!template) {
            return {
                success: false,
                nodes: [],
                connections: [],
                variables: [],
                estimatedComplexity: 'simple',
                estimatedExecutionTime: 0,
                suggestions: [],
                warnings: [],
                errors: [
                    'Template not found'
                ]
            };
        }
        // Clone and apply customizations
        const customizedNodes = template.nodes.map((node)=>({
                ...node,
                id: `node_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
                metadata: {
                    ...node.metadata,
                    createdAt: new Date(),
                    updatedAt: new Date()
                }
            }));
        // Update connections with new node IDs
        const nodeIdMap = new Map();
        template.nodes.forEach((oldNode, index)=>{
            nodeIdMap.set(oldNode.id, customizedNodes[index].id);
        });
        const customizedConnections = template.connections.map((conn)=>({
                ...conn,
                id: `conn_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
                sourceNodeId: nodeIdMap.get(conn.sourceNodeId),
                targetNodeId: nodeIdMap.get(conn.targetNodeId)
            }));
        const workflowId = await this.createWorkflowInDatabase({
            description: customizations.description || template.description,
            trigger: 'template',
            actions: [],
            options: {
                generatePreview: false,
                autoConnect: true,
                optimizeForPerformance: true
            }
        }, customizedNodes, customizedConnections, template.variables, userId, organizationId);
        return {
            success: true,
            workflowId,
            nodes: customizedNodes,
            connections: customizedConnections,
            variables: template.variables,
            estimatedComplexity: template.complexity,
            estimatedExecutionTime: template.estimatedExecutionTime,
            suggestions: [],
            warnings: [],
            errors: []
        };
    }
    /**
   * Validate workflow structure
   */ validateWorkflow(nodes, connections) {
        const errors = [];
        const warnings = [];
        // Check for trigger nodes
        const triggerNodes = nodes.filter((node)=>this.isTriggerNode(node.type));
        if (triggerNodes.length === 0) {
            errors.push('Workflow must have at least one trigger node');
        }
        if (triggerNodes.length > 1) {
            warnings.push('Multiple trigger nodes detected - workflow may have unexpected behavior');
        }
        // Check for orphaned nodes
        const connectedNodeIds = new Set([
            ...connections.map((c)=>c.sourceNodeId),
            ...connections.map((c)=>c.targetNodeId)
        ]);
        const orphanedNodes = nodes.filter((node)=>!connectedNodeIds.has(node.id) && !this.isTriggerNode(node.type));
        if (orphanedNodes.length > 0) {
            warnings.push(`${orphanedNodes.length} nodes are not connected to the workflow`);
        }
        // Check for circular dependencies
        if (this.hasCircularDependencies(connections)) {
            errors.push('Workflow contains circular dependencies');
        }
        // Check for unreachable nodes
        const reachableNodes = this.findReachableNodes(nodes, connections);
        if (reachableNodes.size < nodes.length) {
            warnings.push(`${nodes.length - reachableNodes.size} nodes are unreachable from triggers`);
        }
        return {
            isValid: errors.length === 0,
            errors,
            warnings
        };
    }
    /**
   * Optimize workflow for performance
   */ optimizeWorkflow(nodes, connections) {
        // Remove unnecessary delay nodes
        const optimizedNodes = nodes.filter((node)=>{
            if (node.type === "delay") {
                const delayMs = node.config.delayMs || 0;
                return delayMs > 1000; // Remove delays less than 1 second
            }
            return true;
        });
        // Merge sequential condition nodes
        // Group parallel actions
        // Optimize API call batching
        return {
            nodes: optimizedNodes,
            connections
        };
    }
    // Private methods
    async parseWorkflowDescription(request) {
        const description = request.description.toLowerCase();
        return {
            triggerType: this.extractTriggerType(request.trigger),
            actionTypes: request.actions.map((action)=>this.extractActionType(action)),
            conditions: request.conditions?.map((condition)=>this.parseCondition(condition)) || [],
            integrations: request.integrations || [],
            variables: request.variables || {}
        };
    }
    extractTriggerType(trigger) {
        const lowerTrigger = trigger.toLowerCase();
        if (lowerTrigger.includes('form') || lowerTrigger.includes('submit')) {
            return "form_submission";
        }
        if (lowerTrigger.includes('time') || lowerTrigger.includes('schedule')) {
            return "time_trigger";
        }
        if (lowerTrigger.includes('webhook') || lowerTrigger.includes('api')) {
            return "webhook";
        }
        if (lowerTrigger.includes('email') && lowerTrigger.includes('receive')) {
            return "email_received";
        }
        if (lowerTrigger.includes('contact') && lowerTrigger.includes('create')) {
            return "contact_created";
        }
        if (lowerTrigger.includes('contact') && lowerTrigger.includes('update')) {
            return "contact_updated";
        }
        return "form_submission"; // Default
    }
    extractActionType(action) {
        const lowerAction = action.toLowerCase();
        if (lowerAction.includes('email')) return "send_email";
        if (lowerAction.includes('sms')) return "send_sms";
        if (lowerAction.includes('whatsapp')) return "send_whatsapp";
        if (lowerAction.includes('update contact')) return "update_contact";
        if (lowerAction.includes('add to list')) return "add_to_list";
        if (lowerAction.includes('create task')) return "create_task";
        if (lowerAction.includes('notification')) return "send_notification";
        if (lowerAction.includes('api') || lowerAction.includes('webhook')) return "api_call";
        if (lowerAction.includes('delay') || lowerAction.includes('wait')) return "delay";
        return "send_email"; // Default
    }
    parseCondition(condition) {
        // Simple parsing - in production, use more sophisticated NLP
        return {
            field: 'status',
            operator: 'equals',
            value: 'active'
        };
    }
    parseNodeDescription(description, nodeType) {
        const lowerDesc = description.toLowerCase();
        // Extract node type if not provided
        const type = nodeType || this.extractActionType(description);
        // Extract configuration based on type
        let config = {
            enabled: true,
            retryAttempts: 3,
            timeoutMs: 30000
        };
        // Type-specific config parsing
        switch(type){
            case "send_email":
                config = {
                    ...config,
                    templateId: null,
                    subject: this.extractQuotedText(description, 'subject'),
                    fromEmail: this.extractQuotedText(description, 'from'),
                    personalizeContent: true
                };
                break;
            case "delay":
                const delayMatch = description.match(/(\d+)\s*(minute|hour|day|second)/);
                const delayMs = delayMatch ? this.convertToMs(Number.parseInt(delayMatch[1]), delayMatch[2]) : 60000;
                config = {
                    ...config,
                    delayMs
                };
                break;
            case "condition":
                config = {
                    ...config,
                    conditions: [
                        this.parseCondition(description)
                    ]
                };
                break;
        }
        return {
            type,
            name: this.generateNodeName(type, description),
            description,
            config,
            conditions: type === "condition" ? [
                this.parseCondition(description)
            ] : undefined
        };
    }
    buildNodes(parsedWorkflow, options) {
        const nodes = [];
        // Create trigger node
        const triggerNode = this.createNodeFromType(parsedWorkflow.triggerType, {
            x: 100,
            y: 100
        });
        nodes.push(triggerNode);
        // Create action nodes
        const yPos = 200;
        parsedWorkflow.actionTypes.forEach((actionType, index)=>{
            const actionNode = this.createNodeFromType(actionType, {
                x: 100 + index * 200,
                y: yPos
            });
            nodes.push(actionNode);
        });
        // Add condition nodes if specified
        parsedWorkflow.conditions.forEach((condition, index)=>{
            const conditionNode = this.createNodeFromType("condition", {
                x: 300,
                y: 150 + index * 100
            });
            conditionNode.conditions = [
                condition
            ];
            nodes.push(conditionNode);
        });
        return nodes;
    }
    createNodeFromType(type, position) {
        const template = this.nodeTemplates.get(type) || {};
        return {
            id: `node_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
            type,
            name: template.name || this.getDefaultNodeName(type),
            description: template.description,
            position,
            config: template.config || {
                enabled: true,
                retryAttempts: 3,
                timeoutMs: 30000
            },
            connections: {
                inputs: [],
                outputs: []
            },
            conditions: template.conditions,
            metadata: {
                createdAt: new Date(),
                updatedAt: new Date(),
                executionCount: 0,
                averageExecutionTime: this.getEstimatedExecutionTime(type)
            }
        };
    }
    createConnections(nodes, parsedWorkflow, options) {
        const connections = [];
        if (!options.autoConnect) return connections;
        // Simple linear connection for now
        for(let i = 0; i < nodes.length - 1; i++){
            const connection = {
                id: `conn_${Date.now()}_${i}`,
                sourceNodeId: nodes[i].id,
                targetNodeId: nodes[i + 1].id,
                sourcePort: 'output',
                targetPort: 'input'
            };
            connections.push(connection);
        }
        return connections;
    }
    extractVariables(parsedWorkflow) {
        // Extract variables from the workflow description
        return [
            {
                name: 'contactEmail',
                type: 'string',
                description: 'Email address of the contact',
                required: true
            },
            {
                name: 'contactName',
                type: 'string',
                description: 'Name of the contact',
                required: false
            }
        ];
    }
    calculateComplexity(nodes, connections) {
        const nodeCount = nodes.length;
        const connectionCount = connections.length;
        const conditionNodes = nodes.filter((n)=>n.type === "condition").length;
        const integrationNodes = nodes.filter((n)=>this.isIntegrationNode(n.type)).length;
        if (nodeCount <= 3 && conditionNodes === 0) return 'simple';
        if (nodeCount <= 7 && conditionNodes <= 2) return 'moderate';
        if (nodeCount <= 15 && integrationNodes <= 3) return 'complex';
        return 'advanced';
    }
    calculateExecutionTime(nodes) {
        return nodes.reduce((total, node)=>total + node.metadata.averageExecutionTime, 0);
    }
    generateSuggestions(nodes, connections) {
        const suggestions = [];
        if (nodes.length > 10) {
            suggestions.push('Consider breaking this workflow into smaller, more manageable workflows');
        }
        const delayNodes = nodes.filter((n)=>n.type === "delay");
        if (delayNodes.length > 3) {
            suggestions.push('Multiple delay nodes detected - consider optimizing timing');
        }
        if (!nodes.some((n)=>n.type === "condition")) {
            suggestions.push('Add conditional logic to make the workflow more intelligent');
        }
        return suggestions;
    }
    generateWarnings(nodes, connections) {
        const warnings = [];
        const apiNodes = nodes.filter((n)=>n.type === "api_call");
        if (apiNodes.length > 5) {
            warnings.push('High number of API calls may impact performance');
        }
        return warnings;
    }
    async createWorkflowInDatabase(request, nodes, connections, variables, userId, organizationId) {
        return await _transactionmanager.TransactionManager.startTransaction(userId, 'create_workflow', 'Create AI-generated workflow', 30000);
    }
    // Helper methods
    initializeNodeTemplates() {
        // Initialize common node templates
        this.nodeTemplates.set("send_email", {
            name: 'Send Email',
            description: 'Send an email to contacts',
            config: {
                enabled: true,
                retryAttempts: 3,
                timeoutMs: 30000,
                templateId: null,
                personalizeContent: true
            }
        });
    // Add more templates...
    }
    initializePredefinedTemplates() {
        // Welcome Email Sequence
        this.predefinedTemplates.push({
            id: 'welcome_sequence',
            name: 'Welcome Email Sequence',
            description: 'Automated welcome sequence for new contacts',
            category: 'Onboarding',
            nodes: [],
            connections: [],
            variables: [],
            estimatedExecutionTime: 5000,
            complexity: 'moderate'
        });
    // Add more templates...
    }
    isTriggerNode(type) {
        return [
            "form_submission",
            "time_trigger",
            "webhook",
            "email_received",
            "contact_created",
            "contact_updated",
            "campaign_completed"
        ].includes(type);
    }
    isIntegrationNode(type) {
        return [
            "zapier",
            "salesforce",
            "hubspot",
            "slack",
            "teams"
        ].includes(type);
    }
    hasCircularDependencies(connections) {
        // Simple cycle detection
        const graph = new Map();
        connections.forEach((conn)=>{
            if (!graph.has(conn.sourceNodeId)) {
                graph.set(conn.sourceNodeId, []);
            }
            graph.get(conn.sourceNodeId).push(conn.targetNodeId);
        });
        const visited = new Set();
        const recursionStack = new Set();
        const hasCycle = (nodeId)=>{
            if (recursionStack.has(nodeId)) return true;
            if (visited.has(nodeId)) return false;
            visited.add(nodeId);
            recursionStack.add(nodeId);
            const neighbors = graph.get(nodeId) || [];
            for (const neighbor of neighbors){
                if (hasCycle(neighbor)) return true;
            }
            recursionStack.delete(nodeId);
            return false;
        };
        for (const nodeId of graph.keys()){
            if (hasCycle(nodeId)) return true;
        }
        return false;
    }
    findReachableNodes(nodes, connections) {
        const reachable = new Set();
        const triggerNodes = nodes.filter((node)=>this.isTriggerNode(node.type));
        const graph = new Map();
        connections.forEach((conn)=>{
            if (!graph.has(conn.sourceNodeId)) {
                graph.set(conn.sourceNodeId, []);
            }
            graph.get(conn.sourceNodeId).push(conn.targetNodeId);
        });
        const dfs = (nodeId)=>{
            if (reachable.has(nodeId)) return;
            reachable.add(nodeId);
            const neighbors = graph.get(nodeId) || [];
            neighbors.forEach((neighbor)=>dfs(neighbor));
        };
        triggerNodes.forEach((trigger)=>dfs(trigger.id));
        return reachable;
    }
    extractQuotedText(text, keyword) {
        const regex = new RegExp(`${keyword}\\s*[:"']([^"']+)["']`, 'i');
        const match = text.match(regex);
        return match ? match[1] : null;
    }
    convertToMs(value, unit) {
        switch(unit.toLowerCase()){
            case 'second':
                return value * 1000;
            case 'minute':
                return value * 60 * 1000;
            case 'hour':
                return value * 60 * 60 * 1000;
            case 'day':
                return value * 24 * 60 * 60 * 1000;
            default:
                return value * 1000;
        }
    }
    generateNodeName(type, description) {
        const baseNames = {
            ["send_email"]: 'Send Email',
            ["send_sms"]: 'Send SMS',
            ["delay"]: 'Wait',
            ["condition"]: 'If/Then',
            ["update_contact"]: 'Update Contact'
        };
        return baseNames[type] || type.replace(/_/g, ' ').replace(/\b\w/g, (l)=>l.toUpperCase());
    }
    getDefaultNodeName(type) {
        return this.generateNodeName(type, '');
    }
    getEstimatedExecutionTime(type) {
        const times = {
            ["send_email"]: 2000,
            ["send_sms"]: 1000,
            ["update_contact"]: 500,
            ["condition"]: 100,
            ["api_call"]: 3000
        };
        return times[type] || 1000;
    }
}
const workflowNodeBuilder = new WorkflowNodeBuilder();

//# sourceMappingURL=data:application/json;base64,