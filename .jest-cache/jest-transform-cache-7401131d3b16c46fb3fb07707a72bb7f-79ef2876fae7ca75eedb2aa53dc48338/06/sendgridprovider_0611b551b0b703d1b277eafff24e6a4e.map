{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/lib/email-providers/sendgrid-provider.ts"],"sourcesContent":["import { BaseEmailProvider, type EmailResult, type EmailOptions, type EmailStats, type DomainVerification } from './base-provider';\nimport { logger } from '@/lib/logger';\n\ninterface SendGridConfig {\n  apiKey: string;\n  fromEmail?: string;\n  fromName?: string;\n  trackingDomain?: string;\n}\n\nexport class SendGridEmailProvider extends BaseEmailProvider {\n  name = 'SendGrid';\n  \n  private apiKey: string;\n  private defaultFromEmail?: string;\n  private defaultFromName?: string;\n  private trackingDomain?: string;\n  private baseUrl = 'https://api.sendgrid.com/v3';\n\n  constructor(config: SendGridConfig) {\n    super();\n    this.apiKey = config.apiKey;\n    this.defaultFromEmail = config.fromEmail;\n    this.defaultFromName = config.fromName;\n    this.trackingDomain = config.trackingDomain;\n  }\n\n  async sendEmail(options: EmailOptions): Promise<EmailResult> {\n    try {\n      // Validate emails\n      if (!this.validateEmails(options.to)) {\n        return {\n          success: false,\n          error: {\n            message: 'Invalid email address(es)',\n            code: 'INVALID_EMAIL'\n          }\n        };\n      }\n\n      if (!this.validateConfig()) {\n        return {\n          success: false,\n          error: {\n            message: 'SendGrid configuration is incomplete',\n            code: 'INVALID_CONFIG'\n          }\n        };\n      }\n\n      // Prepare recipients\n      const recipients = Array.isArray(options.to) \n        ? options.to.map(email => ({ email }))\n        : [{ email: options.to }];\n\n      // Sanitize content\n      const sanitizedHtml = this.sanitizeContent(options.html);\n      const htmlWithUnsubscribe = this.addUnsubscribeLink(sanitizedHtml, options.to.toString());\n      const plainText = options.text || this.generatePlainText(htmlWithUnsubscribe);\n\n      // Prepare email data\n      const emailData = {\n        personalizations: [{\n          to: recipients,\n          subject: options.subject,\n          ...(options.metadata && {\n            custom_args: options.metadata\n          })\n        }],\n        from: {\n          email: options.from || this.defaultFromEmail,\n          name: options.fromName || this.defaultFromName || 'MarketSage'\n        },\n        content: [\n          {\n            type: 'text/plain',\n            value: plainText\n          },\n          {\n            type: 'text/html',\n            value: htmlWithUnsubscribe\n          }\n        ],\n        tracking_settings: {\n          click_tracking: {\n            enable: true,\n            enable_text: true\n          },\n          open_tracking: {\n            enable: true,\n            substitution_tag: '%opentrack%'\n          },\n          subscription_tracking: {\n            enable: true\n          }\n        }\n      };\n\n      // Add reply-to if specified\n      if (options.replyTo) {\n        (emailData as any).reply_to = {\n          email: options.replyTo\n        };\n      }\n\n      // Add attachments\n      if (options.attachments && options.attachments.length > 0) {\n        (emailData as any).attachments = options.attachments.map(attachment => ({\n          content: Buffer.from(attachment.content).toString('base64'),\n          filename: attachment.filename,\n          type: attachment.contentType || 'application/octet-stream',\n          disposition: 'attachment'\n        }));\n      }\n\n      // Send email via SendGrid API\n      const response = await fetch(`${this.baseUrl}/mail/send`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(emailData)\n      });\n\n      // SendGrid returns empty body on success\n      if (!response.ok) {\n        const errorText = await response.text();\n        let errorData;\n        try {\n          errorData = JSON.parse(errorText);\n        } catch {\n          errorData = { message: errorText };\n        }\n\n        logger.error('SendGrid API error:', { \n          status: response.status, \n          statusText: response.statusText,\n          error: errorData \n        });\n        \n        return {\n          success: false,\n          error: {\n            message: errorData.errors?.[0]?.message || errorData.message || 'SendGrid API request failed',\n            code: 'SENDGRID_API_ERROR'\n          }\n        };\n      }\n\n      // Get message ID from response headers\n      const messageId = response.headers.get('x-message-id') || `sg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n      logger.info('Email sent successfully via SendGrid', {\n        messageId,\n        to: options.to,\n        subject: options.subject\n      });\n\n      return {\n        success: true,\n        messageId\n      };\n\n    } catch (error) {\n      logger.error('SendGrid sending error:', { error });\n      \n      return {\n        success: false,\n        error: {\n          message: error instanceof Error ? error.message : 'SendGrid sending failed',\n          code: 'SENDGRID_ERROR'\n        }\n      };\n    }\n  }\n\n  validateConfig(): boolean {\n    return !!(this.apiKey);\n  }\n\n  async getStats(period?: { start: Date; end: Date }): Promise<EmailStats> {\n    try {\n      if (!this.validateConfig()) {\n        return super.getStats(period);\n      }\n\n      const endDate = period?.end || new Date();\n      const startDate = period?.start || new Date(Date.now() - 30 * 24 * 60 * 60 * 1000); // 30 days ago\n\n      const response = await fetch(\n        `${this.baseUrl}/stats?` + \n        `start_date=${startDate.toISOString().split('T')[0]}&` +\n        `end_date=${endDate.toISOString().split('T')[0]}&` +\n        `aggregated_by=day`,\n        {\n          headers: {\n            'Authorization': `Bearer ${this.apiKey}`\n          }\n        }\n      );\n\n      if (!response.ok) {\n        logger.warn('Failed to fetch SendGrid stats:', { status: response.status });\n        return super.getStats(period);\n      }\n\n      const data = await response.json();\n      const stats = data[0]?.stats || [];\n\n      // Aggregate stats across all days\n      const totals = stats.reduce((acc: any, day: any) => {\n        const metrics = day.metrics;\n        return {\n          blocks: (acc.blocks || 0) + (metrics.blocks || 0),\n          bounce_drops: (acc.bounce_drops || 0) + (metrics.bounce_drops || 0),\n          bounces: (acc.bounces || 0) + (metrics.bounces || 0),\n          clicks: (acc.clicks || 0) + (metrics.clicks || 0),\n          deferred: (acc.deferred || 0) + (metrics.deferred || 0),\n          delivered: (acc.delivered || 0) + (metrics.delivered || 0),\n          invalid_emails: (acc.invalid_emails || 0) + (metrics.invalid_emails || 0),\n          opens: (acc.opens || 0) + (metrics.opens || 0),\n          processed: (acc.processed || 0) + (metrics.processed || 0),\n          requests: (acc.requests || 0) + (metrics.requests || 0),\n          spam_report_drops: (acc.spam_report_drops || 0) + (metrics.spam_report_drops || 0),\n          spam_reports: (acc.spam_reports || 0) + (metrics.spam_reports || 0),\n          unique_clicks: (acc.unique_clicks || 0) + (metrics.unique_clicks || 0),\n          unique_opens: (acc.unique_opens || 0) + (metrics.unique_opens || 0),\n          unsubscribe_drops: (acc.unsubscribe_drops || 0) + (metrics.unsubscribe_drops || 0),\n          unsubscribes: (acc.unsubscribes || 0) + (metrics.unsubscribes || 0)\n        };\n      }, {});\n\n      return {\n        sent: totals.requests || 0,\n        delivered: totals.delivered || 0,\n        bounced: (totals.bounces || 0) + (totals.blocks || 0),\n        opened: totals.unique_opens || 0,\n        clicked: totals.unique_clicks || 0,\n        unsubscribed: totals.unsubscribes || 0,\n        complained: totals.spam_reports || 0,\n      };\n\n    } catch (error) {\n      logger.error('Error fetching SendGrid stats:', error);\n      return super.getStats(period);\n    }\n  }\n\n  async verifyDomain(domain: string): Promise<DomainVerification> {\n    try {\n      if (!this.validateConfig()) {\n        return {\n          verified: false,\n          status: 'failed'\n        };\n      }\n\n      // SendGrid uses domain authentication\n      const response = await fetch(`${this.baseUrl}/whitelabel/domains`, {\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`\n        }\n      });\n\n      if (!response.ok) {\n        return {\n          verified: false,\n          status: 'failed'\n        };\n      }\n\n      const domains = await response.json();\n      const domainData = domains.find((d: any) => d.domain === domain);\n\n      if (!domainData) {\n        return {\n          verified: false,\n          status: 'failed'\n        };\n      }\n\n      return {\n        verified: domainData.valid,\n        status: domainData.valid ? 'verified' : 'pending'\n      };\n\n    } catch (error) {\n      logger.error('Error verifying SendGrid domain:', error);\n      return {\n        verified: false,\n        status: 'failed'\n      };\n    }\n  }\n\n  async setupWebhook(url: string): Promise<void> {\n    try {\n      if (!this.validateConfig()) {\n        throw new Error('SendGrid configuration is incomplete');\n      }\n\n      const webhookData = {\n        enabled: true,\n        url: url,\n        group_resubscribe: true,\n        delivered: true,\n        group_unsubscribe: true,\n        spam_report: true,\n        bounce: true,\n        deferred: true,\n        unsubscribe: true,\n        processed: true,\n        open: true,\n        click: true,\n        dropped: true\n      };\n\n      const response = await fetch(`${this.baseUrl}/user/webhooks/event/settings`, {\n        method: 'PATCH',\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(webhookData)\n      });\n\n      if (!response.ok) {\n        const error = await response.text();\n        throw new Error(`SendGrid webhook setup failed: ${error}`);\n      }\n\n      logger.info('SendGrid webhook configured successfully');\n\n    } catch (error) {\n      logger.error('Error setting up SendGrid webhooks:', error);\n      throw error;\n    }\n  }\n}"],"names":["SendGridEmailProvider","BaseEmailProvider","constructor","config","name","baseUrl","apiKey","defaultFromEmail","fromEmail","defaultFromName","fromName","trackingDomain","sendEmail","options","validateEmails","to","success","error","message","code","validateConfig","recipients","Array","isArray","map","email","sanitizedHtml","sanitizeContent","html","htmlWithUnsubscribe","addUnsubscribeLink","toString","plainText","text","generatePlainText","emailData","personalizations","subject","metadata","custom_args","from","content","type","value","tracking_settings","click_tracking","enable","enable_text","open_tracking","substitution_tag","subscription_tracking","replyTo","reply_to","attachments","length","attachment","Buffer","filename","contentType","disposition","response","fetch","method","headers","body","JSON","stringify","ok","errorText","errorData","parse","logger","status","statusText","errors","messageId","get","Date","now","Math","random","substr","info","Error","getStats","period","endDate","end","startDate","start","toISOString","split","warn","data","json","stats","totals","reduce","acc","day","metrics","blocks","bounce_drops","bounces","clicks","deferred","delivered","invalid_emails","opens","processed","requests","spam_report_drops","spam_reports","unique_clicks","unique_opens","unsubscribe_drops","unsubscribes","sent","bounced","opened","clicked","unsubscribed","complained","verifyDomain","domain","verified","domains","domainData","find","d","valid","setupWebhook","url","webhookData","enabled","group_resubscribe","group_unsubscribe","spam_report","bounce","unsubscribe","open","click","dropped"],"mappings":"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"}