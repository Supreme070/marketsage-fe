{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/mcp/types/mcp-types.ts"],"sourcesContent":["/**\n * MCP Types for MarketSage\n * \n * This file defines all TypeScript interfaces and types used by the MCP implementation.\n */\n\nimport { z } from 'zod';\n\n// ============================================================================\n// Authentication Types\n// ============================================================================\n\nexport interface MCPAuthContext {\n  userId: string;\n  organizationId: string;\n  role: 'USER' | 'ADMIN' | 'IT_ADMIN' | 'SUPER_ADMIN';\n  permissions: string[];\n  sessionId?: string;\n}\n\nexport interface MCPAuthResult {\n  success: boolean;\n  context?: MCPAuthContext;\n  error?: string;\n}\n\n// ============================================================================\n// Resource Types\n// ============================================================================\n\nexport interface MCPResource {\n  uri: string;\n  name: string;\n  description?: string;\n  mimeType?: string;\n}\n\nexport interface MCPResourceContent {\n  uri: string;\n  mimeType: string;\n  text?: string;\n  blob?: Uint8Array;\n}\n\n// ============================================================================\n// Tool Types\n// ============================================================================\n\nexport interface MCPTool {\n  name: string;\n  description: string;\n  inputSchema: z.ZodSchema<any>;\n}\n\nexport interface MCPToolResult {\n  content: Array<{\n    type: 'text' | 'image' | 'resource';\n    text?: string;\n    data?: string;\n    resource?: MCPResource;\n  }>;\n  isError?: boolean;\n}\n\n// ============================================================================\n// Customer Data Types\n// ============================================================================\n\nexport const CustomerQuerySchema = z.object({\n  id: z.string().optional(),\n  email: z.string().optional(),\n  phone: z.string().optional(),\n  organizationId: z.string().optional(),\n  limit: z.number().min(1).max(100).default(10),\n  offset: z.number().min(0).default(0),\n  includeSegments: z.boolean().default(false),\n  includePredictions: z.boolean().default(false)\n});\n\nexport type CustomerQuery = z.infer<typeof CustomerQuerySchema>;\n\nexport interface CustomerProfile {\n  id: string;\n  email: string;\n  firstName?: string;\n  lastName?: string;\n  phone?: string;\n  organizationId: string;\n  segments?: string[];\n  predictions?: {\n    churnRisk: number;\n    lifetimeValue: number;\n    engagementScore: number;\n  };\n  createdAt: string;\n  updatedAt: string;\n}\n\n// ============================================================================\n// Campaign Analytics Types\n// ============================================================================\n\nexport const CampaignAnalyticsQuerySchema = z.object({\n  campaignId: z.string().optional(),\n  organizationId: z.string().optional(),\n  type: z.enum(['EMAIL', 'SMS', 'WHATSAPP']).optional(),\n  dateFrom: z.string().optional(),\n  dateTo: z.string().optional(),\n  limit: z.number().min(1).max(100).default(10),\n  offset: z.number().min(0).default(0),\n  includeABTests: z.boolean().default(false)\n});\n\nexport type CampaignAnalyticsQuery = z.infer<typeof CampaignAnalyticsQuerySchema>;\n\nexport interface CampaignAnalytics {\n  id: string;\n  name: string;\n  type: 'EMAIL' | 'SMS' | 'WHATSAPP';\n  organizationId: string;\n  performance: {\n    sent: number;\n    delivered: number;\n    opened: number;\n    clicked: number;\n    converted: number;\n    bounced: number;\n    unsubscribed: number;\n    openRate: number;\n    clickRate: number;\n    conversionRate: number;\n    revenue: number;\n  };\n  abTests?: {\n    variant: string;\n    performance: any;\n  }[];\n  createdAt: string;\n  updatedAt: string;\n}\n\n// ============================================================================\n// LeadPulse Types\n// ============================================================================\n\nexport const LeadPulseQuerySchema = z.object({\n  visitorId: z.string().optional(),\n  sessionId: z.string().optional(),\n  organizationId: z.string().optional(),\n  dateFrom: z.string().optional(),\n  dateTo: z.string().optional(),\n  limit: z.number().min(1).max(100).default(10),\n  offset: z.number().min(0).default(0),\n  includeHeatmap: z.boolean().default(false),\n  includeJourney: z.boolean().default(false)\n});\n\nexport type LeadPulseQuery = z.infer<typeof LeadPulseQuerySchema>;\n\nexport interface VisitorSession {\n  id: string;\n  visitorId: string;\n  organizationId: string;\n  startTime: string;\n  endTime?: string;\n  pageViews: number;\n  duration: number;\n  bounce: boolean;\n  converted: boolean;\n  geoLocation?: {\n    country: string;\n    city: string;\n    region: string;\n  };\n  device?: {\n    type: string;\n    browser: string;\n    os: string;\n  };\n  heatmapData?: any;\n  journeySteps?: any[];\n}\n\n// ============================================================================\n// External Services Types\n// ============================================================================\n\nexport const SendMessageSchema = z.object({\n  type: z.enum(['EMAIL', 'SMS', 'WHATSAPP']),\n  to: z.string(),\n  subject: z.string().optional(),\n  content: z.string(),\n  templateId: z.string().optional(),\n  organizationId: z.string()\n});\n\nexport type SendMessageRequest = z.infer<typeof SendMessageSchema>;\n\nexport interface MessageResult {\n  id: string;\n  status: 'SENT' | 'DELIVERED' | 'FAILED' | 'PENDING';\n  provider: string;\n  cost: number;\n  timestamp: string;\n  error?: string;\n}\n\n// ============================================================================\n// Monitoring Types\n// ============================================================================\n\nexport const MonitoringQuerySchema = z.object({\n  metric: z.enum(['users', 'campaigns', 'revenue', 'ai-performance', 'system-health']),\n  organizationId: z.string().optional(),\n  timeRange: z.enum(['1h', '1d', '7d', '30d']).default('1d'),\n  aggregation: z.enum(['avg', 'sum', 'max', 'min', 'count']).default('avg')\n});\n\nexport type MonitoringQuery = z.infer<typeof MonitoringQuerySchema>;\n\nexport interface MonitoringData {\n  metric: string;\n  value: number;\n  timestamp: string;\n  metadata?: Record<string, any>;\n}\n\n// ============================================================================\n// Error Types\n// ============================================================================\n\nexport interface MCPError {\n  code: string;\n  message: string;\n  details?: any;\n  timestamp: string;\n}\n\nexport class MCPAuthenticationError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MCPAuthenticationError';\n  }\n}\n\nexport class MCPAuthorizationError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MCPAuthorizationError';\n  }\n}\n\nexport class MCPRateLimitError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'MCPRateLimitError';\n  }\n}\n\nexport class MCPValidationError extends Error {\n  public readonly details?: Array<{\n    path: string;\n    message: string;\n    code: string;\n  }>;\n\n  constructor(message: string, details?: Array<{ path: string; message: string; code: string }>) {\n    super(message);\n    this.name = 'MCPValidationError';\n    this.details = details;\n  }\n}\n\n// ============================================================================\n// Server Response Types\n// ============================================================================\n\nexport interface MCPServerResponse<T = any> {\n  success: boolean;\n  data?: T;\n  error?: MCPError;\n  meta?: {\n    total?: number;\n    page?: number;\n    limit?: number;\n    hasMore?: boolean;\n  };\n}\n\n// ============================================================================\n// Client Types\n// ============================================================================\n\nexport interface MCPClientConfig {\n  serverUrl: string;\n  timeout: number;\n  retries: number;\n  authentication: {\n    method: 'session' | 'api-key' | 'jwt';\n    credentials: Record<string, string>;\n  };\n}\n\nexport interface MCPClientResponse<T = any> {\n  success: boolean;\n  data?: T;\n  error?: string;\n  fromFallback?: boolean;\n}"],"names":["CampaignAnalyticsQuerySchema","CustomerQuerySchema","LeadPulseQuerySchema","MCPAuthenticationError","MCPAuthorizationError","MCPRateLimitError","MCPValidationError","MonitoringQuerySchema","SendMessageSchema","z","object","id","string","optional","email","phone","organizationId","limit","number","min","max","default","offset","includeSegments","boolean","includePredictions","campaignId","type","enum","dateFrom","dateTo","includeABTests","visitorId","sessionId","includeHeatmap","includeJourney","to","subject","content","templateId","metric","timeRange","aggregation","Error","constructor","message","name","details"],"mappings":"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"}