d655c370e39bed422714ce09cd964b9c
/**
 * MCP-Integrated LeadPulse Hook
 * 
 * This hook integrates with MCP servers to provide real-time visitor data
 * while maintaining backward compatibility with fallback mechanisms.
 * 
 * Data Sources (in order of preference):
 * 1. 'mcp' - Real data from MCP LeadPulse server
 * 2. 'fallback' - Real data from direct database queries
 * 3. 'demo' - Demo data (removed - now returns empty arrays)
 * 
 * Features:
 * - Real visitor segmentation based on actual behavior data
 * - Live insights calculated from visitor patterns
 * - Database fallback when MCP server unavailable
 * - No demo data fallbacks (returns empty/real data only)
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: function() {
        return _default;
    },
    useMCPLeadPulse: function() {
        return useMCPLeadPulse;
    }
});
const _react = require("react");
const _react1 = require("next-auth/react");
const _mcpdataprovider = require("../lib/leadpulse/mcp-data-provider");
function useMCPLeadPulse(options = {}) {
    const { data: session } = (0, _react1.useSession)();
    const { timeRange = '24h', refreshInterval = 60000, enableRealtime = false, autoRefresh = true, maxVisitors = 50 } = options;
    // State
    const [visitorLocations, setVisitorLocations] = (0, _react.useState)([]);
    const [visitorJourneys, setVisitorJourneys] = (0, _react.useState)([]);
    const [insights, setInsights] = (0, _react.useState)([]);
    const [segments, setSegments] = (0, _react.useState)([]);
    const [analyticsOverview, setAnalyticsOverview] = (0, _react.useState)({
        activeVisitors: 0,
        totalVisitors: 0,
        conversionRate: 0,
        engagementScore: 0,
        bounceRate: 0,
        averageSessionTime: 0
    });
    const [isLoading, setIsLoading] = (0, _react.useState)(true);
    const [error, setError] = (0, _react.useState)(null);
    const [dataSource, setDataSource] = (0, _react.useState)('fallback');
    const [lastUpdated, setLastUpdated] = (0, _react.useState)(null);
    const [mcpEnabled, setMcpEnabled] = (0, _react.useState)(false);
    const [mcpConnected, setMcpConnected] = (0, _react.useState)(false);
    // Refs for preventing race conditions
    const isMountedRef = (0, _react.useRef)(true);
    const lastFetchRef = (0, _react.useRef)(0);
    const refreshTimeoutRef = (0, _react.useRef)(null);
    // Create MCP auth context from session
    const createAuthContext = (0, _react.useCallback)(()=>{
        if (!session?.user) return undefined;
        return {
            userId: session.user.id || '',
            organizationId: session.user.organizationId || '',
            permissions: [
                'read:org',
                'read:leadpulse'
            ],
            role: session.user.role || 'user'
        };
    }, [
        session
    ]);
    /**
   * Fetch visitor data from MCP
   */ const fetchVisitorData = (0, _react.useCallback)(async (force = false)=>{
        if (!isMountedRef.current) return;
        // Prevent too frequent fetches
        const now = Date.now();
        if (!force && now - lastFetchRef.current < 5000) {
            return;
        }
        lastFetchRef.current = now;
        try {
            setError(null);
            const authContext = createAuthContext();
            // Fetch visitor journeys (main visitor data)
            const journeys = await (0, _mcpdataprovider.getMCPVisitorData)({
                limit: maxVisitors,
                includeLocation: true,
                includeDevice: true,
                authContext
            });
            if (isMountedRef.current) {
                setVisitorJourneys(journeys);
                setDataSource(authContext ? 'mcp' : 'fallback');
                setMcpEnabled(!!authContext);
                setMcpConnected(!!authContext);
                // Calculate analytics overview from visitor data
                const overview = calculateAnalyticsOverview(journeys);
                setAnalyticsOverview(overview);
            }
        } catch (err) {
            if (isMountedRef.current) {
                setError(err instanceof Error ? err.message : 'Failed to fetch visitor data');
                setDataSource('fallback');
                setMcpConnected(false);
            }
        }
    }, [
        createAuthContext,
        maxVisitors
    ]);
    /**
   * Fetch visitor locations from MCP
   */ const fetchLocations = (0, _react.useCallback)(async ()=>{
        if (!isMountedRef.current) return;
        try {
            const authContext = createAuthContext();
            const locations = await (0, _mcpdataprovider.getMCPVisitorLocations)(authContext);
            if (isMountedRef.current) {
                setVisitorLocations(locations);
            }
        } catch (err) {
            console.error('Failed to fetch visitor locations:', err);
        }
    }, [
        createAuthContext
    ]);
    /**
   * Fetch insights from MCP
   */ const fetchInsights = (0, _react.useCallback)(async ()=>{
        if (!isMountedRef.current) return;
        try {
            const authContext = createAuthContext();
            const insightsData = await (0, _mcpdataprovider.getMCPVisitorInsights)(authContext);
            if (isMountedRef.current) {
                setInsights(insightsData);
            }
        } catch (err) {
            console.error('Failed to fetch insights:', err);
        }
    }, [
        createAuthContext
    ]);
    /**
   * Fetch segments from real MCP visitor data
   */ const fetchSegments = (0, _react.useCallback)(async ()=>{
        if (!isMountedRef.current) return;
        try {
            const authContext = createAuthContext();
            // Get visitor data to calculate real segments
            const visitors = await (0, _mcpdataprovider.getMCPVisitorData)({
                limit: 200,
                includeLocation: true,
                includeDevice: true,
                authContext
            });
            if (visitors.length === 0) {
                // Fallback to empty segments if no data
                setSegments([]);
                return;
            }
            // Calculate real segments from visitor data
            const totalVisitors = visitors.length;
            // High Intent: Visitors with engagement score > 70
            const highIntent = visitors.filter((v)=>v.engagementScore > 70);
            // New Visitors: Visitors with only 1-2 pulse data points
            const newVisitors = visitors.filter((v)=>v.pulseData.length <= 2);
            // Returning Visitors: Visitors with multiple sessions indicated by pulse data
            const returningVisitors = visitors.filter((v)=>v.pulseData.length > 5);
            // Mobile Users: Determine from device info in visitor data
            const mobileUsers = visitors.filter((v)=>v.device.toLowerCase().includes('mobile') || v.device.toLowerCase().includes('iphone') || v.device.toLowerCase().includes('android'));
            const realSegments = [
                {
                    id: '1',
                    name: 'High Intent',
                    count: highIntent.length,
                    percentage: Math.round(highIntent.length / totalVisitors * 100),
                    key: 'high_intent'
                },
                {
                    id: '2',
                    name: 'New Visitors',
                    count: newVisitors.length,
                    percentage: Math.round(newVisitors.length / totalVisitors * 100),
                    key: 'new_visitors'
                },
                {
                    id: '3',
                    name: 'Returning',
                    count: returningVisitors.length,
                    percentage: Math.round(returningVisitors.length / totalVisitors * 100),
                    key: 'returning'
                },
                {
                    id: '4',
                    name: 'Mobile Users',
                    count: mobileUsers.length,
                    percentage: Math.round(mobileUsers.length / totalVisitors * 100),
                    key: 'mobile_users'
                }
            ];
            if (isMountedRef.current) {
                setSegments(realSegments);
                setDataSource(authContext ? 'mcp' : 'fallback');
            }
        } catch (err) {
            console.error('Failed to fetch segments:', err);
            // Set empty segments on error instead of demo data
            if (isMountedRef.current) {
                setSegments([]);
                setDataSource('fallback');
            }
        }
    }, [
        createAuthContext
    ]);
    /**
   * Refresh all data
   */ const refresh = (0, _react.useCallback)(async ()=>{
        if (!isMountedRef.current) return;
        setIsLoading(true);
        try {
            await Promise.all([
                fetchVisitorData(true),
                fetchLocations(),
                fetchInsights(),
                fetchSegments()
            ]);
            if (isMountedRef.current) {
                setLastUpdated(new Date());
            }
        } catch (err) {
            console.error('Failed to refresh data:', err);
        } finally{
            if (isMountedRef.current) {
                setIsLoading(false);
            }
        }
    }, [
        fetchVisitorData,
        fetchLocations,
        fetchInsights,
        fetchSegments
    ]);
    /**
   * Individual refresh methods
   */ const refreshVisitors = (0, _react.useCallback)(async ()=>{
        await fetchVisitorData(true);
    }, [
        fetchVisitorData
    ]);
    const refreshInsights = (0, _react.useCallback)(async ()=>{
        await fetchInsights();
    }, [
        fetchInsights
    ]);
    const refreshLocations = (0, _react.useCallback)(async ()=>{
        await fetchLocations();
    }, [
        fetchLocations
    ]);
    // Initial data fetch - Fixed to prevent infinite loops
    (0, _react.useEffect)(()=>{
        if (session !== undefined) {
            refresh();
        }
    }, [
        session
    ]); // Removed 'refresh' from dependencies
    // Auto-refresh setup - Fixed to prevent infinite loops
    (0, _react.useEffect)(()=>{
        if (!autoRefresh || !enableRealtime) return;
        const intervalId = setInterval(()=>{
            if (isMountedRef.current) {
                refresh();
            }
        }, refreshInterval);
        return ()=>{
            clearInterval(intervalId);
        };
    }, [
        autoRefresh,
        enableRealtime,
        refreshInterval
    ]); // Removed 'refresh' from dependencies
    // Cleanup on unmount
    (0, _react.useEffect)(()=>{
        return ()=>{
            isMountedRef.current = false;
            if (refreshTimeoutRef.current) {
                clearTimeout(refreshTimeoutRef.current);
            }
        };
    }, []);
    return {
        // Core data
        visitorLocations,
        visitorJourneys,
        insights,
        segments,
        analyticsOverview,
        // State
        isLoading,
        error,
        dataSource,
        lastUpdated,
        // MCP specific
        mcpEnabled,
        mcpConnected,
        // Methods
        refresh,
        refreshVisitors,
        refreshInsights,
        refreshLocations
    };
}
/**
 * Calculate analytics overview from visitor data
 */ function calculateAnalyticsOverview(journeys) {
    if (journeys.length === 0) {
        return {
            activeVisitors: 0,
            totalVisitors: 0,
            conversionRate: 0,
            engagementScore: 0,
            bounceRate: 0,
            averageSessionTime: 0
        };
    }
    const activeVisitors = journeys.filter((v)=>v.lastActive === 'just now' || v.lastActive.includes('min ago')).length;
    const totalVisitors = journeys.length;
    const avgEngagement = journeys.reduce((sum, v)=>sum + v.engagementScore, 0) / totalVisitors;
    // Calculate conversion rate based on pulse data
    const conversions = journeys.filter((v)=>v.pulseData.some((p)=>p.type === 'CONVERSION')).length;
    const conversionRate = conversions / totalVisitors * 100;
    // Calculate bounce rate (visitors with only one pulse data point)
    const bounces = journeys.filter((v)=>v.pulseData.length <= 1).length;
    const bounceRate = bounces / totalVisitors * 100;
    // Estimate average session time from pulse data
    const avgSessionTime = journeys.reduce((sum, v)=>{
        const sessionTime = v.pulseData.reduce((time, p)=>time + (p.value || 60), 0);
        return sum + sessionTime;
    }, 0) / totalVisitors;
    return {
        activeVisitors,
        totalVisitors,
        conversionRate: Math.round(conversionRate * 10) / 10,
        engagementScore: Math.round(avgEngagement),
        bounceRate: Math.round(bounceRate * 10) / 10,
        averageSessionTime: Math.round(avgSessionTime)
    };
}
const _default = useMCPLeadPulse;

//# sourceMappingURL=data:application/json;base64,