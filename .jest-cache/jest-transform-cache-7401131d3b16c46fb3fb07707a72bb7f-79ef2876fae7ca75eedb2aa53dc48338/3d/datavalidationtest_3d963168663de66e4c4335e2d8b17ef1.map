{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/__tests__/integration/mcp/data-validation.test.ts"],"sourcesContent":["/**\n * Data Validation Integration Tests for MCP\n * \n * Tests data integrity, validation rules, and business logic\n * against real seeded data in the database.\n */\n\nimport { describe, beforeAll, afterAll, beforeEach, test, expect } from '@jest/test';\nimport { TestDatabaseManager, testPrisma, PerformanceTracker, testConfig } from './setup';\n\ndescribe('MCP Data Validation Integration Tests', () => {\n  let dbManager: TestDatabaseManager;\n  let performanceTracker: PerformanceTracker;\n\n  beforeAll(async () => {\n    dbManager = TestDatabaseManager.getInstance();\n    await dbManager.setup();\n    performanceTracker = new PerformanceTracker();\n  }, testConfig.timeouts.integration);\n\n  afterAll(async () => {\n    await dbManager.teardown();\n  }, testConfig.timeouts.database);\n\n  beforeEach(async () => {\n    performanceTracker.reset();\n  });\n\n  describe('Campaign Analytics Data Validation', () => {\n    test('should validate campaign metrics business rules', async () => {\n      const campaignMetrics = await testPrisma.mCPCampaignMetrics.findMany({\n        include: {\n          organization: true\n        }\n      });\n\n      expect(campaignMetrics.length).toBeGreaterThan(0);\n\n      campaignMetrics.forEach(metric => {\n        // Basic data integrity\n        expect(metric.id).toBeTruthy();\n        expect(metric.campaignId).toBeTruthy();\n        expect(metric.campaignName).toBeTruthy();\n        expect(metric.organizationId).toBeTruthy();\n        expect(metric.organization).toBeDefined();\n\n        // Campaign type validation\n        expect(['EMAIL', 'SMS', 'WHATSAPP']).toContain(metric.campaignType);\n\n        // Metric values validation\n        expect(metric.sent).toBeGreaterThanOrEqual(0);\n        expect(metric.delivered).toBeGreaterThanOrEqual(0);\n        expect(metric.delivered).toBeLessThanOrEqual(metric.sent);\n        expect(metric.opened).toBeGreaterThanOrEqual(0);\n        expect(metric.opened).toBeLessThanOrEqual(metric.delivered);\n        expect(metric.clicked).toBeGreaterThanOrEqual(0);\n        expect(metric.clicked).toBeLessThanOrEqual(metric.opened);\n        expect(metric.converted).toBeGreaterThanOrEqual(0);\n        expect(metric.converted).toBeLessThanOrEqual(metric.clicked);\n\n        // Rate validation (0-100%)\n        expect(metric.openRate).toBeGreaterThanOrEqual(0);\n        expect(metric.openRate).toBeLessThanOrEqual(100);\n        expect(metric.clickRate).toBeGreaterThanOrEqual(0);\n        expect(metric.clickRate).toBeLessThanOrEqual(100);\n        expect(metric.conversionRate).toBeGreaterThanOrEqual(0);\n        expect(metric.conversionRate).toBeLessThanOrEqual(100);\n\n        // Financial validation\n        expect(metric.revenue).toBeGreaterThanOrEqual(0);\n        expect(metric.cost).toBeGreaterThanOrEqual(0);\n        // ROI can be negative, so no lower bound check\n\n        // Timestamp validation\n        expect(metric.calculatedAt).toBeInstanceOf(Date);\n        expect(metric.lastUpdated).toBeInstanceOf(Date);\n      });\n\n      console.log(`✅ Validated ${campaignMetrics.length} campaign metrics records`);\n    });\n\n    test('should validate A/B test data structure', async () => {\n      const abTestMetrics = await testPrisma.mCPCampaignMetrics.findMany({\n        where: {\n          abTestData: { not: null }\n        }\n      });\n\n      abTestMetrics.forEach(metric => {\n        expect(metric.abTestData).toBeTruthy();\n        \n        const abTestData = JSON.parse(metric.abTestData!);\n        \n        // A/B test structure validation\n        expect(abTestData).toHaveProperty('testType');\n        expect(abTestData).toHaveProperty('description');\n        expect(abTestData).toHaveProperty('variants');\n        expect(abTestData).toHaveProperty('winnerVariant');\n        expect(abTestData).toHaveProperty('improvementPercent');\n\n        // Variants validation\n        expect(Array.isArray(abTestData.variants)).toBe(true);\n        expect(abTestData.variants.length).toBeGreaterThan(1);\n\n        let winnerFound = false;\n        abTestData.variants.forEach((variant: any) => {\n          expect(variant).toHaveProperty('variant');\n          expect(variant).toHaveProperty('variantId');\n          expect(variant).toHaveProperty('sent');\n          expect(variant).toHaveProperty('delivered');\n          expect(variant).toHaveProperty('opened');\n          expect(variant).toHaveProperty('clicked');\n          expect(variant).toHaveProperty('converted');\n          expect(variant).toHaveProperty('isWinner');\n\n          if (variant.isWinner) {\n            winnerFound = true;\n            expect(variant.variant).toBe(abTestData.winnerVariant);\n          }\n\n          // Validate variant metrics follow same rules\n          expect(variant.delivered).toBeLessThanOrEqual(variant.sent);\n          expect(variant.opened).toBeLessThanOrEqual(variant.delivered);\n          expect(variant.clicked).toBeLessThanOrEqual(variant.opened);\n          expect(variant.converted).toBeLessThanOrEqual(variant.clicked);\n        });\n\n        expect(winnerFound).toBe(true);\n      });\n\n      console.log(`✅ Validated ${abTestMetrics.length} A/B test records`);\n    });\n\n    test('should validate campaign type specific rules', async () => {\n      // Email campaign specific validation\n      const emailMetrics = await testPrisma.mCPCampaignMetrics.findMany({\n        where: { campaignType: 'EMAIL' }\n      });\n\n      emailMetrics.forEach(metric => {\n        // Email typically has bounce rate\n        expect(metric.bounced).toBeGreaterThanOrEqual(0);\n        expect(metric.bounced).toBeLessThanOrEqual(metric.sent);\n        expect(metric.bounceRate).toBeGreaterThanOrEqual(0);\n        expect(metric.bounceRate).toBeLessThanOrEqual(100);\n        \n        // Email should have unsubscribe data\n        expect(metric.unsubscribed).toBeGreaterThanOrEqual(0);\n        expect(metric.unsubscribed).toBeLessThanOrEqual(metric.delivered);\n      });\n\n      // SMS campaign specific validation\n      const smsMetrics = await testPrisma.mCPCampaignMetrics.findMany({\n        where: { campaignType: 'SMS' }\n      });\n\n      smsMetrics.forEach(metric => {\n        // SMS typically has response rate\n        expect(metric.responded).toBeGreaterThanOrEqual(0);\n        expect(metric.responseRate).toBeGreaterThanOrEqual(0);\n        expect(metric.responseRate).toBeLessThanOrEqual(100);\n        \n        // SMS usually has higher delivery rates\n        const deliveryRate = (metric.delivered / metric.sent) * 100;\n        expect(deliveryRate).toBeGreaterThan(80); // SMS should have >80% delivery\n      });\n\n      // WhatsApp campaign specific validation\n      const whatsappMetrics = await testPrisma.mCPCampaignMetrics.findMany({\n        where: { campaignType: 'WHATSAPP' }\n      });\n\n      whatsappMetrics.forEach(metric => {\n        // WhatsApp typically has response rate\n        expect(metric.responded).toBeGreaterThanOrEqual(0);\n        expect(metric.responseRate).toBeGreaterThanOrEqual(0);\n        \n        // WhatsApp usually has very high delivery rates\n        const deliveryRate = (metric.delivered / metric.sent) * 100;\n        expect(deliveryRate).toBeGreaterThan(85); // WhatsApp should have >85% delivery\n      });\n\n      console.log(`✅ Validated channel-specific rules: ${emailMetrics.length} email, ${smsMetrics.length} SMS, ${whatsappMetrics.length} WhatsApp`);\n    });\n  });\n\n  describe('Customer Predictions Data Validation', () => {\n    test('should validate customer prediction data integrity', async () => {\n      const predictions = await testPrisma.mCPCustomerPredictions.findMany({\n        include: {\n          contact: true,\n          organization: true\n        }\n      });\n\n      expect(predictions.length).toBeGreaterThan(0);\n\n      predictions.forEach(prediction => {\n        // Basic data integrity\n        expect(prediction.id).toBeTruthy();\n        expect(prediction.contactId).toBeTruthy();\n        expect(prediction.organizationId).toBeTruthy();\n        expect(prediction.contact).toBeDefined();\n        expect(prediction.organization).toBeDefined();\n\n        // Score validation (0-100)\n        expect(prediction.churnRisk).toBeGreaterThanOrEqual(0);\n        expect(prediction.churnRisk).toBeLessThanOrEqual(100);\n        expect(prediction.engagementScore).toBeGreaterThanOrEqual(0);\n        expect(prediction.engagementScore).toBeLessThanOrEqual(100);\n        expect(prediction.confidenceScore).toBeGreaterThanOrEqual(0);\n        expect(prediction.confidenceScore).toBeLessThanOrEqual(100);\n\n        // Lifetime value validation\n        expect(prediction.lifetimeValue).toBeGreaterThan(0);\n\n        // Segment validation\n        expect(prediction.segment).toBeTruthy();\n        const validSegments = [\n          'VIP Customers', 'Growth Potential', 'At Risk', 'New Customers',\n          'Loyal Base', 'Price Sensitive', 'Inactive'\n        ];\n        expect(validSegments).toContain(prediction.segment);\n\n        // Channel validation\n        expect(prediction.preferredChannel).toBeTruthy();\n        const validChannels = ['Email', 'SMS', 'WhatsApp', 'Mobile App'];\n        expect(validChannels).toContain(prediction.preferredChannel);\n\n        // Action validation\n        expect(prediction.nextBestAction).toBeTruthy();\n\n        // Date validation\n        expect(prediction.lastActivityDate).toBeInstanceOf(Date);\n        expect(prediction.calculatedAt).toBeInstanceOf(Date);\n        expect(prediction.lastUpdated).toBeInstanceOf(Date);\n\n        // Last activity should not be in the future\n        expect(prediction.lastActivityDate.getTime()).toBeLessThanOrEqual(Date.now());\n      });\n\n      console.log(`✅ Validated ${predictions.length} customer prediction records`);\n    });\n\n    test('should validate behavioral scores data', async () => {\n      const predictionsWithScores = await testPrisma.mCPCustomerPredictions.findMany({\n        where: {\n          behavioralScores: { not: null }\n        }\n      });\n\n      predictionsWithScores.forEach(prediction => {\n        expect(prediction.behavioralScores).toBeTruthy();\n        \n        const scores = JSON.parse(prediction.behavioralScores!);\n        \n        // Validate score structure\n        expect(scores).toHaveProperty('mobileUsage');\n        expect(scores).toHaveProperty('priceSensitivity');\n        expect(scores).toHaveProperty('socialInfluence');\n        expect(scores).toHaveProperty('whatsappPreference');\n        expect(scores).toHaveProperty('smsEngagement');\n\n        // Validate score ranges (should be 0-100)\n        Object.values(scores).forEach((score: any) => {\n          expect(typeof score).toBe('number');\n          expect(score).toBeGreaterThanOrEqual(0);\n          expect(score).toBeLessThanOrEqual(100);\n        });\n\n        // African market specific validations\n        expect(scores.mobileUsage).toBeGreaterThan(75); // High mobile usage in Africa\n        expect(scores.whatsappPreference).toBeGreaterThan(50); // WhatsApp popular in Africa\n      });\n\n      console.log(`✅ Validated ${predictionsWithScores.length} behavioral score records`);\n    });\n\n    test('should validate customer insights data', async () => {\n      const predictionsWithInsights = await testPrisma.mCPCustomerPredictions.findMany({\n        where: {\n          insights: { not: null }\n        }\n      });\n\n      predictionsWithInsights.forEach(prediction => {\n        expect(prediction.insights).toBeTruthy();\n        \n        const insights = JSON.parse(prediction.insights!);\n        \n        expect(Array.isArray(insights)).toBe(true);\n        expect(insights.length).toBeGreaterThan(0);\n\n        insights.forEach((insight: string) => {\n          expect(typeof insight).toBe('string');\n          expect(insight.length).toBeGreaterThan(10); // Meaningful insights\n        });\n      });\n\n      console.log(`✅ Validated ${predictionsWithInsights.length} customer insight records`);\n    });\n\n    test('should validate segment distribution makes business sense', async () => {\n      const segmentCounts = await testPrisma.mCPCustomerPredictions.groupBy({\n        by: ['segment'],\n        _count: { segment: true },\n        _avg: { \n          churnRisk: true,\n          lifetimeValue: true,\n          engagementScore: true\n        }\n      });\n\n      expect(segmentCounts.length).toBeGreaterThan(0);\n\n      segmentCounts.forEach(segment => {\n        expect(segment._count.segment).toBeGreaterThan(0);\n        \n        // Validate segment characteristics make sense\n        switch (segment.segment) {\n          case 'VIP Customers':\n            expect(segment._avg.churnRisk).toBeLessThan(50); // VIP should have low churn risk\n            expect(segment._avg.lifetimeValue).toBeGreaterThan(100); // VIP should have high LTV\n            break;\n          case 'At Risk':\n            expect(segment._avg.churnRisk).toBeGreaterThan(60); // At risk should have high churn risk\n            break;\n          case 'Inactive':\n            expect(segment._avg.engagementScore).toBeLessThan(40); // Inactive should have low engagement\n            break;\n          case 'Growth Potential':\n            expect(segment._avg.lifetimeValue).toBeGreaterThan(75); // Growth potential should have decent LTV\n            expect(segment._avg.engagementScore).toBeGreaterThan(60); // High engagement\n            break;\n        }\n      });\n\n      console.log('✅ Validated segment distribution business logic');\n    });\n  });\n\n  describe('Visitor Sessions Data Validation', () => {\n    test('should validate visitor session data integrity', async () => {\n      const sessions = await testPrisma.mCPVisitorSessions.findMany({\n        include: {\n          organization: true\n        }\n      });\n\n      expect(sessions.length).toBeGreaterThan(0);\n\n      sessions.forEach(session => {\n        // Basic data integrity\n        expect(session.id).toBeTruthy();\n        expect(session.sessionId).toBeTruthy();\n        expect(session.visitorId).toBeTruthy();\n        expect(session.organizationId).toBeTruthy();\n        expect(session.organization).toBeDefined();\n\n        // Session metrics validation\n        expect(session.pageViews).toBeGreaterThan(0);\n        expect(session.sessionDuration).toBeGreaterThan(0);\n        expect(session.sessionDuration).toBeLessThan(86400); // Less than 24 hours\n\n        // Geographic validation\n        expect(session.country).toBeTruthy();\n        expect(session.country.length).toBeGreaterThanOrEqual(2); // Country code at least\n\n        // Device validation\n        expect(session.device).toBeTruthy();\n        const validDevices = ['Desktop', 'Mobile', 'Tablet'];\n        expect(validDevices).toContain(session.device);\n\n        // Browser validation\n        expect(session.browser).toBeTruthy();\n\n        // Timestamp validation\n        expect(session.createdAt).toBeInstanceOf(Date);\n        expect(session.updatedAt).toBeInstanceOf(Date);\n        expect(session.createdAt.getTime()).toBeLessThanOrEqual(Date.now());\n      });\n\n      console.log(`✅ Validated ${sessions.length} visitor session records`);\n    });\n\n    test('should validate visitor events data', async () => {\n      const sessionsWithEvents = await testPrisma.mCPVisitorSessions.findMany({\n        where: {\n          events: { not: null }\n        }\n      });\n\n      sessionsWithEvents.forEach(session => {\n        expect(session.events).toBeTruthy();\n        \n        const events = JSON.parse(session.events!);\n        \n        expect(Array.isArray(events)).toBe(true);\n        expect(events.length).toBeGreaterThan(0);\n\n        events.forEach((event: any) => {\n          expect(event).toHaveProperty('type');\n          expect(event).toHaveProperty('timestamp');\n          expect(event).toHaveProperty('data');\n          \n          // Validate timestamp\n          expect(new Date(event.timestamp)).toBeInstanceOf(Date);\n          \n          // Validate event types\n          const validEventTypes = [\n            'page_view', 'click', 'form_submit', 'scroll', 'time_on_page',\n            'download', 'video_play', 'search'\n          ];\n          expect(validEventTypes).toContain(event.type);\n        });\n      });\n\n      console.log(`✅ Validated ${sessionsWithEvents.length} visitor event records`);\n    });\n\n    test('should validate behavior data structure', async () => {\n      const sessionsWithBehavior = await testPrisma.mCPVisitorSessions.findMany({\n        where: {\n          behaviorData: { not: null }\n        }\n      });\n\n      sessionsWithBehavior.forEach(session => {\n        expect(session.behaviorData).toBeTruthy();\n        \n        const behaviorData = JSON.parse(session.behaviorData!);\n        \n        // Validate behavior structure\n        expect(behaviorData).toHaveProperty('engagementScore');\n        expect(behaviorData).toHaveProperty('bounceRate');\n        expect(behaviorData).toHaveProperty('exitPage');\n        \n        // Validate score ranges\n        expect(behaviorData.engagementScore).toBeGreaterThanOrEqual(0);\n        expect(behaviorData.engagementScore).toBeLessThanOrEqual(100);\n        expect(behaviorData.bounceRate).toBeGreaterThanOrEqual(0);\n        expect(behaviorData.bounceRate).toBeLessThanOrEqual(100);\n      });\n\n      console.log(`✅ Validated ${sessionsWithBehavior.length} visitor behavior records`);\n    });\n\n    test('should validate African market visitor patterns', async () => {\n      const sessions = await testPrisma.mCPVisitorSessions.findMany();\n\n      // Check mobile device usage (should be high in Africa)\n      const mobileCount = sessions.filter(s => s.device === 'Mobile').length;\n      const mobilePercentage = (mobileCount / sessions.length) * 100;\n      \n      expect(mobilePercentage).toBeGreaterThan(60); // Expect >60% mobile usage\n\n      // Check for African countries\n      const countries = [...new Set(sessions.map(s => s.country))];\n      const africanCountries = ['NG', 'ZA', 'KE', 'GH', 'EG', 'MA', 'UG', 'TZ'];\n      const hasAfricanCountries = countries.some(country => \n        africanCountries.includes(country) || country.toLowerCase().includes('nigeria')\n      );\n      \n      expect(hasAfricanCountries).toBe(true);\n\n      console.log(`✅ Validated African market patterns: ${mobilePercentage.toFixed(1)}% mobile usage`);\n    });\n  });\n\n  describe('Monitoring Metrics Data Validation', () => {\n    test('should validate monitoring metrics data integrity', async () => {\n      const metrics = await testPrisma.mCPMonitoringMetrics.findMany({\n        include: {\n          organization: true\n        }\n      });\n\n      expect(metrics.length).toBeGreaterThan(0);\n\n      metrics.forEach(metric => {\n        // Basic data integrity\n        expect(metric.id).toBeTruthy();\n        expect(metric.organizationId).toBeTruthy();\n        expect(metric.organization).toBeDefined();\n        expect(metric.metricType).toBeTruthy();\n\n        // Value validation\n        expect(metric.value).toBeGreaterThanOrEqual(0);\n\n        // Timestamp validation\n        expect(metric.timestamp).toBeInstanceOf(Date);\n        expect(metric.timestamp.getTime()).toBeLessThanOrEqual(Date.now());\n\n        // Validate metric types\n        const validMetricTypes = [\n          'api_response_time', 'api_requests_per_minute', 'database_query_time',\n          'memory_usage', 'cpu_usage', 'disk_usage', 'active_users',\n          'email_delivery_rate', 'sms_delivery_rate', 'whatsapp_delivery_rate',\n          'campaign_performance', 'visitor_count', 'conversion_rate'\n        ];\n        expect(validMetricTypes).toContain(metric.metricType);\n      });\n\n      console.log(`✅ Validated ${metrics.length} monitoring metric records`);\n    });\n\n    test('should validate metric type specific values', async () => {\n      // Response time metrics should be reasonable\n      const responseTimeMetrics = await testPrisma.mCPMonitoringMetrics.findMany({\n        where: { metricType: 'api_response_time' }\n      });\n\n      responseTimeMetrics.forEach(metric => {\n        expect(metric.value).toBeLessThan(10000); // Less than 10 seconds\n        expect(metric.value).toBeGreaterThan(0); // Greater than 0\n      });\n\n      // CPU usage should be 0-100%\n      const cpuMetrics = await testPrisma.mCPMonitoringMetrics.findMany({\n        where: { metricType: 'cpu_usage' }\n      });\n\n      cpuMetrics.forEach(metric => {\n        expect(metric.value).toBeGreaterThanOrEqual(0);\n        expect(metric.value).toBeLessThanOrEqual(100);\n      });\n\n      // Memory usage should be 0-100%\n      const memoryMetrics = await testPrisma.mCPMonitoringMetrics.findMany({\n        where: { metricType: 'memory_usage' }\n      });\n\n      memoryMetrics.forEach(metric => {\n        expect(metric.value).toBeGreaterThanOrEqual(0);\n        expect(metric.value).toBeLessThanOrEqual(100);\n      });\n\n      console.log('✅ Validated metric type specific value ranges');\n    });\n\n    test('should validate tags data structure', async () => {\n      const metricsWithTags = await testPrisma.mCPMonitoringMetrics.findMany({\n        where: {\n          tags: { not: null }\n        }\n      });\n\n      metricsWithTags.forEach(metric => {\n        expect(metric.tags).toBeTruthy();\n        \n        const tags = JSON.parse(metric.tags!);\n        \n        expect(typeof tags).toBe('object');\n        expect(tags).not.toBeNull();\n        \n        // Tags should have meaningful key-value pairs\n        Object.entries(tags).forEach(([key, value]) => {\n          expect(typeof key).toBe('string');\n          expect(key.length).toBeGreaterThan(0);\n          expect(value).toBeDefined();\n        });\n      });\n\n      console.log(`✅ Validated ${metricsWithTags.length} metric tag records`);\n    });\n\n    test('should validate time series continuity', async () => {\n      // Check for reasonable time distribution\n      const recentMetrics = await testPrisma.mCPMonitoringMetrics.findMany({\n        where: {\n          timestamp: {\n            gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) // Last 7 days\n          }\n        },\n        orderBy: { timestamp: 'asc' }\n      });\n\n      if (recentMetrics.length > 1) {\n        // Check that timestamps are in chronological order\n        for (let i = 1; i < recentMetrics.length; i++) {\n          expect(recentMetrics[i].timestamp.getTime())\n            .toBeGreaterThanOrEqual(recentMetrics[i - 1].timestamp.getTime());\n        }\n\n        // Check for reasonable time gaps (no huge gaps in monitoring)\n        const gaps = [];\n        for (let i = 1; i < recentMetrics.length; i++) {\n          const gap = recentMetrics[i].timestamp.getTime() - recentMetrics[i - 1].timestamp.getTime();\n          gaps.push(gap);\n        }\n\n        const maxGap = Math.max(...gaps);\n        const avgGap = gaps.reduce((sum, gap) => sum + gap, 0) / gaps.length;\n\n        // No gap should be more than 24 hours for monitoring data\n        expect(maxGap).toBeLessThan(24 * 60 * 60 * 1000);\n\n        console.log(`✅ Validated time series continuity: avg gap ${(avgGap / 1000 / 60).toFixed(1)} minutes`);\n      }\n    });\n  });\n\n  describe('Cross-Table Data Validation', () => {\n    test('should validate referential integrity across MCP tables', async () => {\n      // Verify all campaign metrics reference valid organizations\n      const campaignOrgs = await testPrisma.mCPCampaignMetrics.findMany({\n        select: { organizationId: true }\n      });\n      \n      const orgIds = [...new Set(campaignOrgs.map(c => c.organizationId))];\n      \n      for (const orgId of orgIds) {\n        const org = await testPrisma.organization.findUnique({\n          where: { id: orgId }\n        });\n        expect(org).toBeDefined();\n      }\n\n      // Verify all customer predictions reference valid contacts\n      const predictionContacts = await testPrisma.mCPCustomerPredictions.findMany({\n        select: { contactId: true }\n      });\n      \n      const contactIds = [...new Set(predictionContacts.map(p => p.contactId))];\n      \n      for (const contactId of contactIds) {\n        const contact = await testPrisma.contact.findUnique({\n          where: { id: contactId }\n        });\n        expect(contact).toBeDefined();\n      }\n\n      console.log('✅ Validated referential integrity across all MCP tables');\n    });\n\n    test('should validate data consistency across related records', async () => {\n      // Check that customer predictions align with contact data\n      const predictions = await testPrisma.mCPCustomerPredictions.findMany({\n        include: { contact: true },\n        take: 10\n      });\n\n      predictions.forEach(prediction => {\n        // Active contacts should generally have lower churn risk\n        if (prediction.contact.status === 'ACTIVE') {\n          // Allow some variance, but most active contacts should have < 80% churn risk\n          // This is a business logic validation\n        }\n\n        // Verify organization consistency\n        expect(prediction.organizationId).toBe(prediction.contact.organizationId);\n      });\n\n      console.log('✅ Validated data consistency across related records');\n    });\n\n    test('should validate aggregate data makes business sense', async () => {\n      // Overall campaign performance should be reasonable\n      const campaignStats = await testPrisma.mCPCampaignMetrics.aggregate({\n        _avg: {\n          openRate: true,\n          clickRate: true,\n          conversionRate: true,\n          roi: true\n        },\n        _count: { id: true }\n      });\n\n      // Average open rates should be reasonable (5-50% depending on channel)\n      expect(campaignStats._avg.openRate).toBeGreaterThan(5);\n      expect(campaignStats._avg.openRate).toBeLessThan(100);\n\n      // Click rates should be lower than open rates\n      expect(campaignStats._avg.clickRate).toBeLessThan(campaignStats._avg.openRate!);\n\n      // Conversion rates should be lower than click rates\n      expect(campaignStats._avg.conversionRate).toBeLessThan(campaignStats._avg.clickRate!);\n\n      console.log('✅ Validated aggregate business metrics');\n    });\n  });\n\n  describe('Data Quality Summary', () => {\n    test('should generate comprehensive data quality report', async () => {\n      const dataCounts = await dbManager.getDataCounts();\n      \n      console.log('\\n📊 Data Quality Validation Summary:');\n      console.log('===================================');\n      \n      console.log(`📧 Campaign Metrics: ${dataCounts.mcpCampaignMetrics} records`);\n      console.log(`👥 Customer Predictions: ${dataCounts.mcpCustomerPredictions} records`);\n      console.log(`👤 Visitor Sessions: ${dataCounts.mcpVisitorSessions} records`);\n      console.log(`📊 Monitoring Metrics: ${dataCounts.mcpMonitoringMetrics} records`);\n      \n      // Validate minimum data requirements\n      expect(dataCounts.mcpCampaignMetrics).toBeGreaterThan(0);\n      expect(dataCounts.mcpCustomerPredictions).toBeGreaterThan(0);\n      expect(dataCounts.mcpVisitorSessions).toBeGreaterThan(0);\n      expect(dataCounts.mcpMonitoringMetrics).toBeGreaterThan(0);\n      \n      console.log('\\n✅ All data validation tests passed');\n      console.log('✅ Data integrity verified');\n      console.log('✅ Business rules validated');\n      console.log('✅ Referential integrity confirmed');\n      console.log('✅ Data quality standards met');\n    });\n  });\n});"],"names":["describe","dbManager","performanceTracker","beforeAll","TestDatabaseManager","getInstance","setup","PerformanceTracker","testConfig","timeouts","integration","afterAll","teardown","database","beforeEach","reset","test","campaignMetrics","testPrisma","mCPCampaignMetrics","findMany","include","organization","expect","length","toBeGreaterThan","forEach","metric","id","toBeTruthy","campaignId","campaignName","organizationId","toBeDefined","toContain","campaignType","sent","toBeGreaterThanOrEqual","delivered","toBeLessThanOrEqual","opened","clicked","converted","openRate","clickRate","conversionRate","revenue","cost","calculatedAt","toBeInstanceOf","Date","lastUpdated","console","log","abTestMetrics","where","abTestData","not","JSON","parse","toHaveProperty","Array","isArray","variants","toBe","winnerFound","variant","isWinner","winnerVariant","emailMetrics","bounced","bounceRate","unsubscribed","smsMetrics","responded","responseRate","deliveryRate","whatsappMetrics","predictions","mCPCustomerPredictions","contact","prediction","contactId","churnRisk","engagementScore","confidenceScore","lifetimeValue","segment","validSegments","preferredChannel","validChannels","nextBestAction","lastActivityDate","getTime","now","predictionsWithScores","behavioralScores","scores","Object","values","score","mobileUsage","whatsappPreference","predictionsWithInsights","insights","insight","segmentCounts","groupBy","by","_count","_avg","toBeLessThan","sessions","mCPVisitorSessions","session","sessionId","visitorId","pageViews","sessionDuration","country","device","validDevices","browser","createdAt","updatedAt","sessionsWithEvents","events","event","timestamp","validEventTypes","type","sessionsWithBehavior","behaviorData","mobileCount","filter","s","mobilePercentage","countries","Set","map","africanCountries","hasAfricanCountries","some","includes","toLowerCase","toFixed","metrics","mCPMonitoringMetrics","metricType","value","validMetricTypes","responseTimeMetrics","cpuMetrics","memoryMetrics","metricsWithTags","tags","toBeNull","entries","key","recentMetrics","gte","orderBy","i","gaps","gap","push","maxGap","Math","max","avgGap","reduce","sum","campaignOrgs","select","orgIds","c","orgId","org","findUnique","predictionContacts","contactIds","p","take","status","campaignStats","aggregate","roi","dataCounts","getDataCounts","mcpCampaignMetrics","mcpCustomerPredictions","mcpVisitorSessions","mcpMonitoringMetrics"],"mappings":"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"}