4db0a84147e3287d78ee0daeca247051
/**
 * Error Handling & Type Safety Module
 * Replaces @ts-ignore statements and provides robust error handling
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ConfigValidator: function() {
        return ConfigValidator;
    },
    DataValidationError: function() {
        return DataValidationError;
    },
    FeatureEngineeringError: function() {
        return FeatureEngineeringError;
    },
    InputValidator: function() {
        return InputValidator;
    },
    MLError: function() {
        return MLError;
    },
    MLErrorBoundary: function() {
        return MLErrorBoundary;
    },
    ModelTrainingError: function() {
        return ModelTrainingError;
    },
    PredictionError: function() {
        return PredictionError;
    },
    SafeExecutor: function() {
        return SafeExecutor;
    },
    SafeNLPLibrary: function() {
        return SafeNLPLibrary;
    },
    errorBoundary: function() {
        return errorBoundary;
    },
    safeNLP: function() {
        return safeNLP;
    }
});
const _logger = require("../logger");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
class MLError extends Error {
    constructor(message, code, details){
        super(message), this.code = code, this.details = details;
        this.name = 'MLError';
    }
}
class DataValidationError extends MLError {
    constructor(message, details){
        super(message, 'DATA_VALIDATION_ERROR', details);
        this.name = 'DataValidationError';
    }
}
class ModelTrainingError extends MLError {
    constructor(message, details){
        super(message, 'MODEL_TRAINING_ERROR', details);
        this.name = 'ModelTrainingError';
    }
}
class PredictionError extends MLError {
    constructor(message, details){
        super(message, 'PREDICTION_ERROR', details);
        this.name = 'PredictionError';
    }
}
class FeatureEngineeringError extends MLError {
    constructor(message, details){
        super(message, 'FEATURE_ENGINEERING_ERROR', details);
        this.name = 'FeatureEngineeringError';
    }
}
class SafeNLPLibrary {
    async initializeNLP() {
        try {
            // Try to load compromise
            const { default: nlp } = await this.safeImport('compromise');
            this.nlpInstance = nlp;
            return true;
        } catch (error) {
            _logger.logger.warn('Failed to load NLP library, using fallback', {
                error: error instanceof Error ? error.message : 'Unknown error'
            });
            return false;
        }
    }
    async initializeSentiment() {
        try {
            // Try to load sentiment
            const { default: Sentiment } = await this.safeImport('sentiment');
            this.sentimentInstance = new Sentiment();
            return true;
        } catch (error) {
            _logger.logger.warn('Failed to load Sentiment library, using fallback', {
                error: error instanceof Error ? error.message : 'Unknown error'
            });
            return false;
        }
    }
    analyzeText(text) {
        if (!this.nlpInstance) {
            return this.fallbackTextAnalysis(text);
        }
        try {
            const doc = this.nlpInstance(text);
            return {
                words: text.split(/\s+/).filter((w)=>w.length > 0),
                sentences: text.split(/[.!?]+/).filter((s)=>s.trim().length > 0),
                nouns: doc.nouns().out('array') || [],
                verbs: doc.verbs().out('array') || [],
                adjectives: doc.adjectives().out('array') || []
            };
        } catch (error) {
            _logger.logger.warn('NLP analysis failed, using fallback', {
                error: error instanceof Error ? error.message : 'Unknown error'
            });
            return this.fallbackTextAnalysis(text);
        }
    }
    analyzeSentiment(text) {
        if (!this.sentimentInstance) {
            return this.fallbackSentimentAnalysis(text);
        }
        try {
            const result = this.sentimentInstance.analyze(text);
            return {
                score: result.score || 0,
                comparative: result.comparative || 0,
                positive: result.positive || [],
                negative: result.negative || []
            };
        } catch (error) {
            _logger.logger.warn('Sentiment analysis failed, using fallback', {
                error: error instanceof Error ? error.message : 'Unknown error'
            });
            return this.fallbackSentimentAnalysis(text);
        }
    }
    async safeImport(moduleName) {
        try {
            return await Promise.resolve(moduleName).then((p)=>/*#__PURE__*/ _interop_require_wildcard(require(p)));
        } catch (error) {
            throw new Error(`Failed to import ${moduleName}: ${error}`);
        }
    }
    fallbackTextAnalysis(text) {
        const words = text.split(/\s+/).filter((w)=>w.length > 0);
        const sentences = text.split(/[.!?]+/).filter((s)=>s.trim().length > 0);
        // Simple heuristic-based extraction
        const nouns = words.filter((word)=>word.length > 3 && ![
                'the',
                'and',
                'but',
                'for',
                'are',
                'with'
            ].includes(word.toLowerCase()));
        return {
            words,
            sentences,
            nouns: nouns.slice(0, 10),
            verbs: [],
            adjectives: []
        };
    }
    fallbackSentimentAnalysis(text) {
        const positiveWords = [
            'good',
            'great',
            'excellent',
            'amazing',
            'wonderful',
            'fantastic'
        ];
        const negativeWords = [
            'bad',
            'terrible',
            'awful',
            'horrible',
            'disappointing',
            'poor'
        ];
        const words = text.toLowerCase().split(/\s+/);
        let score = 0;
        const positive = [];
        const negative = [];
        words.forEach((word)=>{
            if (positiveWords.includes(word)) {
                score += 1;
                positive.push(word);
            } else if (negativeWords.includes(word)) {
                score -= 1;
                negative.push(word);
            }
        });
        return {
            score,
            comparative: score / Math.max(words.length, 1),
            positive,
            negative
        };
    }
    constructor(){
        this.nlpInstance = null;
        this.sentimentInstance = null;
    }
}
class InputValidator {
    static validateNumber(value, fieldName, options = {}) {
        if (value === null || value === undefined) {
            if (options.required) {
                throw new DataValidationError(`${fieldName} is required`);
            }
            return 0;
        }
        const num = Number(value);
        if (isNaN(num) || !isFinite(num)) {
            throw new DataValidationError(`${fieldName} must be a valid number`, {
                value,
                fieldName
            });
        }
        if (options.min !== undefined && num < options.min) {
            throw new DataValidationError(`${fieldName} must be >= ${options.min}`, {
                value: num,
                min: options.min
            });
        }
        if (options.max !== undefined && num > options.max) {
            throw new DataValidationError(`${fieldName} must be <= ${options.max}`, {
                value: num,
                max: options.max
            });
        }
        return num;
    }
    static validateString(value, fieldName, options = {}) {
        if (value === null || value === undefined) {
            if (options.required) {
                throw new DataValidationError(`${fieldName} is required`);
            }
            return '';
        }
        const str = String(value);
        if (options.minLength !== undefined && str.length < options.minLength) {
            throw new DataValidationError(`${fieldName} must be at least ${options.minLength} characters`, {
                value: str,
                actualLength: str.length,
                minLength: options.minLength
            });
        }
        if (options.maxLength !== undefined && str.length > options.maxLength) {
            throw new DataValidationError(`${fieldName} must be at most ${options.maxLength} characters`, {
                value: str,
                actualLength: str.length,
                maxLength: options.maxLength
            });
        }
        if (options.pattern && !options.pattern.test(str)) {
            throw new DataValidationError(`${fieldName} format is invalid`, {
                value: str,
                pattern: options.pattern.toString()
            });
        }
        return str;
    }
    static validateArray(value, fieldName, validator, options = {}) {
        if (value === null || value === undefined) {
            if (options.required) {
                throw new DataValidationError(`${fieldName} is required`);
            }
            return [];
        }
        if (!Array.isArray(value)) {
            throw new DataValidationError(`${fieldName} must be an array`, {
                value,
                actualType: typeof value
            });
        }
        if (options.minLength !== undefined && value.length < options.minLength) {
            throw new DataValidationError(`${fieldName} must have at least ${options.minLength} items`, {
                actualLength: value.length,
                minLength: options.minLength
            });
        }
        if (options.maxLength !== undefined && value.length > options.maxLength) {
            throw new DataValidationError(`${fieldName} must have at most ${options.maxLength} items`, {
                actualLength: value.length,
                maxLength: options.maxLength
            });
        }
        return value.map((item, index)=>{
            try {
                return validator(item, index);
            } catch (error) {
                throw new DataValidationError(`${fieldName}[${index}] is invalid`, {
                    error: error instanceof Error ? error.message : 'Unknown error',
                    index,
                    value: item
                });
            }
        });
    }
    static validateEmail(value, fieldName = 'email') {
        const email = this.validateString(value, fieldName, {
            required: true,
            pattern: /^[^\s@]+@[^\s@]+\.[^\s@]+$/
        });
        return email;
    }
    static validateFeatureVector(value, expectedLength, fieldName = 'features') {
        const features = this.validateArray(value, fieldName, (item, index)=>this.validateNumber(item, `${fieldName}[${index}]`, {
                required: true
            }), {
            required: true,
            minLength: expectedLength,
            maxLength: expectedLength
        });
        return features;
    }
}
class SafeExecutor {
    static async executeWithFallback(primaryFn, fallbackFn, operationName) {
        try {
            return await primaryFn();
        } catch (error) {
            _logger.logger.warn(`${operationName} primary method failed, using fallback`, {
                error: error instanceof Error ? error.message : 'Unknown error'
            });
            try {
                return await fallbackFn();
            } catch (fallbackError) {
                _logger.logger.error(`${operationName} fallback also failed`, {
                    originalError: error instanceof Error ? error.message : 'Unknown error',
                    fallbackError: fallbackError instanceof Error ? fallbackError.message : 'Unknown error'
                });
                throw fallbackError;
            }
        }
    }
    static executeWithRetry(fn, maxRetries = 3, delay = 1000) {
        return new Promise((resolve, reject)=>{
            let attempts = 0;
            const attempt = ()=>{
                try {
                    const result = fn();
                    resolve(result);
                } catch (error) {
                    attempts++;
                    if (attempts >= maxRetries) {
                        reject(error);
                    } else {
                        setTimeout(attempt, delay * attempts);
                    }
                }
            };
            attempt();
        });
    }
    static validateAndExecute(data, validator, executor, operationName) {
        try {
            validator(data);
            return executor(data);
        } catch (error) {
            if (error instanceof DataValidationError) {
                throw error;
            }
            throw new MLError(`${operationName} execution failed`, 'EXECUTION_ERROR', {
                error: error instanceof Error ? error.message : 'Unknown error'
            });
        }
    }
}
class ConfigValidator {
    static validateMLConfig(config) {
        if (!config || typeof config !== 'object') {
            throw new DataValidationError('Configuration must be an object');
        }
        const c = config;
        const modelType = InputValidator.validateString(c.modelType, 'modelType', {
            required: true
        });
        if (![
            'churn',
            'ltv',
            'content',
            'engagement'
        ].includes(modelType)) {
            throw new DataValidationError('Invalid model type', {
                validTypes: [
                    'churn',
                    'ltv',
                    'content',
                    'engagement'
                ],
                provided: modelType
            });
        }
        const features = InputValidator.validateArray(c.features, 'features', (item)=>InputValidator.validateString(item, 'feature', {
                required: true
            }), {
            required: true,
            minLength: 1
        });
        const scalingMethod = InputValidator.validateString(c.scalingMethod, 'scalingMethod', {
            required: true
        });
        if (![
            'minmax',
            'standard',
            'robust',
            'quantile'
        ].includes(scalingMethod)) {
            throw new DataValidationError('Invalid scaling method', {
                validMethods: [
                    'minmax',
                    'standard',
                    'robust',
                    'quantile'
                ],
                provided: scalingMethod
            });
        }
        const validationSplit = InputValidator.validateNumber(c.validationSplit, 'validationSplit', {
            required: true,
            min: 0.1,
            max: 0.5
        });
        const maxTrainingTime = InputValidator.validateNumber(c.maxTrainingTime, 'maxTrainingTime', {
            required: true,
            min: 1000,
            max: 300000
        });
        const enableFallbacks = Boolean(c.enableFallbacks);
        return {
            modelType: modelType,
            features,
            scalingMethod: scalingMethod,
            validationSplit,
            maxTrainingTime,
            enableFallbacks
        };
    }
}
class MLErrorBoundary {
    static getInstance() {
        if (!this.instance) {
            this.instance = new MLErrorBoundary();
        }
        return this.instance;
    }
    registerErrorHandler(errorType, handler) {
        this.errorHandlers.set(errorType, handler);
    }
    handleError(error, context) {
        let mlError;
        if (error instanceof MLError) {
            mlError = error;
        } else if (error instanceof Error) {
            mlError = new MLError(error.message, 'UNKNOWN_ERROR', {
                context
            });
        } else {
            mlError = new MLError('Unknown error occurred', 'UNKNOWN_ERROR', {
                context,
                error
            });
        }
        // Log error
        _logger.logger.error(`ML Error in ${context}`, {
            code: mlError.code,
            message: mlError.message,
            details: mlError.details
        });
        // Call registered handler if available
        const handler = this.errorHandlers.get(mlError.code);
        if (handler) {
            try {
                handler(mlError);
            } catch (handlerError) {
                _logger.logger.error('Error handler failed', {
                    originalError: mlError.message,
                    handlerError: handlerError instanceof Error ? handlerError.message : 'Unknown'
                });
            }
        }
        throw mlError;
    }
    constructor(){
        this.errorHandlers = new Map();
    }
}
const safeNLP = new SafeNLPLibrary();
const errorBoundary = MLErrorBoundary.getInstance();

//# sourceMappingURL=data:application/json;base64,