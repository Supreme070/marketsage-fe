3859e7eae56af00f4ed25f2cce34db45
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    SecurityEventType: function() {
        return SecurityEventType;
    },
    SecuritySeverity: function() {
        return SecuritySeverity;
    },
    logAdminAction: function() {
        return logAdminAction;
    },
    logAuthBlocked: function() {
        return logAuthBlocked;
    },
    logAuthFailure: function() {
        return logAuthFailure;
    },
    logAuthSuccess: function() {
        return logAuthSuccess;
    },
    logDataAccess: function() {
        return logDataAccess;
    },
    logSuspiciousActivity: function() {
        return logSuspiciousActivity;
    },
    securityMonitor: function() {
        return securityMonitor;
    }
});
const _logger = require("../logger");
const _redisclient = require("../cache/redis-client");
var SecurityEventType = /*#__PURE__*/ function(SecurityEventType) {
    SecurityEventType["LOGIN_SUCCESS"] = "LOGIN_SUCCESS";
    SecurityEventType["LOGIN_FAILURE"] = "LOGIN_FAILURE";
    SecurityEventType["LOGIN_BLOCKED"] = "LOGIN_BLOCKED";
    SecurityEventType["PASSWORD_CHANGE"] = "PASSWORD_CHANGE";
    SecurityEventType["SUSPICIOUS_ACTIVITY"] = "SUSPICIOUS_ACTIVITY";
    SecurityEventType["RATE_LIMIT_EXCEEDED"] = "RATE_LIMIT_EXCEEDED";
    SecurityEventType["UNAUTHORIZED_ACCESS"] = "UNAUTHORIZED_ACCESS";
    SecurityEventType["DATA_ACCESS"] = "DATA_ACCESS";
    SecurityEventType["BULK_OPERATION"] = "BULK_OPERATION";
    SecurityEventType["ADMIN_ACTION"] = "ADMIN_ACTION";
    SecurityEventType["API_ABUSE"] = "API_ABUSE";
    SecurityEventType["CORS_VIOLATION"] = "CORS_VIOLATION";
    return SecurityEventType;
}({});
var SecuritySeverity = /*#__PURE__*/ function(SecuritySeverity) {
    SecuritySeverity["LOW"] = "LOW";
    SecuritySeverity["MEDIUM"] = "MEDIUM";
    SecuritySeverity["HIGH"] = "HIGH";
    SecuritySeverity["CRITICAL"] = "CRITICAL";
    return SecuritySeverity;
}({});
const ANOMALY_PATTERNS = [
    {
        type: 'multiple_failed_logins',
        threshold: 5,
        timeWindow: 300,
        severity: "HIGH"
    },
    {
        type: 'rapid_api_calls',
        threshold: 100,
        timeWindow: 60,
        severity: "MEDIUM"
    },
    {
        type: 'unusual_access_hours',
        threshold: 1,
        timeWindow: 3600,
        severity: "MEDIUM"
    },
    {
        type: 'bulk_data_access',
        threshold: 1000,
        timeWindow: 300,
        severity: "HIGH"
    },
    {
        type: 'privilege_escalation',
        threshold: 3,
        timeWindow: 1800,
        severity: "CRITICAL"
    }
];
/**
 * Security monitoring and anomaly detection system
 */ class SecurityMonitor {
    constructor(){
        this.eventBuffer = [];
        this.bufferSize = 1000;
        // Start periodic anomaly detection
        setInterval(()=>this.detectAnomalies(), 60000); // Every minute
    }
    static getInstance() {
        if (!SecurityMonitor.instance) {
            SecurityMonitor.instance = new SecurityMonitor();
        }
        return SecurityMonitor.instance;
    }
    /**
   * Log a security event
   */ async logEvent(event) {
        const securityEvent = {
            ...event,
            id: `sec_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
            timestamp: new Date()
        };
        // Add to in-memory buffer
        this.eventBuffer.push(securityEvent);
        if (this.eventBuffer.length > this.bufferSize) {
            this.eventBuffer.shift(); // Remove oldest event
        }
        // Cache in Redis for quick access
        const cacheKey = `security_event:${securityEvent.id}`;
        await _redisclient.redisCache.set(cacheKey, securityEvent, _redisclient.CACHE_TTL.DAY);
        // Log to structured logger
        _logger.logger.warn(`Security Event: ${event.type}`, {
            eventId: securityEvent.id,
            type: event.type,
            severity: event.severity,
            userId: event.userId,
            email: event.email,
            ipAddress: event.ipAddress,
            organizationId: event.organizationId,
            resource: event.resource,
            action: event.action,
            description: event.description,
            metadata: event.metadata
        });
        // Check for immediate anomalies
        await this.checkImmediateThreats(securityEvent);
    }
    /**
   * Log authentication events
   */ async logAuthEvent(type, request) {
        const severity = type === "LOGIN_SUCCESS" ? "LOW" : type === "LOGIN_BLOCKED" ? "HIGH" : "MEDIUM";
        await this.logEvent({
            type,
            severity,
            userId: request.userId,
            email: request.email,
            ipAddress: request.ipAddress,
            userAgent: request.userAgent,
            organizationId: request.organizationId,
            description: `Authentication attempt: ${type.toLowerCase().replace('_', ' ')}`
        });
    }
    /**
   * Log data access events
   */ async logDataAccess(userId, email, ipAddress, resource, action, recordCount, organizationId) {
        const severity = recordCount && recordCount > 100 ? "MEDIUM" : "LOW";
        await this.logEvent({
            type: "DATA_ACCESS",
            severity,
            userId,
            email,
            ipAddress,
            organizationId,
            resource,
            action,
            description: `Data access: ${action} on ${resource}`,
            metadata: {
                recordCount
            }
        });
    }
    /**
   * Log suspicious activity
   */ async logSuspiciousActivity(ipAddress, reason, metadata, userId, email) {
        await this.logEvent({
            type: "SUSPICIOUS_ACTIVITY",
            severity: "HIGH",
            userId,
            email,
            ipAddress,
            description: `Suspicious activity detected: ${reason}`,
            metadata
        });
    }
    /**
   * Log admin actions
   */ async logAdminAction(userId, email, ipAddress, action, resource, organizationId) {
        await this.logEvent({
            type: "ADMIN_ACTION",
            severity: "MEDIUM",
            userId,
            email,
            ipAddress,
            organizationId,
            resource,
            action,
            description: `Admin action: ${action} on ${resource}`
        });
    }
    /**
   * Check for immediate security threats
   */ async checkImmediateThreats(event) {
        // Check for rapid failed login attempts
        if (event.type === "LOGIN_FAILURE") {
            const recentFailures = await this.getRecentEvents("LOGIN_FAILURE", event.ipAddress, 300 // 5 minutes
            );
            if (recentFailures.length >= 5) {
                await this.logEvent({
                    type: "LOGIN_BLOCKED",
                    severity: "HIGH",
                    ipAddress: event.ipAddress,
                    email: event.email,
                    description: 'IP blocked due to multiple failed login attempts',
                    metadata: {
                        failureCount: recentFailures.length
                    }
                });
            }
        }
        // Check for unusual access patterns
        if (event.type === "DATA_ACCESS" && event.metadata?.recordCount > 1000) {
            await this.logSuspiciousActivity(event.ipAddress, 'Bulk data access detected', {
                recordCount: event.metadata.recordCount
            }, event.userId, event.email);
        }
    }
    /**
   * Detect anomalies based on patterns
   */ async detectAnomalies() {
        try {
            for (const pattern of ANOMALY_PATTERNS){
                await this.checkPattern(pattern);
            }
        } catch (error) {
            _logger.logger.error('Anomaly detection failed:', error);
        }
    }
    /**
   * Check specific anomaly pattern
   */ async checkPattern(pattern) {
        const now = Date.now();
        const windowStart = now - pattern.timeWindow * 1000;
        // Get events in time window
        const recentEvents = this.eventBuffer.filter((event)=>event.timestamp.getTime() >= windowStart);
        let anomalyDetected = false;
        let anomalyData = {};
        switch(pattern.type){
            case 'multiple_failed_logins':
                const failedLogins = recentEvents.filter((e)=>e.type === "LOGIN_FAILURE");
                const ipGroups = this.groupByIP(failedLogins);
                for (const [ip, events] of Object.entries(ipGroups)){
                    if (events.length >= pattern.threshold) {
                        anomalyDetected = true;
                        anomalyData = {
                            ip,
                            failureCount: events.length
                        };
                        break;
                    }
                }
                break;
            case 'rapid_api_calls':
                const apiCalls = recentEvents.filter((e)=>e.type === "DATA_ACCESS");
                const userGroups = this.groupByUser(apiCalls);
                for (const [userId, events] of Object.entries(userGroups)){
                    if (events.length >= pattern.threshold) {
                        anomalyDetected = true;
                        anomalyData = {
                            userId,
                            callCount: events.length
                        };
                        break;
                    }
                }
                break;
            case 'unusual_access_hours':
                const currentHour = new Date().getHours();
                if (currentHour >= 2 && currentHour <= 6) {
                    const accessEvents = recentEvents.filter((e)=>e.type === "DATA_ACCESS" || e.type === "LOGIN_SUCCESS");
                    if (accessEvents.length > 0) {
                        anomalyDetected = true;
                        anomalyData = {
                            hour: currentHour,
                            eventCount: accessEvents.length
                        };
                    }
                }
                break;
        }
        if (anomalyDetected) {
            await this.logEvent({
                type: "SUSPICIOUS_ACTIVITY",
                severity: pattern.severity,
                ipAddress: anomalyData.ip || 'unknown',
                description: `Anomaly detected: ${pattern.type}`,
                metadata: {
                    pattern: pattern.type,
                    ...anomalyData
                }
            });
        }
    }
    /**
   * Get recent events by type and IP
   */ async getRecentEvents(type, ipAddress, timeWindowSeconds) {
        const cutoff = new Date(Date.now() - timeWindowSeconds * 1000);
        return this.eventBuffer.filter((event)=>event.type === type && event.ipAddress === ipAddress && event.timestamp >= cutoff);
    }
    /**
   * Group events by IP address
   */ groupByIP(events) {
        return events.reduce((groups, event)=>{
            const ip = event.ipAddress;
            groups[ip] = groups[ip] || [];
            groups[ip].push(event);
            return groups;
        }, {});
    }
    /**
   * Group events by user ID
   */ groupByUser(events) {
        return events.reduce((groups, event)=>{
            const userId = event.userId || 'anonymous';
            groups[userId] = groups[userId] || [];
            groups[userId].push(event);
            return groups;
        }, {});
    }
    /**
   * Get security dashboard data
   */ async getSecurityDashboard(timeRange = 86400) {
        const cutoff = new Date(Date.now() - timeRange * 1000);
        const recentEvents = this.eventBuffer.filter((event)=>event.timestamp >= cutoff);
        const criticalEvents = recentEvents.filter((event)=>event.severity === "CRITICAL" || event.severity === "HIGH").length;
        const threatCounts = recentEvents.reduce((counts, event)=>{
            counts[event.type] = (counts[event.type] || 0) + 1;
            return counts;
        }, {});
        const topThreats = Object.entries(threatCounts).map(([type, count])=>({
                type: type,
                count
            })).sort((a, b)=>b.count - a.count).slice(0, 5);
        return {
            totalEvents: recentEvents.length,
            criticalEvents,
            topThreats,
            recentEvents: recentEvents.slice(-10) // Last 10 events
        };
    }
}
const securityMonitor = SecurityMonitor.getInstance();
const logAuthSuccess = (request)=>securityMonitor.logAuthEvent("LOGIN_SUCCESS", request);
const logAuthFailure = (request)=>securityMonitor.logAuthEvent("LOGIN_FAILURE", request);
const logAuthBlocked = (request)=>securityMonitor.logAuthEvent("LOGIN_BLOCKED", request);
const logDataAccess = (userId, email, ipAddress, resource, action, recordCount, organizationId)=>securityMonitor.logDataAccess(userId, email, ipAddress, resource, action, recordCount, organizationId);
const logSuspiciousActivity = (ipAddress, reason, metadata, userId, email)=>securityMonitor.logSuspiciousActivity(ipAddress, reason, metadata, userId, email);
const logAdminAction = (userId, email, ipAddress, action, resource, organizationId)=>securityMonitor.logAdminAction(userId, email, ipAddress, action, resource, organizationId);

//# sourceMappingURL=data:application/json;base64,