702fb931af987d0b87cc9166971764aa
/**
 * Provider Integration Tests
 * Tests all BYOP implementations and platform fallbacks
 */ "use strict";
// Mock prisma for testing
jest.mock('@/lib/db/prisma', ()=>({
        sMSProvider: {
            findFirst: jest.fn()
        },
        emailProvider: {
            findFirst: jest.fn()
        },
        whatsAppBusinessConfig: {
            findFirst: jest.fn()
        },
        organization: {
            findUnique: jest.fn(),
            update: jest.fn()
        },
        messagingUsage: {
            create: jest.fn()
        },
        creditTransaction: {
            create: jest.fn()
        }
    }));
// Mock logger
jest.mock('@/lib/logger', ()=>({
        logger: {
            info: jest.fn(),
            error: jest.fn(),
            warn: jest.fn()
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _emailservice = require("../../lib/email-providers/email-service");
const _smsservice = require("../../lib/sms-providers/sms-service");
const _whatsappservice = require("../../lib/whatsapp-service");
const _unifiedmessagingservice = require("../../lib/messaging/unified-messaging-service");
const _prisma = /*#__PURE__*/ _interop_require_default(require("../../lib/db/prisma"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock environment variables for testing
const mockEnv = {
    SMS_PROVIDER: 'mock',
    WHATSAPP_ACCESS_TOKEN: 'mock_token',
    WHATSAPP_PHONE_NUMBER_ID: 'mock_phone_id',
    EMAIL_PROVIDER: 'mock',
    ENCRYPTION_KEY: 'test-encryption-key-for-testing'
};
describe('Provider Integration Tests', ()=>{
    const testOrganizationId = 'test-org-123';
    const testPhoneNumber = '+2348012345678';
    const testEmail = 'test@example.com';
    const testMessage = 'Test message from MarketSage';
    beforeAll(()=>{
        // Set mock environment variables
        Object.assign(process.env, mockEnv);
    });
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    describe('SMS Provider Integration', ()=>{
        test('should use organization-specific SMS provider when configured', async ()=>{
            // Mock organization SMS provider
            _prisma.default.sMSProvider.findFirst.mockResolvedValue({
                id: 'sms-provider-1',
                organizationId: testOrganizationId,
                providerType: 'TWILIO',
                accountSid: 'encrypted_account_sid',
                authToken: 'encrypted_auth_token',
                fromNumber: '+1234567890',
                isActive: true
            });
            const result = await _smsservice.smsService.sendSMS(testPhoneNumber, testMessage, testOrganizationId);
            expect(_prisma.default.sMSProvider.findFirst).toHaveBeenCalledWith({
                where: {
                    organizationId: testOrganizationId,
                    isActive: true
                }
            });
            // Should succeed (mock provider)
            expect(result.success).toBe(true);
            expect(result.messageId).toBeDefined();
        });
        test('should fallback to platform default when no organization provider', async ()=>{
            // Mock no organization SMS provider
            _prisma.default.sMSProvider.findFirst.mockResolvedValue(null);
            const result = await _smsservice.smsService.sendSMS(testPhoneNumber, testMessage, testOrganizationId);
            expect(_prisma.default.sMSProvider.findFirst).toHaveBeenCalled();
            expect(result.success).toBe(true); // Mock provider should succeed
            expect(result.provider).toBeDefined();
        });
        test('should test organization SMS configuration', async ()=>{
            _prisma.default.sMSProvider.findFirst.mockResolvedValue({
                organizationId: testOrganizationId,
                providerType: 'TWILIO',
                accountSid: 'test_sid',
                authToken: 'test_token',
                fromNumber: '+1234567890',
                isActive: true
            });
            const result = await _smsservice.smsService.testOrganizationSMS(testOrganizationId, testPhoneNumber);
            expect(result.success).toBe(true);
        });
    });
    describe('Email Provider Integration', ()=>{
        test('should use organization-specific email provider when configured', async ()=>{
            // Mock organization email provider
            _prisma.default.emailProvider.findFirst.mockResolvedValue({
                id: 'email-provider-1',
                organizationId: testOrganizationId,
                providerType: 'sendgrid',
                apiKey: 'encrypted_api_key',
                fromEmail: 'test@organization.com',
                isActive: true
            });
            const result = await _emailservice.emailService.sendEmail(testOrganizationId, {
                to: testEmail,
                from: 'test@organization.com',
                subject: 'Test Email',
                html: '<p>Test message</p>',
                text: 'Test message'
            });
            expect(_prisma.default.emailProvider.findFirst).toHaveBeenCalledWith({
                where: {
                    organizationId: testOrganizationId,
                    isActive: true
                }
            });
            expect(result.success).toBe(true);
        });
        test('should fallback to platform default when no organization provider', async ()=>{
            // Mock no organization email provider
            _prisma.default.emailProvider.findFirst.mockResolvedValue(null);
            const result = await _emailservice.emailService.sendEmail(testOrganizationId, {
                to: testEmail,
                from: 'noreply@marketsage.africa',
                subject: 'Test Email',
                html: '<p>Test message</p>',
                text: 'Test message'
            });
            expect(result.success).toBe(true);
            expect(result.provider).toBe('platform-default');
        });
        test('should test organization email configuration', async ()=>{
            _prisma.default.emailProvider.findFirst.mockResolvedValue({
                organizationId: testOrganizationId,
                providerType: 'sendgrid',
                apiKey: 'test_key',
                fromEmail: 'test@organization.com',
                isActive: true
            });
            _prisma.default.organization.findUnique.mockResolvedValue({
                name: 'Test Organization'
            });
            const result = await _emailservice.emailService.testOrganizationEmail(testOrganizationId, testEmail, 'Test Subject', 'Test message');
            expect(result.success).toBe(true);
        });
    });
    describe('WhatsApp Provider Integration', ()=>{
        test('should use organization-specific WhatsApp provider when configured', async ()=>{
            // Mock organization WhatsApp provider
            _prisma.default.whatsAppBusinessConfig.findFirst.mockResolvedValue({
                id: 'whatsapp-config-1',
                organizationId: testOrganizationId,
                accessToken: 'encrypted_access_token',
                phoneNumberId: 'org_phone_number_id',
                isActive: true
            });
            const result = await _whatsappservice.whatsappService.sendTextMessage(testPhoneNumber, testMessage, testOrganizationId);
            expect(_prisma.default.whatsAppBusinessConfig.findFirst).toHaveBeenCalledWith({
                where: {
                    organizationId: testOrganizationId,
                    isActive: true
                }
            });
            expect(result.success).toBe(true);
        });
        test('should fallback to platform default when no organization provider', async ()=>{
            // Mock no organization WhatsApp provider
            _prisma.default.whatsAppBusinessConfig.findFirst.mockResolvedValue(null);
            const result = await _whatsappservice.whatsappService.sendTextMessage(testPhoneNumber, testMessage, testOrganizationId);
            expect(result.success).toBe(true); // Mock should succeed
        });
        test('should test organization WhatsApp configuration', async ()=>{
            _prisma.default.whatsAppBusinessConfig.findFirst.mockResolvedValue({
                organizationId: testOrganizationId,
                accessToken: 'test_token',
                phoneNumberId: 'test_phone_id',
                isActive: true
            });
            _prisma.default.organization.findUnique.mockResolvedValue({
                name: 'Test Organization'
            });
            const result = await _whatsappservice.whatsappService.testOrganizationWhatsApp(testOrganizationId, testPhoneNumber);
            expect(result.success).toBe(true);
        });
    });
    describe('Unified Messaging Service Integration', ()=>{
        beforeEach(()=>{
            // Mock organization configuration
            _prisma.default.organization.findUnique.mockResolvedValue({
                id: testOrganizationId,
                messagingModel: 'customer_managed',
                creditBalance: 100,
                autoTopUp: false,
                autoTopUpAmount: 50,
                autoTopUpThreshold: 10,
                preferredProviders: '{}',
                region: 'ng'
            });
        });
        test('should send SMS via unified service with customer-managed model', async ()=>{
            _prisma.default.sMSProvider.findFirst.mockResolvedValue({
                organizationId: testOrganizationId,
                providerType: 'TWILIO',
                accountSid: 'test_sid',
                authToken: 'test_token',
                fromNumber: '+1234567890',
                isActive: true
            });
            const result = await _unifiedmessagingservice.unifiedMessagingService.sendMessage({
                to: testPhoneNumber,
                content: testMessage,
                channel: 'sms',
                organizationId: testOrganizationId
            });
            expect(result.success).toBe(true);
            expect(result.cost).toBe(0); // Customer pays directly
            expect(result.provider).toBeDefined();
        });
        test('should send email via unified service with customer-managed model', async ()=>{
            _prisma.default.emailProvider.findFirst.mockResolvedValue({
                organizationId: testOrganizationId,
                providerType: 'sendgrid',
                apiKey: 'test_key',
                fromEmail: 'test@organization.com',
                isActive: true
            });
            const result = await _unifiedmessagingservice.unifiedMessagingService.sendMessage({
                to: testEmail,
                content: testMessage,
                channel: 'email',
                organizationId: testOrganizationId
            });
            expect(result.success).toBe(true);
            expect(result.cost).toBe(0); // Customer pays directly
        });
        test('should send WhatsApp via unified service with customer-managed model', async ()=>{
            _prisma.default.whatsAppBusinessConfig.findFirst.mockResolvedValue({
                organizationId: testOrganizationId,
                accessToken: 'test_token',
                phoneNumberId: 'test_phone_id',
                isActive: true
            });
            const result = await _unifiedmessagingservice.unifiedMessagingService.sendMessage({
                to: testPhoneNumber,
                content: testMessage,
                channel: 'whatsapp',
                organizationId: testOrganizationId
            });
            expect(result.success).toBe(true);
            expect(result.cost).toBe(0); // Customer pays directly
        });
        test('should handle platform-managed messaging model', async ()=>{
            // Mock platform-managed organization
            _prisma.default.organization.findUnique.mockResolvedValue({
                id: testOrganizationId,
                messagingModel: 'platform_managed',
                creditBalance: 100,
                autoTopUp: false,
                region: 'ng'
            });
            // Mock no organization providers (should use platform defaults)
            _prisma.default.sMSProvider.findFirst.mockResolvedValue(null);
            const result = await _unifiedmessagingservice.unifiedMessagingService.sendMessage({
                to: testPhoneNumber,
                content: testMessage,
                channel: 'sms',
                organizationId: testOrganizationId
            });
            expect(result.success).toBe(true);
            expect(result.cost).toBeGreaterThan(0); // Platform charges credits
        });
        test('should get organization credit balance', async ()=>{
            _prisma.default.organization.findUnique.mockResolvedValue({
                creditBalance: 150
            });
            const balance = await _unifiedmessagingservice.unifiedMessagingService.getCreditBalance(testOrganizationId);
            expect(balance).toBe(150);
        });
    });
    describe('Provider Configuration Validation', ()=>{
        test('should validate SMS provider configurations', ()=>{
            expect(_smsservice.smsService.validatePhoneNumber('+2348012345678')).toBe(true);
            expect(_smsservice.smsService.validatePhoneNumber('08012345678')).toBe(true);
            expect(_smsservice.smsService.validatePhoneNumber('invalid')).toBe(false);
        });
        test('should validate email provider configurations', ()=>{
            expect(_emailservice.emailService.validateProviderConfig('sendgrid', {
                apiKey: 'test'
            })).toBe(true);
            expect(_emailservice.emailService.validateProviderConfig('mailgun', {
                apiKey: 'test',
                domain: 'test.com'
            })).toBe(true);
            expect(_emailservice.emailService.validateProviderConfig('smtp', {
                smtpHost: 'smtp.test.com',
                smtpUsername: 'user',
                smtpPassword: 'pass'
            })).toBe(true);
            expect(_emailservice.emailService.validateProviderConfig('sendgrid', {})).toBe(false);
        });
        test('should validate WhatsApp phone numbers', ()=>{
            expect(_whatsappservice.whatsappService.validatePhoneNumber('+2348012345678')).toBe(true);
            expect(_whatsappservice.whatsappService.validatePhoneNumber('08012345678')).toBe(true);
            expect(_whatsappservice.whatsappService.validatePhoneNumber('+254701234567')).toBe(true); // Kenya
            expect(_whatsappservice.whatsappService.validatePhoneNumber('invalid')).toBe(false);
        });
    });
    describe('Cache Management', ()=>{
        test('should clear SMS provider cache', ()=>{
            expect(()=>_smsservice.smsService.clearOrganizationCache(testOrganizationId)).not.toThrow();
        });
        test('should clear email provider cache', ()=>{
            expect(()=>_emailservice.emailService.clearOrganizationCache(testOrganizationId)).not.toThrow();
        });
        test('should clear WhatsApp provider cache', ()=>{
            expect(()=>_whatsappservice.whatsappService.clearOrganizationCache(testOrganizationId)).not.toThrow();
        });
    });
    describe('Error Handling', ()=>{
        test('should handle database connection errors gracefully', async ()=>{
            _prisma.default.sMSProvider.findFirst.mockRejectedValue(new Error('Database connection failed'));
            const result = await _smsservice.smsService.sendSMS(testPhoneNumber, testMessage, testOrganizationId);
            // Should fallback to platform default
            expect(result.success).toBe(true);
        });
        test('should handle invalid encryption keys gracefully', async ()=>{
            process.env.ENCRYPTION_KEY = 'invalid-key';
            _prisma.default.emailProvider.findFirst.mockResolvedValue({
                organizationId: testOrganizationId,
                providerType: 'sendgrid',
                apiKey: 'invalid_encrypted_data',
                isActive: true
            });
            const result = await _emailservice.emailService.sendEmail(testOrganizationId, {
                to: testEmail,
                from: 'test@example.com',
                subject: 'Test',
                html: 'Test'
            });
            // Should still attempt to send (with fallback behavior)
            expect(result).toBeDefined();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,