{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/__tests__/integration/provider-integrations.test.ts"],"sourcesContent":["/**\n * Provider Integration Tests\n * Tests all BYOP implementations and platform fallbacks\n */\n\nimport { emailService } from '@/lib/email-providers/email-service';\nimport { smsService } from '@/lib/sms-providers/sms-service';\nimport { whatsappService } from '@/lib/whatsapp-service';\nimport { unifiedMessagingService } from '@/lib/messaging/unified-messaging-service';\nimport prisma from '@/lib/db/prisma';\n\n// Mock environment variables for testing\nconst mockEnv = {\n  SMS_PROVIDER: 'mock',\n  WHATSAPP_ACCESS_TOKEN: 'mock_token',\n  WHATSAPP_PHONE_NUMBER_ID: 'mock_phone_id',\n  EMAIL_PROVIDER: 'mock',\n  ENCRYPTION_KEY: 'test-encryption-key-for-testing'\n};\n\n// Mock prisma for testing\njest.mock('@/lib/db/prisma', () => ({\n  sMSProvider: {\n    findFirst: jest.fn(),\n  },\n  emailProvider: {\n    findFirst: jest.fn(),\n  },\n  whatsAppBusinessConfig: {\n    findFirst: jest.fn(),\n  },\n  organization: {\n    findUnique: jest.fn(),\n    update: jest.fn(),\n  },\n  messagingUsage: {\n    create: jest.fn(),\n  },\n  creditTransaction: {\n    create: jest.fn(),\n  }\n}));\n\n// Mock logger\njest.mock('@/lib/logger', () => ({\n  logger: {\n    info: jest.fn(),\n    error: jest.fn(),\n    warn: jest.fn(),\n  }\n}));\n\ndescribe('Provider Integration Tests', () => {\n  const testOrganizationId = 'test-org-123';\n  const testPhoneNumber = '+2348012345678';\n  const testEmail = 'test@example.com';\n  const testMessage = 'Test message from MarketSage';\n\n  beforeAll(() => {\n    // Set mock environment variables\n    Object.assign(process.env, mockEnv);\n  });\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('SMS Provider Integration', () => {\n    test('should use organization-specific SMS provider when configured', async () => {\n      // Mock organization SMS provider\n      (prisma.sMSProvider.findFirst as jest.Mock).mockResolvedValue({\n        id: 'sms-provider-1',\n        organizationId: testOrganizationId,\n        providerType: 'TWILIO',\n        accountSid: 'encrypted_account_sid',\n        authToken: 'encrypted_auth_token',\n        fromNumber: '+1234567890',\n        isActive: true\n      });\n\n      const result = await smsService.sendSMS(testPhoneNumber, testMessage, testOrganizationId);\n\n      expect(prisma.sMSProvider.findFirst).toHaveBeenCalledWith({\n        where: {\n          organizationId: testOrganizationId,\n          isActive: true\n        }\n      });\n\n      // Should succeed (mock provider)\n      expect(result.success).toBe(true);\n      expect(result.messageId).toBeDefined();\n    });\n\n    test('should fallback to platform default when no organization provider', async () => {\n      // Mock no organization SMS provider\n      (prisma.sMSProvider.findFirst as jest.Mock).mockResolvedValue(null);\n\n      const result = await smsService.sendSMS(testPhoneNumber, testMessage, testOrganizationId);\n\n      expect(prisma.sMSProvider.findFirst).toHaveBeenCalled();\n      expect(result.success).toBe(true); // Mock provider should succeed\n      expect(result.provider).toBeDefined();\n    });\n\n    test('should test organization SMS configuration', async () => {\n      (prisma.sMSProvider.findFirst as jest.Mock).mockResolvedValue({\n        organizationId: testOrganizationId,\n        providerType: 'TWILIO',\n        accountSid: 'test_sid',\n        authToken: 'test_token',\n        fromNumber: '+1234567890',\n        isActive: true\n      });\n\n      const result = await smsService.testOrganizationSMS(testOrganizationId, testPhoneNumber);\n\n      expect(result.success).toBe(true);\n    });\n  });\n\n  describe('Email Provider Integration', () => {\n    test('should use organization-specific email provider when configured', async () => {\n      // Mock organization email provider\n      (prisma.emailProvider.findFirst as jest.Mock).mockResolvedValue({\n        id: 'email-provider-1',\n        organizationId: testOrganizationId,\n        providerType: 'sendgrid',\n        apiKey: 'encrypted_api_key',\n        fromEmail: 'test@organization.com',\n        isActive: true\n      });\n\n      const result = await emailService.sendEmail(testOrganizationId, {\n        to: testEmail,\n        from: 'test@organization.com',\n        subject: 'Test Email',\n        html: '<p>Test message</p>',\n        text: 'Test message'\n      });\n\n      expect(prisma.emailProvider.findFirst).toHaveBeenCalledWith({\n        where: {\n          organizationId: testOrganizationId,\n          isActive: true\n        }\n      });\n\n      expect(result.success).toBe(true);\n    });\n\n    test('should fallback to platform default when no organization provider', async () => {\n      // Mock no organization email provider\n      (prisma.emailProvider.findFirst as jest.Mock).mockResolvedValue(null);\n\n      const result = await emailService.sendEmail(testOrganizationId, {\n        to: testEmail,\n        from: 'noreply@marketsage.africa',\n        subject: 'Test Email',\n        html: '<p>Test message</p>',\n        text: 'Test message'\n      });\n\n      expect(result.success).toBe(true);\n      expect(result.provider).toBe('platform-default');\n    });\n\n    test('should test organization email configuration', async () => {\n      (prisma.emailProvider.findFirst as jest.Mock).mockResolvedValue({\n        organizationId: testOrganizationId,\n        providerType: 'sendgrid',\n        apiKey: 'test_key',\n        fromEmail: 'test@organization.com',\n        isActive: true\n      });\n\n      (prisma.organization.findUnique as jest.Mock).mockResolvedValue({\n        name: 'Test Organization'\n      });\n\n      const result = await emailService.testOrganizationEmail(\n        testOrganizationId,\n        testEmail,\n        'Test Subject',\n        'Test message'\n      );\n\n      expect(result.success).toBe(true);\n    });\n  });\n\n  describe('WhatsApp Provider Integration', () => {\n    test('should use organization-specific WhatsApp provider when configured', async () => {\n      // Mock organization WhatsApp provider\n      (prisma.whatsAppBusinessConfig.findFirst as jest.Mock).mockResolvedValue({\n        id: 'whatsapp-config-1',\n        organizationId: testOrganizationId,\n        accessToken: 'encrypted_access_token',\n        phoneNumberId: 'org_phone_number_id',\n        isActive: true\n      });\n\n      const result = await whatsappService.sendTextMessage(testPhoneNumber, testMessage, testOrganizationId);\n\n      expect(prisma.whatsAppBusinessConfig.findFirst).toHaveBeenCalledWith({\n        where: {\n          organizationId: testOrganizationId,\n          isActive: true\n        }\n      });\n\n      expect(result.success).toBe(true);\n    });\n\n    test('should fallback to platform default when no organization provider', async () => {\n      // Mock no organization WhatsApp provider\n      (prisma.whatsAppBusinessConfig.findFirst as jest.Mock).mockResolvedValue(null);\n\n      const result = await whatsappService.sendTextMessage(testPhoneNumber, testMessage, testOrganizationId);\n\n      expect(result.success).toBe(true); // Mock should succeed\n    });\n\n    test('should test organization WhatsApp configuration', async () => {\n      (prisma.whatsAppBusinessConfig.findFirst as jest.Mock).mockResolvedValue({\n        organizationId: testOrganizationId,\n        accessToken: 'test_token',\n        phoneNumberId: 'test_phone_id',\n        isActive: true\n      });\n\n      (prisma.organization.findUnique as jest.Mock).mockResolvedValue({\n        name: 'Test Organization'\n      });\n\n      const result = await whatsappService.testOrganizationWhatsApp(testOrganizationId, testPhoneNumber);\n\n      expect(result.success).toBe(true);\n    });\n  });\n\n  describe('Unified Messaging Service Integration', () => {\n    beforeEach(() => {\n      // Mock organization configuration\n      (prisma.organization.findUnique as jest.Mock).mockResolvedValue({\n        id: testOrganizationId,\n        messagingModel: 'customer_managed',\n        creditBalance: 100,\n        autoTopUp: false,\n        autoTopUpAmount: 50,\n        autoTopUpThreshold: 10,\n        preferredProviders: '{}',\n        region: 'ng'\n      });\n    });\n\n    test('should send SMS via unified service with customer-managed model', async () => {\n      (prisma.sMSProvider.findFirst as jest.Mock).mockResolvedValue({\n        organizationId: testOrganizationId,\n        providerType: 'TWILIO',\n        accountSid: 'test_sid',\n        authToken: 'test_token',\n        fromNumber: '+1234567890',\n        isActive: true\n      });\n\n      const result = await unifiedMessagingService.sendMessage({\n        to: testPhoneNumber,\n        content: testMessage,\n        channel: 'sms',\n        organizationId: testOrganizationId\n      });\n\n      expect(result.success).toBe(true);\n      expect(result.cost).toBe(0); // Customer pays directly\n      expect(result.provider).toBeDefined();\n    });\n\n    test('should send email via unified service with customer-managed model', async () => {\n      (prisma.emailProvider.findFirst as jest.Mock).mockResolvedValue({\n        organizationId: testOrganizationId,\n        providerType: 'sendgrid',\n        apiKey: 'test_key',\n        fromEmail: 'test@organization.com',\n        isActive: true\n      });\n\n      const result = await unifiedMessagingService.sendMessage({\n        to: testEmail,\n        content: testMessage,\n        channel: 'email',\n        organizationId: testOrganizationId\n      });\n\n      expect(result.success).toBe(true);\n      expect(result.cost).toBe(0); // Customer pays directly\n    });\n\n    test('should send WhatsApp via unified service with customer-managed model', async () => {\n      (prisma.whatsAppBusinessConfig.findFirst as jest.Mock).mockResolvedValue({\n        organizationId: testOrganizationId,\n        accessToken: 'test_token',\n        phoneNumberId: 'test_phone_id',\n        isActive: true\n      });\n\n      const result = await unifiedMessagingService.sendMessage({\n        to: testPhoneNumber,\n        content: testMessage,\n        channel: 'whatsapp',\n        organizationId: testOrganizationId\n      });\n\n      expect(result.success).toBe(true);\n      expect(result.cost).toBe(0); // Customer pays directly\n    });\n\n    test('should handle platform-managed messaging model', async () => {\n      // Mock platform-managed organization\n      (prisma.organization.findUnique as jest.Mock).mockResolvedValue({\n        id: testOrganizationId,\n        messagingModel: 'platform_managed',\n        creditBalance: 100,\n        autoTopUp: false,\n        region: 'ng'\n      });\n\n      // Mock no organization providers (should use platform defaults)\n      (prisma.sMSProvider.findFirst as jest.Mock).mockResolvedValue(null);\n\n      const result = await unifiedMessagingService.sendMessage({\n        to: testPhoneNumber,\n        content: testMessage,\n        channel: 'sms',\n        organizationId: testOrganizationId\n      });\n\n      expect(result.success).toBe(true);\n      expect(result.cost).toBeGreaterThan(0); // Platform charges credits\n    });\n\n    test('should get organization credit balance', async () => {\n      (prisma.organization.findUnique as jest.Mock).mockResolvedValue({\n        creditBalance: 150\n      });\n\n      const balance = await unifiedMessagingService.getCreditBalance(testOrganizationId);\n\n      expect(balance).toBe(150);\n    });\n  });\n\n  describe('Provider Configuration Validation', () => {\n    test('should validate SMS provider configurations', () => {\n      expect(smsService.validatePhoneNumber('+2348012345678')).toBe(true);\n      expect(smsService.validatePhoneNumber('08012345678')).toBe(true);\n      expect(smsService.validatePhoneNumber('invalid')).toBe(false);\n    });\n\n    test('should validate email provider configurations', () => {\n      expect(emailService.validateProviderConfig('sendgrid', { apiKey: 'test' })).toBe(true);\n      expect(emailService.validateProviderConfig('mailgun', { apiKey: 'test', domain: 'test.com' })).toBe(true);\n      expect(emailService.validateProviderConfig('smtp', { \n        smtpHost: 'smtp.test.com', \n        smtpUsername: 'user', \n        smtpPassword: 'pass' \n      })).toBe(true);\n      expect(emailService.validateProviderConfig('sendgrid', {})).toBe(false);\n    });\n\n    test('should validate WhatsApp phone numbers', () => {\n      expect(whatsappService.validatePhoneNumber('+2348012345678')).toBe(true);\n      expect(whatsappService.validatePhoneNumber('08012345678')).toBe(true);\n      expect(whatsappService.validatePhoneNumber('+254701234567')).toBe(true); // Kenya\n      expect(whatsappService.validatePhoneNumber('invalid')).toBe(false);\n    });\n  });\n\n  describe('Cache Management', () => {\n    test('should clear SMS provider cache', () => {\n      expect(() => smsService.clearOrganizationCache(testOrganizationId)).not.toThrow();\n    });\n\n    test('should clear email provider cache', () => {\n      expect(() => emailService.clearOrganizationCache(testOrganizationId)).not.toThrow();\n    });\n\n    test('should clear WhatsApp provider cache', () => {\n      expect(() => whatsappService.clearOrganizationCache(testOrganizationId)).not.toThrow();\n    });\n  });\n\n  describe('Error Handling', () => {\n    test('should handle database connection errors gracefully', async () => {\n      (prisma.sMSProvider.findFirst as jest.Mock).mockRejectedValue(new Error('Database connection failed'));\n\n      const result = await smsService.sendSMS(testPhoneNumber, testMessage, testOrganizationId);\n\n      // Should fallback to platform default\n      expect(result.success).toBe(true);\n    });\n\n    test('should handle invalid encryption keys gracefully', async () => {\n      process.env.ENCRYPTION_KEY = 'invalid-key';\n\n      (prisma.emailProvider.findFirst as jest.Mock).mockResolvedValue({\n        organizationId: testOrganizationId,\n        providerType: 'sendgrid',\n        apiKey: 'invalid_encrypted_data',\n        isActive: true\n      });\n\n      const result = await emailService.sendEmail(testOrganizationId, {\n        to: testEmail,\n        from: 'test@example.com',\n        subject: 'Test',\n        html: 'Test'\n      });\n\n      // Should still attempt to send (with fallback behavior)\n      expect(result).toBeDefined();\n    });\n  });\n});"],"names":["jest","mock","sMSProvider","findFirst","fn","emailProvider","whatsAppBusinessConfig","organization","findUnique","update","messagingUsage","create","creditTransaction","logger","info","error","warn","mockEnv","SMS_PROVIDER","WHATSAPP_ACCESS_TOKEN","WHATSAPP_PHONE_NUMBER_ID","EMAIL_PROVIDER","ENCRYPTION_KEY","describe","testOrganizationId","testPhoneNumber","testEmail","testMessage","beforeAll","Object","assign","process","env","beforeEach","clearAllMocks","test","prisma","mockResolvedValue","id","organizationId","providerType","accountSid","authToken","fromNumber","isActive","result","smsService","sendSMS","expect","toHaveBeenCalledWith","where","success","toBe","messageId","toBeDefined","toHaveBeenCalled","provider","testOrganizationSMS","apiKey","fromEmail","emailService","sendEmail","to","from","subject","html","text","name","testOrganizationEmail","accessToken","phoneNumberId","whatsappService","sendTextMessage","testOrganizationWhatsApp","messagingModel","creditBalance","autoTopUp","autoTopUpAmount","autoTopUpThreshold","preferredProviders","region","unifiedMessagingService","sendMessage","content","channel","cost","toBeGreaterThan","balance","getCreditBalance","validatePhoneNumber","validateProviderConfig","domain","smtpHost","smtpUsername","smtpPassword","clearOrganizationCache","not","toThrow","mockRejectedValue","Error"],"mappings":"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"}