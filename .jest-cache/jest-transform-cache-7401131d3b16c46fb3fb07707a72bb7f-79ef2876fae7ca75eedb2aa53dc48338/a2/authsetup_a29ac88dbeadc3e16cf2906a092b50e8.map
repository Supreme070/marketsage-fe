{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/__tests__/e2e/auth.setup.ts"],"sourcesContent":["import { test as setup, expect } from '@playwright/test';\nimport { exec } from 'child_process';\nimport { promisify } from 'util';\n\nconst execAsync = promisify(exec);\n\n/**\n * Authentication setup for E2E tests\n * Creates test user and saves authentication state\n */\n\nconst authFile = 'src/__tests__/e2e/auth.json';\n\nsetup('authenticate', async ({ page }) => {\n  console.log('üîê Setting up authentication for E2E tests...');\n\n  try {\n    // Ensure clean database state\n    await execAsync('npm run db:reset');\n    await execAsync('npm run db:migrate');\n    \n    // Create test user via API or direct database insertion\n    await execAsync(`\n      npx tsx -e \"\n        const { PrismaClient } = require('@prisma/client');\n        const bcrypt = require('bcryptjs');\n        \n        async function createTestUser() {\n          const prisma = new PrismaClient();\n          \n          const hashedPassword = await bcrypt.hash('TestPassword123!', 12);\n          \n          await prisma.user.upsert({\n            where: { email: 'test@marketsage.com' },\n            update: {},\n            create: {\n              email: 'test@marketsage.com',\n              name: 'Test User',\n              password: hashedPassword,\n              role: 'ADMIN',\n              emailVerified: new Date(),\n              company: 'Test Company',\n              industry: 'Technology'\n            }\n          });\n          \n          console.log('Test user created successfully');\n          await prisma.\\$disconnect();\n        }\n        \n        createTestUser().catch(console.error);\n      \"\n    `);\n\n    // Navigate to login page\n    await page.goto('/auth/login');\n    \n    // Fill login form\n    await page.fill('[data-testid=\"email\"]', 'test@marketsage.com');\n    await page.fill('[data-testid=\"password\"]', 'TestPassword123!');\n    \n    // Submit login\n    await page.click('[data-testid=\"login-button\"]');\n    \n    // Wait for successful login\n    await page.waitForURL('/dashboard');\n    await expect(page.locator('[data-testid=\"dashboard-header\"]')).toBeVisible();\n    \n    // Save authenticated state\n    await page.context().storageState({ path: authFile });\n    \n    console.log('‚úÖ Authentication setup completed');\n    \n  } catch (error) {\n    console.error('‚ùå Authentication setup failed:', error);\n    throw error;\n  }\n});"],"names":["execAsync","promisify","exec","authFile","setup","page","console","log","goto","fill","click","waitForURL","expect","locator","toBeVisible","context","storageState","path","error"],"mappings":";;;;sBAAsC;+BACjB;sBACK;AAE1B,MAAMA,YAAYC,IAAAA,eAAS,EAACC,mBAAI;AAEhC;;;CAGC,GAED,MAAMC,WAAW;AAEjBC,IAAAA,UAAK,EAAC,gBAAgB,OAAO,EAAEC,IAAI,EAAE;IACnCC,QAAQC,GAAG,CAAC;IAEZ,IAAI;QACF,8BAA8B;QAC9B,MAAMP,UAAU;QAChB,MAAMA,UAAU;QAEhB,wDAAwD;QACxD,MAAMA,UAAU,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA8BjB,CAAC;QAED,yBAAyB;QACzB,MAAMK,KAAKG,IAAI,CAAC;QAEhB,kBAAkB;QAClB,MAAMH,KAAKI,IAAI,CAAC,yBAAyB;QACzC,MAAMJ,KAAKI,IAAI,CAAC,4BAA4B;QAE5C,eAAe;QACf,MAAMJ,KAAKK,KAAK,CAAC;QAEjB,4BAA4B;QAC5B,MAAML,KAAKM,UAAU,CAAC;QACtB,MAAMC,IAAAA,YAAM,EAACP,KAAKQ,OAAO,CAAC,qCAAqCC,WAAW;QAE1E,2BAA2B;QAC3B,MAAMT,KAAKU,OAAO,GAAGC,YAAY,CAAC;YAAEC,MAAMd;QAAS;QAEnDG,QAAQC,GAAG,CAAC;IAEd,EAAE,OAAOW,OAAO;QACdZ,QAAQY,KAAK,CAAC,kCAAkCA;QAChD,MAAMA;IACR;AACF"}