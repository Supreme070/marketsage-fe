{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/lib/ai/task-automation-engine.ts"],"sourcesContent":["/**\n * AI Task Automation Engine\n * =========================\n * Intelligent task creation and execution system for MarketSage\n * \n * Capabilities:\n * ðŸ¤– Automated task generation based on customer behavior\n * ðŸŽ¯ Intelligent task prioritization and scheduling\n * ðŸ”„ Context-aware task execution and management\n * ðŸ“Š Performance-based task optimization\n */\n\nimport prisma from '@/lib/db/prisma';\nimport { logger } from '@/lib/logger';\nimport { FallbackAI } from '@/lib/ai/openai-integration';\nimport { SupremeAI } from '@/lib/ai/supreme-ai-engine';\nimport { \n  UserRole, \n  ContactStatus,\n  CampaignStatus \n} from '@prisma/client';\n\n// Task types (since they may not be in Prisma schema yet)\ntype TaskStatus = 'TODO' | 'IN_PROGRESS' | 'REVIEW' | 'DONE';\ntype TaskPriority = 'LOW' | 'MEDIUM' | 'HIGH' | 'URGENT';\n\n// Types\ninterface TaskContext {\n  customerId: string;\n  workflowId?: string;\n  campaignId?: string;\n  contactId?: string;\n  triggerEvent: string;\n  customerData: any;\n  behaviorData: any;\n}\n\ninterface AITaskSuggestion {\n  title: string;\n  description: string;\n  priority: TaskPriority;\n  estimatedDuration: number; // in minutes\n  category: string;\n  automationLevel: 'manual' | 'semi-auto' | 'fully-auto';\n  confidence: number;\n  requiredData: string[];\n  expectedOutcome: string;\n}\n\ninterface TaskExecutionPlan {\n  taskId: string;\n  executionSteps: ExecutionStep[];\n  dependencies: string[];\n  estimatedCompletion: Date;\n  fallbackActions: string[];\n}\n\ninterface ExecutionStep {\n  id: string;\n  type: 'data_collection' | 'analysis' | 'decision' | 'action' | 'verification';\n  description: string;\n  automatable: boolean;\n  estimatedTime: number;\n}\n\nexport class AITaskAutomationEngine {\n  private fallbackAI: FallbackAI;\n  private supremeAI: typeof SupremeAI;\n\n  constructor() {\n    this.fallbackAI = new FallbackAI();\n    this.supremeAI = SupremeAI;\n  }\n\n  /**\n   * Analyze customer behavior and generate intelligent task suggestions\n   */\n  async generateTaskSuggestions(context: TaskContext): Promise<AITaskSuggestion[]> {\n    try {\n      logger.info('Generating AI task suggestions', { customerId: context.customerId });\n\n      // Gather comprehensive customer data\n      const customerInsights = await this.gatherCustomerInsights(context.customerId);\n      \n      // Analyze behavior patterns\n      const behaviorAnalysis = await this.analyzeBehaviorPatterns(customerInsights);\n      \n      // Generate task suggestions based on insights\n      const suggestions = await this.createIntelligentSuggestions(\n        context, \n        customerInsights, \n        behaviorAnalysis\n      );\n\n      logger.info('Generated task suggestions', { \n        customerId: context.customerId, \n        count: suggestions.length \n      });\n\n      return suggestions;\n    } catch (error) {\n      logger.error('Failed to generate task suggestions', { error, context });\n      return [];\n    }\n  }\n\n  /**\n   * Create task with specific assignee hint\n   */\n  async createTaskWithAssignee(\n    suggestion: AITaskSuggestion, \n    context: TaskContext, \n    assigneeHint?: string\n  ): Promise<string | null> {\n    return await this.createAndExecuteTask(suggestion, context, assigneeHint);\n  }\n\n  /**\n   * Automatically create and execute high-confidence tasks\n   */\n  async executeAutomaticTasks(context: TaskContext): Promise<string[]> {\n    try {\n      const suggestions = await this.generateTaskSuggestions(context);\n      \n      // Filter for high-confidence, fully-automatable tasks\n      const automaticTasks = suggestions.filter(task => \n        task.confidence > 0.8 && \n        task.automationLevel === 'fully-auto'\n      );\n\n      const createdTaskIds: string[] = [];\n\n      for (const taskSuggestion of automaticTasks) {\n        const taskId = await this.createAndExecuteTask(taskSuggestion, context);\n        if (taskId) {\n          createdTaskIds.push(taskId);\n        }\n      }\n\n      return createdTaskIds;\n    } catch (error) {\n      logger.error('Failed to execute automatic tasks', { error, context });\n      return [];\n    }\n  }\n\n  /**\n   * Create intelligent task execution plan\n   */\n  async createExecutionPlan(taskSuggestion: AITaskSuggestion, context: TaskContext): Promise<TaskExecutionPlan> {\n    const executionSteps: ExecutionStep[] = [];\n\n    // Step 1: Data Collection\n    executionSteps.push({\n      id: 'data_collection',\n      type: 'data_collection',\n      description: `Gather required data: ${taskSuggestion.requiredData.join(', ')}`,\n      automatable: true,\n      estimatedTime: 2\n    });\n\n    // Step 2: Analysis\n    executionSteps.push({\n      id: 'analysis',\n      type: 'analysis',\n      description: `Analyze customer behavior and determine best approach`,\n      automatable: true,\n      estimatedTime: 3\n    });\n\n    // Step 3: Decision Making\n    executionSteps.push({\n      id: 'decision',\n      type: 'decision',\n      description: `Make intelligent decision based on analysis`,\n      automatable: taskSuggestion.automationLevel === 'fully-auto',\n      estimatedTime: 1\n    });\n\n    // Step 4: Action Execution\n    executionSteps.push({\n      id: 'action',\n      type: 'action',\n      description: `Execute the planned action: ${taskSuggestion.title}`,\n      automatable: taskSuggestion.automationLevel !== 'manual',\n      estimatedTime: taskSuggestion.estimatedDuration\n    });\n\n    // Step 5: Verification\n    executionSteps.push({\n      id: 'verification',\n      type: 'verification',\n      description: `Verify task completion and measure outcome`,\n      automatable: true,\n      estimatedTime: 2\n    });\n\n    const totalTime = executionSteps.reduce((sum, step) => sum + step.estimatedTime, 0);\n    const estimatedCompletion = new Date(Date.now() + totalTime * 60 * 1000);\n\n    return {\n      taskId: '', // Will be filled when task is created\n      executionSteps,\n      dependencies: [], // Will be determined based on task context\n      estimatedCompletion,\n      fallbackActions: [\n        'Notify human operator if automation fails',\n        'Log all actions for manual review',\n        'Revert to safe state if errors occur'\n      ]\n    };\n  }\n\n  /**\n   * Monitor task execution and provide intelligent feedback\n   */\n  async monitorTaskExecution(taskId: string): Promise<{\n    status: string;\n    progress: number;\n    nextAction: string;\n    recommendations: string[];\n  }> {\n    try {\n      const task = await prisma.task.findUnique({\n        where: { id: taskId },\n        include: {\n          creator: true,\n          assignee: true,\n          comments: true\n        }\n      });\n\n      if (!task) {\n        throw new Error(`Task not found: ${taskId}`);\n      }\n\n      // Analyze task progress\n      const progressAnalysis = await this.analyzeTaskProgress(task);\n      \n      // Generate intelligent recommendations\n      const recommendations = await this.generateTaskRecommendations(task, progressAnalysis);\n\n      return {\n        status: task.status,\n        progress: progressAnalysis.completionPercentage,\n        nextAction: progressAnalysis.suggestedNextAction,\n        recommendations\n      };\n    } catch (error) {\n      logger.error('Failed to monitor task execution', { error, taskId });\n      return {\n        status: 'error',\n        progress: 0,\n        nextAction: 'Review task manually',\n        recommendations: ['Check task configuration', 'Verify data integrity']\n      };\n    }\n  }\n\n  // Private helper methods\n\n  private async gatherCustomerInsights(customerId: string) {\n    const [customer, activities, campaigns, workflows] = await Promise.all([\n      prisma.contact.findUnique({\n        where: { id: customerId }\n      }),\n      prisma.userActivity.findMany({\n        where: { userId: customerId },\n        take: 50,\n        orderBy: { timestamp: 'desc' }\n      }),\n      prisma.emailCampaign.findMany({\n        where: { \n          activities: {\n            some: { contactId: customerId }\n          }\n        },\n        include: { activities: true }\n      }),\n      prisma.workflowExecution.findMany({\n        where: { contactId: customerId },\n        include: { workflow: true }\n      })\n    ]);\n\n    return {\n      customer,\n      activities,\n      campaigns,\n      workflows,\n      engagementScore: await this.calculateEngagementScore(customerId),\n      churnRisk: await this.calculateChurnRisk(customerId)\n    };\n  }\n\n  private async analyzeBehaviorPatterns(insights: any) {\n    // Use Supreme AI for local behavior analysis\n    const behaviorData = {\n      engagementScore: insights.engagementScore,\n      churnRisk: insights.churnRisk,\n      activityCount: insights.activities.length,\n      campaignInteractions: insights.campaigns.length,\n      workflowCompletions: insights.workflows.filter((w: any) => w.status === 'COMPLETED').length  // Note: workflows use COMPLETED, tasks use DONE\n    };\n\n    const analysis = await this.supremeAI.analyzeCustomerBehavior([behaviorData]);\n    \n    return {\n      patterns: analysis.data.patterns || [],\n      trends: analysis.data.trends || [],\n      predictions: analysis.data.predictions || [],\n      recommendations: analysis.recommendations || []\n    };\n  }\n\n  private async createIntelligentSuggestions(\n    context: TaskContext,\n    insights: any,\n    behaviorAnalysis: any\n  ): Promise<AITaskSuggestion[]> {\n    const suggestions: AITaskSuggestion[] = [];\n\n    // High engagement customer - upsell opportunity\n    if (insights.engagementScore > 0.7) {\n      suggestions.push({\n        title: 'Upsell Premium Features',\n        description: `Customer shows high engagement (${(insights.engagementScore * 100).toFixed(1)}%). Create targeted upsell campaign.`,\n        priority: 'HIGH',\n        estimatedDuration: 15,\n        category: 'sales',\n        automationLevel: 'semi-auto',\n        confidence: 0.85,\n        requiredData: ['engagement_history', 'feature_usage', 'subscription_tier'],\n        expectedOutcome: 'Increase customer lifetime value by 25-40%'\n      });\n    }\n\n    // High churn risk - retention campaign\n    if (insights.churnRisk > 0.6) {\n      suggestions.push({\n        title: 'Execute Retention Campaign',\n        description: `Customer at risk of churning (${(insights.churnRisk * 100).toFixed(1)}% risk). Immediate intervention needed.`,\n        priority: 'URGENT',\n        estimatedDuration: 30,\n        category: 'retention',\n        automationLevel: 'fully-auto',\n        confidence: 0.9,\n        requiredData: ['churn_indicators', 'past_interventions', 'customer_preferences'],\n        expectedOutcome: 'Reduce churn probability by 40-60%'\n      });\n    }\n\n    // Low engagement - re-engagement workflow\n    if (insights.engagementScore < 0.3 && insights.churnRisk < 0.8) {\n      suggestions.push({\n        title: 'Launch Re-engagement Sequence',\n        description: `Low engagement detected. Create personalized re-engagement workflow.`,\n        priority: 'MEDIUM',\n        estimatedDuration: 20,\n        category: 'engagement',\n        automationLevel: 'fully-auto',\n        confidence: 0.75,\n        requiredData: ['engagement_history', 'content_preferences', 'optimal_send_times'],\n        expectedOutcome: 'Increase engagement by 30-50%'\n      });\n    }\n\n    // Workflow optimization opportunity\n    if (insights.workflows.length > 0) {\n      const incompleteWorkflows = insights.workflows.filter((w: any) => w.status !== 'COMPLETED');  // Note: workflows use COMPLETED\n      if (incompleteWorkflows.length > 0) {\n        suggestions.push({\n          title: 'Optimize Workflow Performance',\n          description: `${incompleteWorkflows.length} workflows need optimization. Analyze and improve conversion rates.`,\n          priority: 'MEDIUM',\n          estimatedDuration: 25,\n          category: 'optimization',\n          automationLevel: 'semi-auto',\n          confidence: 0.8,\n          requiredData: ['workflow_performance', 'completion_rates', 'drop_off_points'],\n          expectedOutcome: 'Improve workflow completion by 20-35%'\n        });\n      }\n    }\n\n    return suggestions;\n  }\n\n  private async createAndExecuteTask(\n    suggestion: AITaskSuggestion, \n    context: TaskContext,\n    assigneeHint?: string\n  ): Promise<string | null> {\n    try {\n      // Find appropriate assignee based on hint or default to sales team\n      let assignee;\n      \n      if (assigneeHint) {\n        assignee = await this.findUserByName(assigneeHint);\n      }\n      \n      if (!assignee) {\n        // Default to sales team members instead of admins\n        assignee = await prisma.user.findFirst({\n          where: {\n            role: { in: ['USER'] }, // Regular team members\n            isActive: true,\n            OR: [\n              { email: { contains: 'sales' } },\n              { name: { contains: 'Sales' } },\n              { role: 'USER' }\n            ]\n          }\n        });\n      }\n      \n      // Fallback to any active user if no sales team found\n      if (!assignee) {\n        assignee = await prisma.user.findFirst({\n          where: {\n            isActive: true,\n            role: { not: 'SUPER_ADMIN' } // Avoid super admin\n          }\n        });\n      }\n\n      if (!assignee) {\n        logger.warn('No suitable assignee found for automatic task');\n        return null;\n      }\n\n      // Create task in database\n      const task = await prisma.task.create({\n        data: {\n          title: suggestion.title,\n          description: suggestion.description,\n          status: 'IN_PROGRESS',\n          priority: suggestion.priority,\n          creatorId: assignee.id, // AI creates the task\n          assigneeId: assignee.id, // Assign to admin for execution\n          contactId: context.contactId\n        }\n      });\n\n      // If fully automated, start execution immediately\n      if (suggestion.automationLevel === 'fully-auto') {\n        await this.executeAutomatedTask(task.id, suggestion, context);\n      }\n\n      logger.info('Created AI task', { taskId: task.id, suggestion: suggestion.title, assignee: assignee.name });\n      return task.id;\n    } catch (error) {\n      logger.error('Failed to create AI task', { error, suggestion });\n      return null;\n    }\n  }\n\n  /**\n   * Find user by name with fuzzy matching\n   */\n  private async findUserByName(nameHint: string): Promise<any> {\n    const normalizedHint = nameHint.toLowerCase().trim();\n    \n    // Try exact match first\n    let user = await prisma.user.findFirst({\n      where: {\n        isActive: true,\n        OR: [\n          { name: { contains: nameHint, mode: 'insensitive' } },\n          { email: { contains: nameHint, mode: 'insensitive' } }\n        ]\n      }\n    });\n    \n    if (user) return user;\n    \n    // Try fuzzy matching by parts\n    const nameParts = normalizedHint.split(' ');\n    for (const part of nameParts) {\n      if (part.length > 2) {\n        user = await prisma.user.findFirst({\n          where: {\n            isActive: true,\n            OR: [\n              { name: { contains: part, mode: 'insensitive' } },\n              { email: { contains: part, mode: 'insensitive' } }\n            ]\n          }\n        });\n        \n        if (user) return user;\n      }\n    }\n    \n    return null;\n  }\n\n  private async executeAutomatedTask(\n    taskId: string, \n    suggestion: AITaskSuggestion, \n    context: TaskContext\n  ): Promise<void> {\n    try {\n      // Execute based on task category\n      switch (suggestion.category) {\n        case 'retention':\n          await this.executeRetentionTask(taskId, context);\n          break;\n        case 'engagement':\n          await this.executeEngagementTask(taskId, context);\n          break;\n        case 'sales':\n          await this.executeSalesTask(taskId, context);\n          break;\n        default:\n          logger.info('Task category not automated yet', { category: suggestion.category });\n      }\n    } catch (error) {\n      logger.error('Failed to execute automated task', { error, taskId });\n      \n      // Update task status to show automation failed\n      await prisma.task.update({\n        where: { id: taskId },\n        data: { \n          status: 'BLOCKED',\n          description: `${suggestion.description}\\n\\nNote: Automated execution failed. Manual intervention required.`\n        }\n      });\n    }\n  }\n\n  private async executeRetentionTask(taskId: string, context: TaskContext): Promise<void> {\n    // This would integrate with workflow engine to start a retention workflow\n    logger.info('Executing retention task', { taskId, customerId: context.customerId });\n    \n    // Mark task as completed\n    await prisma.task.update({\n      where: { id: taskId },\n      data: { \n        status: 'DONE'\n      }\n    });\n  }\n\n  private async executeEngagementTask(taskId: string, context: TaskContext): Promise<void> {\n    // This would create and launch a re-engagement campaign\n    logger.info('Executing engagement task', { taskId, customerId: context.customerId });\n    \n    await prisma.task.update({\n      where: { id: taskId },\n      data: { \n        status: 'DONE'\n      }\n    });\n  }\n\n  private async executeSalesTask(taskId: string, context: TaskContext): Promise<void> {\n    // This would create an upsell campaign or workflow\n    logger.info('Executing sales task', { taskId, customerId: context.customerId });\n    \n    await prisma.task.update({\n      where: { id: taskId },\n      data: { \n        status: 'DONE'\n      }\n    });\n  }\n\n  private async calculateEngagementScore(customerId: string): Promise<number> {\n    // Use existing engagement tracking\n    const activities = await prisma.userActivity.findMany({\n      where: { userId: customerId },\n      take: 20,\n      orderBy: { timestamp: 'desc' }\n    });\n\n    if (activities.length === 0) return 0;\n\n    // Simple engagement calculation\n    const recentActivities = activities.filter(\n      a => new Date(a.timestamp) > new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)\n    );\n\n    return Math.min(recentActivities.length / 10, 1); // Max score of 1\n  }\n\n  private async calculateChurnRisk(customerId: string): Promise<number> {\n    const lastActivity = await prisma.userActivity.findFirst({\n      where: { userId: customerId },\n      orderBy: { timestamp: 'desc' }\n    });\n\n    if (!lastActivity) return 1; // No activity = high churn risk\n\n    const daysSinceLastActivity = (Date.now() - new Date(lastActivity.timestamp).getTime()) / (1000 * 60 * 60 * 24);\n    \n    // Risk increases exponentially after 7 days\n    return Math.min(daysSinceLastActivity / 30, 1); // Max risk of 1 after 30 days\n  }\n\n  private async analyzeTaskProgress(task: any): Promise<{\n    completionPercentage: number;\n    suggestedNextAction: string;\n  }> {\n    // Analyze based on task status and metadata\n    let completionPercentage = 0;\n    let suggestedNextAction = 'Continue with current approach';\n\n    switch (task.status) {\n      case 'TODO':\n        completionPercentage = 0;\n        suggestedNextAction = 'Begin task execution';\n        break;\n      case 'IN_PROGRESS':\n        completionPercentage = 50;\n        suggestedNextAction = 'Monitor progress and provide updates';\n        break;\n      case 'DONE':\n        completionPercentage = 100;\n        suggestedNextAction = 'Review outcomes and optimize for future';\n        break;\n      case 'BLOCKED':\n        completionPercentage = 25;\n        suggestedNextAction = 'Resolve blocking issues';\n        break;\n    }\n\n    return { completionPercentage, suggestedNextAction };\n  }\n\n  private async generateTaskRecommendations(task: any, progress: any): Promise<string[]> {\n    const recommendations: string[] = [];\n\n    if (task.status === 'BLOCKED') {\n      recommendations.push('Review blocking issues and create resolution plan');\n      recommendations.push('Consider alternative approaches or escalation');\n    }\n\n    if (progress.completionPercentage < 50 && task.createdAt < new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)) {\n      recommendations.push('Task overdue - consider priority adjustment or resource reallocation');\n    }\n\n    if (task.priority === 'URGENT' && task.status !== 'IN_PROGRESS') {\n      recommendations.push('Urgent task not in progress - immediate attention required');\n    }\n\n    return recommendations;\n  }\n}\n\n// Export singleton instance\nexport const aiTaskEngine = new AITaskAutomationEngine(); "],"names":["AITaskAutomationEngine","aiTaskEngine","constructor","fallbackAI","FallbackAI","supremeAI","SupremeAI","generateTaskSuggestions","context","logger","info","customerId","customerInsights","gatherCustomerInsights","behaviorAnalysis","analyzeBehaviorPatterns","suggestions","createIntelligentSuggestions","count","length","error","createTaskWithAssignee","suggestion","assigneeHint","createAndExecuteTask","executeAutomaticTasks","automaticTasks","filter","task","confidence","automationLevel","createdTaskIds","taskSuggestion","taskId","push","createExecutionPlan","executionSteps","id","type","description","requiredData","join","automatable","estimatedTime","title","estimatedDuration","totalTime","reduce","sum","step","estimatedCompletion","Date","now","dependencies","fallbackActions","monitorTaskExecution","prisma","findUnique","where","include","creator","assignee","comments","Error","progressAnalysis","analyzeTaskProgress","recommendations","generateTaskRecommendations","status","progress","completionPercentage","nextAction","suggestedNextAction","customer","activities","campaigns","workflows","Promise","all","contact","userActivity","findMany","userId","take","orderBy","timestamp","emailCampaign","some","contactId","workflowExecution","workflow","engagementScore","calculateEngagementScore","churnRisk","calculateChurnRisk","insights","behaviorData","activityCount","campaignInteractions","workflowCompletions","w","analysis","analyzeCustomerBehavior","patterns","data","trends","predictions","toFixed","priority","category","expectedOutcome","incompleteWorkflows","findUserByName","user","findFirst","role","in","isActive","OR","email","contains","name","not","warn","create","creatorId","assigneeId","executeAutomatedTask","nameHint","normalizedHint","toLowerCase","trim","mode","nameParts","split","part","executeRetentionTask","executeEngagementTask","executeSalesTask","update","recentActivities","a","Math","min","lastActivity","daysSinceLastActivity","getTime","createdAt"],"mappings":"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"}