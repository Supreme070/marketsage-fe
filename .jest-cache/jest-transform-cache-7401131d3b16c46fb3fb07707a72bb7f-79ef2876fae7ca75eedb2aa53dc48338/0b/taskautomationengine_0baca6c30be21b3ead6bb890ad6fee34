d916b4e49122e295b1b8c50640f979d2
/**
 * AI Task Automation Engine
 * =========================
 * Intelligent task creation and execution system for MarketSage
 * 
 * Capabilities:
 * ðŸ¤– Automated task generation based on customer behavior
 * ðŸŽ¯ Intelligent task prioritization and scheduling
 * ðŸ”„ Context-aware task execution and management
 * ðŸ“Š Performance-based task optimization
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    AITaskAutomationEngine: function() {
        return AITaskAutomationEngine;
    },
    aiTaskEngine: function() {
        return aiTaskEngine;
    }
});
const _prisma = /*#__PURE__*/ _interop_require_default(require("../db/prisma"));
const _logger = require("../logger");
const _openaiintegration = require("./openai-integration");
const _supremeaiengine = require("./supreme-ai-engine");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
class AITaskAutomationEngine {
    constructor(){
        this.fallbackAI = new _openaiintegration.FallbackAI();
        this.supremeAI = _supremeaiengine.SupremeAI;
    }
    /**
   * Analyze customer behavior and generate intelligent task suggestions
   */ async generateTaskSuggestions(context) {
        try {
            _logger.logger.info('Generating AI task suggestions', {
                customerId: context.customerId
            });
            // Gather comprehensive customer data
            const customerInsights = await this.gatherCustomerInsights(context.customerId);
            // Analyze behavior patterns
            const behaviorAnalysis = await this.analyzeBehaviorPatterns(customerInsights);
            // Generate task suggestions based on insights
            const suggestions = await this.createIntelligentSuggestions(context, customerInsights, behaviorAnalysis);
            _logger.logger.info('Generated task suggestions', {
                customerId: context.customerId,
                count: suggestions.length
            });
            return suggestions;
        } catch (error) {
            _logger.logger.error('Failed to generate task suggestions', {
                error,
                context
            });
            return [];
        }
    }
    /**
   * Create task with specific assignee hint
   */ async createTaskWithAssignee(suggestion, context, assigneeHint) {
        return await this.createAndExecuteTask(suggestion, context, assigneeHint);
    }
    /**
   * Automatically create and execute high-confidence tasks
   */ async executeAutomaticTasks(context) {
        try {
            const suggestions = await this.generateTaskSuggestions(context);
            // Filter for high-confidence, fully-automatable tasks
            const automaticTasks = suggestions.filter((task)=>task.confidence > 0.8 && task.automationLevel === 'fully-auto');
            const createdTaskIds = [];
            for (const taskSuggestion of automaticTasks){
                const taskId = await this.createAndExecuteTask(taskSuggestion, context);
                if (taskId) {
                    createdTaskIds.push(taskId);
                }
            }
            return createdTaskIds;
        } catch (error) {
            _logger.logger.error('Failed to execute automatic tasks', {
                error,
                context
            });
            return [];
        }
    }
    /**
   * Create intelligent task execution plan
   */ async createExecutionPlan(taskSuggestion, context) {
        const executionSteps = [];
        // Step 1: Data Collection
        executionSteps.push({
            id: 'data_collection',
            type: 'data_collection',
            description: `Gather required data: ${taskSuggestion.requiredData.join(', ')}`,
            automatable: true,
            estimatedTime: 2
        });
        // Step 2: Analysis
        executionSteps.push({
            id: 'analysis',
            type: 'analysis',
            description: `Analyze customer behavior and determine best approach`,
            automatable: true,
            estimatedTime: 3
        });
        // Step 3: Decision Making
        executionSteps.push({
            id: 'decision',
            type: 'decision',
            description: `Make intelligent decision based on analysis`,
            automatable: taskSuggestion.automationLevel === 'fully-auto',
            estimatedTime: 1
        });
        // Step 4: Action Execution
        executionSteps.push({
            id: 'action',
            type: 'action',
            description: `Execute the planned action: ${taskSuggestion.title}`,
            automatable: taskSuggestion.automationLevel !== 'manual',
            estimatedTime: taskSuggestion.estimatedDuration
        });
        // Step 5: Verification
        executionSteps.push({
            id: 'verification',
            type: 'verification',
            description: `Verify task completion and measure outcome`,
            automatable: true,
            estimatedTime: 2
        });
        const totalTime = executionSteps.reduce((sum, step)=>sum + step.estimatedTime, 0);
        const estimatedCompletion = new Date(Date.now() + totalTime * 60 * 1000);
        return {
            taskId: '',
            executionSteps,
            dependencies: [],
            estimatedCompletion,
            fallbackActions: [
                'Notify human operator if automation fails',
                'Log all actions for manual review',
                'Revert to safe state if errors occur'
            ]
        };
    }
    /**
   * Monitor task execution and provide intelligent feedback
   */ async monitorTaskExecution(taskId) {
        try {
            const task = await _prisma.default.task.findUnique({
                where: {
                    id: taskId
                },
                include: {
                    creator: true,
                    assignee: true,
                    comments: true
                }
            });
            if (!task) {
                throw new Error(`Task not found: ${taskId}`);
            }
            // Analyze task progress
            const progressAnalysis = await this.analyzeTaskProgress(task);
            // Generate intelligent recommendations
            const recommendations = await this.generateTaskRecommendations(task, progressAnalysis);
            return {
                status: task.status,
                progress: progressAnalysis.completionPercentage,
                nextAction: progressAnalysis.suggestedNextAction,
                recommendations
            };
        } catch (error) {
            _logger.logger.error('Failed to monitor task execution', {
                error,
                taskId
            });
            return {
                status: 'error',
                progress: 0,
                nextAction: 'Review task manually',
                recommendations: [
                    'Check task configuration',
                    'Verify data integrity'
                ]
            };
        }
    }
    // Private helper methods
    async gatherCustomerInsights(customerId) {
        const [customer, activities, campaigns, workflows] = await Promise.all([
            _prisma.default.contact.findUnique({
                where: {
                    id: customerId
                }
            }),
            _prisma.default.userActivity.findMany({
                where: {
                    userId: customerId
                },
                take: 50,
                orderBy: {
                    timestamp: 'desc'
                }
            }),
            _prisma.default.emailCampaign.findMany({
                where: {
                    activities: {
                        some: {
                            contactId: customerId
                        }
                    }
                },
                include: {
                    activities: true
                }
            }),
            _prisma.default.workflowExecution.findMany({
                where: {
                    contactId: customerId
                },
                include: {
                    workflow: true
                }
            })
        ]);
        return {
            customer,
            activities,
            campaigns,
            workflows,
            engagementScore: await this.calculateEngagementScore(customerId),
            churnRisk: await this.calculateChurnRisk(customerId)
        };
    }
    async analyzeBehaviorPatterns(insights) {
        // Use Supreme AI for local behavior analysis
        const behaviorData = {
            engagementScore: insights.engagementScore,
            churnRisk: insights.churnRisk,
            activityCount: insights.activities.length,
            campaignInteractions: insights.campaigns.length,
            workflowCompletions: insights.workflows.filter((w)=>w.status === 'COMPLETED').length // Note: workflows use COMPLETED, tasks use DONE
        };
        const analysis = await this.supremeAI.analyzeCustomerBehavior([
            behaviorData
        ]);
        return {
            patterns: analysis.data.patterns || [],
            trends: analysis.data.trends || [],
            predictions: analysis.data.predictions || [],
            recommendations: analysis.recommendations || []
        };
    }
    async createIntelligentSuggestions(context, insights, behaviorAnalysis) {
        const suggestions = [];
        // High engagement customer - upsell opportunity
        if (insights.engagementScore > 0.7) {
            suggestions.push({
                title: 'Upsell Premium Features',
                description: `Customer shows high engagement (${(insights.engagementScore * 100).toFixed(1)}%). Create targeted upsell campaign.`,
                priority: 'HIGH',
                estimatedDuration: 15,
                category: 'sales',
                automationLevel: 'semi-auto',
                confidence: 0.85,
                requiredData: [
                    'engagement_history',
                    'feature_usage',
                    'subscription_tier'
                ],
                expectedOutcome: 'Increase customer lifetime value by 25-40%'
            });
        }
        // High churn risk - retention campaign
        if (insights.churnRisk > 0.6) {
            suggestions.push({
                title: 'Execute Retention Campaign',
                description: `Customer at risk of churning (${(insights.churnRisk * 100).toFixed(1)}% risk). Immediate intervention needed.`,
                priority: 'URGENT',
                estimatedDuration: 30,
                category: 'retention',
                automationLevel: 'fully-auto',
                confidence: 0.9,
                requiredData: [
                    'churn_indicators',
                    'past_interventions',
                    'customer_preferences'
                ],
                expectedOutcome: 'Reduce churn probability by 40-60%'
            });
        }
        // Low engagement - re-engagement workflow
        if (insights.engagementScore < 0.3 && insights.churnRisk < 0.8) {
            suggestions.push({
                title: 'Launch Re-engagement Sequence',
                description: `Low engagement detected. Create personalized re-engagement workflow.`,
                priority: 'MEDIUM',
                estimatedDuration: 20,
                category: 'engagement',
                automationLevel: 'fully-auto',
                confidence: 0.75,
                requiredData: [
                    'engagement_history',
                    'content_preferences',
                    'optimal_send_times'
                ],
                expectedOutcome: 'Increase engagement by 30-50%'
            });
        }
        // Workflow optimization opportunity
        if (insights.workflows.length > 0) {
            const incompleteWorkflows = insights.workflows.filter((w)=>w.status !== 'COMPLETED'); // Note: workflows use COMPLETED
            if (incompleteWorkflows.length > 0) {
                suggestions.push({
                    title: 'Optimize Workflow Performance',
                    description: `${incompleteWorkflows.length} workflows need optimization. Analyze and improve conversion rates.`,
                    priority: 'MEDIUM',
                    estimatedDuration: 25,
                    category: 'optimization',
                    automationLevel: 'semi-auto',
                    confidence: 0.8,
                    requiredData: [
                        'workflow_performance',
                        'completion_rates',
                        'drop_off_points'
                    ],
                    expectedOutcome: 'Improve workflow completion by 20-35%'
                });
            }
        }
        return suggestions;
    }
    async createAndExecuteTask(suggestion, context, assigneeHint) {
        try {
            // Find appropriate assignee based on hint or default to sales team
            let assignee;
            if (assigneeHint) {
                assignee = await this.findUserByName(assigneeHint);
            }
            if (!assignee) {
                // Default to sales team members instead of admins
                assignee = await _prisma.default.user.findFirst({
                    where: {
                        role: {
                            in: [
                                'USER'
                            ]
                        },
                        isActive: true,
                        OR: [
                            {
                                email: {
                                    contains: 'sales'
                                }
                            },
                            {
                                name: {
                                    contains: 'Sales'
                                }
                            },
                            {
                                role: 'USER'
                            }
                        ]
                    }
                });
            }
            // Fallback to any active user if no sales team found
            if (!assignee) {
                assignee = await _prisma.default.user.findFirst({
                    where: {
                        isActive: true,
                        role: {
                            not: 'SUPER_ADMIN'
                        } // Avoid super admin
                    }
                });
            }
            if (!assignee) {
                _logger.logger.warn('No suitable assignee found for automatic task');
                return null;
            }
            // Create task in database
            const task = await _prisma.default.task.create({
                data: {
                    title: suggestion.title,
                    description: suggestion.description,
                    status: 'IN_PROGRESS',
                    priority: suggestion.priority,
                    creatorId: assignee.id,
                    assigneeId: assignee.id,
                    contactId: context.contactId
                }
            });
            // If fully automated, start execution immediately
            if (suggestion.automationLevel === 'fully-auto') {
                await this.executeAutomatedTask(task.id, suggestion, context);
            }
            _logger.logger.info('Created AI task', {
                taskId: task.id,
                suggestion: suggestion.title,
                assignee: assignee.name
            });
            return task.id;
        } catch (error) {
            _logger.logger.error('Failed to create AI task', {
                error,
                suggestion
            });
            return null;
        }
    }
    /**
   * Find user by name with fuzzy matching
   */ async findUserByName(nameHint) {
        const normalizedHint = nameHint.toLowerCase().trim();
        // Try exact match first
        let user = await _prisma.default.user.findFirst({
            where: {
                isActive: true,
                OR: [
                    {
                        name: {
                            contains: nameHint,
                            mode: 'insensitive'
                        }
                    },
                    {
                        email: {
                            contains: nameHint,
                            mode: 'insensitive'
                        }
                    }
                ]
            }
        });
        if (user) return user;
        // Try fuzzy matching by parts
        const nameParts = normalizedHint.split(' ');
        for (const part of nameParts){
            if (part.length > 2) {
                user = await _prisma.default.user.findFirst({
                    where: {
                        isActive: true,
                        OR: [
                            {
                                name: {
                                    contains: part,
                                    mode: 'insensitive'
                                }
                            },
                            {
                                email: {
                                    contains: part,
                                    mode: 'insensitive'
                                }
                            }
                        ]
                    }
                });
                if (user) return user;
            }
        }
        return null;
    }
    async executeAutomatedTask(taskId, suggestion, context) {
        try {
            // Execute based on task category
            switch(suggestion.category){
                case 'retention':
                    await this.executeRetentionTask(taskId, context);
                    break;
                case 'engagement':
                    await this.executeEngagementTask(taskId, context);
                    break;
                case 'sales':
                    await this.executeSalesTask(taskId, context);
                    break;
                default:
                    _logger.logger.info('Task category not automated yet', {
                        category: suggestion.category
                    });
            }
        } catch (error) {
            _logger.logger.error('Failed to execute automated task', {
                error,
                taskId
            });
            // Update task status to show automation failed
            await _prisma.default.task.update({
                where: {
                    id: taskId
                },
                data: {
                    status: 'BLOCKED',
                    description: `${suggestion.description}\n\nNote: Automated execution failed. Manual intervention required.`
                }
            });
        }
    }
    async executeRetentionTask(taskId, context) {
        // This would integrate with workflow engine to start a retention workflow
        _logger.logger.info('Executing retention task', {
            taskId,
            customerId: context.customerId
        });
        // Mark task as completed
        await _prisma.default.task.update({
            where: {
                id: taskId
            },
            data: {
                status: 'DONE'
            }
        });
    }
    async executeEngagementTask(taskId, context) {
        // This would create and launch a re-engagement campaign
        _logger.logger.info('Executing engagement task', {
            taskId,
            customerId: context.customerId
        });
        await _prisma.default.task.update({
            where: {
                id: taskId
            },
            data: {
                status: 'DONE'
            }
        });
    }
    async executeSalesTask(taskId, context) {
        // This would create an upsell campaign or workflow
        _logger.logger.info('Executing sales task', {
            taskId,
            customerId: context.customerId
        });
        await _prisma.default.task.update({
            where: {
                id: taskId
            },
            data: {
                status: 'DONE'
            }
        });
    }
    async calculateEngagementScore(customerId) {
        // Use existing engagement tracking
        const activities = await _prisma.default.userActivity.findMany({
            where: {
                userId: customerId
            },
            take: 20,
            orderBy: {
                timestamp: 'desc'
            }
        });
        if (activities.length === 0) return 0;
        // Simple engagement calculation
        const recentActivities = activities.filter((a)=>new Date(a.timestamp) > new Date(Date.now() - 30 * 24 * 60 * 60 * 1000));
        return Math.min(recentActivities.length / 10, 1); // Max score of 1
    }
    async calculateChurnRisk(customerId) {
        const lastActivity = await _prisma.default.userActivity.findFirst({
            where: {
                userId: customerId
            },
            orderBy: {
                timestamp: 'desc'
            }
        });
        if (!lastActivity) return 1; // No activity = high churn risk
        const daysSinceLastActivity = (Date.now() - new Date(lastActivity.timestamp).getTime()) / (1000 * 60 * 60 * 24);
        // Risk increases exponentially after 7 days
        return Math.min(daysSinceLastActivity / 30, 1); // Max risk of 1 after 30 days
    }
    async analyzeTaskProgress(task) {
        // Analyze based on task status and metadata
        let completionPercentage = 0;
        let suggestedNextAction = 'Continue with current approach';
        switch(task.status){
            case 'TODO':
                completionPercentage = 0;
                suggestedNextAction = 'Begin task execution';
                break;
            case 'IN_PROGRESS':
                completionPercentage = 50;
                suggestedNextAction = 'Monitor progress and provide updates';
                break;
            case 'DONE':
                completionPercentage = 100;
                suggestedNextAction = 'Review outcomes and optimize for future';
                break;
            case 'BLOCKED':
                completionPercentage = 25;
                suggestedNextAction = 'Resolve blocking issues';
                break;
        }
        return {
            completionPercentage,
            suggestedNextAction
        };
    }
    async generateTaskRecommendations(task, progress) {
        const recommendations = [];
        if (task.status === 'BLOCKED') {
            recommendations.push('Review blocking issues and create resolution plan');
            recommendations.push('Consider alternative approaches or escalation');
        }
        if (progress.completionPercentage < 50 && task.createdAt < new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)) {
            recommendations.push('Task overdue - consider priority adjustment or resource reallocation');
        }
        if (task.priority === 'URGENT' && task.status !== 'IN_PROGRESS') {
            recommendations.push('Urgent task not in progress - immediate attention required');
        }
        return recommendations;
    }
}
const aiTaskEngine = new AITaskAutomationEngine();

//# sourceMappingURL=data:application/json;base64,