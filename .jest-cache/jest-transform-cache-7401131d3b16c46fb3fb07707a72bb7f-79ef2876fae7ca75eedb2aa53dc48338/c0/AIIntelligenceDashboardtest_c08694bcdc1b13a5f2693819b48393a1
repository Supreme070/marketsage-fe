d9e60b5861afcd464278f10622b2d3ba
"use strict";
// Mock hooks and dependencies
jest.mock('../../../hooks/useSupremeAI');
jest.mock('next-auth/react');
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _testutils = require("../../utils/test-utils");
const _react1 = require("next-auth/react");
const _useSupremeAI = require("../../../hooks/useSupremeAI");
const _AIIntelligenceDashboard = require("../../../components/leadpulse/AIIntelligenceDashboard");
const _MultiAgentDashboard = require("../../../components/dashboard/MultiAgentDashboard");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const mockUseSupremeAI = _useSupremeAI.useSupremeAI;
const mockUseSession = _react1.useSession;
describe('AI Intelligence Dashboard Integration Tests', ()=>{
    // Mock session data with AI permissions
    const mockSession = {
        user: {
            id: 'user_123',
            email: 'test@marketsage.ai',
            role: 'admin',
            organizationId: 'org_123',
            aiPermissions: [
                'read:ai',
                'execute:ai',
                'approve:ai'
            ]
        },
        expires: '2024-12-31'
    };
    // Mock AI intelligence data
    const mockAIData = {
        // Supreme AI v3 status
        status: {
            isOnline: true,
            mode: 'autonomous',
            trustLevel: 0.85,
            activeTasks: 3,
            completedToday: 47,
            errorRate: 0.02
        },
        // Multi-agent coordination
        agents: [
            {
                id: 'agent_1',
                name: 'Customer Intelligence Agent',
                type: 'analytics',
                status: 'active',
                currentTask: 'Analyzing customer segments',
                performance: 0.92,
                lastAction: '2 minutes ago'
            },
            {
                id: 'agent_2',
                name: 'Campaign Optimization Agent',
                type: 'optimization',
                status: 'active',
                currentTask: 'Optimizing email campaigns',
                performance: 0.88,
                lastAction: '5 minutes ago'
            },
            {
                id: 'agent_3',
                name: 'Predictive Analytics Agent',
                type: 'prediction',
                status: 'idle',
                currentTask: null,
                performance: 0.95,
                lastAction: '30 minutes ago'
            }
        ],
        // AI insights and predictions
        insights: [
            {
                id: 'insight_1',
                type: 'revenue_opportunity',
                priority: 'high',
                title: 'Revenue Optimization Opportunity',
                description: 'Customer segment "High Value" shows 23% upsell potential',
                confidence: 0.89,
                expectedImpact: '$125,000 ARR increase',
                actions: [
                    'Create upsell campaign',
                    'Personalize offers'
                ],
                timestamp: new Date().toISOString()
            },
            {
                id: 'insight_2',
                type: 'churn_prevention',
                priority: 'critical',
                title: 'Churn Risk Detected',
                description: '15 high-value customers at critical churn risk',
                confidence: 0.94,
                expectedImpact: '$75,000 CLV preservation',
                actions: [
                    'Immediate retention campaign',
                    'Personal outreach'
                ],
                timestamp: new Date().toISOString()
            }
        ],
        // MCP integration status
        mcpStatus: {
            connected: true,
            servers: [
                'leadpulse',
                'analytics',
                'campaigns'
            ],
            lastSync: new Date(),
            dataQuality: 0.96
        },
        // Real-time analytics
        analytics: {
            customerIntelligence: {
                totalCustomers: 2847,
                highValueCustomers: 342,
                churnRisk: 127,
                segmentAccuracy: 0.91
            },
            campaignPerformance: {
                activeCampaigns: 8,
                avgOpenRate: 0.245,
                avgClickRate: 0.068,
                conversionRate: 0.042
            },
            leadPulseMetrics: {
                activeVisitors: 23,
                engagementScore: 78,
                conversionFunnel: [
                    1000,
                    245,
                    68,
                    42
                ],
                topSources: [
                    'organic',
                    'social',
                    'email'
                ]
            }
        },
        // Error states
        isLoading: false,
        error: null,
        // Methods
        refresh: jest.fn(),
        executeTask: jest.fn(),
        approveAction: jest.fn(),
        pauseAgent: jest.fn(),
        resumeAgent: jest.fn()
    };
    beforeEach(()=>{
        mockUseSession.mockReturnValue({
            data: mockSession,
            status: 'authenticated'
        });
        mockUseSupremeAI.mockReturnValue(mockAIData);
        // Mock fetch for API calls
        global.fetch = jest.fn();
    });
    afterEach(()=>{
        jest.clearAllMocks();
    });
    describe('AI Dashboard Real Data Integration', ()=>{
        it('should load and display Supreme AI v3 status with MCP data', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AIIntelligenceDashboard.AIIntelligenceDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                // Check AI status indicators
                expect(_testutils.screen.getByTestId('ai-status-indicator')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Supreme AI v3')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Online')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Autonomous Mode')).toBeInTheDocument();
                // Check trust level
                expect(_testutils.screen.getByText('85%')).toBeInTheDocument(); // Trust level
                expect(_testutils.screen.getByText('Trust Level')).toBeInTheDocument();
            });
        });
        it('should display real multi-agent coordination data', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MultiAgentDashboard.MultiAgentDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                // Check agent cards
                expect(_testutils.screen.getByText('Customer Intelligence Agent')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Campaign Optimization Agent')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Predictive Analytics Agent')).toBeInTheDocument();
                // Check agent statuses
                expect(_testutils.screen.getAllByText('Active')).toHaveLength(2);
                expect(_testutils.screen.getByText('Idle')).toBeInTheDocument();
                // Check performance metrics
                expect(_testutils.screen.getByText('92%')).toBeInTheDocument(); // Customer Intelligence performance
                expect(_testutils.screen.getByText('88%')).toBeInTheDocument(); // Campaign Optimization performance
            });
        });
        it('should show real AI insights with MCP-derived data', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AIIntelligenceDashboard.AIIntelligenceDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                // Check high-priority insights
                expect(_testutils.screen.getByText('Revenue Optimization Opportunity')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Churn Risk Detected')).toBeInTheDocument();
                // Check confidence levels
                expect(_testutils.screen.getByText('89% confidence')).toBeInTheDocument();
                expect(_testutils.screen.getByText('94% confidence')).toBeInTheDocument();
                // Check expected impact
                expect(_testutils.screen.getByText('$125,000 ARR increase')).toBeInTheDocument();
                expect(_testutils.screen.getByText('$75,000 CLV preservation')).toBeInTheDocument();
            });
        });
        it('should display MCP server connection status', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AIIntelligenceDashboard.AIIntelligenceDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByTestId('mcp-status')).toBeInTheDocument();
                expect(_testutils.screen.getByText('MCP Connected')).toBeInTheDocument();
                expect(_testutils.screen.getByText('leadpulse')).toBeInTheDocument();
                expect(_testutils.screen.getByText('analytics')).toBeInTheDocument();
                expect(_testutils.screen.getByText('campaigns')).toBeInTheDocument();
                // Check data quality indicator
                expect(_testutils.screen.getByText('96%')).toBeInTheDocument(); // Data quality
            });
        });
    });
    describe('Real-time AI Task Execution', ()=>{
        it('should execute AI tasks with real MCP backend integration', async ()=>{
            const mockExecuteTask = jest.fn().mockResolvedValue({
                success: true,
                taskId: 'task_123',
                result: 'Customer segmentation completed'
            });
            mockUseSupremeAI.mockReturnValue({
                ...mockAIData,
                executeTask: mockExecuteTask
            });
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AIIntelligenceDashboard.AIIntelligenceDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                const executeButton = _testutils.screen.getByText('Execute Segmentation');
                _testutils.fireEvent.click(executeButton);
            });
            expect(mockExecuteTask).toHaveBeenCalledWith({
                type: 'customer_segmentation',
                priority: 'high',
                dataSource: 'mcp'
            });
        });
        it('should show real-time task progress updates', async ()=>{
            const mockTaskData = {
                ...mockAIData,
                activeTasks: [
                    {
                        id: 'task_1',
                        type: 'campaign_optimization',
                        status: 'running',
                        progress: 0.67,
                        eta: '2 minutes',
                        agent: 'Campaign Optimization Agent'
                    }
                ]
            };
            mockUseSupremeAI.mockReturnValue(mockTaskData);
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AIIntelligenceDashboard.AIIntelligenceDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByTestId('task-progress')).toBeInTheDocument();
                expect(_testutils.screen.getByText('67%')).toBeInTheDocument(); // Progress
                expect(_testutils.screen.getByText('2 minutes')).toBeInTheDocument(); // ETA
                expect(_testutils.screen.getByText('Campaign Optimization')).toBeInTheDocument();
            });
        });
        it('should handle AI task approval workflow', async ()=>{
            const mockApproveAction = jest.fn();
            mockUseSupremeAI.mockReturnValue({
                ...mockAIData,
                approveAction: mockApproveAction,
                pendingApprovals: [
                    {
                        id: 'approval_1',
                        type: 'campaign_modification',
                        description: 'Modify email campaign subject lines based on engagement data',
                        risk: 'low',
                        expectedImpact: '15% open rate increase'
                    }
                ]
            });
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AIIntelligenceDashboard.AIIntelligenceDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                const approveButton = _testutils.screen.getByText('Approve');
                _testutils.fireEvent.click(approveButton);
            });
            expect(mockApproveAction).toHaveBeenCalledWith('approval_1');
        });
    });
    describe('Performance and Error Handling', ()=>{
        it('should render within performance thresholds', async ()=>{
            const renderTime = await (0, _testutils.measureComponentPerformance)(()=>(0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AIIntelligenceDashboard.AIIntelligenceDashboard, {})), 'AI Intelligence Dashboard');
            expect(renderTime).toBeLessThan(_testutils.PERFORMANCE_THRESHOLDS.COMPONENT_RENDER);
        });
        it('should handle AI service unavailable gracefully', async ()=>{
            const mockErrorData = {
                ...mockAIData,
                status: {
                    ...mockAIData.status,
                    isOnline: false
                },
                error: 'Supreme AI v3 service unavailable',
                mcpStatus: {
                    ...mockAIData.mcpStatus,
                    connected: false
                }
            };
            mockUseSupremeAI.mockReturnValue(mockErrorData);
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AIIntelligenceDashboard.AIIntelligenceDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByRole('alert')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Supreme AI v3 service unavailable')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Offline')).toBeInTheDocument();
            });
        });
        it('should show fallback mode when MCP servers are down', async ()=>{
            const mockFallbackData = {
                ...mockAIData,
                mcpStatus: {
                    connected: false,
                    servers: [],
                    lastSync: null,
                    dataQuality: 0
                },
                error: 'MCP servers unavailable - running in fallback mode'
            };
            mockUseSupremeAI.mockReturnValue(mockFallbackData);
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AIIntelligenceDashboard.AIIntelligenceDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByText('Fallback Mode')).toBeInTheDocument();
                expect(_testutils.screen.getByText('MCP servers unavailable')).toBeInTheDocument();
                expect(_testutils.screen.getByTestId('fallback-indicator')).toBeInTheDocument();
            });
        });
        it('should handle AI task execution failures', async ()=>{
            const mockExecuteTask = jest.fn().mockRejectedValue(new Error('Task execution failed'));
            mockUseSupremeAI.mockReturnValue({
                ...mockAIData,
                executeTask: mockExecuteTask
            });
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AIIntelligenceDashboard.AIIntelligenceDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                const executeButton = _testutils.screen.getByText('Execute Segmentation');
                _testutils.fireEvent.click(executeButton);
            });
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByText('Task execution failed')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Retry')).toBeInTheDocument();
            });
        });
    });
    describe('Mobile and African Market Optimization', ()=>{
        beforeEach(()=>{
            // Mock mobile viewport
            Object.defineProperty(window, 'innerWidth', {
                writable: true,
                configurable: true,
                value: 375
            });
        });
        it('should render mobile-optimized AI dashboard', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AIIntelligenceDashboard.AIIntelligenceDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByTestId('mobile-ai-dashboard')).toBeInTheDocument();
                expect(_testutils.screen.getByTestId('ai-summary-cards')).toHaveClass('mobile-grid');
            });
        });
        it('should prioritize critical insights on mobile', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AIIntelligenceDashboard.AIIntelligenceDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                // Critical insights should be shown first on mobile
                const insights = _testutils.screen.getAllByTestId('ai-insight-card');
                expect(insights[0]).toHaveTextContent('Churn Risk Detected'); // Critical priority
            });
        });
        it('should support offline AI insights caching', async ()=>{
            // Mock offline state
            Object.defineProperty(navigator, 'onLine', {
                writable: true,
                value: false
            });
            const mockOfflineData = {
                ...mockAIData,
                mcpStatus: {
                    ...mockAIData.mcpStatus,
                    connected: false
                },
                cached: true,
                lastSync: new Date(Date.now() - 300000) // 5 minutes ago
            };
            mockUseSupremeAI.mockReturnValue(mockOfflineData);
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AIIntelligenceDashboard.AIIntelligenceDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByText('Offline Mode')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Cached Data (5 min ago)')).toBeInTheDocument();
            });
        });
        it('should display AI costs in Nigerian Naira', async ()=>{
            const mockAIDataWithCosts = {
                ...mockAIData,
                costs: {
                    todaySpend: 8500,
                    monthlyBudget: 250000,
                    avgTaskCost: 150
                }
            };
            mockUseSupremeAI.mockReturnValue(mockAIDataWithCosts);
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AIIntelligenceDashboard.AIIntelligenceDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByText('₦8,500')).toBeInTheDocument(); // Today's spend
                expect(_testutils.screen.getByText('₦250,000')).toBeInTheDocument(); // Monthly budget
            });
        });
    });
    describe('Security and Permissions', ()=>{
        it('should respect AI execution permissions', async ()=>{
            mockUseSession.mockReturnValue({
                data: {
                    ...mockSession,
                    user: {
                        ...mockSession.user,
                        aiPermissions: [
                            'read:ai'
                        ] // No execute permission
                    }
                },
                status: 'authenticated'
            });
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AIIntelligenceDashboard.AIIntelligenceDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                // Execute buttons should be disabled
                const executeButtons = _testutils.screen.getAllByText(/execute/i);
                executeButtons.forEach((button)=>{
                    expect(button).toBeDisabled();
                });
                expect(_testutils.screen.getByText('Insufficient permissions')).toBeInTheDocument();
            });
        });
        it('should show approval required for high-risk tasks', async ()=>{
            const mockHighRiskData = {
                ...mockAIData,
                pendingApprovals: [
                    {
                        id: 'approval_2',
                        type: 'campaign_deletion',
                        description: 'AI suggests deleting underperforming campaign',
                        risk: 'high',
                        expectedImpact: 'Potential revenue loss: $5,000'
                    }
                ]
            };
            mockUseSupremeAI.mockReturnValue(mockHighRiskData);
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AIIntelligenceDashboard.AIIntelligenceDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByTestId('high-risk-approval')).toBeInTheDocument();
                expect(_testutils.screen.getByText('High Risk')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Requires Manual Approval')).toBeInTheDocument();
            });
        });
        it('should audit AI actions for compliance', async ()=>{
            const mockExecuteTask = jest.fn().mockResolvedValue({
                success: true,
                auditId: 'audit_123',
                logged: true
            });
            mockUseSupremeAI.mockReturnValue({
                ...mockAIData,
                executeTask: mockExecuteTask
            });
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AIIntelligenceDashboard.AIIntelligenceDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                const executeButton = _testutils.screen.getByText('Execute Segmentation');
                _testutils.fireEvent.click(executeButton);
            });
            // Should log action for audit trail
            expect(mockExecuteTask).toHaveBeenCalledWith(expect.objectContaining({
                auditRequired: true,
                userId: 'user_123',
                organizationId: 'org_123'
            }));
        });
    });
    describe('AI Analytics and Insights', ()=>{
        it('should display real customer intelligence from AI', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AIIntelligenceDashboard.AIIntelligenceDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                // Customer intelligence metrics
                expect(_testutils.screen.getByText('2,847')).toBeInTheDocument(); // Total customers
                expect(_testutils.screen.getByText('342')).toBeInTheDocument(); // High value customers
                expect(_testutils.screen.getByText('127')).toBeInTheDocument(); // Churn risk
                expect(_testutils.screen.getByText('91%')).toBeInTheDocument(); // Segment accuracy
            });
        });
        it('should show campaign performance insights', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AIIntelligenceDashboard.AIIntelligenceDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                // Campaign metrics
                expect(_testutils.screen.getByText('8')).toBeInTheDocument(); // Active campaigns
                expect(_testutils.screen.getByText('24.5%')).toBeInTheDocument(); // Open rate
                expect(_testutils.screen.getByText('6.8%')).toBeInTheDocument(); // Click rate
                expect(_testutils.screen.getByText('4.2%')).toBeInTheDocument(); // Conversion rate
            });
        });
        it('should integrate LeadPulse analytics with AI insights', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AIIntelligenceDashboard.AIIntelligenceDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                // LeadPulse integration
                expect(_testutils.screen.getByText('23')).toBeInTheDocument(); // Active visitors
                expect(_testutils.screen.getByText('78')).toBeInTheDocument(); // Engagement score
                // Funnel metrics
                expect(_testutils.screen.getByText('1,000')).toBeInTheDocument(); // Top of funnel
                expect(_testutils.screen.getByText('42')).toBeInTheDocument(); // Conversions
                // Traffic sources
                expect(_testutils.screen.getByText('organic')).toBeInTheDocument();
                expect(_testutils.screen.getByText('social')).toBeInTheDocument();
                expect(_testutils.screen.getByText('email')).toBeInTheDocument();
            });
        });
    });
    describe('Accessibility and Usability', ()=>{
        it('should meet accessibility standards', async ()=>{
            const { container } = (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AIIntelligenceDashboard.AIIntelligenceDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                (0, _testutils.checkAccessibility)(container);
            });
            // Check for proper semantic structure
            expect(_testutils.screen.getByRole('main')).toBeInTheDocument();
            expect(_testutils.screen.getByLabelText(/ai dashboard/i)).toBeInTheDocument();
        });
        it('should provide clear AI decision explanations', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AIIntelligenceDashboard.AIIntelligenceDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                // Should explain AI reasoning
                expect(_testutils.screen.getByText('Why this insight?')).toBeInTheDocument();
                expect(_testutils.screen.getByText('Based on 30-day behavioral patterns')).toBeInTheDocument();
            });
        });
        it('should show AI confidence levels clearly', async ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_AIIntelligenceDashboard.AIIntelligenceDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                // Confidence indicators should be visible
                const confidenceIndicators = _testutils.screen.getAllByTestId('confidence-indicator');
                expect(confidenceIndicators.length).toBeGreaterThan(0);
                // High confidence should be green
                expect(_testutils.screen.getByText('94% confidence')).toHaveClass('text-green-600');
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,