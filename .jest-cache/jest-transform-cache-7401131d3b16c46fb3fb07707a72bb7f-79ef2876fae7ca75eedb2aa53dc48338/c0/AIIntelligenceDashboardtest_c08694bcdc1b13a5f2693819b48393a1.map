{"version":3,"sources":["/Users/supreme/Desktop/marketsage/src/__tests__/components/dashboard/AIIntelligenceDashboard.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, screen, fireEvent, waitFor, act } from '../../utils/test-utils';\nimport { useSession } from 'next-auth/react';\nimport { useSupremeAI } from '../../../hooks/useSupremeAI';\nimport { AIIntelligenceDashboard } from '../../../components/leadpulse/AIIntelligenceDashboard';\nimport { MultiAgentDashboard } from '../../../components/dashboard/MultiAgentDashboard';\nimport { \n  measureComponentPerformance, \n  checkAccessibility,\n  PERFORMANCE_THRESHOLDS,\n  createMockHook\n} from '../../utils/test-utils';\n\n// Mock hooks and dependencies\njest.mock('../../../hooks/useSupremeAI');\njest.mock('next-auth/react');\n\nconst mockUseSupremeAI = useSupremeAI as jest.MockedFunction<typeof useSupremeAI>;\nconst mockUseSession = useSession as jest.MockedFunction<typeof useSession>;\n\ndescribe('AI Intelligence Dashboard Integration Tests', () => {\n  // Mock session data with AI permissions\n  const mockSession = {\n    user: {\n      id: 'user_123',\n      email: 'test@marketsage.ai',\n      role: 'admin',\n      organizationId: 'org_123',\n      aiPermissions: ['read:ai', 'execute:ai', 'approve:ai']\n    },\n    expires: '2024-12-31'\n  };\n\n  // Mock AI intelligence data\n  const mockAIData = {\n    // Supreme AI v3 status\n    status: {\n      isOnline: true,\n      mode: 'autonomous',\n      trustLevel: 0.85,\n      activeTasks: 3,\n      completedToday: 47,\n      errorRate: 0.02\n    },\n    \n    // Multi-agent coordination\n    agents: [\n      {\n        id: 'agent_1',\n        name: 'Customer Intelligence Agent',\n        type: 'analytics',\n        status: 'active',\n        currentTask: 'Analyzing customer segments',\n        performance: 0.92,\n        lastAction: '2 minutes ago'\n      },\n      {\n        id: 'agent_2', \n        name: 'Campaign Optimization Agent',\n        type: 'optimization',\n        status: 'active',\n        currentTask: 'Optimizing email campaigns',\n        performance: 0.88,\n        lastAction: '5 minutes ago'\n      },\n      {\n        id: 'agent_3',\n        name: 'Predictive Analytics Agent',\n        type: 'prediction',\n        status: 'idle',\n        currentTask: null,\n        performance: 0.95,\n        lastAction: '30 minutes ago'\n      }\n    ],\n\n    // AI insights and predictions\n    insights: [\n      {\n        id: 'insight_1',\n        type: 'revenue_opportunity',\n        priority: 'high',\n        title: 'Revenue Optimization Opportunity',\n        description: 'Customer segment \"High Value\" shows 23% upsell potential',\n        confidence: 0.89,\n        expectedImpact: '$125,000 ARR increase',\n        actions: ['Create upsell campaign', 'Personalize offers'],\n        timestamp: new Date().toISOString()\n      },\n      {\n        id: 'insight_2',\n        type: 'churn_prevention',\n        priority: 'critical',\n        title: 'Churn Risk Detected',\n        description: '15 high-value customers at critical churn risk',\n        confidence: 0.94,\n        expectedImpact: '$75,000 CLV preservation',\n        actions: ['Immediate retention campaign', 'Personal outreach'],\n        timestamp: new Date().toISOString()\n      }\n    ],\n\n    // MCP integration status\n    mcpStatus: {\n      connected: true,\n      servers: ['leadpulse', 'analytics', 'campaigns'],\n      lastSync: new Date(),\n      dataQuality: 0.96\n    },\n\n    // Real-time analytics\n    analytics: {\n      customerIntelligence: {\n        totalCustomers: 2847,\n        highValueCustomers: 342,\n        churnRisk: 127,\n        segmentAccuracy: 0.91\n      },\n      campaignPerformance: {\n        activeCampaigns: 8,\n        avgOpenRate: 0.245,\n        avgClickRate: 0.068,\n        conversionRate: 0.042\n      },\n      leadPulseMetrics: {\n        activeVisitors: 23,\n        engagementScore: 78,\n        conversionFunnel: [1000, 245, 68, 42],\n        topSources: ['organic', 'social', 'email']\n      }\n    },\n\n    // Error states\n    isLoading: false,\n    error: null,\n    \n    // Methods\n    refresh: jest.fn(),\n    executeTask: jest.fn(),\n    approveAction: jest.fn(),\n    pauseAgent: jest.fn(),\n    resumeAgent: jest.fn()\n  };\n\n  beforeEach(() => {\n    mockUseSession.mockReturnValue({\n      data: mockSession,\n      status: 'authenticated'\n    });\n\n    mockUseSupremeAI.mockReturnValue(mockAIData);\n\n    // Mock fetch for API calls\n    global.fetch = jest.fn();\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('AI Dashboard Real Data Integration', () => {\n    it('should load and display Supreme AI v3 status with MCP data', async () => {\n      render(<AIIntelligenceDashboard />);\n\n      await waitFor(() => {\n        // Check AI status indicators\n        expect(screen.getByTestId('ai-status-indicator')).toBeInTheDocument();\n        expect(screen.getByText('Supreme AI v3')).toBeInTheDocument();\n        expect(screen.getByText('Online')).toBeInTheDocument();\n        expect(screen.getByText('Autonomous Mode')).toBeInTheDocument();\n        \n        // Check trust level\n        expect(screen.getByText('85%')).toBeInTheDocument(); // Trust level\n        expect(screen.getByText('Trust Level')).toBeInTheDocument();\n      });\n    });\n\n    it('should display real multi-agent coordination data', async () => {\n      render(<MultiAgentDashboard />);\n\n      await waitFor(() => {\n        // Check agent cards\n        expect(screen.getByText('Customer Intelligence Agent')).toBeInTheDocument();\n        expect(screen.getByText('Campaign Optimization Agent')).toBeInTheDocument();\n        expect(screen.getByText('Predictive Analytics Agent')).toBeInTheDocument();\n        \n        // Check agent statuses\n        expect(screen.getAllByText('Active')).toHaveLength(2);\n        expect(screen.getByText('Idle')).toBeInTheDocument();\n        \n        // Check performance metrics\n        expect(screen.getByText('92%')).toBeInTheDocument(); // Customer Intelligence performance\n        expect(screen.getByText('88%')).toBeInTheDocument(); // Campaign Optimization performance\n      });\n    });\n\n    it('should show real AI insights with MCP-derived data', async () => {\n      render(<AIIntelligenceDashboard />);\n\n      await waitFor(() => {\n        // Check high-priority insights\n        expect(screen.getByText('Revenue Optimization Opportunity')).toBeInTheDocument();\n        expect(screen.getByText('Churn Risk Detected')).toBeInTheDocument();\n        \n        // Check confidence levels\n        expect(screen.getByText('89% confidence')).toBeInTheDocument();\n        expect(screen.getByText('94% confidence')).toBeInTheDocument();\n        \n        // Check expected impact\n        expect(screen.getByText('$125,000 ARR increase')).toBeInTheDocument();\n        expect(screen.getByText('$75,000 CLV preservation')).toBeInTheDocument();\n      });\n    });\n\n    it('should display MCP server connection status', async () => {\n      render(<AIIntelligenceDashboard />);\n\n      await waitFor(() => {\n        expect(screen.getByTestId('mcp-status')).toBeInTheDocument();\n        expect(screen.getByText('MCP Connected')).toBeInTheDocument();\n        expect(screen.getByText('leadpulse')).toBeInTheDocument();\n        expect(screen.getByText('analytics')).toBeInTheDocument();\n        expect(screen.getByText('campaigns')).toBeInTheDocument();\n        \n        // Check data quality indicator\n        expect(screen.getByText('96%')).toBeInTheDocument(); // Data quality\n      });\n    });\n  });\n\n  describe('Real-time AI Task Execution', () => {\n    it('should execute AI tasks with real MCP backend integration', async () => {\n      const mockExecuteTask = jest.fn().mockResolvedValue({\n        success: true,\n        taskId: 'task_123',\n        result: 'Customer segmentation completed'\n      });\n      \n      mockUseSupremeAI.mockReturnValue({\n        ...mockAIData,\n        executeTask: mockExecuteTask\n      });\n\n      render(<AIIntelligenceDashboard />);\n\n      await waitFor(() => {\n        const executeButton = screen.getByText('Execute Segmentation');\n        fireEvent.click(executeButton);\n      });\n\n      expect(mockExecuteTask).toHaveBeenCalledWith({\n        type: 'customer_segmentation',\n        priority: 'high',\n        dataSource: 'mcp'\n      });\n    });\n\n    it('should show real-time task progress updates', async () => {\n      const mockTaskData = {\n        ...mockAIData,\n        activeTasks: [\n          {\n            id: 'task_1',\n            type: 'campaign_optimization',\n            status: 'running',\n            progress: 0.67,\n            eta: '2 minutes',\n            agent: 'Campaign Optimization Agent'\n          }\n        ]\n      };\n      \n      mockUseSupremeAI.mockReturnValue(mockTaskData);\n\n      render(<AIIntelligenceDashboard />);\n\n      await waitFor(() => {\n        expect(screen.getByTestId('task-progress')).toBeInTheDocument();\n        expect(screen.getByText('67%')).toBeInTheDocument(); // Progress\n        expect(screen.getByText('2 minutes')).toBeInTheDocument(); // ETA\n        expect(screen.getByText('Campaign Optimization')).toBeInTheDocument();\n      });\n    });\n\n    it('should handle AI task approval workflow', async () => {\n      const mockApproveAction = jest.fn();\n      mockUseSupremeAI.mockReturnValue({\n        ...mockAIData,\n        approveAction: mockApproveAction,\n        pendingApprovals: [\n          {\n            id: 'approval_1',\n            type: 'campaign_modification',\n            description: 'Modify email campaign subject lines based on engagement data',\n            risk: 'low',\n            expectedImpact: '15% open rate increase'\n          }\n        ]\n      });\n\n      render(<AIIntelligenceDashboard />);\n\n      await waitFor(() => {\n        const approveButton = screen.getByText('Approve');\n        fireEvent.click(approveButton);\n      });\n\n      expect(mockApproveAction).toHaveBeenCalledWith('approval_1');\n    });\n  });\n\n  describe('Performance and Error Handling', () => {\n    it('should render within performance thresholds', async () => {\n      const renderTime = await measureComponentPerformance(\n        () => render(<AIIntelligenceDashboard />),\n        'AI Intelligence Dashboard'\n      );\n\n      expect(renderTime).toBeLessThan(PERFORMANCE_THRESHOLDS.COMPONENT_RENDER);\n    });\n\n    it('should handle AI service unavailable gracefully', async () => {\n      const mockErrorData = {\n        ...mockAIData,\n        status: {\n          ...mockAIData.status,\n          isOnline: false\n        },\n        error: 'Supreme AI v3 service unavailable',\n        mcpStatus: {\n          ...mockAIData.mcpStatus,\n          connected: false\n        }\n      };\n      \n      mockUseSupremeAI.mockReturnValue(mockErrorData);\n\n      render(<AIIntelligenceDashboard />);\n\n      await waitFor(() => {\n        expect(screen.getByRole('alert')).toBeInTheDocument();\n        expect(screen.getByText('Supreme AI v3 service unavailable')).toBeInTheDocument();\n        expect(screen.getByText('Offline')).toBeInTheDocument();\n      });\n    });\n\n    it('should show fallback mode when MCP servers are down', async () => {\n      const mockFallbackData = {\n        ...mockAIData,\n        mcpStatus: {\n          connected: false,\n          servers: [],\n          lastSync: null,\n          dataQuality: 0\n        },\n        error: 'MCP servers unavailable - running in fallback mode'\n      };\n      \n      mockUseSupremeAI.mockReturnValue(mockFallbackData);\n\n      render(<AIIntelligenceDashboard />);\n\n      await waitFor(() => {\n        expect(screen.getByText('Fallback Mode')).toBeInTheDocument();\n        expect(screen.getByText('MCP servers unavailable')).toBeInTheDocument();\n        expect(screen.getByTestId('fallback-indicator')).toBeInTheDocument();\n      });\n    });\n\n    it('should handle AI task execution failures', async () => {\n      const mockExecuteTask = jest.fn().mockRejectedValue(new Error('Task execution failed'));\n      \n      mockUseSupremeAI.mockReturnValue({\n        ...mockAIData,\n        executeTask: mockExecuteTask\n      });\n\n      render(<AIIntelligenceDashboard />);\n\n      await waitFor(() => {\n        const executeButton = screen.getByText('Execute Segmentation');\n        fireEvent.click(executeButton);\n      });\n\n      await waitFor(() => {\n        expect(screen.getByText('Task execution failed')).toBeInTheDocument();\n        expect(screen.getByText('Retry')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Mobile and African Market Optimization', () => {\n    beforeEach(() => {\n      // Mock mobile viewport\n      Object.defineProperty(window, 'innerWidth', {\n        writable: true,\n        configurable: true,\n        value: 375\n      });\n    });\n\n    it('should render mobile-optimized AI dashboard', async () => {\n      render(<AIIntelligenceDashboard />);\n\n      await waitFor(() => {\n        expect(screen.getByTestId('mobile-ai-dashboard')).toBeInTheDocument();\n        expect(screen.getByTestId('ai-summary-cards')).toHaveClass('mobile-grid');\n      });\n    });\n\n    it('should prioritize critical insights on mobile', async () => {\n      render(<AIIntelligenceDashboard />);\n\n      await waitFor(() => {\n        // Critical insights should be shown first on mobile\n        const insights = screen.getAllByTestId('ai-insight-card');\n        expect(insights[0]).toHaveTextContent('Churn Risk Detected'); // Critical priority\n      });\n    });\n\n    it('should support offline AI insights caching', async () => {\n      // Mock offline state\n      Object.defineProperty(navigator, 'onLine', {\n        writable: true,\n        value: false\n      });\n\n      const mockOfflineData = {\n        ...mockAIData,\n        mcpStatus: {\n          ...mockAIData.mcpStatus,\n          connected: false\n        },\n        cached: true,\n        lastSync: new Date(Date.now() - 300000) // 5 minutes ago\n      };\n      \n      mockUseSupremeAI.mockReturnValue(mockOfflineData);\n\n      render(<AIIntelligenceDashboard />);\n\n      await waitFor(() => {\n        expect(screen.getByText('Offline Mode')).toBeInTheDocument();\n        expect(screen.getByText('Cached Data (5 min ago)')).toBeInTheDocument();\n      });\n    });\n\n    it('should display AI costs in Nigerian Naira', async () => {\n      const mockAIDataWithCosts = {\n        ...mockAIData,\n        costs: {\n          todaySpend: 8500, // In Naira\n          monthlyBudget: 250000,\n          avgTaskCost: 150\n        }\n      };\n      \n      mockUseSupremeAI.mockReturnValue(mockAIDataWithCosts);\n\n      render(<AIIntelligenceDashboard />);\n\n      await waitFor(() => {\n        expect(screen.getByText('₦8,500')).toBeInTheDocument(); // Today's spend\n        expect(screen.getByText('₦250,000')).toBeInTheDocument(); // Monthly budget\n      });\n    });\n  });\n\n  describe('Security and Permissions', () => {\n    it('should respect AI execution permissions', async () => {\n      mockUseSession.mockReturnValue({\n        data: {\n          ...mockSession,\n          user: {\n            ...mockSession.user,\n            aiPermissions: ['read:ai'] // No execute permission\n          }\n        },\n        status: 'authenticated'\n      });\n\n      render(<AIIntelligenceDashboard />);\n\n      await waitFor(() => {\n        // Execute buttons should be disabled\n        const executeButtons = screen.getAllByText(/execute/i);\n        executeButtons.forEach(button => {\n          expect(button).toBeDisabled();\n        });\n        \n        expect(screen.getByText('Insufficient permissions')).toBeInTheDocument();\n      });\n    });\n\n    it('should show approval required for high-risk tasks', async () => {\n      const mockHighRiskData = {\n        ...mockAIData,\n        pendingApprovals: [\n          {\n            id: 'approval_2',\n            type: 'campaign_deletion',\n            description: 'AI suggests deleting underperforming campaign',\n            risk: 'high',\n            expectedImpact: 'Potential revenue loss: $5,000'\n          }\n        ]\n      };\n      \n      mockUseSupremeAI.mockReturnValue(mockHighRiskData);\n\n      render(<AIIntelligenceDashboard />);\n\n      await waitFor(() => {\n        expect(screen.getByTestId('high-risk-approval')).toBeInTheDocument();\n        expect(screen.getByText('High Risk')).toBeInTheDocument();\n        expect(screen.getByText('Requires Manual Approval')).toBeInTheDocument();\n      });\n    });\n\n    it('should audit AI actions for compliance', async () => {\n      const mockExecuteTask = jest.fn().mockResolvedValue({\n        success: true,\n        auditId: 'audit_123',\n        logged: true\n      });\n      \n      mockUseSupremeAI.mockReturnValue({\n        ...mockAIData,\n        executeTask: mockExecuteTask\n      });\n\n      render(<AIIntelligenceDashboard />);\n\n      await waitFor(() => {\n        const executeButton = screen.getByText('Execute Segmentation');\n        fireEvent.click(executeButton);\n      });\n\n      // Should log action for audit trail\n      expect(mockExecuteTask).toHaveBeenCalledWith(\n        expect.objectContaining({\n          auditRequired: true,\n          userId: 'user_123',\n          organizationId: 'org_123'\n        })\n      );\n    });\n  });\n\n  describe('AI Analytics and Insights', () => {\n    it('should display real customer intelligence from AI', async () => {\n      render(<AIIntelligenceDashboard />);\n\n      await waitFor(() => {\n        // Customer intelligence metrics\n        expect(screen.getByText('2,847')).toBeInTheDocument(); // Total customers\n        expect(screen.getByText('342')).toBeInTheDocument(); // High value customers\n        expect(screen.getByText('127')).toBeInTheDocument(); // Churn risk\n        expect(screen.getByText('91%')).toBeInTheDocument(); // Segment accuracy\n      });\n    });\n\n    it('should show campaign performance insights', async () => {\n      render(<AIIntelligenceDashboard />);\n\n      await waitFor(() => {\n        // Campaign metrics\n        expect(screen.getByText('8')).toBeInTheDocument(); // Active campaigns\n        expect(screen.getByText('24.5%')).toBeInTheDocument(); // Open rate\n        expect(screen.getByText('6.8%')).toBeInTheDocument(); // Click rate\n        expect(screen.getByText('4.2%')).toBeInTheDocument(); // Conversion rate\n      });\n    });\n\n    it('should integrate LeadPulse analytics with AI insights', async () => {\n      render(<AIIntelligenceDashboard />);\n\n      await waitFor(() => {\n        // LeadPulse integration\n        expect(screen.getByText('23')).toBeInTheDocument(); // Active visitors\n        expect(screen.getByText('78')).toBeInTheDocument(); // Engagement score\n        \n        // Funnel metrics\n        expect(screen.getByText('1,000')).toBeInTheDocument(); // Top of funnel\n        expect(screen.getByText('42')).toBeInTheDocument(); // Conversions\n        \n        // Traffic sources\n        expect(screen.getByText('organic')).toBeInTheDocument();\n        expect(screen.getByText('social')).toBeInTheDocument();\n        expect(screen.getByText('email')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Accessibility and Usability', () => {\n    it('should meet accessibility standards', async () => {\n      const { container } = render(<AIIntelligenceDashboard />);\n\n      await waitFor(() => {\n        checkAccessibility(container);\n      });\n\n      // Check for proper semantic structure\n      expect(screen.getByRole('main')).toBeInTheDocument();\n      expect(screen.getByLabelText(/ai dashboard/i)).toBeInTheDocument();\n    });\n\n    it('should provide clear AI decision explanations', async () => {\n      render(<AIIntelligenceDashboard />);\n\n      await waitFor(() => {\n        // Should explain AI reasoning\n        expect(screen.getByText('Why this insight?')).toBeInTheDocument();\n        expect(screen.getByText('Based on 30-day behavioral patterns')).toBeInTheDocument();\n      });\n    });\n\n    it('should show AI confidence levels clearly', async () => {\n      render(<AIIntelligenceDashboard />);\n\n      await waitFor(() => {\n        // Confidence indicators should be visible\n        const confidenceIndicators = screen.getAllByTestId('confidence-indicator');\n        expect(confidenceIndicators.length).toBeGreaterThan(0);\n        \n        // High confidence should be green\n        expect(screen.getByText('94% confidence')).toHaveClass('text-green-600');\n      });\n    });\n  });\n});"],"names":["jest","mock","mockUseSupremeAI","useSupremeAI","mockUseSession","useSession","describe","mockSession","user","id","email","role","organizationId","aiPermissions","expires","mockAIData","status","isOnline","mode","trustLevel","activeTasks","completedToday","errorRate","agents","name","type","currentTask","performance","lastAction","insights","priority","title","description","confidence","expectedImpact","actions","timestamp","Date","toISOString","mcpStatus","connected","servers","lastSync","dataQuality","analytics","customerIntelligence","totalCustomers","highValueCustomers","churnRisk","segmentAccuracy","campaignPerformance","activeCampaigns","avgOpenRate","avgClickRate","conversionRate","leadPulseMetrics","activeVisitors","engagementScore","conversionFunnel","topSources","isLoading","error","refresh","fn","executeTask","approveAction","pauseAgent","resumeAgent","beforeEach","mockReturnValue","data","global","fetch","afterEach","clearAllMocks","it","render","AIIntelligenceDashboard","waitFor","expect","screen","getByTestId","toBeInTheDocument","getByText","MultiAgentDashboard","getAllByText","toHaveLength","mockExecuteTask","mockResolvedValue","success","taskId","result","executeButton","fireEvent","click","toHaveBeenCalledWith","dataSource","mockTaskData","progress","eta","agent","mockApproveAction","pendingApprovals","risk","approveButton","renderTime","measureComponentPerformance","toBeLessThan","PERFORMANCE_THRESHOLDS","COMPONENT_RENDER","mockErrorData","getByRole","mockFallbackData","mockRejectedValue","Error","Object","defineProperty","window","writable","configurable","value","toHaveClass","getAllByTestId","toHaveTextContent","navigator","mockOfflineData","cached","now","mockAIDataWithCosts","costs","todaySpend","monthlyBudget","avgTaskCost","executeButtons","forEach","button","toBeDisabled","mockHighRiskData","auditId","logged","objectContaining","auditRequired","userId","container","checkAccessibility","getByLabelText","confidenceIndicators","length","toBeGreaterThan"],"mappings":"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"}