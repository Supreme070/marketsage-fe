version: '3.8'

services:
  # Frontend application with integrated MCP servers
  marketsage-frontend:
    container_name: marketsage-frontend
    build:
      context: .
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-production}
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
      # MCP Server ports
      - "3001:3001"  # Customer Data MCP
      - "3002:3002"  # Campaign Analytics MCP
      - "3003:3003"  # LeadPulse MCP
      - "3004:3004"  # External Services MCP
      - "3005:3005"  # Monitoring MCP
    env_file:
      - .env
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - NEXT_PUBLIC_USE_API_ONLY=true
      - NEXT_PUBLIC_BACKEND_URL=${NEXT_PUBLIC_BACKEND_URL}
      - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL}
      - NEXT_PUBLIC_ADMIN_URL=${NEXT_PUBLIC_ADMIN_URL}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      
      # MCP Configuration
      - MCP_ENABLED=true
      - MCP_CUSTOMER_DATA_ENABLED=true
      - MCP_CAMPAIGN_ANALYTICS_ENABLED=true
      - MCP_LEADPULSE_ENABLED=true
      - MCP_EXTERNAL_SERVICES_ENABLED=true
      - MCP_MONITORING_ENABLED=true
      
      # External backend connection for MCP data
      - DATABASE_URL=postgresql://marketsage:marketsage_password@host.docker.internal:5432/marketsage?schema=public
      - REDIS_URL=redis://host.docker.internal:6379
      
    networks:
      - marketsage-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -f http://localhost:3000/api/health && curl -f http://localhost:3001/health && curl -f http://localhost:3002/health && curl -f http://localhost:3003/health && curl -f http://localhost:3004/health && curl -f http://localhost:3005/health"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s
    # Enhanced startup command with MCP servers
    command: >
      sh -c "
        echo 'üöÄ Starting MarketSage Frontend with MCP Servers...' &&
        
        if [ \"$$NODE_ENV\" = \"production\" ]; then
          echo 'üè≠ Production mode: Starting with integrated MCP servers...' &&
          npm run start:with-mcp
        else
          echo 'üîß Development mode: Starting MCP servers in background...' &&
          npx tsx src/scripts/start-mcp-servers-only.ts &
          
          echo '‚è≥ Waiting for MCP servers to initialize...' &&
          sleep 15 &&
          
          echo 'üåê Starting Next.js development server...' &&
          npm run dev
        fi
      "
    profiles:
      - frontend
      - all

  # Database for development (optional for production)
  postgres:
    image: postgres:15-alpine
    container_name: marketsage-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-marketsage}
      POSTGRES_USER: ${POSTGRES_USER:-marketsage}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-marketsage_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - marketsage-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-marketsage} -d ${POSTGRES_DB:-marketsage}"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - db
      - all

  # Valkey cache (Redis alternative)
  valkey:
    image: valkey/valkey:8-alpine
    container_name: marketsage-valkey
    command: valkey-server --maxmemory 512mb --maxmemory-policy allkeys-lru --appendonly yes ${REDIS_PASSWORD:+--requirepass $REDIS_PASSWORD}
    volumes:
      - valkey_data:/data
    ports:
      - "${REDIS_PORT:-6380}:6379"
    networks:
      - marketsage-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "valkey-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    profiles:
      - cache
      - all

  # Nginx reverse proxy (optional for production)
  nginx:
    image: nginx:alpine
    container_name: marketsage-nginx
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - marketsage-frontend
    networks:
      - marketsage-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - proxy
      - production

volumes:
  postgres_data:
    driver: local
  valkey_data:
    driver: local

networks:
  marketsage-network:
    driver: bridge
    name: marketsage_${NODE_ENV:-development}
    ipam:
      config:
        - subnet: 172.20.0.0/16